{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Please show the police forces and the number of counties with each police force.", "sql": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force", "example": {"db_id": "county_public_safety", "query": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force", "query_toks": ["SELECT", "Police_force", ",", "COUNT", "(", "*", ")", "FROM", "county_public_safety", "GROUP", "BY", "Police_force"], "query_toks_no_value": ["select", "police_force", ",", "count", "(", "*", ")", "from", "county_public_safety", "group", "by", "police_force"], "question": "Please show the police forces and the number of counties with each police force.", "question_toks": ["Please", "show", "the", "police", "forces", "and", "the", "number", "of", "counties", "with", "each", "police", "force", "."], "dataset_name": "spider", "guid": 2169}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What are the ids and names of the battles that led to more than 10 people killed in total.", "sql": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "example": {"db_id": "battle_death", "query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "JOIN", "death", "AS", "T3", "ON", "T2.id", "=", "T3.caused_by_ship_id", "GROUP", "BY", "T1.id", "HAVING", "sum", "(", "T3.killed", ")", ">", "10"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "join", "death", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "caused_by_ship_id", "group", "by", "t1", ".", "id", "having", "sum", "(", "t3", ".", "killed", ")", ">", "value"], "question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "the", "battles", "that", "led", "to", "more", "than", "10", "people", "killed", "in", "total", "."], "dataset_name": "spider", "guid": 2170}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the first names of teachers whose email address contains the word \"man\".", "sql": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'", "example": {"db_id": "behavior_monitoring", "query": "SELECT first_name FROM Teachers WHERE email_address LIKE '%man%'", "query_toks": ["SELECT", "first_name", "FROM", "Teachers", "WHERE", "email_address", "LIKE", "'", "%", "man", "%", "'"], "query_toks_no_value": ["select", "first_name", "from", "teachers", "where", "email_address", "like", "value"], "question": "Find the first names of teachers whose email address contains the word \"man\".", "question_toks": ["Find", "the", "first", "names", "of", "teachers", "whose", "email", "address", "contains", "the", "word", "``", "man", "''", "."], "dataset_name": "spider", "guid": 2171}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?", "sql": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"", "example": {"db_id": "wine_1", "query": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"", "query_toks": ["SELECT", "AVG", "(", "Price", ")", ",", "AVG", "(", "Cases", ")", "FROM", "WINE", "WHERE", "YEAR", "=", "2009", "AND", "Grape", "=", "``", "Zinfandel", "''"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "avg", "(", "cases", ")", "from", "wine", "where", "year", "=", "value", "and", "grape", "=", "value"], "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?", "question_toks": ["What", "are", "the", "average", "prices", "and", "cases", "of", "wines", "produced", "in", "the", "year", "of", "2009", "and", "made", "of", "Zinfandel", "grape", "?"], "dataset_name": "spider", "guid": 2172}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the names of wines with prices above any wine produced in 2006.", "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "Price", ">", "(", "SELECT", "max", "(", "Price", ")", "FROM", "WINE", "WHERE", "YEAR", "=", "2006", ")"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "price", ">", "(", "select", "max", "(", "price", ")", "from", "wine", "where", "year", "=", "value", ")"], "question": "Give the names of wines with prices above any wine produced in 2006.", "question_toks": ["Give", "the", "names", "of", "wines", "with", "prices", "above", "any", "wine", "produced", "in", "2006", "."], "dataset_name": "spider", "guid": 2173}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Count the number of wines produced at Robert Biale winery.", "sql": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"", "example": {"db_id": "wine_1", "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "WINE", "WHERE", "Winery", "=", "``", "Robert", "Biale", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "wine", "where", "winery", "=", "value"], "question": "Count the number of wines produced at Robert Biale winery.", "question_toks": ["Count", "the", "number", "of", "wines", "produced", "at", "Robert", "Biale", "winery", "."], "dataset_name": "spider", "guid": 2174}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | How many distinct incident type codes are there?", "sql": "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident", "example": {"db_id": "behavior_monitoring", "query": "SELECT count(DISTINCT incident_type_code) FROM Behavior_Incident", "query_toks": ["SELECT", "count", "(", "DISTINCT", "incident_type_code", ")", "FROM", "Behavior_Incident"], "query_toks_no_value": ["select", "count", "(", "distinct", "incident_type_code", ")", "from", "behavior_incident"], "question": "How many distinct incident type codes are there?", "question_toks": ["How", "many", "distinct", "incident", "type", "codes", "are", "there", "?"], "dataset_name": "spider", "guid": 2175}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | What is the description of the type of the company who concluded its contracts most recently?", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code  =  T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1", "query_toks": ["SELECT", "T1.company_name", "FROM", "Third_Party_Companies", "AS", "T1", "JOIN", "Maintenance_Contracts", "AS", "T2", "ON", "T1.company_id", "=", "T2.maintenance_contract_company_id", "JOIN", "Ref_Company_Types", "AS", "T3", "ON", "T1.company_type_code", "=", "T3.company_type_code", "ORDER", "BY", "T2.contract_end_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "company_name", "from", "third_party_companies", "as", "t1", "join", "maintenance_contracts", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "maintenance_contract_company_id", "join", "ref_company_types", "as", "t3", "on", "t1", ".", "company_type_code", "=", "t3", ".", "company_type_code", "order", "by", "t2", ".", "contract_end_date", "desc", "limit", "value"], "question": "What is the description of the type of the company who concluded its contracts most recently?", "question_toks": ["What", "is", "the", "description", "of", "the", "type", "of", "the", "company", "who", "concluded", "its", "contracts", "most", "recently", "?"], "dataset_name": "spider", "guid": 2176}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What is the average number of injuries caused each time?", "sql": "SELECT avg(injured) FROM death", "example": {"db_id": "battle_death", "query": "SELECT avg(injured) FROM death", "query_toks": ["SELECT", "avg", "(", "injured", ")", "FROM", "death"], "query_toks_no_value": ["select", "avg", "(", "injured", ")", "from", "death"], "question": "What is the average number of injuries caused each time?", "question_toks": ["What", "is", "the", "average", "number", "of", "injuries", "caused", "each", "time", "?"], "dataset_name": "spider", "guid": 2177}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What is the zip code of the address where the teacher with first name \"Lyla\" lives?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T2.first_name  =  \"Lyla\"", "query_toks": ["SELECT", "T1.zip_postcode", "FROM", "Addresses", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T2.first_name", "=", "``", "Lyla", "''"], "query_toks_no_value": ["select", "t1", ".", "zip_postcode", "from", "addresses", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "first_name", "=", "value"], "question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?", "question_toks": ["What", "is", "the", "zip", "code", "of", "the", "address", "where", "the", "teacher", "with", "first", "name", "``", "Lyla", "''", "lives", "?"], "dataset_name": "spider", "guid": 2178}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the statuses and average populations of each city?", "sql": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "example": {"db_id": "farm", "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "query_toks": ["SELECT", "Status", ",", "avg", "(", "Population", ")", "FROM", "city", "GROUP", "BY", "Status"], "query_toks_no_value": ["select", "status", ",", "avg", "(", "population", ")", "from", "city", "group", "by", "status"], "question": "What are the statuses and average populations of each city?", "question_toks": ["What", "are", "the", "statuses", "and", "average", "populations", "of", "each", "city", "?"], "dataset_name": "spider", "guid": 2179}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?", "sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005", "example": {"db_id": "wine_1", "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005", "query_toks": ["SELECT", "max", "(", "T2.Price", ")", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.Area", "=", "``", "Central", "Coast", "''", "AND", "T2.year", "<", "2005"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "price", ")", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "area", "=", "value", "and", "t2", ".", "year", "<", "value"], "question": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?", "question_toks": ["What", "is", "the", "maximum", "price", "of", "wines", "from", "the", "appelation", "in", "the", "Central", "Coast", "area", ",", "which", "was", "produced", "before", "2005", "?"], "dataset_name": "spider", "guid": 2180}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the line 1 and average monthly rentals of all student addresses?", "sql": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.line_1 ,  avg(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id", "query_toks": ["SELECT", "T1.line_1", ",", "avg", "(", "T2.monthly_rental", ")", "FROM", "Addresses", "AS", "T1", "JOIN", "Student_Addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "GROUP", "BY", "T2.address_id"], "query_toks_no_value": ["select", "t1", ".", "line_1", ",", "avg", "(", "t2", ".", "monthly_rental", ")", "from", "addresses", "as", "t1", "join", "student_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "group", "by", "t2", ".", "address_id"], "question": "What are the line 1 and average monthly rentals of all student addresses?", "question_toks": ["What", "are", "the", "line", "1", "and", "average", "monthly", "rentals", "of", "all", "student", "addresses", "?"], "dataset_name": "spider", "guid": 2181}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the neames of wines with prices below 50 and with appelations in Monterey county.", "sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50", "example": {"db_id": "wine_1", "query": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50", "query_toks": ["SELECT", "T2.Name", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.County", "=", "``", "Monterey", "''", "AND", "T2.price", "<", "50"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "county", "=", "value", "and", "t2", ".", "price", "<", "value"], "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.", "question_toks": ["Give", "the", "neames", "of", "wines", "with", "prices", "below", "50", "and", "with", "appelations", "in", "Monterey", "county", "."], "dataset_name": "spider", "guid": 2182}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | List official names of cities in descending order of population.", "sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "example": {"db_id": "farm", "query": "SELECT Official_Name FROM city ORDER BY Population DESC", "query_toks": ["SELECT", "Official_Name", "FROM", "city", "ORDER", "BY", "Population", "DESC"], "query_toks_no_value": ["select", "official_name", "from", "city", "order", "by", "population", "desc"], "question": "List official names of cities in descending order of population.", "question_toks": ["List", "official", "names", "of", "cities", "in", "descending", "order", "of", "population", "."], "dataset_name": "spider", "guid": 2183}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show names of technicians who are assigned to repair machines with value point more than 70.", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "example": {"db_id": "machine_repair", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "query_toks": ["SELECT", "T3.Name", "FROM", "repair_assignment", "AS", "T1", "JOIN", "machine", "AS", "T2", "ON", "T1.machine_id", "=", "T2.machine_id", "JOIN", "technician", "AS", "T3", "ON", "T1.technician_ID", "=", "T3.technician_ID", "WHERE", "T2.value_points", ">", "70"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "repair_assignment", "as", "t1", "join", "machine", "as", "t2", "on", "t1", ".", "machine_id", "=", "t2", ".", "machine_id", "join", "technician", "as", "t3", "on", "t1", ".", "technician_id", "=", "t3", ".", "technician_id", "where", "t2", ".", "value_points", ">", "value"], "question": "Show names of technicians who are assigned to repair machines with value point more than 70.", "question_toks": ["Show", "names", "of", "technicians", "who", "are", "assigned", "to", "repair", "machines", "with", "value", "point", "more", "than", "70", "."], "dataset_name": "spider", "guid": 2184}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | List the name of technicians whose team is not \"NYY\".", "sql": "SELECT Name FROM technician WHERE Team != \"NYY\"", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician WHERE Team != \"NYY\"", "query_toks": ["SELECT", "Name", "FROM", "technician", "WHERE", "Team", "!", "=", "``", "NYY", "''"], "query_toks_no_value": ["select", "name", "from", "technician", "where", "team", "!", "=", "value"], "question": "List the name of technicians whose team is not \"NYY\".", "question_toks": ["List", "the", "name", "of", "technicians", "whose", "team", "is", "not", "``", "NYY", "''", "."], "dataset_name": "spider", "guid": 2185}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | How many cities are in counties that have populations of over 20000?", "sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "example": {"db_id": "county_public_safety", "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "city", "WHERE", "county_ID", "IN", "(", "SELECT", "county_ID", "FROM", "county_public_safety", "WHERE", "population", ">", "20000", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "city", "where", "county_id", "in", "(", "select", "county_id", "from", "county_public_safety", "where", "population", ">", "value", ")"], "question": "How many cities are in counties that have populations of over 20000?", "question_toks": ["How", "many", "cities", "are", "in", "counties", "that", "have", "populations", "of", "over", "20000", "?"], "dataset_name": "spider", "guid": 2186}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the wines that have prices higher than 50 and made of Red color grapes?", "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50", "example": {"db_id": "wine_1", "query": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50", "query_toks": ["SELECT", "T2.Name", "FROM", "Grapes", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "Red", "''", "AND", "T2.price", ">", "50"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value", "and", "t2", ".", "price", ">", "value"], "question": "What are the wines that have prices higher than 50 and made of Red color grapes?", "question_toks": ["What", "are", "the", "wines", "that", "have", "prices", "higher", "than", "50", "and", "made", "of", "Red", "color", "grapes", "?"], "dataset_name": "spider", "guid": 2187}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?", "sql": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "example": {"db_id": "county_public_safety", "query": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "query_toks": ["SELECT", "T1.White", ",", "T2.Crime_rate", "FROM", "city", "AS", "T1", "JOIN", "county_public_safety", "AS", "T2", "ON", "T1.County_ID", "=", "T2.County_ID"], "query_toks_no_value": ["select", "t1", ".", "white", ",", "t2", ".", "crime_rate", "from", "city", "as", "t1", "join", "county_public_safety", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "county_id"], "question": "What are the white percentages of cities, and the corresponding crime rates of the counties they correspond to?", "question_toks": ["What", "are", "the", "white", "percentages", "of", "cities", ",", "and", "the", "corresponding", "crime", "rates", "of", "the", "counties", "they", "correspond", "to", "?"], "dataset_name": "spider", "guid": 2188}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?", "sql": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'", "example": {"db_id": "game_injury", "query": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'", "query_toks": ["SELECT", "T1.season", ",", "T2.name", "FROM", "game", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.id", "JOIN", "injury_accident", "AS", "T3", "ON", "T1.id", "=", "T3.game_id", "WHERE", "T3.injury", "=", "'Foot", "injury", "'", "OR", "T3.injury", "=", "'Knee", "problem", "'"], "query_toks_no_value": ["select", "t1", ".", "season", ",", "t2", ".", "name", "from", "game", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "id", "join", "injury_accident", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "game_id", "where", "t3", ".", "injury", "=", "value", "or", "t3", ".", "injury", "=", "value"], "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?", "question_toks": ["In", "which", "season", "and", "which", "stadium", "did", "any", "player", "have", "an", "injury", "of", "'Foot", "injury", "'", "or", "'Knee", "problem", "'", "?"], "dataset_name": "spider", "guid": 2189}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the official names of cities that have population over 1500 or less than 500?", "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "example": {"db_id": "farm", "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "query_toks": ["SELECT", "Official_Name", "FROM", "city", "WHERE", "Population", ">", "1500", "OR", "Population", "<", "500"], "query_toks_no_value": ["select", "official_name", "from", "city", "where", "population", ">", "value", "or", "population", "<", "value"], "question": "What are the official names of cities that have population over 1500 or less than 500?", "question_toks": ["What", "are", "the", "official", "names", "of", "cities", "that", "have", "population", "over", "1500", "or", "less", "than", "500", "?"], "dataset_name": "spider", "guid": 2190}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the wines that have prices lower than 50 and have appelations in Monterey county?", "sql": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50", "example": {"db_id": "wine_1", "query": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50", "query_toks": ["SELECT", "T2.Name", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.County", "=", "``", "Monterey", "''", "AND", "T2.price", "<", "50"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "county", "=", "value", "and", "t2", ".", "price", "<", "value"], "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?", "question_toks": ["What", "are", "the", "wines", "that", "have", "prices", "lower", "than", "50", "and", "have", "appelations", "in", "Monterey", "county", "?"], "dataset_name": "spider", "guid": 2191}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the id and last name of the student that has the most behavior incidents?", "sql": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.student_id ,  T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_id", ",", "T2.last_name", "FROM", "Behavior_Incident", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "last_name", "from", "behavior_incident", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the id and last name of the student that has the most behavior incidents?", "question_toks": ["Find", "the", "id", "and", "last", "name", "of", "the", "student", "that", "has", "the", "most", "behavior", "incidents", "?"], "dataset_name": "spider", "guid": 2192}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines made from red grapes and with prices above 50?", "sql": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50", "example": {"db_id": "wine_1", "query": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50", "query_toks": ["SELECT", "T2.Name", "FROM", "Grapes", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "Red", "''", "AND", "T2.price", ">", "50"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value", "and", "t2", ".", "price", ">", "value"], "question": "What are the names of wines made from red grapes and with prices above 50?", "question_toks": ["What", "are", "the", "names", "of", "wines", "made", "from", "red", "grapes", "and", "with", "prices", "above", "50", "?"], "dataset_name": "spider", "guid": 2193}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | Find the id and name of the stadium where the largest number of injury accidents occurred.", "sql": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "game_injury", "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "stadium", "AS", "T1", "JOIN", "game", "AS", "T2", "ON", "T1.id", "=", "T2.stadium_id", "JOIN", "injury_accident", "AS", "T3", "ON", "T2.id", "=", "T3.game_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "stadium", "as", "t1", "join", "game", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "join", "injury_accident", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "game_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.", "question_toks": ["Find", "the", "id", "and", "name", "of", "the", "stadium", "where", "the", "largest", "number", "of", "injury", "accidents", "occurred", "."], "dataset_name": "spider", "guid": 2194}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the average price for wines not produced in Sonoma county?", "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "example": {"db_id": "wine_1", "query": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "query_toks": ["SELECT", "avg", "(", "price", ")", "FROM", "wine", "WHERE", "Appelation", "NOT", "IN", "(", "SELECT", "T1.Appelation", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.County", "=", "'Sonoma", "'", ")"], "query_toks_no_value": ["select", "avg", "(", "price", ")", "from", "wine", "where", "appelation", "not", "in", "(", "select", "t1", ".", "appelation", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "county", "=", "value", ")"], "question": "What is the average price for wines not produced in Sonoma county?", "question_toks": ["What", "is", "the", "average", "price", "for", "wines", "not", "produced", "in", "Sonoma", "county", "?"], "dataset_name": "spider", "guid": 2195}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show different teams of technicians and the number of technicians in each team.", "sql": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "example": {"db_id": "machine_repair", "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "query_toks": ["SELECT", "Team", ",", "COUNT", "(", "*", ")", "FROM", "technician", "GROUP", "BY", "Team"], "query_toks_no_value": ["select", "team", ",", "count", "(", "*", ")", "from", "technician", "group", "by", "team"], "question": "Show different teams of technicians and the number of technicians in each team.", "question_toks": ["Show", "different", "teams", "of", "technicians", "and", "the", "number", "of", "technicians", "in", "each", "team", "."], "dataset_name": "spider", "guid": 2196}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Return the cell phone number and email address for all students.", "sql": "SELECT cell_mobile_number ,  email_address FROM STUDENTS", "example": {"db_id": "behavior_monitoring", "query": "SELECT cell_mobile_number ,  email_address FROM STUDENTS", "query_toks": ["SELECT", "cell_mobile_number", ",", "email_address", "FROM", "STUDENTS"], "query_toks_no_value": ["select", "cell_mobile_number", ",", "email_address", "from", "students"], "question": "Return the cell phone number and email address for all students.", "question_toks": ["Return", "the", "cell", "phone", "number", "and", "email", "address", "for", "all", "students", "."], "dataset_name": "spider", "guid": 2197}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What is the team and starting year for each technician?", "sql": "SELECT Team ,  Starting_Year FROM technician", "example": {"db_id": "machine_repair", "query": "SELECT Team ,  Starting_Year FROM technician", "query_toks": ["SELECT", "Team", ",", "Starting_Year", "FROM", "technician"], "query_toks_no_value": ["select", "team", ",", "starting_year", "from", "technician"], "question": "What is the team and starting year for each technician?", "question_toks": ["What", "is", "the", "team", "and", "starting", "year", "for", "each", "technician", "?"], "dataset_name": "spider", "guid": 2198}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give me the average prices of wines that are produced by appelations in Sonoma County.", "sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"", "example": {"db_id": "wine_1", "query": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"", "query_toks": ["SELECT", "AVG", "(", "T2.Price", ")", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.County", "=", "``", "Sonoma", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "price", ")", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "county", "=", "value"], "question": "Give me the average prices of wines that are produced by appelations in Sonoma County.", "question_toks": ["Give", "me", "the", "average", "prices", "of", "wines", "that", "are", "produced", "by", "appelations", "in", "Sonoma", "County", "."], "dataset_name": "spider", "guid": 2199}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the average prices of wines for different years?", "sql": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR", "example": {"db_id": "wine_1", "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR", "query_toks": ["SELECT", "avg", "(", "Price", ")", ",", "YEAR", "FROM", "WINE", "GROUP", "BY", "YEAR"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "year", "from", "wine", "group", "by", "year"], "question": "What are the average prices of wines for different years?", "question_toks": ["What", "are", "the", "average", "prices", "of", "wines", "for", "different", "years", "?"], "dataset_name": "spider", "guid": 2200}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the heights of perpetrators in descending order of the number of people they injured?", "sql": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC", "example": {"db_id": "perpetrator", "query": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC", "query_toks": ["SELECT", "T1.Height", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Injured", "DESC"], "query_toks_no_value": ["select", "t1", ".", "height", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "injured", "desc"], "question": "What are the heights of perpetrators in descending order of the number of people they injured?", "question_toks": ["What", "are", "the", "heights", "of", "perpetrators", "in", "descending", "order", "of", "the", "number", "of", "people", "they", "injured", "?"], "dataset_name": "spider", "guid": 2201}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show all opening years and the number of churches that opened in that year.", "sql": "SELECT open_date ,  count(*) FROM church GROUP BY open_date", "example": {"db_id": "wedding", "query": "SELECT open_date ,  count(*) FROM church GROUP BY open_date", "query_toks": ["SELECT", "open_date", ",", "count", "(", "*", ")", "FROM", "church", "GROUP", "BY", "open_date"], "query_toks_no_value": ["select", "open_date", ",", "count", "(", "*", ")", "from", "church", "group", "by", "open_date"], "question": "Show all opening years and the number of churches that opened in that year.", "question_toks": ["Show", "all", "opening", "years", "and", "the", "number", "of", "churches", "that", "opened", "in", "that", "year", "."], "dataset_name": "spider", "guid": 2202}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the maximum and minimum monthly rental for all student addresses.", "sql": "SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses", "example": {"db_id": "behavior_monitoring", "query": "SELECT max(monthly_rental) ,  min(monthly_rental) FROM Student_Addresses", "query_toks": ["SELECT", "max", "(", "monthly_rental", ")", ",", "min", "(", "monthly_rental", ")", "FROM", "Student_Addresses"], "query_toks_no_value": ["select", "max", "(", "monthly_rental", ")", ",", "min", "(", "monthly_rental", ")", "from", "student_addresses"], "question": "Find the maximum and minimum monthly rental for all student addresses.", "question_toks": ["Find", "the", "maximum", "and", "minimum", "monthly", "rental", "for", "all", "student", "addresses", "."], "dataset_name": "spider", "guid": 2203}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the names of people, and dates and venues of debates they are on the affirmative side.", "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID", "example": {"db_id": "debate", "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID", "query_toks": ["SELECT", "T3.Name", ",", "T2.Date", ",", "T2.Venue", "FROM", "debate_people", "AS", "T1", "JOIN", "debate", "AS", "T2", "ON", "T1.Debate_ID", "=", "T2.Debate_ID", "JOIN", "people", "AS", "T3", "ON", "T1.Affirmative", "=", "T3.People_ID"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "date", ",", "t2", ".", "venue", "from", "debate_people", "as", "t1", "join", "debate", "as", "t2", "on", "t1", ".", "debate_id", "=", "t2", ".", "debate_id", "join", "people", "as", "t3", "on", "t1", ".", "affirmative", "=", "t3", ".", "people_id"], "question": "Show the names of people, and dates and venues of debates they are on the affirmative side.", "question_toks": ["Show", "the", "names", "of", "people", ",", "and", "dates", "and", "venues", "of", "debates", "they", "are", "on", "the", "affirmative", "side", "."], "dataset_name": "spider", "guid": 2204}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the start and end dates for incidents with incident type code \"NOISE\"?", "sql": "SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"NOISE\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT date_incident_start ,  date_incident_end FROM Behavior_Incident WHERE incident_type_code  =  \"NOISE\"", "query_toks": ["SELECT", "date_incident_start", ",", "date_incident_end", "FROM", "Behavior_Incident", "WHERE", "incident_type_code", "=", "``", "NOISE", "''"], "query_toks_no_value": ["select", "date_incident_start", ",", "date_incident_end", "from", "behavior_incident", "where", "incident_type_code", "=", "value"], "question": "What are the start and end dates for incidents with incident type code \"NOISE\"?", "question_toks": ["What", "are", "the", "start", "and", "end", "dates", "for", "incidents", "with", "incident", "type", "code", "``", "NOISE", "''", "?"], "dataset_name": "spider", "guid": 2205}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What is the most common mill type, and how many are there?", "sql": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "architecture", "query": "SELECT TYPE ,  count(*) FROM mill GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", ",", "count", "(", "*", ")", "FROM", "mill", "GROUP", "BY", "TYPE", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", ",", "count", "(", "*", ")", "from", "mill", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common mill type, and how many are there?", "question_toks": ["What", "is", "the", "most", "common", "mill", "type", ",", "and", "how", "many", "are", "there", "?"], "dataset_name": "spider", "guid": 2206}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What is the name of the technician whose team is not 'NYY'?", "sql": "SELECT Name FROM technician WHERE Team != \"NYY\"", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician WHERE Team != \"NYY\"", "query_toks": ["SELECT", "Name", "FROM", "technician", "WHERE", "Team", "!", "=", "``", "NYY", "''"], "query_toks_no_value": ["select", "name", "from", "technician", "where", "team", "!", "=", "value"], "question": "What is the name of the technician whose team is not 'NYY'?", "question_toks": ["What", "is", "the", "name", "of", "the", "technician", "whose", "team", "is", "not", "'NYY", "'", "?"], "dataset_name": "spider", "guid": 2207}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the names of people aged either 35 or 36.", "sql": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36", "example": {"db_id": "debate", "query": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "Age", "=", "35", "OR", "Age", "=", "36"], "query_toks_no_value": ["select", "name", "from", "people", "where", "age", "=", "value", "or", "age", "=", "value"], "question": "Show the names of people aged either 35 or 36.", "question_toks": ["Show", "the", "names", "of", "people", "aged", "either", "35", "or", "36", "."], "dataset_name": "spider", "guid": 2208}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the organizer and name for churches that opened between 1830 and 1840.", "sql": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840", "example": {"db_id": "wedding", "query": "SELECT organized_by ,  name FROM church WHERE open_date BETWEEN 1830 AND 1840", "query_toks": ["SELECT", "organized_by", ",", "name", "FROM", "church", "WHERE", "open_date", "BETWEEN", "1830", "AND", "1840"], "query_toks_no_value": ["select", "organized_by", ",", "name", "from", "church", "where", "open_date", "between", "value", "and", "value"], "question": "Show the organizer and name for churches that opened between 1830 and 1840.", "question_toks": ["Show", "the", "organizer", "and", "name", "for", "churches", "that", "opened", "between", "1830", "and", "1840", "."], "dataset_name": "spider", "guid": 2209}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the names of perpetrators?", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID", "example": {"db_id": "perpetrator", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"], "question": "What are the names of perpetrators?", "question_toks": ["What", "are", "the", "names", "of", "perpetrators", "?"], "dataset_name": "spider", "guid": 2210}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the maximum price and score for wines produced in the appelation St. Helena.", "sql": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"", "example": {"db_id": "wine_1", "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"", "query_toks": ["SELECT", "max", "(", "Price", ")", ",", "max", "(", "Score", ")", "FROM", "WINE", "WHERE", "Appelation", "=", "``", "St.", "Helena", "''"], "query_toks_no_value": ["select", "max", "(", "price", ")", ",", "max", "(", "score", ")", "from", "wine", "where", "appelation", "=", "value"], "question": "Give the maximum price and score for wines produced in the appelation St. Helena.", "question_toks": ["Give", "the", "maximum", "price", "and", "score", "for", "wines", "produced", "in", "the", "appelation", "St.", "Helena", "."], "dataset_name": "spider", "guid": 2211}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the official names of cities that have hosted more than one competition?", "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "example": {"db_id": "farm", "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T1.Official_Name", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "GROUP", "BY", "T2.Host_city_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "official_name", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "group", "by", "t2", ".", "host_city_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the official names of cities that have hosted more than one competition?", "question_toks": ["What", "are", "the", "official", "names", "of", "cities", "that", "have", "hosted", "more", "than", "one", "competition", "?"], "dataset_name": "spider", "guid": 2212}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the themes of competitions that have corresponding host cities with more than 1000 residents?", "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "example": {"db_id": "farm", "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "query_toks": ["SELECT", "T2.Theme", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "WHERE", "T1.Population", ">", "1000"], "query_toks_no_value": ["select", "t2", ".", "theme", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "where", "t1", ".", "population", ">", "value"], "question": "What are the themes of competitions that have corresponding host cities with more than 1000 residents?", "question_toks": ["What", "are", "the", "themes", "of", "competitions", "that", "have", "corresponding", "host", "cities", "with", "more", "than", "1000", "residents", "?"], "dataset_name": "spider", "guid": 2213}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the census rankings of cities that do not have the status \"Village\"?", "sql": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"", "example": {"db_id": "farm", "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"", "query_toks": ["SELECT", "Census_Ranking", "FROM", "city", "WHERE", "Status", "!", "=", "``", "Village", "''"], "query_toks_no_value": ["select", "census_ranking", "from", "city", "where", "status", "!", "=", "value"], "question": "What are the census rankings of cities that do not have the status \"Village\"?", "question_toks": ["What", "are", "the", "census", "rankings", "of", "cities", "that", "do", "not", "have", "the", "status", "``", "Village", "''", "?"], "dataset_name": "spider", "guid": 2214}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What is the number of technicians?", "sql": "SELECT count(*) FROM technician", "example": {"db_id": "machine_repair", "query": "SELECT count(*) FROM technician", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "technician"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "technician"], "question": "What is the number of technicians?", "question_toks": ["What", "is", "the", "number", "of", "technicians", "?"], "dataset_name": "spider", "guid": 2215}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | How many technicians are there?", "sql": "SELECT count(*) FROM technician", "example": {"db_id": "machine_repair", "query": "SELECT count(*) FROM technician", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "technician"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "technician"], "question": "How many technicians are there?", "question_toks": ["How", "many", "technicians", "are", "there", "?"], "dataset_name": "spider", "guid": 2216}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the names of people who have been on the negative side of debates at least twice.", "sql": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "example": {"db_id": "debate", "query": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T2.Name", "FROM", "debate_people", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Negative", "=", "T2.People_ID", "GROUP", "BY", "T2.Name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "debate_people", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "negative", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the names of people who have been on the negative side of debates at least twice.", "question_toks": ["Show", "the", "names", "of", "people", "who", "have", "been", "on", "the", "negative", "side", "of", "debates", "at", "least", "twice", "."], "dataset_name": "spider", "guid": 2217}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | What is the average attendance of stadiums with capacity percentage higher than 100%?", "sql": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100", "example": {"db_id": "game_injury", "query": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100", "query_toks": ["SELECT", "average_attendance", "FROM", "stadium", "WHERE", "capacity_percentage", ">", "100"], "query_toks_no_value": ["select", "average_attendance", "from", "stadium", "where", "capacity_percentage", ">", "value"], "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?", "question_toks": ["What", "is", "the", "average", "attendance", "of", "stadiums", "with", "capacity", "percentage", "higher", "than", "100", "%", "?"], "dataset_name": "spider", "guid": 2218}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines made from red grapes?", "sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "Red", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value"], "question": "What are the names of wines made from red grapes?", "question_toks": ["What", "are", "the", "names", "of", "wines", "made", "from", "red", "grapes", "?"], "dataset_name": "spider", "guid": 2219}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | List the total number of horses on farms in ascending order.", "sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "example": {"db_id": "farm", "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "query_toks": ["SELECT", "Total_Horses", "FROM", "farm", "ORDER", "BY", "Total_Horses", "ASC"], "query_toks_no_value": ["select", "total_horses", "from", "farm", "order", "by", "total_horses", "asc"], "question": "List the total number of horses on farms in ascending order.", "question_toks": ["List", "the", "total", "number", "of", "horses", "on", "farms", "in", "ascending", "order", "."], "dataset_name": "spider", "guid": 2220}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?", "sql": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id", "query_toks": ["SELECT", "T1.staff_name", ",", "T1.staff_id", "FROM", "Staff", "AS", "T1", "JOIN", "Fault_Log", "AS", "T2", "ON", "T1.staff_id", "=", "T2.recorded_by_staff_id", "EXCEPT", "SELECT", "T3.staff_name", ",", "T3.staff_id", "FROM", "Staff", "AS", "T3", "JOIN", "Engineer_Visits", "AS", "T4", "ON", "T3.staff_id", "=", "T4.contact_staff_id"], "query_toks_no_value": ["select", "t1", ".", "staff_name", ",", "t1", ".", "staff_id", "from", "staff", "as", "t1", "join", "fault_log", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "recorded_by_staff_id", "except", "select", "t3", ".", "staff_name", ",", "t3", ".", "staff_id", "from", "staff", "as", "t3", "join", "engineer_visits", "as", "t4", "on", "t3", ".", "staff_id", "=", "t4", ".", "contact_staff_id"], "question": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?", "question_toks": ["What", "is", "the", "name", "and", "id", "of", "the", "staff", "who", "recorded", "the", "fault", "log", "but", "has", "not", "contacted", "any", "visiting", "engineers", "?"], "dataset_name": "spider", "guid": 2221}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the case burden of counties in descending order of population.", "sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "example": {"db_id": "county_public_safety", "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "query_toks": ["SELECT", "Case_burden", "FROM", "county_public_safety", "ORDER", "BY", "Population", "DESC"], "query_toks_no_value": ["select", "case_burden", "from", "county_public_safety", "order", "by", "population", "desc"], "question": "Show the case burden of counties in descending order of population.", "question_toks": ["Show", "the", "case", "burden", "of", "counties", "in", "descending", "order", "of", "population", "."], "dataset_name": "spider", "guid": 2222}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which assets did not incur any fault log? List the asset model.", "sql": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)", "example": {"db_id": "assets_maintenance", "query": "SELECT asset_model FROM Assets WHERE asset_id NOT IN (SELECT asset_id FROM Fault_Log)", "query_toks": ["SELECT", "asset_model", "FROM", "Assets", "WHERE", "asset_id", "NOT", "IN", "(", "SELECT", "asset_id", "FROM", "Fault_Log", ")"], "query_toks_no_value": ["select", "asset_model", "from", "assets", "where", "asset_id", "not", "in", "(", "select", "asset_id", "from", "fault_log", ")"], "question": "Which assets did not incur any fault log? List the asset model.", "question_toks": ["Which", "assets", "did", "not", "incur", "any", "fault", "log", "?", "List", "the", "asset", "model", "."], "dataset_name": "spider", "guid": 2223}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | List the names of technicians who have not been assigned to repair machines.", "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "query_toks": ["SELECT", "Name", "FROM", "technician", "WHERE", "technician_id", "NOT", "IN", "(", "SELECT", "technician_id", "FROM", "repair_assignment", ")"], "query_toks_no_value": ["select", "name", "from", "technician", "where", "technician_id", "not", "in", "(", "select", "technician_id", "from", "repair_assignment", ")"], "question": "List the names of technicians who have not been assigned to repair machines.", "question_toks": ["List", "the", "names", "of", "technicians", "who", "have", "not", "been", "assigned", "to", "repair", "machines", "."], "dataset_name": "spider", "guid": 2224}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the names of all wines produced in 2008.", "sql": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "YEAR", "=", "``", "2008", "''"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "year", "=", "value"], "question": "Find the names of all wines produced in 2008.", "question_toks": ["Find", "the", "names", "of", "all", "wines", "produced", "in", "2008", "."], "dataset_name": "spider", "guid": 2225}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of counties that do not contain any cities?", "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "query_toks": ["SELECT", "Name", "FROM", "county_public_safety", "WHERE", "County_ID", "NOT", "IN", "(", "SELECT", "County_ID", "FROM", "city", ")"], "query_toks_no_value": ["select", "name", "from", "county_public_safety", "where", "county_id", "not", "in", "(", "select", "county_id", "from", "city", ")"], "question": "What are the names of counties that do not contain any cities?", "question_toks": ["What", "are", "the", "names", "of", "counties", "that", "do", "not", "contain", "any", "cities", "?"], "dataset_name": "spider", "guid": 2226}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | How many assessment notes are there in total?", "sql": "SELECT count(*) FROM ASSESSMENT_NOTES", "example": {"db_id": "behavior_monitoring", "query": "SELECT count(*) FROM ASSESSMENT_NOTES", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ASSESSMENT_NOTES"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "assessment_notes"], "question": "How many assessment notes are there in total?", "question_toks": ["How", "many", "assessment", "notes", "are", "there", "in", "total", "?"], "dataset_name": "spider", "guid": 2227}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the last names of teachers who are not involved in any detention.", "sql": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id", "example": {"db_id": "behavior_monitoring", "query": "SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id  =  T2.teacher_id", "query_toks": ["SELECT", "last_name", "FROM", "Teachers", "EXCEPT", "SELECT", "T1.last_name", "FROM", "Teachers", "AS", "T1", "JOIN", "Detention", "AS", "T2", "ON", "T1.teacher_id", "=", "T2.teacher_id"], "query_toks_no_value": ["select", "last_name", "from", "teachers", "except", "select", "t1", ".", "last_name", "from", "teachers", "as", "t1", "join", "detention", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id"], "question": "Find the last names of teachers who are not involved in any detention.", "question_toks": ["Find", "the", "last", "names", "of", "teachers", "who", "are", "not", "involved", "in", "any", "detention", "."], "dataset_name": "spider", "guid": 2228}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "sql": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "example": {"db_id": "battle_death", "query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'", "query_toks": ["SELECT", "name", ",", "RESULT", ",", "bulgarian_commander", "FROM", "battle", "EXCEPT", "SELECT", "T1.name", ",", "T1.result", ",", "T1.bulgarian_commander", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "WHERE", "T2.location", "=", "'English", "Channel", "'"], "query_toks_no_value": ["select", "name", ",", "result", ",", "bulgarian_commander", "from", "battle", "except", "select", "t1", ".", "name", ",", "t1", ".", "result", ",", "t1", ".", "bulgarian_commander", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "where", "t2", ".", "location", "=", "value"], "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "question_toks": ["Show", "names", ",", "results", "and", "bulgarian", "commanders", "of", "the", "battles", "with", "no", "ships", "lost", "in", "the", "'English", "Channel", "'", "."], "dataset_name": "spider", "guid": 2229}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.", "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "example": {"db_id": "wine_1", "query": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "query_toks": ["SELECT", "Grape", ",", "Appelation", ",", "Name", "FROM", "WINE", "WHERE", "Score", ">", "93", "ORDER", "BY", "Name"], "query_toks_no_value": ["select", "grape", ",", "appelation", ",", "name", "from", "wine", "where", "score", ">", "value", "order", "by", "name"], "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.", "question_toks": ["List", "the", "grape", ",", "appelation", "and", "name", "of", "wines", "whose", "score", "is", "higher", "than", "93", "ordered", "by", "Name", "."], "dataset_name": "spider", "guid": 2230}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the distinct wineries which produce wines costing between 50 and 100?", "sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "query_toks": ["SELECT", "DISTINCT", "Winery", "FROM", "WINE", "WHERE", "Price", "BETWEEN", "50", "AND", "100"], "query_toks_no_value": ["select", "distinct", "winery", "from", "wine", "where", "price", "between", "value", "and", "value"], "question": "What are the distinct wineries which produce wines costing between 50 and 100?", "question_toks": ["What", "are", "the", "distinct", "wineries", "which", "produce", "wines", "costing", "between", "50", "and", "100", "?"], "dataset_name": "spider", "guid": 2231}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the party that has the most people.", "sql": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "debate", "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Party", "FROM", "people", "GROUP", "BY", "Party", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "party", "from", "people", "group", "by", "party", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the party that has the most people.", "question_toks": ["Show", "the", "party", "that", "has", "the", "most", "people", "."], "dataset_name": "spider", "guid": 2232}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the average price of wines produced in appelations in Sonoma County?", "sql": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"", "example": {"db_id": "wine_1", "query": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"", "query_toks": ["SELECT", "AVG", "(", "T2.Price", ")", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.County", "=", "``", "Sonoma", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "price", ")", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "county", "=", "value"], "question": "What is the average price of wines produced in appelations in Sonoma County?", "question_toks": ["What", "is", "the", "average", "price", "of", "wines", "produced", "in", "appelations", "in", "Sonoma", "County", "?"], "dataset_name": "spider", "guid": 2233}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | How many games are held after season 2007?", "sql": "SELECT count(*) FROM game WHERE season  >  2007", "example": {"db_id": "game_injury", "query": "SELECT count(*) FROM game WHERE season  >  2007", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "game", "WHERE", "season", ">", "2007"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "game", "where", "season", ">", "value"], "question": "How many games are held after season 2007?", "question_toks": ["How", "many", "games", "are", "held", "after", "season", "2007", "?"], "dataset_name": "spider", "guid": 2234}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | When was the first asset acquired?", "sql": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date ASC LIMIT 1", "query_toks": ["SELECT", "asset_acquired_date", "FROM", "Assets", "ORDER", "BY", "asset_acquired_date", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "asset_acquired_date", "from", "assets", "order", "by", "asset_acquired_date", "asc", "limit", "value"], "question": "When was the first asset acquired?", "question_toks": ["When", "was", "the", "first", "asset", "acquired", "?"], "dataset_name": "spider", "guid": 2235}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | What are all the distinct last names of all the engineers?", "sql": "SELECT DISTINCT last_name FROM Maintenance_Engineers", "example": {"db_id": "assets_maintenance", "query": "SELECT DISTINCT last_name FROM Maintenance_Engineers", "query_toks": ["SELECT", "DISTINCT", "last_name", "FROM", "Maintenance_Engineers"], "query_toks_no_value": ["select", "distinct", "last_name", "from", "maintenance_engineers"], "question": "What are all the distinct last names of all the engineers?", "question_toks": ["What", "are", "all", "the", "distinct", "last", "names", "of", "all", "the", "engineers", "?"], "dataset_name": "spider", "guid": 2236}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the id and first name of the student that has the most number of assessment notes?", "sql": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.student_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_id", ",", "T2.first_name", "FROM", "Assessment_Notes", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "first_name", "from", "assessment_notes", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the id and first name of the student that has the most number of assessment notes?", "question_toks": ["Find", "the", "id", "and", "first", "name", "of", "the", "student", "that", "has", "the", "most", "number", "of", "assessment", "notes", "?"], "dataset_name": "spider", "guid": 2237}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the name and country for all people whose age is smaller than the average.", "sql": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)", "example": {"db_id": "wedding", "query": "SELECT name ,  country FROM people WHERE age  <  (SELECT avg(age) FROM people)", "query_toks": ["SELECT", "name", ",", "country", "FROM", "people", "WHERE", "age", "<", "(", "SELECT", "avg", "(", "age", ")", "FROM", "people", ")"], "query_toks_no_value": ["select", "name", ",", "country", "from", "people", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "people", ")"], "question": "Show the name and country for all people whose age is smaller than the average.", "question_toks": ["Show", "the", "name", "and", "country", "for", "all", "people", "whose", "age", "is", "smaller", "than", "the", "average", "."], "dataset_name": "spider", "guid": 2238}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the case burdens of counties, ordered descending by population?", "sql": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "example": {"db_id": "county_public_safety", "query": "SELECT Case_burden FROM county_public_safety ORDER BY Population DESC", "query_toks": ["SELECT", "Case_burden", "FROM", "county_public_safety", "ORDER", "BY", "Population", "DESC"], "query_toks_no_value": ["select", "case_burden", "from", "county_public_safety", "order", "by", "population", "desc"], "question": "What are the case burdens of counties, ordered descending by population?", "question_toks": ["What", "are", "the", "case", "burdens", "of", "counties", ",", "ordered", "descending", "by", "population", "?"], "dataset_name": "spider", "guid": 2239}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Count the number of appelations in Napa County.", "sql": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"", "example": {"db_id": "wine_1", "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "APPELLATIONS", "WHERE", "County", "=", "``", "Napa", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "appellations", "where", "county", "=", "value"], "question": "Count the number of appelations in Napa County.", "question_toks": ["Count", "the", "number", "of", "appelations", "in", "Napa", "County", "."], "dataset_name": "spider", "guid": 2240}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.", "sql": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005", "example": {"db_id": "wine_1", "query": "SELECT max(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"Central Coast\" AND T2.year  <  2005", "query_toks": ["SELECT", "max", "(", "T2.Price", ")", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.Area", "=", "``", "Central", "Coast", "''", "AND", "T2.year", "<", "2005"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "price", ")", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "area", "=", "value", "and", "t2", ".", "year", "<", "value"], "question": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.", "question_toks": ["Find", "the", "maximum", "price", "of", "wins", "from", "the", "appelations", "in", "Central", "Coast", "area", "and", "produced", "before", "the", "year", "of", "2005", "."], "dataset_name": "spider", "guid": 2241}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What are the notes of the death events which has substring 'East'?", "sql": "SELECT note FROM death WHERE note LIKE '%East%'", "example": {"db_id": "battle_death", "query": "SELECT note FROM death WHERE note LIKE '%East%'", "query_toks": ["SELECT", "note", "FROM", "death", "WHERE", "note", "LIKE", "'", "%", "East", "%", "'"], "query_toks_no_value": ["select", "note", "from", "death", "where", "note", "like", "value"], "question": "What are the notes of the death events which has substring 'East'?", "question_toks": ["What", "are", "the", "notes", "of", "the", "death", "events", "which", "has", "substring", "'East", "'", "?"], "dataset_name": "spider", "guid": 2242}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the white grape used to produce wines with scores above 90.", "sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90", "query_toks": ["SELECT", "DISTINCT", "T1.Grape", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "White", "''", "AND", "T2.score", ">", "90"], "query_toks_no_value": ["select", "distinct", "t1", ".", "grape", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value", "and", "t2", ".", "score", ">", "value"], "question": "Find the white grape used to produce wines with scores above 90.", "question_toks": ["Find", "the", "white", "grape", "used", "to", "produce", "wines", "with", "scores", "above", "90", "."], "dataset_name": "spider", "guid": 2243}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | List the names of counties that do not have any cities.", "sql": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM county_public_safety WHERE County_ID NOT IN (SELECT County_ID FROM city)", "query_toks": ["SELECT", "Name", "FROM", "county_public_safety", "WHERE", "County_ID", "NOT", "IN", "(", "SELECT", "County_ID", "FROM", "city", ")"], "query_toks_no_value": ["select", "name", "from", "county_public_safety", "where", "county_id", "not", "in", "(", "select", "county_id", "from", "city", ")"], "question": "List the names of counties that do not have any cities.", "question_toks": ["List", "the", "names", "of", "counties", "that", "do", "not", "have", "any", "cities", "."], "dataset_name": "spider", "guid": 2244}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the names and scores of wines made from white grapes.", "sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"", "example": {"db_id": "wine_1", "query": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"", "query_toks": ["SELECT", "T2.Name", ",", "T2.Score", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "White", "''"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "score", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value"], "question": "Give the names and scores of wines made from white grapes.", "question_toks": ["Give", "the", "names", "and", "scores", "of", "wines", "made", "from", "white", "grapes", "."], "dataset_name": "spider", "guid": 2245}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the ids and first names of the 3 teachers that have the most number of assessment notes?", "sql": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.teacher_id ,  T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T1.teacher_id", ",", "T2.first_name", "FROM", "Assessment_Notes", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.teacher_id", "=", "T2.teacher_id", "GROUP", "BY", "T1.teacher_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "teacher_id", ",", "t2", ".", "first_name", "from", "assessment_notes", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "group", "by", "t1", ".", "teacher_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?", "question_toks": ["Find", "the", "ids", "and", "first", "names", "of", "the", "3", "teachers", "that", "have", "the", "most", "number", "of", "assessment", "notes", "?"], "dataset_name": "spider", "guid": 2246}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the crime rates of counties sorted by number of offices ascending?", "sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "example": {"db_id": "county_public_safety", "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "query_toks": ["SELECT", "Crime_rate", "FROM", "county_public_safety", "ORDER", "BY", "Police_officers", "ASC"], "query_toks_no_value": ["select", "crime_rate", "from", "county_public_safety", "order", "by", "police_officers", "asc"], "question": "What are the crime rates of counties sorted by number of offices ascending?", "question_toks": ["What", "are", "the", "crime", "rates", "of", "counties", "sorted", "by", "number", "of", "offices", "ascending", "?"], "dataset_name": "spider", "guid": 2247}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the area of the appelation that produces the highest number of wines before the year of 2010?", "sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Area", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "GROUP", "BY", "T2.Appelation", "HAVING", "T2.year", "<", "2010", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "area", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "group", "by", "t2", ".", "appelation", "having", "t2", ".", "year", "<", "value", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?", "question_toks": ["What", "is", "the", "area", "of", "the", "appelation", "that", "produces", "the", "highest", "number", "of", "wines", "before", "the", "year", "of", "2010", "?"], "dataset_name": "spider", "guid": 2248}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What is the incident type description for the incident type with code \"VIOLENCE\"?", "sql": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code  =  \"VIOLENCE\"", "query_toks": ["SELECT", "incident_type_description", "FROM", "Ref_Incident_Type", "WHERE", "incident_type_code", "=", "``", "VIOLENCE", "''"], "query_toks_no_value": ["select", "incident_type_description", "from", "ref_incident_type", "where", "incident_type_code", "=", "value"], "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?", "question_toks": ["What", "is", "the", "incident", "type", "description", "for", "the", "incident", "type", "with", "code", "``", "VIOLENCE", "''", "?"], "dataset_name": "spider", "guid": 2249}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?", "sql": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"", "example": {"db_id": "machine_repair", "query": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"", "query_toks": ["SELECT", "Starting_Year", "FROM", "technician", "WHERE", "Team", "=", "``", "CLE", "''", "INTERSECT", "SELECT", "Starting_Year", "FROM", "technician", "WHERE", "Team", "=", "``", "CWS", "''"], "query_toks_no_value": ["select", "starting_year", "from", "technician", "where", "team", "=", "value", "intersect", "select", "starting_year", "from", "technician", "where", "team", "=", "value"], "question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?", "question_toks": ["What", "are", "the", "starting", "years", "shared", "by", "the", "technicians", "from", "the", "team", "``", "CLE", "''", "or", "``", "CWS", "''", "?"], "dataset_name": "spider", "guid": 2250}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the names and year of construction for the mills of 'Grondzeiler' type?", "sql": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'", "example": {"db_id": "architecture", "query": "SELECT name ,  built_year FROM mill WHERE TYPE  =  'Grondzeiler'", "query_toks": ["SELECT", "name", ",", "built_year", "FROM", "mill", "WHERE", "TYPE", "=", "'Grondzeiler", "'"], "query_toks_no_value": ["select", "name", ",", "built_year", "from", "mill", "where", "type", "=", "value"], "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?", "question_toks": ["What", "are", "the", "names", "and", "year", "of", "construction", "for", "the", "mills", "of", "'Grondzeiler", "'", "type", "?"], "dataset_name": "spider", "guid": 2251}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the country where people older than 30 and younger than 25 are from.", "sql": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30", "example": {"db_id": "wedding", "query": "SELECT country FROM people WHERE age  <  25 INTERSECT SELECT country FROM people WHERE age  >  30", "query_toks": ["SELECT", "country", "FROM", "people", "WHERE", "age", "<", "25", "INTERSECT", "SELECT", "country", "FROM", "people", "WHERE", "age", ">", "30"], "query_toks_no_value": ["select", "country", "from", "people", "where", "age", "<", "value", "intersect", "select", "country", "from", "people", "where", "age", ">", "value"], "question": "Show the country where people older than 30 and younger than 25 are from.", "question_toks": ["Show", "the", "country", "where", "people", "older", "than", "30", "and", "younger", "than", "25", "are", "from", "."], "dataset_name": "spider", "guid": 2252}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Return the minimum and maximum crime rates across all counties.", "sql": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety", "example": {"db_id": "county_public_safety", "query": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety", "query_toks": ["SELECT", "min", "(", "Crime_rate", ")", ",", "max", "(", "Crime_rate", ")", "FROM", "county_public_safety"], "query_toks_no_value": ["select", "min", "(", "crime_rate", ")", ",", "max", "(", "crime_rate", ")", "from", "county_public_safety"], "question": "Return the minimum and maximum crime rates across all counties.", "question_toks": ["Return", "the", "minimum", "and", "maximum", "crime", "rates", "across", "all", "counties", "."], "dataset_name": "spider", "guid": 2253}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of cities, as well as the names of the counties they correspond to?", "sql": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "example": {"db_id": "county_public_safety", "query": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Name", "FROM", "city", "AS", "T1", "JOIN", "county_public_safety", "AS", "T2", "ON", "T1.County_ID", "=", "T2.County_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "name", "from", "city", "as", "t1", "join", "county_public_safety", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "county_id"], "question": "What are the names of cities, as well as the names of the counties they correspond to?", "question_toks": ["What", "are", "the", "names", "of", "cities", ",", "as", "well", "as", "the", "names", "of", "the", "counties", "they", "correspond", "to", "?"], "dataset_name": "spider", "guid": 2254}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | For each team, how many technicians are there?", "sql": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "example": {"db_id": "machine_repair", "query": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team", "query_toks": ["SELECT", "Team", ",", "COUNT", "(", "*", ")", "FROM", "technician", "GROUP", "BY", "Team"], "query_toks_no_value": ["select", "team", ",", "count", "(", "*", ")", "from", "technician", "group", "by", "team"], "question": "For each team, how many technicians are there?", "question_toks": ["For", "each", "team", ",", "how", "many", "technicians", "are", "there", "?"], "dataset_name": "spider", "guid": 2255}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the names of all distinct wines ordered by price.", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY price", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE ORDER BY price", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "ORDER", "BY", "price"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "order", "by", "price"], "question": "List the names of all distinct wines ordered by price.", "question_toks": ["List", "the", "names", "of", "all", "distinct", "wines", "ordered", "by", "price", "."], "dataset_name": "spider", "guid": 2256}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Give the average number of working horses on farms with more than 5000 total horses.", "sql": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "example": {"db_id": "farm", "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "query_toks": ["SELECT", "avg", "(", "Working_Horses", ")", "FROM", "farm", "WHERE", "Total_Horses", ">", "5000"], "query_toks_no_value": ["select", "avg", "(", "working_horses", ")", "from", "farm", "where", "total_horses", ">", "value"], "question": "Give the average number of working horses on farms with more than 5000 total horses.", "question_toks": ["Give", "the", "average", "number", "of", "working", "horses", "on", "farms", "with", "more", "than", "5000", "total", "horses", "."], "dataset_name": "spider", "guid": 2257}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | How many battles did not lose any ship with tonnage '225'?", "sql": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "example": {"db_id": "battle_death", "query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "battle", "WHERE", "id", "NOT", "IN", "(", "SELECT", "lost_in_battle", "FROM", "ship", "WHERE", "tonnage", "=", "'225", "'", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "battle", "where", "id", "not", "in", "(", "select", "lost_in_battle", "from", "ship", "where", "tonnage", "=", "value", ")"], "question": "How many battles did not lose any ship with tonnage '225'?", "question_toks": ["How", "many", "battles", "did", "not", "lose", "any", "ship", "with", "tonnage", "'225", "'", "?"], "dataset_name": "spider", "guid": 2258}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | List the official names of cities that have not held any competition.", "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "example": {"db_id": "farm", "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "query_toks": ["SELECT", "Official_Name", "FROM", "city", "WHERE", "City_ID", "NOT", "IN", "(", "SELECT", "Host_city_ID", "FROM", "farm_competition", ")"], "query_toks_no_value": ["select", "official_name", "from", "city", "where", "city_id", "not", "in", "(", "select", "host_city_id", "from", "farm_competition", ")"], "question": "List the official names of cities that have not held any competition.", "question_toks": ["List", "the", "official", "names", "of", "cities", "that", "have", "not", "held", "any", "competition", "."], "dataset_name": "spider", "guid": 2259}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Count the number of different statuses.", "sql": "SELECT count(DISTINCT Status) FROM city", "example": {"db_id": "farm", "query": "SELECT count(DISTINCT Status) FROM city", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Status", ")", "FROM", "city"], "query_toks_no_value": ["select", "count", "(", "distinct", "status", ")", "from", "city"], "question": "Count the number of different statuses.", "question_toks": ["Count", "the", "number", "of", "different", "statuses", "."], "dataset_name": "spider", "guid": 2260}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.", "sql": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name", "query_toks": ["SELECT", "T1.staff_name", ",", "count", "(", "*", ")", "FROM", "Staff", "AS", "T1", "JOIN", "Engineer_Visits", "AS", "T2", "ON", "T1.staff_id", "=", "T2.contact_staff_id", "GROUP", "BY", "T1.staff_name"], "query_toks_no_value": ["select", "t1", ".", "staff_name", ",", "count", "(", "*", ")", "from", "staff", "as", "t1", "join", "engineer_visits", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "contact_staff_id", "group", "by", "t1", ".", "staff_name"], "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.", "question_toks": ["How", "many", "engineers", "did", "each", "staff", "contact", "?", "List", "both", "the", "contact", "staff", "name", "and", "number", "of", "engineers", "contacted", "."], "dataset_name": "spider", "guid": 2261}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | How many wines are there for each grape?", "sql": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape", "example": {"db_id": "wine_1", "query": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "Grape", "FROM", "WINE", "GROUP", "BY", "Grape"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "grape", "from", "wine", "group", "by", "grape"], "question": "How many wines are there for each grape?", "question_toks": ["How", "many", "wines", "are", "there", "for", "each", "grape", "?"], "dataset_name": "spider", "guid": 2262}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | Show the name, average attendance, total attendance for stadiums where no accidents happened.", "sql": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id", "example": {"db_id": "game_injury", "query": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id", "query_toks": ["SELECT", "name", ",", "average_attendance", ",", "total_attendance", "FROM", "stadium", "EXCEPT", "SELECT", "T2.name", ",", "T2.average_attendance", ",", "T2.total_attendance", "FROM", "game", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.id", "JOIN", "injury_accident", "AS", "T3", "ON", "T1.id", "=", "T3.game_id"], "query_toks_no_value": ["select", "name", ",", "average_attendance", ",", "total_attendance", "from", "stadium", "except", "select", "t2", ".", "name", ",", "t2", ".", "average_attendance", ",", "t2", ".", "total_attendance", "from", "game", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "id", "join", "injury_accident", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "game_id"], "question": "Show the name, average attendance, total attendance for stadiums where no accidents happened.", "question_toks": ["Show", "the", "name", ",", "average", "attendance", ",", "total", "attendance", "for", "stadiums", "where", "no", "accidents", "happened", "."], "dataset_name": "spider", "guid": 2263}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | What are the date and venue of each debate?", "sql": "SELECT Date ,  Venue FROM debate", "example": {"db_id": "debate", "query": "SELECT Date ,  Venue FROM debate", "query_toks": ["SELECT", "Date", ",", "Venue", "FROM", "debate"], "query_toks_no_value": ["select", "date", ",", "venue", "from", "debate"], "question": "What are the date and venue of each debate?", "question_toks": ["What", "are", "the", "date", "and", "venue", "of", "each", "debate", "?"], "dataset_name": "spider", "guid": 2264}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the crime rates of counties in ascending order of number of police officers.", "sql": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "example": {"db_id": "county_public_safety", "query": "SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers ASC", "query_toks": ["SELECT", "Crime_rate", "FROM", "county_public_safety", "ORDER", "BY", "Police_officers", "ASC"], "query_toks_no_value": ["select", "crime_rate", "from", "county_public_safety", "order", "by", "police_officers", "asc"], "question": "Show the crime rates of counties in ascending order of number of police officers.", "question_toks": ["Show", "the", "crime", "rates", "of", "counties", "in", "ascending", "order", "of", "number", "of", "police", "officers", "."], "dataset_name": "spider", "guid": 2265}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the names of people that are on affirmative side of debates with number of audience bigger than 200.", "sql": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200", "example": {"db_id": "debate", "query": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200", "query_toks": ["SELECT", "T3.Name", "FROM", "debate_people", "AS", "T1", "JOIN", "debate", "AS", "T2", "ON", "T1.Debate_ID", "=", "T2.Debate_ID", "JOIN", "people", "AS", "T3", "ON", "T1.Affirmative", "=", "T3.People_ID", "WHERE", "T2.Num_of_Audience", ">", "200"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "debate_people", "as", "t1", "join", "debate", "as", "t2", "on", "t1", ".", "debate_id", "=", "t2", ".", "debate_id", "join", "people", "as", "t3", "on", "t1", ".", "affirmative", "=", "t3", ".", "people_id", "where", "t2", ".", "num_of_audience", ">", "value"], "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.", "question_toks": ["Show", "the", "names", "of", "people", "that", "are", "on", "affirmative", "side", "of", "debates", "with", "number", "of", "audience", "bigger", "than", "200", "."], "dataset_name": "spider", "guid": 2266}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the hosts of competitions whose theme is not \"Aliens\"?", "sql": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "example": {"db_id": "farm", "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "query_toks": ["SELECT", "Hosts", "FROM", "farm_competition", "WHERE", "Theme", "!", "=", "'Aliens", "'"], "query_toks_no_value": ["select", "hosts", "from", "farm_competition", "where", "theme", "!", "=", "value"], "question": "What are the hosts of competitions whose theme is not \"Aliens\"?", "question_toks": ["What", "are", "the", "hosts", "of", "competitions", "whose", "theme", "is", "not", "``", "Aliens", "''", "?"], "dataset_name": "spider", "guid": 2267}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show the team that have at least two technicians.", "sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "example": {"db_id": "machine_repair", "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Team", "FROM", "technician", "GROUP", "BY", "Team", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "team", "from", "technician", "group", "by", "team", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the team that have at least two technicians.", "question_toks": ["Show", "the", "team", "that", "have", "at", "least", "two", "technicians", "."], "dataset_name": "spider", "guid": 2268}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | How many assets does each maintenance contract contain? List the number and the contract id.", "sql": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id", "example": {"db_id": "assets_maintenance", "query": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.maintenance_contract_id", "FROM", "Maintenance_Contracts", "AS", "T1", "JOIN", "Assets", "AS", "T2", "ON", "T1.maintenance_contract_id", "=", "T2.maintenance_contract_id", "GROUP", "BY", "T1.maintenance_contract_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "maintenance_contract_id", "from", "maintenance_contracts", "as", "t1", "join", "assets", "as", "t2", "on", "t1", ".", "maintenance_contract_id", "=", "t2", ".", "maintenance_contract_id", "group", "by", "t1", ".", "maintenance_contract_id"], "question": "How many assets does each maintenance contract contain? List the number and the contract id.", "question_toks": ["How", "many", "assets", "does", "each", "maintenance", "contract", "contain", "?", "List", "the", "number", "and", "the", "contract", "id", "."], "dataset_name": "spider", "guid": 2269}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the country of all appelations who have at most three wines.", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "example": {"db_id": "wine_1", "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "query_toks": ["SELECT", "T1.County", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "GROUP", "BY", "T2.Appelation", "HAVING", "count", "(", "*", ")", "<", "=", "3"], "query_toks_no_value": ["select", "t1", ".", "county", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "group", "by", "t2", ".", "appelation", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "Find the country of all appelations who have at most three wines.", "question_toks": ["Find", "the", "country", "of", "all", "appelations", "who", "have", "at", "most", "three", "wines", "."], "dataset_name": "spider", "guid": 2270}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the texts of assessment notes for teachers with last name \"Schuster\".", "sql": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schuster\"", "query_toks": ["SELECT", "T1.text_of_notes", "FROM", "Assessment_Notes", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.teacher_id", "=", "T2.teacher_id", "WHERE", "T2.last_name", "=", "``", "Schuster", "''"], "query_toks_no_value": ["select", "t1", ".", "text_of_notes", "from", "assessment_notes", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "where", "t2", ".", "last_name", "=", "value"], "question": "Find the texts of assessment notes for teachers with last name \"Schuster\".", "question_toks": ["Find", "the", "texts", "of", "assessment", "notes", "for", "teachers", "with", "last", "name", "``", "Schuster", "''", "."], "dataset_name": "spider", "guid": 2271}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | How many assets does each third party company supply? List the count and the company id.", "sql": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id", "example": {"db_id": "assets_maintenance", "query": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.company_id", "FROM", "Third_Party_Companies", "AS", "T1", "JOIN", "Assets", "AS", "T2", "ON", "T1.company_id", "=", "T2.supplier_company_id", "GROUP", "BY", "T1.company_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "company_id", "from", "third_party_companies", "as", "t1", "join", "assets", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "supplier_company_id", "group", "by", "t1", ".", "company_id"], "question": "How many assets does each third party company supply? List the count and the company id.", "question_toks": ["How", "many", "assets", "does", "each", "third", "party", "company", "supply", "?", "List", "the", "count", "and", "the", "company", "id", "."], "dataset_name": "spider", "guid": 2272}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the minimum and maximum crime rate of counties?", "sql": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety", "example": {"db_id": "county_public_safety", "query": "SELECT min(Crime_rate) ,  max(Crime_rate) FROM county_public_safety", "query_toks": ["SELECT", "min", "(", "Crime_rate", ")", ",", "max", "(", "Crime_rate", ")", "FROM", "county_public_safety"], "query_toks_no_value": ["select", "min", "(", "crime_rate", ")", ",", "max", "(", "crime_rate", ")", "from", "county_public_safety"], "question": "What are the minimum and maximum crime rate of counties?", "question_toks": ["What", "are", "the", "minimum", "and", "maximum", "crime", "rate", "of", "counties", "?"], "dataset_name": "spider", "guid": 2273}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | Which of the mill names contains the french word 'Moulin'?", "sql": "SELECT name FROM mill WHERE name LIKE '%Moulin%'", "example": {"db_id": "architecture", "query": "SELECT name FROM mill WHERE name LIKE '%Moulin%'", "query_toks": ["SELECT", "name", "FROM", "mill", "WHERE", "name", "LIKE", "'", "%", "Moulin", "%", "'"], "query_toks_no_value": ["select", "name", "from", "mill", "where", "name", "like", "value"], "question": "Which of the mill names contains the french word 'Moulin'?", "question_toks": ["Which", "of", "the", "mill", "names", "contains", "the", "french", "word", "'Moulin", "'", "?"], "dataset_name": "spider", "guid": 2274}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of departments in each school.", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", ",", "school_code", "from", "department", "group", "by", "school_code"], "question": "Find the number of departments in each school.", "question_toks": ["Find", "the", "number", "of", "departments", "in", "each", "school", "."], "dataset_name": "spider", "guid": 872}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors have a Ph.D. in each department?", "sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "professor", "where", "prof_high_degree", "=", "value", "group", "by", "dept_code"], "question": "How many professors have a Ph.D. in each department?", "question_toks": ["How", "many", "professors", "have", "a", "Ph.D.", "in", "each", "department", "?"], "dataset_name": "spider", "guid": 873}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many students are enrolled in some classes that are taught by an accounting professor?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "department", "AS", "T4", "ON", "T3.dept_code", "=", "T4.dept_code", "WHERE", "T4.dept_name", "=", "'Accounting", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "department", "as", "t4", "on", "t3", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "How many students are enrolled in some classes that are taught by an accounting professor?", "question_toks": ["How", "many", "students", "are", "enrolled", "in", "some", "classes", "that", "are", "taught", "by", "an", "accounting", "professor", "?"], "dataset_name": "spider", "guid": 874}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of the department that has the largest number of students enrolled?", "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T4.dept_name", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "department", "AS", "T4", "ON", "T3.dept_code", "=", "T4.dept_code", "GROUP", "BY", "T3.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t4", ".", "dept_name", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "department", "as", "t4", "on", "t3", ".", "dept_code", "=", "t4", ".", "dept_code", "group", "by", "t3", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the department that has the largest number of students enrolled?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "that", "has", "the", "largest", "number", "of", "students", "enrolled", "?"], "dataset_name": "spider", "guid": 875}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the campus fee of \"San Francisco State University\" in year 2000?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000", "example": {"db_id": "csu_1", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000", "query_toks": ["SELECT", "t1.campusfee", "FROM", "csu_fees", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "t1.year", "=", "2000"], "query_toks_no_value": ["select", "t1", ".", "campusfee", "from", "csu_fees", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t2", ".", "campus", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "What is the campus fee of \"San Francisco State University\" in year 2000?", "question_toks": ["What", "is", "the", "campus", "fee", "of", "``", "San", "Francisco", "State", "University", "''", "in", "year", "2000", "?"], "dataset_name": "spider", "guid": 876}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many sections does each course have?", "sql": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "crs_code", "FROM", "CLASS", "GROUP", "BY", "crs_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "crs_code", "from", "class", "group", "by", "crs_code"], "question": "How many sections does each course have?", "question_toks": ["How", "many", "sections", "does", "each", "course", "have", "?"], "dataset_name": "spider", "guid": 877}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the physicians' employee ids together with their primary affiliation departments' ids.", "sql": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1", "example": {"db_id": "hospital_1", "query": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1", "query_toks": ["SELECT", "physician", ",", "department", "FROM", "affiliated_with", "WHERE", "primaryaffiliation", "=", "1"], "query_toks_no_value": ["select", "physician", ",", "department", "from", "affiliated_with", "where", "primaryaffiliation", "=", "value"], "question": "List the physicians' employee ids together with their primary affiliation departments' ids.", "question_toks": ["List", "the", "physicians", "'", "employee", "ids", "together", "with", "their", "primary", "affiliation", "departments", "'", "ids", "."], "dataset_name": "spider", "guid": 878}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many unique classes are offered?", "sql": "SELECT count(DISTINCT class_code) FROM CLASS", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT class_code) FROM CLASS", "query_toks": ["SELECT", "count", "(", "DISTINCT", "class_code", ")", "FROM", "CLASS"], "query_toks_no_value": ["select", "count", "(", "distinct", "class_code", ")", "from", "class"], "question": "How many unique classes are offered?", "question_toks": ["How", "many", "unique", "classes", "are", "offered", "?"], "dataset_name": "spider", "guid": 879}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of students who have taken any course in the fall semester of year 2003.", "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "id", "IN", "(", "SELECT", "id", "FROM", "takes", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2003", ")"], "query_toks_no_value": ["select", "name", "from", "student", "where", "id", "in", "(", "select", "id", "from", "takes", "where", "semester", "=", "value", "and", "year", "=", "value", ")"], "question": "Find the names of students who have taken any course in the fall semester of year 2003.", "question_toks": ["Find", "the", "names", "of", "students", "who", "have", "taken", "any", "course", "in", "the", "fall", "semester", "of", "year", "2003", "."], "dataset_name": "spider", "guid": 880}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the number of faculty lines in campus \"Long Beach State University\" in 2002?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"", "example": {"db_id": "csu_1", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"", "query_toks": ["SELECT", "faculty", "FROM", "faculty", "AS", "T1", "JOIN", "campuses", "AS", "T2", "ON", "T1.campus", "=", "T2.id", "WHERE", "T1.year", "=", "2002", "AND", "T2.campus", "=", "``", "Long", "Beach", "State", "University", "''"], "query_toks_no_value": ["select", "faculty", "from", "faculty", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?", "question_toks": ["What", "is", "the", "number", "of", "faculty", "lines", "in", "campus", "``", "Long", "Beach", "State", "University", "''", "in", "2002", "?"], "dataset_name": "spider", "guid": 881}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many different instructors have taught some course?", "sql": "SELECT COUNT (DISTINCT id) FROM teaches", "example": {"db_id": "college_2", "query": "SELECT COUNT (DISTINCT id) FROM teaches", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "id", ")", "FROM", "teaches"], "query_toks_no_value": ["select", "count", "(", "distinct", "id", ")", "from", "teaches"], "question": "How many different instructors have taught some course?", "question_toks": ["How", "many", "different", "instructors", "have", "taught", "some", "course", "?"], "dataset_name": "spider", "guid": 882}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many students enrolled in class ACCT-211?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "where", "t1", ".", "crs_code", "=", "value"], "question": "How many students enrolled in class ACCT-211?", "question_toks": ["How", "many", "students", "enrolled", "in", "class", "ACCT-211", "?"], "dataset_name": "spider", "guid": 883}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the year and semester when offers the largest number of courses.", "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "semester", ",", "YEAR", "FROM", "SECTION", "GROUP", "BY", "semester", ",", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "semester", ",", "year", "from", "section", "group", "by", "semester", ",", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the year and semester when offers the largest number of courses.", "question_toks": ["Find", "the", "year", "and", "semester", "when", "offers", "the", "largest", "number", "of", "courses", "."], "dataset_name": "spider", "guid": 884}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the number of different class sections offered in the course ACCT-211?", "sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "class_section", ")", "FROM", "CLASS", "WHERE", "crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "class_section", ")", "from", "class", "where", "crs_code", "=", "value"], "question": "What is the number of different class sections offered in the course ACCT-211?", "question_toks": ["What", "is", "the", "number", "of", "different", "class", "sections", "offered", "in", "the", "course", "ACCT-211", "?"], "dataset_name": "spider", "guid": 885}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | In what year was the most degrees conferred?", "sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "degrees", "GROUP", "BY", "YEAR", "ORDER", "BY", "sum", "(", "degrees", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "degrees", "group", "by", "year", "order", "by", "sum", "(", "degrees", ")", "desc", "limit", "value"], "question": "In what year was the most degrees conferred?", "question_toks": ["In", "what", "year", "was", "the", "most", "degrees", "conferred", "?"], "dataset_name": "spider", "guid": 886}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which patient is undergoing the most recent treatment?", "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "query_toks": ["SELECT", "patient", "FROM", "undergoes", "ORDER", "BY", "dateundergoes", "LIMIT", "1"], "query_toks_no_value": ["select", "patient", "from", "undergoes", "order", "by", "dateundergoes", "limit", "value"], "question": "Which patient is undergoing the most recent treatment?", "question_toks": ["Which", "patient", "is", "undergoing", "the", "most", "recent", "treatment", "?"], "dataset_name": "spider", "guid": 887}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all students who got a grade C in a class?", "sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'", "example": {"db_id": "college_1", "query": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'", "query_toks": ["SELECT", "DISTINCT", "stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "enroll_grade", "=", "'C", "'"], "query_toks_no_value": ["select", "distinct", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "enroll_grade", "=", "value"], "question": "What are the first names of all students who got a grade C in a class?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "who", "got", "a", "grade", "C", "in", "a", "class", "?"], "dataset_name": "spider", "guid": 888}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names and offices of all instructors who have taught some course and also find the course description.", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "query_toks": ["SELECT", "T2.emp_fname", ",", "T4.prof_office", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "professor", "AS", "T4", "ON", "T2.emp_num", "=", "T4.emp_num"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t4", ".", "prof_office", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "professor", "as", "t4", "on", "t2", ".", "emp_num", "=", "t4", ".", "emp_num"], "question": "Find the first names and offices of all instructors who have taught some course and also find the course description.", "question_toks": ["Find", "the", "first", "names", "and", "offices", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "also", "find", "the", "course", "description", "."], "dataset_name": "spider", "guid": 889}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | List all names of courses with 1 credit?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  1", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE WHERE Credits  =  1", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "WHERE", "Credits", "=", "1"], "query_toks_no_value": ["select", "cname", "from", "course", "where", "credits", "=", "value"], "question": "List all names of courses with 1 credit?", "question_toks": ["List", "all", "names", "of", "courses", "with", "1", "credit", "?"], "dataset_name": "spider", "guid": 890}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Count the number of courses.", "sql": "SELECT count(*) FROM COURSE", "example": {"db_id": "college_3", "query": "SELECT count(*) FROM COURSE", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "COURSE"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "course"], "question": "Count the number of courses.", "question_toks": ["Count", "the", "number", "of", "courses", "."], "dataset_name": "spider", "guid": 891}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of professors in accounting department.", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "DEPT_NAME", "=", "``", "Accounting", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "dept_name", "=", "value"], "question": "Find the number of professors in accounting department.", "question_toks": ["Find", "the", "number", "of", "professors", "in", "accounting", "department", "."], "dataset_name": "spider", "guid": 892}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the last names of faculty in building Barton, sorted by last name?", "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname", "example": {"db_id": "college_3", "query": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname", "query_toks": ["SELECT", "Lname", "FROM", "FACULTY", "WHERE", "Building", "=", "``", "Barton", "''", "ORDER", "BY", "Lname"], "query_toks_no_value": ["select", "lname", "from", "faculty", "where", "building", "=", "value", "order", "by", "lname"], "question": "What are the last names of faculty in building Barton, sorted by last name?", "question_toks": ["What", "are", "the", "last", "names", "of", "faculty", "in", "building", "Barton", ",", "sorted", "by", "last", "name", "?"], "dataset_name": "spider", "guid": 893}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the names of all distinct nurses ordered by alphabetical order?", "sql": "SELECT DISTINCT name FROM nurse ORDER BY name", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT name FROM nurse ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "nurse", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "nurse", "order", "by", "name"], "question": "List the names of all distinct nurses ordered by alphabetical order?", "question_toks": ["List", "the", "names", "of", "all", "distinct", "nurses", "ordered", "by", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 894}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all employees that are professors ordered by date of birth?", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob", "example": {"db_id": "college_1", "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob", "query_toks": ["SELECT", "emp_fname", "FROM", "employee", "WHERE", "emp_jobcode", "=", "'PROF", "'", "ORDER", "BY", "emp_dob"], "query_toks_no_value": ["select", "emp_fname", "from", "employee", "where", "emp_jobcode", "=", "value", "order", "by", "emp_dob"], "question": "What are the first names of all employees that are professors ordered by date of birth?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "employees", "that", "are", "professors", "ordered", "by", "date", "of", "birth", "?"], "dataset_name": "spider", "guid": 895}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Which courses are taught on days MTW?", "sql": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "WHERE", "Days", "=", "``", "MTW", "''"], "query_toks_no_value": ["select", "cname", "from", "course", "where", "days", "=", "value"], "question": "Which courses are taught on days MTW?", "question_toks": ["Which", "courses", "are", "taught", "on", "days", "MTW", "?"], "dataset_name": "spider", "guid": 896}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?", "sql": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"", "example": {"db_id": "college_3", "query": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"", "query_toks": ["SELECT", "T2.Dname", ",", "T2.Room", "FROM", "COURSE", "AS", "T1", "JOIN", "DEPARTMENT", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO", "WHERE", "T1.CName", "=", "``", "INTRODUCTION", "TO", "COMPUTER", "SCIENCE", "''"], "query_toks_no_value": ["select", "t2", ".", "dname", ",", "t2", ".", "room", "from", "course", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno", "where", "t1", ".", "cname", "=", "value"], "question": "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?", "question_toks": ["What", "are", "the", "department", "name", "and", "room", "for", "the", "course", "INTRODUCTION", "TO", "COMPUTER", "SCIENCE", "?"], "dataset_name": "spider", "guid": 897}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | How many departments are in the division AS?", "sql": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"", "example": {"db_id": "college_3", "query": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "AS", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department", "where", "division", "=", "value"], "question": "How many departments are in the division AS?", "question_toks": ["How", "many", "departments", "are", "in", "the", "division", "AS", "?"], "dataset_name": "spider", "guid": 898}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Which department has the highest average student GPA, and what is the average gpa?", "sql": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", ",", "avg", "(", "T1.stu_gpa", ")", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "avg", "(", "T1.stu_gpa", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "avg", "(", "t1", ".", "stu_gpa", ")", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "avg", "(", "t1", ".", "stu_gpa", ")", "desc", "limit", "value"], "question": "Which department has the highest average student GPA, and what is the average gpa?", "question_toks": ["Which", "department", "has", "the", "highest", "average", "student", "GPA", ",", "and", "what", "is", "the", "average", "gpa", "?"], "dataset_name": "spider", "guid": 899}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the total number of professors with a Ph.D. ?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "where", "prof_high_degree", "=", "value"], "question": "What is the total number of professors with a Ph.D. ?", "question_toks": ["What", "is", "the", "total", "number", "of", "professors", "with", "a", "Ph.D.", "?"], "dataset_name": "spider", "guid": 900}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Where is the history department?", "sql": "SELECT dept_address FROM department WHERE dept_name  =  'History'", "example": {"db_id": "college_1", "query": "SELECT dept_address FROM department WHERE dept_name  =  'History'", "query_toks": ["SELECT", "dept_address", "FROM", "department", "WHERE", "dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "dept_address", "from", "department", "where", "dept_name", "=", "value"], "question": "Where is the history department?", "question_toks": ["Where", "is", "the", "history", "department", "?"], "dataset_name": "spider", "guid": 901}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name of each student enrolled in class ACCT-211?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "T3.stu_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T2.stu_num", "=", "T3.stu_num", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "t3", ".", "stu_fname", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t2", ".", "stu_num", "=", "t3", ".", "stu_num", "where", "t1", ".", "crs_code", "=", "value"], "question": "What is the first name of each student enrolled in class ACCT-211?", "question_toks": ["What", "is", "the", "first", "name", "of", "each", "student", "enrolled", "in", "class", "ACCT-211", "?"], "dataset_name": "spider", "guid": 902}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Tell me the highest, lowest, and average cost of procedures.", "sql": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures", "example": {"db_id": "hospital_1", "query": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures", "query_toks": ["SELECT", "MAX", "(", "cost", ")", ",", "MIN", "(", "cost", ")", ",", "AVG", "(", "cost", ")", "FROM", "procedures"], "query_toks_no_value": ["select", "max", "(", "cost", ")", ",", "min", "(", "cost", ")", ",", "avg", "(", "cost", ")", "from", "procedures"], "question": "Tell me the highest, lowest, and average cost of procedures.", "question_toks": ["Tell", "me", "the", "highest", ",", "lowest", ",", "and", "average", "cost", "of", "procedures", "."], "dataset_name": "spider", "guid": 903}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors do have a Ph.D. degree?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "where", "prof_high_degree", "=", "value"], "question": "How many professors do have a Ph.D. degree?", "question_toks": ["How", "many", "professors", "do", "have", "a", "Ph.D.", "degree", "?"], "dataset_name": "spider", "guid": 904}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.", "sql": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"", "example": {"db_id": "college_3", "query": "SELECT T2.Dname ,  T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO  =  T2.DNO WHERE T1.CName  =  \"INTRODUCTION TO COMPUTER SCIENCE\"", "query_toks": ["SELECT", "T2.Dname", ",", "T2.Room", "FROM", "COURSE", "AS", "T1", "JOIN", "DEPARTMENT", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO", "WHERE", "T1.CName", "=", "``", "INTRODUCTION", "TO", "COMPUTER", "SCIENCE", "''"], "query_toks_no_value": ["select", "t2", ".", "dname", ",", "t2", ".", "room", "from", "course", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno", "where", "t1", ".", "cname", "=", "value"], "question": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.", "question_toks": ["Find", "the", "department", "name", "and", "room", "of", "the", "course", "INTRODUCTION", "TO", "COMPUTER", "SCIENCE", "."], "dataset_name": "spider", "guid": 905}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many CSU campuses are there?", "sql": "SELECT count(*) FROM campuses", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM campuses", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "campuses"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "campuses"], "question": "How many CSU campuses are there?", "question_toks": ["How", "many", "CSU", "campuses", "are", "there", "?"], "dataset_name": "spider", "guid": 906}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the name and building of the departments with greater than average budget.", "sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "query_toks": ["SELECT", "dept_name", ",", "building", "FROM", "department", "WHERE", "budget", ">", "(", "SELECT", "avg", "(", "budget", ")", "FROM", "department", ")"], "query_toks_no_value": ["select", "dept_name", ",", "building", "from", "department", "where", "budget", ">", "(", "select", "avg", "(", "budget", ")", "from", "department", ")"], "question": "Give the name and building of the departments with greater than average budget.", "question_toks": ["Give", "the", "name", "and", "building", "of", "the", "departments", "with", "greater", "than", "average", "budget", "."], "dataset_name": "spider", "guid": 907}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the alphabetically ordered list of all distinct medications?", "sql": "SELECT DISTINCT name FROM medication ORDER BY name", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT name FROM medication ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "medication", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "medication", "order", "by", "name"], "question": "What is the alphabetically ordered list of all distinct medications?", "question_toks": ["What", "is", "the", "alphabetically", "ordered", "list", "of", "all", "distinct", "medications", "?"], "dataset_name": "spider", "guid": 908}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names of professors who are teaching more than one class.", "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1", "query_toks": ["SELECT", "T2.emp_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "GROUP", "BY", "T1.prof_num", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "group", "by", "t1", ".", "prof_num", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the first names of professors who are teaching more than one class.", "question_toks": ["Find", "the", "first", "names", "of", "professors", "who", "are", "teaching", "more", "than", "one", "class", "."], "dataset_name": "spider", "guid": 909}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the physician who prescribed the highest dose. What is his or her name?", "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "ORDER", "BY", "T2.dose", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "order", "by", "t2", ".", "dose", "desc", "limit", "value"], "question": "Find the physician who prescribed the highest dose. What is his or her name?", "question_toks": ["Find", "the", "physician", "who", "prescribed", "the", "highest", "dose", ".", "What", "is", "his", "or", "her", "name", "?"], "dataset_name": "spider", "guid": 910}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "t1", "JOIN", "enrollments", "AS", "t2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t2.year", "=", "1956", "AND", "totalenrollment_ay", ">", "400", "AND", "FTE_AY", ">", "200"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "enrollments", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "totalenrollment_ay", ">", "value", "and", "fte_ay", ">", "value"], "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?", "question_toks": ["What", "campus", "had", "more", "than", "400", "total", "enrollment", "but", "more", "than", "200", "full", "time", "enrollment", "in", "year", "1956", "?"], "dataset_name": "spider", "guid": 911}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2002", "ORDER", "BY", "t3.degrees", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "desc", "limit", "value"], "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?", "question_toks": ["How", "many", "faculty", "lines", "are", "there", "in", "the", "university", "that", "conferred", "the", "most", "number", "of", "degrees", "in", "year", "2002", "?"], "dataset_name": "spider", "guid": 912}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?", "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "example": {"db_id": "college_2", "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "query_toks": ["SELECT", "T2.building", ",", "T2.room_number", ",", "T2.semester", ",", "T2.year", "FROM", "course", "AS", "T1", "JOIN", "SECTION", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.dept_name", "=", "'Psychology", "'", "ORDER", "BY", "T1.title"], "query_toks_no_value": ["select", "t2", ".", "building", ",", "t2", ".", "room_number", ",", "t2", ".", "semester", ",", "t2", ".", "year", "from", "course", "as", "t1", "join", "section", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "dept_name", "=", "value", "order", "by", "t1", ".", "title"], "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?", "question_toks": ["What", "are", "the", "building", ",", "room", "number", ",", "semester", "and", "year", "of", "courses", "in", "the", "Psychology", "department", ",", "sorted", "using", "course", "title", "?"], "dataset_name": "spider", "guid": 913}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many total credits are offered by each department?", "sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "example": {"db_id": "college_2", "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "query_toks": ["SELECT", "sum", "(", "credits", ")", ",", "dept_name", "FROM", "course", "GROUP", "BY", "dept_name"], "query_toks_no_value": ["select", "sum", "(", "credits", ")", ",", "dept_name", "from", "course", "group", "by", "dept_name"], "question": "How many total credits are offered by each department?", "question_toks": ["How", "many", "total", "credits", "are", "offered", "by", "each", "department", "?"], "dataset_name": "spider", "guid": 914}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many credits does the department offer?", "sql": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code", "query_toks": ["SELECT", "sum", "(", "crs_credit", ")", ",", "dept_code", "FROM", "course", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "sum", "(", "crs_credit", ")", ",", "dept_code", "from", "course", "group", "by", "dept_code"], "question": "How many credits does the department offer?", "question_toks": ["How", "many", "credits", "does", "the", "department", "offer", "?"], "dataset_name": "spider", "guid": 915}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many rooms does each block floor have?", "sql": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor", "example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.blockfloor", "FROM", "BLOCK", "AS", "T1", "JOIN", "room", "AS", "T2", "ON", "T1.blockfloor", "=", "T2.blockfloor", "AND", "T1.blockcode", "=", "T2.blockcode", "GROUP", "BY", "T1.blockfloor"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "blockfloor", "from", "block", "as", "t1", "join", "room", "as", "t2", "on", "t1", ".", "blockfloor", "=", "t2", ".", "blockfloor", "and", "t1", ".", "blockcode", "=", "t2", ".", "blockcode", "group", "by", "t1", ".", "blockfloor"], "question": "How many rooms does each block floor have?", "question_toks": ["How", "many", "rooms", "does", "each", "block", "floor", "have", "?"], "dataset_name": "spider", "guid": 916}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of the physician who prescribed the highest dose?", "sql": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "ORDER", "BY", "T2.dose", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "order", "by", "t2", ".", "dose", "desc", "limit", "value"], "question": "What are the names of the physician who prescribed the highest dose?", "question_toks": ["What", "are", "the", "names", "of", "the", "physician", "who", "prescribed", "the", "highest", "dose", "?"], "dataset_name": "spider", "guid": 917}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many undergraduates are there in \"San Jose State University\" in year 2004?", "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"", "example": {"db_id": "csu_1", "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"", "query_toks": ["SELECT", "sum", "(", "t1.undergraduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Jose", "State", "University", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "undergraduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "How many undergraduates are there in \"San Jose State University\" in year 2004?", "question_toks": ["How", "many", "undergraduates", "are", "there", "in", "``", "San", "Jose", "State", "University", "''", "in", "year", "2004", "?"], "dataset_name": "spider", "guid": 918}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of different departments in each school whose number of different departments is less than 5.", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code", "HAVING", "count", "(", "DISTINCT", "dept_name", ")", "<", "5"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", ",", "school_code", "from", "department", "group", "by", "school_code", "having", "count", "(", "distinct", "dept_name", ")", "<", "value"], "question": "Find the number of different departments in each school whose number of different departments is less than 5.", "question_toks": ["Find", "the", "number", "of", "different", "departments", "in", "each", "school", "whose", "number", "of", "different", "departments", "is", "less", "than", "5", "."], "dataset_name": "spider", "guid": 919}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names and salaries of instructors who advise students in the Math department?", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "example": {"db_id": "college_2", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "query_toks": ["SELECT", "T2.name", ",", "T2.salary", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "WHERE", "T3.dept_name", "=", "'Math", "'"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "salary", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "where", "t3", ".", "dept_name", "=", "value"], "question": "What are the names and salaries of instructors who advise students in the Math department?", "question_toks": ["What", "are", "the", "names", "and", "salaries", "of", "instructors", "who", "advise", "students", "in", "the", "Math", "department", "?"], "dataset_name": "spider", "guid": 920}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2001", "ORDER", "BY", "t3.degrees", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "limit", "value"], "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?", "question_toks": ["How", "many", "faculty", "lines", "are", "there", "in", "the", "university", "that", "conferred", "the", "least", "number", "of", "degrees", "in", "year", "2001", "?"], "dataset_name": "spider", "guid": 921}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the title of course that is provided by Statistics but not Psychology departments.", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Statistics", "'", "EXCEPT", "SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Psychology", "'"], "query_toks_no_value": ["select", "title", "from", "course", "where", "dept_name", "=", "value", "except", "select", "title", "from", "course", "where", "dept_name", "=", "value"], "question": "Find the title of course that is provided by Statistics but not Psychology departments.", "question_toks": ["Find", "the", "title", "of", "course", "that", "is", "provided", "by", "Statistics", "but", "not", "Psychology", "departments", "."], "dataset_name": "spider", "guid": 922}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T3.name", "=", "'Surgery", "'", "OR", "T3.name", "=", "'Psychiatry", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t3", ".", "name", "=", "value", "or", "t3", ".", "name", "=", "value"], "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.", "question_toks": ["Which", "physicians", "are", "affiliated", "with", "either", "Surgery", "or", "Psychiatry", "department", "?", "Give", "me", "their", "names", "."], "dataset_name": "spider", "guid": 923}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many undergraduates are there at San Jose State", "sql": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"", "example": {"db_id": "csu_1", "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"", "query_toks": ["SELECT", "sum", "(", "t1.undergraduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Jose", "State", "University", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "undergraduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "How many undergraduates are there at San Jose State", "question_toks": ["How", "many", "undergraduates", "are", "there", "at", "San", "Jose", "State"], "dataset_name": "spider", "guid": 924}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the description and credit of the course which the student whose last name is Smithson took?", "sql": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'", "example": {"db_id": "college_1", "query": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'", "query_toks": ["SELECT", "T4.crs_description", ",", "T4.crs_credit", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T3.stu_num", "=", "T2.stu_num", "JOIN", "course", "AS", "T4", "ON", "T4.crs_code", "=", "T1.crs_code", "WHERE", "T3.stu_lname", "=", "'Smithson", "'"], "query_toks_no_value": ["select", "t4", ".", "crs_description", ",", "t4", ".", "crs_credit", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t3", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "course", "as", "t4", "on", "t4", ".", "crs_code", "=", "t1", ".", "crs_code", "where", "t3", ".", "stu_lname", "=", "value"], "question": "What are the description and credit of the course which the student whose last name is Smithson took?", "question_toks": ["What", "are", "the", "description", "and", "credit", "of", "the", "course", "which", "the", "student", "whose", "last", "name", "is", "Smithson", "took", "?"], "dataset_name": "spider", "guid": 925}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.", "sql": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)", "example": {"db_id": "college_1", "query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)", "query_toks": ["SELECT", "stu_fname", ",", "stu_gpa", "FROM", "student", "WHERE", "stu_gpa", "<", "(", "SELECT", "avg", "(", "stu_gpa", ")", "FROM", "student", ")"], "query_toks_no_value": ["select", "stu_fname", ",", "stu_gpa", "from", "student", "where", "stu_gpa", "<", "(", "select", "avg", "(", "stu_gpa", ")", "from", "student", ")"], "question": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.", "question_toks": ["Find", "the", "first", "name", "and", "gpa", "of", "the", "students", "whose", "gpa", "is", "lower", "than", "the", "average", "gpa", "of", "all", "students", "."], "dataset_name": "spider", "guid": 926}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the maximum and minimum grade point of students who live in NYC?", "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"", "example": {"db_id": "college_3", "query": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"", "query_toks": ["SELECT", "max", "(", "T2.gradepoint", ")", ",", "min", "(", "T2.gradepoint", ")", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T3.city_code", "=", "``", "NYC", "''"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "gradepoint", ")", ",", "min", "(", "t2", ".", "gradepoint", ")", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "city_code", "=", "value"], "question": "What is the maximum and minimum grade point of students who live in NYC?", "question_toks": ["What", "is", "the", "maximum", "and", "minimum", "grade", "point", "of", "students", "who", "live", "in", "NYC", "?"], "dataset_name": "spider", "guid": 927}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of procedures which physician John Wen was trained in.", "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "Find the names of procedures which physician John Wen was trained in.", "question_toks": ["Find", "the", "names", "of", "procedures", "which", "physician", "John", "Wen", "was", "trained", "in", "."], "dataset_name": "spider", "guid": 928}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the ids of instructors who didnt' teach?", "sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "example": {"db_id": "college_2", "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "query_toks": ["SELECT", "id", "FROM", "instructor", "EXCEPT", "SELECT", "id", "FROM", "teaches"], "query_toks_no_value": ["select", "id", "from", "instructor", "except", "select", "id", "from", "teaches"], "question": "What are the ids of instructors who didnt' teach?", "question_toks": ["What", "are", "the", "ids", "of", "instructors", "who", "didnt", "'", "teach", "?"], "dataset_name": "spider", "guid": 929}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | List all information about courses sorted by credits in the ascending order.", "sql": "SELECT * FROM COURSE ORDER BY Credits", "example": {"db_id": "college_3", "query": "SELECT * FROM COURSE ORDER BY Credits", "query_toks": ["SELECT", "*", "FROM", "COURSE", "ORDER", "BY", "Credits"], "query_toks_no_value": ["select", "*", "from", "course", "order", "by", "credits"], "question": "List all information about courses sorted by credits in the ascending order.", "question_toks": ["List", "all", "information", "about", "courses", "sorted", "by", "credits", "in", "the", "ascending", "order", "."], "dataset_name": "spider", "guid": 930}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the students who have more than one advisor?", "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "student", "AS", "T1", "JOIN", "advisor", "AS", "T2", "ON", "T1.id", "=", "T2.s_id", "GROUP", "BY", "T2.s_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "student", "as", "t1", "join", "advisor", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "s_id", "group", "by", "t2", ".", "s_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of the students who have more than one advisor?", "question_toks": ["Find", "the", "name", "of", "the", "students", "who", "have", "more", "than", "one", "advisor", "?"], "dataset_name": "spider", "guid": 931}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of department where has the smallest number of professors?", "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What is the name of department where has the smallest number of professors?", "question_toks": ["What", "is", "the", "name", "of", "department", "where", "has", "the", "smallest", "number", "of", "professors", "?"], "dataset_name": "spider", "guid": 932}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the id of the courses that do not have any prerequisite?", "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "example": {"db_id": "college_2", "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "query_toks": ["SELECT", "course_id", "FROM", "course", "EXCEPT", "SELECT", "course_id", "FROM", "prereq"], "query_toks_no_value": ["select", "course_id", "from", "course", "except", "select", "course_id", "from", "prereq"], "question": "Find the id of the courses that do not have any prerequisite?", "question_toks": ["Find", "the", "id", "of", "the", "courses", "that", "do", "not", "have", "any", "prerequisite", "?"], "dataset_name": "spider", "guid": 933}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many courses does the department of Computer Information Systmes offer?", "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "department", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "dept_name", "=", "``", "Computer", "Info", ".", "Systems", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "dept_name", "=", "value"], "question": "How many courses does the department of Computer Information Systmes offer?", "question_toks": ["How", "many", "courses", "does", "the", "department", "of", "Computer", "Information", "Systmes", "offer", "?"], "dataset_name": "spider", "guid": 934}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty members did the university that conferred the most degrees in 2002 have?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1", "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2002", "ORDER", "BY", "t3.degrees", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "desc", "limit", "value"], "question": "How many faculty members did the university that conferred the most degrees in 2002 have?", "question_toks": ["How", "many", "faculty", "members", "did", "the", "university", "that", "conferred", "the", "most", "degrees", "in", "2002", "have", "?"], "dataset_name": "spider", "guid": 935}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the name of the department that has the fewest members.", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.DName", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "MEMBER_OF", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO", "GROUP", "BY", "T2.DNO", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "member_of", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno", "group", "by", "t2", ".", "dno", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Find the name of the department that has the fewest members.", "question_toks": ["Find", "the", "name", "of", "the", "department", "that", "has", "the", "fewest", "members", "."], "dataset_name": "spider", "guid": 936}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first and last name of the professor in biology department?", "sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"", "example": {"db_id": "college_1", "query": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"", "query_toks": ["SELECT", "T3.EMP_FNAME", ",", "T3.EMP_LNAME", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "JOIN", "employee", "AS", "T3", "ON", "T1.EMP_NUM", "=", "T3.EMP_NUM", "WHERE", "DEPT_NAME", "=", "``", "Biology", "''"], "query_toks_no_value": ["select", "t3", ".", "emp_fname", ",", "t3", ".", "emp_lname", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "join", "employee", "as", "t3", "on", "t1", ".", "emp_num", "=", "t3", ".", "emp_num", "where", "dept_name", "=", "value"], "question": "What is the first and last name of the professor in biology department?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "professor", "in", "biology", "department", "?"], "dataset_name": "spider", "guid": 937}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the patient who has the most recent undergoing treatment?", "sql": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1", "query_toks": ["SELECT", "patient", "FROM", "undergoes", "ORDER", "BY", "dateundergoes", "LIMIT", "1"], "query_toks_no_value": ["select", "patient", "from", "undergoes", "order", "by", "dateundergoes", "limit", "value"], "question": "Find the patient who has the most recent undergoing treatment?", "question_toks": ["Find", "the", "patient", "who", "has", "the", "most", "recent", "undergoing", "treatment", "?"], "dataset_name": "spider", "guid": 938}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the average gpa of the students enrolled in the course with code ACCT-211?", "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "avg", "(", "T2.stu_gpa", ")", "FROM", "enroll", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T1.class_code", "=", "T3.class_code", "WHERE", "T3.crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "stu_gpa", ")", "from", "enroll", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t1", ".", "class_code", "=", "t3", ".", "class_code", "where", "t3", ".", "crs_code", "=", "value"], "question": "What is the average gpa of the students enrolled in the course with code ACCT-211?", "question_toks": ["What", "is", "the", "average", "gpa", "of", "the", "students", "enrolled", "in", "the", "course", "with", "code", "ACCT-211", "?"], "dataset_name": "spider", "guid": 939}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the different locations of the school with the code BUS?", "sql": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_address", ")", "FROM", "department", "WHERE", "school_code", "=", "'BUS", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_address", ")", "from", "department", "where", "school_code", "=", "value"], "question": "What are the different locations of the school with the code BUS?", "question_toks": ["What", "are", "the", "different", "locations", "of", "the", "school", "with", "the", "code", "BUS", "?"], "dataset_name": "spider", "guid": 940}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first, last name, gpa of the youngest one among students whose GPA is above 3?", "sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1", "query_toks": ["SELECT", "stu_fname", ",", "stu_lname", ",", "stu_gpa", "FROM", "student", "WHERE", "stu_gpa", ">", "3", "ORDER", "BY", "stu_dob", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "stu_fname", ",", "stu_lname", ",", "stu_gpa", "from", "student", "where", "stu_gpa", ">", "value", "order", "by", "stu_dob", "desc", "limit", "value"], "question": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?", "question_toks": ["What", "is", "the", "first", ",", "last", "name", ",", "gpa", "of", "the", "youngest", "one", "among", "students", "whose", "GPA", "is", "above", "3", "?"], "dataset_name": "spider", "guid": 941}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the course title of the prerequisite of course Mobile Computing?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.prereq_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'Mobile", "Computing", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "prereq_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "What is the course title of the prerequisite of course Mobile Computing?", "question_toks": ["What", "is", "the", "course", "title", "of", "the", "prerequisite", "of", "course", "Mobile", "Computing", "?"], "dataset_name": "spider", "guid": 942}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the name of the department with the fewest members?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.DName", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "MEMBER_OF", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO", "GROUP", "BY", "T2.DNO", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "member_of", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno", "group", "by", "t2", ".", "dno", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the name of the department with the fewest members?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "fewest", "members", "?"], "dataset_name": "spider", "guid": 943}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name of students enrolled in class ACCT-211 and got grade C?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'", "example": {"db_id": "college_1", "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'", "query_toks": ["SELECT", "T3.stu_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T2.stu_num", "=", "T3.stu_num", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'", "AND", "T2.enroll_grade", "=", "'C", "'"], "query_toks_no_value": ["select", "t3", ".", "stu_fname", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t2", ".", "stu_num", "=", "t3", ".", "stu_num", "where", "t1", ".", "crs_code", "=", "value", "and", "t2", ".", "enroll_grade", "=", "value"], "question": "What is the first name of students enrolled in class ACCT-211 and got grade C?", "question_toks": ["What", "is", "the", "first", "name", "of", "students", "enrolled", "in", "class", "ACCT-211", "and", "got", "grade", "C", "?"], "dataset_name": "spider", "guid": 944}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the distinct first names for students with a grade point of 3.8 or above in at least one course?", "sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8", "example": {"db_id": "college_3", "query": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8", "query_toks": ["SELECT", "DISTINCT", "T3.Fname", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T2.gradepoint", ">", "=", "3.8"], "query_toks_no_value": ["select", "distinct", "t3", ".", "fname", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t2", ".", "gradepoint", ">", "=", "value"], "question": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?", "question_toks": ["What", "are", "the", "distinct", "first", "names", "for", "students", "with", "a", "grade", "point", "of", "3.8", "or", "above", "in", "at", "least", "one", "course", "?"], "dataset_name": "spider", "guid": 945}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the last name of the student who received an A in the class with the code 10018?", "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018", "example": {"db_id": "college_1", "query": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018", "query_toks": ["SELECT", "T1.stu_lname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "T2.enroll_grade", "=", "'A", "'", "AND", "T2.class_code", "=", "10018"], "query_toks_no_value": ["select", "t1", ".", "stu_lname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t2", ".", "enroll_grade", "=", "value", "and", "t2", ".", "class_code", "=", "value"], "question": "What is the last name of the student who received an A in the class with the code 10018?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "student", "who", "received", "an", "A", "in", "the", "class", "with", "the", "code", "10018", "?"], "dataset_name": "spider", "guid": 946}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of patients who are not taking the medication of Procrastin-X.", "sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'", "example": {"db_id": "hospital_1", "query": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'", "query_toks": ["SELECT", "name", "FROM", "patient", "EXCEPT", "SELECT", "T1.name", "FROM", "patient", "AS", "T1", "JOIN", "Prescribes", "AS", "T2", "ON", "T2.Patient", "=", "T1.SSN", "JOIN", "Medication", "AS", "T3", "ON", "T2.Medication", "=", "T3.Code", "WHERE", "T3.name", "=", "'Procrastin-X", "'"], "query_toks_no_value": ["select", "name", "from", "patient", "except", "select", "t1", ".", "name", "from", "patient", "as", "t1", "join", "prescribes", "as", "t2", "on", "t2", ".", "patient", "=", "t1", ".", "ssn", "join", "medication", "as", "t3", "on", "t2", ".", "medication", "=", "t3", ".", "code", "where", "t3", ".", "name", "=", "value"], "question": "What are the names of patients who are not taking the medication of Procrastin-X.", "question_toks": ["What", "are", "the", "names", "of", "patients", "who", "are", "not", "taking", "the", "medication", "of", "Procrastin-X", "."], "dataset_name": "spider", "guid": 947}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name and GPA of every student that has a GPA lower than average?", "sql": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)", "example": {"db_id": "college_1", "query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)", "query_toks": ["SELECT", "stu_fname", ",", "stu_gpa", "FROM", "student", "WHERE", "stu_gpa", "<", "(", "SELECT", "avg", "(", "stu_gpa", ")", "FROM", "student", ")"], "query_toks_no_value": ["select", "stu_fname", ",", "stu_gpa", "from", "student", "where", "stu_gpa", "<", "(", "select", "avg", "(", "stu_gpa", ")", "from", "student", ")"], "question": "What is the first name and GPA of every student that has a GPA lower than average?", "question_toks": ["What", "is", "the", "first", "name", "and", "GPA", "of", "every", "student", "that", "has", "a", "GPA", "lower", "than", "average", "?"], "dataset_name": "spider", "guid": 948}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the name and building of the departments whose budget is more than the average budget?", "sql": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  building FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "query_toks": ["SELECT", "dept_name", ",", "building", "FROM", "department", "WHERE", "budget", ">", "(", "SELECT", "avg", "(", "budget", ")", "FROM", "department", ")"], "query_toks_no_value": ["select", "dept_name", ",", "building", "from", "department", "where", "budget", ">", "(", "select", "avg", "(", "budget", ")", "from", "department", ")"], "question": "What is the name and building of the departments whose budget is more than the average budget?", "question_toks": ["What", "is", "the", "name", "and", "building", "of", "the", "departments", "whose", "budget", "is", "more", "than", "the", "average", "budget", "?"], "dataset_name": "spider", "guid": 949}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the school code of the accounting department?", "sql": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"", "example": {"db_id": "college_1", "query": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"", "query_toks": ["SELECT", "school_code", "FROM", "department", "WHERE", "dept_name", "=", "``", "Accounting", "''"], "query_toks_no_value": ["select", "school_code", "from", "department", "where", "dept_name", "=", "value"], "question": "What is the school code of the accounting department?", "question_toks": ["What", "is", "the", "school", "code", "of", "the", "accounting", "department", "?"], "dataset_name": "spider", "guid": 950}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name and building of the department with the highest budget.", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", ",", "building", "FROM", "department", "ORDER", "BY", "budget", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", ",", "building", "from", "department", "order", "by", "budget", "desc", "limit", "value"], "question": "Find the name and building of the department with the highest budget.", "question_toks": ["Find", "the", "name", "and", "building", "of", "the", "department", "with", "the", "highest", "budget", "."], "dataset_name": "spider", "guid": 951}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names and office of the professors who are in the history department and have a Ph.D?", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "query_toks": ["SELECT", "T1.emp_fname", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T3.dept_code", "=", "T2.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "AND", "T2.prof_high_degree", "=", "'Ph.D", ".", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_fname", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t3", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "and", "t2", ".", "prof_high_degree", "=", "value"], "question": "What are the first names and office of the professors who are in the history department and have a Ph.D?", "question_toks": ["What", "are", "the", "first", "names", "and", "office", "of", "the", "professors", "who", "are", "in", "the", "history", "department", "and", "have", "a", "Ph.D", "?"], "dataset_name": "spider", "guid": 952}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the distinct student first names of all students that have grade point at least 3.8 in one course.", "sql": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8", "example": {"db_id": "college_3", "query": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8", "query_toks": ["SELECT", "DISTINCT", "T3.Fname", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T2.gradepoint", ">", "=", "3.8"], "query_toks_no_value": ["select", "distinct", "t3", ".", "fname", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t2", ".", "gradepoint", ">", "=", "value"], "question": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.", "question_toks": ["Find", "the", "distinct", "student", "first", "names", "of", "all", "students", "that", "have", "grade", "point", "at", "least", "3.8", "in", "one", "course", "."], "dataset_name": "spider", "guid": 953}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many departments are in each school?", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", ",", "school_code", "from", "department", "group", "by", "school_code"], "question": "How many departments are in each school?", "question_toks": ["How", "many", "departments", "are", "in", "each", "school", "?"], "dataset_name": "spider", "guid": 954}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | For each Orange county campus, report the number of degrees granted after 2000.", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus", "example": {"db_id": "csu_1", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus", "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T1.county", "=", "``", "Orange", "''", "AND", "T2.year", ">", "=", "2000", "GROUP", "BY", "T1.campus"], "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "county", "=", "value", "and", "t2", ".", "year", ">", "=", "value", "group", "by", "t1", ".", "campus"], "question": "For each Orange county campus, report the number of degrees granted after 2000.", "question_toks": ["For", "each", "Orange", "county", "campus", ",", "report", "the", "number", "of", "degrees", "granted", "after", "2000", "."], "dataset_name": "spider", "guid": 955}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of students who have taken the prerequisite course of the course with title International Finance.", "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "query_toks": ["SELECT", "T1.name", "FROM", "student", "AS", "T1", "JOIN", "takes", "AS", "T2", "ON", "T1.id", "=", "T2.id", "WHERE", "T2.course_id", "IN", "(", "SELECT", "T4.prereq_id", "FROM", "course", "AS", "T3", "JOIN", "prereq", "AS", "T4", "ON", "T3.course_id", "=", "T4.course_id", "WHERE", "T3.title", "=", "'International", "Finance", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "student", "as", "t1", "join", "takes", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "where", "t2", ".", "course_id", "in", "(", "select", "t4", ".", "prereq_id", "from", "course", "as", "t3", "join", "prereq", "as", "t4", "on", "t3", ".", "course_id", "=", "t4", ".", "course_id", "where", "t3", ".", "title", "=", "value", ")"], "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.", "question_toks": ["Find", "the", "name", "of", "students", "who", "have", "taken", "the", "prerequisite", "course", "of", "the", "course", "with", "title", "International", "Finance", "."], "dataset_name": "spider", "guid": 956}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the procedures that cost more than 1000 or are specialized in by physician John Wen?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "name", "FROM", "procedures", "WHERE", "cost", ">", "1000", "UNION", "SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "name", "from", "procedures", "where", "cost", ">", "value", "union", "select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "What are the procedures that cost more than 1000 or are specialized in by physician John Wen?", "question_toks": ["What", "are", "the", "procedures", "that", "cost", "more", "than", "1000", "or", "are", "specialized", "in", "by", "physician", "John", "Wen", "?"], "dataset_name": "spider", "guid": 957}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the ids for courses in the Fall of 2009 or the Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "UNION", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "union", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?", "question_toks": ["What", "are", "the", "ids", "for", "courses", "in", "the", "Fall", "of", "2009", "or", "the", "Spring", "of", "2010", "?"], "dataset_name": "spider", "guid": 958}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find courses that ran in Fall 2009 but not in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "EXCEPT", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "except", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "Find courses that ran in Fall 2009 but not in Spring 2010.", "question_toks": ["Find", "courses", "that", "ran", "in", "Fall", "2009", "but", "not", "in", "Spring", "2010", "."], "dataset_name": "spider", "guid": 959}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name, GPA, and phone number of the students with the top 5 GPAs?", "sql": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "example": {"db_id": "college_1", "query": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "query_toks": ["SELECT", "stu_gpa", ",", "stu_phone", ",", "stu_fname", "FROM", "student", "ORDER", "BY", "stu_gpa", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "stu_gpa", ",", "stu_phone", ",", "stu_fname", "from", "student", "order", "by", "stu_gpa", "desc", "limit", "value"], "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?", "question_toks": ["What", "is", "the", "first", "name", ",", "GPA", ",", "and", "phone", "number", "of", "the", "students", "with", "the", "top", "5", "GPAs", "?"], "dataset_name": "spider", "guid": 960}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many courses are offered?", "sql": "SELECT count(DISTINCT crs_code) FROM CLASS", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT crs_code) FROM CLASS", "query_toks": ["SELECT", "count", "(", "DISTINCT", "crs_code", ")", "FROM", "CLASS"], "query_toks_no_value": ["select", "count", "(", "distinct", "crs_code", ")", "from", "class"], "question": "How many courses are offered?", "question_toks": ["How", "many", "courses", "are", "offered", "?"], "dataset_name": "spider", "guid": 961}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name, address, and number of students in the departments that have the 3 most students?", "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.dept_name", ",", "T2.dept_address", ",", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t2", ".", "dept_address", ",", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name, address, and number of students in the departments that have the 3 most students?", "question_toks": ["What", "is", "the", "name", ",", "address", ",", "and", "number", "of", "students", "in", "the", "departments", "that", "have", "the", "3", "most", "students", "?"], "dataset_name": "spider", "guid": 962}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campus has the most degrees  conferrred over its entire existence?", "sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "query_toks": ["SELECT", "campus", "FROM", "degrees", "GROUP", "BY", "campus", "ORDER", "BY", "sum", "(", "degrees", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "campus", "from", "degrees", "group", "by", "campus", "order", "by", "sum", "(", "degrees", ")", "desc", "limit", "value"], "question": "What campus has the most degrees  conferrred over its entire existence?", "question_toks": ["What", "campus", "has", "the", "most", "degrees", "conferrred", "over", "its", "entire", "existence", "?"], "dataset_name": "spider", "guid": 963}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | For each classroom with at least 2 classes, how many classes are offered?", "sql": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "class_room", "FROM", "CLASS", "GROUP", "BY", "class_room", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "class_room", "from", "class", "group", "by", "class_room", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "For each classroom with at least 2 classes, how many classes are offered?", "question_toks": ["For", "each", "classroom", "with", "at", "least", "2", "classes", ",", "how", "many", "classes", "are", "offered", "?"], "dataset_name": "spider", "guid": 964}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the department name of the instructor whose name contains 'Soisalon'.", "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "query_toks": ["SELECT", "dept_name", "FROM", "instructor", "WHERE", "name", "LIKE", "'", "%", "Soisalon", "%", "'"], "query_toks_no_value": ["select", "dept_name", "from", "instructor", "where", "name", "like", "value"], "question": "Find the department name of the instructor whose name contains 'Soisalon'.", "question_toks": ["Find", "the", "department", "name", "of", "the", "instructor", "whose", "name", "contains", "'Soisalon", "'", "."], "dataset_name": "spider", "guid": 965}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of all the physicians who took appointments.", "sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "example": {"db_id": "hospital_1", "query": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "query_toks": ["SELECT", "T2.name", "FROM", "appointment", "AS", "T1", "JOIN", "physician", "AS", "T2", "ON", "T1.Physician", "=", "T2.EmployeeID"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "appointment", "as", "t1", "join", "physician", "as", "t2", "on", "t1", ".", "physician", "=", "t2", ".", "employeeid"], "question": "What are the names of all the physicians who took appointments.", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "physicians", "who", "took", "appointments", "."], "dataset_name": "spider", "guid": 966}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many students are enrolled in the class taught by some professor from the accounting department?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "department", "AS", "T4", "ON", "T3.dept_code", "=", "T4.dept_code", "WHERE", "T4.dept_name", "=", "'Accounting", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "department", "as", "t4", "on", "t3", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "How many students are enrolled in the class taught by some professor from the accounting department?", "question_toks": ["How", "many", "students", "are", "enrolled", "in", "the", "class", "taught", "by", "some", "professor", "from", "the", "accounting", "department", "?"], "dataset_name": "spider", "guid": 967}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What are the campuses that had between 600 and 1000 faculty members in 2004?", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "t1", "JOIN", "faculty", "AS", "t2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t2.faculty", ">", "=", "600", "AND", "t2.faculty", "<", "=", "1000", "AND", "T1.year", "=", "2004"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "faculty", ">", "=", "value", "and", "t2", ".", "faculty", "<", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "What are the campuses that had between 600 and 1000 faculty members in 2004?", "question_toks": ["What", "are", "the", "campuses", "that", "had", "between", "600", "and", "1000", "faculty", "members", "in", "2004", "?"], "dataset_name": "spider", "guid": 968}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the name of physicians who took some appointment.", "sql": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "example": {"db_id": "hospital_1", "query": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "query_toks": ["SELECT", "T2.name", "FROM", "appointment", "AS", "T1", "JOIN", "physician", "AS", "T2", "ON", "T1.Physician", "=", "T2.EmployeeID"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "appointment", "as", "t1", "join", "physician", "as", "t2", "on", "t1", ".", "physician", "=", "t2", ".", "employeeid"], "question": "List the name of physicians who took some appointment.", "question_toks": ["List", "the", "name", "of", "physicians", "who", "took", "some", "appointment", "."], "dataset_name": "spider", "guid": 969}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the department name and corresponding building for the department with the greatest budget?", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", ",", "building", "FROM", "department", "ORDER", "BY", "budget", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", ",", "building", "from", "department", "order", "by", "budget", "desc", "limit", "value"], "question": "What is the department name and corresponding building for the department with the greatest budget?", "question_toks": ["What", "is", "the", "department", "name", "and", "corresponding", "building", "for", "the", "department", "with", "the", "greatest", "budget", "?"], "dataset_name": "spider", "guid": 970}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the first and last names of the instructors who teach the top 3 number of courses?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "college_3", "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "COURSE", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.Instructor", "=", "T2.FacID", "GROUP", "BY", "T1.Instructor", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "course", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "instructor", "=", "t2", ".", "facid", "group", "by", "t1", ".", "instructor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the first and last names of the instructors who teach the top 3 number of courses?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "the", "instructors", "who", "teach", "the", "top", "3", "number", "of", "courses", "?"], "dataset_name": "spider", "guid": 971}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give all information regarding instructors, in order of salary from least to greatest.", "sql": "SELECT * FROM instructor ORDER BY salary", "example": {"db_id": "college_2", "query": "SELECT * FROM instructor ORDER BY salary", "query_toks": ["SELECT", "*", "FROM", "instructor", "ORDER", "BY", "salary"], "query_toks_no_value": ["select", "*", "from", "instructor", "order", "by", "salary"], "question": "Give all information regarding instructors, in order of salary from least to greatest.", "question_toks": ["Give", "all", "information", "regarding", "instructors", ",", "in", "order", "of", "salary", "from", "least", "to", "greatest", "."], "dataset_name": "spider", "guid": 972}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many rooms does the Lamberton building have?", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "classroom", "WHERE", "building", "=", "'Lamberton", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "classroom", "where", "building", "=", "value"], "question": "How many rooms does the Lamberton building have?", "question_toks": ["How", "many", "rooms", "does", "the", "Lamberton", "building", "have", "?"], "dataset_name": "spider", "guid": 973}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the names of departments either in division AS, or in division EN and in building NEB?", "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"", "example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "AS", "''", "UNION", "SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "EN", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "dname", "from", "department", "where", "division", "=", "value", "union", "select", "dname", "from", "department", "where", "division", "=", "value", "and", "building", "=", "value"], "question": "What are the names of departments either in division AS, or in division EN and in building NEB?", "question_toks": ["What", "are", "the", "names", "of", "departments", "either", "in", "division", "AS", ",", "or", "in", "division", "EN", "and", "in", "building", "NEB", "?"], "dataset_name": "spider", "guid": 974}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of the department with the student that has the lowest GPA?", "sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "ORDER", "BY", "stu_gpa", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "order", "by", "stu_gpa", "limit", "value"], "question": "What is the name of the department with the student that has the lowest GPA?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "student", "that", "has", "the", "lowest", "GPA", "?"], "dataset_name": "spider", "guid": 975}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the name of the department with the most credits?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "course", "GROUP", "BY", "dept_name", "ORDER", "BY", "sum", "(", "credits", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "course", "group", "by", "dept_name", "order", "by", "sum", "(", "credits", ")", "desc", "limit", "value"], "question": "What is the name of the department with the most credits?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "most", "credits", "?"], "dataset_name": "spider", "guid": 976}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the id of the appointment with the most recent start date?", "sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1", "query_toks": ["SELECT", "appointmentid", "FROM", "appointment", "ORDER", "BY", "START", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "appointmentid", "from", "appointment", "order", "by", "start", "desc", "limit", "value"], "question": "Find the id of the appointment with the most recent start date?", "question_toks": ["Find", "the", "id", "of", "the", "appointment", "with", "the", "most", "recent", "start", "date", "?"], "dataset_name": "spider", "guid": 977}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the first name of students not enrolled in any course.", "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "example": {"db_id": "college_3", "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "query_toks": ["SELECT", "Fname", "FROM", "STUDENT", "WHERE", "StuID", "NOT", "IN", "(", "SELECT", "StuID", "FROM", "ENROLLED_IN", ")"], "query_toks_no_value": ["select", "fname", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "enrolled_in", ")"], "question": "Find the first name of students not enrolled in any course.", "question_toks": ["Find", "the", "first", "name", "of", "students", "not", "enrolled", "in", "any", "course", "."], "dataset_name": "spider", "guid": 978}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Give the building that the instructor who teaches the greatest number of courses lives in.", "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Building", "FROM", "COURSE", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.Instructor", "=", "T2.FacID", "GROUP", "BY", "T1.Instructor", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "building", "from", "course", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "instructor", "=", "t2", ".", "facid", "group", "by", "t1", ".", "instructor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give the building that the instructor who teaches the greatest number of courses lives in.", "question_toks": ["Give", "the", "building", "that", "the", "instructor", "who", "teaches", "the", "greatest", "number", "of", "courses", "lives", "in", "."], "dataset_name": "spider", "guid": 979}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many classes does the professor whose last name is Graztevski teach?", "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.EMP_NUM", "=", "T2.PROF_NUM", "WHERE", "T1.EMP_LNAME", "=", "'Graztevski", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "t1", ".", "emp_lname", "=", "value"], "question": "How many classes does the professor whose last name is Graztevski teach?", "question_toks": ["How", "many", "classes", "does", "the", "professor", "whose", "last", "name", "is", "Graztevski", "teach", "?"], "dataset_name": "spider", "guid": 980}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors teach a class with the code ACCT-211?", "sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "PROF_NUM", ")", "FROM", "CLASS", "WHERE", "CRS_CODE", "=", "``", "ACCT-211", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "prof_num", ")", "from", "class", "where", "crs_code", "=", "value"], "question": "How many professors teach a class with the code ACCT-211?", "question_toks": ["How", "many", "professors", "teach", "a", "class", "with", "the", "code", "ACCT-211", "?"], "dataset_name": "spider", "guid": 981}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the names of all departments in alphabetical order?", "sql": "SELECT dept_name FROM department ORDER BY dept_name", "example": {"db_id": "college_1", "query": "SELECT dept_name FROM department ORDER BY dept_name", "query_toks": ["SELECT", "dept_name", "FROM", "department", "ORDER", "BY", "dept_name"], "query_toks_no_value": ["select", "dept_name", "from", "department", "order", "by", "dept_name"], "question": "What are the names of all departments in alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "all", "departments", "in", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 982}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of student who only took one course?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "GROUP", "BY", "T2.stu_num", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "group", "by", "t2", ".", "stu_num", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the first names of student who only took one course?", "question_toks": ["What", "are", "the", "first", "names", "of", "student", "who", "only", "took", "one", "course", "?"], "dataset_name": "spider", "guid": 983}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the number of distinct room types available.", "sql": "SELECT count(DISTINCT roomtype) FROM room", "example": {"db_id": "hospital_1", "query": "SELECT count(DISTINCT roomtype) FROM room", "query_toks": ["SELECT", "count", "(", "DISTINCT", "roomtype", ")", "FROM", "room"], "query_toks_no_value": ["select", "count", "(", "distinct", "roomtype", ")", "from", "room"], "question": "Find the number of distinct room types available.", "question_toks": ["Find", "the", "number", "of", "distinct", "room", "types", "available", "."], "dataset_name": "spider", "guid": 984}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all students taking accoutning and Computer Information Systems classes?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Accounting", "'", "INTERSECT", "SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value", "intersect", "select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value"], "question": "What are the first names of all students taking accoutning and Computer Information Systems classes?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "taking", "accoutning", "and", "Computer", "Information", "Systems", "classes", "?"], "dataset_name": "spider", "guid": 985}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of all instructors who have taught a course, as well as the corresponding course id?", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "example": {"db_id": "college_2", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "query_toks": ["SELECT", "name", ",", "course_id", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.ID", "=", "T2.ID"], "query_toks_no_value": ["select", "name", ",", "course_id", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id"], "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?", "question_toks": ["What", "are", "the", "names", "of", "all", "instructors", "who", "have", "taught", "a", "course", ",", "as", "well", "as", "the", "corresponding", "course", "id", "?"], "dataset_name": "spider", "guid": 986}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the highest cost, lowest cost and average cost of procedures?", "sql": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures", "example": {"db_id": "hospital_1", "query": "SELECT MAX(cost) ,  MIN(cost) ,  AVG(cost) FROM procedures", "query_toks": ["SELECT", "MAX", "(", "cost", ")", ",", "MIN", "(", "cost", ")", ",", "AVG", "(", "cost", ")", "FROM", "procedures"], "query_toks_no_value": ["select", "max", "(", "cost", ")", ",", "min", "(", "cost", ")", ",", "avg", "(", "cost", ")", "from", "procedures"], "question": "What are the highest cost, lowest cost and average cost of procedures?", "question_toks": ["What", "are", "the", "highest", "cost", ",", "lowest", "cost", "and", "average", "cost", "of", "procedures", "?"], "dataset_name": "spider", "guid": 987}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the name, address, number of students in the departments that have the top 3 highest number of students.", "sql": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.dept_name", ",", "T2.dept_address", ",", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t2", ".", "dept_address", ",", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name, address, number of students in the departments that have the top 3 highest number of students.", "question_toks": ["Find", "the", "name", ",", "address", ",", "number", "of", "students", "in", "the", "departments", "that", "have", "the", "top", "3", "highest", "number", "of", "students", "."], "dataset_name": "spider", "guid": 988}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses opened between 1935 and 1939?", "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", ">", "=", "1935", "AND", "YEAR", "<", "=", "1939"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", ">", "=", "value", "and", "year", "<", "=", "value"], "question": "What campuses opened between 1935 and 1939?", "question_toks": ["What", "campuses", "opened", "between", "1935", "and", "1939", "?"], "dataset_name": "spider", "guid": 989}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the campus fee in the year 2000 for San Jose State University?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000", "example": {"db_id": "csu_1", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000", "query_toks": ["SELECT", "t1.campusfee", "FROM", "csu_fees", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t2.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "t1.year", "=", "2000"], "query_toks_no_value": ["select", "t1", ".", "campusfee", "from", "csu_fees", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t2", ".", "campus", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "What is the campus fee in the year 2000 for San Jose State University?", "question_toks": ["What", "is", "the", "campus", "fee", "in", "the", "year", "2000", "for", "San", "Jose", "State", "University", "?"], "dataset_name": "spider", "guid": 990}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of the physicians who have 'senior' in their titles.", "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "example": {"db_id": "hospital_1", "query": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "query_toks": ["SELECT", "name", "FROM", "physician", "WHERE", "POSITION", "LIKE", "'", "%", "senior", "%", "'"], "query_toks_no_value": ["select", "name", "from", "physician", "where", "position", "like", "value"], "question": "What are the names of the physicians who have 'senior' in their titles.", "question_toks": ["What", "are", "the", "names", "of", "the", "physicians", "who", "have", "'senior", "'", "in", "their", "titles", "."], "dataset_name": "spider", "guid": 991}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Which school has the fewest professors?", "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Which school has the fewest professors?", "question_toks": ["Which", "school", "has", "the", "fewest", "professors", "?"], "dataset_name": "spider", "guid": 992}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of courses in the Physics department.", "sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "course_id", ")", "FROM", "course", "WHERE", "dept_name", "=", "'Physics", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "course_id", ")", "from", "course", "where", "dept_name", "=", "value"], "question": "Count the number of courses in the Physics department.", "question_toks": ["Count", "the", "number", "of", "courses", "in", "the", "Physics", "department", "."], "dataset_name": "spider", "guid": 993}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the count of universities whose campus fee is greater than the average campus fee.", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "csu_fees", "WHERE", "campusfee", ">", "(", "SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "csu_fees", "where", "campusfee", ">", "(", "select", "avg", "(", "campusfee", ")", "from", "csu_fees", ")"], "question": "Find the count of universities whose campus fee is greater than the average campus fee.", "question_toks": ["Find", "the", "count", "of", "universities", "whose", "campus", "fee", "is", "greater", "than", "the", "average", "campus", "fee", "."], "dataset_name": "spider", "guid": 994}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of instructors who are advising more than one student.", "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "instructor", "AS", "T1", "JOIN", "advisor", "AS", "T2", "ON", "T1.id", "=", "T2.i_id", "GROUP", "BY", "T2.i_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "instructor", "as", "t1", "join", "advisor", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "i_id", "group", "by", "t2", ".", "i_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of instructors who are advising more than one student.", "question_toks": ["Find", "the", "name", "of", "instructors", "who", "are", "advising", "more", "than", "one", "student", "."], "dataset_name": "spider", "guid": 995}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the name of the student who has the highest total credits in the History department.", "sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "dept_name", "=", "'History", "'", "ORDER", "BY", "tot_cred", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "student", "where", "dept_name", "=", "value", "order", "by", "tot_cred", "desc", "limit", "value"], "question": "What is the name of the student who has the highest total credits in the History department.", "question_toks": ["What", "is", "the", "name", "of", "the", "student", "who", "has", "the", "highest", "total", "credits", "in", "the", "History", "department", "."], "dataset_name": "spider", "guid": 996}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses are in Los Angeles county?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value"], "question": "What campuses are in Los Angeles county?", "question_toks": ["What", "campuses", "are", "in", "Los", "Angeles", "county", "?"], "dataset_name": "spider", "guid": 997}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the lowest salary in departments with average salary greater than the overall average.", "sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "example": {"db_id": "college_2", "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "query_toks": ["SELECT", "min", "(", "salary", ")", ",", "dept_name", "FROM", "instructor", "GROUP", "BY", "dept_name", "HAVING", "avg", "(", "salary", ")", ">", "(", "SELECT", "avg", "(", "salary", ")", "FROM", "instructor", ")"], "query_toks_no_value": ["select", "min", "(", "salary", ")", ",", "dept_name", "from", "instructor", "group", "by", "dept_name", "having", "avg", "(", "salary", ")", ">", "(", "select", "avg", "(", "salary", ")", "from", "instructor", ")"], "question": "What is the lowest salary in departments with average salary greater than the overall average.", "question_toks": ["What", "is", "the", "lowest", "salary", "in", "departments", "with", "average", "salary", "greater", "than", "the", "overall", "average", "."], "dataset_name": "spider", "guid": 998}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of students who have more than one advisor?", "sql": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id  =  T2.s_id GROUP BY T2.s_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "student", "AS", "T1", "JOIN", "advisor", "AS", "T2", "ON", "T1.id", "=", "T2.s_id", "GROUP", "BY", "T2.s_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "student", "as", "t1", "join", "advisor", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "s_id", "group", "by", "t2", ".", "s_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of students who have more than one advisor?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "have", "more", "than", "one", "advisor", "?"], "dataset_name": "spider", "guid": 999}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the name of the campuses opened before 1800.", "sql": "SELECT campus FROM campuses WHERE YEAR  <  1800", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE YEAR  <  1800", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", "<", "1800"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", "<", "value"], "question": "Find the name of the campuses opened before 1800.", "question_toks": ["Find", "the", "name", "of", "the", "campuses", "opened", "before", "1800", "."], "dataset_name": "spider", "guid": 1000}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the name of the highest paid instructor.", "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "instructor", "ORDER", "BY", "salary", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "instructor", "order", "by", "salary", "desc", "limit", "value"], "question": "Give the name of the highest paid instructor.", "question_toks": ["Give", "the", "name", "of", "the", "highest", "paid", "instructor", "."], "dataset_name": "spider", "guid": 1001}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of the instructors in the Comp. Sci. department who earn more than 80000?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "dept_name", "=", "'Comp", ".", "Sci", ".", "'", "AND", "salary", ">", "80000"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "dept_name", "=", "value", "and", "salary", ">", "value"], "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?", "question_toks": ["What", "are", "the", "names", "of", "the", "instructors", "in", "the", "Comp", ".", "Sci", ".", "department", "who", "earn", "more", "than", "80000", "?"], "dataset_name": "spider", "guid": 1002}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of all instructors in Comp. Sci. department with salary > 80000.", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "dept_name", "=", "'Comp", ".", "Sci", ".", "'", "AND", "salary", ">", "80000"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "dept_name", "=", "value", "and", "salary", ">", "value"], "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "in", "Comp", ".", "Sci", ".", "department", "with", "salary", ">", "80000", "."], "dataset_name": "spider", "guid": 1003}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the campus fee for San Francisco State University in 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996", "example": {"db_id": "csu_1", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996", "query_toks": ["SELECT", "campusfee", "FROM", "campuses", "AS", "T1", "JOIN", "csu_fees", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "T2.year", "=", "1996"], "query_toks_no_value": ["select", "campusfee", "from", "campuses", "as", "t1", "join", "csu_fees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "What is the campus fee for San Francisco State University in 1996?", "question_toks": ["What", "is", "the", "campus", "fee", "for", "San", "Francisco", "State", "University", "in", "1996", "?"], "dataset_name": "spider", "guid": 1004}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "name", "FROM", "procedures", "WHERE", "cost", ">", "1000", "EXCEPT", "SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "name", "from", "procedures", "where", "cost", ">", "value", "except", "select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?", "question_toks": ["Among", "the", "procedures", "that", "cost", "more", "than", "1000", ",", "which", "were", "not", "specialized", "in", "by", "physician", "John", "Wen", "?"], "dataset_name": "spider", "guid": 1005}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty is there in total in the year of 2002?", "sql": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "example": {"db_id": "csu_1", "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "query_toks": ["SELECT", "sum", "(", "faculty", ")", "FROM", "faculty", "WHERE", "YEAR", "=", "2002"], "query_toks_no_value": ["select", "sum", "(", "faculty", ")", "from", "faculty", "where", "year", "=", "value"], "question": "How many faculty is there in total in the year of 2002?", "question_toks": ["How", "many", "faculty", "is", "there", "in", "total", "in", "the", "year", "of", "2002", "?"], "dataset_name": "spider", "guid": 1006}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of classrooms in Lamberton.", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "classroom", "WHERE", "building", "=", "'Lamberton", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "classroom", "where", "building", "=", "value"], "question": "Count the number of classrooms in Lamberton.", "question_toks": ["Count", "the", "number", "of", "classrooms", "in", "Lamberton", "."], "dataset_name": "spider", "guid": 1007}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the highest, lowest, and average student GPA for every department?", "sql": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "max", "(", "stu_gpa", ")", ",", "avg", "(", "stu_gpa", ")", ",", "min", "(", "stu_gpa", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "max", "(", "stu_gpa", ")", ",", "avg", "(", "stu_gpa", ")", ",", "min", "(", "stu_gpa", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "What is the highest, lowest, and average student GPA for every department?", "question_toks": ["What", "is", "the", "highest", ",", "lowest", ",", "and", "average", "student", "GPA", "for", "every", "department", "?"], "dataset_name": "spider", "guid": 1008}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many sections does each course has?", "sql": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "crs_code", "FROM", "CLASS", "GROUP", "BY", "crs_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "crs_code", "from", "class", "group", "by", "crs_code"], "question": "How many sections does each course has?", "question_toks": ["How", "many", "sections", "does", "each", "course", "has", "?"], "dataset_name": "spider", "guid": 1009}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the students and their department names sorted by their total credits in ascending order.", "sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "example": {"db_id": "college_2", "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "query_toks": ["SELECT", "name", ",", "dept_name", "FROM", "student", "ORDER", "BY", "tot_cred"], "query_toks_no_value": ["select", "name", ",", "dept_name", "from", "student", "order", "by", "tot_cred"], "question": "Find the name of the students and their department names sorted by their total credits in ascending order.", "question_toks": ["Find", "the", "name", "of", "the", "students", "and", "their", "department", "names", "sorted", "by", "their", "total", "credits", "in", "ascending", "order", "."], "dataset_name": "spider", "guid": 1010}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name and the average gpa of department whose students have the highest average gpa?", "sql": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", ",", "avg", "(", "T1.stu_gpa", ")", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "avg", "(", "T1.stu_gpa", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "avg", "(", "t1", ".", "stu_gpa", ")", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "avg", "(", "t1", ".", "stu_gpa", ")", "desc", "limit", "value"], "question": "What is the name and the average gpa of department whose students have the highest average gpa?", "question_toks": ["What", "is", "the", "name", "and", "the", "average", "gpa", "of", "department", "whose", "students", "have", "the", "highest", "average", "gpa", "?"], "dataset_name": "spider", "guid": 1011}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the names of the physicians who prescribe medication Thesisin?", "sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "medication", "AS", "T3", "ON", "T3.code", "=", "T2.medication", "WHERE", "T3.name", "=", "``", "Thesisin", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "physician", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "medication", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "medication", "where", "t3", ".", "name", "=", "value"], "question": "What is the names of the physicians who prescribe medication Thesisin?", "question_toks": ["What", "is", "the", "names", "of", "the", "physicians", "who", "prescribe", "medication", "Thesisin", "?"], "dataset_name": "spider", "guid": 1012}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the last name and office of the professor from the history department?", "sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'", "query_toks": ["SELECT", "T1.emp_lname", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_lname", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value"], "question": "What is the last name and office of the professor from the history department?", "question_toks": ["What", "is", "the", "last", "name", "and", "office", "of", "the", "professor", "from", "the", "history", "department", "?"], "dataset_name": "spider", "guid": 1013}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the number of rooms for different block code?", "sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode", "example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.blockcode", "FROM", "BLOCK", "AS", "T1", "JOIN", "room", "AS", "T2", "ON", "T1.blockfloor", "=", "T2.blockfloor", "AND", "T1.blockcode", "=", "T2.blockcode", "GROUP", "BY", "T1.blockcode"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "blockcode", "from", "block", "as", "t1", "join", "room", "as", "t2", "on", "t1", ".", "blockfloor", "=", "t2", ".", "blockfloor", "and", "t1", ".", "blockcode", "=", "t2", ".", "blockcode", "group", "by", "t1", ".", "blockcode"], "question": "Find the number of rooms for different block code?", "question_toks": ["Find", "the", "number", "of", "rooms", "for", "different", "block", "code", "?"], "dataset_name": "spider", "guid": 1014}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many instructors teach a course in the Spring of 2010?", "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "ID", ")", "FROM", "teaches", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "count", "(", "distinct", "id", ")", "from", "teaches", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "How many instructors teach a course in the Spring of 2010?", "question_toks": ["How", "many", "instructors", "teach", "a", "course", "in", "the", "Spring", "of", "2010", "?"], "dataset_name": "spider", "guid": 1015}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the number of departments in Division \"AS\"?", "sql": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"", "example": {"db_id": "college_3", "query": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "AS", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department", "where", "division", "=", "value"], "question": "What is the number of departments in Division \"AS\"?", "question_toks": ["What", "is", "the", "number", "of", "departments", "in", "Division", "``", "AS", "''", "?"], "dataset_name": "spider", "guid": 1016}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name, gpa and phone number of the top 5 students with highest gpa?", "sql": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "example": {"db_id": "college_1", "query": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5", "query_toks": ["SELECT", "stu_gpa", ",", "stu_phone", ",", "stu_fname", "FROM", "student", "ORDER", "BY", "stu_gpa", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "stu_gpa", ",", "stu_phone", ",", "stu_fname", "from", "student", "order", "by", "stu_gpa", "desc", "limit", "value"], "question": "What is the first name, gpa and phone number of the top 5 students with highest gpa?", "question_toks": ["What", "is", "the", "first", "name", ",", "gpa", "and", "phone", "number", "of", "the", "top", "5", "students", "with", "highest", "gpa", "?"], "dataset_name": "spider", "guid": 1017}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "faculty", ">", "(", "SELECT", "max", "(", "faculty", ")", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "T1.county", "=", "``", "Orange", "''", ")"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "faculty", ">", "(", "select", "max", "(", "faculty", ")", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "t1", ".", "county", "=", "value", ")"], "question": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?", "question_toks": ["What", "are", "the", "names", "of", "the", "campus", "that", "have", "more", "faculties", "in", "2002", "than", "the", "maximum", "number", "in", "Orange", "county", "?"], "dataset_name": "spider", "guid": 1018}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the department which has the highest average salary of professors.", "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "instructor", "GROUP", "BY", "dept_name", "ORDER", "BY", "avg", "(", "salary", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "instructor", "group", "by", "dept_name", "order", "by", "avg", "(", "salary", ")", "desc", "limit", "value"], "question": "Find the name of the department which has the highest average salary of professors.", "question_toks": ["Find", "the", "name", "of", "the", "department", "which", "has", "the", "highest", "average", "salary", "of", "professors", "."], "dataset_name": "spider", "guid": 1019}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many departments offer courses?", "sql": "SELECT count(DISTINCT dept_name) FROM course", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT dept_name) FROM course", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", "FROM", "course"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", "from", "course"], "question": "How many departments offer courses?", "question_toks": ["How", "many", "departments", "offer", "courses", "?"], "dataset_name": "spider", "guid": 1020}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the total number of hours have done for all students in each department.", "sql": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "sum", "(", "stu_hrs", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "sum", "(", "stu_hrs", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "Find the total number of hours have done for all students in each department.", "question_toks": ["Find", "the", "total", "number", "of", "hours", "have", "done", "for", "all", "students", "in", "each", "department", "."], "dataset_name": "spider", "guid": 1021}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the name and primarily affiliated department name of each physician?", "sql": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1", "query_toks": ["SELECT", "T1.name", ",", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T2.PrimaryAffiliation", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t3", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t2", ".", "primaryaffiliation", "=", "value"], "question": "What are the name and primarily affiliated department name of each physician?", "question_toks": ["What", "are", "the", "name", "and", "primarily", "affiliated", "department", "name", "of", "each", "physician", "?"], "dataset_name": "spider", "guid": 1022}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "WHERE", "T3.crs_code", "=", "'ACCT-211", "'", "AND", "T1.stu_lname", "LIKE", "'S", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "where", "t3", ".", "crs_code", "=", "value", "and", "t1", ".", "stu_lname", "like", "value"], "question": "What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?", "question_toks": ["What", "is", "the", "first", "name", "of", "the", "student", "whose", "last", "name", "starts", "with", "the", "letter", "S", "and", "is", "taking", "ACCT-211", "?"], "dataset_name": "spider", "guid": 1023}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of courses without prerequisites.", "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "course", "WHERE", "course_id", "NOT", "IN", "(", "SELECT", "course_id", "FROM", "prereq", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "course", "where", "course_id", "not", "in", "(", "select", "course_id", "from", "prereq", ")"], "question": "Count the number of courses without prerequisites.", "question_toks": ["Count", "the", "number", "of", "courses", "without", "prerequisites", "."], "dataset_name": "spider", "guid": 1024}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the student first and last names and grade points of all enrollments.", "sql": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID", "example": {"db_id": "college_3", "query": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID", "query_toks": ["SELECT", "T3.Fname", ",", "T3.LName", ",", "T2.gradepoint", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", ",", "t2", ".", "gradepoint", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid"], "question": "Find the student first and last names and grade points of all enrollments.", "question_toks": ["Find", "the", "student", "first", "and", "last", "names", "and", "grade", "points", "of", "all", "enrollments", "."], "dataset_name": "spider", "guid": 1025}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of instructors who didn't teach?", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "id", "NOT", "IN", "(", "SELECT", "id", "FROM", "teaches", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "id", "not", "in", "(", "select", "id", "from", "teaches", ")"], "question": "What are the names of instructors who didn't teach?", "question_toks": ["What", "are", "the", "names", "of", "instructors", "who", "did", "n't", "teach", "?"], "dataset_name": "spider", "guid": 1026}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the distinct salaries of all instructors who earned less than the maximum salary?", "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "example": {"db_id": "college_2", "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "query_toks": ["SELECT", "DISTINCT", "salary", "FROM", "instructor", "WHERE", "salary", "<", "(", "SELECT", "max", "(", "salary", ")", "FROM", "instructor", ")"], "query_toks_no_value": ["select", "distinct", "salary", "from", "instructor", "where", "salary", "<", "(", "select", "max", "(", "salary", ")", "from", "instructor", ")"], "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?", "question_toks": ["What", "are", "the", "distinct", "salaries", "of", "all", "instructors", "who", "earned", "less", "than", "the", "maximum", "salary", "?"], "dataset_name": "spider", "guid": 1027}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of the students who took classes in 2009 or 2010?", "sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "student", "AS", "T1", "JOIN", "takes", "AS", "T2", "ON", "T1.id", "=", "T2.id", "WHERE", "YEAR", "=", "2009", "OR", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "student", "as", "t1", "join", "takes", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "What are the names of the students who took classes in 2009 or 2010?", "question_toks": ["What", "are", "the", "names", "of", "the", "students", "who", "took", "classes", "in", "2009", "or", "2010", "?"], "dataset_name": "spider", "guid": 1028}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the average cost of procedures that physician John Wen was trained in?", "sql": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "avg", "(", "T3.cost", ")", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "cost", ")", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "What is the average cost of procedures that physician John Wen was trained in?", "question_toks": ["What", "is", "the", "average", "cost", "of", "procedures", "that", "physician", "John", "Wen", "was", "trained", "in", "?"], "dataset_name": "spider", "guid": 1029}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name and position of physicians who prescribe some medication whose brand is X?", "sql": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"", "query_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.position", "FROM", "physician", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "medication", "AS", "T3", "ON", "T3.code", "=", "T2.medication", "WHERE", "T3.Brand", "=", "``", "X", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", ",", "t1", ".", "position", "from", "physician", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "medication", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "medication", "where", "t3", ".", "brand", "=", "value"], "question": "Find the name and position of physicians who prescribe some medication whose brand is X?", "question_toks": ["Find", "the", "name", "and", "position", "of", "physicians", "who", "prescribe", "some", "medication", "whose", "brand", "is", "X", "?"], "dataset_name": "spider", "guid": 1030}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the number of students that have at least one grade \"B\".", "sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"", "example": {"db_id": "college_3", "query": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "StuID", ")", "FROM", "ENROLLED_IN", "WHERE", "Grade", "=", "``", "B", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "stuid", ")", "from", "enrolled_in", "where", "grade", "=", "value"], "question": "Find the number of students that have at least one grade \"B\".", "question_toks": ["Find", "the", "number", "of", "students", "that", "have", "at", "least", "one", "grade", "``", "B", "''", "."], "dataset_name": "spider", "guid": 1031}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the number of patients' prescriptions physician John Dorian made.", "sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"", "example": {"db_id": "hospital_1", "query": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"", "query_toks": ["SELECT", "count", "(", "T1.SSN", ")", "FROM", "patient", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.SSN", "=", "T2.patient", "JOIN", "physician", "AS", "T3", "ON", "T2.physician", "=", "T3.employeeid", "WHERE", "T3.name", "=", "``", "John", "Dorian", "''"], "query_toks_no_value": ["select", "count", "(", "t1", ".", "ssn", ")", "from", "patient", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "ssn", "=", "t2", ".", "patient", "join", "physician", "as", "t3", "on", "t2", ".", "physician", "=", "t3", ".", "employeeid", "where", "t3", ".", "name", "=", "value"], "question": "Find the number of patients' prescriptions physician John Dorian made.", "question_toks": ["Find", "the", "number", "of", "patients", "'", "prescriptions", "physician", "John", "Dorian", "made", "."], "dataset_name": "spider", "guid": 1032}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Which department offers the most credits all together?", "sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1", "query_toks": ["SELECT", "T3.dept_name", "FROM", "course", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "JOIN", "department", "AS", "T3", "ON", "T1.dept_code", "=", "T3.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "sum", "(", "T1.crs_credit", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "dept_name", "from", "course", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "join", "department", "as", "t3", "on", "t1", ".", "dept_code", "=", "t3", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "sum", "(", "t1", ".", "crs_credit", ")", "desc", "limit", "value"], "question": "Which department offers the most credits all together?", "question_toks": ["Which", "department", "offers", "the", "most", "credits", "all", "together", "?"], "dataset_name": "spider", "guid": 1033}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the course names, ordered by credits?", "sql": "SELECT CName FROM COURSE ORDER BY Credits", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE ORDER BY Credits", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "ORDER", "BY", "Credits"], "query_toks_no_value": ["select", "cname", "from", "course", "order", "by", "credits"], "question": "What are the course names, ordered by credits?", "question_toks": ["What", "are", "the", "course", "names", ",", "ordered", "by", "credits", "?"], "dataset_name": "spider", "guid": 1034}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of all instructors with names that include \"dar\"?", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "name", "LIKE", "'", "%", "dar", "%", "'"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "name", "like", "value"], "question": "What are the names of all instructors with names that include \"dar\"?", "question_toks": ["What", "are", "the", "names", "of", "all", "instructors", "with", "names", "that", "include", "``", "dar", "''", "?"], "dataset_name": "spider", "guid": 1035}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Which building does the instructor who teaches the most number of courses live in?", "sql": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Building", "FROM", "COURSE", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.Instructor", "=", "T2.FacID", "GROUP", "BY", "T1.Instructor", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "building", "from", "course", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "instructor", "=", "t2", ".", "facid", "group", "by", "t1", ".", "instructor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which building does the instructor who teaches the most number of courses live in?", "question_toks": ["Which", "building", "does", "the", "instructor", "who", "teaches", "the", "most", "number", "of", "courses", "live", "in", "?"], "dataset_name": "spider", "guid": 1036}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many different departments are there in each school that has less than 5 apartments?", "sql": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code", "HAVING", "count", "(", "DISTINCT", "dept_name", ")", "<", "5"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", ",", "school_code", "from", "department", "group", "by", "school_code", "having", "count", "(", "distinct", "dept_name", ")", "<", "value"], "question": "How many different departments are there in each school that has less than 5 apartments?", "question_toks": ["How", "many", "different", "departments", "are", "there", "in", "each", "school", "that", "has", "less", "than", "5", "apartments", "?"], "dataset_name": "spider", "guid": 1037}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.", "sql": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'", "example": {"db_id": "flight_4", "query": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'", "query_toks": ["SELECT", "name", ",", "city", ",", "country", ",", "elevation", "FROM", "airports", "WHERE", "city", "=", "'New", "York", "'"], "query_toks_no_value": ["select", "name", ",", "city", ",", "country", ",", "elevation", "from", "airports", "where", "city", "=", "value"], "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.", "question_toks": ["Find", "the", "name", ",", "city", ",", "country", ",", "and", "altitude", "(", "or", "elevation", ")", "of", "the", "airports", "in", "the", "city", "of", "New", "York", "."], "dataset_name": "spider", "guid": 327}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | List all countries and their number of airlines in the descending order of number of airlines.", "sql": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC", "example": {"db_id": "flight_4", "query": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC", "query_toks": ["SELECT", "country", ",", "count", "(", "*", ")", "FROM", "airlines", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "airlines", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc"], "question": "List all countries and their number of airlines in the descending order of number of airlines.", "question_toks": ["List", "all", "countries", "and", "their", "number", "of", "airlines", "in", "the", "descending", "order", "of", "number", "of", "airlines", "."], "dataset_name": "spider", "guid": 328}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which country does Airline \"JetBlue Airways\" belong to?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "example": {"db_id": "flight_2", "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "query_toks": ["SELECT", "Country", "FROM", "AIRLINES", "WHERE", "Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "country", "from", "airlines", "where", "airline", "=", "value"], "question": "Which country does Airline \"JetBlue Airways\" belong to?", "question_toks": ["Which", "country", "does", "Airline", "``", "JetBlue", "Airways", "''", "belong", "to", "?"], "dataset_name": "spider", "guid": 329}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show the station name with greatest number of trains.", "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "train_station", "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "train_station", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.station_id", "=", "T2.station_id", "GROUP", "BY", "T1.station_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "train_station", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "station_id", "=", "t2", ".", "station_id", "group", "by", "t1", ".", "station_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the station name with greatest number of trains.", "question_toks": ["Show", "the", "station", "name", "with", "greatest", "number", "of", "trains", "."], "dataset_name": "spider", "guid": 330}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What is the name and age of the pilot younger than 30 who has won the most number of times?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "aircraft", "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", ",", "t1.age", "FROM", "pilot", "AS", "t1", "JOIN", "MATCH", "AS", "t2", "ON", "t1.pilot_id", "=", "t2.winning_pilot", "WHERE", "t1.age", "<", "30", "GROUP", "BY", "t2.winning_pilot", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "age", "from", "pilot", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "pilot_id", "=", "t2", ".", "winning_pilot", "where", "t1", ".", "age", "<", "value", "group", "by", "t2", ".", "winning_pilot", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?", "question_toks": ["What", "is", "the", "name", "and", "age", "of", "the", "pilot", "younger", "than", "30", "who", "has", "won", "the", "most", "number", "of", "times", "?"], "dataset_name": "spider", "guid": 331}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the name and salary of the employee with the id 242518965?", "sql": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "example": {"db_id": "flight_1", "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "query_toks": ["SELECT", "name", ",", "salary", "FROM", "Employee", "WHERE", "eid", "=", "242518965"], "query_toks_no_value": ["select", "name", ",", "salary", "from", "employee", "where", "eid", "=", "value"], "question": "What is the name and salary of the employee with the id 242518965?", "question_toks": ["What", "is", "the", "name", "and", "salary", "of", "the", "employee", "with", "the", "id", "242518965", "?"], "dataset_name": "spider", "guid": 332}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | List the airport code and name in the city of Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "example": {"db_id": "flight_2", "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "query_toks": ["SELECT", "AirportCode", ",", "AirportName", "FROM", "AIRPORTS", "WHERE", "city", "=", "``", "Anthony", "''"], "query_toks_no_value": ["select", "airportcode", ",", "airportname", "from", "airports", "where", "city", "=", "value"], "question": "List the airport code and name in the city of Anthony.", "question_toks": ["List", "the", "airport", "code", "and", "name", "in", "the", "city", "of", "Anthony", "."], "dataset_name": "spider", "guid": 333}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Return the number of flights.", "sql": "SELECT count(*) FROM FLIGHTS", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights"], "question": "Return the number of flights.", "question_toks": ["Return", "the", "number", "of", "flights", "."], "dataset_name": "spider", "guid": 334}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the salaray and name of the employee with the most certificates to fly planes more than 5000?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "JOIN", "Aircraft", "AS", "T3", "ON", "T3.aid", "=", "T2.aid", "WHERE", "T3.distance", ">", "5000", "GROUP", "BY", "T1.eid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "join", "aircraft", "as", "t3", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t3", ".", "distance", ">", "value", "group", "by", "t1", ".", "eid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?", "question_toks": ["What", "is", "the", "salaray", "and", "name", "of", "the", "employee", "with", "the", "most", "certificates", "to", "fly", "planes", "more", "than", "5000", "?"], "dataset_name": "spider", "guid": 335}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | What are all locations of train stations?", "sql": "SELECT DISTINCT LOCATION FROM station", "example": {"db_id": "train_station", "query": "SELECT DISTINCT LOCATION FROM station", "query_toks": ["SELECT", "DISTINCT", "LOCATION", "FROM", "station"], "query_toks_no_value": ["select", "distinct", "location", "from", "station"], "question": "What are all locations of train stations?", "question_toks": ["What", "are", "all", "locations", "of", "train", "stations", "?"], "dataset_name": "spider", "guid": 336}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What is the code of airport that has fewest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "example": {"db_id": "flight_2", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.AirportCode", "FROM", "AIRPORTS", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.AirportCode", "=", "T2.DestAirport", "OR", "T1.AirportCode", "=", "T2.SourceAirport", "GROUP", "BY", "T1.AirportCode", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "airportcode", "=", "t2", ".", "destairport", "or", "t1", ".", "airportcode", "=", "t2", ".", "sourceairport", "group", "by", "t1", ".", "airportcode", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What is the code of airport that has fewest number of flights?", "question_toks": ["What", "is", "the", "code", "of", "airport", "that", "has", "fewest", "number", "of", "flights", "?"], "dataset_name": "spider", "guid": 337}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the descriptions for the aircrafts?", "sql": "SELECT Description FROM aircraft", "example": {"db_id": "aircraft", "query": "SELECT Description FROM aircraft", "query_toks": ["SELECT", "Description", "FROM", "aircraft"], "query_toks_no_value": ["select", "description", "from", "aircraft"], "question": "What are the descriptions for the aircrafts?", "question_toks": ["What", "are", "the", "descriptions", "for", "the", "aircrafts", "?"], "dataset_name": "spider", "guid": 338}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | How many airlines operate out of each country in descending order?", "sql": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC", "example": {"db_id": "flight_4", "query": "SELECT country ,  count(*) FROM airlines GROUP BY country ORDER BY count(*) DESC", "query_toks": ["SELECT", "country", ",", "count", "(", "*", ")", "FROM", "airlines", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "airlines", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc"], "question": "How many airlines operate out of each country in descending order?", "question_toks": ["How", "many", "airlines", "operate", "out", "of", "each", "country", "in", "descending", "order", "?"], "dataset_name": "spider", "guid": 339}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | How many airlines does Russia has?", "sql": "SELECT count(*) FROM airlines WHERE country  =  'Russia'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM airlines WHERE country  =  'Russia'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airlines", "WHERE", "country", "=", "'Russia", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "value"], "question": "How many airlines does Russia has?", "question_toks": ["How", "many", "airlines", "does", "Russia", "has", "?"], "dataset_name": "spider", "guid": 340}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "aircraft", "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot WHERE t1.age  <  30 GROUP BY t2.winning_pilot ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", ",", "t1.age", "FROM", "pilot", "AS", "t1", "JOIN", "MATCH", "AS", "t2", "ON", "t1.pilot_id", "=", "t2.winning_pilot", "WHERE", "t1.age", "<", "30", "GROUP", "BY", "t2.winning_pilot", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "age", "from", "pilot", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "pilot_id", "=", "t2", ".", "winning_pilot", "where", "t1", ".", "age", "<", "value", "group", "by", "t2", ".", "winning_pilot", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.", "question_toks": ["find", "the", "name", "and", "age", "of", "the", "pilot", "who", "has", "won", "the", "most", "number", "of", "times", "among", "the", "pilots", "who", "are", "younger", "than", "30", "."], "dataset_name": "spider", "guid": 341}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | Show all information on the airport that has the largest number of international passengers.", "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1", "example": {"db_id": "aircraft", "query": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1", "query_toks": ["SELECT", "*", "FROM", "airport", "ORDER", "BY", "International_Passengers", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "*", "from", "airport", "order", "by", "international_passengers", "desc", "limit", "value"], "question": "Show all information on the airport that has the largest number of international passengers.", "question_toks": ["Show", "all", "information", "on", "the", "airport", "that", "has", "the", "largest", "number", "of", "international", "passengers", "."], "dataset_name": "spider", "guid": 342}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the number of flights?", "sql": "SELECT count(*) FROM Flight", "example": {"db_id": "flight_1", "query": "SELECT count(*) FROM Flight", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Flight"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flight"], "question": "What is the number of flights?", "question_toks": ["What", "is", "the", "number", "of", "flights", "?"], "dataset_name": "spider", "guid": 343}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Give the classes that have more than two captains.", "sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2", "example": {"db_id": "ship_1", "query": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2", "query_toks": ["SELECT", "CLASS", "FROM", "captain", "GROUP", "BY", "CLASS", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "class", "from", "captain", "group", "by", "class", "having", "count", "(", "*", ")", ">", "value"], "question": "Give the classes that have more than two captains.", "question_toks": ["Give", "the", "classes", "that", "have", "more", "than", "two", "captains", "."], "dataset_name": "spider", "guid": 344}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What are the names of airports in Aberdeen?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "example": {"db_id": "flight_2", "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "query_toks": ["SELECT", "AirportName", "FROM", "AIRPORTS", "WHERE", "City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "city", "=", "value"], "question": "What are the names of airports in Aberdeen?", "question_toks": ["What", "are", "the", "names", "of", "airports", "in", "Aberdeen", "?"], "dataset_name": "spider", "guid": 345}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | List the names of aircrafts and that did not win any match.", "sql": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)", "example": {"db_id": "aircraft", "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)", "query_toks": ["SELECT", "Aircraft", "FROM", "aircraft", "WHERE", "Aircraft_ID", "NOT", "IN", "(", "SELECT", "Winning_Aircraft", "FROM", "MATCH", ")"], "query_toks_no_value": ["select", "aircraft", "from", "aircraft", "where", "aircraft_id", "not", "in", "(", "select", "winning_aircraft", "from", "match", ")"], "question": "List the names of aircrafts and that did not win any match.", "question_toks": ["List", "the", "names", "of", "aircrafts", "and", "that", "did", "not", "win", "any", "match", "."], "dataset_name": "spider", "guid": 346}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What is the airport code of the airport with the most flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_2", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.AirportCode", "FROM", "AIRPORTS", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.AirportCode", "=", "T2.DestAirport", "OR", "T1.AirportCode", "=", "T2.SourceAirport", "GROUP", "BY", "T1.AirportCode", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "airportcode", "=", "t2", ".", "destairport", "or", "t1", ".", "airportcode", "=", "t2", ".", "sourceairport", "group", "by", "t1", ".", "airportcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the airport code of the airport with the most flights?", "question_toks": ["What", "is", "the", "airport", "code", "of", "the", "airport", "with", "the", "most", "flights", "?"], "dataset_name": "spider", "guid": 347}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the names of all pilots 30 years old or young in descending alphabetical order?", "sql": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC", "example": {"db_id": "aircraft", "query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC", "query_toks": ["SELECT", "Name", "FROM", "pilot", "WHERE", "Age", "<", "=", "30", "ORDER", "BY", "Name", "DESC"], "query_toks_no_value": ["select", "name", "from", "pilot", "where", "age", "<", "=", "value", "order", "by", "name", "desc"], "question": "What are the names of all pilots 30 years old or young in descending alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "all", "pilots", "30", "years", "old", "or", "young", "in", "descending", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 348}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show all flight number from Los Angeles.", "sql": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"", "example": {"db_id": "flight_1", "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"", "query_toks": ["SELECT", "flno", "FROM", "Flight", "WHERE", "origin", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "flno", "from", "flight", "where", "origin", "=", "value"], "question": "Show all flight number from Los Angeles.", "question_toks": ["Show", "all", "flight", "number", "from", "Los", "Angeles", "."], "dataset_name": "spider", "guid": 349}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the name and city of the airport which is the source for the most number of flight routes.", "sql": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T1.city", ",", "T2.src_apid", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.src_apid", "GROUP", "BY", "T2.src_apid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "city", ",", "t2", ".", "src_apid", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "src_apid", "group", "by", "t2", ".", "src_apid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name and city of the airport which is the source for the most number of flight routes.", "question_toks": ["Find", "the", "name", "and", "city", "of", "the", "airport", "which", "is", "the", "source", "for", "the", "most", "number", "of", "flight", "routes", "."], "dataset_name": "spider", "guid": 350}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | List the object number of railways that do not have any trains.", "sql": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)", "example": {"db_id": "railway", "query": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)", "query_toks": ["SELECT", "ObjectNumber", "FROM", "railway", "WHERE", "Railway_ID", "NOT", "IN", "(", "SELECT", "Railway_ID", "FROM", "train", ")"], "query_toks_no_value": ["select", "objectnumber", "from", "railway", "where", "railway_id", "not", "in", "(", "select", "railway_id", "from", "train", ")"], "question": "List the object number of railways that do not have any trains.", "question_toks": ["List", "the", "object", "number", "of", "railways", "that", "do", "not", "have", "any", "trains", "."], "dataset_name": "spider", "guid": 351}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | Show the names of pilots and models of aircrafts they have flied with.", "sql": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID", "example": {"db_id": "pilot_record", "query": "SELECT T3.Pilot_name ,  T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID", "query_toks": ["SELECT", "T3.Pilot_name", ",", "T2.Model", "FROM", "pilot_record", "AS", "T1", "JOIN", "aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "pilot", "AS", "T3", "ON", "T1.Pilot_ID", "=", "T3.Pilot_ID"], "query_toks_no_value": ["select", "t3", ".", "pilot_name", ",", "t2", ".", "model", "from", "pilot_record", "as", "t1", "join", "aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "pilot", "as", "t3", "on", "t1", ".", "pilot_id", "=", "t3", ".", "pilot_id"], "question": "Show the names of pilots and models of aircrafts they have flied with.", "question_toks": ["Show", "the", "names", "of", "pilots", "and", "models", "of", "aircrafts", "they", "have", "flied", "with", "."], "dataset_name": "spider", "guid": 352}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many flights depart from 'APG'?", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "WHERE", "SourceAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "where", "sourceairport", "=", "value"], "question": "How many flights depart from 'APG'?", "question_toks": ["How", "many", "flights", "depart", "from", "'APG", "'", "?"], "dataset_name": "spider", "guid": 353}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Find the names of the trains that do not pass any station located in London.", "sql": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")", "example": {"db_id": "train_station", "query": "SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id  =  T2.train_id WHERE T1.station_id NOT IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id  =  T4.station_id WHERE t4.location  =  \"London\")", "query_toks": ["SELECT", "T2.name", "FROM", "train_station", "AS", "T1", "JOIN", "train", "AS", "T2", "ON", "T1.train_id", "=", "T2.train_id", "WHERE", "T1.station_id", "NOT", "IN", "(", "SELECT", "T4.station_id", "FROM", "train_station", "AS", "T3", "JOIN", "station", "AS", "T4", "ON", "T3.station_id", "=", "T4.station_id", "WHERE", "t4.location", "=", "``", "London", "''", ")"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "train_station", "as", "t1", "join", "train", "as", "t2", "on", "t1", ".", "train_id", "=", "t2", ".", "train_id", "where", "t1", ".", "station_id", "not", "in", "(", "select", "t4", ".", "station_id", "from", "train_station", "as", "t3", "join", "station", "as", "t4", "on", "t3", ".", "station_id", "=", "t4", ".", "station_id", "where", "t4", ".", "location", "=", "value", ")"], "question": "Find the names of the trains that do not pass any station located in London.", "question_toks": ["Find", "the", "names", "of", "the", "trains", "that", "do", "not", "pass", "any", "station", "located", "in", "London", "."], "dataset_name": "spider", "guid": 354}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which airline has most number of flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which airline has most number of flights?", "question_toks": ["Which", "airline", "has", "most", "number", "of", "flights", "?"], "dataset_name": "spider", "guid": 355}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the flight numbers for the aircraft Airbus A340-300?", "sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"", "example": {"db_id": "flight_1", "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"", "query_toks": ["SELECT", "T1.flno", "FROM", "Flight", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T1.aid", "=", "T2.aid", "WHERE", "T2.name", "=", "``", "Airbus", "A340-300", "''"], "query_toks_no_value": ["select", "t1", ".", "flno", "from", "flight", "as", "t1", "join", "aircraft", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "aid", "where", "t2", ".", "name", "=", "value"], "question": "What are the flight numbers for the aircraft Airbus A340-300?", "question_toks": ["What", "are", "the", "flight", "numbers", "for", "the", "aircraft", "Airbus", "A340-300", "?"], "dataset_name": "spider", "guid": 356}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which airlines have departures from CVO but not from APG airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "CVO", "''", "EXCEPT", "SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value", "except", "select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "Which airlines have departures from CVO but not from APG airports?", "question_toks": ["Which", "airlines", "have", "departures", "from", "CVO", "but", "not", "from", "APG", "airports", "?"], "dataset_name": "spider", "guid": 357}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Find the name of the ship that is steered by the youngest captain.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1", "example": {"db_id": "ship_1", "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "ship", "AS", "t1", "JOIN", "captain", "AS", "t2", "ON", "t1.ship_id", "=", "t2.ship_id", "ORDER", "BY", "t2.age", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "ship", "as", "t1", "join", "captain", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id", "order", "by", "t2", ".", "age", "limit", "value"], "question": "Find the name of the ship that is steered by the youngest captain.", "question_toks": ["Find", "the", "name", "of", "the", "ship", "that", "is", "steered", "by", "the", "youngest", "captain", "."], "dataset_name": "spider", "guid": 358}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Which origin has most number of flights?", "sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "origin", "FROM", "Flight", "GROUP", "BY", "origin", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "origin", "from", "flight", "group", "by", "origin", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which origin has most number of flights?", "question_toks": ["Which", "origin", "has", "most", "number", "of", "flights", "?"], "dataset_name": "spider", "guid": 359}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Find the name, type, and flag of the ship that is built in the most recent year.", "sql": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1", "example": {"db_id": "ship_1", "query": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "TYPE", ",", "flag", "FROM", "ship", "ORDER", "BY", "built_year", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "type", ",", "flag", "from", "ship", "order", "by", "built_year", "desc", "limit", "value"], "question": "Find the name, type, and flag of the ship that is built in the most recent year.", "question_toks": ["Find", "the", "name", ",", "type", ",", "and", "flag", "of", "the", "ship", "that", "is", "built", "in", "the", "most", "recent", "year", "."], "dataset_name": "spider", "guid": 360}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show names for all employees who have certificate of Boeing 737-800.", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "example": {"db_id": "flight_1", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "query_toks": ["SELECT", "T1.name", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "JOIN", "Aircraft", "AS", "T3", "ON", "T3.aid", "=", "T2.aid", "WHERE", "T3.name", "=", "``", "Boeing", "737-800", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "join", "aircraft", "as", "t3", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t3", ".", "name", "=", "value"], "question": "Show names for all employees who have certificate of Boeing 737-800.", "question_toks": ["Show", "names", "for", "all", "employees", "who", "have", "certificate", "of", "Boeing", "737-800", "."], "dataset_name": "spider", "guid": 361}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the number of routes whose destinations are Italian airports?", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "routes", "AS", "T1", "JOIN", "airports", "AS", "T2", "ON", "T1.dst_apid", "=", "T2.apid", "WHERE", "T2.country", "=", "'Italy", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "routes", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "dst_apid", "=", "t2", ".", "apid", "where", "t2", ".", "country", "=", "value"], "question": "What is the number of routes whose destinations are Italian airports?", "question_toks": ["What", "is", "the", "number", "of", "routes", "whose", "destinations", "are", "Italian", "airports", "?"], "dataset_name": "spider", "guid": 362}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the count of aircrafts that have a distance between 1000 and 5000?", "sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "example": {"db_id": "flight_1", "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Aircraft", "WHERE", "distance", "BETWEEN", "1000", "AND", "5000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "aircraft", "where", "distance", "between", "value", "and", "value"], "question": "What is the count of aircrafts that have a distance between 1000 and 5000?", "question_toks": ["What", "is", "the", "count", "of", "aircrafts", "that", "have", "a", "distance", "between", "1000", "and", "5000", "?"], "dataset_name": "spider", "guid": 363}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the number of airports whose name contain the word 'International'.", "sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM airports WHERE name LIKE '%International%'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airports", "WHERE", "name", "LIKE", "'", "%", "International", "%", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airports", "where", "name", "like", "value"], "question": "Find the number of airports whose name contain the word 'International'.", "question_toks": ["Find", "the", "number", "of", "airports", "whose", "name", "contain", "the", "word", "'International", "'", "."], "dataset_name": "spider", "guid": 364}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What are the names of the ships  that are from either the US or the UK?", "sql": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"", "example": {"db_id": "ship_mission", "query": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"", "query_toks": ["SELECT", "Name", "FROM", "ship", "WHERE", "Nationality", "=", "``", "United", "States", "''", "OR", "Nationality", "=", "``", "United", "Kingdom", "''"], "query_toks_no_value": ["select", "name", "from", "ship", "where", "nationality", "=", "value", "or", "nationality", "=", "value"], "question": "What are the names of the ships  that are from either the US or the UK?", "question_toks": ["What", "are", "the", "names", "of", "the", "ships", "that", "are", "from", "either", "the", "US", "or", "the", "UK", "?"], "dataset_name": "spider", "guid": 365}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | How many employees have salary between 100000 and 200000?", "sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "example": {"db_id": "flight_1", "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Employee", "WHERE", "salary", "BETWEEN", "100000", "AND", "200000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee", "where", "salary", "between", "value", "and", "value"], "question": "How many employees have salary between 100000 and 200000?", "question_toks": ["How", "many", "employees", "have", "salary", "between", "100000", "and", "200000", "?"], "dataset_name": "spider", "guid": 366}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | How many different captain ranks are there?", "sql": "SELECT count(DISTINCT rank) FROM captain", "example": {"db_id": "ship_1", "query": "SELECT count(DISTINCT rank) FROM captain", "query_toks": ["SELECT", "count", "(", "DISTINCT", "rank", ")", "FROM", "captain"], "query_toks_no_value": ["select", "count", "(", "distinct", "rank", ")", "from", "captain"], "question": "How many different captain ranks are there?", "question_toks": ["How", "many", "different", "captain", "ranks", "are", "there", "?"], "dataset_name": "spider", "guid": 367}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show flight number for all flights with more than 2000 distance.", "sql": "SELECT flno FROM Flight WHERE distance  >  2000", "example": {"db_id": "flight_1", "query": "SELECT flno FROM Flight WHERE distance  >  2000", "query_toks": ["SELECT", "flno", "FROM", "Flight", "WHERE", "distance", ">", "2000"], "query_toks_no_value": ["select", "flno", "from", "flight", "where", "distance", ">", "value"], "question": "Show flight number for all flights with more than 2000 distance.", "question_toks": ["Show", "flight", "number", "for", "all", "flights", "with", "more", "than", "2000", "distance", "."], "dataset_name": "spider", "guid": 368}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Find the name and flag of ships that are not steered by any captain with Midshipman rank.", "sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')", "example": {"db_id": "ship_1", "query": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')", "query_toks": ["SELECT", "name", ",", "flag", "FROM", "ship", "WHERE", "ship_id", "NOT", "IN", "(", "SELECT", "ship_id", "FROM", "captain", "WHERE", "rank", "=", "'Midshipman", "'", ")"], "query_toks_no_value": ["select", "name", ",", "flag", "from", "ship", "where", "ship_id", "not", "in", "(", "select", "ship_id", "from", "captain", "where", "rank", "=", "value", ")"], "question": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.", "question_toks": ["Find", "the", "name", "and", "flag", "of", "ships", "that", "are", "not", "steered", "by", "any", "captain", "with", "Midshipman", "rank", "."], "dataset_name": "spider", "guid": 369}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the name and city of the airport from most of the routes start?", "sql": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT T1.name ,  T1.city ,  T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T2.src_apid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T1.city", ",", "T2.src_apid", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.src_apid", "GROUP", "BY", "T2.src_apid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "city", ",", "t2", ".", "src_apid", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "src_apid", "group", "by", "t2", ".", "src_apid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and city of the airport from most of the routes start?", "question_toks": ["What", "is", "the", "name", "and", "city", "of", "the", "airport", "from", "most", "of", "the", "routes", "start", "?"], "dataset_name": "spider", "guid": 370}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | How many flights do we have?", "sql": "SELECT count(*) FROM Flight", "example": {"db_id": "flight_1", "query": "SELECT count(*) FROM Flight", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Flight"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flight"], "question": "How many flights do we have?", "question_toks": ["How", "many", "flights", "do", "we", "have", "?"], "dataset_name": "spider", "guid": 371}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the numbers of the shortest flights?", "sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "example": {"db_id": "flight_1", "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "query_toks": ["SELECT", "flno", "FROM", "Flight", "ORDER", "BY", "distance", "ASC", "LIMIT", "3"], "query_toks_no_value": ["select", "flno", "from", "flight", "order", "by", "distance", "asc", "limit", "value"], "question": "What are the numbers of the shortest flights?", "question_toks": ["What", "are", "the", "numbers", "of", "the", "shortest", "flights", "?"], "dataset_name": "spider", "guid": 372}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Find the ship type that are used by both ships with Panama and Malta flags.", "sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'", "example": {"db_id": "ship_1", "query": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'", "query_toks": ["SELECT", "TYPE", "FROM", "ship", "WHERE", "flag", "=", "'Panama", "'", "INTERSECT", "SELECT", "TYPE", "FROM", "ship", "WHERE", "flag", "=", "'Malta", "'"], "query_toks_no_value": ["select", "type", "from", "ship", "where", "flag", "=", "value", "intersect", "select", "type", "from", "ship", "where", "flag", "=", "value"], "question": "Find the ship type that are used by both ships with Panama and Malta flags.", "question_toks": ["Find", "the", "ship", "type", "that", "are", "used", "by", "both", "ships", "with", "Panama", "and", "Malta", "flags", "."], "dataset_name": "spider", "guid": 373}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the count of cities with more than 3 airports?", "sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "(", "SELECT", "city", "FROM", "airports", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", ">", "3", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "(", "select", "city", "from", "airports", "group", "by", "city", "having", "count", "(", "*", ")", ">", "value", ")"], "question": "What is the count of cities with more than 3 airports?", "question_toks": ["What", "is", "the", "count", "of", "cities", "with", "more", "than", "3", "airports", "?"], "dataset_name": "spider", "guid": 374}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | How many different cities do have some airport in the country of Greenland?", "sql": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'", "example": {"db_id": "flight_4", "query": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "airports", "WHERE", "country", "=", "'Greenland", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "airports", "where", "country", "=", "value"], "question": "How many different cities do have some airport in the country of Greenland?", "question_toks": ["How", "many", "different", "cities", "do", "have", "some", "airport", "in", "the", "country", "of", "Greenland", "?"], "dataset_name": "spider", "guid": 375}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | How old is the youngest winning pilot and what is their name?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1", "example": {"db_id": "aircraft", "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1", "query_toks": ["SELECT", "t1.name", ",", "t1.age", "FROM", "pilot", "AS", "t1", "JOIN", "MATCH", "AS", "t2", "ON", "t1.pilot_id", "=", "t2.winning_pilot", "ORDER", "BY", "t1.age", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "age", "from", "pilot", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "pilot_id", "=", "t2", ".", "winning_pilot", "order", "by", "t1", ".", "age", "limit", "value"], "question": "How old is the youngest winning pilot and what is their name?", "question_toks": ["How", "old", "is", "the", "youngest", "winning", "pilot", "and", "what", "is", "their", "name", "?"], "dataset_name": "spider", "guid": 376}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the name of the country with the most number of home airlines?", "sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country", "FROM", "airlines", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "airlines", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the country with the most number of home airlines?", "question_toks": ["What", "is", "the", "name", "of", "the", "country", "with", "the", "most", "number", "of", "home", "airlines", "?"], "dataset_name": "spider", "guid": 377}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show all locations with only 1 station.", "sql": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1", "example": {"db_id": "train_station", "query": "SELECT LOCATION FROM station GROUP BY LOCATION HAVING count(*)  =  1", "query_toks": ["SELECT", "LOCATION", "FROM", "station", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "location", "from", "station", "group", "by", "location", "having", "count", "(", "*", ")", "=", "value"], "question": "Show all locations with only 1 station.", "question_toks": ["Show", "all", "locations", "with", "only", "1", "station", "."], "dataset_name": "spider", "guid": 378}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | For each  airport name, how many routes start at that airport, ordered from most to least?", "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC", "example": {"db_id": "flight_4", "query": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.src_apid", "GROUP", "BY", "T1.name", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "src_apid", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc"], "question": "For each  airport name, how many routes start at that airport, ordered from most to least?", "question_toks": ["For", "each", "airport", "name", ",", "how", "many", "routes", "start", "at", "that", "airport", ",", "ordered", "from", "most", "to", "least", "?"], "dataset_name": "spider", "guid": 379}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the id of the routes whose source and destination airports are in the United States?", "sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "example": {"db_id": "flight_4", "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "query_toks": ["SELECT", "rid", "FROM", "routes", "WHERE", "dst_apid", "IN", "(", "SELECT", "apid", "FROM", "airports", "WHERE", "country", "=", "'United", "States", "'", ")", "AND", "src_apid", "IN", "(", "SELECT", "apid", "FROM", "airports", "WHERE", "country", "=", "'United", "States", "'", ")"], "query_toks_no_value": ["select", "rid", "from", "routes", "where", "dst_apid", "in", "(", "select", "apid", "from", "airports", "where", "country", "=", "value", ")", "and", "src_apid", "in", "(", "select", "apid", "from", "airports", "where", "country", "=", "value", ")"], "question": "What is the id of the routes whose source and destination airports are in the United States?", "question_toks": ["What", "is", "the", "id", "of", "the", "routes", "whose", "source", "and", "destination", "airports", "are", "in", "the", "United", "States", "?"], "dataset_name": "spider", "guid": 380}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show the id and name of the aircraft with the maximum distance.", "sql": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1", "query_toks": ["SELECT", "aid", ",", "name", "FROM", "Aircraft", "ORDER", "BY", "distance", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "aid", ",", "name", "from", "aircraft", "order", "by", "distance", "desc", "limit", "value"], "question": "Show the id and name of the aircraft with the maximum distance.", "question_toks": ["Show", "the", "id", "and", "name", "of", "the", "aircraft", "with", "the", "maximum", "distance", "."], "dataset_name": "spider", "guid": 381}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | What are the names of the airports which are not in the country 'Iceland'?", "sql": "SELECT name FROM airport WHERE country != 'Iceland'", "example": {"db_id": "flight_company", "query": "SELECT name FROM airport WHERE country != 'Iceland'", "query_toks": ["SELECT", "name", "FROM", "airport", "WHERE", "country", "!", "=", "'Iceland", "'"], "query_toks_no_value": ["select", "name", "from", "airport", "where", "country", "!", "=", "value"], "question": "What are the names of the airports which are not in the country 'Iceland'?", "question_toks": ["What", "are", "the", "names", "of", "the", "airports", "which", "are", "not", "in", "the", "country", "'Iceland", "'", "?"], "dataset_name": "spider", "guid": 382}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | For each country, what is the average elevation of that country's airports?", "sql": "SELECT avg(elevation) ,  country FROM airports GROUP BY country", "example": {"db_id": "flight_4", "query": "SELECT avg(elevation) ,  country FROM airports GROUP BY country", "query_toks": ["SELECT", "avg", "(", "elevation", ")", ",", "country", "FROM", "airports", "GROUP", "BY", "country"], "query_toks_no_value": ["select", "avg", "(", "elevation", ")", ",", "country", "from", "airports", "group", "by", "country"], "question": "For each country, what is the average elevation of that country's airports?", "question_toks": ["For", "each", "country", ",", "what", "is", "the", "average", "elevation", "of", "that", "country", "'s", "airports", "?"], "dataset_name": "spider", "guid": 383}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What are flight numbers of flights arriving at Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "example": {"db_id": "flight_2", "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "query_toks": ["SELECT", "FlightNo", "FROM", "FLIGHTS", "WHERE", "DestAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "flightno", "from", "flights", "where", "destairport", "=", "value"], "question": "What are flight numbers of flights arriving at Airport \"APG\"?", "question_toks": ["What", "are", "flight", "numbers", "of", "flights", "arriving", "at", "Airport", "``", "APG", "''", "?"], "dataset_name": "spider", "guid": 384}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | Show the fleet series of the aircrafts flied by pilots younger than 34", "sql": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34", "example": {"db_id": "pilot_record", "query": "SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID WHERE T3.Age  <  34", "query_toks": ["SELECT", "T2.Fleet_Series", "FROM", "pilot_record", "AS", "T1", "JOIN", "aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "pilot", "AS", "T3", "ON", "T1.Pilot_ID", "=", "T3.Pilot_ID", "WHERE", "T3.Age", "<", "34"], "query_toks_no_value": ["select", "t2", ".", "fleet_series", "from", "pilot_record", "as", "t1", "join", "aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "pilot", "as", "t3", "on", "t1", ".", "pilot_id", "=", "t3", ".", "pilot_id", "where", "t3", ".", "age", "<", "value"], "question": "Show the fleet series of the aircrafts flied by pilots younger than 34", "question_toks": ["Show", "the", "fleet", "series", "of", "the", "aircrafts", "flied", "by", "pilots", "younger", "than", "34"], "dataset_name": "spider", "guid": 385}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What are the cities with exactly two airports?", "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2", "example": {"db_id": "flight_4", "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2", "query_toks": ["SELECT", "city", "FROM", "airports", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", "=", "2"], "query_toks_no_value": ["select", "city", "from", "airports", "group", "by", "city", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the cities with exactly two airports?", "question_toks": ["What", "are", "the", "cities", "with", "exactly", "two", "airports", "?"], "dataset_name": "spider", "guid": 386}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Find the name of captains whose rank are either Midshipman or Lieutenant.", "sql": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'", "example": {"db_id": "ship_1", "query": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'", "query_toks": ["SELECT", "name", "FROM", "captain", "WHERE", "rank", "=", "'Midshipman", "'", "OR", "rank", "=", "'Lieutenant", "'"], "query_toks_no_value": ["select", "name", "from", "captain", "where", "rank", "=", "value", "or", "rank", "=", "value"], "question": "Find the name of captains whose rank are either Midshipman or Lieutenant.", "question_toks": ["Find", "the", "name", "of", "captains", "whose", "rank", "are", "either", "Midshipman", "or", "Lieutenant", "."], "dataset_name": "spider", "guid": 387}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | How many flights have a velocity larger than 200?", "sql": "SELECT count(*) FROM flight WHERE velocity  >  200", "example": {"db_id": "flight_company", "query": "SELECT count(*) FROM flight WHERE velocity  >  200", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "flight", "WHERE", "velocity", ">", "200"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flight", "where", "velocity", ">", "value"], "question": "How many flights have a velocity larger than 200?", "question_toks": ["How", "many", "flights", "have", "a", "velocity", "larger", "than", "200", "?"], "dataset_name": "spider", "guid": 388}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Count the number of flights into ATO.", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "WHERE", "DestAirport", "=", "``", "ATO", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "where", "destairport", "=", "value"], "question": "Count the number of flights into ATO.", "question_toks": ["Count", "the", "number", "of", "flights", "into", "ATO", "."], "dataset_name": "spider", "guid": 389}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | How many routes go from the United States to Canada?", "sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "routes", "WHERE", "dst_apid", "IN", "(", "SELECT", "apid", "FROM", "airports", "WHERE", "country", "=", "'Canada", "'", ")", "AND", "src_apid", "IN", "(", "SELECT", "apid", "FROM", "airports", "WHERE", "country", "=", "'United", "States", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "routes", "where", "dst_apid", "in", "(", "select", "apid", "from", "airports", "where", "country", "=", "value", ")", "and", "src_apid", "in", "(", "select", "apid", "from", "airports", "where", "country", "=", "value", ")"], "question": "How many routes go from the United States to Canada?", "question_toks": ["How", "many", "routes", "go", "from", "the", "United", "States", "to", "Canada", "?"], "dataset_name": "spider", "guid": 390}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | List all ship names in the order of built year and class.", "sql": "SELECT name FROM ship ORDER BY built_year ,  CLASS", "example": {"db_id": "ship_1", "query": "SELECT name FROM ship ORDER BY built_year ,  CLASS", "query_toks": ["SELECT", "name", "FROM", "ship", "ORDER", "BY", "built_year", ",", "CLASS"], "query_toks_no_value": ["select", "name", "from", "ship", "order", "by", "built_year", ",", "class"], "question": "List all ship names in the order of built year and class.", "question_toks": ["List", "all", "ship", "names", "in", "the", "order", "of", "built", "year", "and", "class", "."], "dataset_name": "spider", "guid": 391}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show the name of employees with three lowest salaries.", "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "example": {"db_id": "flight_1", "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "query_toks": ["SELECT", "name", "FROM", "Employee", "ORDER", "BY", "salary", "ASC", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "employee", "order", "by", "salary", "asc", "limit", "value"], "question": "Show the name of employees with three lowest salaries.", "question_toks": ["Show", "the", "name", "of", "employees", "with", "three", "lowest", "salaries", "."], "dataset_name": "spider", "guid": 392}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What is all the information on the airport with the largest number of international passengers?", "sql": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1", "example": {"db_id": "aircraft", "query": "SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1", "query_toks": ["SELECT", "*", "FROM", "airport", "ORDER", "BY", "International_Passengers", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "*", "from", "airport", "order", "by", "international_passengers", "desc", "limit", "value"], "question": "What is all the information on the airport with the largest number of international passengers?", "question_toks": ["What", "is", "all", "the", "information", "on", "the", "airport", "with", "the", "largest", "number", "of", "international", "passengers", "?"], "dataset_name": "spider", "guid": 393}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | Show the most common builder of railways.", "sql": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "railway", "query": "SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Builder", "FROM", "railway", "GROUP", "BY", "Builder", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "builder", "from", "railway", "group", "by", "builder", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common builder of railways.", "question_toks": ["Show", "the", "most", "common", "builder", "of", "railways", "."], "dataset_name": "spider", "guid": 394}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the average elevation of all airports for each country.", "sql": "SELECT avg(elevation) ,  country FROM airports GROUP BY country", "example": {"db_id": "flight_4", "query": "SELECT avg(elevation) ,  country FROM airports GROUP BY country", "query_toks": ["SELECT", "avg", "(", "elevation", ")", ",", "country", "FROM", "airports", "GROUP", "BY", "country"], "query_toks_no_value": ["select", "avg", "(", "elevation", ")", ",", "country", "from", "airports", "group", "by", "country"], "question": "Find the average elevation of all airports for each country.", "question_toks": ["Find", "the", "average", "elevation", "of", "all", "airports", "for", "each", "country", "."], "dataset_name": "spider", "guid": 395}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show name and distance for all aircrafts.", "sql": "SELECT name ,  distance FROM Aircraft", "example": {"db_id": "flight_1", "query": "SELECT name ,  distance FROM Aircraft", "query_toks": ["SELECT", "name", ",", "distance", "FROM", "Aircraft"], "query_toks_no_value": ["select", "name", ",", "distance", "from", "aircraft"], "question": "Show name and distance for all aircrafts.", "question_toks": ["Show", "name", "and", "distance", "for", "all", "aircrafts", "."], "dataset_name": "spider", "guid": 396}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Which country is the airport that has the highest altitude located in?", "sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1", "query_toks": ["SELECT", "country", "FROM", "airports", "ORDER", "BY", "elevation", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "airports", "order", "by", "elevation", "desc", "limit", "value"], "question": "Which country is the airport that has the highest altitude located in?", "question_toks": ["Which", "country", "is", "the", "airport", "that", "has", "the", "highest", "altitude", "located", "in", "?"], "dataset_name": "spider", "guid": 397}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which city is the most frequent source airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_2", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.City", "FROM", "AIRPORTS", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.AirportCode", "=", "T2.SourceAirport", "GROUP", "BY", "T1.City", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "airportcode", "=", "t2", ".", "sourceairport", "group", "by", "t1", ".", "city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which city is the most frequent source airport?", "question_toks": ["Which", "city", "is", "the", "most", "frequent", "source", "airport", "?"], "dataset_name": "spider", "guid": 398}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | Show the countries that have managers of age above 50 or below 46.", "sql": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46", "example": {"db_id": "railway", "query": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46", "query_toks": ["SELECT", "Country", "FROM", "manager", "WHERE", "Age", ">", "50", "OR", "Age", "<", "46"], "query_toks_no_value": ["select", "country", "from", "manager", "where", "age", ">", "value", "or", "age", "<", "value"], "question": "Show the countries that have managers of age above 50 or below 46.", "question_toks": ["Show", "the", "countries", "that", "have", "managers", "of", "age", "above", "50", "or", "below", "46", "."], "dataset_name": "spider", "guid": 399}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many flights arriving in Aberdeen city?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "How many flights arriving in Aberdeen city?", "question_toks": ["How", "many", "flights", "arriving", "in", "Aberdeen", "city", "?"], "dataset_name": "spider", "guid": 400}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | List the cities which have more than 2 airports sorted by the number of airports.", "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)", "example": {"db_id": "flight_4", "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)", "query_toks": ["SELECT", "city", "FROM", "airports", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", ">", "2", "ORDER", "BY", "count", "(", "*", ")"], "query_toks_no_value": ["select", "city", "from", "airports", "group", "by", "city", "having", "count", "(", "*", ")", ">", "value", "order", "by", "count", "(", "*", ")"], "question": "List the cities which have more than 2 airports sorted by the number of airports.", "question_toks": ["List", "the", "cities", "which", "have", "more", "than", "2", "airports", "sorted", "by", "the", "number", "of", "airports", "."], "dataset_name": "spider", "guid": 401}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | How many pilots are there?", "sql": "SELECT count(*) FROM pilot", "example": {"db_id": "pilot_record", "query": "SELECT count(*) FROM pilot", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "pilot"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "pilot"], "question": "How many pilots are there?", "question_toks": ["How", "many", "pilots", "are", "there", "?"], "dataset_name": "spider", "guid": 402}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the average distance and price for all flights from LA?", "sql": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"", "example": {"db_id": "flight_1", "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"", "query_toks": ["SELECT", "avg", "(", "distance", ")", ",", "avg", "(", "price", ")", "FROM", "Flight", "WHERE", "origin", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "avg", "(", "distance", ")", ",", "avg", "(", "price", ")", "from", "flight", "where", "origin", "=", "value"], "question": "What is the average distance and price for all flights from LA?", "question_toks": ["What", "is", "the", "average", "distance", "and", "price", "for", "all", "flights", "from", "LA", "?"], "dataset_name": "spider", "guid": 403}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Find the captain rank that has some captains in both Cutter and Armed schooner classes.", "sql": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'", "example": {"db_id": "ship_1", "query": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'", "query_toks": ["SELECT", "rank", "FROM", "captain", "WHERE", "CLASS", "=", "'Cutter", "'", "INTERSECT", "SELECT", "rank", "FROM", "captain", "WHERE", "CLASS", "=", "'Armed", "schooner", "'"], "query_toks_no_value": ["select", "rank", "from", "captain", "where", "class", "=", "value", "intersect", "select", "rank", "from", "captain", "where", "class", "=", "value"], "question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.", "question_toks": ["Find", "the", "captain", "rank", "that", "has", "some", "captains", "in", "both", "Cutter", "and", "Armed", "schooner", "classes", "."], "dataset_name": "spider", "guid": 404}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | Show different locations of railways along with the corresponding number of railways at each location.", "sql": "SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION", "example": {"db_id": "railway", "query": "SELECT LOCATION ,  COUNT(*) FROM railway GROUP BY LOCATION", "query_toks": ["SELECT", "LOCATION", ",", "COUNT", "(", "*", ")", "FROM", "railway", "GROUP", "BY", "LOCATION"], "query_toks_no_value": ["select", "location", ",", "count", "(", "*", ")", "from", "railway", "group", "by", "location"], "question": "Show different locations of railways along with the corresponding number of railways at each location.", "question_toks": ["Show", "different", "locations", "of", "railways", "along", "with", "the", "corresponding", "number", "of", "railways", "at", "each", "location", "."], "dataset_name": "spider", "guid": 405}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show ids for all employees who don't have a certificate.", "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "example": {"db_id": "flight_1", "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "query_toks": ["SELECT", "eid", "FROM", "Employee", "EXCEPT", "SELECT", "eid", "FROM", "Certificate"], "query_toks_no_value": ["select", "eid", "from", "employee", "except", "select", "eid", "from", "certificate"], "question": "Show ids for all employees who don't have a certificate.", "question_toks": ["Show", "ids", "for", "all", "employees", "who", "do", "n't", "have", "a", "certificate", "."], "dataset_name": "spider", "guid": 406}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show ids for all aircrafts with more than 1000 distance.", "sql": "SELECT aid FROM Aircraft WHERE distance  >  1000", "example": {"db_id": "flight_1", "query": "SELECT aid FROM Aircraft WHERE distance  >  1000", "query_toks": ["SELECT", "aid", "FROM", "Aircraft", "WHERE", "distance", ">", "1000"], "query_toks_no_value": ["select", "aid", "from", "aircraft", "where", "distance", ">", "value"], "question": "Show ids for all aircrafts with more than 1000 distance.", "question_toks": ["Show", "ids", "for", "all", "aircrafts", "with", "more", "than", "1000", "distance", "."], "dataset_name": "spider", "guid": 407}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | What is the velocity of the pilot named 'Thompson'?", "sql": "SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'", "example": {"db_id": "flight_company", "query": "SELECT avg(velocity) FROM flight WHERE pilot  =  'Thompson'", "query_toks": ["SELECT", "avg", "(", "velocity", ")", "FROM", "flight", "WHERE", "pilot", "=", "'Thompson", "'"], "query_toks_no_value": ["select", "avg", "(", "velocity", ")", "from", "flight", "where", "pilot", "=", "value"], "question": "What is the velocity of the pilot named 'Thompson'?", "question_toks": ["What", "is", "the", "velocity", "of", "the", "pilot", "named", "'Thompson", "'", "?"], "dataset_name": "spider", "guid": 408}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show the station name and number of trains in each station.", "sql": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id", "example": {"db_id": "train_station", "query": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "train_station", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.station_id", "=", "T2.station_id", "GROUP", "BY", "T1.station_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "train_station", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "station_id", "=", "t2", ".", "station_id", "group", "by", "t1", ".", "station_id"], "question": "Show the station name and number of trains in each station.", "question_toks": ["Show", "the", "station", "name", "and", "number", "of", "trains", "in", "each", "station", "."], "dataset_name": "spider", "guid": 409}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which airlines have less than 200 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "HAVING", "count", "(", "*", ")", "<", "200"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "having", "count", "(", "*", ")", "<", "value"], "question": "Which airlines have less than 200 flights?", "question_toks": ["Which", "airlines", "have", "less", "than", "200", "flights", "?"], "dataset_name": "spider", "guid": 410}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | List the name of ships in ascending order of tonnage.", "sql": "SELECT Name FROM ship ORDER BY Tonnage ASC", "example": {"db_id": "ship_mission", "query": "SELECT Name FROM ship ORDER BY Tonnage ASC", "query_toks": ["SELECT", "Name", "FROM", "ship", "ORDER", "BY", "Tonnage", "ASC"], "query_toks_no_value": ["select", "name", "from", "ship", "order", "by", "tonnage", "asc"], "question": "List the name of ships in ascending order of tonnage.", "question_toks": ["List", "the", "name", "of", "ships", "in", "ascending", "order", "of", "tonnage", "."], "dataset_name": "spider", "guid": 411}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | what is the salary and name of the employee who has the most number of aircraft certificates?", "sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T1.salary", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "GROUP", "BY", "T1.eid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "salary", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "group", "by", "t1", ".", "eid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "what is the salary and name of the employee who has the most number of aircraft certificates?", "question_toks": ["what", "is", "the", "salary", "and", "name", "of", "the", "employee", "who", "has", "the", "most", "number", "of", "aircraft", "certificates", "?"], "dataset_name": "spider", "guid": 412}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | Show names of ships involved in a mission launched after 1928.", "sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928", "example": {"db_id": "ship_mission", "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928", "query_toks": ["SELECT", "T2.Name", "FROM", "mission", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.Ship_ID", "=", "T2.Ship_ID", "WHERE", "T1.Launched_Year", ">", "1928"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "mission", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id", "where", "t1", ".", "launched_year", ">", "value"], "question": "Show names of ships involved in a mission launched after 1928.", "question_toks": ["Show", "names", "of", "ships", "involved", "in", "a", "mission", "launched", "after", "1928", "."], "dataset_name": "spider", "guid": 413}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the name of airports whose altitude is between -50 and 50.", "sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "example": {"db_id": "flight_4", "query": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "query_toks": ["SELECT", "name", "FROM", "airports", "WHERE", "elevation", "BETWEEN", "-50", "AND", "50"], "query_toks_no_value": ["select", "name", "from", "airports", "where", "elevation", "between", "value", "and", "value"], "question": "Find the name of airports whose altitude is between -50 and 50.", "question_toks": ["Find", "the", "name", "of", "airports", "whose", "altitude", "is", "between", "-50", "and", "50", "."], "dataset_name": "spider", "guid": 414}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | List the vehicle flight number, date and pilot of all the flights, ordered by altitude.", "sql": "SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC", "example": {"db_id": "flight_company", "query": "SELECT vehicle_flight_number ,  date ,  pilot FROM flight ORDER BY altitude ASC", "query_toks": ["SELECT", "vehicle_flight_number", ",", "date", ",", "pilot", "FROM", "flight", "ORDER", "BY", "altitude", "ASC"], "query_toks_no_value": ["select", "vehicle_flight_number", ",", "date", ",", "pilot", "from", "flight", "order", "by", "altitude", "asc"], "question": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude.", "question_toks": ["List", "the", "vehicle", "flight", "number", ",", "date", "and", "pilot", "of", "all", "the", "flights", ",", "ordered", "by", "altitude", "."], "dataset_name": "spider", "guid": 415}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many United Airlines flights go to City 'Aberdeen'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "JOIN", "AIRLINES", "AS", "T3", "ON", "T3.uid", "=", "T1.Airline", "WHERE", "T2.City", "=", "``", "Aberdeen", "''", "AND", "T3.Airline", "=", "``", "United", "Airlines", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "join", "airlines", "as", "t3", "on", "t3", ".", "uid", "=", "t1", ".", "airline", "where", "t2", ".", "city", "=", "value", "and", "t3", ".", "airline", "=", "value"], "question": "How many United Airlines flights go to City 'Aberdeen'?", "question_toks": ["How", "many", "United", "Airlines", "flights", "go", "to", "City", "'Aberdeen", "'", "?"], "dataset_name": "spider", "guid": 416}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Find the number of flights landing in the city of Aberdeen or Abilene.", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Flights", "AS", "T1", "JOIN", "Airports", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "WHERE", "T2.city", "=", "``", "Aberdeen", "''", "OR", "T2.city", "=", "``", "Abilene", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value", "or", "t2", ".", "city", "=", "value"], "question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "question_toks": ["Find", "the", "number", "of", "flights", "landing", "in", "the", "city", "of", "Aberdeen", "or", "Abilene", "."], "dataset_name": "spider", "guid": 417}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | For each airport name, how many routes start at that airport?", "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name", "example": {"db_id": "flight_4", "query": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.src_apid", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "src_apid", "group", "by", "t1", ".", "name"], "question": "For each airport name, how many routes start at that airport?", "question_toks": ["For", "each", "airport", "name", ",", "how", "many", "routes", "start", "at", "that", "airport", "?"], "dataset_name": "spider", "guid": 418}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | For each country and airline name, how many routes are there?", "sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name", "example": {"db_id": "flight_4", "query": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name", "query_toks": ["SELECT", "T1.country", ",", "T1.name", ",", "count", "(", "*", ")", "FROM", "airlines", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.alid", "=", "T2.alid", "GROUP", "BY", "T1.country", ",", "T1.name"], "query_toks_no_value": ["select", "t1", ".", "country", ",", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "alid", "=", "t2", ".", "alid", "group", "by", "t1", ".", "country", ",", "t1", ".", "name"], "question": "For each country and airline name, how many routes are there?", "question_toks": ["For", "each", "country", "and", "airline", "name", ",", "how", "many", "routes", "are", "there", "?"], "dataset_name": "spider", "guid": 419}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?", "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Guruvayur Express\"", "example": {"db_id": "train_station", "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Ananthapuri Express\" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T3.Name  =  \"Guruvayur Express\"", "query_toks": ["SELECT", "T2.name", "FROM", "train_station", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.station_id", "=", "T2.station_id", "JOIN", "train", "AS", "T3", "ON", "T3.train_id", "=", "T1.train_id", "WHERE", "T3.Name", "=", "``", "Ananthapuri", "Express", "''", "INTERSECT", "SELECT", "T2.name", "FROM", "train_station", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.station_id", "=", "T2.station_id", "JOIN", "train", "AS", "T3", "ON", "T3.train_id", "=", "T1.train_id", "WHERE", "T3.Name", "=", "``", "Guruvayur", "Express", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "train_station", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "station_id", "=", "t2", ".", "station_id", "join", "train", "as", "t3", "on", "t3", ".", "train_id", "=", "t1", ".", "train_id", "where", "t3", ".", "name", "=", "value", "intersect", "select", "t2", ".", "name", "from", "train_station", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "station_id", "=", "t2", ".", "station_id", "join", "train", "as", "t3", "on", "t3", ".", "train_id", "=", "t1", ".", "train_id", "where", "t3", ".", "name", "=", "value"], "question": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?", "question_toks": ["What", "are", "the", "names", "of", "the", "stations", "which", "serve", "both", "``", "Ananthapuri", "Express", "''", "and", "``", "Guruvayur", "Express", "''", "trains", "?"], "dataset_name": "spider", "guid": 420}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What are the average and minimum age of captains in different class?", "sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS", "example": {"db_id": "ship_1", "query": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "CLASS", "FROM", "captain", "GROUP", "BY", "CLASS"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "class", "from", "captain", "group", "by", "class"], "question": "What are the average and minimum age of captains in different class?", "question_toks": ["What", "are", "the", "average", "and", "minimum", "age", "of", "captains", "in", "different", "class", "?"], "dataset_name": "spider", "guid": 421}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show the location with most number of train stations.", "sql": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "train_station", "query": "SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "station", "GROUP", "BY", "LOCATION", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "station", "group", "by", "location", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the location with most number of train stations.", "question_toks": ["Show", "the", "location", "with", "most", "number", "of", "train", "stations", "."], "dataset_name": "spider", "guid": 422}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What are the names of the ships that are not from the United States?", "sql": "SELECT Name FROM ship WHERE Nationality != \"United States\"", "example": {"db_id": "ship_mission", "query": "SELECT Name FROM ship WHERE Nationality != \"United States\"", "query_toks": ["SELECT", "Name", "FROM", "ship", "WHERE", "Nationality", "!", "=", "``", "United", "States", "''"], "query_toks_no_value": ["select", "name", "from", "ship", "where", "nationality", "!", "=", "value"], "question": "What are the names of the ships that are not from the United States?", "question_toks": ["What", "are", "the", "names", "of", "the", "ships", "that", "are", "not", "from", "the", "United", "States", "?"], "dataset_name": "spider", "guid": 423}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which city has the most frequent destination airport?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_2", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.City", "FROM", "AIRPORTS", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.AirportCode", "=", "T2.DestAirport", "GROUP", "BY", "T1.City", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "airportcode", "=", "t2", ".", "destairport", "group", "by", "t1", ".", "city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which city has the most frequent destination airport?", "question_toks": ["Which", "city", "has", "the", "most", "frequent", "destination", "airport", "?"], "dataset_name": "spider", "guid": 424}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "CVO", "''", "EXCEPT", "SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value", "except", "select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "question_toks": ["Find", "all", "airlines", "that", "have", "flights", "from", "airport", "'CVO", "'", "but", "not", "from", "'APG", "'", "."], "dataset_name": "spider", "guid": 425}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Find the abbreviation and country of the airline that has fewest number of flights?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "example": {"db_id": "flight_2", "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.Abbreviation", ",", "T1.Country", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "abbreviation", ",", "t1", ".", "country", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Find the abbreviation and country of the airline that has fewest number of flights?", "question_toks": ["Find", "the", "abbreviation", "and", "country", "of", "the", "airline", "that", "has", "fewest", "number", "of", "flights", "?"], "dataset_name": "spider", "guid": 426}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What are the names of captains that have either the rank Midshipman or Lieutenant?", "sql": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'", "example": {"db_id": "ship_1", "query": "SELECT name FROM captain WHERE rank  =  'Midshipman' OR rank  =  'Lieutenant'", "query_toks": ["SELECT", "name", "FROM", "captain", "WHERE", "rank", "=", "'Midshipman", "'", "OR", "rank", "=", "'Lieutenant", "'"], "query_toks_no_value": ["select", "name", "from", "captain", "where", "rank", "=", "value", "or", "rank", "=", "value"], "question": "What are the names of captains that have either the rank Midshipman or Lieutenant?", "question_toks": ["What", "are", "the", "names", "of", "captains", "that", "have", "either", "the", "rank", "Midshipman", "or", "Lieutenant", "?"], "dataset_name": "spider", "guid": 427}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the number of airports per country, ordered from most to least?", "sql": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC", "example": {"db_id": "flight_4", "query": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "country", "FROM", "airports", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "country", "from", "airports", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc"], "question": "What is the number of airports per country, ordered from most to least?", "question_toks": ["What", "is", "the", "number", "of", "airports", "per", "country", ",", "ordered", "from", "most", "to", "least", "?"], "dataset_name": "spider", "guid": 428}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Group by ships by flag, and return number of ships that have each flag.", "sql": "SELECT count(*) ,  flag FROM ship GROUP BY flag", "example": {"db_id": "ship_1", "query": "SELECT count(*) ,  flag FROM ship GROUP BY flag", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "flag", "FROM", "ship", "GROUP", "BY", "flag"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "flag", "from", "ship", "group", "by", "flag"], "question": "Group by ships by flag, and return number of ships that have each flag.", "question_toks": ["Group", "by", "ships", "by", "flag", ",", "and", "return", "number", "of", "ships", "that", "have", "each", "flag", "."], "dataset_name": "spider", "guid": 429}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the names for all aircrafts with at least 2 flights?", "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2", "example": {"db_id": "flight_1", "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2", "query_toks": ["SELECT", "T2.name", "FROM", "Flight", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T1.aid", "=", "T2.aid", "GROUP", "BY", "T1.aid", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "flight", "as", "t1", "join", "aircraft", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "aid", "group", "by", "t1", ".", "aid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names for all aircrafts with at least 2 flights?", "question_toks": ["What", "are", "the", "names", "for", "all", "aircrafts", "with", "at", "least", "2", "flights", "?"], "dataset_name": "spider", "guid": 430}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the names of all aircrafts that can cover more distances than average?", "sql": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)", "example": {"db_id": "flight_1", "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)", "query_toks": ["SELECT", "name", "FROM", "Aircraft", "WHERE", "distance", ">", "(", "SELECT", "avg", "(", "distance", ")", "FROM", "Aircraft", ")"], "query_toks_no_value": ["select", "name", "from", "aircraft", "where", "distance", ">", "(", "select", "avg", "(", "distance", ")", "from", "aircraft", ")"], "question": "What are the names of all aircrafts that can cover more distances than average?", "question_toks": ["What", "are", "the", "names", "of", "all", "aircrafts", "that", "can", "cover", "more", "distances", "than", "average", "?"], "dataset_name": "spider", "guid": 431}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Find all airlines that have at least 10 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "HAVING", "count", "(", "*", ")", ">", "10"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "having", "count", "(", "*", ")", ">", "value"], "question": "Find all airlines that have at least 10 flights.", "question_toks": ["Find", "all", "airlines", "that", "have", "at", "least", "10", "flights", "."], "dataset_name": "spider", "guid": 432}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | How many train stations are there?", "sql": "SELECT count(*) FROM station", "example": {"db_id": "train_station", "query": "SELECT count(*) FROM station", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "station"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "station"], "question": "How many train stations are there?", "question_toks": ["How", "many", "train", "stations", "are", "there", "?"], "dataset_name": "spider", "guid": 433}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many flights do we have?", "sql": "SELECT count(*) FROM FLIGHTS", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights"], "question": "How many flights do we have?", "question_toks": ["How", "many", "flights", "do", "we", "have", "?"], "dataset_name": "spider", "guid": 434}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show aircraft names and number of flights for each aircraft.", "sql": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid", "example": {"db_id": "flight_1", "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "Flight", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T1.aid", "=", "T2.aid", "GROUP", "BY", "T1.aid"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "flight", "as", "t1", "join", "aircraft", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "aid", "group", "by", "t1", ".", "aid"], "question": "Show aircraft names and number of flights for each aircraft.", "question_toks": ["Show", "aircraft", "names", "and", "number", "of", "flights", "for", "each", "aircraft", "."], "dataset_name": "spider", "guid": 435}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | How many companies operates airlines in each airport?", "sql": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id", "example": {"db_id": "flight_company", "query": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id", "query_toks": ["SELECT", "T3.id", ",", "count", "(", "*", ")", "FROM", "operate_company", "AS", "T1", "JOIN", "flight", "AS", "t2", "ON", "T1.id", "=", "T2.company_id", "JOIN", "airport", "AS", "T3", "ON", "T2.airport_id", "=", "T3.id", "GROUP", "BY", "T3.id"], "query_toks_no_value": ["select", "t3", ".", "id", ",", "count", "(", "*", ")", "from", "operate_company", "as", "t1", "join", "flight", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "company_id", "join", "airport", "as", "t3", "on", "t2", ".", "airport_id", "=", "t3", ".", "id", "group", "by", "t3", ".", "id"], "question": "How many companies operates airlines in each airport?", "question_toks": ["How", "many", "companies", "operates", "airlines", "in", "each", "airport", "?"], "dataset_name": "spider", "guid": 436}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'", "example": {"db_id": "ship_1", "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'", "query_toks": ["SELECT", "t1.name", "FROM", "ship", "AS", "t1", "JOIN", "captain", "AS", "t2", "ON", "t1.ship_id", "=", "t2.ship_id", "WHERE", "t2.rank", "=", "'Midshipman", "'", "INTERSECT", "SELECT", "t1.name", "FROM", "ship", "AS", "t1", "JOIN", "captain", "AS", "t2", "ON", "t1.ship_id", "=", "t2.ship_id", "WHERE", "t2.rank", "=", "'Lieutenant", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "ship", "as", "t1", "join", "captain", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id", "where", "t2", ".", "rank", "=", "value", "intersect", "select", "t1", ".", "name", "from", "ship", "as", "t1", "join", "captain", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id", "where", "t2", ".", "rank", "=", "value"], "question": "What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?", "question_toks": ["What", "are", "the", "names", "of", "ships", "that", "are", "commanded", "by", "both", "captains", "with", "the", "rank", "of", "Midshipman", "and", "captains", "with", "the", "rank", "of", "Lieutenant", "?"], "dataset_name": "spider", "guid": 437}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the names of all employees who are not certified to fly Boeing 737-800s?", "sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "example": {"db_id": "flight_1", "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "query_toks": ["SELECT", "name", "FROM", "Employee", "EXCEPT", "SELECT", "T1.name", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "JOIN", "Aircraft", "AS", "T3", "ON", "T3.aid", "=", "T2.aid", "WHERE", "T3.name", "=", "``", "Boeing", "737-800", "''"], "query_toks_no_value": ["select", "name", "from", "employee", "except", "select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "join", "aircraft", "as", "t3", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t3", ".", "name", "=", "value"], "question": "What are the names of all employees who are not certified to fly Boeing 737-800s?", "question_toks": ["What", "are", "the", "names", "of", "all", "employees", "who", "are", "not", "certified", "to", "fly", "Boeing", "737-800s", "?"], "dataset_name": "spider", "guid": 438}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Find all airlines that have fewer than 200 flights.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "HAVING", "count", "(", "*", ")", "<", "200"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "having", "count", "(", "*", ")", "<", "value"], "question": "Find all airlines that have fewer than 200 flights.", "question_toks": ["Find", "all", "airlines", "that", "have", "fewer", "than", "200", "flights", "."], "dataset_name": "spider", "guid": 439}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What are the names, classes, and ranks of all captains?", "sql": "SELECT name ,  CLASS ,  rank FROM captain", "example": {"db_id": "ship_1", "query": "SELECT name ,  CLASS ,  rank FROM captain", "query_toks": ["SELECT", "name", ",", "CLASS", ",", "rank", "FROM", "captain"], "query_toks_no_value": ["select", "name", ",", "class", ",", "rank", "from", "captain"], "question": "What are the names, classes, and ranks of all captains?", "question_toks": ["What", "are", "the", "names", ",", "classes", ",", "and", "ranks", "of", "all", "captains", "?"], "dataset_name": "spider", "guid": 440}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the number of different different airports that are destinations for American Airlines?", "sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "example": {"db_id": "flight_4", "query": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dst_apid", ")", "FROM", "airlines", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.alid", "=", "T2.alid", "WHERE", "T1.name", "=", "'American", "Airlines", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "dst_apid", ")", "from", "airlines", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "alid", "=", "t2", ".", "alid", "where", "t1", ".", "name", "=", "value"], "question": "What is the number of different different airports that are destinations for American Airlines?", "question_toks": ["What", "is", "the", "number", "of", "different", "different", "airports", "that", "are", "destinations", "for", "American", "Airlines", "?"], "dataset_name": "spider", "guid": 441}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show the name, location, and number of platforms for all stations.", "sql": "SELECT name ,  LOCATION ,  number_of_platforms FROM station", "example": {"db_id": "train_station", "query": "SELECT name ,  LOCATION ,  number_of_platforms FROM station", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "number_of_platforms", "FROM", "station"], "query_toks_no_value": ["select", "name", ",", "location", ",", "number_of_platforms", "from", "station"], "question": "Show the name, location, and number of platforms for all stations.", "question_toks": ["Show", "the", "name", ",", "location", ",", "and", "number", "of", "platforms", "for", "all", "stations", "."], "dataset_name": "spider", "guid": 442}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show the names and main services for train stations that have the top three total number of passengers.", "sql": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3", "example": {"db_id": "train_station", "query": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3", "query_toks": ["SELECT", "name", ",", "main_services", "FROM", "station", "ORDER", "BY", "total_passengers", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "name", ",", "main_services", "from", "station", "order", "by", "total_passengers", "desc", "limit", "value"], "question": "Show the names and main services for train stations that have the top three total number of passengers.", "question_toks": ["Show", "the", "names", "and", "main", "services", "for", "train", "stations", "that", "have", "the", "top", "three", "total", "number", "of", "passengers", "."], "dataset_name": "spider", "guid": 443}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | How many aircrafts do we have?", "sql": "SELECT count(*) FROM Aircraft", "example": {"db_id": "flight_1", "query": "SELECT count(*) FROM Aircraft", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Aircraft"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "aircraft"], "question": "How many aircrafts do we have?", "question_toks": ["How", "many", "aircrafts", "do", "we", "have", "?"], "dataset_name": "spider", "guid": 444}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What are the names of all cities with more than one airport and how many airports do they have?", "sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1", "example": {"db_id": "flight_4", "query": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1", "query_toks": ["SELECT", "city", ",", "count", "(", "*", ")", "FROM", "airports", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "city", ",", "count", "(", "*", ")", "from", "airports", "group", "by", "city", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of all cities with more than one airport and how many airports do they have?", "question_toks": ["What", "are", "the", "names", "of", "all", "cities", "with", "more", "than", "one", "airport", "and", "how", "many", "airports", "do", "they", "have", "?"], "dataset_name": "spider", "guid": 445}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | How many aircrafts have distance between 1000 and 5000?", "sql": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "example": {"db_id": "flight_1", "query": "SELECT count(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Aircraft", "WHERE", "distance", "BETWEEN", "1000", "AND", "5000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "aircraft", "where", "distance", "between", "value", "and", "value"], "question": "How many aircrafts have distance between 1000 and 5000?", "question_toks": ["How", "many", "aircrafts", "have", "distance", "between", "1000", "and", "5000", "?"], "dataset_name": "spider", "guid": 446}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many airlines are from USA?", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "WHERE", "Country", "=", "``", "USA", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "value"], "question": "How many airlines are from USA?", "question_toks": ["How", "many", "airlines", "are", "from", "USA", "?"], "dataset_name": "spider", "guid": 447}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What country is Jetblue Airways affiliated with?", "sql": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "example": {"db_id": "flight_2", "query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "query_toks": ["SELECT", "Country", "FROM", "AIRLINES", "WHERE", "Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "country", "from", "airlines", "where", "airline", "=", "value"], "question": "What country is Jetblue Airways affiliated with?", "question_toks": ["What", "country", "is", "Jetblue", "Airways", "affiliated", "with", "?"], "dataset_name": "spider", "guid": 448}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | Show the most common nationality of pilots.", "sql": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "pilot_record", "query": "SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Nationality", "FROM", "pilot", "GROUP", "BY", "Nationality", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "nationality", "from", "pilot", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common nationality of pilots.", "question_toks": ["Show", "the", "most", "common", "nationality", "of", "pilots", "."], "dataset_name": "spider", "guid": 449}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | Show the name of ships whose nationality is either United States or United Kingdom.", "sql": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"", "example": {"db_id": "ship_mission", "query": "SELECT Name FROM ship WHERE Nationality  =  \"United States\" OR Nationality  =  \"United Kingdom\"", "query_toks": ["SELECT", "Name", "FROM", "ship", "WHERE", "Nationality", "=", "``", "United", "States", "''", "OR", "Nationality", "=", "``", "United", "Kingdom", "''"], "query_toks_no_value": ["select", "name", "from", "ship", "where", "nationality", "=", "value", "or", "nationality", "=", "value"], "question": "Show the name of ships whose nationality is either United States or United Kingdom.", "question_toks": ["Show", "the", "name", "of", "ships", "whose", "nationality", "is", "either", "United", "States", "or", "United", "Kingdom", "."], "dataset_name": "spider", "guid": 450}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | Show different types of ships and the average tonnage of ships of each type.", "sql": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE", "example": {"db_id": "ship_mission", "query": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE", "query_toks": ["SELECT", "TYPE", ",", "avg", "(", "Tonnage", ")", "FROM", "ship", "GROUP", "BY", "TYPE"], "query_toks_no_value": ["select", "type", ",", "avg", "(", "tonnage", ")", "from", "ship", "group", "by", "type"], "question": "Show different types of ships and the average tonnage of ships of each type.", "question_toks": ["Show", "different", "types", "of", "ships", "and", "the", "average", "tonnage", "of", "ships", "of", "each", "type", "."], "dataset_name": "spider", "guid": 451}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | Show different types of ships and the number of ships of each type.", "sql": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE", "example": {"db_id": "ship_mission", "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE", "query_toks": ["SELECT", "TYPE", ",", "COUNT", "(", "*", ")", "FROM", "ship", "GROUP", "BY", "TYPE"], "query_toks_no_value": ["select", "type", ",", "count", "(", "*", ")", "from", "ship", "group", "by", "type"], "question": "Show different types of ships and the number of ships of each type.", "question_toks": ["Show", "different", "types", "of", "ships", "and", "the", "number", "of", "ships", "of", "each", "type", "."], "dataset_name": "spider", "guid": 452}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show names for all aircrafts of which John Williams has certificates.", "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"", "example": {"db_id": "flight_1", "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"", "query_toks": ["SELECT", "T3.name", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "JOIN", "Aircraft", "AS", "T3", "ON", "T3.aid", "=", "T2.aid", "WHERE", "T1.name", "=", "``", "John", "Williams", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "join", "aircraft", "as", "t3", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "name", "=", "value"], "question": "Show names for all aircrafts of which John Williams has certificates.", "question_toks": ["Show", "names", "for", "all", "aircrafts", "of", "which", "John", "Williams", "has", "certificates", "."], "dataset_name": "spider", "guid": 453}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the name, city, country, and elevation for every airport in the city of New York?", "sql": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'", "example": {"db_id": "flight_4", "query": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'", "query_toks": ["SELECT", "name", ",", "city", ",", "country", ",", "elevation", "FROM", "airports", "WHERE", "city", "=", "'New", "York", "'"], "query_toks_no_value": ["select", "name", ",", "city", ",", "country", ",", "elevation", "from", "airports", "where", "city", "=", "value"], "question": "What is the name, city, country, and elevation for every airport in the city of New York?", "question_toks": ["What", "is", "the", "name", ",", "city", ",", "country", ",", "and", "elevation", "for", "every", "airport", "in", "the", "city", "of", "New", "York", "?"], "dataset_name": "spider", "guid": 454}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?", "sql": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"", "example": {"db_id": "aircraft", "query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"", "query_toks": ["SELECT", "avg", "(", "T3.Total_Passengers", ")", "FROM", "aircraft", "AS", "T1", "JOIN", "airport_aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "airport", "AS", "T3", "ON", "T2.Airport_ID", "=", "T3.Airport_ID", "WHERE", "T1.Aircraft", "=", "``", "Robinson", "R-22", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "total_passengers", ")", "from", "aircraft", "as", "t1", "join", "airport_aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "airport", "as", "t3", "on", "t2", ".", "airport_id", "=", "t3", ".", "airport_id", "where", "t1", ".", "aircraft", "=", "value"], "question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?", "question_toks": ["What", "is", "the", "average", "total", "number", "of", "passengers", "of", "airports", "that", "are", "associated", "with", "aircraft", "``", "Robinson", "R-22", "''", "?"], "dataset_name": "spider", "guid": 455}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which city and country is the Alton airport at?", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "example": {"db_id": "flight_2", "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "query_toks": ["SELECT", "City", ",", "Country", "FROM", "AIRPORTS", "WHERE", "AirportName", "=", "``", "Alton", "''"], "query_toks_no_value": ["select", "city", ",", "country", "from", "airports", "where", "airportname", "=", "value"], "question": "Which city and country is the Alton airport at?", "question_toks": ["Which", "city", "and", "country", "is", "the", "Alton", "airport", "at", "?"], "dataset_name": "spider", "guid": 456}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | How many airports' names have the word Interanation in them?", "sql": "SELECT count(*) FROM airports WHERE name LIKE '%International%'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM airports WHERE name LIKE '%International%'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airports", "WHERE", "name", "LIKE", "'", "%", "International", "%", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airports", "where", "name", "like", "value"], "question": "How many airports' names have the word Interanation in them?", "question_toks": ["How", "many", "airports", "'", "names", "have", "the", "word", "Interanation", "in", "them", "?"], "dataset_name": "spider", "guid": 457}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Give the airline with abbreviation 'UAL'.", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "example": {"db_id": "flight_2", "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "query_toks": ["SELECT", "Airline", "FROM", "AIRLINES", "WHERE", "Abbreviation", "=", "``", "UAL", "''"], "query_toks_no_value": ["select", "airline", "from", "airlines", "where", "abbreviation", "=", "value"], "question": "Give the airline with abbreviation 'UAL'.", "question_toks": ["Give", "the", "airline", "with", "abbreviation", "'UAL", "'", "."], "dataset_name": "spider", "guid": 458}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | List all pilot names in ascending alphabetical order.", "sql": "SELECT Name FROM pilot ORDER BY Name ASC", "example": {"db_id": "aircraft", "query": "SELECT Name FROM pilot ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "pilot", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "pilot", "order", "by", "name", "asc"], "question": "List all pilot names in ascending alphabetical order.", "question_toks": ["List", "all", "pilot", "names", "in", "ascending", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 459}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Which tourist attractions are related to royal family? Tell me their details and how we can get there.", "sql": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID", "query_toks": ["SELECT", "T1.Royal_Family_Details", ",", "T2.How_to_Get_There", "FROM", "ROYAL_FAMILY", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Royal_Family_ID", "=", "T2.Tourist_Attraction_ID"], "query_toks_no_value": ["select", "t1", ".", "royal_family_details", ",", "t2", ".", "how_to_get_there", "from", "royal_family", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "royal_family_id", "=", "t2", ".", "tourist_attraction_id"], "question": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.", "question_toks": ["Which", "tourist", "attractions", "are", "related", "to", "royal", "family", "?", "Tell", "me", "their", "details", "and", "how", "we", "can", "get", "there", "."], "dataset_name": "spider", "guid": 2695}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What is the name of the staff that is in charge of the attraction named \"US museum\"?", "sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\"", "query_toks": ["SELECT", "T1.Name", "FROM", "STAFF", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "WHERE", "T2.Name", "=", "``", "US", "museum", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "staff", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "where", "t2", ".", "name", "=", "value"], "question": "What is the name of the staff that is in charge of the attraction named \"US museum\"?", "question_toks": ["What", "is", "the", "name", "of", "the", "staff", "that", "is", "in", "charge", "of", "the", "attraction", "named", "``", "US", "museum", "''", "?"], "dataset_name": "spider", "guid": 2696}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where are some good places for arabic in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where are some good places for arabic in mountain view ?", "question_toks": ["where", "are", "some", "good", "places", "for", "arabic", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2697}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?", "sql": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t1.name  =  \"Texas de Brazil\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t1.name  =  \"Texas de Brazil\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t4", "ON", "t4.user_id", "=", "t3.user_id", "WHERE", "t1.city", "=", "``", "Dallas", "''", "AND", "t1.name", "=", "``", "Texas", "de", "Brazil", "''", "AND", "t1.state", "=", "``", "Texas", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t4", "on", "t4", ".", "user_id", "=", "t3", ".", "user_id", "where", "t1", ".", "city", "=", "value", "and", "t1", ".", "name", "=", "value", "and", "t1", ".", "state", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?", "question_toks": ["How", "many", "people", "reviewed", "the", "restaurant", "``", "Texas", "de", "Brazil", "``", "in", "Dallas", "Texas", "?"], "dataset_name": "spider", "guid": 2698}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Which restaurant in Dallas were reviewed by user Patrick ?", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t4", "ON", "t4.user_id", "=", "t3.user_id", "WHERE", "t1.city", "=", "``", "Dallas", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", "AND", "t4.name", "=", "``", "Patrick", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t4", "on", "t4", ".", "user_id", "=", "t3", ".", "user_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t4", ".", "name", "=", "value"], "question": "Which restaurant in Dallas were reviewed by user Patrick ?", "question_toks": ["Which", "restaurant", "in", "Dallas", "were", "reviewed", "by", "user", "Patrick", "?"], "dataset_name": "spider", "guid": 2699}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can i eat some good french food in the yosemite and mono lake area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "yosemite", "and", "mono", "lake", "area", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where can i eat some good french food in the yosemite and mono lake area ?", "question_toks": ["where", "can", "i", "eat", "some", "good", "french", "food", "in", "the", "yosemite", "and", "mono", "lake", "area", "?"], "dataset_name": "spider", "guid": 2700}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all users who have written tips about businesses in Dallas", "sql": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Dallas\";", "example": {"db_id": "yelp", "query": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Dallas\";", "query_toks": ["SELECT", "t3.name", "FROM", "tip", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t3", "ON", "t3.user_id", "=", "t2.user_id", "WHERE", "t1.city", "=", "``", "Dallas", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "tip", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t3", "on", "t3", ".", "user_id", "=", "t2", ".", "user_id", "where", "t1", ".", "city", "=", "value"], "question": "Find all users who have written tips about businesses in Dallas", "question_toks": ["Find", "all", "users", "who", "have", "written", "tips", "about", "businesses", "in", "Dallas"], "dataset_name": "spider", "guid": 2701}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Tell me the price ranges for all the hotels.", "sql": "SELECT price_range FROM HOTELS", "example": {"db_id": "cre_Theme_park", "query": "SELECT price_range FROM HOTELS", "query_toks": ["SELECT", "price_range", "FROM", "HOTELS"], "query_toks_no_value": ["select", "price_range", "from", "hotels"], "question": "Tell me the price ranges for all the hotels.", "question_toks": ["Tell", "me", "the", "price", "ranges", "for", "all", "the", "hotels", "."], "dataset_name": "spider", "guid": 2702}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | What are the average score and average staff number of all shops?", "sql": "SELECT avg(num_of_staff) ,  avg(score) FROM shop", "example": {"db_id": "coffee_shop", "query": "SELECT avg(num_of_staff) ,  avg(score) FROM shop", "query_toks": ["SELECT", "avg", "(", "num_of_staff", ")", ",", "avg", "(", "score", ")", "FROM", "shop"], "query_toks_no_value": ["select", "avg", "(", "num_of_staff", ")", ",", "avg", "(", "score", ")", "from", "shop"], "question": "What are the average score and average staff number of all shops?", "question_toks": ["What", "are", "the", "average", "score", "and", "average", "staff", "number", "of", "all", "shops", "?"], "dataset_name": "spider", "guid": 2703}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | find the id, name and age for visitors who visited some museums more than once.", "sql": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "example": {"db_id": "museum_visit", "query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1", "query_toks": ["SELECT", "t1.id", ",", "t1.name", ",", "t1.age", "FROM", "visitor", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.id", "=", "t2.visitor_id", "GROUP", "BY", "t1.id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", ",", "t1", ".", "age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "visitor_id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "value"], "question": "find the id, name and age for visitors who visited some museums more than once.", "question_toks": ["find", "the", "id", ",", "name", "and", "age", "for", "visitors", "who", "visited", "some", "museums", "more", "than", "once", "."], "dataset_name": "spider", "guid": 2704}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Return the detail of the location named \"UK Gallery\".", "sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "query_toks": ["SELECT", "Other_Details", "FROM", "LOCATIONS", "WHERE", "Location_Name", "=", "``", "UK", "Gallery", "''"], "query_toks_no_value": ["select", "other_details", "from", "locations", "where", "location_name", "=", "value"], "question": "Return the detail of the location named \"UK Gallery\".", "question_toks": ["Return", "the", "detail", "of", "the", "location", "named", "``", "UK", "Gallery", "''", "."], "dataset_name": "spider", "guid": 2705}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What are the name of rooms booked by customers whose first name has \"ROY\" in part?", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", "example": {"db_id": "inn_1", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", "query_toks": ["SELECT", "T2.roomName", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "WHERE", "firstname", "LIKE", "'", "%", "ROY", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "roomname", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "where", "firstname", "like", "value"], "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?", "question_toks": ["What", "are", "the", "name", "of", "rooms", "booked", "by", "customers", "whose", "first", "name", "has", "``", "ROY", "''", "in", "part", "?"], "dataset_name": "spider", "guid": 2706}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What are the names of rooms that have either king or queen bed?", "sql": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";", "example": {"db_id": "inn_1", "query": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";", "query_toks": ["SELECT", "roomName", "FROM", "Rooms", "WHERE", "bedType", "=", "``", "King", "''", "OR", "bedType", "=", "``", "Queen", "''", ";"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "where", "bedtype", "=", "value", "or", "bedtype", "=", "value"], "question": "What are the names of rooms that have either king or queen bed?", "question_toks": ["What", "are", "the", "names", "of", "rooms", "that", "have", "either", "king", "or", "queen", "bed", "?"], "dataset_name": "spider", "guid": 2707}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | Show the different statuses and the numbers of roller coasters for each status.", "sql": "SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status", "example": {"db_id": "roller_coaster", "query": "SELECT Status ,  COUNT(*) FROM roller_coaster GROUP BY Status", "query_toks": ["SELECT", "Status", ",", "COUNT", "(", "*", ")", "FROM", "roller_coaster", "GROUP", "BY", "Status"], "query_toks_no_value": ["select", "status", ",", "count", "(", "*", ")", "from", "roller_coaster", "group", "by", "status"], "question": "Show the different statuses and the numbers of roller coasters for each status.", "question_toks": ["Show", "the", "different", "statuses", "and", "the", "numbers", "of", "roller", "coasters", "for", "each", "status", "."], "dataset_name": "spider", "guid": 2708}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many Target are there in \" Los Angeles \" ?", "sql": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "business_id", ")", "FROM", "business", "WHERE", "city", "=", "``", "Los", "Angeles", "''", "AND", "name", "=", "``", "Target", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "business_id", ")", "from", "business", "where", "city", "=", "value", "and", "name", "=", "value"], "question": "How many Target are there in \" Los Angeles \" ?", "question_toks": ["How", "many", "Target", "are", "there", "in", "``", "Los", "Angeles", "``", "?"], "dataset_name": "spider", "guid": 2709}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many escape games exist in Madison", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Madison", "''", "AND", "t2.category_name", "=", "``", "escape", "games", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "How many escape games exist in Madison", "question_toks": ["How", "many", "escape", "games", "exist", "in", "Madison"], "dataset_name": "spider", "guid": 2710}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find all the locations whose names contain the word \"film\".", "sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"", "query_toks": ["SELECT", "Location_Name", "FROM", "LOCATIONS", "WHERE", "Location_Name", "LIKE", "``", "%", "film", "%", "''"], "query_toks_no_value": ["select", "location_name", "from", "locations", "where", "location_name", "like", "value"], "question": "Find all the locations whose names contain the word \"film\".", "question_toks": ["Find", "all", "the", "locations", "whose", "names", "contain", "the", "word", "``", "film", "''", "."], "dataset_name": "spider", "guid": 2711}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Find all the building full names containing the word \"court\".", "sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"", "example": {"db_id": "apartment_rentals", "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"", "query_toks": ["SELECT", "building_full_name", "FROM", "Apartment_Buildings", "WHERE", "building_full_name", "LIKE", "``", "%", "court", "%", "''"], "query_toks_no_value": ["select", "building_full_name", "from", "apartment_buildings", "where", "building_full_name", "like", "value"], "question": "Find all the building full names containing the word \"court\".", "question_toks": ["Find", "all", "the", "building", "full", "names", "containing", "the", "word", "``", "court", "''", "."], "dataset_name": "spider", "guid": 2712}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "sql": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "example": {"db_id": "museum_visit", "query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1", "query_toks": ["SELECT", "t2.visitor_id", ",", "t1.name", ",", "t1.Level_of_membership", "FROM", "visitor", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.id", "=", "t2.visitor_id", "GROUP", "BY", "t2.visitor_id", "ORDER", "BY", "sum", "(", "t2.Total_spent", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "visitor_id", ",", "t1", ".", "name", ",", "t1", ".", "level_of_membership", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "visitor_id", "group", "by", "t2", ".", "visitor_id", "order", "by", "sum", "(", "t2", ".", "total_spent", ")", "desc", "limit", "value"], "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "question_toks": ["What", "are", "the", "id", ",", "name", "and", "membership", "level", "of", "visitors", "who", "have", "spent", "the", "largest", "amount", "of", "money", "in", "total", "in", "all", "museum", "tickets", "?"], "dataset_name": "spider", "guid": 2713}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what is the best american restaurant in the bay area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", ")", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "what is the best american restaurant in the bay area ?", "question_toks": ["what", "is", "the", "best", "american", "restaurant", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2714}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the names of tourist attraction that Alison visited but Rosalind did not visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"", "query_toks": ["SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITORS", "AS", "T2", "JOIN", "VISITS", "AS", "T3", "ON", "T1.Tourist_Attraction_ID", "=", "T3.Tourist_Attraction_ID", "AND", "T2.Tourist_ID", "=", "T3.Tourist_ID", "WHERE", "T2.Tourist_Details", "=", "``", "Alison", "''", "EXCEPT", "SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITORS", "AS", "T2", "JOIN", "VISITS", "AS", "T3", "ON", "T1.Tourist_Attraction_ID", "=", "T3.Tourist_Attraction_ID", "AND", "T2.Tourist_ID", "=", "T3.Tourist_ID", "WHERE", "T2.Tourist_Details", "=", "``", "Rosalind", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "visitors", "as", "t2", "join", "visits", "as", "t3", "on", "t1", ".", "tourist_attraction_id", "=", "t3", ".", "tourist_attraction_id", "and", "t2", ".", "tourist_id", "=", "t3", ".", "tourist_id", "where", "t2", ".", "tourist_details", "=", "value", "except", "select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "visitors", "as", "t2", "join", "visits", "as", "t3", "on", "t1", ".", "tourist_attraction_id", "=", "t3", ".", "tourist_attraction_id", "and", "t2", ".", "tourist_id", "=", "t3", ".", "tourist_id", "where", "t2", ".", "tourist_details", "=", "value"], "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?", "question_toks": ["What", "are", "the", "names", "of", "tourist", "attraction", "that", "Alison", "visited", "but", "Rosalind", "did", "not", "visit", "?"], "dataset_name": "spider", "guid": 2715}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the total number of rooms of all apartments with facility code \"Gym\".", "sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"", "example": {"db_id": "apartment_rentals", "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"", "query_toks": ["SELECT", "sum", "(", "T2.room_count", ")", "FROM", "Apartment_Facilities", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T1.facility_code", "=", "``", "Gym", "''"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "room_count", ")", "from", "apartment_facilities", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t1", ".", "facility_code", "=", "value"], "question": "Show the total number of rooms of all apartments with facility code \"Gym\".", "question_toks": ["Show", "the", "total", "number", "of", "rooms", "of", "all", "apartments", "with", "facility", "code", "``", "Gym", "''", "."], "dataset_name": "spider", "guid": 2716}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some restaurants good for arabic food on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some restaurants good for arabic food on buchanan in san francisco ?", "question_toks": ["give", "me", "some", "restaurants", "good", "for", "arabic", "food", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2717}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the average room count of the apartments that have booking status code \"Provisional\".", "sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"", "example": {"db_id": "apartment_rentals", "query": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"", "query_toks": ["SELECT", "avg", "(", "room_count", ")", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T1.booking_status_code", "=", "``", "Provisional", "''"], "query_toks_no_value": ["select", "avg", "(", "room_count", ")", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t1", ".", "booking_status_code", "=", "value"], "question": "Show the average room count of the apartments that have booking status code \"Provisional\".", "question_toks": ["Show", "the", "average", "room", "count", "of", "the", "apartments", "that", "have", "booking", "status", "code", "``", "Provisional", "''", "."], "dataset_name": "spider", "guid": 2718}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | Which major has between 2 and 30 number of students? List major and the number of students.", "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;", "example": {"db_id": "restaurant_1", "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major HAVING count(Major) BETWEEN 2 AND 30;", "query_toks": ["SELECT", "Major", ",", "count", "(", "*", ")", "FROM", "Student", "GROUP", "BY", "Major", "HAVING", "count", "(", "Major", ")", "BETWEEN", "2", "AND", "30", ";"], "query_toks_no_value": ["select", "major", ",", "count", "(", "*", ")", "from", "student", "group", "by", "major", "having", "count", "(", "major", ")", "between", "value", "and", "value"], "question": "Which major has between 2 and 30 number of students? List major and the number of students.", "question_toks": ["Which", "major", "has", "between", "2", "and", "30", "number", "of", "students", "?", "List", "major", "and", "the", "number", "of", "students", "."], "dataset_name": "spider", "guid": 2719}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all states in which there is a Whataburger", "sql": "SELECT state FROM business WHERE name  =  \"Whataburger\";", "example": {"db_id": "yelp", "query": "SELECT state FROM business WHERE name  =  \"Whataburger\";", "query_toks": ["SELECT", "state", "FROM", "business", "WHERE", "name", "=", "``", "Whataburger", "''", ";"], "query_toks_no_value": ["select", "state", "from", "business", "where", "name", "=", "value"], "question": "Find all states in which there is a Whataburger", "question_toks": ["Find", "all", "states", "in", "which", "there", "is", "a", "Whataburger"], "dataset_name": "spider", "guid": 2720}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | How many available hotels are there in total?", "sql": "SELECT count(*) FROM HOTELS", "example": {"db_id": "cre_Theme_park", "query": "SELECT count(*) FROM HOTELS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "HOTELS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "hotels"], "question": "How many available hotels are there in total?", "question_toks": ["How", "many", "available", "hotels", "are", "there", "in", "total", "?"], "dataset_name": "spider", "guid": 2721}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many times does ROY SWEAZY has reserved a room.", "sql": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "example": {"db_id": "inn_1", "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Reservations", "WHERE", "FirstName", "=", "``", "ROY", "''", "AND", "LastName", "=", "``", "SWEAZY", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "reservations", "where", "firstname", "=", "value", "and", "lastname", "=", "value"], "question": "How many times does ROY SWEAZY has reserved a room.", "question_toks": ["How", "many", "times", "does", "ROY", "SWEAZY", "has", "reserved", "a", "room", "."], "dataset_name": "spider", "guid": 2722}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Count the number of artists.", "sql": "SELECT count(*) FROM artist", "example": {"db_id": "theme_gallery", "query": "SELECT count(*) FROM artist", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "artist"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artist"], "question": "Count the number of artists.", "question_toks": ["Count", "the", "number", "of", "artists", "."], "dataset_name": "spider", "guid": 2723}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Count the number of distinct names associated with the photos.", "sql": "SELECT count(DISTINCT Name) FROM PHOTOS", "example": {"db_id": "cre_Theme_park", "query": "SELECT count(DISTINCT Name) FROM PHOTOS", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Name", ")", "FROM", "PHOTOS"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "photos"], "question": "Count the number of distinct names associated with the photos.", "question_toks": ["Count", "the", "number", "of", "distinct", "names", "associated", "with", "the", "photos", "."], "dataset_name": "spider", "guid": 2724}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a jamerican cuisine in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.name", "=", "``", "jamerican", "cuisine", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "where is a jamerican cuisine in san francisco ?", "question_toks": ["where", "is", "a", "jamerican", "cuisine", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2725}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me the best american in the bay area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", ")", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "give me the best american in the bay area ?", "question_toks": ["give", "me", "the", "best", "american", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2726}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what are some good places for arabic on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "what are some good places for arabic on buchanan in san francisco ?", "question_toks": ["what", "are", "some", "good", "places", "for", "arabic", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2727}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | what is the number of restaurant in Texas", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.state", "=", "``", "Texas", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "state", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "what is the number of restaurant in Texas", "question_toks": ["what", "is", "the", "number", "of", "restaurant", "in", "Texas"], "dataset_name": "spider", "guid": 2728}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some good arabic restaurants in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some good arabic restaurants in mountain view ?", "question_toks": ["give", "me", "some", "good", "arabic", "restaurants", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2729}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?", "sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"", "query_toks": ["SELECT", "T1.Name", ",", "T3.Visit_Date", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITORS", "AS", "T2", "JOIN", "VISITS", "AS", "T3", "ON", "T1.Tourist_Attraction_ID", "=", "T3.Tourist_Attraction_ID", "AND", "T2.Tourist_ID", "=", "T3.Tourist_ID", "WHERE", "T2.Tourist_Details", "=", "``", "Vincent", "''", "OR", "T2.Tourist_Details", "=", "``", "Vivian", "''"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t3", ".", "visit_date", "from", "tourist_attractions", "as", "t1", "join", "visitors", "as", "t2", "join", "visits", "as", "t3", "on", "t1", ".", "tourist_attraction_id", "=", "t3", ".", "tourist_attraction_id", "and", "t2", ".", "tourist_id", "=", "t3", ".", "tourist_id", "where", "t2", ".", "tourist_details", "=", "value", "or", "t2", ".", "tourist_details", "=", "value"], "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?", "question_toks": ["What", "are", "the", "names", "of", "the", "tourist", "attractions", "and", "the", "dates", "when", "the", "tourists", "named", "Vincent", "or", "Vivian", "visited", "there", "?"], "dataset_name": "spider", "guid": 2730}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison ?", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.neighbourhood_name  =  \"Stone Meadows\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.neighbourhood_name  =  \"Stone Meadows\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "neighbourhood", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Madison", "''", "AND", "t2.neighbourhood_name", "=", "``", "Stone", "Meadows", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "neighbourhood", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "neighbourhood_name", "=", "value"], "question": "How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison ?", "question_toks": ["How", "many", "businesses", "are", "there", "in", "the", "``", "Stone", "Meadows", "``", "neighbourhood", "in", "Madison", "?"], "dataset_name": "spider", "guid": 2731}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find the number of reviews on businesses located in \" South Summerlin \" neighbourhood", "sql": "SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id JOIN review AS t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  \"South Summerlin\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id JOIN review AS t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  \"South Summerlin\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.text", ")", "FROM", "neighbourhood", "AS", "t1", "JOIN", "business", "AS", "t2", "ON", "t1.business_id", "=", "t2.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t2.business_id", "WHERE", "t1.neighbourhood_name", "=", "``", "South", "Summerlin", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "text", ")", "from", "neighbourhood", "as", "t1", "join", "business", "as", "t2", "on", "t1", ".", "business_id", "=", "t2", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t2", ".", "business_id", "where", "t1", ".", "neighbourhood_name", "=", "value"], "question": "Find the number of reviews on businesses located in \" South Summerlin \" neighbourhood", "question_toks": ["Find", "the", "number", "of", "reviews", "on", "businesses", "located", "in", "``", "South", "Summerlin", "``", "neighbourhood"], "dataset_name": "spider", "guid": 2732}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".", "sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"", "example": {"db_id": "apartment_rentals", "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"", "query_toks": ["SELECT", "sum", "(", "T2.room_count", ")", "FROM", "Apartment_Buildings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.building_id", "=", "T2.building_id", "WHERE", "T1.building_short_name", "=", "``", "Columbus", "Square", "''"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "room_count", ")", "from", "apartment_buildings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "building_id", "where", "t1", ".", "building_short_name", "=", "value"], "question": "Show the total number of rooms of the apartments in the building with short name \"Columbus Square\".", "question_toks": ["Show", "the", "total", "number", "of", "rooms", "of", "the", "apartments", "in", "the", "building", "with", "short", "name", "``", "Columbus", "Square", "''", "."], "dataset_name": "spider", "guid": 2733}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can we find a restaurant on bethel island rd in bethel island ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "bethel", "island", "''", "AND", "t2.street_name", "=", "``", "bethel", "island", "rd", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value"], "question": "where can we find a restaurant on bethel island rd in bethel island ?", "question_toks": ["where", "can", "we", "find", "a", "restaurant", "on", "bethel", "island", "rd", "in", "bethel", "island", "?"], "dataset_name": "spider", "guid": 2734}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is the best american in the bay area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", ")", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "where is the best american in the bay area ?", "question_toks": ["where", "is", "the", "best", "american", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2735}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | how many french restaurants are there in palo alto ?", "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";", "example": {"db_id": "restaurants", "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "palo", "alto", "''", "AND", "t1.food_type", "=", "``", "french", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value"], "question": "how many french restaurants are there in palo alto ?", "question_toks": ["how", "many", "french", "restaurants", "are", "there", "in", "palo", "alto", "?"], "dataset_name": "spider", "guid": 2736}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | How many apartment bookings are there in total?", "sql": "SELECT count(*) FROM Apartment_Bookings", "example": {"db_id": "apartment_rentals", "query": "SELECT count(*) FROM Apartment_Bookings", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Apartment_Bookings"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "apartment_bookings"], "question": "How many apartment bookings are there in total?", "question_toks": ["How", "many", "apartment", "bookings", "are", "there", "in", "total", "?"], "dataset_name": "spider", "guid": 2737}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the star rating descriptions of the hotels with price above 10000?", "sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000", "example": {"db_id": "cre_Theme_park", "query": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000", "query_toks": ["SELECT", "T2.star_rating_description", "FROM", "HOTELS", "AS", "T1", "JOIN", "Ref_Hotel_Star_Ratings", "AS", "T2", "ON", "T1.star_rating_code", "=", "T2.star_rating_code", "WHERE", "T1.price_range", ">", "10000"], "query_toks_no_value": ["select", "t2", ".", "star_rating_description", "from", "hotels", "as", "t1", "join", "ref_hotel_star_ratings", "as", "t2", "on", "t1", ".", "star_rating_code", "=", "t2", ".", "star_rating_code", "where", "t1", ".", "price_range", ">", "value"], "question": "What are the star rating descriptions of the hotels with price above 10000?", "question_toks": ["What", "are", "the", "star", "rating", "descriptions", "of", "the", "hotels", "with", "price", "above", "10000", "?"], "dataset_name": "spider", "guid": 2738}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | What is the average age of the visitors whose membership level is not higher than 4?", "sql": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "example": {"db_id": "museum_visit", "query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4", "query_toks": ["SELECT", "avg", "(", "age", ")", "FROM", "visitor", "WHERE", "Level_of_membership", "<", "=", "4"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "visitor", "where", "level_of_membership", "<", "=", "value"], "question": "What is the average age of the visitors whose membership level is not higher than 4?", "question_toks": ["What", "is", "the", "average", "age", "of", "the", "visitors", "whose", "membership", "level", "is", "not", "higher", "than", "4", "?"], "dataset_name": "spider", "guid": 2739}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.", "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "query_toks": ["SELECT", "apt_type_code", ",", "bathroom_count", ",", "bedroom_count", "FROM", "Apartments", "GROUP", "BY", "apt_type_code", "ORDER", "BY", "sum", "(", "room_count", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "apt_type_code", ",", "bathroom_count", ",", "bedroom_count", "from", "apartments", "group", "by", "apt_type_code", "order", "by", "sum", "(", "room_count", ")", "desc", "limit", "value"], "question": "Which apartment type has the largest number of total rooms? Return the apartment type code, its number of bathrooms and number of bedrooms.", "question_toks": ["Which", "apartment", "type", "has", "the", "largest", "number", "of", "total", "rooms", "?", "Return", "the", "apartment", "type", "code", ",", "its", "number", "of", "bathrooms", "and", "number", "of", "bedrooms", "."], "dataset_name": "spider", "guid": 2740}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all the restaurant rated more than 3.5", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.rating", ">", "3.5", "AND", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "rating", ">", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "List all the restaurant rated more than 3.5", "question_toks": ["List", "all", "the", "restaurant", "rated", "more", "than", "3.5"], "dataset_name": "spider", "guid": 2741}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.", "sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1", "query_toks": ["SELECT", "T1.apt_number", "FROM", "Apartments", "AS", "T1", "JOIN", "View_Unit_Status", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T2.available_yn", "=", "0", "INTERSECT", "SELECT", "T1.apt_number", "FROM", "Apartments", "AS", "T1", "JOIN", "View_Unit_Status", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T2.available_yn", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "apt_number", "from", "apartments", "as", "t1", "join", "view_unit_status", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t2", ".", "available_yn", "=", "value", "intersect", "select", "t1", ".", "apt_number", "from", "apartments", "as", "t1", "join", "view_unit_status", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t2", ".", "available_yn", "=", "value"], "question": "Which apartments have unit status availability of both 0 and 1? Return their apartment numbers.", "question_toks": ["Which", "apartments", "have", "unit", "status", "availability", "of", "both", "0", "and", "1", "?", "Return", "their", "apartment", "numbers", "."], "dataset_name": "spider", "guid": 2742}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What is the total number of rooms available in this inn?", "sql": "SELECT count(*) FROM Rooms;", "example": {"db_id": "inn_1", "query": "SELECT count(*) FROM Rooms;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Rooms", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "rooms"], "question": "What is the total number of rooms available in this inn?", "question_toks": ["What", "is", "the", "total", "number", "of", "rooms", "available", "in", "this", "inn", "?"], "dataset_name": "spider", "guid": 2743}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Which tourist attraction is associated with the photo \"game1\"? Return its name.", "sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"", "query_toks": ["SELECT", "T2.Name", "FROM", "PHOTOS", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "WHERE", "T1.Name", "=", "``", "game1", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "photos", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "where", "t1", ".", "name", "=", "value"], "question": "Which tourist attraction is associated with the photo \"game1\"? Return its name.", "question_toks": ["Which", "tourist", "attraction", "is", "associated", "with", "the", "photo", "``", "game1", "''", "?", "Return", "its", "name", "."], "dataset_name": "spider", "guid": 2744}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many times the number of adults and kids staying in a room reached the maximum capacity of the room?", "sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;", "example": {"db_id": "inn_1", "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "WHERE", "T2.maxOccupancy", "=", "T1.Adults", "+", "T1.Kids", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "where", "t2", ".", "maxoccupancy", "=", "t1", ".", "adults", "+", "t1", ".", "kids"], "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?", "question_toks": ["How", "many", "times", "the", "number", "of", "adults", "and", "kids", "staying", "in", "a", "room", "reached", "the", "maximum", "capacity", "of", "the", "room", "?"], "dataset_name": "spider", "guid": 2745}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | How many restaurant is the Sandwich type restaurant?", "sql": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'", "example": {"db_id": "restaurant_1", "query": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Restaurant", "JOIN", "Type_Of_Restaurant", "ON", "Restaurant.ResID", "=", "Type_Of_Restaurant.ResID", "JOIN", "Restaurant_Type", "ON", "Type_Of_Restaurant.ResTypeID", "=", "Restaurant_Type.ResTypeID", "GROUP", "BY", "Type_Of_Restaurant.ResTypeID", "HAVING", "Restaurant_Type.ResTypeName", "=", "'Sandwich", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "join", "type_of_restaurant", "on", "restaurant.resid", "=", "type_of_restaurant.resid", "join", "restaurant_type", "on", "type_of_restaurant.restypeid", "=", "restaurant_type.restypeid", "group", "by", "type_of_restaurant.restypeid", "having", "restaurant_type.restypename", "=", "value"], "question": "How many restaurant is the Sandwich type restaurant?", "question_toks": ["How", "many", "restaurant", "is", "the", "Sandwich", "type", "restaurant", "?"], "dataset_name": "spider", "guid": 2746}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all reviews about \" Kabob Palace \" in year 2014", "sql": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Kabob Palace\" AND t2.year  =  2014;", "example": {"db_id": "yelp", "query": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Kabob Palace\" AND t2.year  =  2014;", "query_toks": ["SELECT", "t2.text", "FROM", "review", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.name", "=", "``", "Kabob", "Palace", "''", "AND", "t2.year", "=", "2014", ";"], "query_toks_no_value": ["select", "t2", ".", "text", "from", "review", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "Find all reviews about \" Kabob Palace \" in year 2014", "question_toks": ["Find", "all", "reviews", "about", "``", "Kabob", "Palace", "``", "in", "year", "2014"], "dataset_name": "spider", "guid": 2747}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a good restaurant on buchanan in san francisco for arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a good restaurant on buchanan in san francisco for arabic food ?", "question_toks": ["where", "is", "a", "good", "restaurant", "on", "buchanan", "in", "san", "francisco", "for", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2748}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all businesses that are restaurant in Pennsylvania .", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.state", "=", "``", "Pennsylvania", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "state", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "List all businesses that are restaurant in Pennsylvania .", "question_toks": ["List", "all", "businesses", "that", "are", "restaurant", "in", "Pennsylvania", "."], "dataset_name": "spider", "guid": 2749}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | How many museums were opened after 2013 or before 2008?", "sql": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "example": {"db_id": "museum_visit", "query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "museum", "WHERE", "open_year", ">", "2013", "OR", "open_year", "<", "2008"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "museum", "where", "open_year", ">", "value", "or", "open_year", "<", "value"], "question": "How many museums were opened after 2013 or before 2008?", "question_toks": ["How", "many", "museums", "were", "opened", "after", "2013", "or", "before", "2008", "?"], "dataset_name": "spider", "guid": 2750}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Which rooms cost between 120 and 150? Give me the room names.", "sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150", "example": {"db_id": "inn_1", "query": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150", "query_toks": ["SELECT", "roomname", "FROM", "rooms", "WHERE", "baseprice", "BETWEEN", "120", "AND", "150"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "where", "baseprice", "between", "value", "and", "value"], "question": "Which rooms cost between 120 and 150? Give me the room names.", "question_toks": ["Which", "rooms", "cost", "between", "120", "and", "150", "?", "Give", "me", "the", "room", "names", "."], "dataset_name": "spider", "guid": 2751}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"", "query_toks": ["SELECT", "T1.booking_start_date", ",", "T1.booking_start_date", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Guests", "AS", "T2", "ON", "T1.guest_id", "=", "T2.guest_id", "WHERE", "T2.gender_code", "=", "``", "Female", "''"], "query_toks_no_value": ["select", "t1", ".", "booking_start_date", ",", "t1", ".", "booking_start_date", "from", "apartment_bookings", "as", "t1", "join", "guests", "as", "t2", "on", "t1", ".", "guest_id", "=", "t2", ".", "guest_id", "where", "t2", ".", "gender_code", "=", "value"], "question": "Show the start dates and end dates of all the apartment bookings made by guests with gender code \"Female\".", "question_toks": ["Show", "the", "start", "dates", "and", "end", "dates", "of", "all", "the", "apartment", "bookings", "made", "by", "guests", "with", "gender", "code", "``", "Female", "''", "."], "dataset_name": "spider", "guid": 2752}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | What is the number of escape games in Madison", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Madison", "''", "AND", "t2.category_name", "=", "``", "escape", "games", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "What is the number of escape games in Madison", "question_toks": ["What", "is", "the", "number", "of", "escape", "games", "in", "Madison"], "dataset_name": "spider", "guid": 2753}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T2.gender_code  =  \"Female\"", "query_toks": ["SELECT", "T1.booking_start_date", ",", "T1.booking_start_date", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Guests", "AS", "T2", "ON", "T1.guest_id", "=", "T2.guest_id", "WHERE", "T2.gender_code", "=", "``", "Female", "''"], "query_toks_no_value": ["select", "t1", ".", "booking_start_date", ",", "t1", ".", "booking_start_date", "from", "apartment_bookings", "as", "t1", "join", "guests", "as", "t2", "on", "t1", ".", "guest_id", "=", "t2", ".", "guest_id", "where", "t2", ".", "gender_code", "=", "value"], "question": "What are the start date and end date of the apartment bookings made by female guests (gender code \"Female\")?", "question_toks": ["What", "are", "the", "start", "date", "and", "end", "date", "of", "the", "apartment", "bookings", "made", "by", "female", "guests", "(", "gender", "code", "``", "Female", "''", ")", "?"], "dataset_name": "spider", "guid": 2754}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many tips has Michelle written in April", "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"April\" AND t2.name  =  \"Michelle\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"April\" AND t2.name  =  \"Michelle\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.text", ")", "FROM", "USER", "AS", "t2", "JOIN", "tip", "AS", "t1", "ON", "t2.user_id", "=", "t1.user_id", "WHERE", "t1.month", "=", "``", "April", "''", "AND", "t2.name", "=", "``", "Michelle", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "text", ")", "from", "user", "as", "t2", "join", "tip", "as", "t1", "on", "t2", ".", "user_id", "=", "t1", ".", "user_id", "where", "t1", ".", "month", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "How many tips has Michelle written in April", "question_toks": ["How", "many", "tips", "has", "Michelle", "written", "in", "April"], "dataset_name": "spider", "guid": 2755}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are the start date and end date of each apartment booking?", "sql": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings", "example": {"db_id": "apartment_rentals", "query": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings", "query_toks": ["SELECT", "booking_start_date", ",", "booking_end_date", "FROM", "Apartment_Bookings"], "query_toks_no_value": ["select", "booking_start_date", ",", "booking_end_date", "from", "apartment_bookings"], "question": "What are the start date and end date of each apartment booking?", "question_toks": ["What", "are", "the", "start", "date", "and", "end", "date", "of", "each", "apartment", "booking", "?"], "dataset_name": "spider", "guid": 2756}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me the best restaurant in bay area for american food ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", ")", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "give me the best restaurant in bay area for american food ?", "question_toks": ["give", "me", "the", "best", "restaurant", "in", "bay", "area", "for", "american", "food", "?"], "dataset_name": "spider", "guid": 2757}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | What are the lengths and heights of roller coasters?", "sql": "SELECT LENGTH ,  Height FROM roller_coaster", "example": {"db_id": "roller_coaster", "query": "SELECT LENGTH ,  Height FROM roller_coaster", "query_toks": ["SELECT", "LENGTH", ",", "Height", "FROM", "roller_coaster"], "query_toks_no_value": ["select", "length", ",", "height", "from", "roller_coaster"], "question": "What are the lengths and heights of roller coasters?", "question_toks": ["What", "are", "the", "lengths", "and", "heights", "of", "roller", "coasters", "?"], "dataset_name": "spider", "guid": 2758}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the details of the top 3 most expensive hotels.", "sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3", "example": {"db_id": "cre_Theme_park", "query": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3", "query_toks": ["SELECT", "other_hotel_details", "FROM", "HOTELS", "ORDER", "BY", "price_range", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "other_hotel_details", "from", "hotels", "order", "by", "price_range", "desc", "limit", "value"], "question": "Show the details of the top 3 most expensive hotels.", "question_toks": ["Show", "the", "details", "of", "the", "top", "3", "most", "expensive", "hotels", "."], "dataset_name": "spider", "guid": 2759}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.", "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "example": {"db_id": "theme_gallery", "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "exhibition_record", "AS", "T1", "JOIN", "exhibition", "AS", "T2", "ON", "T1.exhibition_id", "=", "T2.exhibition_id", "WHERE", "T1.attendance", ">", "100", "OR", "T2.ticket_price", "<", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "exhibition_record", "as", "t1", "join", "exhibition", "as", "t2", "on", "t1", ".", "exhibition_id", "=", "t2", ".", "exhibition_id", "where", "t1", ".", "attendance", ">", "value", "or", "t2", ".", "ticket_price", "<", "value"], "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.", "question_toks": ["Count", "the", "number", "of", "exhibitions", "that", "have", "had", "an", "attendnance", "of", "over", "100", "or", "a", "ticket", "prices", "under", "10", "."], "dataset_name": "spider", "guid": 2760}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What is the decor of room Recluse and defiance?", "sql": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";", "example": {"db_id": "inn_1", "query": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";", "query_toks": ["SELECT", "decor", "FROM", "Rooms", "WHERE", "roomName", "=", "``", "Recluse", "and", "defiance", "''", ";"], "query_toks_no_value": ["select", "decor", "from", "rooms", "where", "roomname", "=", "value"], "question": "What is the decor of room Recluse and defiance?", "question_toks": ["What", "is", "the", "decor", "of", "room", "Recluse", "and", "defiance", "?"], "dataset_name": "spider", "guid": 2761}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | Find the average number of staff working for the museums that were open before 2009.", "sql": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "example": {"db_id": "museum_visit", "query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009", "query_toks": ["SELECT", "avg", "(", "num_of_staff", ")", "FROM", "museum", "WHERE", "open_year", "<", "2009"], "query_toks_no_value": ["select", "avg", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", "<", "value"], "question": "Find the average number of staff working for the museums that were open before 2009.", "question_toks": ["Find", "the", "average", "number", "of", "staff", "working", "for", "the", "museums", "that", "were", "open", "before", "2009", "."], "dataset_name": "spider", "guid": 2762}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?", "sql": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"", "query_toks": ["SELECT", "Name", ",", "Opening_Hours", "FROM", "TOURIST_ATTRACTIONS", "WHERE", "How_to_Get_There", "=", "``", "bus", "''", "OR", "How_to_Get_There", "=", "``", "walk", "''"], "query_toks_no_value": ["select", "name", ",", "opening_hours", "from", "tourist_attractions", "where", "how_to_get_there", "=", "value", "or", "how_to_get_there", "=", "value"], "question": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?", "question_toks": ["What", "are", "the", "names", "and", "opening", "hours", "of", "the", "tourist", "attractions", "that", "can", "be", "accessed", "by", "bus", "or", "walk", "?"], "dataset_name": "spider", "guid": 2763}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | What is the total likes on tips from Niloofar", "sql": "SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";", "example": {"db_id": "yelp", "query": "SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";", "query_toks": ["SELECT", "SUM", "(", "t1.likes", ")", "FROM", "USER", "AS", "t2", "JOIN", "tip", "AS", "t1", "ON", "t2.user_id", "=", "t1.user_id", "WHERE", "t2.name", "=", "``", "Niloofar", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "likes", ")", "from", "user", "as", "t2", "join", "tip", "as", "t1", "on", "t2", ".", "user_id", "=", "t1", ".", "user_id", "where", "t2", ".", "name", "=", "value"], "question": "What is the total likes on tips from Niloofar", "question_toks": ["What", "is", "the", "total", "likes", "on", "tips", "from", "Niloofar"], "dataset_name": "spider", "guid": 2764}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many people reviewed \" Bistro Di Napoli \" in 2015 ?", "sql": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Bistro Di Napoli\" AND t2.year  =  2015;", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Bistro Di Napoli\" AND t2.year  =  2015;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.name", ")", "FROM", "review", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t3", "ON", "t3.user_id", "=", "t2.user_id", "WHERE", "t1.name", "=", "``", "Bistro", "Di", "Napoli", "''", "AND", "t2.year", "=", "2015", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "name", ")", "from", "review", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t3", "on", "t3", ".", "user_id", "=", "t2", ".", "user_id", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "How many people reviewed \" Bistro Di Napoli \" in 2015 ?", "question_toks": ["How", "many", "people", "reviewed", "``", "Bistro", "Di", "Napoli", "``", "in", "2015", "?"], "dataset_name": "spider", "guid": 2765}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where are some good places for arabic on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where are some good places for arabic on buchanan in san francisco ?", "question_toks": ["where", "are", "some", "good", "places", "for", "arabic", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2766}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the description and code of the attraction type most tourist attractions belong to.", "sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Attraction_Type_Description", ",", "T2.Attraction_Type_Code", "FROM", "Ref_Attraction_Types", "AS", "T1", "JOIN", "Tourist_Attractions", "AS", "T2", "ON", "T1.Attraction_Type_Code", "=", "T2.Attraction_Type_Code", "GROUP", "BY", "T2.Attraction_Type_Code", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "attraction_type_description", ",", "t2", ".", "attraction_type_code", "from", "ref_attraction_types", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "attraction_type_code", "=", "t2", ".", "attraction_type_code", "group", "by", "t2", ".", "attraction_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the description and code of the attraction type most tourist attractions belong to.", "question_toks": ["Show", "the", "description", "and", "code", "of", "the", "attraction", "type", "most", "tourist", "attractions", "belong", "to", "."], "dataset_name": "spider", "guid": 2767}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"", "query_toks": ["SELECT", "T2.Name", "FROM", "Locations", "AS", "T1", "JOIN", "Tourist_Attractions", "AS", "T2", "ON", "T1.Location_ID", "=", "T2.Location_ID", "WHERE", "T1.Address", "=", "``", "254", "Ottilie", "Junction", "''", "OR", "T2.How_to_Get_There", "=", "``", "bus", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "locations", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "location_id", "=", "t2", ".", "location_id", "where", "t1", ".", "address", "=", "value", "or", "t2", ".", "how_to_get_there", "=", "value"], "question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?", "question_toks": ["What", "are", "the", "names", "of", "tourist", "attractions", "that", "can", "be", "reached", "by", "bus", "or", "is", "at", "address", "254", "Ottilie", "Junction", "?"], "dataset_name": "spider", "guid": 2768}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are the top three apartment types in terms of the average room count? Give me the", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "query_toks": ["SELECT", "apt_type_code", "FROM", "Apartments", "GROUP", "BY", "apt_type_code", "ORDER", "BY", "avg", "(", "room_count", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "apt_type_code", "from", "apartments", "group", "by", "apt_type_code", "order", "by", "avg", "(", "room_count", ")", "desc", "limit", "value"], "question": "What are the top three apartment types in terms of the average room count? Give me the", "question_toks": ["What", "are", "the", "top", "three", "apartment", "types", "in", "terms", "of", "the", "average", "room", "count", "?", "Give", "me", "the"], "dataset_name": "spider", "guid": 2769}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Return the average and minimum ages across artists from the United States.", "sql": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'", "example": {"db_id": "theme_gallery", "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "min", "(", "age", ")", "FROM", "artist", "WHERE", "country", "=", "'United", "States", "'"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", "from", "artist", "where", "country", "=", "value"], "question": "Return the average and minimum ages across artists from the United States.", "question_toks": ["Return", "the", "average", "and", "minimum", "ages", "across", "artists", "from", "the", "United", "States", "."], "dataset_name": "spider", "guid": 2770}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | List all students' first names and last names who majored in 600.", "sql": "SELECT Fname , Lname FROM Student WHERE Major  =  600;", "example": {"db_id": "restaurant_1", "query": "SELECT Fname , Lname FROM Student WHERE Major  =  600;", "query_toks": ["SELECT", "Fname", ",", "Lname", "FROM", "Student", "WHERE", "Major", "=", "600", ";"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student", "where", "major", "=", "value"], "question": "List all students' first names and last names who majored in 600.", "question_toks": ["List", "all", "students", "'", "first", "names", "and", "last", "names", "who", "majored", "in", "600", "."], "dataset_name": "spider", "guid": 2771}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | What is the number of checkins for \" Cafe Zinho \" on Friday", "sql": "SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t2.day  =  \"Friday\";", "example": {"db_id": "yelp", "query": "SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t2.day  =  \"Friday\";", "query_toks": ["SELECT", "t2.count", "FROM", "checkin", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.name", "=", "``", "Cafe", "Zinho", "''", "AND", "t2.day", "=", "``", "Friday", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "count", "from", "checkin", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "day", "=", "value"], "question": "What is the number of checkins for \" Cafe Zinho \" on Friday", "question_toks": ["What", "is", "the", "number", "of", "checkins", "for", "``", "Cafe", "Zinho", "``", "on", "Friday"], "dataset_name": "spider", "guid": 2772}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show all distinct building descriptions.", "sql": "SELECT DISTINCT building_description FROM Apartment_Buildings", "example": {"db_id": "apartment_rentals", "query": "SELECT DISTINCT building_description FROM Apartment_Buildings", "query_toks": ["SELECT", "DISTINCT", "building_description", "FROM", "Apartment_Buildings"], "query_toks_no_value": ["select", "distinct", "building_description", "from", "apartment_buildings"], "question": "Show all distinct building descriptions.", "question_toks": ["Show", "all", "distinct", "building", "descriptions", "."], "dataset_name": "spider", "guid": 2773}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the id and star rating of each hotel, ordered by its price from low to high.", "sql": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC", "example": {"db_id": "cre_Theme_park", "query": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC", "query_toks": ["SELECT", "hotel_id", ",", "star_rating_code", "FROM", "HOTELS", "ORDER", "BY", "price_range", "ASC"], "query_toks_no_value": ["select", "hotel_id", ",", "star_rating_code", "from", "hotels", "order", "by", "price_range", "asc"], "question": "Show the id and star rating of each hotel, ordered by its price from low to high.", "question_toks": ["Show", "the", "id", "and", "star", "rating", "of", "each", "hotel", ",", "ordered", "by", "its", "price", "from", "low", "to", "high", "."], "dataset_name": "spider", "guid": 2774}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good restaurant on bethel island rd in bethel island ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "bethel", "island", "''", "AND", "t2.street_name", "=", "``", "bethel", "island", "rd", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good restaurant on bethel island rd in bethel island ?", "question_toks": ["give", "me", "a", "good", "restaurant", "on", "bethel", "island", "rd", "in", "bethel", "island", "?"], "dataset_name": "spider", "guid": 2775}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all user ids with name Michelle", "sql": "SELECT user_id FROM USER WHERE name  =  \"Michelle\";", "example": {"db_id": "yelp", "query": "SELECT user_id FROM USER WHERE name  =  \"Michelle\";", "query_toks": ["SELECT", "user_id", "FROM", "USER", "WHERE", "name", "=", "``", "Michelle", "''", ";"], "query_toks_no_value": ["select", "user_id", "from", "user", "where", "name", "=", "value"], "question": "List all user ids with name Michelle", "question_toks": ["List", "all", "user", "ids", "with", "name", "Michelle"], "dataset_name": "spider", "guid": 2776}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | Which address do not have any member with the black membership card?", "sql": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'", "example": {"db_id": "coffee_shop", "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'", "query_toks": ["SELECT", "address", "FROM", "member", "EXCEPT", "SELECT", "address", "FROM", "member", "WHERE", "Membership_card", "=", "'Black", "'"], "query_toks_no_value": ["select", "address", "from", "member", "except", "select", "address", "from", "member", "where", "membership_card", "=", "value"], "question": "Which address do not have any member with the black membership card?", "question_toks": ["Which", "address", "do", "not", "have", "any", "member", "with", "the", "black", "membership", "card", "?"], "dataset_name": "spider", "guid": 2777}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What is the name of the artist who joined latest?", "sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1", "example": {"db_id": "theme_gallery", "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "artist", "ORDER", "BY", "year_join", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "artist", "order", "by", "year_join", "desc", "limit", "value"], "question": "What is the name of the artist who joined latest?", "question_toks": ["What", "is", "the", "name", "of", "the", "artist", "who", "joined", "latest", "?"], "dataset_name": "spider", "guid": 2778}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Return the apartment number with the largest number of bedrooms.", "sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "query_toks": ["SELECT", "apt_number", "FROM", "Apartments", "ORDER", "BY", "bedroom_count", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "apt_number", "from", "apartments", "order", "by", "bedroom_count", "desc", "limit", "value"], "question": "Return the apartment number with the largest number of bedrooms.", "question_toks": ["Return", "the", "apartment", "number", "with", "the", "largest", "number", "of", "bedrooms", "."], "dataset_name": "spider", "guid": 2779}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?", "sql": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009", "example": {"db_id": "theme_gallery", "query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009", "query_toks": ["SELECT", "avg", "(", "ticket_price", ")", ",", "min", "(", "ticket_price", ")", ",", "max", "(", "ticket_price", ")", "FROM", "exhibition", "WHERE", "YEAR", "<", "2009"], "query_toks_no_value": ["select", "avg", "(", "ticket_price", ")", ",", "min", "(", "ticket_price", ")", ",", "max", "(", "ticket_price", ")", "from", "exhibition", "where", "year", "<", "value"], "question": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?", "question_toks": ["What", "are", "the", "average", ",", "minimum", ",", "and", "maximum", "ticket", "prices", "for", "exhibitions", "that", "happened", "prior", "to", "2009", "?"], "dataset_name": "spider", "guid": 2780}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".", "sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"", "example": {"db_id": "apartment_rentals", "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"", "query_toks": ["SELECT", "T2.guest_first_name", ",", "T2.guest_last_name", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Guests", "AS", "T2", "ON", "T1.guest_id", "=", "T2.guest_id", "WHERE", "T1.booking_status_code", "=", "``", "Confirmed", "''"], "query_toks_no_value": ["select", "t2", ".", "guest_first_name", ",", "t2", ".", "guest_last_name", "from", "apartment_bookings", "as", "t1", "join", "guests", "as", "t2", "on", "t1", ".", "guest_id", "=", "t2", ".", "guest_id", "where", "t1", ".", "booking_status_code", "=", "value"], "question": "Show the first names and last names of all the guests that have apartment bookings with status code \"Confirmed\".", "question_toks": ["Show", "the", "first", "names", "and", "last", "names", "of", "all", "the", "guests", "that", "have", "apartment", "bookings", "with", "status", "code", "``", "Confirmed", "''", "."], "dataset_name": "spider", "guid": 2781}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | What is the total likes on tips about \" Cafe Zinho \"", "sql": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\";", "example": {"db_id": "yelp", "query": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\";", "query_toks": ["SELECT", "SUM", "(", "t2.likes", ")", "FROM", "tip", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.name", "=", "``", "Cafe", "Zinho", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "likes", ")", "from", "tip", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "name", "=", "value"], "question": "What is the total likes on tips about \" Cafe Zinho \"", "question_toks": ["What", "is", "the", "total", "likes", "on", "tips", "about", "``", "Cafe", "Zinho", "``"], "dataset_name": "spider", "guid": 2782}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some good restaurants in alameda ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "alameda", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some good restaurants in alameda ?", "question_toks": ["give", "me", "some", "good", "restaurants", "in", "alameda", "?"], "dataset_name": "spider", "guid": 2783}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | How many exhibitions has each artist had?", "sql": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id", "example": {"db_id": "theme_gallery", "query": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "exhibition", "AS", "T1", "JOIN", "artist", "AS", "T2", "ON", "T1.artist_id", "=", "T2.artist_id", "GROUP", "BY", "T1.artist_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "exhibition", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "group", "by", "t1", ".", "artist_id"], "question": "How many exhibitions has each artist had?", "question_toks": ["How", "many", "exhibitions", "has", "each", "artist", "had", "?"], "dataset_name": "spider", "guid": 2784}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?", "sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"", "example": {"db_id": "apartment_rentals", "query": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"", "query_toks": ["SELECT", "T2.apt_type_code", ",", "T2.apt_number", "FROM", "Apartment_Buildings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.building_id", "=", "T2.building_id", "WHERE", "T1.building_manager", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "t2", ".", "apt_type_code", ",", "t2", ".", "apt_number", "from", "apartment_buildings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "building_id", "where", "t1", ".", "building_manager", "=", "value"], "question": "What apartment type codes and apartment numbers do the buildings managed by \"Kyle\" have?", "question_toks": ["What", "apartment", "type", "codes", "and", "apartment", "numbers", "do", "the", "buildings", "managed", "by", "``", "Kyle", "''", "have", "?"], "dataset_name": "spider", "guid": 2785}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "inn_1", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "T2.roomName", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "GROUP", "BY", "T1.Room", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "roomname", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "group", "by", "t1", ".", "room", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.", "question_toks": ["Find", "the", "most", "popular", "room", "in", "the", "hotel", ".", "The", "most", "popular", "room", "is", "the", "room", "that", "had", "seen", "the", "largest", "number", "of", "reservations", "."], "dataset_name": "spider", "guid": 2786}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | list all the businesses which have a review by Niloofar", "sql": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  \"Niloofar\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  \"Niloofar\";", "query_toks": ["SELECT", "t1.name", "FROM", "review", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t3", "ON", "t3.user_id", "=", "t2.user_id", "WHERE", "t3.name", "=", "``", "Niloofar", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "review", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t3", "on", "t3", ".", "user_id", "=", "t2", ".", "user_id", "where", "t3", ".", "name", "=", "value"], "question": "list all the businesses which have a review by Niloofar", "question_toks": ["list", "all", "the", "businesses", "which", "have", "a", "review", "by", "Niloofar"], "dataset_name": "spider", "guid": 2787}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is the best restaurant in bay area for american food ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", ")", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "where is the best restaurant in bay area for american food ?", "question_toks": ["where", "is", "the", "best", "restaurant", "in", "bay", "area", "for", "american", "food", "?"], "dataset_name": "spider", "guid": 2788}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where are some restaurants good for arabic food in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where are some restaurants good for arabic food in mountain view ?", "question_toks": ["where", "are", "some", "restaurants", "good", "for", "arabic", "food", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2789}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all Dallas restaurant with a rating above 4.5", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  4.5 AND t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  4.5 AND t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Dallas", "''", "AND", "t1.rating", ">", "4.5", "AND", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t1", ".", "rating", ">", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "Find all Dallas restaurant with a rating above 4.5", "question_toks": ["Find", "all", "Dallas", "restaurant", "with", "a", "rating", "above", "4.5"], "dataset_name": "spider", "guid": 2790}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the name of rooms whose base price is between 120 and 150.", "sql": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150", "example": {"db_id": "inn_1", "query": "SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150", "query_toks": ["SELECT", "roomname", "FROM", "rooms", "WHERE", "baseprice", "BETWEEN", "120", "AND", "150"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "where", "baseprice", "between", "value", "and", "value"], "question": "Find the name of rooms whose base price is between 120 and 150.", "question_toks": ["Find", "the", "name", "of", "rooms", "whose", "base", "price", "is", "between", "120", "and", "150", "."], "dataset_name": "spider", "guid": 2791}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many Starbucks are there in Dallas Texas ?", "sql": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "business_id", ")", "FROM", "business", "WHERE", "city", "=", "``", "Dallas", "''", "AND", "name", "=", "``", "Starbucks", "''", "AND", "state", "=", "``", "Texas", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "business_id", ")", "from", "business", "where", "city", "=", "value", "and", "name", "=", "value", "and", "state", "=", "value"], "question": "How many Starbucks are there in Dallas Texas ?", "question_toks": ["How", "many", "Starbucks", "are", "there", "in", "Dallas", "Texas", "?"], "dataset_name": "spider", "guid": 2792}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What is the least popular kind of decor?", "sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;", "example": {"db_id": "inn_1", "query": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;", "query_toks": ["SELECT", "T2.decor", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "GROUP", "BY", "T2.decor", "ORDER", "BY", "count", "(", "T2.decor", ")", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "decor", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "group", "by", "t2", ".", "decor", "order", "by", "count", "(", "t2", ".", "decor", ")", "asc", "limit", "value"], "question": "What is the least popular kind of decor?", "question_toks": ["What", "is", "the", "least", "popular", "kind", "of", "decor", "?"], "dataset_name": "spider", "guid": 2793}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | How many visitors below age 30 are there?", "sql": "SELECT count(*) FROM visitor WHERE age  <  30", "example": {"db_id": "museum_visit", "query": "SELECT count(*) FROM visitor WHERE age  <  30", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "visitor", "WHERE", "age", "<", "30"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "visitor", "where", "age", "<", "value"], "question": "How many visitors below age 30 are there?", "question_toks": ["How", "many", "visitors", "below", "age", "30", "are", "there", "?"], "dataset_name": "spider", "guid": 2794}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find the cities of businesses rated below 1.5", "sql": "SELECT city FROM business WHERE rating  <  1.5;", "example": {"db_id": "yelp", "query": "SELECT city FROM business WHERE rating  <  1.5;", "query_toks": ["SELECT", "city", "FROM", "business", "WHERE", "rating", "<", "1.5", ";"], "query_toks_no_value": ["select", "city", "from", "business", "where", "rating", "<", "value"], "question": "Find the cities of businesses rated below 1.5", "question_toks": ["Find", "the", "cities", "of", "businesses", "rated", "below", "1.5"], "dataset_name": "spider", "guid": 2795}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | What is the number of restaurant in Pittsburgh rated 4.5", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Pittsburgh\" AND t1.rating  =  4.5 AND t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Pittsburgh\" AND t1.rating  =  4.5 AND t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Pittsburgh", "''", "AND", "t1.rating", "=", "4.5", "AND", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t1", ".", "rating", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "What is the number of restaurant in Pittsburgh rated 4.5", "question_toks": ["What", "is", "the", "number", "of", "restaurant", "in", "Pittsburgh", "rated", "4.5"], "dataset_name": "spider", "guid": 2796}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What is the name and detail of each staff member?", "sql": "SELECT Name ,  Other_Details FROM Staff", "example": {"db_id": "cre_Theme_park", "query": "SELECT Name ,  Other_Details FROM Staff", "query_toks": ["SELECT", "Name", ",", "Other_Details", "FROM", "Staff"], "query_toks_no_value": ["select", "name", ",", "other_details", "from", "staff"], "question": "What is the name and detail of each staff member?", "question_toks": ["What", "is", "the", "name", "and", "detail", "of", "each", "staff", "member", "?"], "dataset_name": "spider", "guid": 2797}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some restaurants good for french food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some restaurants good for french food ?", "question_toks": ["give", "me", "some", "restaurants", "good", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2798}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what are some good restaurants on bethel island rd in bethel island ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "bethel", "island", "''", "AND", "t2.street_name", "=", "``", "bethel", "island", "rd", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "what are some good restaurants on bethel island rd in bethel island ?", "question_toks": ["what", "are", "some", "good", "restaurants", "on", "bethel", "island", "rd", "in", "bethel", "island", "?"], "dataset_name": "spider", "guid": 2799}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.", "sql": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;", "example": {"db_id": "inn_1", "query": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;", "query_toks": ["SELECT", "roomName", ",", "RoomId", "FROM", "Rooms", "WHERE", "basePrice", ">", "160", "AND", "maxOccupancy", ">", "2", ";"], "query_toks_no_value": ["select", "roomname", ",", "roomid", "from", "rooms", "where", "baseprice", ">", "value", "and", "maxoccupancy", ">", "value"], "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.", "question_toks": ["Find", "all", "the", "rooms", "that", "have", "a", "price", "higher", "than", "160", "and", "can", "accommodate", "more", "than", "2", "people", ".", "Report", "room", "names", "and", "ids", "."], "dataset_name": "spider", "guid": 2800}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | How many roller coasters are there?", "sql": "SELECT count(*) FROM roller_coaster", "example": {"db_id": "roller_coaster", "query": "SELECT count(*) FROM roller_coaster", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "roller_coaster"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "roller_coaster"], "question": "How many roller coasters are there?", "question_toks": ["How", "many", "roller", "coasters", "are", "there", "?"], "dataset_name": "spider", "guid": 2801}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | which neighbourhood has the most number of businesses in Madison", "sql": "SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;", "example": {"db_id": "yelp", "query": "SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.neighbourhood_name", "FROM", "neighbourhood", "AS", "t1", "JOIN", "business", "AS", "t2", "ON", "t1.business_id", "=", "t2.business_id", "WHERE", "t2.city", "=", "``", "Madison", "''", "GROUP", "BY", "t1.neighbourhood_name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t2.name", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "neighbourhood_name", "from", "neighbourhood", "as", "t1", "join", "business", "as", "t2", "on", "t1", ".", "business_id", "=", "t2", ".", "business_id", "where", "t2", ".", "city", "=", "value", "group", "by", "t1", ".", "neighbourhood_name", "order", "by", "count", "(", "distinct", "t2", ".", "name", ")", "desc", "limit", "value"], "question": "which neighbourhood has the most number of businesses in Madison", "question_toks": ["which", "neighbourhood", "has", "the", "most", "number", "of", "businesses", "in", "Madison"], "dataset_name": "spider", "guid": 2802}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good restaurant in the yosemite and mono lake area for french food ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "yosemite", "and", "mono", "lake", "area", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good restaurant in the yosemite and mono lake area for french food ?", "question_toks": ["give", "me", "a", "good", "restaurant", "in", "the", "yosemite", "and", "mono", "lake", "area", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2803}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What is the apartment number of the apartment with the most beds?", "sql": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1", "query_toks": ["SELECT", "apt_number", "FROM", "Apartments", "ORDER", "BY", "bedroom_count", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "apt_number", "from", "apartments", "order", "by", "bedroom_count", "desc", "limit", "value"], "question": "What is the apartment number of the apartment with the most beds?", "question_toks": ["What", "is", "the", "apartment", "number", "of", "the", "apartment", "with", "the", "most", "beds", "?"], "dataset_name": "spider", "guid": 2804}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | which business has the most number of checkins", "sql": "SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY SUM ( t2.count ) DESC LIMIT 1;", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY SUM ( t2.count ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "checkin", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "GROUP", "BY", "t1.name", "ORDER", "BY", "SUM", "(", "t2.count", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "checkin", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "group", "by", "t1", ".", "name", "order", "by", "sum", "(", "t2", ".", "count", ")", "desc", "limit", "value"], "question": "which business has the most number of checkins", "question_toks": ["which", "business", "has", "the", "most", "number", "of", "checkins"], "dataset_name": "spider", "guid": 2805}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | What are the average and maximum number of tickets bought in all visits?", "sql": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "example": {"db_id": "museum_visit", "query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit", "query_toks": ["SELECT", "avg", "(", "num_of_ticket", ")", ",", "max", "(", "num_of_ticket", ")", "FROM", "visit"], "query_toks_no_value": ["select", "avg", "(", "num_of_ticket", ")", ",", "max", "(", "num_of_ticket", ")", "from", "visit"], "question": "What are the average and maximum number of tickets bought in all visits?", "question_toks": ["What", "are", "the", "average", "and", "maximum", "number", "of", "tickets", "bought", "in", "all", "visits", "?"], "dataset_name": "spider", "guid": 2806}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are the booking start and end dates of the apartments with type code \"Duplex\"?", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"", "query_toks": ["SELECT", "T1.booking_start_date", ",", "T1.booking_start_date", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T2.apt_type_code", "=", "``", "Duplex", "''"], "query_toks_no_value": ["select", "t1", ".", "booking_start_date", ",", "t1", ".", "booking_start_date", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t2", ".", "apt_type_code", "=", "value"], "question": "What are the booking start and end dates of the apartments with type code \"Duplex\"?", "question_toks": ["What", "are", "the", "booking", "start", "and", "end", "dates", "of", "the", "apartments", "with", "type", "code", "``", "Duplex", "''", "?"], "dataset_name": "spider", "guid": 2807}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the details and star ratings of the three hotels with the lowest price ranges?", "sql": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3", "example": {"db_id": "cre_Theme_park", "query": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3", "query_toks": ["SELECT", "other_hotel_details", ",", "star_rating_code", "FROM", "HOTELS", "ORDER", "BY", "price_range", "ASC", "LIMIT", "3"], "query_toks_no_value": ["select", "other_hotel_details", ",", "star_rating_code", "from", "hotels", "order", "by", "price_range", "asc", "limit", "value"], "question": "What are the details and star ratings of the three hotels with the lowest price ranges?", "question_toks": ["What", "are", "the", "details", "and", "star", "ratings", "of", "the", "three", "hotels", "with", "the", "lowest", "price", "ranges", "?"], "dataset_name": "spider", "guid": 2808}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What is the average price range of hotels for each each star rating code?", "sql": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code", "example": {"db_id": "cre_Theme_park", "query": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code", "query_toks": ["SELECT", "star_rating_code", ",", "avg", "(", "price_range", ")", "FROM", "HOTELS", "GROUP", "BY", "star_rating_code"], "query_toks_no_value": ["select", "star_rating_code", ",", "avg", "(", "price_range", ")", "from", "hotels", "group", "by", "star_rating_code"], "question": "What is the average price range of hotels for each each star rating code?", "question_toks": ["What", "is", "the", "average", "price", "range", "of", "hotels", "for", "each", "each", "star", "rating", "code", "?"], "dataset_name": "spider", "guid": 2809}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where are some good arabics in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where are some good arabics in mountain view ?", "question_toks": ["where", "are", "some", "good", "arabics", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2810}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show all distinct location names.", "sql": "SELECT DISTINCT Location_Name FROM LOCATIONS", "example": {"db_id": "cre_Theme_park", "query": "SELECT DISTINCT Location_Name FROM LOCATIONS", "query_toks": ["SELECT", "DISTINCT", "Location_Name", "FROM", "LOCATIONS"], "query_toks_no_value": ["select", "distinct", "location_name", "from", "locations"], "question": "Show all distinct location names.", "question_toks": ["Show", "all", "distinct", "location", "names", "."], "dataset_name": "spider", "guid": 2811}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is jamerican cuisine ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  \"jamerican cuisine\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  \"jamerican cuisine\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t1.name", "=", "``", "jamerican", "cuisine", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t1", ".", "name", "=", "value"], "question": "where is jamerican cuisine ?", "question_toks": ["where", "is", "jamerican", "cuisine", "?"], "dataset_name": "spider", "guid": 2812}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.", "sql": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";", "example": {"db_id": "inn_1", "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";", "query_toks": ["SELECT", "Kids", "FROM", "Reservations", "WHERE", "CheckIn", "=", "``", "2010-09-21", "''", "AND", "FirstName", "=", "``", "DAMIEN", "''", "AND", "LastName", "=", "``", "TRACHSEL", "''", ";"], "query_toks_no_value": ["select", "kids", "from", "reservations", "where", "checkin", "=", "value", "and", "firstname", "=", "value", "and", "lastname", "=", "value"], "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.", "question_toks": ["Return", "the", "number", "of", "kids", "for", "the", "room", "reserved", "and", "checked", "in", "by", "DAMIEN", "TRACHSEL", "on", "Sep", "21", ",", "2010", "."], "dataset_name": "spider", "guid": 2813}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.", "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "query_toks": ["SELECT", "T1.building_address", "FROM", "Apartment_Buildings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.building_id", "=", "T2.building_id", "WHERE", "T2.bathroom_count", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "building_address", "from", "apartment_buildings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "building_id", "where", "t2", ".", "bathroom_count", ">", "value"], "question": "Which buildings have apartments that have more than two bathrooms? Give me the addresses of the buildings.", "question_toks": ["Which", "buildings", "have", "apartments", "that", "have", "more", "than", "two", "bathrooms", "?", "Give", "me", "the", "addresses", "of", "the", "buildings", "."], "dataset_name": "spider", "guid": 2814}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some restaurants good for arabic food in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some restaurants good for arabic food in mountain view ?", "question_toks": ["give", "me", "some", "restaurants", "good", "for", "arabic", "food", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2815}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | What is the number of escape games in \" Madison \" ?", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Madison", "''", "AND", "t2.category_name", "=", "``", "escape", "games", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "What is the number of escape games in \" Madison \" ?", "question_toks": ["What", "is", "the", "number", "of", "escape", "games", "in", "``", "Madison", "``", "?"], "dataset_name": "spider", "guid": 2816}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "sql": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "example": {"db_id": "museum_visit", "query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011", "query_toks": ["SELECT", "t1.name", "FROM", "visitor", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.id", "=", "t2.visitor_id", "JOIN", "museum", "AS", "t3", "ON", "t3.Museum_ID", "=", "t2.Museum_ID", "WHERE", "t3.open_year", "<", "2009", "INTERSECT", "SELECT", "t1.name", "FROM", "visitor", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.id", "=", "t2.visitor_id", "JOIN", "museum", "AS", "t3", "ON", "t3.Museum_ID", "=", "t2.Museum_ID", "WHERE", "t3.open_year", ">", "2011"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "visitor_id", "join", "museum", "as", "t3", "on", "t3", ".", "museum_id", "=", "t2", ".", "museum_id", "where", "t3", ".", "open_year", "<", "value", "intersect", "select", "t1", ".", "name", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "visitor_id", "join", "museum", "as", "t3", "on", "t3", ".", "museum_id", "=", "t2", ".", "museum_id", "where", "t3", ".", "open_year", ">", "value"], "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "question_toks": ["What", "is", "the", "name", "of", "the", "visitor", "who", "visited", "both", "a", "museum", "opened", "before", "2009", "and", "a", "museum", "opened", "after", "2011", "?"], "dataset_name": "spider", "guid": 2817}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | How many members have the black membership card?", "sql": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'", "example": {"db_id": "coffee_shop", "query": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "member", "WHERE", "Membership_card", "=", "'Black", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "member", "where", "membership_card", "=", "value"], "question": "How many members have the black membership card?", "question_toks": ["How", "many", "members", "have", "the", "black", "membership", "card", "?"], "dataset_name": "spider", "guid": 2818}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all restaurant that serve Seafood in \" Los Angeles \"", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Los", "Angeles", "''", "AND", "t2.category_name", "=", "``", "Seafood", "''", "AND", "t3.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value"], "question": "Find all restaurant that serve Seafood in \" Los Angeles \"", "question_toks": ["Find", "all", "restaurant", "that", "serve", "Seafood", "in", "``", "Los", "Angeles", "``"], "dataset_name": "spider", "guid": 2819}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all Bars reviewed by Patrick with at least 3 stars", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t4", "ON", "t4.user_id", "=", "t3.user_id", "WHERE", "t1.rating", ">", "=", "3", "AND", "t2.category_name", "=", "``", "Bars", "''", "AND", "t4.name", "=", "``", "Patrick", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t4", "on", "t4", ".", "user_id", "=", "t3", ".", "user_id", "where", "t1", ".", "rating", ">", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t4", ".", "name", "=", "value"], "question": "Find all Bars reviewed by Patrick with at least 3 stars", "question_toks": ["Find", "all", "Bars", "reviewed", "by", "Patrick", "with", "at", "least", "3", "stars"], "dataset_name": "spider", "guid": 2820}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where are some good arabics on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where are some good arabics on buchanan in san francisco ?", "question_toks": ["where", "are", "some", "good", "arabics", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2821}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What are the names and year of joining for artists that do not have the country \"United States\"?", "sql": "SELECT name ,  year_join FROM artist WHERE country != 'United States'", "example": {"db_id": "theme_gallery", "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'", "query_toks": ["SELECT", "name", ",", "year_join", "FROM", "artist", "WHERE", "country", "!", "=", "'United", "States", "'"], "query_toks_no_value": ["select", "name", ",", "year_join", "from", "artist", "where", "country", "!", "=", "value"], "question": "What are the names and year of joining for artists that do not have the country \"United States\"?", "question_toks": ["What", "are", "the", "names", "and", "year", "of", "joining", "for", "artists", "that", "do", "not", "have", "the", "country", "``", "United", "States", "''", "?"], "dataset_name": "spider", "guid": 2822}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the average prices of hotels grouped by their pet policy.", "sql": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn", "example": {"db_id": "cre_Theme_park", "query": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn", "query_toks": ["SELECT", "pets_allowed_yn", ",", "avg", "(", "price_range", ")", "FROM", "HOTELS", "GROUP", "BY", "pets_allowed_yn"], "query_toks_no_value": ["select", "pets_allowed_yn", ",", "avg", "(", "price_range", ")", "from", "hotels", "group", "by", "pets_allowed_yn"], "question": "What are the average prices of hotels grouped by their pet policy.", "question_toks": ["What", "are", "the", "average", "prices", "of", "hotels", "grouped", "by", "their", "pet", "policy", "."], "dataset_name": "spider", "guid": 2823}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What are the names of artists that have not had any exhibitions?", "sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)", "example": {"db_id": "theme_gallery", "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)", "query_toks": ["SELECT", "name", "FROM", "artist", "WHERE", "artist_id", "NOT", "IN", "(", "SELECT", "artist_id", "FROM", "exhibition", ")"], "query_toks_no_value": ["select", "name", "from", "artist", "where", "artist_id", "not", "in", "(", "select", "artist_id", "from", "exhibition", ")"], "question": "What are the names of artists that have not had any exhibitions?", "question_toks": ["What", "are", "the", "names", "of", "artists", "that", "have", "not", "had", "any", "exhibitions", "?"], "dataset_name": "spider", "guid": 2824}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | List the type of bed and name of all traditional rooms.", "sql": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";", "example": {"db_id": "inn_1", "query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";", "query_toks": ["SELECT", "roomName", ",", "bedType", "FROM", "Rooms", "WHERE", "decor", "=", "``", "traditional", "''", ";"], "query_toks_no_value": ["select", "roomname", ",", "bedtype", "from", "rooms", "where", "decor", "=", "value"], "question": "List the type of bed and name of all traditional rooms.", "question_toks": ["List", "the", "type", "of", "bed", "and", "name", "of", "all", "traditional", "rooms", "."], "dataset_name": "spider", "guid": 2825}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the names and details of all the staff members.", "sql": "SELECT Name ,  Other_Details FROM Staff", "example": {"db_id": "cre_Theme_park", "query": "SELECT Name ,  Other_Details FROM Staff", "query_toks": ["SELECT", "Name", ",", "Other_Details", "FROM", "Staff"], "query_toks_no_value": ["select", "name", ",", "other_details", "from", "staff"], "question": "Show the names and details of all the staff members.", "question_toks": ["Show", "the", "names", "and", "details", "of", "all", "the", "staff", "members", "."], "dataset_name": "spider", "guid": 2826}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What are the room name and base price of the room with the lowest base price?", "sql": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;", "example": {"db_id": "inn_1", "query": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;", "query_toks": ["SELECT", "roomName", ",", "basePrice", "FROM", "Rooms", "ORDER", "BY", "basePrice", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "roomname", ",", "baseprice", "from", "rooms", "order", "by", "baseprice", "asc", "limit", "value"], "question": "What are the room name and base price of the room with the lowest base price?", "question_toks": ["What", "are", "the", "room", "name", "and", "base", "price", "of", "the", "room", "with", "the", "lowest", "base", "price", "?"], "dataset_name": "spider", "guid": 2827}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Which tourist attractions can we get to by bus? Tell me the names of the attractions.", "sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"", "query_toks": ["SELECT", "Name", "FROM", "TOURIST_ATTRACTIONS", "WHERE", "How_to_Get_There", "=", "``", "bus", "''"], "query_toks_no_value": ["select", "name", "from", "tourist_attractions", "where", "how_to_get_there", "=", "value"], "question": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.", "question_toks": ["Which", "tourist", "attractions", "can", "we", "get", "to", "by", "bus", "?", "Tell", "me", "the", "names", "of", "the", "attractions", "."], "dataset_name": "spider", "guid": 2828}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | What is the average speed of roller coasters?", "sql": "SELECT avg(Speed) FROM roller_coaster", "example": {"db_id": "roller_coaster", "query": "SELECT avg(Speed) FROM roller_coaster", "query_toks": ["SELECT", "avg", "(", "Speed", ")", "FROM", "roller_coaster"], "query_toks_no_value": ["select", "avg", "(", "speed", ")", "from", "roller_coaster"], "question": "What is the average speed of roller coasters?", "question_toks": ["What", "is", "the", "average", "speed", "of", "roller", "coasters", "?"], "dataset_name": "spider", "guid": 2829}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | Give me the best place in san francisco for french food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "Give me the best place in san francisco for french food ?", "question_toks": ["Give", "me", "the", "best", "place", "in", "san", "francisco", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2830}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | Find the number of visitors who did not visit any museum opened after 2010.", "sql": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "example": {"db_id": "museum_visit", "query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "visitor", "WHERE", "id", "NOT", "IN", "(", "SELECT", "t2.visitor_id", "FROM", "museum", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.Museum_ID", "=", "t2.Museum_ID", "WHERE", "t1.open_year", ">", "2010", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "visitor", "where", "id", "not", "in", "(", "select", "t2", ".", "visitor_id", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "museum_id", "=", "t2", ".", "museum_id", "where", "t1", ".", "open_year", ">", "value", ")"], "question": "Find the number of visitors who did not visit any museum opened after 2010.", "question_toks": ["Find", "the", "number", "of", "visitors", "who", "did", "not", "visit", "any", "museum", "opened", "after", "2010", "."], "dataset_name": "spider", "guid": 2831}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Return me the number of cities that has \" Panda Express \" .", "sql": "SELECT COUNT ( DISTINCT city ) FROM business WHERE name  =  \"Panda Express\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT city ) FROM business WHERE name  =  \"Panda Express\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "city", ")", "FROM", "business", "WHERE", "name", "=", "``", "Panda", "Express", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "business", "where", "name", "=", "value"], "question": "Return me the number of cities that has \" Panda Express \" .", "question_toks": ["Return", "me", "the", "number", "of", "cities", "that", "has", "``", "Panda", "Express", "``", "."], "dataset_name": "spider", "guid": 2832}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?", "sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"", "query_toks": ["SELECT", "T1.Name", ",", "T1.Description", "FROM", "PHOTOS", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "WHERE", "T2.Name", "=", "``", "film", "festival", "''"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "description", "from", "photos", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "where", "t2", ".", "name", "=", "value"], "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?", "question_toks": ["What", "are", "the", "names", "and", "descriptions", "of", "the", "photos", "taken", "at", "the", "tourist", "attraction", "``", "film", "festival", "''", "?"], "dataset_name": "spider", "guid": 2833}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a restaurant on buchanan in san francisco that serves good arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a restaurant on buchanan in san francisco that serves good arabic food ?", "question_toks": ["give", "me", "a", "restaurant", "on", "buchanan", "in", "san", "francisco", "that", "serves", "good", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2834}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many reviews does \" Acacia Cafe \" have ?", "sql": "SELECT review_count FROM business WHERE name  =  \"Acacia Cafe\";", "example": {"db_id": "yelp", "query": "SELECT review_count FROM business WHERE name  =  \"Acacia Cafe\";", "query_toks": ["SELECT", "review_count", "FROM", "business", "WHERE", "name", "=", "``", "Acacia", "Cafe", "''", ";"], "query_toks_no_value": ["select", "review_count", "from", "business", "where", "name", "=", "value"], "question": "How many reviews does \" Acacia Cafe \" have ?", "question_toks": ["How", "many", "reviews", "does", "``", "Acacia", "Cafe", "``", "have", "?"], "dataset_name": "spider", "guid": 2835}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some good places on buchanan in san francisco for arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some good places on buchanan in san francisco for arabic food ?", "question_toks": ["give", "me", "some", "good", "places", "on", "buchanan", "in", "san", "francisco", "for", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2836}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Which apartment type code is the most common among apartments with more than one bathroom?", "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "apt_type_code", "FROM", "Apartments", "WHERE", "bathroom_count", ">", "1", "GROUP", "BY", "apt_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "apt_type_code", "from", "apartments", "where", "bathroom_count", ">", "value", "group", "by", "apt_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which apartment type code is the most common among apartments with more than one bathroom?", "question_toks": ["Which", "apartment", "type", "code", "is", "the", "most", "common", "among", "apartments", "with", "more", "than", "one", "bathroom", "?"], "dataset_name": "spider", "guid": 2837}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good restaurant on buchanan in san francisco for arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good restaurant on buchanan in san francisco for arabic food ?", "question_toks": ["give", "me", "a", "good", "restaurant", "on", "buchanan", "in", "san", "francisco", "for", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2838}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find the id and star rating of each hotel and sort them in increasing order of price.", "sql": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC", "example": {"db_id": "cre_Theme_park", "query": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC", "query_toks": ["SELECT", "hotel_id", ",", "star_rating_code", "FROM", "HOTELS", "ORDER", "BY", "price_range", "ASC"], "query_toks_no_value": ["select", "hotel_id", ",", "star_rating_code", "from", "hotels", "order", "by", "price_range", "asc"], "question": "Find the id and star rating of each hotel and sort them in increasing order of price.", "question_toks": ["Find", "the", "id", "and", "star", "rating", "of", "each", "hotel", "and", "sort", "them", "in", "increasing", "order", "of", "price", "."], "dataset_name": "spider", "guid": 2839}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can we find some restaurants in the bay area ?", "sql": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "LOCATION", "AS", "t2", "JOIN", "restaurant", "AS", "t1", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t1.city_name", "IN", "(", "SELECT", "city_name", "FROM", "geographic", "WHERE", "region", "=", "``", "bay", "area", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "location", "as", "t2", "join", "restaurant", "as", "t1", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t1", ".", "city_name", "in", "(", "select", "city_name", "from", "geographic", "where", "region", "=", "value", ")"], "question": "where can we find some restaurants in the bay area ?", "question_toks": ["where", "can", "we", "find", "some", "restaurants", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2840}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | find all the restaurant in Pennsylvania", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.state", "=", "``", "Pennsylvania", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "state", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "find all the restaurant in Pennsylvania", "question_toks": ["find", "all", "the", "restaurant", "in", "Pennsylvania"], "dataset_name": "spider", "guid": 2841}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.", "sql": "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;", "example": {"db_id": "restaurant_1", "query": "SELECT Restaurant.ResName ,  sum(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY sum(Visits_Restaurant.Spent) ASC LIMIT 1;", "query_toks": ["SELECT", "Restaurant.ResName", ",", "sum", "(", "Visits_Restaurant.Spent", ")", "FROM", "Visits_Restaurant", "JOIN", "Restaurant", "ON", "Visits_Restaurant.ResID", "=", "Restaurant.ResID", "GROUP", "BY", "Restaurant.ResID", "ORDER", "BY", "sum", "(", "Visits_Restaurant.Spent", ")", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "restaurant.resname", ",", "sum", "(", "visits_restaurant.spent", ")", "from", "visits_restaurant", "join", "restaurant", "on", "visits_restaurant.resid", "=", "restaurant.resid", "group", "by", "restaurant.resid", "order", "by", "sum", "(", "visits_restaurant.spent", ")", "asc", "limit", "value"], "question": "At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.", "question_toks": ["At", "which", "restaurant", "did", "the", "students", "spend", "the", "least", "amount", "of", "time", "?", "List", "restaurant", "and", "the", "time", "students", "spent", "on", "in", "total", "."], "dataset_name": "spider", "guid": 2842}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what is the best american in the bay area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", ")", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "what is the best american in the bay area ?", "question_toks": ["what", "is", "the", "best", "american", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2843}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What is the name of the tourist attraction that is associated with the photo \"game1\"?", "sql": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"", "query_toks": ["SELECT", "T2.Name", "FROM", "PHOTOS", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "WHERE", "T1.Name", "=", "``", "game1", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "photos", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "where", "t1", ".", "name", "=", "value"], "question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?", "question_toks": ["What", "is", "the", "name", "of", "the", "tourist", "attraction", "that", "is", "associated", "with", "the", "photo", "``", "game1", "''", "?"], "dataset_name": "spider", "guid": 2844}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all restaurant Seafood in Los Angeles", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Los", "Angeles", "''", "AND", "t2.category_name", "=", "``", "Seafood", "''", "AND", "t3.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value"], "question": "Find all restaurant Seafood in Los Angeles", "question_toks": ["Find", "all", "restaurant", "Seafood", "in", "Los", "Angeles"], "dataset_name": "spider", "guid": 2845}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where are some restaurants good for french food in the yosemite and mono lake area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "yosemite", "and", "mono", "lake", "area", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where are some restaurants good for french food in the yosemite and mono lake area ?", "question_toks": ["where", "are", "some", "restaurants", "good", "for", "french", "food", "in", "the", "yosemite", "and", "mono", "lake", "area", "?"], "dataset_name": "spider", "guid": 2846}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | What neighbourhood is restaurant \" Flat Top Grill \" in ?", "sql": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  \"Flat Top Grill\" AND t3.category_name  =  \"category_category_name0\";", "example": {"db_id": "yelp", "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  \"Flat Top Grill\" AND t3.category_name  =  \"category_category_name0\";", "query_toks": ["SELECT", "t1.neighbourhood_name", "FROM", "category", "AS", "t3", "JOIN", "business", "AS", "t2", "ON", "t3.business_id", "=", "t2.business_id", "JOIN", "neighbourhood", "AS", "t1", "ON", "t1.business_id", "=", "t2.business_id", "WHERE", "t2.name", "=", "``", "Flat", "Top", "Grill", "''", "AND", "t3.category_name", "=", "``", "category_category_name0", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "neighbourhood_name", "from", "category", "as", "t3", "join", "business", "as", "t2", "on", "t3", ".", "business_id", "=", "t2", ".", "business_id", "join", "neighbourhood", "as", "t1", "on", "t1", ".", "business_id", "=", "t2", ".", "business_id", "where", "t2", ".", "name", "=", "value", "and", "t3", ".", "category_name", "=", "value"], "question": "What neighbourhood is restaurant \" Flat Top Grill \" in ?", "question_toks": ["What", "neighbourhood", "is", "restaurant", "``", "Flat", "Top", "Grill", "``", "in", "?"], "dataset_name": "spider", "guid": 2847}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some good restaurants on buchanan in san francisco for arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some good restaurants on buchanan in san francisco for arabic food ?", "question_toks": ["give", "me", "some", "good", "restaurants", "on", "buchanan", "in", "san", "francisco", "for", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2848}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Show the theme for exhibitions with both records of an attendance below 100 and above 500.", "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500", "example": {"db_id": "theme_gallery", "query": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500", "query_toks": ["SELECT", "T2.theme", "FROM", "exhibition_record", "AS", "T1", "JOIN", "exhibition", "AS", "T2", "ON", "T1.exhibition_id", "=", "T2.exhibition_id", "WHERE", "T1.attendance", "<", "100", "INTERSECT", "SELECT", "T2.theme", "FROM", "exhibition_record", "AS", "T1", "JOIN", "exhibition", "AS", "T2", "ON", "T1.exhibition_id", "=", "T2.exhibition_id", "WHERE", "T1.attendance", ">", "500"], "query_toks_no_value": ["select", "t2", ".", "theme", "from", "exhibition_record", "as", "t1", "join", "exhibition", "as", "t2", "on", "t1", ".", "exhibition_id", "=", "t2", ".", "exhibition_id", "where", "t1", ".", "attendance", "<", "value", "intersect", "select", "t2", ".", "theme", "from", "exhibition_record", "as", "t1", "join", "exhibition", "as", "t2", "on", "t1", ".", "exhibition_id", "=", "t2", ".", "exhibition_id", "where", "t1", ".", "attendance", ">", "value"], "question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.", "question_toks": ["Show", "the", "theme", "for", "exhibitions", "with", "both", "records", "of", "an", "attendance", "below", "100", "and", "above", "500", "."], "dataset_name": "spider", "guid": 2849}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Give me all the Moroccan restaurant in Texas", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "WHERE", "t1.state", "=", "``", "Texas", "''", "AND", "t2.category_name", "=", "``", "Moroccan", "''", "AND", "t3.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "state", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value"], "question": "Give me all the Moroccan restaurant in Texas", "question_toks": ["Give", "me", "all", "the", "Moroccan", "restaurant", "in", "Texas"], "dataset_name": "spider", "guid": 2850}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | How many tourists did not make any visit?", "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )", "example": {"db_id": "cre_Theme_park", "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Visitors", "WHERE", "Tourist_ID", "NOT", "IN", "(", "SELECT", "Tourist_ID", "FROM", "Visits", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "visitors", "where", "tourist_id", "not", "in", "(", "select", "tourist_id", "from", "visits", ")"], "question": "How many tourists did not make any visit?", "question_toks": ["How", "many", "tourists", "did", "not", "make", "any", "visit", "?"], "dataset_name": "spider", "guid": 2851}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | Show the names of countries and the average speed of roller coasters from each country.", "sql": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name", "example": {"db_id": "roller_coaster", "query": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name", "query_toks": ["SELECT", "T1.Name", ",", "avg", "(", "T2.Speed", ")", "FROM", "country", "AS", "T1", "JOIN", "roller_coaster", "AS", "T2", "ON", "T1.Country_ID", "=", "T2.Country_ID", "GROUP", "BY", "T1.Name"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "avg", "(", "t2", ".", "speed", ")", "from", "country", "as", "t1", "join", "roller_coaster", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "group", "by", "t1", ".", "name"], "question": "Show the names of countries and the average speed of roller coasters from each country.", "question_toks": ["Show", "the", "names", "of", "countries", "and", "the", "average", "speed", "of", "roller", "coasters", "from", "each", "country", "."], "dataset_name": "spider", "guid": 2852}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me the best restaurant in the bay area for american food ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", ")", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "give me the best restaurant in the bay area for american food ?", "question_toks": ["give", "me", "the", "best", "restaurant", "in", "the", "bay", "area", "for", "american", "food", "?"], "dataset_name": "spider", "guid": 2853}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can i eat french food in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"french\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"french\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "french", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value"], "question": "where can i eat french food in mountain view ?", "question_toks": ["where", "can", "i", "eat", "french", "food", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2854}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | how many users reviewed \" Sushi Too \" in Pittsburgh", "sql": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Pittsburgh\" AND t1.name  =  \"Sushi Too\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Pittsburgh\" AND t1.name  =  \"Sushi Too\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.name", ")", "FROM", "review", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t3", "ON", "t3.user_id", "=", "t2.user_id", "WHERE", "t1.city", "=", "``", "Pittsburgh", "''", "AND", "t1.name", "=", "``", "Sushi", "Too", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "name", ")", "from", "review", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t3", "on", "t3", ".", "user_id", "=", "t2", ".", "user_id", "where", "t1", ".", "city", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "how many users reviewed \" Sushi Too \" in Pittsburgh", "question_toks": ["how", "many", "users", "reviewed", "``", "Sushi", "Too", "``", "in", "Pittsburgh"], "dataset_name": "spider", "guid": 2855}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the total number of king beds available.", "sql": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';", "example": {"db_id": "inn_1", "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';", "query_toks": ["SELECT", "sum", "(", "beds", ")", "FROM", "Rooms", "WHERE", "bedtype", "=", "'King", "'", ";"], "query_toks_no_value": ["select", "sum", "(", "beds", ")", "from", "rooms", "where", "bedtype", "=", "value"], "question": "Find the total number of king beds available.", "question_toks": ["Find", "the", "total", "number", "of", "king", "beds", "available", "."], "dataset_name": "spider", "guid": 2856}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a restaurant in alameda ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "alameda", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value"], "question": "give me a restaurant in alameda ?", "question_toks": ["give", "me", "a", "restaurant", "in", "alameda", "?"], "dataset_name": "spider", "guid": 2857}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find users whose average review rating is below 3", "sql": "SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id GROUP BY t2.name HAVING AVG ( t1.rating )  <  3;", "example": {"db_id": "yelp", "query": "SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id GROUP BY t2.name HAVING AVG ( t1.rating )  <  3;", "query_toks": ["SELECT", "t2.name", "FROM", "USER", "AS", "t2", "JOIN", "review", "AS", "t1", "ON", "t2.user_id", "=", "t1.user_id", "GROUP", "BY", "t2.name", "HAVING", "AVG", "(", "t1.rating", ")", "<", "3", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "user", "as", "t2", "join", "review", "as", "t1", "on", "t2", ".", "user_id", "=", "t1", ".", "user_id", "group", "by", "t2", ".", "name", "having", "avg", "(", "t1", ".", "rating", ")", "<", "value"], "question": "Find users whose average review rating is below 3", "question_toks": ["Find", "users", "whose", "average", "review", "rating", "is", "below", "3"], "dataset_name": "spider", "guid": 2858}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can i find a jamerican cuisine in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.name", "=", "``", "jamerican", "cuisine", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "where can i find a jamerican cuisine in san francisco ?", "question_toks": ["where", "can", "i", "find", "a", "jamerican", "cuisine", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2859}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Which room has the highest rate? List the room's full name, rate, check in and check out date.", "sql": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;", "example": {"db_id": "inn_1", "query": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;", "query_toks": ["SELECT", "T2.roomName", ",", "T1.Rate", ",", "T1.CheckIn", ",", "T1.CheckOut", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "GROUP", "BY", "T1.Room", "ORDER", "BY", "T1.Rate", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "roomname", ",", "t1", ".", "rate", ",", "t1", ".", "checkin", ",", "t1", ".", "checkout", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "group", "by", "t1", ".", "room", "order", "by", "t1", ".", "rate", "desc", "limit", "value"], "question": "Which room has the highest rate? List the room's full name, rate, check in and check out date.", "question_toks": ["Which", "room", "has", "the", "highest", "rate", "?", "List", "the", "room", "'s", "full", "name", ",", "rate", ",", "check", "in", "and", "check", "out", "date", "."], "dataset_name": "spider", "guid": 2860}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many people reviewed restaurant \" Vintner Grill \" in 2010 ?", "sql": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Vintner Grill\" AND t2.category_name  =  \"category_category_name0\" AND t3.year  =  2010;", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Vintner Grill\" AND t2.category_name  =  \"category_category_name0\" AND t3.year  =  2010;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t4", "ON", "t4.user_id", "=", "t3.user_id", "WHERE", "t1.name", "=", "``", "Vintner", "Grill", "''", "AND", "t2.category_name", "=", "``", "category_category_name0", "''", "AND", "t3.year", "=", "2010", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t4", "on", "t4", ".", "user_id", "=", "t3", ".", "user_id", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "How many people reviewed restaurant \" Vintner Grill \" in 2010 ?", "question_toks": ["How", "many", "people", "reviewed", "restaurant", "``", "Vintner", "Grill", "``", "in", "2010", "?"], "dataset_name": "spider", "guid": 2861}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me the best american restaurant in the bay area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", ")", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "give me the best american restaurant in the bay area ?", "question_toks": ["give", "me", "the", "best", "american", "restaurant", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2862}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | How many exhibition are there in year 2005 or after?", "sql": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005", "example": {"db_id": "theme_gallery", "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "exhibition", "WHERE", "YEAR", ">", "=", "2005"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "exhibition", "where", "year", ">", "=", "value"], "question": "How many exhibition are there in year 2005 or after?", "question_toks": ["How", "many", "exhibition", "are", "there", "in", "year", "2005", "or", "after", "?"], "dataset_name": "spider", "guid": 2863}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What are the names of the channels owned by CCTV or HBS?", "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "example": {"db_id": "program_share", "query": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "query_toks": ["SELECT", "name", "FROM", "channel", "WHERE", "OWNER", "=", "'CCTV", "'", "OR", "OWNER", "=", "'HBS", "'"], "query_toks_no_value": ["select", "name", "from", "channel", "where", "owner", "=", "value", "or", "owner", "=", "value"], "question": "What are the names of the channels owned by CCTV or HBS?", "question_toks": ["What", "are", "the", "names", "of", "the", "channels", "owned", "by", "CCTV", "or", "HBS", "?"], "dataset_name": "spider", "guid": 3155}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | which countries' tv channels are playing some cartoon written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "example": {"db_id": "tvshow", "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "question_toks": ["which", "countries", "'", "tv", "channels", "are", "playing", "some", "cartoon", "written", "by", "Todd", "Casey", "?"], "dataset_name": "spider", "guid": 3156}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many female actors were born in \" New York City \" after 1980 ?", "sql": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "name", ")", "FROM", "actor", "WHERE", "birth_city", "=", "``", "New", "York", "City", "''", "AND", "birth_year", ">", "1980", "AND", "gender", "=", "``", "female", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", ">", "value", "and", "gender", "=", "value"], "question": "How many female actors were born in \" New York City \" after 1980 ?", "question_toks": ["How", "many", "female", "actors", "were", "born", "in", "``", "New", "York", "City", "``", "after", "1980", "?"], "dataset_name": "spider", "guid": 3157}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List all countries of markets in ascending alphabetical order.", "sql": "SELECT Country FROM market ORDER BY Country ASC", "example": {"db_id": "film_rank", "query": "SELECT Country FROM market ORDER BY Country ASC", "query_toks": ["SELECT", "Country", "FROM", "market", "ORDER", "BY", "Country", "ASC"], "query_toks_no_value": ["select", "country", "from", "market", "order", "by", "country", "asc"], "question": "List all countries of markets in ascending alphabetical order.", "question_toks": ["List", "all", "countries", "of", "markets", "in", "ascending", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 3158}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the name and directors of all the cartoons that are ordered by air date?", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "example": {"db_id": "tvshow", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "query_toks": ["SELECT", "title", ",", "Directed_by", "FROM", "Cartoon", "ORDER", "BY", "Original_air_date"], "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date"], "question": "What is the name and directors of all the cartoons that are ordered by air date?", "question_toks": ["What", "is", "the", "name", "and", "directors", "of", "all", "the", "cartoons", "that", "are", "ordered", "by", "air", "date", "?"], "dataset_name": "spider", "guid": 3159}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the total number of ratings that has more than 3 stars?", "sql": "SELECT count(*) FROM Rating WHERE stars  >  3", "example": {"db_id": "movie_1", "query": "SELECT count(*) FROM Rating WHERE stars  >  3", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Rating", "WHERE", "stars", ">", "3"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "rating", "where", "stars", ">", "value"], "question": "What is the total number of ratings that has more than 3 stars?", "question_toks": ["What", "is", "the", "total", "number", "of", "ratings", "that", "has", "more", "than", "3", "stars", "?"], "dataset_name": "spider", "guid": 3160}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the produdction code and channel of the most recent cartoon ?", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "example": {"db_id": "tvshow", "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "query_toks": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1"], "query_toks_no_value": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "value"], "question": "What is the produdction code and channel of the most recent cartoon ?", "question_toks": ["What", "is", "the", "produdction", "code", "and", "channel", "of", "the", "most", "recent", "cartoon", "?"], "dataset_name": "spider", "guid": 3161}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?", "sql": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "example": {"db_id": "movie_1", "query": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "query_toks": ["SELECT", "T1.director", ",", "T1.title", "FROM", "Movie", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.stars", "=", "5"], "query_toks_no_value": ["select", "t1", ".", "director", ",", "t1", ".", "title", "from", "movie", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "stars", "=", "value"], "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?", "question_toks": ["What", "are", "the", "names", "of", "the", "directors", "who", "created", "a", "movie", "with", "a", "5", "star", "rating", ",", "and", "what", "was", "the", "name", "of", "those", "movies", "?"], "dataset_name": "spider", "guid": 3162}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the latest movie which \" Gabriele Ferzetti \" acted in", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t1.name", "=", "``", "Gabriele", "Ferzetti", "''", "ORDER", "BY", "t3.release_year", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t1", ".", "name", "=", "value", "order", "by", "t3", ".", "release_year", "desc", "limit", "value"], "question": "Find the latest movie which \" Gabriele Ferzetti \" acted in", "question_toks": ["Find", "the", "latest", "movie", "which", "``", "Gabriele", "Ferzetti", "``", "acted", "in"], "dataset_name": "spider", "guid": 3163}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the average rating stars and title for the oldest movie?", "sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "example": {"db_id": "movie_1", "query": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "query_toks": ["SELECT", "avg", "(", "T1.stars", ")", ",", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.year", "=", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "Movie", ")"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "stars", ")", ",", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "year", "=", "(", "select", "min", "(", "year", ")", "from", "movie", ")"], "question": "What is the average rating stars and title for the oldest movie?", "question_toks": ["What", "is", "the", "average", "rating", "stars", "and", "title", "for", "the", "oldest", "movie", "?"], "dataset_name": "spider", "guid": 3164}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the countries that are not playing cartoons written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "example": {"db_id": "tvshow", "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "country", "FROM", "TV_Channel", "EXCEPT", "SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "country", "from", "tv_channel", "except", "select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "What are the countries that are not playing cartoons written by Todd Casey?", "question_toks": ["What", "are", "the", "countries", "that", "are", "not", "playing", "cartoons", "written", "by", "Todd", "Casey", "?"], "dataset_name": "spider", "guid": 3165}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the producers of all movies in which \" Kate Winslet \" is an actor", "sql": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid  =  t2.aid JOIN movie AS t5 ON t5.mid  =  t3.msid JOIN made_by AS t4 ON t5.mid  =  t4.msid JOIN producer AS t1 ON t1.pid  =  t4.pid WHERE t2.name  =  \"Kate Winslet\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid  =  t2.aid JOIN movie AS t5 ON t5.mid  =  t3.msid JOIN made_by AS t4 ON t5.mid  =  t4.msid JOIN producer AS t1 ON t1.pid  =  t4.pid WHERE t2.name  =  \"Kate Winslet\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "JOIN", "movie", "AS", "t5", "ON", "t5.mid", "=", "t3.msid", "JOIN", "made_by", "AS", "t4", "ON", "t5.mid", "=", "t4.msid", "JOIN", "producer", "AS", "t1", "ON", "t1.pid", "=", "t4.pid", "WHERE", "t2.name", "=", "``", "Kate", "Winslet", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t3", "join", "actor", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "join", "movie", "as", "t5", "on", "t5", ".", "mid", "=", "t3", ".", "msid", "join", "made_by", "as", "t4", "on", "t5", ".", "mid", "=", "t4", ".", "msid", "join", "producer", "as", "t1", "on", "t1", ".", "pid", "=", "t4", ".", "pid", "where", "t2", ".", "name", "=", "value"], "question": "Find the producers of all movies in which \" Kate Winslet \" is an actor", "question_toks": ["Find", "the", "producers", "of", "all", "movies", "in", "which", "``", "Kate", "Winslet", "``", "is", "an", "actor"], "dataset_name": "spider", "guid": 3166}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show all directors.", "sql": "SELECT DISTINCT directed_by FROM film", "example": {"db_id": "cinema", "query": "SELECT DISTINCT directed_by FROM film", "query_toks": ["SELECT", "DISTINCT", "directed_by", "FROM", "film"], "query_toks_no_value": ["select", "distinct", "directed_by", "from", "film"], "question": "Show all directors.", "question_toks": ["Show", "all", "directors", "."], "dataset_name": "spider", "guid": 3167}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | what are the genres of movies directed by \" Asghar Farhadi \"", "sql": "SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN classification AS t1 ON t4.mid  =  t1.msid JOIN genre AS t3 ON t3.gid  =  t1.gid WHERE t5.name  =  \"Asghar Farhadi\";", "example": {"db_id": "imdb", "query": "SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN classification AS t1 ON t4.mid  =  t1.msid JOIN genre AS t3 ON t3.gid  =  t1.gid WHERE t5.name  =  \"Asghar Farhadi\";", "query_toks": ["SELECT", "t3.genre", "FROM", "director", "AS", "t5", "JOIN", "directed_by", "AS", "t2", "ON", "t5.did", "=", "t2.did", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t2.msid", "JOIN", "classification", "AS", "t1", "ON", "t4.mid", "=", "t1.msid", "JOIN", "genre", "AS", "t3", "ON", "t3.gid", "=", "t1.gid", "WHERE", "t5.name", "=", "``", "Asghar", "Farhadi", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "genre", "from", "director", "as", "t5", "join", "directed_by", "as", "t2", "on", "t5", ".", "did", "=", "t2", ".", "did", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "classification", "as", "t1", "on", "t4", ".", "mid", "=", "t1", ".", "msid", "join", "genre", "as", "t3", "on", "t3", ".", "gid", "=", "t1", ".", "gid", "where", "t5", ".", "name", "=", "value"], "question": "what are the genres of movies directed by \" Asghar Farhadi \"", "question_toks": ["what", "are", "the", "genres", "of", "movies", "directed", "by", "``", "Asghar", "Farhadi", "``"], "dataset_name": "spider", "guid": 3168}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | List the names of all the channels owned by either CCTV or HBS", "sql": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "example": {"db_id": "program_share", "query": "SELECT name FROM channel WHERE OWNER  =  'CCTV' OR OWNER  =  'HBS'", "query_toks": ["SELECT", "name", "FROM", "channel", "WHERE", "OWNER", "=", "'CCTV", "'", "OR", "OWNER", "=", "'HBS", "'"], "query_toks_no_value": ["select", "name", "from", "channel", "where", "owner", "=", "value", "or", "owner", "=", "value"], "question": "List the names of all the channels owned by either CCTV or HBS", "question_toks": ["List", "the", "names", "of", "all", "the", "channels", "owned", "by", "either", "CCTV", "or", "HBS"], "dataset_name": "spider", "guid": 3169}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of movies produced in 2013 ?", "sql": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "title", ")", "FROM", "movie", "WHERE", "release_year", "=", "2013", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "title", ")", "from", "movie", "where", "release_year", "=", "value"], "question": "What is the number of movies produced in 2013 ?", "question_toks": ["What", "is", "the", "number", "of", "movies", "produced", "in", "2013", "?"], "dataset_name": "spider", "guid": 3170}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the countries of markets and their corresponding years of market estimation?", "sql": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID", "example": {"db_id": "film_rank", "query": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID", "query_toks": ["SELECT", "T2.Country", ",", "T1.Year", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID"], "query_toks_no_value": ["select", "t2", ".", "country", ",", "t1", ".", "year", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id"], "question": "What are the countries of markets and their corresponding years of market estimation?", "question_toks": ["What", "are", "the", "countries", "of", "markets", "and", "their", "corresponding", "years", "of", "market", "estimation", "?"], "dataset_name": "spider", "guid": 3171}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles of all movies that were not reviewed by Chris Jackson?", "sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "query_toks": ["SELECT", "DISTINCT", "title", "FROM", "Movie", "EXCEPT", "SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T3.name", "=", "'Chris", "Jackson", "'"], "query_toks_no_value": ["select", "distinct", "title", "from", "movie", "except", "select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t3", ".", "name", "=", "value"], "question": "What are the titles of all movies that were not reviewed by Chris Jackson?", "question_toks": ["What", "are", "the", "titles", "of", "all", "movies", "that", "were", "not", "reviewed", "by", "Chris", "Jackson", "?"], "dataset_name": "spider", "guid": 3172}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all Sci-Fi produced in year 2010", "sql": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;", "query_toks": ["SELECT", "t3.title", "FROM", "genre", "AS", "t2", "JOIN", "classification", "AS", "t1", "ON", "t2.gid", "=", "t1.gid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.genre", "=", "``", "Sci-Fi", "''", "AND", "t3.release_year", "=", "2010", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "genre", "as", "t2", "join", "classification", "as", "t1", "on", "t2", ".", "gid", "=", "t1", ".", "gid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "genre", "=", "value", "and", "t3", ".", "release_year", "=", "value"], "question": "Find all Sci-Fi produced in year 2010", "question_toks": ["Find", "all", "Sci-Fi", "produced", "in", "year", "2010"], "dataset_name": "spider", "guid": 3173}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all reviewers that have rated 3 or more movies?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "example": {"db_id": "movie_1", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "query_toks": ["SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "GROUP", "BY", "T1.rID", "HAVING", "COUNT", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "group", "by", "t1", ".", "rid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of all reviewers that have rated 3 or more movies?", "question_toks": ["What", "are", "the", "names", "of", "all", "reviewers", "that", "have", "rated", "3", "or", "more", "movies", "?"], "dataset_name": "spider", "guid": 3174}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles of all movies that have between 3 and 5 stars?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5", "example": {"db_id": "movie_1", "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5", "query_toks": ["SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", "BETWEEN", "3", "AND", "5"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", "between", "value", "and", "value"], "question": "What are the titles of all movies that have between 3 and 5 stars?", "question_toks": ["What", "are", "the", "titles", "of", "all", "movies", "that", "have", "between", "3", "and", "5", "stars", "?"], "dataset_name": "spider", "guid": 3175}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all directors who made one movie?", "sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "example": {"db_id": "movie_1", "query": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "query_toks": ["SELECT", "director", "FROM", "Movie", "GROUP", "BY", "director", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "director", "from", "movie", "group", "by", "director", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the names of all directors who made one movie?", "question_toks": ["What", "are", "the", "names", "of", "all", "directors", "who", "made", "one", "movie", "?"], "dataset_name": "spider", "guid": 3176}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Give the average number of cities within markets that had a low market estimation larger than 10000?", "sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000", "example": {"db_id": "film_rank", "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000", "query_toks": ["SELECT", "avg", "(", "T2.Number_cities", ")", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "WHERE", "T1.Low_Estimate", ">", "10000"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "number_cities", ")", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "where", "t1", ".", "low_estimate", ">", "value"], "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?", "question_toks": ["Give", "the", "average", "number", "of", "cities", "within", "markets", "that", "had", "a", "low", "market", "estimation", "larger", "than", "10000", "?"], "dataset_name": "spider", "guid": 3177}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all the directors who are from Afghanistan", "sql": "SELECT name FROM director WHERE nationality  =  \"Afghanistan\";", "example": {"db_id": "imdb", "query": "SELECT name FROM director WHERE nationality  =  \"Afghanistan\";", "query_toks": ["SELECT", "name", "FROM", "director", "WHERE", "nationality", "=", "``", "Afghanistan", "''", ";"], "query_toks_no_value": ["select", "name", "from", "director", "where", "nationality", "=", "value"], "question": "Find all the directors who are from Afghanistan", "question_toks": ["Find", "all", "the", "directors", "who", "are", "from", "Afghanistan"], "dataset_name": "spider", "guid": 3178}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show the title and director for all films.", "sql": "SELECT title ,  directed_by FROM film", "example": {"db_id": "cinema", "query": "SELECT title ,  directed_by FROM film", "query_toks": ["SELECT", "title", ",", "directed_by", "FROM", "film"], "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "film"], "question": "Show the title and director for all films.", "question_toks": ["Show", "the", "title", "and", "director", "for", "all", "films", "."], "dataset_name": "spider", "guid": 3179}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Which studios have never worked with the director Walter Hill?", "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "query_toks": ["SELECT", "Studio", "FROM", "film", "EXCEPT", "SELECT", "Studio", "FROM", "film", "WHERE", "Director", "=", "``", "Walter", "Hill", "''"], "query_toks_no_value": ["select", "studio", "from", "film", "except", "select", "studio", "from", "film", "where", "director", "=", "value"], "question": "Which studios have never worked with the director Walter Hill?", "question_toks": ["Which", "studios", "have", "never", "worked", "with", "the", "director", "Walter", "Hill", "?"], "dataset_name": "spider", "guid": 3180}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show distinct types of artworks that are nominated in festivals in 2007.", "sql": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007", "example": {"db_id": "entertainment_awards", "query": "SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T3.Year  =  2007", "query_toks": ["SELECT", "DISTINCT", "T2.Type", "FROM", "nomination", "AS", "T1", "JOIN", "artwork", "AS", "T2", "ON", "T1.Artwork_ID", "=", "T2.Artwork_ID", "JOIN", "festival_detail", "AS", "T3", "ON", "T1.Festival_ID", "=", "T3.Festival_ID", "WHERE", "T3.Year", "=", "2007"], "query_toks_no_value": ["select", "distinct", "t2", ".", "type", "from", "nomination", "as", "t1", "join", "artwork", "as", "t2", "on", "t1", ".", "artwork_id", "=", "t2", ".", "artwork_id", "join", "festival_detail", "as", "t3", "on", "t1", ".", "festival_id", "=", "t3", ".", "festival_id", "where", "t3", ".", "year", "=", "value"], "question": "Show distinct types of artworks that are nominated in festivals in 2007.", "question_toks": ["Show", "distinct", "types", "of", "artworks", "that", "are", "nominated", "in", "festivals", "in", "2007", "."], "dataset_name": "spider", "guid": 3181}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies about Persians were released after 1990 ?", "sql": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Persians\" AND t3.release_year  >  1990;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Persians\" AND t3.release_year  >  1990;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "tags", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.id", "JOIN", "movie", "AS", "t3", "ON", "t2.msid", "=", "t3.mid", "WHERE", "t1.keyword", "=", "``", "Persians", "''", "AND", "t3.release_year", ">", "1990", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "tags", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "id", "join", "movie", "as", "t3", "on", "t2", ".", "msid", "=", "t3", ".", "mid", "where", "t1", ".", "keyword", "=", "value", "and", "t3", ".", "release_year", ">", "value"], "question": "How many movies about Persians were released after 1990 ?", "question_toks": ["How", "many", "movies", "about", "Persians", "were", "released", "after", "1990", "?"], "dataset_name": "spider", "guid": 3182}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all the different reviewers who rates Gone with the Wind?", "sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "query_toks": ["SELECT", "DISTINCT", "T3.name", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T2.title", "=", "'Gone", "with", "the", "Wind", "'"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t2", ".", "title", "=", "value"], "question": "What are the names of all the different reviewers who rates Gone with the Wind?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "different", "reviewers", "who", "rates", "Gone", "with", "the", "Wind", "?"], "dataset_name": "spider", "guid": 3183}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who are the actors born in \" Austin \" after 1980 ?", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Austin", "''", "AND", "birth_year", ">", "1980", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", ">", "value"], "question": "Who are the actors born in \" Austin \" after 1980 ?", "question_toks": ["Who", "are", "the", "actors", "born", "in", "``", "Austin", "``", "after", "1980", "?"], "dataset_name": "spider", "guid": 3184}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the ids of all reviewers who did not give 4 stars?", "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "query_toks": ["SELECT", "rID", "FROM", "Rating", "EXCEPT", "SELECT", "rID", "FROM", "Rating", "WHERE", "stars", "=", "4"], "query_toks_no_value": ["select", "rid", "from", "rating", "except", "select", "rid", "from", "rating", "where", "stars", "=", "value"], "question": "What are the ids of all reviewers who did not give 4 stars?", "question_toks": ["What", "are", "the", "ids", "of", "all", "reviewers", "who", "did", "not", "give", "4", "stars", "?"], "dataset_name": "spider", "guid": 3185}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who acted \" Alan Turing \" in the movie \" The Imitation Game \" ?", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t2.role", "=", "``", "Alan", "Turing", "''", "AND", "t3.title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t2", ".", "role", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Who acted \" Alan Turing \" in the movie \" The Imitation Game \" ?", "question_toks": ["Who", "acted", "``", "Alan", "Turing", "``", "in", "the", "movie", "``", "The", "Imitation", "Game", "``", "?"], "dataset_name": "spider", "guid": 3186}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List the studios which average gross is above 4500000.", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "query_toks": ["SELECT", "Studio", "FROM", "film", "GROUP", "BY", "Studio", "HAVING", "avg", "(", "Gross_in_dollar", ")", ">", "=", "4500000"], "query_toks_no_value": ["select", "studio", "from", "film", "group", "by", "studio", "having", "avg", "(", "gross_in_dollar", ")", ">", "=", "value"], "question": "List the studios which average gross is above 4500000.", "question_toks": ["List", "the", "studios", "which", "average", "gross", "is", "above", "4500000", "."], "dataset_name": "spider", "guid": 3187}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Return the average gross sales in dollars across all films.", "sql": "SELECT avg(Gross_in_dollar) FROM film", "example": {"db_id": "film_rank", "query": "SELECT avg(Gross_in_dollar) FROM film", "query_toks": ["SELECT", "avg", "(", "Gross_in_dollar", ")", "FROM", "film"], "query_toks_no_value": ["select", "avg", "(", "gross_in_dollar", ")", "from", "film"], "question": "Return the average gross sales in dollars across all films.", "question_toks": ["Return", "the", "average", "gross", "sales", "in", "dollars", "across", "all", "films", "."], "dataset_name": "spider", "guid": 3188}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | find the names of programs whose origin is not in Beijing.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'", "example": {"db_id": "program_share", "query": "SELECT name FROM program WHERE origin != 'Beijing'", "query_toks": ["SELECT", "name", "FROM", "program", "WHERE", "origin", "!", "=", "'Beijing", "'"], "query_toks_no_value": ["select", "name", "from", "program", "where", "origin", "!", "=", "value"], "question": "find the names of programs whose origin is not in Beijing.", "question_toks": ["find", "the", "names", "of", "programs", "whose", "origin", "is", "not", "in", "Beijing", "."], "dataset_name": "spider", "guid": 3189}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are the series in which \" Scott Foley \" is an actor ?", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "tv_series", "AS", "t2", "ON", "t2.sid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Scott", "Foley", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "tv_series", "as", "t2", "on", "t2", ".", "sid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "What are the series in which \" Scott Foley \" is an actor ?", "question_toks": ["What", "are", "the", "series", "in", "which", "``", "Scott", "Foley", "``", "is", "an", "actor", "?"], "dataset_name": "spider", "guid": 3190}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | How many films have the word 'Dummy' in their titles?", "sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"", "example": {"db_id": "cinema", "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "film", "WHERE", "title", "LIKE", "``", "%", "Dummy", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "film", "where", "title", "like", "value"], "question": "How many films have the word 'Dummy' in their titles?", "question_toks": ["How", "many", "films", "have", "the", "word", "'Dummy", "'", "in", "their", "titles", "?"], "dataset_name": "spider", "guid": 3191}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?", "sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "query_toks": ["SELECT", "DISTINCT", "T3.name", ",", "T2.title", ",", "T1.stars", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T2.director", "=", "T3.name"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "stars", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t2", ".", "director", "=", "t3", ".", "name"], "question": "What are the different reviewer names, movie titles, and stars for every rating where the reviewer had the same name as the director?", "question_toks": ["What", "are", "the", "different", "reviewer", "names", ",", "movie", "titles", ",", "and", "stars", "for", "every", "rating", "where", "the", "reviewer", "had", "the", "same", "name", "as", "the", "director", "?"], "dataset_name": "spider", "guid": 3192}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?", "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "query_toks": ["SELECT", "DISTINCT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T3.name", "=", "'Brittany", "Harris", "'", "OR", "T2.year", ">", "2000"], "query_toks_no_value": ["select", "distinct", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t3", ".", "name", "=", "value", "or", "t2", ".", "year", ">", "value"], "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?", "question_toks": ["What", "are", "the", "names", "of", "all", "movies", "that", "were", "made", "after", "2000", "or", "reviewed", "by", "Brittany", "Harris", "?"], "dataset_name": "spider", "guid": 3193}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What are the title and maximum price of each film?", "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id", "example": {"db_id": "cinema", "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id", "query_toks": ["SELECT", "T2.title", ",", "max", "(", "T1.price", ")", "FROM", "schedule", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "max", "(", "t1", ".", "price", ")", "from", "schedule", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id"], "question": "What are the title and maximum price of each film?", "question_toks": ["What", "are", "the", "title", "and", "maximum", "price", "of", "each", "film", "?"], "dataset_name": "spider", "guid": 3194}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the Episode of all TV series sorted by rating.", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "example": {"db_id": "tvshow", "query": "SELECT Episode FROM TV_series ORDER BY rating", "query_toks": ["SELECT", "Episode", "FROM", "TV_series", "ORDER", "BY", "rating"], "query_toks_no_value": ["select", "episode", "from", "tv_series", "order", "by", "rating"], "question": "List the Episode of all TV series sorted by rating.", "question_toks": ["List", "the", "Episode", "of", "all", "TV", "series", "sorted", "by", "rating", "."], "dataset_name": "spider", "guid": 3195}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | who acted the role of \" Mr. Bean \"", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  \"Mr. Bean\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  \"Mr. Bean\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "WHERE", "t2.role", "=", "``", "Mr.", "Bean", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "role", "=", "value"], "question": "who acted the role of \" Mr. Bean \"", "question_toks": ["who", "acted", "the", "role", "of", "``", "Mr.", "Bean", "``"], "dataset_name": "spider", "guid": 3196}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are the series featuring \" Scott Foley \" ?", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "tv_series", "AS", "t2", "ON", "t2.sid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Scott", "Foley", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "tv_series", "as", "t2", "on", "t2", ".", "sid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "What are the series featuring \" Scott Foley \" ?", "question_toks": ["What", "are", "the", "series", "featuring", "``", "Scott", "Foley", "``", "?"], "dataset_name": "spider", "guid": 3197}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Please show the titles of films and the types of market estimations.", "sql": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID", "example": {"db_id": "film_rank", "query": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID", "query_toks": ["SELECT", "T1.Title", ",", "T2.Type", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "type", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id"], "question": "Please show the titles of films and the types of market estimations.", "question_toks": ["Please", "show", "the", "titles", "of", "films", "and", "the", "types", "of", "market", "estimations", "."], "dataset_name": "spider", "guid": 3198}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | find the number of different programs that are broadcast during night time.", "sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'", "example": {"db_id": "program_share", "query": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "program_id", ")", "FROM", "broadcast", "WHERE", "time_of_day", "=", "'Night", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "program_id", ")", "from", "broadcast", "where", "time_of_day", "=", "value"], "question": "find the number of different programs that are broadcast during night time.", "question_toks": ["find", "the", "number", "of", "different", "programs", "that", "are", "broadcast", "during", "night", "time", "."], "dataset_name": "spider", "guid": 3199}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director", "query_toks": ["SELECT", "T2.title", ",", "T1.stars", ",", "T2.director", ",", "max", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "director", "!", "=", "``", "null", "''", "GROUP", "BY", "director"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t2", ".", "director", ",", "max", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "director", "!", "=", "value", "group", "by", "director"], "question": "For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.", "question_toks": ["For", "each", "director", ",", "return", "the", "director", "'s", "name", "together", "with", "the", "title", "of", "the", "movie", "they", "directed", "that", "received", "the", "highest", "rating", "among", "all", "of", "their", "movies", ",", "and", "the", "value", "of", "that", "rating", ".", "Ignore", "movies", "whose", "director", "is", "NULL", "."], "dataset_name": "spider", "guid": 3200}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the names of movies whose created year is after all movies directed by Steven Spielberg?", "sql": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "YEAR", ">", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "Movie", "WHERE", "director", "=", "``", "Steven", "Spielberg", "''", ")"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "year", ">", "(", "select", "max", "(", "year", ")", "from", "movie", "where", "director", "=", "value", ")"], "question": "What is the names of movies whose created year is after all movies directed by Steven Spielberg?", "question_toks": ["What", "is", "the", "names", "of", "movies", "whose", "created", "year", "is", "after", "all", "movies", "directed", "by", "Steven", "Spielberg", "?"], "dataset_name": "spider", "guid": 3201}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Give me the name of all the actors from Afghanistan", "sql": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "nationality", "=", "``", "Afghanistan", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "nationality", "=", "value"], "question": "Give me the name of all the actors from Afghanistan", "question_toks": ["Give", "me", "the", "name", "of", "all", "the", "actors", "from", "Afghanistan"], "dataset_name": "spider", "guid": 3202}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies written and produced by \" Woody Allen \"", "sql": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\";", "query_toks": ["SELECT", "t2.title", "FROM", "movie", "AS", "t2", "JOIN", "made_by", "AS", "t3", "ON", "t2.mid", "=", "t3.msid", "JOIN", "producer", "AS", "t1", "ON", "t1.pid", "=", "t3.pid", "JOIN", "written_by", "AS", "t5", "ON", "t5.msid", "=", "t2.mid", "JOIN", "writer", "AS", "t4", "ON", "t5.wid", "=", "t4.wid", "WHERE", "t1.name", "=", "``", "Woody", "Allen", "''", "AND", "t4.name", "=", "``", "Woody", "Allen", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "movie", "as", "t2", "join", "made_by", "as", "t3", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "join", "producer", "as", "t1", "on", "t1", ".", "pid", "=", "t3", ".", "pid", "join", "written_by", "as", "t5", "on", "t5", ".", "msid", "=", "t2", ".", "mid", "join", "writer", "as", "t4", "on", "t5", ".", "wid", "=", "t4", ".", "wid", "where", "t1", ".", "name", "=", "value", "and", "t4", ".", "name", "=", "value"], "question": "Find all movies written and produced by \" Woody Allen \"", "question_toks": ["Find", "all", "movies", "written", "and", "produced", "by", "``", "Woody", "Allen", "``"], "dataset_name": "spider", "guid": 3203}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What is the name of teh studio that created the most films?", "sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Studio", "FROM", "film", "GROUP", "BY", "Studio", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "studio", "from", "film", "group", "by", "studio", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of teh studio that created the most films?", "question_toks": ["What", "is", "the", "name", "of", "teh", "studio", "that", "created", "the", "most", "films", "?"], "dataset_name": "spider", "guid": 3204}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show the ids and names of festivals that have at least two nominations for artworks.", "sql": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2", "example": {"db_id": "entertainment_awards", "query": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T1.Festival_ID", ",", "T3.Festival_Name", "FROM", "nomination", "AS", "T1", "JOIN", "artwork", "AS", "T2", "ON", "T1.Artwork_ID", "=", "T2.Artwork_ID", "JOIN", "festival_detail", "AS", "T3", "ON", "T1.Festival_ID", "=", "T3.Festival_ID", "GROUP", "BY", "T1.Festival_ID", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "festival_id", ",", "t3", ".", "festival_name", "from", "nomination", "as", "t1", "join", "artwork", "as", "t2", "on", "t1", ".", "artwork_id", "=", "t2", ".", "artwork_id", "join", "festival_detail", "as", "t3", "on", "t1", ".", "festival_id", "=", "t3", ".", "festival_id", "group", "by", "t1", ".", "festival_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the ids and names of festivals that have at least two nominations for artworks.", "question_toks": ["Show", "the", "ids", "and", "names", "of", "festivals", "that", "have", "at", "least", "two", "nominations", "for", "artworks", "."], "dataset_name": "spider", "guid": 3205}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | How many reviewers are there?", "sql": "SELECT count(*) FROM Reviewer", "example": {"db_id": "movie_1", "query": "SELECT count(*) FROM Reviewer", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Reviewer"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "reviewer"], "question": "How many reviewers are there?", "question_toks": ["How", "many", "reviewers", "are", "there", "?"], "dataset_name": "spider", "guid": 3206}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show cinema name, film title, date, and price for each record in schedule.", "sql": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id", "example": {"db_id": "cinema", "query": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id", "query_toks": ["SELECT", "T3.name", ",", "T2.title", ",", "T1.date", ",", "T1.price", "FROM", "schedule", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "JOIN", "cinema", "AS", "T3", "ON", "T1.cinema_id", "=", "T3.cinema_id"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "date", ",", "t1", ".", "price", "from", "schedule", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "join", "cinema", "as", "t3", "on", "t1", ".", "cinema_id", "=", "t3", ".", "cinema_id"], "question": "Show cinema name, film title, date, and price for each record in schedule.", "question_toks": ["Show", "cinema", "name", ",", "film", "title", ",", "date", ",", "and", "price", "for", "each", "record", "in", "schedule", "."], "dataset_name": "spider", "guid": 3207}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | For each language, list the number of TV Channels that use it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "example": {"db_id": "tvshow", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "query_toks": ["SELECT", "LANGUAGE", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "LANGUAGE"], "query_toks_no_value": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language"], "question": "For each language, list the number of TV Channels that use it.", "question_toks": ["For", "each", "language", ",", "list", "the", "number", "of", "TV", "Channels", "that", "use", "it", "."], "dataset_name": "spider", "guid": 3208}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.", "sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "example": {"db_id": "movie_1", "query": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "query_toks": ["SELECT", "T1.title", ",", "T1.director", "FROM", "Movie", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.director", "=", "T2.director", "WHERE", "T1.title", "!", "=", "T2.title", "ORDER", "BY", "T1.director", ",", "T1.title"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "director", "from", "movie", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "director", "=", "t2", ".", "director", "where", "t1", ".", "title", "!", "=", "t2", ".", "title", "order", "by", "t1", ".", "director", ",", "t1", ".", "title"], "question": "For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.", "question_toks": ["For", "all", "directors", "who", "directed", "more", "than", "one", "movie", ",", "return", "the", "titles", "of", "all", "movies", "directed", "by", "them", ",", "along", "with", "the", "director", "name", ".", "Sort", "by", "director", "name", ",", "then", "movie", "title", "."], "dataset_name": "spider", "guid": 3209}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "example": {"db_id": "tvshow", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "WHERE", "Directed_by", "=", "``", "Ben", "Jones", "''", "OR", "Directed_by", "=", "``", "Brandon", "Vietti", "''", ";"], "query_toks_no_value": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", "or", "directed_by", "=", "value"], "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "question_toks": ["List", "the", "title", "of", "all", "cartoon", "directed", "by", "``", "Ben", "Jones", "''", "or", "``", "Brandon", "Vietti", "''", "."], "dataset_name": "spider", "guid": 3210}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the names of all cartoons directed by Ben Jones?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "example": {"db_id": "tvshow", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "WHERE", "Directed_by", "=", "``", "Ben", "Jones", "''", ";"], "query_toks_no_value": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "What are the names of all cartoons directed by Ben Jones?", "question_toks": ["What", "are", "the", "names", "of", "all", "cartoons", "directed", "by", "Ben", "Jones", "?"], "dataset_name": "spider", "guid": 3211}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | In what city was \" Kevin Spacey \" born ?", "sql": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";", "example": {"db_id": "imdb", "query": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";", "query_toks": ["SELECT", "birth_city", "FROM", "director", "WHERE", "name", "=", "``", "director_name0", "''", ";"], "query_toks_no_value": ["select", "birth_city", "from", "director", "where", "name", "=", "value"], "question": "In what city was \" Kevin Spacey \" born ?", "question_toks": ["In", "what", "city", "was", "``", "Kevin", "Spacey", "``", "born", "?"], "dataset_name": "spider", "guid": 3212}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each director who directed more than one movie, what are the titles and dates of release for all those movies?", "sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "example": {"db_id": "movie_1", "query": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "query_toks": ["SELECT", "T1.title", ",", "T1.year", "FROM", "Movie", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.director", "=", "T2.director", "WHERE", "T1.title", "!", "=", "T2.title"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "year", "from", "movie", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "director", "=", "t2", ".", "director", "where", "t1", ".", "title", "!", "=", "t2", ".", "title"], "question": "For each director who directed more than one movie, what are the titles and dates of release for all those movies?", "question_toks": ["For", "each", "director", "who", "directed", "more", "than", "one", "movie", ",", "what", "are", "the", "titles", "and", "dates", "of", "release", "for", "all", "those", "movies", "?"], "dataset_name": "spider", "guid": 3213}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How much was the budget of \" Finding Nemo \"", "sql": "SELECT budget FROM movie WHERE title  =  \"Finding Nemo\";", "example": {"db_id": "imdb", "query": "SELECT budget FROM movie WHERE title  =  \"Finding Nemo\";", "query_toks": ["SELECT", "budget", "FROM", "movie", "WHERE", "title", "=", "``", "Finding", "Nemo", "''", ";"], "query_toks_no_value": ["select", "budget", "from", "movie", "where", "title", "=", "value"], "question": "How much was the budget of \" Finding Nemo \"", "question_toks": ["How", "much", "was", "the", "budget", "of", "``", "Finding", "Nemo", "``"], "dataset_name": "spider", "guid": 3214}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the movie which is classified in the most number of genres", "sql": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre  ) DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre  ) DESC LIMIT 1;", "query_toks": ["SELECT", "t3.title", "FROM", "genre", "AS", "t2", "JOIN", "classification", "AS", "t1", "ON", "t2.gid", "=", "t1.gid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "GROUP", "BY", "t3.title", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t2.genre", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "genre", "as", "t2", "join", "classification", "as", "t1", "on", "t2", ".", "gid", "=", "t1", ".", "gid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "group", "by", "t3", ".", "title", "order", "by", "count", "(", "distinct", "t2", ".", "genre", ")", "desc", "limit", "value"], "question": "Find the movie which is classified in the most number of genres", "question_toks": ["Find", "the", "movie", "which", "is", "classified", "in", "the", "most", "number", "of", "genres"], "dataset_name": "spider", "guid": 3215}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | how many programs are there?", "sql": "SELECT count(*) FROM program", "example": {"db_id": "program_share", "query": "SELECT count(*) FROM program", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "program"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "program"], "question": "how many programs are there?", "question_toks": ["how", "many", "programs", "are", "there", "?"], "dataset_name": "spider", "guid": 3216}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | List the name of artworks whose type is not \"Program Talent Show\".", "sql": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"", "example": {"db_id": "entertainment_awards", "query": "SELECT Name FROM artwork WHERE TYPE != \"Program Talent Show\"", "query_toks": ["SELECT", "Name", "FROM", "artwork", "WHERE", "TYPE", "!", "=", "``", "Program", "Talent", "Show", "''"], "query_toks_no_value": ["select", "name", "from", "artwork", "where", "type", "!", "=", "value"], "question": "List the name of artworks whose type is not \"Program Talent Show\".", "question_toks": ["List", "the", "name", "of", "artworks", "whose", "type", "is", "not", "``", "Program", "Talent", "Show", "''", "."], "dataset_name": "spider", "guid": 3217}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which channels are not owned by CCTV? Give me the channel names.", "sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'", "example": {"db_id": "program_share", "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'", "query_toks": ["SELECT", "name", "FROM", "channel", "WHERE", "OWNER", "!", "=", "'CCTV", "'"], "query_toks_no_value": ["select", "name", "from", "channel", "where", "owner", "!", "=", "value"], "question": "Which channels are not owned by CCTV? Give me the channel names.", "question_toks": ["Which", "channels", "are", "not", "owned", "by", "CCTV", "?", "Give", "me", "the", "channel", "names", "."], "dataset_name": "spider", "guid": 3218}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Return the low and high estimates for all film markets.", "sql": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation", "example": {"db_id": "film_rank", "query": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation", "query_toks": ["SELECT", "Low_Estimate", ",", "High_Estimate", "FROM", "film_market_estimation"], "query_toks_no_value": ["select", "low_estimate", ",", "high_estimate", "from", "film_market_estimation"], "question": "Return the low and high estimates for all film markets.", "question_toks": ["Return", "the", "low", "and", "high", "estimates", "for", "all", "film", "markets", "."], "dataset_name": "spider", "guid": 3219}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of the directors who made exactly one movie?", "sql": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "example": {"db_id": "movie_1", "query": "SELECT director FROM Movie GROUP BY director HAVING count(*)  =  1", "query_toks": ["SELECT", "director", "FROM", "Movie", "GROUP", "BY", "director", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "director", "from", "movie", "group", "by", "director", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the names of the directors who made exactly one movie?", "question_toks": ["What", "are", "the", "names", "of", "the", "directors", "who", "made", "exactly", "one", "movie", "?"], "dataset_name": "spider", "guid": 3220}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | Find the production code and channel of the most recently aired cartoon .", "sql": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "example": {"db_id": "tvshow", "query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1", "query_toks": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1"], "query_toks_no_value": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "value"], "question": "Find the production code and channel of the most recently aired cartoon .", "question_toks": ["Find", "the", "production", "code", "and", "channel", "of", "the", "most", "recently", "aired", "cartoon", "."], "dataset_name": "spider", "guid": 3221}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show all the locations where no cinema has capacity over 800.", "sql": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "EXCEPT", "SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "800"], "query_toks_no_value": ["select", "location", "from", "cinema", "except", "select", "location", "from", "cinema", "where", "capacity", ">", "value"], "question": "Show all the locations where no cinema has capacity over 800.", "question_toks": ["Show", "all", "the", "locations", "where", "no", "cinema", "has", "capacity", "over", "800", "."], "dataset_name": "spider", "guid": 3222}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Shahab Hosseini \" act in", "sql": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Shahab", "Hosseini", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "How many movies did \" Shahab Hosseini \" act in", "question_toks": ["How", "many", "movies", "did", "``", "Shahab", "Hosseini", "``", "act", "in"], "dataset_name": "spider", "guid": 3223}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Rowan Atkinson\" AND t3.role  =  \"Mr. Bean\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Rowan Atkinson\" AND t3.role  =  \"Mr. Bean\";", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Rowan", "Atkinson", "''", "AND", "t3.role", "=", "``", "Mr.", "Bean", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "role", "=", "value"], "question": "find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"", "question_toks": ["find", "all", "films", "in", "which", "``", "Rowan", "Atkinson", "``", "acted", "as", "``", "Mr.", "Bean", "``"], "dataset_name": "spider", "guid": 3224}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Find the names of the channels that are broadcast in the morning.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", "example": {"db_id": "program_share", "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", "query_toks": ["SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Morning", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Find the names of the channels that are broadcast in the morning.", "question_toks": ["Find", "the", "names", "of", "the", "channels", "that", "are", "broadcast", "in", "the", "morning", "."], "dataset_name": "spider", "guid": 3225}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What are the title and director of each film?", "sql": "SELECT title ,  directed_by FROM film", "example": {"db_id": "cinema", "query": "SELECT title ,  directed_by FROM film", "query_toks": ["SELECT", "title", ",", "directed_by", "FROM", "film"], "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "film"], "question": "What are the title and director of each film?", "question_toks": ["What", "are", "the", "title", "and", "director", "of", "each", "film", "?"], "dataset_name": "spider", "guid": 3226}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For all directors who have directed more than one movie, what movies have they directed and what are their names?", "sql": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "example": {"db_id": "movie_1", "query": "SELECT T1.title ,  T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title ORDER BY T1.director ,  T1.title", "query_toks": ["SELECT", "T1.title", ",", "T1.director", "FROM", "Movie", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.director", "=", "T2.director", "WHERE", "T1.title", "!", "=", "T2.title", "ORDER", "BY", "T1.director", ",", "T1.title"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "director", "from", "movie", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "director", "=", "t2", ".", "director", "where", "t1", ".", "title", "!", "=", "t2", ".", "title", "order", "by", "t1", ".", "director", ",", "t1", ".", "title"], "question": "For all directors who have directed more than one movie, what movies have they directed and what are their names?", "question_toks": ["For", "all", "directors", "who", "have", "directed", "more", "than", "one", "movie", ",", "what", "movies", "have", "they", "directed", "and", "what", "are", "their", "names", "?"], "dataset_name": "spider", "guid": 3227}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the titles of the cartoons sorted alphabetically?", "sql": "SELECT Title FROM Cartoon ORDER BY title", "example": {"db_id": "tvshow", "query": "SELECT Title FROM Cartoon ORDER BY title", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "ORDER", "BY", "title"], "query_toks_no_value": ["select", "title", "from", "cartoon", "order", "by", "title"], "question": "What are the titles of the cartoons sorted alphabetically?", "question_toks": ["What", "are", "the", "titles", "of", "the", "cartoons", "sorted", "alphabetically", "?"], "dataset_name": "spider", "guid": 3228}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Which producer has worked with the most number of directors ?", "sql": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "director", "AS", "t3", "JOIN", "directed_by", "AS", "t2", "ON", "t3.did", "=", "t2.did", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t2.msid", "JOIN", "made_by", "AS", "t5", "ON", "t4.mid", "=", "t5.msid", "JOIN", "producer", "AS", "t1", "ON", "t1.pid", "=", "t5.pid", "GROUP", "BY", "t1.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t3.name", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "director", "as", "t3", "join", "directed_by", "as", "t2", "on", "t3", ".", "did", "=", "t2", ".", "did", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "made_by", "as", "t5", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "producer", "as", "t1", "on", "t1", ".", "pid", "=", "t5", ".", "pid", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "distinct", "t3", ".", "name", ")", "desc", "limit", "value"], "question": "Which producer has worked with the most number of directors ?", "question_toks": ["Which", "producer", "has", "worked", "with", "the", "most", "number", "of", "directors", "?"], "dataset_name": "spider", "guid": 3229}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who acts \" Olivia Pope \" in the series Scandal ?", "sql": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  \"Olivia Pope\" AND t2.title  =  \"Scandal\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  \"Olivia Pope\" AND t2.title  =  \"Scandal\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "tv_series", "AS", "t2", "ON", "t2.sid", "=", "t3.msid", "WHERE", "t3.role", "=", "``", "Olivia", "Pope", "''", "AND", "t2.title", "=", "``", "Scandal", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "tv_series", "as", "t2", "on", "t2", ".", "sid", "=", "t3", ".", "msid", "where", "t3", ".", "role", "=", "value", "and", "t2", ".", "title", "=", "value"], "question": "Who acts \" Olivia Pope \" in the series Scandal ?", "question_toks": ["Who", "acts", "``", "Olivia", "Pope", "``", "in", "the", "series", "Scandal", "?"], "dataset_name": "spider", "guid": 3230}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Find the total rating ratio for each channel owner.", "sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "example": {"db_id": "program_share", "query": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "query_toks": ["SELECT", "sum", "(", "Rating_in_percent", ")", ",", "OWNER", "FROM", "channel", "GROUP", "BY", "OWNER"], "query_toks_no_value": ["select", "sum", "(", "rating_in_percent", ")", ",", "owner", "from", "channel", "group", "by", "owner"], "question": "Find the total rating ratio for each channel owner.", "question_toks": ["Find", "the", "total", "rating", "ratio", "for", "each", "channel", "owner", "."], "dataset_name": "spider", "guid": 3231}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Find the names of programs that are never broadcasted in the morning.", "sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"", "example": {"db_id": "program_share", "query": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"", "query_toks": ["SELECT", "name", "FROM", "program", "EXCEPT", "SELECT", "t1.name", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "WHERE", "t2.Time_of_day", "=", "``", "Morning", "''"], "query_toks_no_value": ["select", "name", "from", "program", "except", "select", "t1", ".", "name", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Find the names of programs that are never broadcasted in the morning.", "question_toks": ["Find", "the", "names", "of", "programs", "that", "are", "never", "broadcasted", "in", "the", "morning", "."], "dataset_name": "spider", "guid": 3232}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles of all movies that have rating star is between 3 and 5?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5", "example": {"db_id": "movie_1", "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars BETWEEN 3 AND 5", "query_toks": ["SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", "BETWEEN", "3", "AND", "5"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", "between", "value", "and", "value"], "question": "What are the titles of all movies that have rating star is between 3 and 5?", "question_toks": ["What", "are", "the", "titles", "of", "all", "movies", "that", "have", "rating", "star", "is", "between", "3", "and", "5", "?"], "dataset_name": "spider", "guid": 3233}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all the reviewers and movie names?", "sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "example": {"db_id": "movie_1", "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "query_toks": ["SELECT", "name", "FROM", "Reviewer", "UNION", "SELECT", "title", "FROM", "Movie"], "query_toks_no_value": ["select", "name", "from", "reviewer", "union", "select", "title", "from", "movie"], "question": "What are the names of all the reviewers and movie names?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "reviewers", "and", "movie", "names", "?"], "dataset_name": "spider", "guid": 3234}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors born in Tehran", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Tehran", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value"], "question": "Find all actors born in Tehran", "question_toks": ["Find", "all", "actors", "born", "in", "Tehran"], "dataset_name": "spider", "guid": 3235}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies that star both \" Woody Strode \" and \" Jason Robards \"", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "CAST", "AS", "t3", "ON", "t4.mid", "=", "t3.msid", "JOIN", "actor", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "WHERE", "t1.name", "=", "``", "Woody", "Strode", "''", "AND", "t2.name", "=", "``", "Jason", "Robards", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "cast", "as", "t3", "on", "t4", ".", "mid", "=", "t3", ".", "msid", "join", "actor", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "Find all movies that star both \" Woody Strode \" and \" Jason Robards \"", "question_toks": ["Find", "all", "movies", "that", "star", "both", "``", "Woody", "Strode", "``", "and", "``", "Jason", "Robards", "``"], "dataset_name": "spider", "guid": 3236}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Who is the director of movie Avatar?", "sql": "SELECT director FROM Movie WHERE title  = 'Avatar'", "example": {"db_id": "movie_1", "query": "SELECT director FROM Movie WHERE title  = 'Avatar'", "query_toks": ["SELECT", "director", "FROM", "Movie", "WHERE", "title", "=", "'Avatar", "'"], "query_toks_no_value": ["select", "director", "from", "movie", "where", "title", "=", "value"], "question": "Who is the director of movie Avatar?", "question_toks": ["Who", "is", "the", "director", "of", "movie", "Avatar", "?"], "dataset_name": "spider", "guid": 3237}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | List the year in which there are more than one festivals.", "sql": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1", "example": {"db_id": "entertainment_awards", "query": "SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "YEAR", "FROM", "festival_detail", "GROUP", "BY", "YEAR", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "year", "from", "festival_detail", "group", "by", "year", "having", "count", "(", "*", ")", ">", "value"], "question": "List the year in which there are more than one festivals.", "question_toks": ["List", "the", "year", "in", "which", "there", "are", "more", "than", "one", "festivals", "."], "dataset_name": "spider", "guid": 3238}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show the names of artworks in ascending order of the year they are nominated in.", "sql": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year", "example": {"db_id": "entertainment_awards", "query": "SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID ORDER BY T3.Year", "query_toks": ["SELECT", "T2.Name", "FROM", "nomination", "AS", "T1", "JOIN", "artwork", "AS", "T2", "ON", "T1.Artwork_ID", "=", "T2.Artwork_ID", "JOIN", "festival_detail", "AS", "T3", "ON", "T1.Festival_ID", "=", "T3.Festival_ID", "ORDER", "BY", "T3.Year"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "nomination", "as", "t1", "join", "artwork", "as", "t2", "on", "t1", ".", "artwork_id", "=", "t2", ".", "artwork_id", "join", "festival_detail", "as", "t3", "on", "t1", ".", "festival_id", "=", "t3", ".", "festival_id", "order", "by", "t3", ".", "year"], "question": "Show the names of artworks in ascending order of the year they are nominated in.", "question_toks": ["Show", "the", "names", "of", "artworks", "in", "ascending", "order", "of", "the", "year", "they", "are", "nominated", "in", "."], "dataset_name": "spider", "guid": 3239}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | find the id of tv channels that do not play any cartoon directed by Ben Jones.", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "example": {"db_id": "tvshow", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "id", "FROM", "TV_Channel", "EXCEPT", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "question_toks": ["find", "the", "id", "of", "tv", "channels", "that", "do", "not", "play", "any", "cartoon", "directed", "by", "Ben", "Jones", "."], "dataset_name": "spider", "guid": 3240}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What year was \" Benedict Cumberbatch \" born ?", "sql": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";", "example": {"db_id": "imdb", "query": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";", "query_toks": ["SELECT", "birth_year", "FROM", "actor", "WHERE", "name", "=", "``", "Benedict", "Cumberbatch", "''", ";"], "query_toks_no_value": ["select", "birth_year", "from", "actor", "where", "name", "=", "value"], "question": "What year was \" Benedict Cumberbatch \" born ?", "question_toks": ["What", "year", "was", "``", "Benedict", "Cumberbatch", "``", "born", "?"], "dataset_name": "spider", "guid": 3241}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is highest rating for the most recent movie and when was it released?", "sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "example": {"db_id": "movie_1", "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "query_toks": ["SELECT", "max", "(", "T1.stars", ")", ",", "T2.year", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.year", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "Movie", ")"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "stars", ")", ",", "t2", ".", "year", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "year", "=", "(", "select", "max", "(", "year", ")", "from", "movie", ")"], "question": "What is highest rating for the most recent movie and when was it released?", "question_toks": ["What", "is", "highest", "rating", "for", "the", "most", "recent", "movie", "and", "when", "was", "it", "released", "?"], "dataset_name": "spider", "guid": 3242}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List the distinct director of all films.", "sql": "SELECT DISTINCT Director FROM film", "example": {"db_id": "film_rank", "query": "SELECT DISTINCT Director FROM film", "query_toks": ["SELECT", "DISTINCT", "Director", "FROM", "film"], "query_toks_no_value": ["select", "distinct", "director", "from", "film"], "question": "List the distinct director of all films.", "question_toks": ["List", "the", "distinct", "director", "of", "all", "films", "."], "dataset_name": "spider", "guid": 3243}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "example": {"db_id": "tvshow", "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "Air_Date", "FROM", "TV_series", "WHERE", "Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "value"], "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "question_toks": ["What", "is", "the", "air", "date", "of", "TV", "series", "with", "Episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?"], "dataset_name": "spider", "guid": 3244}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the episode for the TV series named \"Sky Radio\"?", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Episode", "FROM", "TV_Channel", "AS", "T1", "JOIN", "TV_series", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "What is the episode for the TV series named \"Sky Radio\"?", "question_toks": ["What", "is", "the", "episode", "for", "the", "TV", "series", "named", "``", "Sky", "Radio", "''", "?"], "dataset_name": "spider", "guid": 3245}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What is the location with the most cinemas opened in year 2010 or later?", "sql": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "openning_year", ">", "=", "2010", "GROUP", "BY", "LOCATION", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "openning_year", ">", "=", "value", "group", "by", "location", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the location with the most cinemas opened in year 2010 or later?", "question_toks": ["What", "is", "the", "location", "with", "the", "most", "cinemas", "opened", "in", "year", "2010", "or", "later", "?"], "dataset_name": "spider", "guid": 3246}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which program is broadcast most frequently? Give me the program name.", "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "program_share", "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "GROUP", "BY", "t2.program_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "group", "by", "t2", ".", "program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which program is broadcast most frequently? Give me the program name.", "question_toks": ["Which", "program", "is", "broadcast", "most", "frequently", "?", "Give", "me", "the", "program", "name", "."], "dataset_name": "spider", "guid": 3247}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies written by \" Matt Damon \"", "sql": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\";", "example": {"db_id": "imdb", "query": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\";", "query_toks": ["SELECT", "t1.title", "FROM", "written_by", "AS", "t3", "JOIN", "movie", "AS", "t1", "ON", "t3.msid", "=", "t1.mid", "JOIN", "writer", "AS", "t2", "ON", "t3.wid", "=", "t2.wid", "WHERE", "t2.name", "=", "``", "Matt", "Damon", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "written_by", "as", "t3", "join", "movie", "as", "t1", "on", "t3", ".", "msid", "=", "t1", ".", "mid", "join", "writer", "as", "t2", "on", "t3", ".", "wid", "=", "t2", ".", "wid", "where", "t2", ".", "name", "=", "value"], "question": "Find all movies written by \" Matt Damon \"", "question_toks": ["Find", "all", "movies", "written", "by", "``", "Matt", "Damon", "``"], "dataset_name": "spider", "guid": 3248}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the names of all reviewers who have ratings with a NULL value for the date.", "sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "Reviewer", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "ratingDate", "=", "``", "null", "''"], "query_toks_no_value": ["select", "distinct", "name", "from", "reviewer", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "ratingdate", "=", "value"], "question": "Find the names of all reviewers who have ratings with a NULL value for the date.", "question_toks": ["Find", "the", "names", "of", "all", "reviewers", "who", "have", "ratings", "with", "a", "NULL", "value", "for", "the", "date", "."], "dataset_name": "spider", "guid": 3249}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the name of the movie that is rated by most of times?", "sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "T1.mID", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.mID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "mid", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "mid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the movie that is rated by most of times?", "question_toks": ["What", "is", "the", "name", "of", "the", "movie", "that", "is", "rated", "by", "most", "of", "times", "?"], "dataset_name": "spider", "guid": 3250}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?", "sql": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Brittany Harris' OR T2.year  >  2000", "query_toks": ["SELECT", "DISTINCT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T3.name", "=", "'Brittany", "Harris", "'", "OR", "T2.year", ">", "2000"], "query_toks_no_value": ["select", "distinct", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t3", ".", "name", "=", "value", "or", "t2", ".", "year", ">", "value"], "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?", "question_toks": ["What", "are", "names", "of", "the", "movies", "that", "are", "either", "made", "after", "2000", "or", "reviewed", "by", "Brittany", "Harris", "?"], "dataset_name": "spider", "guid": 3251}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | find the name of the program that was launched most recently.", "sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1", "example": {"db_id": "program_share", "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "program", "ORDER", "BY", "launch", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "program", "order", "by", "launch", "desc", "limit", "value"], "question": "find the name of the program that was launched most recently.", "question_toks": ["find", "the", "name", "of", "the", "program", "that", "was", "launched", "most", "recently", "."], "dataset_name": "spider", "guid": 3252}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | For each nomination, show the name of the artwork and name of the festival where it is nominated.", "sql": "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID", "example": {"db_id": "entertainment_awards", "query": "SELECT T2.Name ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID", "query_toks": ["SELECT", "T2.Name", ",", "T3.Festival_Name", "FROM", "nomination", "AS", "T1", "JOIN", "artwork", "AS", "T2", "ON", "T1.Artwork_ID", "=", "T2.Artwork_ID", "JOIN", "festival_detail", "AS", "T3", "ON", "T1.Festival_ID", "=", "T3.Festival_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "festival_name", "from", "nomination", "as", "t1", "join", "artwork", "as", "t2", "on", "t1", ".", "artwork_id", "=", "t2", ".", "artwork_id", "join", "festival_detail", "as", "t3", "on", "t1", ".", "festival_id", "=", "t3", ".", "festival_id"], "question": "For each nomination, show the name of the artwork and name of the festival where it is nominated.", "question_toks": ["For", "each", "nomination", ",", "show", "the", "name", "of", "the", "artwork", "and", "name", "of", "the", "festival", "where", "it", "is", "nominated", "."], "dataset_name": "spider", "guid": 3253}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies produced in 2015", "sql": "SELECT title FROM movie WHERE release_year  =  2015;", "example": {"db_id": "imdb", "query": "SELECT title FROM movie WHERE release_year  =  2015;", "query_toks": ["SELECT", "title", "FROM", "movie", "WHERE", "release_year", "=", "2015", ";"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "release_year", "=", "value"], "question": "Find all movies produced in 2015", "question_toks": ["Find", "all", "movies", "produced", "in", "2015"], "dataset_name": "spider", "guid": 3254}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the number of different series names and contents in the TV Channel table.", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "example": {"db_id": "tvshow", "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "query_toks": ["SELECT", "count", "(", "DISTINCT", "series_name", ")", ",", "count", "(", "DISTINCT", "content", ")", "FROM", "TV_Channel", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel"], "question": "List the number of different series names and contents in the TV Channel table.", "question_toks": ["List", "the", "number", "of", "different", "series", "names", "and", "contents", "in", "the", "TV", "Channel", "table", "."], "dataset_name": "spider", "guid": 3255}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | List all directors along with the number of films directed by each director.", "sql": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by", "example": {"db_id": "cinema", "query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by", "query_toks": ["SELECT", "directed_by", ",", "count", "(", "*", ")", "FROM", "film", "GROUP", "BY", "directed_by"], "query_toks_no_value": ["select", "directed_by", ",", "count", "(", "*", ")", "from", "film", "group", "by", "directed_by"], "question": "List all directors along with the number of films directed by each director.", "question_toks": ["List", "all", "directors", "along", "with", "the", "number", "of", "films", "directed", "by", "each", "director", "."], "dataset_name": "spider", "guid": 3256}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the movie titles and average rating of the movies with the lowest average rating?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.mID", "ORDER", "BY", "avg", "(", "T1.stars", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "mid", "order", "by", "avg", "(", "t1", ".", "stars", ")", "limit", "value"], "question": "What are the movie titles and average rating of the movies with the lowest average rating?", "question_toks": ["What", "are", "the", "movie", "titles", "and", "average", "rating", "of", "the", "movies", "with", "the", "lowest", "average", "rating", "?"], "dataset_name": "spider", "guid": 3257}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is minimum and maximum share of TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "example": {"db_id": "tvshow", "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "query_toks": ["SELECT", "max", "(", "SHARE", ")", ",", "min", "(", "SHARE", ")", "FROM", "TV_series", ";"], "query_toks_no_value": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series"], "question": "What is minimum and maximum share of TV series?", "question_toks": ["What", "is", "minimum", "and", "maximum", "share", "of", "TV", "series", "?"], "dataset_name": "spider", "guid": 3258}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all movies that received 3 or 4 stars?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "example": {"db_id": "movie_1", "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "query_toks": ["SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", "=", "3", "INTERSECT", "SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", "=", "4"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", "=", "value", "intersect", "select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", "=", "value"], "question": "What are the names of all movies that received 3 or 4 stars?", "question_toks": ["What", "are", "the", "names", "of", "all", "movies", "that", "received", "3", "or", "4", "stars", "?"], "dataset_name": "spider", "guid": 3259}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies by directors born in \" Los Angeles \"", "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.birth_city  =  \"Los Angeles\";", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.birth_city  =  \"Los Angeles\";", "query_toks": ["SELECT", "t3.title", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.birth_city", "=", "``", "Los", "Angeles", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "birth_city", "=", "value"], "question": "Find all movies by directors born in \" Los Angeles \"", "question_toks": ["Find", "all", "movies", "by", "directors", "born", "in", "``", "Los", "Angeles", "``"], "dataset_name": "spider", "guid": 3260}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the movies with the highest average rating. Return the movie titles and average rating.", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.mID", "ORDER", "BY", "avg", "(", "T1.stars", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "mid", "order", "by", "avg", "(", "t1", ".", "stars", ")", "desc", "limit", "value"], "question": "Find the movies with the highest average rating. Return the movie titles and average rating.", "question_toks": ["Find", "the", "movies", "with", "the", "highest", "average", "rating", ".", "Return", "the", "movie", "titles", "and", "average", "rating", "."], "dataset_name": "spider", "guid": 3261}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all the female actors in the movie \" Saving Private Ryan \"", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  \"female\" AND t3.title  =  \"Saving Private Ryan\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  \"female\" AND t3.title  =  \"Saving Private Ryan\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t1.gender", "=", "``", "female", "''", "AND", "t3.title", "=", "``", "Saving", "Private", "Ryan", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t1", ".", "gender", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Find all the female actors in the movie \" Saving Private Ryan \"", "question_toks": ["Find", "all", "the", "female", "actors", "in", "the", "movie", "``", "Saving", "Private", "Ryan", "``"], "dataset_name": "spider", "guid": 3262}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query_toks": ["SELECT", "Package_Option", "FROM", "TV_Channel", "WHERE", "series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "value"], "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "question_toks": ["What", "is", "the", "Package", "Option", "of", "TV", "Channel", "with", "serial", "name", "``", "Sky", "Radio", "''", "?"], "dataset_name": "spider", "guid": 3263}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors born in \" Tehran \"", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Tehran", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value"], "question": "Find all actors born in \" Tehran \"", "question_toks": ["Find", "all", "actors", "born", "in", "``", "Tehran", "``"], "dataset_name": "spider", "guid": 3264}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are all the tv series created by \" Shonda Rhimes \" ?", "sql": "SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Shonda Rhimes\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Shonda Rhimes\";", "query_toks": ["SELECT", "t2.title", "FROM", "producer", "AS", "t1", "JOIN", "made_by", "AS", "t3", "ON", "t1.pid", "=", "t3.pid", "JOIN", "tv_series", "AS", "t2", "ON", "t2.sid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Shonda", "Rhimes", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "producer", "as", "t1", "join", "made_by", "as", "t3", "on", "t1", ".", "pid", "=", "t3", ".", "pid", "join", "tv_series", "as", "t2", "on", "t2", ".", "sid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "What are all the tv series created by \" Shonda Rhimes \" ?", "question_toks": ["What", "are", "all", "the", "tv", "series", "created", "by", "``", "Shonda", "Rhimes", "``", "?"], "dataset_name": "spider", "guid": 3265}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies in which \" Robin Wright \" appears", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Robin", "Wright", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "Find all movies in which \" Robin Wright \" appears", "question_toks": ["Find", "all", "movies", "in", "which", "``", "Robin", "Wright", "``", "appears"], "dataset_name": "spider", "guid": 3266}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of movies directed by \" Woody Allen \" per year ?", "sql": "SELECT COUNT ( DISTINCT t3.title  )  ,  t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Woody Allen\" GROUP BY t3.release_year;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t3.title  )  ,  t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Woody Allen\" GROUP BY t3.release_year;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", ",", "t3.release_year", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Woody", "Allen", "''", "GROUP", "BY", "t3.release_year", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", ",", "t3", ".", "release_year", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value", "group", "by", "t3", ".", "release_year"], "question": "What is the number of movies directed by \" Woody Allen \" per year ?", "question_toks": ["What", "is", "the", "number", "of", "movies", "directed", "by", "``", "Woody", "Allen", "``", "per", "year", "?"], "dataset_name": "spider", "guid": 3267}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Count the number of markets that have a number of cities lower than 300.", "sql": "SELECT count(*) FROM market WHERE Number_cities  <  300", "example": {"db_id": "film_rank", "query": "SELECT count(*) FROM market WHERE Number_cities  <  300", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "market", "WHERE", "Number_cities", "<", "300"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "market", "where", "number_cities", "<", "value"], "question": "Count the number of markets that have a number of cities lower than 300.", "question_toks": ["Count", "the", "number", "of", "markets", "that", "have", "a", "number", "of", "cities", "lower", "than", "300", "."], "dataset_name": "spider", "guid": 3268}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the genre of the movie \" Jurassic Park \" ?", "sql": "SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"Jurassic Park\";", "example": {"db_id": "imdb", "query": "SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"Jurassic Park\";", "query_toks": ["SELECT", "t2.genre", "FROM", "genre", "AS", "t2", "JOIN", "classification", "AS", "t1", "ON", "t2.gid", "=", "t1.gid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t3.title", "=", "``", "Jurassic", "Park", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "genre", "from", "genre", "as", "t2", "join", "classification", "as", "t1", "on", "t2", ".", "gid", "=", "t1", ".", "gid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "What is the genre of the movie \" Jurassic Park \" ?", "question_toks": ["What", "is", "the", "genre", "of", "the", "movie", "``", "Jurassic", "Park", "``", "?"], "dataset_name": "spider", "guid": 3269}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | what is the number of different channel owners?", "sql": "SELECT count(DISTINCT OWNER) FROM channel", "example": {"db_id": "program_share", "query": "SELECT count(DISTINCT OWNER) FROM channel", "query_toks": ["SELECT", "count", "(", "DISTINCT", "OWNER", ")", "FROM", "channel"], "query_toks_no_value": ["select", "count", "(", "distinct", "owner", ")", "from", "channel"], "question": "what is the number of different channel owners?", "question_toks": ["what", "is", "the", "number", "of", "different", "channel", "owners", "?"], "dataset_name": "spider", "guid": 3270}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List all countries of markets in descending order of number of cities.", "sql": "SELECT Country FROM market ORDER BY Number_cities DESC", "example": {"db_id": "film_rank", "query": "SELECT Country FROM market ORDER BY Number_cities DESC", "query_toks": ["SELECT", "Country", "FROM", "market", "ORDER", "BY", "Number_cities", "DESC"], "query_toks_no_value": ["select", "country", "from", "market", "order", "by", "number_cities", "desc"], "question": "List all countries of markets in descending order of number of cities.", "question_toks": ["List", "all", "countries", "of", "markets", "in", "descending", "order", "of", "number", "of", "cities", "."], "dataset_name": "spider", "guid": 3271}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of movies in which \" Shahab Hosseini \" acted ?", "sql": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Shahab", "Hosseini", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "What is the number of movies in which \" Shahab Hosseini \" acted ?", "question_toks": ["What", "is", "the", "number", "of", "movies", "in", "which", "``", "Shahab", "Hosseini", "``", "acted", "?"], "dataset_name": "spider", "guid": 3272}}