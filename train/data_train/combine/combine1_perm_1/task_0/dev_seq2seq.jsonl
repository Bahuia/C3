{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the start and end dates of behavior incidents of students with last name \"Fahey\".", "sql": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.date_incident_start ,  date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.last_name  =  \"Fahey\"", "query_toks": ["SELECT", "T1.date_incident_start", ",", "date_incident_end", "FROM", "Behavior_Incident", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "WHERE", "T2.last_name", "=", "``", "Fahey", "''"], "query_toks_no_value": ["select", "t1", ".", "date_incident_start", ",", "date_incident_end", "from", "behavior_incident", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "where", "t2", ".", "last_name", "=", "value"], "question": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".", "question_toks": ["Find", "the", "start", "and", "end", "dates", "of", "behavior", "incidents", "of", "students", "with", "last", "name", "``", "Fahey", "''", "."], "dataset_name": "spider", "guid": 2116}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names and scores of wines that are made of white color grapes?", "sql": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"", "example": {"db_id": "wine_1", "query": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"", "query_toks": ["SELECT", "T2.Name", ",", "T2.Score", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "White", "''"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "score", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value"], "question": "What are the names and scores of wines that are made of white color grapes?", "question_toks": ["What", "are", "the", "names", "and", "scores", "of", "wines", "that", "are", "made", "of", "white", "color", "grapes", "?"], "dataset_name": "spider", "guid": 2117}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the distinct names of wines that have appellations in the North Coast area?", "sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "APPELLATIONs", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.Area", "=", "``", "North", "Coast", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "area", "=", "value"], "question": "What are the distinct names of wines that have appellations in the North Coast area?", "question_toks": ["What", "are", "the", "distinct", "names", "of", "wines", "that", "have", "appellations", "in", "the", "North", "Coast", "area", "?"], "dataset_name": "spider", "guid": 2118}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show white percentages of cities and the crime rates of counties they are in.", "sql": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "example": {"db_id": "county_public_safety", "query": "SELECT T1.White ,  T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "query_toks": ["SELECT", "T1.White", ",", "T2.Crime_rate", "FROM", "city", "AS", "T1", "JOIN", "county_public_safety", "AS", "T2", "ON", "T1.County_ID", "=", "T2.County_ID"], "query_toks_no_value": ["select", "t1", ".", "white", ",", "t2", ".", "crime_rate", "from", "city", "as", "t1", "join", "county_public_safety", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "county_id"], "question": "Show white percentages of cities and the crime rates of counties they are in.", "question_toks": ["Show", "white", "percentages", "of", "cities", "and", "the", "crime", "rates", "of", "counties", "they", "are", "in", "."], "dataset_name": "spider", "guid": 2119}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | How many churches have a wedding in year 2016?", "sql": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016", "example": {"db_id": "wedding", "query": "SELECT COUNT (DISTINCT church_id) FROM wedding WHERE YEAR  =  2016", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "church_id", ")", "FROM", "wedding", "WHERE", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "count", "(", "distinct", "church_id", ")", "from", "wedding", "where", "year", "=", "value"], "question": "How many churches have a wedding in year 2016?", "question_toks": ["How", "many", "churches", "have", "a", "wedding", "in", "year", "2016", "?"], "dataset_name": "spider", "guid": 2120}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the teams with the most technicians?", "sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "machine_repair", "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Team", "FROM", "technician", "GROUP", "BY", "Team", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "team", "from", "technician", "group", "by", "team", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the teams with the most technicians?", "question_toks": ["What", "are", "the", "teams", "with", "the", "most", "technicians", "?"], "dataset_name": "spider", "guid": 2121}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.", "sql": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id", "query_toks": ["SELECT", "T1.fault_short_name", ",", "T3.skill_description", "FROM", "Part_Faults", "AS", "T1", "JOIN", "Skills_Required_To_Fix", "AS", "T2", "ON", "T1.part_fault_id", "=", "T2.part_fault_id", "JOIN", "Skills", "AS", "T3", "ON", "T2.skill_id", "=", "T3.skill_id"], "query_toks_no_value": ["select", "t1", ".", "fault_short_name", ",", "t3", ".", "skill_description", "from", "part_faults", "as", "t1", "join", "skills_required_to_fix", "as", "t2", "on", "t1", ".", "part_fault_id", "=", "t2", ".", "part_fault_id", "join", "skills", "as", "t3", "on", "t2", ".", "skill_id", "=", "t3", ".", "skill_id"], "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.", "question_toks": ["For", "all", "the", "faults", "of", "different", "parts", ",", "what", "are", "all", "the", "decriptions", "of", "the", "skills", "required", "to", "fix", "them", "?", "List", "the", "name", "of", "the", "faults", "and", "the", "skill", "description", "."], "dataset_name": "spider", "guid": 2122}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What is maximum and minimum death toll caused each time?", "sql": "SELECT max(killed) ,  min(killed) FROM death", "example": {"db_id": "battle_death", "query": "SELECT max(killed) ,  min(killed) FROM death", "query_toks": ["SELECT", "max", "(", "killed", ")", ",", "min", "(", "killed", ")", "FROM", "death"], "query_toks_no_value": ["select", "max", "(", "killed", ")", ",", "min", "(", "killed", ")", "from", "death"], "question": "What is maximum and minimum death toll caused each time?", "question_toks": ["What", "is", "maximum", "and", "minimum", "death", "toll", "caused", "each", "time", "?"], "dataset_name": "spider", "guid": 2123}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.", "sql": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.company_id ,  T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id HAVING count(*)  >=  2 UNION SELECT T3.company_id ,  T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id  =  T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.company_id", ",", "T1.company_name", "FROM", "Third_Party_Companies", "AS", "T1", "JOIN", "Maintenance_Engineers", "AS", "T2", "ON", "T1.company_id", "=", "T2.company_id", "GROUP", "BY", "T1.company_id", "HAVING", "count", "(", "*", ")", ">", "=", "2", "UNION", "SELECT", "T3.company_id", ",", "T3.company_name", "FROM", "Third_Party_Companies", "AS", "T3", "JOIN", "Maintenance_Contracts", "AS", "T4", "ON", "T3.company_id", "=", "T4.maintenance_contract_company_id", "GROUP", "BY", "T3.company_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "company_id", ",", "t1", ".", "company_name", "from", "third_party_companies", "as", "t1", "join", "maintenance_engineers", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "company_id", "group", "by", "t1", ".", "company_id", "having", "count", "(", "*", ")", ">", "=", "value", "union", "select", "t3", ".", "company_id", ",", "t3", ".", "company_name", "from", "third_party_companies", "as", "t3", "join", "maintenance_contracts", "as", "t4", "on", "t3", ".", "company_id", "=", "t4", ".", "maintenance_contract_company_id", "group", "by", "t3", ".", "company_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.", "question_toks": ["Which", "third", "party", "companies", "have", "at", "least", "2", "maintenance", "engineers", "or", "have", "at", "least", "2", "maintenance", "contracts", "?", "List", "the", "company", "id", "and", "name", "."], "dataset_name": "spider", "guid": 2124}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of the counties of public safety, ordered by population descending?", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "query_toks": ["SELECT", "Name", "FROM", "county_public_safety", "ORDER", "BY", "Population", "DESC"], "query_toks_no_value": ["select", "name", "from", "county_public_safety", "order", "by", "population", "desc"], "question": "What are the names of the counties of public safety, ordered by population descending?", "question_toks": ["What", "are", "the", "names", "of", "the", "counties", "of", "public", "safety", ",", "ordered", "by", "population", "descending", "?"], "dataset_name": "spider", "guid": 2125}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the email addresses of teachers whose address has zip code \"918\"?", "sql": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id WHERE T1.zip_postcode  =  \"918\"", "query_toks": ["SELECT", "T2.email_address", "FROM", "Addresses", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T1.zip_postcode", "=", "``", "918", "''"], "query_toks_no_value": ["select", "t2", ".", "email_address", "from", "addresses", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "zip_postcode", "=", "value"], "question": "What are the email addresses of teachers whose address has zip code \"918\"?", "question_toks": ["What", "are", "the", "email", "addresses", "of", "teachers", "whose", "address", "has", "zip", "code", "``", "918", "''", "?"], "dataset_name": "spider", "guid": 2126}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Which police forces operate in both counties that are located in the East and in the West?", "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"", "example": {"db_id": "county_public_safety", "query": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"", "query_toks": ["SELECT", "Police_force", "FROM", "county_public_safety", "WHERE", "LOCATION", "=", "``", "East", "''", "INTERSECT", "SELECT", "Police_force", "FROM", "county_public_safety", "WHERE", "LOCATION", "=", "``", "West", "''"], "query_toks_no_value": ["select", "police_force", "from", "county_public_safety", "where", "location", "=", "value", "intersect", "select", "police_force", "from", "county_public_safety", "where", "location", "=", "value"], "question": "Which police forces operate in both counties that are located in the East and in the West?", "question_toks": ["Which", "police", "forces", "operate", "in", "both", "counties", "that", "are", "located", "in", "the", "East", "and", "in", "the", "West", "?"], "dataset_name": "spider", "guid": 2127}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the names of perpetrators in country \"China\" or \"Japan\"?", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"", "example": {"db_id": "perpetrator", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Country", "=", "``", "China", "''", "OR", "T2.Country", "=", "``", "Japan", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "country", "=", "value", "or", "t2", ".", "country", "=", "value"], "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?", "question_toks": ["What", "are", "the", "names", "of", "perpetrators", "in", "country", "``", "China", "''", "or", "``", "Japan", "''", "?"], "dataset_name": "spider", "guid": 2128}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Show the status of the city that has hosted the greatest number of competitions.", "sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "farm", "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Status", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "GROUP", "BY", "T2.Host_city_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "status", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "group", "by", "t2", ".", "host_city_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the status of the city that has hosted the greatest number of competitions.", "question_toks": ["Show", "the", "status", "of", "the", "city", "that", "has", "hosted", "the", "greatest", "number", "of", "competitions", "."], "dataset_name": "spider", "guid": 2129}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the official names of cities that have not hosted a farm competition?", "sql": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "example": {"db_id": "farm", "query": "SELECT Official_Name FROM city WHERE City_ID NOT IN (SELECT Host_city_ID FROM farm_competition)", "query_toks": ["SELECT", "Official_Name", "FROM", "city", "WHERE", "City_ID", "NOT", "IN", "(", "SELECT", "Host_city_ID", "FROM", "farm_competition", ")"], "query_toks_no_value": ["select", "official_name", "from", "city", "where", "city_id", "not", "in", "(", "select", "host_city_id", "from", "farm_competition", ")"], "question": "What are the official names of cities that have not hosted a farm competition?", "question_toks": ["What", "are", "the", "official", "names", "of", "cities", "that", "have", "not", "hosted", "a", "farm", "competition", "?"], "dataset_name": "spider", "guid": 2130}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show all church names that have hosted least two weddings.", "sql": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2", "example": {"db_id": "wedding", "query": "SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id GROUP BY T1.church_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.name", "FROM", "church", "AS", "T1", "JOIN", "wedding", "AS", "T2", "ON", "T1.church_id", "=", "T2.church_id", "GROUP", "BY", "T1.church_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "church", "as", "t1", "join", "wedding", "as", "t2", "on", "t1", ".", "church_id", "=", "t2", ".", "church_id", "group", "by", "t1", ".", "church_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show all church names that have hosted least two weddings.", "question_toks": ["Show", "all", "church", "names", "that", "have", "hosted", "least", "two", "weddings", "."], "dataset_name": "spider", "guid": 2131}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Please show the different statuses, ordered by the number of cities that have each.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "example": {"db_id": "farm", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "query_toks": ["SELECT", "Status", "FROM", "city", "GROUP", "BY", "Status", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "status", "from", "city", "group", "by", "status", "order", "by", "count", "(", "*", ")", "asc"], "question": "Please show the different statuses, ordered by the number of cities that have each.", "question_toks": ["Please", "show", "the", "different", "statuses", ",", "ordered", "by", "the", "number", "of", "cities", "that", "have", "each", "."], "dataset_name": "spider", "guid": 2132}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Count the number of countries.", "sql": "SELECT count(*) FROM county_public_safety", "example": {"db_id": "county_public_safety", "query": "SELECT count(*) FROM county_public_safety", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "county_public_safety"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "county_public_safety"], "question": "Count the number of countries.", "question_toks": ["Count", "the", "number", "of", "countries", "."], "dataset_name": "spider", "guid": 2133}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What is the name of the perpetrator with the biggest weight.", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1", "example": {"db_id": "perpetrator", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Weight", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "weight", "desc", "limit", "value"], "question": "What is the name of the perpetrator with the biggest weight.", "question_toks": ["What", "is", "the", "name", "of", "the", "perpetrator", "with", "the", "biggest", "weight", "."], "dataset_name": "spider", "guid": 2134}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | What are all the fault descriptions and the fault status of all the faults recoreded in the logs?", "sql": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id", "query_toks": ["SELECT", "T1.fault_description", ",", "T2.fault_status", "FROM", "Fault_Log", "AS", "T1", "JOIN", "Fault_Log_Parts", "AS", "T2", "ON", "T1.fault_log_entry_id", "=", "T2.fault_log_entry_id"], "query_toks_no_value": ["select", "t1", ".", "fault_description", ",", "t2", ".", "fault_status", "from", "fault_log", "as", "t1", "join", "fault_log_parts", "as", "t2", "on", "t1", ".", "fault_log_entry_id", "=", "t2", ".", "fault_log_entry_id"], "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?", "question_toks": ["What", "are", "all", "the", "fault", "descriptions", "and", "the", "fault", "status", "of", "all", "the", "faults", "recoreded", "in", "the", "logs", "?"], "dataset_name": "spider", "guid": 2135}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | How many architects are female?", "sql": "SELECT count(*) FROM architect WHERE gender  =  'female'", "example": {"db_id": "architecture", "query": "SELECT count(*) FROM architect WHERE gender  =  'female'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "architect", "WHERE", "gender", "=", "'female", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "architect", "where", "gender", "=", "value"], "question": "How many architects are female?", "question_toks": ["How", "many", "architects", "are", "female", "?"], "dataset_name": "spider", "guid": 2136}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | List the name, date and result of each battle.", "sql": "SELECT name ,  date FROM battle", "example": {"db_id": "battle_death", "query": "SELECT name ,  date FROM battle", "query_toks": ["SELECT", "name", ",", "date", "FROM", "battle"], "query_toks_no_value": ["select", "name", ",", "date", "from", "battle"], "question": "List the name, date and result of each battle.", "question_toks": ["List", "the", "name", ",", "date", "and", "result", "of", "each", "battle", "."], "dataset_name": "spider", "guid": 2137}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show names of technicians and series of machines they are assigned to repair.", "sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "example": {"db_id": "machine_repair", "query": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "query_toks": ["SELECT", "T3.Name", ",", "T2.Machine_series", "FROM", "repair_assignment", "AS", "T1", "JOIN", "machine", "AS", "T2", "ON", "T1.machine_id", "=", "T2.machine_id", "JOIN", "technician", "AS", "T3", "ON", "T1.technician_ID", "=", "T3.technician_ID"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "machine_series", "from", "repair_assignment", "as", "t1", "join", "machine", "as", "t2", "on", "t1", ".", "machine_id", "=", "t2", ".", "machine_id", "join", "technician", "as", "t3", "on", "t1", ".", "technician_id", "=", "t3", ".", "technician_id"], "question": "Show names of technicians and series of machines they are assigned to repair.", "question_toks": ["Show", "names", "of", "technicians", "and", "series", "of", "machines", "they", "are", "assigned", "to", "repair", "."], "dataset_name": "spider", "guid": 2138}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Return all distinct detention type codes.", "sql": "SELECT DISTINCT detention_type_code FROM Detention", "example": {"db_id": "behavior_monitoring", "query": "SELECT DISTINCT detention_type_code FROM Detention", "query_toks": ["SELECT", "DISTINCT", "detention_type_code", "FROM", "Detention"], "query_toks_no_value": ["select", "distinct", "detention_type_code", "from", "detention"], "question": "Return all distinct detention type codes.", "question_toks": ["Return", "all", "distinct", "detention", "type", "codes", "."], "dataset_name": "spider", "guid": 2139}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the start and end dates of detentions of teachers with last name \"Schultz\".", "sql": "SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schultz\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.datetime_detention_start ,  datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.last_name  =  \"Schultz\"", "query_toks": ["SELECT", "T1.datetime_detention_start", ",", "datetime_detention_end", "FROM", "Detention", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.teacher_id", "=", "T2.teacher_id", "WHERE", "T2.last_name", "=", "``", "Schultz", "''"], "query_toks_no_value": ["select", "t1", ".", "datetime_detention_start", ",", "datetime_detention_end", "from", "detention", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "where", "t2", ".", "last_name", "=", "value"], "question": "Find the start and end dates of detentions of teachers with last name \"Schultz\".", "question_toks": ["Find", "the", "start", "and", "end", "dates", "of", "detentions", "of", "teachers", "with", "last", "name", "``", "Schultz", "''", "."], "dataset_name": "spider", "guid": 2140}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What is the most common status across all cities?", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "farm", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Status", "FROM", "city", "GROUP", "BY", "Status", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "status", "from", "city", "group", "by", "status", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common status across all cities?", "question_toks": ["What", "is", "the", "most", "common", "status", "across", "all", "cities", "?"], "dataset_name": "spider", "guid": 2141}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which part fault requires the most number of skills to fix? List part id and name.", "sql": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.part_id", ",", "T1.part_name", "FROM", "Parts", "AS", "T1", "JOIN", "Part_Faults", "AS", "T2", "ON", "T1.part_id", "=", "T2.part_id", "JOIN", "Skills_Required_To_Fix", "AS", "T3", "ON", "T2.part_fault_id", "=", "T3.part_fault_id", "GROUP", "BY", "T1.part_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "part_id", ",", "t1", ".", "part_name", "from", "parts", "as", "t1", "join", "part_faults", "as", "t2", "on", "t1", ".", "part_id", "=", "t2", ".", "part_id", "join", "skills_required_to_fix", "as", "t3", "on", "t2", ".", "part_fault_id", "=", "t3", ".", "part_fault_id", "group", "by", "t1", ".", "part_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which part fault requires the most number of skills to fix? List part id and name.", "question_toks": ["Which", "part", "fault", "requires", "the", "most", "number", "of", "skills", "to", "fix", "?", "List", "part", "id", "and", "name", "."], "dataset_name": "spider", "guid": 2142}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the names of cities in counties that have a crime rate less than 100.", "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "example": {"db_id": "county_public_safety", "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "query_toks": ["SELECT", "name", "FROM", "city", "WHERE", "county_id", "IN", "(", "SELECT", "county_id", "FROM", "county_public_safety", "WHERE", "Crime_rate", "<", "100", ")"], "query_toks_no_value": ["select", "name", "from", "city", "where", "county_id", "in", "(", "select", "county_id", "from", "county_public_safety", "where", "crime_rate", "<", "value", ")"], "question": "Show the names of cities in counties that have a crime rate less than 100.", "question_toks": ["Show", "the", "names", "of", "cities", "in", "counties", "that", "have", "a", "crime", "rate", "less", "than", "100", "."], "dataset_name": "spider", "guid": 2143}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of the five cities with the greatest proportion of white people?", "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "query_toks": ["SELECT", "Name", "FROM", "city", "ORDER", "BY", "White", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "name", "from", "city", "order", "by", "white", "desc", "limit", "value"], "question": "What are the names of the five cities with the greatest proportion of white people?", "question_toks": ["What", "are", "the", "names", "of", "the", "five", "cities", "with", "the", "greatest", "proportion", "of", "white", "people", "?"], "dataset_name": "spider", "guid": 2144}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | List the venues of debates in ascending order of the number of audience.", "sql": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC", "example": {"db_id": "debate", "query": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC", "query_toks": ["SELECT", "Venue", "FROM", "debate", "ORDER", "BY", "Num_of_Audience", "ASC"], "query_toks_no_value": ["select", "venue", "from", "debate", "order", "by", "num_of_audience", "asc"], "question": "List the venues of debates in ascending order of the number of audience.", "question_toks": ["List", "the", "venues", "of", "debates", "in", "ascending", "order", "of", "the", "number", "of", "audience", "."], "dataset_name": "spider", "guid": 2145}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Find the official names of cities with population bigger than 1500 or smaller than 500.", "sql": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "example": {"db_id": "farm", "query": "SELECT Official_Name FROM city WHERE Population  >  1500 OR Population  <  500", "query_toks": ["SELECT", "Official_Name", "FROM", "city", "WHERE", "Population", ">", "1500", "OR", "Population", "<", "500"], "query_toks_no_value": ["select", "official_name", "from", "city", "where", "population", ">", "value", "or", "population", "<", "value"], "question": "Find the official names of cities with population bigger than 1500 or smaller than 500.", "question_toks": ["Find", "the", "official", "names", "of", "cities", "with", "population", "bigger", "than", "1500", "or", "smaller", "than", "500", "."], "dataset_name": "spider", "guid": 2146}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | How many different kinds of information sources are there for injury accidents?", "sql": "SELECT count(DISTINCT SOURCE) FROM injury_accident", "example": {"db_id": "game_injury", "query": "SELECT count(DISTINCT SOURCE) FROM injury_accident", "query_toks": ["SELECT", "count", "(", "DISTINCT", "SOURCE", ")", "FROM", "injury_accident"], "query_toks_no_value": ["select", "count", "(", "distinct", "source", ")", "from", "injury_accident"], "question": "How many different kinds of information sources are there for injury accidents?", "question_toks": ["How", "many", "different", "kinds", "of", "information", "sources", "are", "there", "for", "injury", "accidents", "?"], "dataset_name": "spider", "guid": 2147}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which parts have more than 2 faults? Show the part name and id.", "sql": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.part_name ,  T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_id HAVING count(*)  >  2", "query_toks": ["SELECT", "T1.part_name", ",", "T1.part_id", "FROM", "Parts", "AS", "T1", "JOIN", "Part_Faults", "AS", "T2", "ON", "T1.part_id", "=", "T2.part_id", "GROUP", "BY", "T1.part_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "part_name", ",", "t1", ".", "part_id", "from", "parts", "as", "t1", "join", "part_faults", "as", "t2", "on", "t1", ".", "part_id", "=", "t2", ".", "part_id", "group", "by", "t1", ".", "part_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which parts have more than 2 faults? Show the part name and id.", "question_toks": ["Which", "parts", "have", "more", "than", "2", "faults", "?", "Show", "the", "part", "name", "and", "id", "."], "dataset_name": "spider", "guid": 2148}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show names of technicians and the number of machines they are assigned to repair.", "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "example": {"db_id": "machine_repair", "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "query_toks": ["SELECT", "T2.Name", ",", "COUNT", "(", "*", ")", "FROM", "repair_assignment", "AS", "T1", "JOIN", "technician", "AS", "T2", "ON", "T1.technician_ID", "=", "T2.technician_ID", "GROUP", "BY", "T2.Name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "repair_assignment", "as", "t1", "join", "technician", "as", "t2", "on", "t1", ".", "technician_id", "=", "t2", ".", "technician_id", "group", "by", "t2", ".", "name"], "question": "Show names of technicians and the number of machines they are assigned to repair.", "question_toks": ["Show", "names", "of", "technicians", "and", "the", "number", "of", "machines", "they", "are", "assigned", "to", "repair", "."], "dataset_name": "spider", "guid": 2149}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | How many different statuses do cities have?", "sql": "SELECT count(DISTINCT Status) FROM city", "example": {"db_id": "farm", "query": "SELECT count(DISTINCT Status) FROM city", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Status", ")", "FROM", "city"], "query_toks_no_value": ["select", "count", "(", "distinct", "status", ")", "from", "city"], "question": "How many different statuses do cities have?", "question_toks": ["How", "many", "different", "statuses", "do", "cities", "have", "?"], "dataset_name": "spider", "guid": 2150}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | List the names of technicians in ascending order of age.", "sql": "SELECT Name FROM technician ORDER BY Age ASC", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "technician", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "technician", "order", "by", "age", "asc"], "question": "List the names of technicians in ascending order of age.", "question_toks": ["List", "the", "names", "of", "technicians", "in", "ascending", "order", "of", "age", "."], "dataset_name": "spider", "guid": 2151}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | List the date of perpetrators in descending order of the number of people killed.", "sql": "SELECT Date FROM perpetrator ORDER BY Killed DESC", "example": {"db_id": "perpetrator", "query": "SELECT Date FROM perpetrator ORDER BY Killed DESC", "query_toks": ["SELECT", "Date", "FROM", "perpetrator", "ORDER", "BY", "Killed", "DESC"], "query_toks_no_value": ["select", "date", "from", "perpetrator", "order", "by", "killed", "desc"], "question": "List the date of perpetrators in descending order of the number of people killed.", "question_toks": ["List", "the", "date", "of", "perpetrators", "in", "descending", "order", "of", "the", "number", "of", "people", "killed", "."], "dataset_name": "spider", "guid": 2152}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What is the gender of the teacher with last name \"Medhurst\"?", "sql": "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT gender FROM TEACHERS WHERE last_name  =  \"Medhurst\"", "query_toks": ["SELECT", "gender", "FROM", "TEACHERS", "WHERE", "last_name", "=", "``", "Medhurst", "''"], "query_toks_no_value": ["select", "gender", "from", "teachers", "where", "last_name", "=", "value"], "question": "What is the gender of the teacher with last name \"Medhurst\"?", "question_toks": ["What", "is", "the", "gender", "of", "the", "teacher", "with", "last", "name", "``", "Medhurst", "''", "?"], "dataset_name": "spider", "guid": 2153}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What is the total horses record for each farm, sorted ascending?", "sql": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "example": {"db_id": "farm", "query": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC", "query_toks": ["SELECT", "Total_Horses", "FROM", "farm", "ORDER", "BY", "Total_Horses", "ASC"], "query_toks_no_value": ["select", "total_horses", "from", "farm", "order", "by", "total_horses", "asc"], "question": "What is the total horses record for each farm, sorted ascending?", "question_toks": ["What", "is", "the", "total", "horses", "record", "for", "each", "farm", ",", "sorted", "ascending", "?"], "dataset_name": "spider", "guid": 2154}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the themes of farm competitions sorted by year in ascending order?", "sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "example": {"db_id": "farm", "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "query_toks": ["SELECT", "Theme", "FROM", "farm_competition", "ORDER", "BY", "YEAR", "ASC"], "query_toks_no_value": ["select", "theme", "from", "farm_competition", "order", "by", "year", "asc"], "question": "What are the themes of farm competitions sorted by year in ascending order?", "question_toks": ["What", "are", "the", "themes", "of", "farm", "competitions", "sorted", "by", "year", "in", "ascending", "order", "?"], "dataset_name": "spider", "guid": 2155}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | How many wines are produced at Robert Biale winery?", "sql": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"", "example": {"db_id": "wine_1", "query": "SELECT count(*) FROM WINE WHERE Winery  =  \"Robert Biale\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "WINE", "WHERE", "Winery", "=", "``", "Robert", "Biale", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "wine", "where", "winery", "=", "value"], "question": "How many wines are produced at Robert Biale winery?", "question_toks": ["How", "many", "wines", "are", "produced", "at", "Robert", "Biale", "winery", "?"], "dataset_name": "spider", "guid": 2156}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which gender makes up the majority of the staff?", "sql": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT gender FROM staff GROUP BY gender ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "gender", "FROM", "staff", "GROUP", "BY", "gender", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "gender", "from", "staff", "group", "by", "gender", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which gender makes up the majority of the staff?", "question_toks": ["Which", "gender", "makes", "up", "the", "majority", "of", "the", "staff", "?"], "dataset_name": "spider", "guid": 2157}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?", "sql": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'", "example": {"db_id": "game_injury", "query": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'", "query_toks": ["SELECT", "player", ",", "number_of_matches", ",", "SOURCE", "FROM", "injury_accident", "WHERE", "injury", "!", "=", "'Knee", "problem", "'"], "query_toks_no_value": ["select", "player", ",", "number_of_matches", ",", "source", "from", "injury_accident", "where", "injury", "!", "=", "value"], "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?", "question_toks": ["What", "are", "the", "player", "name", ",", "number", "of", "matches", ",", "and", "information", "source", "for", "players", "who", "do", "not", "suffer", "from", "injury", "of", "'Knee", "problem", "'", "?"], "dataset_name": "spider", "guid": 2158}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of the technicians by ascending order of quality rank for the machine they are assigned?", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "example": {"db_id": "machine_repair", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "query_toks": ["SELECT", "T3.Name", "FROM", "repair_assignment", "AS", "T1", "JOIN", "machine", "AS", "T2", "ON", "T1.machine_id", "=", "T2.machine_id", "JOIN", "technician", "AS", "T3", "ON", "T1.technician_ID", "=", "T3.technician_ID", "ORDER", "BY", "T2.quality_rank"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "repair_assignment", "as", "t1", "join", "machine", "as", "t2", "on", "t1", ".", "machine_id", "=", "t2", ".", "machine_id", "join", "technician", "as", "t3", "on", "t1", ".", "technician_id", "=", "t3", ".", "technician_id", "order", "by", "t2", ".", "quality_rank"], "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?", "question_toks": ["What", "are", "the", "names", "of", "the", "technicians", "by", "ascending", "order", "of", "quality", "rank", "for", "the", "machine", "they", "are", "assigned", "?"], "dataset_name": "spider", "guid": 2159}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the appelations for wines produced after 2008 but not in the Central Coast area?", "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"", "example": {"db_id": "wine_1", "query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"", "query_toks": ["SELECT", "Appelation", "FROM", "WINE", "WHERE", "YEAR", ">", "2008", "EXCEPT", "SELECT", "Appelation", "FROM", "APPELLATIONS", "WHERE", "Area", "=", "``", "Central", "Coast", "''"], "query_toks_no_value": ["select", "appelation", "from", "wine", "where", "year", ">", "value", "except", "select", "appelation", "from", "appellations", "where", "area", "=", "value"], "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?", "question_toks": ["What", "are", "the", "appelations", "for", "wines", "produced", "after", "2008", "but", "not", "in", "the", "Central", "Coast", "area", "?"], "dataset_name": "spider", "guid": 2160}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What is the cell phone number of the student whose address has the lowest monthly rental?", "sql": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.monthly_rental ASC LIMIT 1", "query_toks": ["SELECT", "T2.cell_mobile_number", "FROM", "Student_Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "ORDER", "BY", "T1.monthly_rental", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "cell_mobile_number", "from", "student_addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "order", "by", "t1", ".", "monthly_rental", "asc", "limit", "value"], "question": "What is the cell phone number of the student whose address has the lowest monthly rental?", "question_toks": ["What", "is", "the", "cell", "phone", "number", "of", "the", "student", "whose", "address", "has", "the", "lowest", "monthly", "rental", "?"], "dataset_name": "spider", "guid": 2161}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.", "sql": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet", "example": {"db_id": "architecture", "query": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet", "query_toks": ["SELECT", "t1.name", "FROM", "bridge", "AS", "t1", "JOIN", "architect", "AS", "t2", "ON", "t1.architect_id", "=", "t2.id", "WHERE", "t2.nationality", "=", "'American", "'", "ORDER", "BY", "t1.length_feet"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "bridge", "as", "t1", "join", "architect", "as", "t2", "on", "t1", ".", "architect_id", "=", "t2", ".", "id", "where", "t2", ".", "nationality", "=", "value", "order", "by", "t1", ".", "length_feet"], "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.", "question_toks": ["show", "the", "name", "of", "all", "bridges", "that", "was", "designed", "by", "american", "archtect", ",", "and", "sort", "the", "result", "by", "the", "bridge", "feet", "length", "."], "dataset_name": "spider", "guid": 2162}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the name and opening year for three churches that opened most recently.", "sql": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3", "example": {"db_id": "wedding", "query": "SELECT name ,  open_date FROM church ORDER BY open_date DESC LIMIT 3", "query_toks": ["SELECT", "name", ",", "open_date", "FROM", "church", "ORDER", "BY", "open_date", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "name", ",", "open_date", "from", "church", "order", "by", "open_date", "desc", "limit", "value"], "question": "Show the name and opening year for three churches that opened most recently.", "question_toks": ["Show", "the", "name", "and", "opening", "year", "for", "three", "churches", "that", "opened", "most", "recently", "."], "dataset_name": "spider", "guid": 2163}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Return all detention summaries.", "sql": "SELECT detention_summary FROM Detention", "example": {"db_id": "behavior_monitoring", "query": "SELECT detention_summary FROM Detention", "query_toks": ["SELECT", "detention_summary", "FROM", "Detention"], "query_toks_no_value": ["select", "detention_summary", "from", "detention"], "question": "Return all detention summaries.", "question_toks": ["Return", "all", "detention", "summaries", "."], "dataset_name": "spider", "guid": 2164}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find all information about student addresses, and sort by monthly rental in descending order.", "sql": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC", "example": {"db_id": "behavior_monitoring", "query": "SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC", "query_toks": ["SELECT", "*", "FROM", "Student_Addresses", "ORDER", "BY", "monthly_rental", "DESC"], "query_toks_no_value": ["select", "*", "from", "student_addresses", "order", "by", "monthly_rental", "desc"], "question": "Find all information about student addresses, and sort by monthly rental in descending order.", "question_toks": ["Find", "all", "information", "about", "student", "addresses", ",", "and", "sort", "by", "monthly", "rental", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 2165}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Please show the themes of competitions with host cities having populations larger than 1000.", "sql": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "example": {"db_id": "farm", "query": "SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID WHERE T1.Population  >  1000", "query_toks": ["SELECT", "T2.Theme", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "WHERE", "T1.Population", ">", "1000"], "query_toks_no_value": ["select", "t2", ".", "theme", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "where", "t1", ".", "population", ">", "value"], "question": "Please show the themes of competitions with host cities having populations larger than 1000.", "question_toks": ["Please", "show", "the", "themes", "of", "competitions", "with", "host", "cities", "having", "populations", "larger", "than", "1000", "."], "dataset_name": "spider", "guid": 2166}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Which 3 wineries produce the most wines made from white grapes?", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "wine_1", "query": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.Winery", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.GRAPE", "=", "T2.GRAPE", "WHERE", "T1.Color", "=", "``", "White", "''", "GROUP", "BY", "T2.Winery", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "winery", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value", "group", "by", "t2", ".", "winery", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which 3 wineries produce the most wines made from white grapes?", "question_toks": ["Which", "3", "wineries", "produce", "the", "most", "wines", "made", "from", "white", "grapes", "?"], "dataset_name": "spider", "guid": 2167}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the dates of the assessment notes?", "sql": "SELECT date_of_notes FROM Assessment_Notes", "example": {"db_id": "behavior_monitoring", "query": "SELECT date_of_notes FROM Assessment_Notes", "query_toks": ["SELECT", "date_of_notes", "FROM", "Assessment_Notes"], "query_toks_no_value": ["select", "date_of_notes", "from", "assessment_notes"], "question": "What are the dates of the assessment notes?", "question_toks": ["What", "are", "the", "dates", "of", "the", "assessment", "notes", "?"], "dataset_name": "spider", "guid": 2168}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | How many courses have more than 2 credits?", "sql": "SELECT count(*) FROM COURSE WHERE Credits  >  2", "example": {"db_id": "college_3", "query": "SELECT count(*) FROM COURSE WHERE Credits  >  2", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "COURSE", "WHERE", "Credits", ">", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "course", "where", "credits", ">", "value"], "question": "How many courses have more than 2 credits?", "question_toks": ["How", "many", "courses", "have", "more", "than", "2", "credits", "?"], "dataset_name": "spider", "guid": 790}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the title and credits for the course that is taught in the classroom with the greatest capacity.", "sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "example": {"db_id": "college_2", "query": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "query_toks": ["SELECT", "T3.title", ",", "T3.credits", "FROM", "classroom", "AS", "T1", "JOIN", "SECTION", "AS", "T2", "ON", "T1.building", "=", "T2.building", "AND", "T1.room_number", "=", "T2.room_number", "JOIN", "course", "AS", "T3", "ON", "T2.course_id", "=", "T3.course_id", "WHERE", "T1.capacity", "=", "(", "SELECT", "max", "(", "capacity", ")", "FROM", "classroom", ")"], "query_toks_no_value": ["select", "t3", ".", "title", ",", "t3", ".", "credits", "from", "classroom", "as", "t1", "join", "section", "as", "t2", "on", "t1", ".", "building", "=", "t2", ".", "building", "and", "t1", ".", "room_number", "=", "t2", ".", "room_number", "join", "course", "as", "t3", "on", "t2", ".", "course_id", "=", "t3", ".", "course_id", "where", "t1", ".", "capacity", "=", "(", "select", "max", "(", "capacity", ")", "from", "classroom", ")"], "question": "Give the title and credits for the course that is taught in the classroom with the greatest capacity.", "question_toks": ["Give", "the", "title", "and", "credits", "for", "the", "course", "that", "is", "taught", "in", "the", "classroom", "with", "the", "greatest", "capacity", "."], "dataset_name": "spider", "guid": 791}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the first name of students in the descending order of age.", "sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "example": {"db_id": "college_3", "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "query_toks": ["SELECT", "Fname", "FROM", "STUDENT", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "fname", "from", "student", "order", "by", "age", "desc"], "question": "Find the first name of students in the descending order of age.", "question_toks": ["Find", "the", "first", "name", "of", "students", "in", "the", "descending", "order", "of", "age", "."], "dataset_name": "spider", "guid": 792}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the number of rooms with more than 50 capacity for each building.", "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "example": {"db_id": "college_2", "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "building", "FROM", "classroom", "WHERE", "capacity", ">", "50", "GROUP", "BY", "building"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "building", "from", "classroom", "where", "capacity", ">", "value", "group", "by", "building"], "question": "Find the number of rooms with more than 50 capacity for each building.", "question_toks": ["Find", "the", "number", "of", "rooms", "with", "more", "than", "50", "capacity", "for", "each", "building", "."], "dataset_name": "spider", "guid": 793}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the description and credit for the course QM-261?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'", "example": {"db_id": "college_1", "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'", "query_toks": ["SELECT", "crs_credit", ",", "crs_description", "FROM", "course", "WHERE", "crs_code", "=", "'QM-261", "'"], "query_toks_no_value": ["select", "crs_credit", ",", "crs_description", "from", "course", "where", "crs_code", "=", "value"], "question": "Find the description and credit for the course QM-261?", "question_toks": ["Find", "the", "description", "and", "credit", "for", "the", "course", "QM-261", "?"], "dataset_name": "spider", "guid": 794}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the number of faculty at Long Beach State University in 2002?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"", "example": {"db_id": "csu_1", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"", "query_toks": ["SELECT", "faculty", "FROM", "faculty", "AS", "T1", "JOIN", "campuses", "AS", "T2", "ON", "T1.campus", "=", "T2.id", "WHERE", "T1.year", "=", "2002", "AND", "T2.campus", "=", "``", "Long", "Beach", "State", "University", "''"], "query_toks_no_value": ["select", "faculty", "from", "faculty", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "What is the number of faculty at Long Beach State University in 2002?", "question_toks": ["What", "is", "the", "number", "of", "faculty", "at", "Long", "Beach", "State", "University", "in", "2002", "?"], "dataset_name": "spider", "guid": 795}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the name of the department that has no students minored in?", "sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO", "example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "EXCEPT", "SELECT", "T1.DName", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "MINOR_IN", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO"], "query_toks_no_value": ["select", "dname", "from", "department", "except", "select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "minor_in", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno"], "question": "Find the name of the department that has no students minored in?", "question_toks": ["Find", "the", "name", "of", "the", "department", "that", "has", "no", "students", "minored", "in", "?"], "dataset_name": "spider", "guid": 796}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | list in alphabetic order all course names and their instructors' names in year 2008.", "sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "example": {"db_id": "college_2", "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "query_toks": ["SELECT", "T1.title", ",", "T3.name", "FROM", "course", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "JOIN", "instructor", "AS", "T3", "ON", "T2.id", "=", "T3.id", "WHERE", "YEAR", "=", "2008", "ORDER", "BY", "T1.title"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t3", ".", "name", "from", "course", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "instructor", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "id", "where", "year", "=", "value", "order", "by", "t1", ".", "title"], "question": "list in alphabetic order all course names and their instructors' names in year 2008.", "question_toks": ["list", "in", "alphabetic", "order", "all", "course", "names", "and", "their", "instructors", "'", "names", "in", "year", "2008", "."], "dataset_name": "spider", "guid": 797}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the titles for courses with two prerequisites?", "sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "example": {"db_id": "college_2", "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "query_toks": ["SELECT", "T1.title", "FROM", "course", "AS", "T1", "JOIN", "prereq", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T2.course_id", "HAVING", "count", "(", "*", ")", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "course", "as", "t1", "join", "prereq", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t2", ".", "course_id", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the titles for courses with two prerequisites?", "question_toks": ["What", "are", "the", "titles", "for", "courses", "with", "two", "prerequisites", "?"], "dataset_name": "spider", "guid": 798}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campus has the most faculties in 2003?", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2003", "ORDER", "BY", "T2.faculty", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "order", "by", "t2", ".", "faculty", "desc", "limit", "value"], "question": "What campus has the most faculties in 2003?", "question_toks": ["What", "campus", "has", "the", "most", "faculties", "in", "2003", "?"], "dataset_name": "spider", "guid": 799}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the last names of female students, ordered by age descending?", "sql": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC", "example": {"db_id": "college_3", "query": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC", "query_toks": ["SELECT", "LName", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "F", "''", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "lname", "from", "student", "where", "sex", "=", "value", "order", "by", "age", "desc"], "question": "What are the last names of female students, ordered by age descending?", "question_toks": ["What", "are", "the", "last", "names", "of", "female", "students", ",", "ordered", "by", "age", "descending", "?"], "dataset_name": "spider", "guid": 800}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the title of course whose prerequisite is course Differential Geometry.", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.course_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.prereq_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'Differential", "Geometry", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "course_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "prereq_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "Find the title of course whose prerequisite is course Differential Geometry.", "question_toks": ["Find", "the", "title", "of", "course", "whose", "prerequisite", "is", "course", "Differential", "Geometry", "."], "dataset_name": "spider", "guid": 801}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many people graduated from San Francisco State University in 2004?", "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"", "example": {"db_id": "csu_1", "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"", "query_toks": ["SELECT", "sum", "(", "t1.graduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "graduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "How many people graduated from San Francisco State University in 2004?", "question_toks": ["How", "many", "people", "graduated", "from", "San", "Francisco", "State", "University", "in", "2004", "?"], "dataset_name": "spider", "guid": 802}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors are teaching class with code ACCT-211?", "sql": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "PROF_NUM", ")", "FROM", "CLASS", "WHERE", "CRS_CODE", "=", "``", "ACCT-211", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "prof_num", ")", "from", "class", "where", "crs_code", "=", "value"], "question": "How many professors are teaching class with code ACCT-211?", "question_toks": ["How", "many", "professors", "are", "teaching", "class", "with", "code", "ACCT-211", "?"], "dataset_name": "spider", "guid": 803}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all teachers who have taught a course and the corresponding descriptions?", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "query_toks": ["SELECT", "T2.emp_fname", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code"], "question": "What are the first names of all teachers who have taught a course and the corresponding descriptions?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "teachers", "who", "have", "taught", "a", "course", "and", "the", "corresponding", "descriptions", "?"], "dataset_name": "spider", "guid": 804}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the names of courses with 1 credit?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  1", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE WHERE Credits  =  1", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "WHERE", "Credits", "=", "1"], "query_toks_no_value": ["select", "cname", "from", "course", "where", "credits", "=", "value"], "question": "What are the names of courses with 1 credit?", "question_toks": ["What", "are", "the", "names", "of", "courses", "with", "1", "credit", "?"], "dataset_name": "spider", "guid": 805}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of departments which offer courses.", "sql": "SELECT count(DISTINCT dept_name) FROM course", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT dept_name) FROM course", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", "FROM", "course"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", "from", "course"], "question": "Count the number of departments which offer courses.", "question_toks": ["Count", "the", "number", "of", "departments", "which", "offer", "courses", "."], "dataset_name": "spider", "guid": 806}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?", "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.class_room", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Accounting", "'"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "class_room", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "Accounting", "professors", "who", "teach", "and", "what", "are", "the", "classrooms", "of", "the", "courses", "they", "teach", "?"], "dataset_name": "spider", "guid": 807}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the name of the nurse has the most appointments?", "sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "nurse", "AS", "T1", "JOIN", "appointment", "AS", "T2", "ON", "T1.employeeid", "=", "T2.prepnurse", "GROUP", "BY", "T1.employeeid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "nurse", "as", "t1", "join", "appointment", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "prepnurse", "group", "by", "t1", ".", "employeeid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the nurse has the most appointments?", "question_toks": ["What", "is", "the", "name", "of", "the", "nurse", "has", "the", "most", "appointments", "?"], "dataset_name": "spider", "guid": 808}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of classes in each school.", "sql": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T3.school_code", "FROM", "CLASS", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "GROUP", "BY", "T3.school_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t3", ".", "school_code", "from", "class", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "group", "by", "t3", ".", "school_code"], "question": "Find the number of classes in each school.", "question_toks": ["Find", "the", "number", "of", "classes", "in", "each", "school", "."], "dataset_name": "spider", "guid": 809}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names of all professors in the Accounting department who is teaching some course and the class room.", "sql": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.class_room", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Accounting", "'"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "class_room", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.", "question_toks": ["Find", "the", "first", "names", "of", "all", "professors", "in", "the", "Accounting", "department", "who", "is", "teaching", "some", "course", "and", "the", "class", "room", "."], "dataset_name": "spider", "guid": 810}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What are the campuses that opened in 1958?", "sql": "SELECT campus FROM campuses WHERE YEAR  =  1958", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE YEAR  =  1958", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", "=", "1958"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", "=", "value"], "question": "What are the campuses that opened in 1958?", "question_toks": ["What", "are", "the", "campuses", "that", "opened", "in", "1958", "?"], "dataset_name": "spider", "guid": 811}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the year which offers the largest number of courses.", "sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "SECTION", "GROUP", "BY", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "section", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the year which offers the largest number of courses.", "question_toks": ["Find", "the", "year", "which", "offers", "the", "largest", "number", "of", "courses", "."], "dataset_name": "spider", "guid": 812}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of instructors who advise more than one student?", "sql": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "instructor", "AS", "T1", "JOIN", "advisor", "AS", "T2", "ON", "T1.id", "=", "T2.i_id", "GROUP", "BY", "T2.i_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "instructor", "as", "t1", "join", "advisor", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "i_id", "group", "by", "t2", ".", "i_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of instructors who advise more than one student?", "question_toks": ["What", "are", "the", "names", "of", "instructors", "who", "advise", "more", "than", "one", "student", "?"], "dataset_name": "spider", "guid": 813}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of all instructors who advise students in the math depart sorted by total credits of the student.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "example": {"db_id": "college_2", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "query_toks": ["SELECT", "T2.name", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "WHERE", "T3.dept_name", "=", "'Math", "'", "ORDER", "BY", "T3.tot_cred"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "where", "t3", ".", "dept_name", "=", "value", "order", "by", "t3", ".", "tot_cred"], "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.", "question_toks": ["What", "are", "the", "names", "of", "all", "instructors", "who", "advise", "students", "in", "the", "math", "depart", "sorted", "by", "total", "credits", "of", "the", "student", "."], "dataset_name": "spider", "guid": 814}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the patient who most recently stayed in room 111.", "sql": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1", "query_toks": ["SELECT", "patient", "FROM", "stay", "WHERE", "room", "=", "111", "ORDER", "BY", "staystart", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "patient", "from", "stay", "where", "room", "=", "value", "order", "by", "staystart", "desc", "limit", "value"], "question": "Find the patient who most recently stayed in room 111.", "question_toks": ["Find", "the", "patient", "who", "most", "recently", "stayed", "in", "room", "111", "."], "dataset_name": "spider", "guid": 815}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the name of courses that have at least five enrollments?", "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5", "example": {"db_id": "college_3", "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5", "query_toks": ["SELECT", "T1.CName", "FROM", "COURSE", "AS", "T1", "JOIN", "ENROLLED_IN", "AS", "T2", "ON", "T1.CID", "=", "T2.CID", "GROUP", "BY", "T2.CID", "HAVING", "COUNT", "(", "*", ")", ">", "=", "5"], "query_toks_no_value": ["select", "t1", ".", "cname", "from", "course", "as", "t1", "join", "enrolled_in", "as", "t2", "on", "t1", ".", "cid", "=", "t2", ".", "cid", "group", "by", "t2", ".", "cid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the name of courses that have at least five enrollments?", "question_toks": ["What", "are", "the", "name", "of", "courses", "that", "have", "at", "least", "five", "enrollments", "?"], "dataset_name": "spider", "guid": 816}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names of all instructors who have taught some course and the course description.", "sql": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code", "query_toks": ["SELECT", "T2.emp_fname", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code"], "question": "Find the first names of all instructors who have taught some course and the course description.", "question_toks": ["Find", "the", "first", "names", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "the", "course", "description", "."], "dataset_name": "spider", "guid": 817}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Which campus has the most faculties in year 2003?", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2003", "ORDER", "BY", "T2.faculty", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "order", "by", "t2", ".", "faculty", "desc", "limit", "value"], "question": "Which campus has the most faculties in year 2003?", "question_toks": ["Which", "campus", "has", "the", "most", "faculties", "in", "year", "2003", "?"], "dataset_name": "spider", "guid": 818}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the three most expensive procedures.", "sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "query_toks": ["SELECT", "name", "FROM", "procedures", "ORDER", "BY", "cost", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "procedures", "order", "by", "cost", "limit", "value"], "question": "Find the three most expensive procedures.", "question_toks": ["Find", "the", "three", "most", "expensive", "procedures", "."], "dataset_name": "spider", "guid": 819}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many classes are held in each department?", "sql": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "CLASS", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "class", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "group", "by", "dept_code"], "question": "How many classes are held in each department?", "question_toks": ["How", "many", "classes", "are", "held", "in", "each", "department", "?"], "dataset_name": "spider", "guid": 820}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the last name of the professor whose office is located in DRE 102, and when were they hired?", "sql": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'", "query_toks": ["SELECT", "T1.emp_lname", ",", "T1.emp_hiredate", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "WHERE", "T2.prof_office", "=", "'DRE", "102", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_lname", ",", "t1", ".", "emp_hiredate", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "where", "t2", ".", "prof_office", "=", "value"], "question": "What is the last name of the professor whose office is located in DRE 102, and when were they hired?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "professor", "whose", "office", "is", "located", "in", "DRE", "102", ",", "and", "when", "were", "they", "hired", "?"], "dataset_name": "spider", "guid": 821}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the phones of departments in Room 268?", "sql": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268", "example": {"db_id": "college_3", "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268", "query_toks": ["SELECT", "DPhone", "FROM", "DEPARTMENT", "WHERE", "Room", "=", "268"], "query_toks_no_value": ["select", "dphone", "from", "department", "where", "room", "=", "value"], "question": "What are the phones of departments in Room 268?", "question_toks": ["What", "are", "the", "phones", "of", "departments", "in", "Room", "268", "?"], "dataset_name": "spider", "guid": 822}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the full names of faculties who are members of department with department number 520.", "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520", "example": {"db_id": "college_3", "query": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520", "query_toks": ["SELECT", "T1.Fname", ",", "T1.Lname", "FROM", "FACULTY", "AS", "T1", "JOIN", "MEMBER_OF", "AS", "T2", "ON", "T1.FacID", "=", "T2.FacID", "WHERE", "T2.DNO", "=", "520"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "member_of", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "where", "t2", ".", "dno", "=", "value"], "question": "Find the full names of faculties who are members of department with department number 520.", "question_toks": ["Find", "the", "full", "names", "of", "faculties", "who", "are", "members", "of", "department", "with", "department", "number", "520", "."], "dataset_name": "spider", "guid": 823}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the full names of the 3 instructors who teach the most courses?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "college_3", "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "COURSE", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.Instructor", "=", "T2.FacID", "GROUP", "BY", "T1.Instructor", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "course", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "instructor", "=", "t2", ".", "facid", "group", "by", "t1", ".", "instructor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the full names of the 3 instructors who teach the most courses?", "question_toks": ["What", "are", "the", "full", "names", "of", "the", "3", "instructors", "who", "teach", "the", "most", "courses", "?"], "dataset_name": "spider", "guid": 824}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of the department with the most students enrolled?", "sql": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T4.dept_name", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "department", "AS", "T4", "ON", "T3.dept_code", "=", "T4.dept_code", "GROUP", "BY", "T3.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t4", ".", "dept_name", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "department", "as", "t4", "on", "t3", ".", "dept_code", "=", "t4", ".", "dept_code", "group", "by", "t3", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the department with the most students enrolled?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "most", "students", "enrolled", "?"], "dataset_name": "spider", "guid": 825}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | List in alphabetic order the names of all distinct instructors.", "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name", "example": {"db_id": "college_2", "query": "SELECT DISTINCT name FROM  instructor ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "instructor", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "instructor", "order", "by", "name"], "question": "List in alphabetic order the names of all distinct instructors.", "question_toks": ["List", "in", "alphabetic", "order", "the", "names", "of", "all", "distinct", "instructors", "."], "dataset_name": "spider", "guid": 826}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the salaries of all distinct instructors that are less than the largest salary.", "sql": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "example": {"db_id": "college_2", "query": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)", "query_toks": ["SELECT", "DISTINCT", "salary", "FROM", "instructor", "WHERE", "salary", "<", "(", "SELECT", "max", "(", "salary", ")", "FROM", "instructor", ")"], "query_toks_no_value": ["select", "distinct", "salary", "from", "instructor", "where", "salary", "<", "(", "select", "max", "(", "salary", ")", "from", "instructor", ")"], "question": "Find the salaries of all distinct instructors that are less than the largest salary.", "question_toks": ["Find", "the", "salaries", "of", "all", "distinct", "instructors", "that", "are", "less", "than", "the", "largest", "salary", "."], "dataset_name": "spider", "guid": 827}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first and last name of all biology professors?", "sql": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"", "example": {"db_id": "college_1", "query": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"", "query_toks": ["SELECT", "T3.EMP_FNAME", ",", "T3.EMP_LNAME", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "JOIN", "employee", "AS", "T3", "ON", "T1.EMP_NUM", "=", "T3.EMP_NUM", "WHERE", "DEPT_NAME", "=", "``", "Biology", "''"], "query_toks_no_value": ["select", "t3", ".", "emp_fname", ",", "t3", ".", "emp_lname", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "join", "employee", "as", "t3", "on", "t1", ".", "emp_num", "=", "t3", ".", "emp_num", "where", "dept_name", "=", "value"], "question": "What are the first and last name of all biology professors?", "question_toks": ["What", "are", "the", "first", "and", "last", "name", "of", "all", "biology", "professors", "?"], "dataset_name": "spider", "guid": 828}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the names of all distinct medications, ordered in an alphabetical order.", "sql": "SELECT DISTINCT name FROM medication ORDER BY name", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT name FROM medication ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "medication", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "medication", "order", "by", "name"], "question": "List the names of all distinct medications, ordered in an alphabetical order.", "question_toks": ["List", "the", "names", "of", "all", "distinct", "medications", ",", "ordered", "in", "an", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 829}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | How many students have had at least one \"B\" grade?", "sql": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"", "example": {"db_id": "college_3", "query": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "StuID", ")", "FROM", "ENROLLED_IN", "WHERE", "Grade", "=", "``", "B", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "stuid", ")", "from", "enrolled_in", "where", "grade", "=", "value"], "question": "How many students have had at least one \"B\" grade?", "question_toks": ["How", "many", "students", "have", "had", "at", "least", "one", "``", "B", "''", "grade", "?"], "dataset_name": "spider", "guid": 830}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "query_toks": ["SELECT", "T2.emp_fname", ",", "T4.prof_office", ",", "T3.crs_description", ",", "T5.dept_name", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "professor", "AS", "T4", "ON", "T2.emp_num", "=", "T4.emp_num", "JOIN", "department", "AS", "T5", "ON", "T4.dept_code", "=", "T5.dept_code"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t4", ".", "prof_office", ",", "t3", ".", "crs_description", ",", "t5", ".", "dept_name", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "professor", "as", "t4", "on", "t2", ".", "emp_num", "=", "t4", ".", "emp_num", "join", "department", "as", "t5", "on", "t4", ".", "dept_code", "=", "t5", ".", "dept_code"], "question": "What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?", "question_toks": ["What", "are", "the", "first", "names", ",", "office", "locations", ",", "and", "departments", "of", "all", "instructors", ",", "and", "also", "what", "are", "the", "descriptions", "of", "the", "courses", "they", "teach", "?"], "dataset_name": "spider", "guid": 831}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of rooms in Lamberton with capacity lower than 50.", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "classroom", "WHERE", "building", "=", "'Lamberton", "'", "AND", "capacity", "<", "50"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "classroom", "where", "building", "=", "value", "and", "capacity", "<", "value"], "question": "Count the number of rooms in Lamberton with capacity lower than 50.", "question_toks": ["Count", "the", "number", "of", "rooms", "in", "Lamberton", "with", "capacity", "lower", "than", "50", "."], "dataset_name": "spider", "guid": 832}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find courses that ran in Fall 2009 or in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "UNION", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "union", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "Find courses that ran in Fall 2009 or in Spring 2010.", "question_toks": ["Find", "courses", "that", "ran", "in", "Fall", "2009", "or", "in", "Spring", "2010", "."], "dataset_name": "spider", "guid": 833}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | how many schools exist in total?", "sql": "SELECT count(DISTINCT school_code) FROM department", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT school_code) FROM department", "query_toks": ["SELECT", "count", "(", "DISTINCT", "school_code", ")", "FROM", "department"], "query_toks_no_value": ["select", "count", "(", "distinct", "school_code", ")", "from", "department"], "question": "how many schools exist in total?", "question_toks": ["how", "many", "schools", "exist", "in", "total", "?"], "dataset_name": "spider", "guid": 834}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | List the distinct names of the instructors, ordered by name.", "sql": "SELECT DISTINCT name FROM  instructor ORDER BY name", "example": {"db_id": "college_2", "query": "SELECT DISTINCT name FROM  instructor ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "instructor", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "instructor", "order", "by", "name"], "question": "List the distinct names of the instructors, ordered by name.", "question_toks": ["List", "the", "distinct", "names", "of", "the", "instructors", ",", "ordered", "by", "name", "."], "dataset_name": "spider", "guid": 835}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors are in the accounting dept?", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "DEPT_NAME", "=", "``", "Accounting", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "dept_name", "=", "value"], "question": "How many professors are in the accounting dept?", "question_toks": ["How", "many", "professors", "are", "in", "the", "accounting", "dept", "?"], "dataset_name": "spider", "guid": 836}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title of the course with Differential Geometry as a prerequisite?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.course_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.prereq_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'Differential", "Geometry", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "course_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "prereq_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "What is the title of the course with Differential Geometry as a prerequisite?", "question_toks": ["What", "is", "the", "title", "of", "the", "course", "with", "Differential", "Geometry", "as", "a", "prerequisite", "?"], "dataset_name": "spider", "guid": 837}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the name of the patient who made the most recent appointment?", "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "patient", "AS", "T1", "JOIN", "appointment", "AS", "T2", "ON", "T1.ssn", "=", "T2.patient", "ORDER", "BY", "T2.start", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "patient", "as", "t1", "join", "appointment", "as", "t2", "on", "t1", ".", "ssn", "=", "t2", ".", "patient", "order", "by", "t2", ".", "start", "desc", "limit", "value"], "question": "What is the name of the patient who made the most recent appointment?", "question_toks": ["What", "is", "the", "name", "of", "the", "patient", "who", "made", "the", "most", "recent", "appointment", "?"], "dataset_name": "spider", "guid": 838}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many students are in each department?", "sql": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "How many students are in each department?", "question_toks": ["How", "many", "students", "are", "in", "each", "department", "?"], "dataset_name": "spider", "guid": 839}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the full names and gradepoints for all enrollments?", "sql": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID", "example": {"db_id": "college_3", "query": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID", "query_toks": ["SELECT", "T3.Fname", ",", "T3.LName", ",", "T2.gradepoint", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", ",", "t2", ".", "gradepoint", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid"], "question": "What are the full names and gradepoints for all enrollments?", "question_toks": ["What", "are", "the", "full", "names", "and", "gradepoints", "for", "all", "enrollments", "?"], "dataset_name": "spider", "guid": 840}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the campus fee of \"San Jose State University\" in year 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996", "example": {"db_id": "csu_1", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996", "query_toks": ["SELECT", "campusfee", "FROM", "campuses", "AS", "T1", "JOIN", "csu_fees", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "T2.year", "=", "1996"], "query_toks_no_value": ["select", "campusfee", "from", "campuses", "as", "t1", "join", "csu_fees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "What is the campus fee of \"San Jose State University\" in year 1996?", "question_toks": ["What", "is", "the", "campus", "fee", "of", "``", "San", "Jose", "State", "University", "''", "in", "year", "1996", "?"], "dataset_name": "spider", "guid": 841}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of department has the highest amount of students?", "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "student", "GROUP", "BY", "dept_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "student", "group", "by", "dept_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of department has the highest amount of students?", "question_toks": ["Find", "the", "name", "of", "department", "has", "the", "highest", "amount", "of", "students", "?"], "dataset_name": "spider", "guid": 842}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names and average salaries for departments with average salary higher than 42000?", "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "query_toks": ["SELECT", "dept_name", ",", "AVG", "(", "salary", ")", "FROM", "instructor", "GROUP", "BY", "dept_name", "HAVING", "AVG", "(", "salary", ")", ">", "42000"], "query_toks_no_value": ["select", "dept_name", ",", "avg", "(", "salary", ")", "from", "instructor", "group", "by", "dept_name", "having", "avg", "(", "salary", ")", ">", "value"], "question": "What are the names and average salaries for departments with average salary higher than 42000?", "question_toks": ["What", "are", "the", "names", "and", "average", "salaries", "for", "departments", "with", "average", "salary", "higher", "than", "42000", "?"], "dataset_name": "spider", "guid": 843}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physicians are trained in procedures that are more expensive than 5000?", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T3.cost", ">", "5000"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t3", ".", "cost", ">", "value"], "question": "Which physicians are trained in procedures that are more expensive than 5000?", "question_toks": ["Which", "physicians", "are", "trained", "in", "procedures", "that", "are", "more", "expensive", "than", "5000", "?"], "dataset_name": "spider", "guid": 844}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names and average salaries of all departments whose average salary is greater than 42000.", "sql": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  AVG (salary) FROM instructor GROUP BY dept_name HAVING AVG (salary)  >  42000", "query_toks": ["SELECT", "dept_name", ",", "AVG", "(", "salary", ")", "FROM", "instructor", "GROUP", "BY", "dept_name", "HAVING", "AVG", "(", "salary", ")", ">", "42000"], "query_toks_no_value": ["select", "dept_name", ",", "avg", "(", "salary", ")", "from", "instructor", "group", "by", "dept_name", "having", "avg", "(", "salary", ")", ">", "value"], "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.", "question_toks": ["Find", "the", "names", "and", "average", "salaries", "of", "all", "departments", "whose", "average", "salary", "is", "greater", "than", "42000", "."], "dataset_name": "spider", "guid": 845}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Which department has the lowest budget?", "sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "department", "ORDER", "BY", "budget", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "department", "order", "by", "budget", "limit", "value"], "question": "Which department has the lowest budget?", "question_toks": ["Which", "department", "has", "the", "lowest", "budget", "?"], "dataset_name": "spider", "guid": 846}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the last names of faculties in building Barton in alphabetic order.", "sql": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname", "example": {"db_id": "college_3", "query": "SELECT Lname FROM FACULTY WHERE Building  =  \"Barton\" ORDER BY Lname", "query_toks": ["SELECT", "Lname", "FROM", "FACULTY", "WHERE", "Building", "=", "``", "Barton", "''", "ORDER", "BY", "Lname"], "query_toks_no_value": ["select", "lname", "from", "faculty", "where", "building", "=", "value", "order", "by", "lname"], "question": "Find the last names of faculties in building Barton in alphabetic order.", "question_toks": ["Find", "the", "last", "names", "of", "faculties", "in", "building", "Barton", "in", "alphabetic", "order", "."], "dataset_name": "spider", "guid": 847}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names and office locations for all professors sorted alphabetically by first name?", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.prof_office", "FROM", "professor", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "ORDER", "BY", "T2.emp_fname"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "prof_office", "from", "professor", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "order", "by", "t2", ".", "emp_fname"], "question": "What are the first names and office locations for all professors sorted alphabetically by first name?", "question_toks": ["What", "are", "the", "first", "names", "and", "office", "locations", "for", "all", "professors", "sorted", "alphabetically", "by", "first", "name", "?"], "dataset_name": "spider", "guid": 848}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of students who haven't taken any Biology courses?", "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "id", "NOT", "IN", "(", "SELECT", "T1.id", "FROM", "takes", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.dept_name", "=", "'Biology", "'", ")"], "query_toks_no_value": ["select", "name", "from", "student", "where", "id", "not", "in", "(", "select", "t1", ".", "id", "from", "takes", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "dept_name", "=", "value", ")"], "question": "What are the names of students who haven't taken any Biology courses?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "have", "n't", "taken", "any", "Biology", "courses", "?"], "dataset_name": "spider", "guid": 849}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are each physician's employee id and department id primarily affiliated.", "sql": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1", "example": {"db_id": "hospital_1", "query": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1", "query_toks": ["SELECT", "physician", ",", "department", "FROM", "affiliated_with", "WHERE", "primaryaffiliation", "=", "1"], "query_toks_no_value": ["select", "physician", ",", "department", "from", "affiliated_with", "where", "primaryaffiliation", "=", "value"], "question": "What are each physician's employee id and department id primarily affiliated.", "question_toks": ["What", "are", "each", "physician", "'s", "employee", "id", "and", "department", "id", "primarily", "affiliated", "."], "dataset_name": "spider", "guid": 850}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of all instructors who have taught some course and the course_id.", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "example": {"db_id": "college_2", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID", "query_toks": ["SELECT", "name", ",", "course_id", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.ID", "=", "T2.ID"], "query_toks_no_value": ["select", "name", ",", "course_id", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id"], "question": "Find the names of all instructors who have taught some course and the course_id.", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "the", "course_id", "."], "dataset_name": "spider", "guid": 851}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of the professors who do not teach a class.", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num", "example": {"db_id": "college_1", "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num", "query_toks": ["SELECT", "emp_fname", "FROM", "employee", "WHERE", "emp_jobcode", "=", "'PROF", "'", "EXCEPT", "SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num"], "query_toks_no_value": ["select", "emp_fname", "from", "employee", "where", "emp_jobcode", "=", "value", "except", "select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num"], "question": "What are the first names of the professors who do not teach a class.", "question_toks": ["What", "are", "the", "first", "names", "of", "the", "professors", "who", "do", "not", "teach", "a", "class", "."], "dataset_name": "spider", "guid": 852}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physician was trained in the procedure that costs the most.", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "ORDER", "BY", "T3.cost", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "order", "by", "t3", ".", "cost", "desc", "limit", "value"], "question": "Which physician was trained in the procedure that costs the most.", "question_toks": ["Which", "physician", "was", "trained", "in", "the", "procedure", "that", "costs", "the", "most", "."], "dataset_name": "spider", "guid": 853}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "salary", ">", "(", "SELECT", "max", "(", "salary", ")", "FROM", "instructor", "WHERE", "dept_name", "=", "'Biology", "'", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "salary", ">", "(", "select", "max", "(", "salary", ")", "from", "instructor", "where", "dept_name", "=", "value", ")"], "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "whose", "salary", "is", "greater", "than", "the", "salary", "of", "all", "instructors", "in", "the", "Biology", "department", "."], "dataset_name": "spider", "guid": 854}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the courses that do not have any prerequisite?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "NOT", "IN", "(", "SELECT", "course_id", "FROM", "prereq", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "not", "in", "(", "select", "course_id", "from", "prereq", ")"], "question": "Find the name of the courses that do not have any prerequisite?", "question_toks": ["Find", "the", "name", "of", "the", "courses", "that", "do", "not", "have", "any", "prerequisite", "?"], "dataset_name": "spider", "guid": 855}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the campus fee for San Jose State University in 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996", "example": {"db_id": "csu_1", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996", "query_toks": ["SELECT", "campusfee", "FROM", "campuses", "AS", "T1", "JOIN", "csu_fees", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "T2.year", "=", "1996"], "query_toks_no_value": ["select", "campusfee", "from", "campuses", "as", "t1", "join", "csu_fees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "What is the campus fee for San Jose State University in 1996?", "question_toks": ["What", "is", "the", "campus", "fee", "for", "San", "Jose", "State", "University", "in", "1996", "?"], "dataset_name": "spider", "guid": 856}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many credits does course CIS-220 have, and what its description?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'", "example": {"db_id": "college_1", "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'", "query_toks": ["SELECT", "crs_credit", ",", "crs_description", "FROM", "course", "WHERE", "crs_code", "=", "'CIS-220", "'"], "query_toks_no_value": ["select", "crs_credit", ",", "crs_description", "from", "course", "where", "crs_code", "=", "value"], "question": "How many credits does course CIS-220 have, and what its description?", "question_toks": ["How", "many", "credits", "does", "course", "CIS-220", "have", ",", "and", "what", "its", "description", "?"], "dataset_name": "spider", "guid": 857}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many degrees were conferred at San Jose State University in 2000?", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000", "example": {"db_id": "csu_1", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000", "query_toks": ["SELECT", "degrees", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "t2.year", "=", "2000"], "query_toks_no_value": ["select", "degrees", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "How many degrees were conferred at San Jose State University in 2000?", "question_toks": ["How", "many", "degrees", "were", "conferred", "at", "San", "Jose", "State", "University", "in", "2000", "?"], "dataset_name": "spider", "guid": 858}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many appointments are there?", "sql": "SELECT count(*) FROM appointment", "example": {"db_id": "hospital_1", "query": "SELECT count(*) FROM appointment", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "appointment"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "appointment"], "question": "How many appointments are there?", "question_toks": ["How", "many", "appointments", "are", "there", "?"], "dataset_name": "spider", "guid": 859}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many students have advisors?", "sql": "SELECT count(DISTINCT s_id) FROM advisor", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT s_id) FROM advisor", "query_toks": ["SELECT", "count", "(", "DISTINCT", "s_id", ")", "FROM", "advisor"], "query_toks_no_value": ["select", "count", "(", "distinct", "s_id", ")", "from", "advisor"], "question": "How many students have advisors?", "question_toks": ["How", "many", "students", "have", "advisors", "?"], "dataset_name": "spider", "guid": 860}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?", "sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "example": {"db_id": "college_2", "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "query_toks": ["SELECT", "building", ",", "room_number", "FROM", "classroom", "WHERE", "capacity", "BETWEEN", "50", "AND", "100"], "query_toks_no_value": ["select", "building", ",", "room_number", "from", "classroom", "where", "capacity", "between", "value", "and", "value"], "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?", "question_toks": ["What", "are", "the", "room", "numbers", "and", "corresponding", "buildings", "for", "classrooms", "which", "can", "seat", "between", "50", "to", "100", "students", "?"], "dataset_name": "spider", "guid": 861}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names and budgets of departments with budgets greater than the average?", "sql": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "query_toks": ["SELECT", "dept_name", ",", "budget", "FROM", "department", "WHERE", "budget", ">", "(", "SELECT", "avg", "(", "budget", ")", "FROM", "department", ")"], "query_toks_no_value": ["select", "dept_name", ",", "budget", "from", "department", "where", "budget", ">", "(", "select", "avg", "(", "budget", ")", "from", "department", ")"], "question": "What are the names and budgets of departments with budgets greater than the average?", "question_toks": ["What", "are", "the", "names", "and", "budgets", "of", "departments", "with", "budgets", "greater", "than", "the", "average", "?"], "dataset_name": "spider", "guid": 862}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?", "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "query_toks": ["SELECT", "T1.title", "FROM", "course", "AS", "T1", "JOIN", "SECTION", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "building", "=", "'Chandler", "'", "AND", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "course", "as", "t1", "join", "section", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "building", "=", "value", "and", "semester", "=", "value", "and", "year", "=", "value"], "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?", "question_toks": ["What", "is", "the", "title", "of", "the", "course", "that", "was", "offered", "at", "building", "Chandler", "during", "the", "fall", "semester", "in", "the", "year", "of", "2010", "?"], "dataset_name": "spider", "guid": 863}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | what is the name of the instructor who is in Statistics department and earns the lowest salary?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "dept_name", "=", "'Statistics", "'", "ORDER", "BY", "salary", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "dept_name", "=", "value", "order", "by", "salary", "limit", "value"], "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?", "question_toks": ["what", "is", "the", "name", "of", "the", "instructor", "who", "is", "in", "Statistics", "department", "and", "earns", "the", "lowest", "salary", "?"], "dataset_name": "spider", "guid": 864}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the course description and number of credits for QM-261?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'", "example": {"db_id": "college_1", "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'", "query_toks": ["SELECT", "crs_credit", ",", "crs_description", "FROM", "course", "WHERE", "crs_code", "=", "'QM-261", "'"], "query_toks_no_value": ["select", "crs_credit", ",", "crs_description", "from", "course", "where", "crs_code", "=", "value"], "question": "What is the course description and number of credits for QM-261?", "question_toks": ["What", "is", "the", "course", "description", "and", "number", "of", "credits", "for", "QM-261", "?"], "dataset_name": "spider", "guid": 865}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many medications are prescribed for each brand?", "sql": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "medication", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.code", "=", "T2.medication", "GROUP", "BY", "T1.brand"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "medication", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "medication", "group", "by", "t1", ".", "brand"], "question": "How many medications are prescribed for each brand?", "question_toks": ["How", "many", "medications", "are", "prescribed", "for", "each", "brand", "?"], "dataset_name": "spider", "guid": 866}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the names of the campus which has more faculties in 2002 than every campus in Orange county.", "sql": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "faculty", ">", "(", "SELECT", "max", "(", "faculty", ")", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "T1.county", "=", "``", "Orange", "''", ")"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "faculty", ">", "(", "select", "max", "(", "faculty", ")", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "t1", ".", "county", "=", "value", ")"], "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.", "question_toks": ["Find", "the", "names", "of", "the", "campus", "which", "has", "more", "faculties", "in", "2002", "than", "every", "campus", "in", "Orange", "county", "."], "dataset_name": "spider", "guid": 867}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the number of graduates in \"San Francisco State University\" in year 2004?", "sql": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"", "example": {"db_id": "csu_1", "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"", "query_toks": ["SELECT", "sum", "(", "t1.graduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "graduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "What is the number of graduates in \"San Francisco State University\" in year 2004?", "question_toks": ["What", "is", "the", "number", "of", "graduates", "in", "``", "San", "Francisco", "State", "University", "''", "in", "year", "2004", "?"], "dataset_name": "spider", "guid": 868}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all history professors who do not teach?", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num", "example": {"db_id": "college_1", "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num", "query_toks": ["SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "EXCEPT", "SELECT", "T4.emp_fname", "FROM", "employee", "AS", "T4", "JOIN", "CLASS", "AS", "T5", "ON", "T4.emp_num", "=", "T5.prof_num"], "query_toks_no_value": ["select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "except", "select", "t4", ".", "emp_fname", "from", "employee", "as", "t4", "join", "class", "as", "t5", "on", "t4", ".", "emp_num", "=", "t5", ".", "prof_num"], "question": "What are the first names of all history professors who do not teach?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "history", "professors", "who", "do", "not", "teach", "?"], "dataset_name": "spider", "guid": 869}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Report the name of all campuses in Los Angeles county.", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value"], "question": "Report the name of all campuses in Los Angeles county.", "question_toks": ["Report", "the", "name", "of", "all", "campuses", "in", "Los", "Angeles", "county", "."], "dataset_name": "spider", "guid": 870}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of all instructors in computer science department", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "dept_name", "=", "'Comp", ".", "Sci", ".", "'"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "dept_name", "=", "value"], "question": "Find the names of all instructors in computer science department", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "in", "computer", "science", "department"], "dataset_name": "spider", "guid": 871}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the number of employees?", "sql": "SELECT count(*) FROM Employee", "example": {"db_id": "flight_1", "query": "SELECT count(*) FROM Employee", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Employee"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee"], "question": "What is the number of employees?", "question_toks": ["What", "is", "the", "number", "of", "employees", "?"], "dataset_name": "spider", "guid": 262}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What is the name of the ship that is commanded by the youngest captain?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1", "example": {"db_id": "ship_1", "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id ORDER BY t2.age LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "ship", "AS", "t1", "JOIN", "captain", "AS", "t2", "ON", "t1.ship_id", "=", "t2.ship_id", "ORDER", "BY", "t2.age", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "ship", "as", "t1", "join", "captain", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id", "order", "by", "t2", ".", "age", "limit", "value"], "question": "What is the name of the ship that is commanded by the youngest captain?", "question_toks": ["What", "is", "the", "name", "of", "the", "ship", "that", "is", "commanded", "by", "the", "youngest", "captain", "?"], "dataset_name": "spider", "guid": 263}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What is the most common type of ships?", "sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "ship_mission", "query": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "ship", "GROUP", "BY", "TYPE", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "ship", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common type of ships?", "question_toks": ["What", "is", "the", "most", "common", "type", "of", "ships", "?"], "dataset_name": "spider", "guid": 264}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | List the nations that have more than two ships.", "sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2", "example": {"db_id": "ship_mission", "query": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "Nationality", "FROM", "ship", "GROUP", "BY", "Nationality", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "nationality", "from", "ship", "group", "by", "nationality", "having", "count", "(", "*", ")", ">", "value"], "question": "List the nations that have more than two ships.", "question_toks": ["List", "the", "nations", "that", "have", "more", "than", "two", "ships", "."], "dataset_name": "spider", "guid": 265}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | which countries have more than 2 airports?", "sql": "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2", "example": {"db_id": "flight_company", "query": "SELECT country FROM airport GROUP BY country HAVING count(*)  >  2", "query_toks": ["SELECT", "country", "FROM", "airport", "GROUP", "BY", "country", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "country", "from", "airport", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "which countries have more than 2 airports?", "question_toks": ["which", "countries", "have", "more", "than", "2", "airports", "?"], "dataset_name": "spider", "guid": 266}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | List all airline names and their abbreviations in \"USA\".", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "example": {"db_id": "flight_2", "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "query_toks": ["SELECT", "Airline", ",", "Abbreviation", "FROM", "AIRLINES", "WHERE", "Country", "=", "``", "USA", "''"], "query_toks_no_value": ["select", "airline", ",", "abbreviation", "from", "airlines", "where", "country", "=", "value"], "question": "List all airline names and their abbreviations in \"USA\".", "question_toks": ["List", "all", "airline", "names", "and", "their", "abbreviations", "in", "``", "USA", "''", "."], "dataset_name": "spider", "guid": 267}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What are airlines that have some flight departing from airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "What are airlines that have some flight departing from airport 'AHD'?", "question_toks": ["What", "are", "airlines", "that", "have", "some", "flight", "departing", "from", "airport", "'AHD", "'", "?"], "dataset_name": "spider", "guid": 268}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the id and salary of the employee named Mark Young?", "sql": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "example": {"db_id": "flight_1", "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "query_toks": ["SELECT", "eid", ",", "salary", "FROM", "Employee", "WHERE", "name", "=", "'Mark", "Young", "'"], "query_toks_no_value": ["select", "eid", ",", "salary", "from", "employee", "where", "name", "=", "value"], "question": "What is the id and salary of the employee named Mark Young?", "question_toks": ["What", "is", "the", "id", "and", "salary", "of", "the", "employee", "named", "Mark", "Young", "?"], "dataset_name": "spider", "guid": 269}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Count the number of United Airlines flights that arrive in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "JOIN", "AIRLINES", "AS", "T3", "ON", "T3.uid", "=", "T1.Airline", "WHERE", "T2.City", "=", "``", "Aberdeen", "''", "AND", "T3.Airline", "=", "``", "United", "Airlines", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "join", "airlines", "as", "t3", "on", "t3", ".", "uid", "=", "t1", ".", "airline", "where", "t2", ".", "city", "=", "value", "and", "t3", ".", "airline", "=", "value"], "question": "Count the number of United Airlines flights that arrive in Aberdeen.", "question_toks": ["Count", "the", "number", "of", "United", "Airlines", "flights", "that", "arrive", "in", "Aberdeen", "."], "dataset_name": "spider", "guid": 270}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What are the different ship flags, and how many ships have each?", "sql": "SELECT count(*) ,  flag FROM ship GROUP BY flag", "example": {"db_id": "ship_1", "query": "SELECT count(*) ,  flag FROM ship GROUP BY flag", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "flag", "FROM", "ship", "GROUP", "BY", "flag"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "flag", "from", "ship", "group", "by", "flag"], "question": "What are the different ship flags, and how many ships have each?", "question_toks": ["What", "are", "the", "different", "ship", "flags", ",", "and", "how", "many", "ships", "have", "each", "?"], "dataset_name": "spider", "guid": 271}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which airports do not have departing or arriving flights?", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "example": {"db_id": "flight_2", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "query_toks": ["SELECT", "AirportName", "FROM", "Airports", "WHERE", "AirportCode", "NOT", "IN", "(", "SELECT", "SourceAirport", "FROM", "Flights", "UNION", "SELECT", "DestAirport", "FROM", "Flights", ")"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")"], "question": "Which airports do not have departing or arriving flights?", "question_toks": ["Which", "airports", "do", "not", "have", "departing", "or", "arriving", "flights", "?"], "dataset_name": "spider", "guid": 272}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "example": {"db_id": "aircraft", "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "query_toks": ["SELECT", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "airport_aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "airport", "AS", "T3", "ON", "T2.Airport_ID", "=", "T3.Airport_ID", "WHERE", "T3.Airport_Name", "=", "``", "London", "Heathrow", "''", "INTERSECT", "SELECT", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "airport_aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "airport", "AS", "T3", "ON", "T2.Airport_ID", "=", "T3.Airport_ID", "WHERE", "T3.Airport_Name", "=", "``", "London", "Gatwick", "''"], "query_toks_no_value": ["select", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "airport_aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "airport", "as", "t3", "on", "t2", ".", "airport_id", "=", "t3", ".", "airport_id", "where", "t3", ".", "airport_name", "=", "value", "intersect", "select", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "airport_aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "airport", "as", "t3", "on", "t2", ".", "airport_id", "=", "t3", ".", "airport_id", "where", "t3", ".", "airport_name", "=", "value"], "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?", "question_toks": ["What", "are", "the", "names", "of", "all", "aircrafts", "that", "are", "associated", "with", "both", "London", "Heathrow", "and", "Gatwick", "airports", "?"], "dataset_name": "spider", "guid": 273}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the names of all pilots listed by descending age?", "sql": "SELECT Name FROM pilot ORDER BY Age DESC", "example": {"db_id": "aircraft", "query": "SELECT Name FROM pilot ORDER BY Age DESC", "query_toks": ["SELECT", "Name", "FROM", "pilot", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "name", "from", "pilot", "order", "by", "age", "desc"], "question": "What are the names of all pilots listed by descending age?", "question_toks": ["What", "are", "the", "names", "of", "all", "pilots", "listed", "by", "descending", "age", "?"], "dataset_name": "spider", "guid": 274}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | Which of the airport names contains the word 'international'?", "sql": "SELECT name FROM airport WHERE name LIKE '%international%'", "example": {"db_id": "flight_company", "query": "SELECT name FROM airport WHERE name LIKE '%international%'", "query_toks": ["SELECT", "name", "FROM", "airport", "WHERE", "name", "LIKE", "'", "%", "international", "%", "'"], "query_toks_no_value": ["select", "name", "from", "airport", "where", "name", "like", "value"], "question": "Which of the airport names contains the word 'international'?", "question_toks": ["Which", "of", "the", "airport", "names", "contains", "the", "word", "'international", "'", "?"], "dataset_name": "spider", "guid": 275}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the busiest destination airport that runs most number of routes in China.", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.dst_apid", "WHERE", "T1.country", "=", "'China", "'", "GROUP", "BY", "T1.name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "dst_apid", "where", "t1", ".", "country", "=", "value", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the busiest destination airport that runs most number of routes in China.", "question_toks": ["Find", "the", "busiest", "destination", "airport", "that", "runs", "most", "number", "of", "routes", "in", "China", "."], "dataset_name": "spider", "guid": 276}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Which rank is the most common among captains?", "sql": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "ship_1", "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "rank", "FROM", "captain", "GROUP", "BY", "rank", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "rank", "from", "captain", "group", "by", "rank", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which rank is the most common among captains?", "question_toks": ["Which", "rank", "is", "the", "most", "common", "among", "captains", "?"], "dataset_name": "spider", "guid": 277}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Which countries has the most number of airlines?", "sql": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country", "FROM", "airlines", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "airlines", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which countries has the most number of airlines?", "question_toks": ["Which", "countries", "has", "the", "most", "number", "of", "airlines", "?"], "dataset_name": "spider", "guid": 278}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show names for all employees with salary more than the average.", "sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "example": {"db_id": "flight_1", "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "query_toks": ["SELECT", "name", "FROM", "Employee", "WHERE", "salary", ">", "(", "SELECT", "avg", "(", "salary", ")", "FROM", "Employee", ")"], "query_toks_no_value": ["select", "name", "from", "employee", "where", "salary", ">", "(", "select", "avg", "(", "salary", ")", "from", "employee", ")"], "question": "Show names for all employees with salary more than the average.", "question_toks": ["Show", "names", "for", "all", "employees", "with", "salary", "more", "than", "the", "average", "."], "dataset_name": "spider", "guid": 279}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | How many routes end in a Canadian airport?", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.dst_apid", "WHERE", "country", "=", "'Canada", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "dst_apid", "where", "country", "=", "value"], "question": "How many routes end in a Canadian airport?", "question_toks": ["How", "many", "routes", "end", "in", "a", "Canadian", "airport", "?"], "dataset_name": "spider", "guid": 280}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What are the names and flags of ships that do not have a captain with the rank of Midshipman?", "sql": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')", "example": {"db_id": "ship_1", "query": "SELECT name ,  flag FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank  =  'Midshipman')", "query_toks": ["SELECT", "name", ",", "flag", "FROM", "ship", "WHERE", "ship_id", "NOT", "IN", "(", "SELECT", "ship_id", "FROM", "captain", "WHERE", "rank", "=", "'Midshipman", "'", ")"], "query_toks_no_value": ["select", "name", ",", "flag", "from", "ship", "where", "ship_id", "not", "in", "(", "select", "ship_id", "from", "captain", "where", "rank", "=", "value", ")"], "question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?", "question_toks": ["What", "are", "the", "names", "and", "flags", "of", "ships", "that", "do", "not", "have", "a", "captain", "with", "the", "rank", "of", "Midshipman", "?"], "dataset_name": "spider", "guid": 281}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the number of routes that have destination John F Kennedy International Airport.", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.dst_apid", "WHERE", "T1.name", "=", "'John", "F", "Kennedy", "International", "Airport", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "dst_apid", "where", "t1", ".", "name", "=", "value"], "question": "Find the number of routes that have destination John F Kennedy International Airport.", "question_toks": ["Find", "the", "number", "of", "routes", "that", "have", "destination", "John", "F", "Kennedy", "International", "Airport", "."], "dataset_name": "spider", "guid": 282}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?", "sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'", "example": {"db_id": "ship_1", "query": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'", "query_toks": ["SELECT", "rank", "FROM", "captain", "EXCEPT", "SELECT", "rank", "FROM", "captain", "WHERE", "CLASS", "=", "'Third-rate", "ship", "of", "the", "line", "'"], "query_toks_no_value": ["select", "rank", "from", "captain", "except", "select", "rank", "from", "captain", "where", "class", "=", "value"], "question": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?", "question_toks": ["What", "are", "the", "ranks", "of", "captains", "that", "have", "no", "captain", "that", "are", "in", "the", "Third-rate", "ship", "of", "the", "line", "class", "?"], "dataset_name": "spider", "guid": 283}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "routes", "AS", "T1", "JOIN", "airports", "AS", "T2", "ON", "T1.dst_apid", "=", "T2.apid", "JOIN", "airlines", "AS", "T3", "ON", "T1.alid", "=", "T3.alid", "WHERE", "T2.country", "=", "'Italy", "'", "AND", "T3.name", "=", "'American", "Airlines", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "routes", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "dst_apid", "=", "t2", ".", "apid", "join", "airlines", "as", "t3", "on", "t1", ".", "alid", "=", "t3", ".", "alid", "where", "t2", ".", "country", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.", "question_toks": ["Return", "the", "number", "of", "routes", "with", "destination", "airport", "in", "Italy", "operated", "by", "the", "airline", "with", "name", "'American", "Airlines", "'", "."], "dataset_name": "spider", "guid": 284}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show the id and name of the employee with maximum salary.", "sql": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "query_toks": ["SELECT", "eid", ",", "name", "FROM", "Employee", "ORDER", "BY", "salary", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "eid", ",", "name", "from", "employee", "order", "by", "salary", "desc", "limit", "value"], "question": "Show the id and name of the employee with maximum salary.", "question_toks": ["Show", "the", "id", "and", "name", "of", "the", "employee", "with", "maximum", "salary", "."], "dataset_name": "spider", "guid": 285}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the aircraft name for the flight with number 99", "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99", "example": {"db_id": "flight_1", "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99", "query_toks": ["SELECT", "T2.name", "FROM", "Flight", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T1.aid", "=", "T2.aid", "WHERE", "T1.flno", "=", "99"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "flight", "as", "t1", "join", "aircraft", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "flno", "=", "value"], "question": "What is the aircraft name for the flight with number 99", "question_toks": ["What", "is", "the", "aircraft", "name", "for", "the", "flight", "with", "number", "99"], "dataset_name": "spider", "guid": 286}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What are the type and nationality of ships?", "sql": "SELECT TYPE ,  Nationality FROM ship", "example": {"db_id": "ship_mission", "query": "SELECT TYPE ,  Nationality FROM ship", "query_toks": ["SELECT", "TYPE", ",", "Nationality", "FROM", "ship"], "query_toks_no_value": ["select", "type", ",", "nationality", "from", "ship"], "question": "What are the type and nationality of ships?", "question_toks": ["What", "are", "the", "type", "and", "nationality", "of", "ships", "?"], "dataset_name": "spider", "guid": 287}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the destinations and number of flights to each one?", "sql": "SELECT destination ,  count(*) FROM Flight GROUP BY destination", "example": {"db_id": "flight_1", "query": "SELECT destination ,  count(*) FROM Flight GROUP BY destination", "query_toks": ["SELECT", "destination", ",", "count", "(", "*", ")", "FROM", "Flight", "GROUP", "BY", "destination"], "query_toks_no_value": ["select", "destination", ",", "count", "(", "*", ")", "from", "flight", "group", "by", "destination"], "question": "What are the destinations and number of flights to each one?", "question_toks": ["What", "are", "the", "destinations", "and", "number", "of", "flights", "to", "each", "one", "?"], "dataset_name": "spider", "guid": 288}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "JOIN", "Aircraft", "AS", "T3", "ON", "T3.aid", "=", "T2.aid", "WHERE", "T3.distance", ">", "5000", "GROUP", "BY", "T1.eid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "join", "aircraft", "as", "t3", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t3", ".", "distance", ">", "value", "group", "by", "t1", ".", "eid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?", "question_toks": ["What", "is", "the", "salary", "and", "name", "of", "the", "employee", "who", "has", "the", "most", "number", "of", "certificates", "on", "aircrafts", "with", "distance", "more", "than", "5000", "?"], "dataset_name": "spider", "guid": 289}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the number of routes for each source airport and the airport name.", "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name", "example": {"db_id": "flight_4", "query": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.src_apid", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "src_apid", "group", "by", "t1", ".", "name"], "question": "Find the number of routes for each source airport and the airport name.", "question_toks": ["Find", "the", "number", "of", "routes", "for", "each", "source", "airport", "and", "the", "airport", "name", "."], "dataset_name": "spider", "guid": 290}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | How many employees do we have?", "sql": "SELECT count(*) FROM Employee", "example": {"db_id": "flight_1", "query": "SELECT count(*) FROM Employee", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Employee"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee"], "question": "How many employees do we have?", "question_toks": ["How", "many", "employees", "do", "we", "have", "?"], "dataset_name": "spider", "guid": 291}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | List the names of aircrafts and that won matches at least twice.", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2", "example": {"db_id": "aircraft", "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "MATCH", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Winning_Aircraft", "GROUP", "BY", "T2.Winning_Aircraft", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "winning_aircraft", "group", "by", "t2", ".", "winning_aircraft", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List the names of aircrafts and that won matches at least twice.", "question_toks": ["List", "the", "names", "of", "aircrafts", "and", "that", "won", "matches", "at", "least", "twice", "."], "dataset_name": "spider", "guid": 292}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What is the name, type, and flag of the ship that was built in the most recent year?", "sql": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1", "example": {"db_id": "ship_1", "query": "SELECT name ,  TYPE ,  flag FROM ship ORDER BY built_year DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "TYPE", ",", "flag", "FROM", "ship", "ORDER", "BY", "built_year", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "type", ",", "flag", "from", "ship", "order", "by", "built_year", "desc", "limit", "value"], "question": "What is the name, type, and flag of the ship that was built in the most recent year?", "question_toks": ["What", "is", "the", "name", ",", "type", ",", "and", "flag", "of", "the", "ship", "that", "was", "built", "in", "the", "most", "recent", "year", "?"], "dataset_name": "spider", "guid": 293}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What are flight numbers of flights departing from Airport \"APG\"?", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "example": {"db_id": "flight_2", "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "query_toks": ["SELECT", "FlightNo", "FROM", "FLIGHTS", "WHERE", "SourceAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "flightno", "from", "flights", "where", "sourceairport", "=", "value"], "question": "What are flight numbers of flights departing from Airport \"APG\"?", "question_toks": ["What", "are", "flight", "numbers", "of", "flights", "departing", "from", "Airport", "``", "APG", "''", "?"], "dataset_name": "spider", "guid": 294}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show all destinations and the number of flights to each destination.", "sql": "SELECT destination ,  count(*) FROM Flight GROUP BY destination", "example": {"db_id": "flight_1", "query": "SELECT destination ,  count(*) FROM Flight GROUP BY destination", "query_toks": ["SELECT", "destination", ",", "count", "(", "*", ")", "FROM", "Flight", "GROUP", "BY", "destination"], "query_toks_no_value": ["select", "destination", ",", "count", "(", "*", ")", "from", "flight", "group", "by", "destination"], "question": "Show all destinations and the number of flights to each destination.", "question_toks": ["Show", "all", "destinations", "and", "the", "number", "of", "flights", "to", "each", "destination", "."], "dataset_name": "spider", "guid": 295}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the flight number and its distance for the one with the maximum price?", "sql": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1", "query_toks": ["SELECT", "flno", ",", "distance", "FROM", "Flight", "ORDER", "BY", "price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "flno", ",", "distance", "from", "flight", "order", "by", "price", "desc", "limit", "value"], "question": "What is the flight number and its distance for the one with the maximum price?", "question_toks": ["What", "is", "the", "flight", "number", "and", "its", "distance", "for", "the", "one", "with", "the", "maximum", "price", "?"], "dataset_name": "spider", "guid": 296}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Give the flight numbers of flights leaving from Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "example": {"db_id": "flight_2", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "T1.FlightNo", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.SourceAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "t1", ".", "flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "sourceairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "Give the flight numbers of flights leaving from Aberdeen.", "question_toks": ["Give", "the", "flight", "numbers", "of", "flights", "leaving", "from", "Aberdeen", "."], "dataset_name": "spider", "guid": 297}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What is the abbreviation of the airilne has the fewest flights and what country is it in?", "sql": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "example": {"db_id": "flight_2", "query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.Abbreviation", ",", "T1.Country", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "abbreviation", ",", "t1", ".", "country", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "question_toks": ["What", "is", "the", "abbreviation", "of", "the", "airilne", "has", "the", "fewest", "flights", "and", "what", "country", "is", "it", "in", "?"], "dataset_name": "spider", "guid": 298}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the name and salary for employee with id 242518965?", "sql": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "example": {"db_id": "flight_1", "query": "SELECT name ,  salary FROM Employee WHERE eid  =  242518965", "query_toks": ["SELECT", "name", ",", "salary", "FROM", "Employee", "WHERE", "eid", "=", "242518965"], "query_toks_no_value": ["select", "name", ",", "salary", "from", "employee", "where", "eid", "=", "value"], "question": "What is the name and salary for employee with id 242518965?", "question_toks": ["What", "is", "the", "name", "and", "salary", "for", "employee", "with", "id", "242518965", "?"], "dataset_name": "spider", "guid": 299}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the maximum elevation of all airports in the country of Iceland?", "sql": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'", "example": {"db_id": "flight_4", "query": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'", "query_toks": ["SELECT", "max", "(", "elevation", ")", "FROM", "airports", "WHERE", "country", "=", "'Iceland", "'"], "query_toks_no_value": ["select", "max", "(", "elevation", ")", "from", "airports", "where", "country", "=", "value"], "question": "What is the maximum elevation of all airports in the country of Iceland?", "question_toks": ["What", "is", "the", "maximum", "elevation", "of", "all", "airports", "in", "the", "country", "of", "Iceland", "?"], "dataset_name": "spider", "guid": 300}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | Show the names of pilots from team \"Bradley\" or \"Fordham\".", "sql": "SELECT Pilot_name FROM pilot WHERE Team  =  \"Bradley\" OR Team  =  \"Fordham\"", "example": {"db_id": "pilot_record", "query": "SELECT Pilot_name FROM pilot WHERE Team  =  \"Bradley\" OR Team  =  \"Fordham\"", "query_toks": ["SELECT", "Pilot_name", "FROM", "pilot", "WHERE", "Team", "=", "``", "Bradley", "''", "OR", "Team", "=", "``", "Fordham", "''"], "query_toks_no_value": ["select", "pilot_name", "from", "pilot", "where", "team", "=", "value", "or", "team", "=", "value"], "question": "Show the names of pilots from team \"Bradley\" or \"Fordham\".", "question_toks": ["Show", "the", "names", "of", "pilots", "from", "team", "``", "Bradley", "''", "or", "``", "Fordham", "''", "."], "dataset_name": "spider", "guid": 301}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | How many airports are there per city in the United States? Order the cities by decreasing number of airports.", "sql": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC", "example": {"db_id": "flight_4", "query": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "city", "FROM", "airports", "WHERE", "country", "=", "'United", "States", "'", "GROUP", "BY", "city", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "city", "from", "airports", "where", "country", "=", "value", "group", "by", "city", "order", "by", "count", "(", "*", ")", "desc"], "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.", "question_toks": ["How", "many", "airports", "are", "there", "per", "city", "in", "the", "United", "States", "?", "Order", "the", "cities", "by", "decreasing", "number", "of", "airports", "."], "dataset_name": "spider", "guid": 302}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What is the location and name of the winning aircraft?", "sql": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft", "example": {"db_id": "aircraft", "query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft", "query_toks": ["SELECT", "T2.Location", ",", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "MATCH", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Winning_Aircraft"], "query_toks_no_value": ["select", "t2", ".", "location", ",", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "winning_aircraft"], "question": "What is the location and name of the winning aircraft?", "question_toks": ["What", "is", "the", "location", "and", "name", "of", "the", "winning", "aircraft", "?"], "dataset_name": "spider", "guid": 303}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What are the types and nationalities of every ship?", "sql": "SELECT TYPE ,  Nationality FROM ship", "example": {"db_id": "ship_mission", "query": "SELECT TYPE ,  Nationality FROM ship", "query_toks": ["SELECT", "TYPE", ",", "Nationality", "FROM", "ship"], "query_toks_no_value": ["select", "type", ",", "nationality", "from", "ship"], "question": "What are the types and nationalities of every ship?", "question_toks": ["What", "are", "the", "types", "and", "nationalities", "of", "every", "ship", "?"], "dataset_name": "spider", "guid": 304}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the minimum, average, and maximum distance of all aircrafts.", "sql": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft", "example": {"db_id": "flight_1", "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft", "query_toks": ["SELECT", "min", "(", "distance", ")", ",", "avg", "(", "distance", ")", ",", "max", "(", "distance", ")", "FROM", "Aircraft"], "query_toks_no_value": ["select", "min", "(", "distance", ")", ",", "avg", "(", "distance", ")", ",", "max", "(", "distance", ")", "from", "aircraft"], "question": "What is the minimum, average, and maximum distance of all aircrafts.", "question_toks": ["What", "is", "the", "minimum", ",", "average", ",", "and", "maximum", "distance", "of", "all", "aircrafts", "."], "dataset_name": "spider", "guid": 305}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the name of the airport with the most number of routes that start in China?", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.src_apid", "WHERE", "T1.country", "=", "'China", "'", "GROUP", "BY", "T1.name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "src_apid", "where", "t1", ".", "country", "=", "value", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the airport with the most number of routes that start in China?", "question_toks": ["What", "is", "the", "name", "of", "the", "airport", "with", "the", "most", "number", "of", "routes", "that", "start", "in", "China", "?"], "dataset_name": "spider", "guid": 306}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Which classes have more than two captains?", "sql": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2", "example": {"db_id": "ship_1", "query": "SELECT CLASS FROM captain GROUP BY CLASS HAVING count(*)  >  2", "query_toks": ["SELECT", "CLASS", "FROM", "captain", "GROUP", "BY", "CLASS", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "class", "from", "captain", "group", "by", "class", "having", "count", "(", "*", ")", ">", "value"], "question": "Which classes have more than two captains?", "question_toks": ["Which", "classes", "have", "more", "than", "two", "captains", "?"], "dataset_name": "spider", "guid": 307}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many airlines do we have?", "sql": "SELECT count(*) FROM AIRLINES", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines"], "question": "How many airlines do we have?", "question_toks": ["How", "many", "airlines", "do", "we", "have", "?"], "dataset_name": "spider", "guid": 308}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.", "sql": "SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality", "example": {"db_id": "pilot_record", "query": "SELECT Nationality ,  COUNT(*) FROM pilot GROUP BY Nationality", "query_toks": ["SELECT", "Nationality", ",", "COUNT", "(", "*", ")", "FROM", "pilot", "GROUP", "BY", "Nationality"], "query_toks_no_value": ["select", "nationality", ",", "count", "(", "*", ")", "from", "pilot", "group", "by", "nationality"], "question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.", "question_toks": ["What", "are", "the", "different", "nationalities", "of", "pilots", "?", "Show", "each", "nationality", "and", "the", "number", "of", "pilots", "of", "each", "nationality", "."], "dataset_name": "spider", "guid": 309}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show all train names and times in stations in London in descending order by train time.", "sql": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC", "example": {"db_id": "train_station", "query": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC", "query_toks": ["SELECT", "T3.name", ",", "T3.time", "FROM", "train_station", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.station_id", "=", "T2.station_id", "JOIN", "train", "AS", "T3", "ON", "T3.train_id", "=", "T1.train_id", "WHERE", "T2.location", "=", "'London", "'", "ORDER", "BY", "T3.time", "DESC"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t3", ".", "time", "from", "train_station", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "station_id", "=", "t2", ".", "station_id", "join", "train", "as", "t3", "on", "t3", ".", "train_id", "=", "t1", ".", "train_id", "where", "t2", ".", "location", "=", "value", "order", "by", "t3", ".", "time", "desc"], "question": "Show all train names and times in stations in London in descending order by train time.", "question_toks": ["Show", "all", "train", "names", "and", "times", "in", "stations", "in", "London", "in", "descending", "order", "by", "train", "time", "."], "dataset_name": "spider", "guid": 310}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the total number of routes for each country and airline in that country?", "sql": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name", "example": {"db_id": "flight_4", "query": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name", "query_toks": ["SELECT", "T1.country", ",", "T1.name", ",", "count", "(", "*", ")", "FROM", "airlines", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.alid", "=", "T2.alid", "GROUP", "BY", "T1.country", ",", "T1.name"], "query_toks_no_value": ["select", "t1", ".", "country", ",", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "alid", "=", "t2", ".", "alid", "group", "by", "t1", ".", "country", ",", "t1", ".", "name"], "question": "What is the total number of routes for each country and airline in that country?", "question_toks": ["What", "is", "the", "total", "number", "of", "routes", "for", "each", "country", "and", "airline", "in", "that", "country", "?"], "dataset_name": "spider", "guid": 311}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which airline has abbreviation 'UAL'?", "sql": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "example": {"db_id": "flight_2", "query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\"", "query_toks": ["SELECT", "Airline", "FROM", "AIRLINES", "WHERE", "Abbreviation", "=", "``", "UAL", "''"], "query_toks_no_value": ["select", "airline", "from", "airlines", "where", "abbreviation", "=", "value"], "question": "Which airline has abbreviation 'UAL'?", "question_toks": ["Which", "airline", "has", "abbreviation", "'UAL", "'", "?"], "dataset_name": "spider", "guid": 312}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | What is the average and maximum number of total passengers for train stations in London or Glasgow?", "sql": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'", "example": {"db_id": "train_station", "query": "SELECT avg(total_passengers) ,  max(total_passengers) FROM station WHERE LOCATION  =  'London' OR LOCATION  =  'Glasgow'", "query_toks": ["SELECT", "avg", "(", "total_passengers", ")", ",", "max", "(", "total_passengers", ")", "FROM", "station", "WHERE", "LOCATION", "=", "'London", "'", "OR", "LOCATION", "=", "'Glasgow", "'"], "query_toks_no_value": ["select", "avg", "(", "total_passengers", ")", ",", "max", "(", "total_passengers", ")", "from", "station", "where", "location", "=", "value", "or", "location", "=", "value"], "question": "What is the average and maximum number of total passengers for train stations in London or Glasgow?", "question_toks": ["What", "is", "the", "average", "and", "maximum", "number", "of", "total", "passengers", "for", "train", "stations", "in", "London", "or", "Glasgow", "?"], "dataset_name": "spider", "guid": 313}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many 'United Airlines' flights depart from Airport 'AHD'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T2.Airline", "=", "T1.uid", "WHERE", "T1.Airline", "=", "``", "United", "Airlines", "''", "AND", "T2.SourceAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2", ".", "airline", "=", "t1", ".", "uid", "where", "t1", ".", "airline", "=", "value", "and", "t2", ".", "sourceairport", "=", "value"], "question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "question_toks": ["How", "many", "'United", "Airlines", "'", "flights", "depart", "from", "Airport", "'AHD", "'", "?"], "dataset_name": "spider", "guid": 314}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | List the wheels and locations of the railways.", "sql": "SELECT Wheels ,  LOCATION FROM railway", "example": {"db_id": "railway", "query": "SELECT Wheels ,  LOCATION FROM railway", "query_toks": ["SELECT", "Wheels", ",", "LOCATION", "FROM", "railway"], "query_toks_no_value": ["select", "wheels", ",", "location", "from", "railway"], "question": "List the wheels and locations of the railways.", "question_toks": ["List", "the", "wheels", "and", "locations", "of", "the", "railways", "."], "dataset_name": "spider", "guid": 315}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What are airlines that have flights arriving at airport 'AHD'?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.DestAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "destairport", "=", "value"], "question": "What are airlines that have flights arriving at airport 'AHD'?", "question_toks": ["What", "are", "airlines", "that", "have", "flights", "arriving", "at", "airport", "'AHD", "'", "?"], "dataset_name": "spider", "guid": 316}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | List the name of ships whose nationality is not \"United States\".", "sql": "SELECT Name FROM ship WHERE Nationality != \"United States\"", "example": {"db_id": "ship_mission", "query": "SELECT Name FROM ship WHERE Nationality != \"United States\"", "query_toks": ["SELECT", "Name", "FROM", "ship", "WHERE", "Nationality", "!", "=", "``", "United", "States", "''"], "query_toks_no_value": ["select", "name", "from", "ship", "where", "nationality", "!", "=", "value"], "question": "List the name of ships whose nationality is not \"United States\".", "question_toks": ["List", "the", "name", "of", "ships", "whose", "nationality", "is", "not", "``", "United", "States", "''", "."], "dataset_name": "spider", "guid": 317}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Give the city and country for the Alton airport.", "sql": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "example": {"db_id": "flight_2", "query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\"", "query_toks": ["SELECT", "City", ",", "Country", "FROM", "AIRPORTS", "WHERE", "AirportName", "=", "``", "Alton", "''"], "query_toks_no_value": ["select", "city", ",", "country", "from", "airports", "where", "airportname", "=", "value"], "question": "Give the city and country for the Alton airport.", "question_toks": ["Give", "the", "city", "and", "country", "for", "the", "Alton", "airport", "."], "dataset_name": "spider", "guid": 318}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which airlines have departing flights from both APG and CVO airports?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "APG", "''", "INTERSECT", "SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "CVO", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value", "intersect", "select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "Which airlines have departing flights from both APG and CVO airports?", "question_toks": ["Which", "airlines", "have", "departing", "flights", "from", "both", "APG", "and", "CVO", "airports", "?"], "dataset_name": "spider", "guid": 319}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | Show codes and fates of missions, and names of ships involved.", "sql": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID", "example": {"db_id": "ship_mission", "query": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID", "query_toks": ["SELECT", "T1.Code", ",", "T1.Fate", ",", "T2.Name", "FROM", "mission", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.Ship_ID", "=", "T2.Ship_ID"], "query_toks_no_value": ["select", "t1", ".", "code", ",", "t1", ".", "fate", ",", "t2", ".", "name", "from", "mission", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id"], "question": "Show codes and fates of missions, and names of ships involved.", "question_toks": ["Show", "codes", "and", "fates", "of", "missions", ",", "and", "names", "of", "ships", "involved", "."], "dataset_name": "spider", "guid": 320}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.", "sql": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC", "example": {"db_id": "flight_4", "query": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.src_apid", "GROUP", "BY", "T1.name", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "src_apid", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc"], "question": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.", "question_toks": ["Find", "the", "number", "of", "routes", "and", "airport", "name", "for", "each", "source", "airport", ",", "order", "the", "results", "by", "decreasing", "number", "of", "routes", "."], "dataset_name": "spider", "guid": 321}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the id and name of the aircraft that can cover the maximum distance?", "sql": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1", "query_toks": ["SELECT", "aid", ",", "name", "FROM", "Aircraft", "ORDER", "BY", "distance", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "aid", ",", "name", "from", "aircraft", "order", "by", "distance", "desc", "limit", "value"], "question": "What is the id and name of the aircraft that can cover the maximum distance?", "question_toks": ["What", "is", "the", "id", "and", "name", "of", "the", "aircraft", "that", "can", "cover", "the", "maximum", "distance", "?"], "dataset_name": "spider", "guid": 322}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the name of the airport in the city of Goroka.", "sql": "SELECT name FROM airports WHERE city  =  'Goroka'", "example": {"db_id": "flight_4", "query": "SELECT name FROM airports WHERE city  =  'Goroka'", "query_toks": ["SELECT", "name", "FROM", "airports", "WHERE", "city", "=", "'Goroka", "'"], "query_toks_no_value": ["select", "name", "from", "airports", "where", "city", "=", "value"], "question": "Find the name of the airport in the city of Goroka.", "question_toks": ["Find", "the", "name", "of", "the", "airport", "in", "the", "city", "of", "Goroka", "."], "dataset_name": "spider", "guid": 323}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What are the airline names and abbreviations for airlines in the USA?", "sql": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "example": {"db_id": "flight_2", "query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\"", "query_toks": ["SELECT", "Airline", ",", "Abbreviation", "FROM", "AIRLINES", "WHERE", "Country", "=", "``", "USA", "''"], "query_toks_no_value": ["select", "airline", ",", "abbreviation", "from", "airlines", "where", "country", "=", "value"], "question": "What are the airline names and abbreviations for airlines in the USA?", "question_toks": ["What", "are", "the", "airline", "names", "and", "abbreviations", "for", "airlines", "in", "the", "USA", "?"], "dataset_name": "spider", "guid": 324}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Give the code of the airport with the least flights.", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "example": {"db_id": "flight_2", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.AirportCode", "FROM", "AIRPORTS", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.AirportCode", "=", "T2.DestAirport", "OR", "T1.AirportCode", "=", "T2.SourceAirport", "GROUP", "BY", "T1.AirportCode", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "airportcode", "=", "t2", ".", "destairport", "or", "t1", ".", "airportcode", "=", "t2", ".", "sourceairport", "group", "by", "t1", ".", "airportcode", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Give the code of the airport with the least flights.", "question_toks": ["Give", "the", "code", "of", "the", "airport", "with", "the", "least", "flights", "."], "dataset_name": "spider", "guid": 325}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.", "sql": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005", "example": {"db_id": "pilot_record", "query": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005", "query_toks": ["SELECT", "POSITION", "FROM", "pilot", "WHERE", "Join_Year", "<", "2000", "INTERSECT", "SELECT", "POSITION", "FROM", "pilot", "WHERE", "Join_Year", ">", "2005"], "query_toks_no_value": ["select", "position", "from", "pilot", "where", "join_year", "<", "value", "intersect", "select", "position", "from", "pilot", "where", "join_year", ">", "value"], "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.", "question_toks": ["Show", "the", "pilot", "positions", "that", "have", "both", "pilots", "joining", "after", "year", "2005", "and", "pilots", "joining", "before", "2000", "."], "dataset_name": "spider", "guid": 326}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What is the total number of people who could stay in the modern rooms in this inn?", "sql": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';", "example": {"db_id": "inn_1", "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';", "query_toks": ["SELECT", "sum", "(", "maxOccupancy", ")", "FROM", "Rooms", "WHERE", "decor", "=", "'modern", "'", ";"], "query_toks_no_value": ["select", "sum", "(", "maxoccupancy", ")", "from", "rooms", "where", "decor", "=", "value"], "question": "What is the total number of people who could stay in the modern rooms in this inn?", "question_toks": ["What", "is", "the", "total", "number", "of", "people", "who", "could", "stay", "in", "the", "modern", "rooms", "in", "this", "inn", "?"], "dataset_name": "spider", "guid": 2611}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good restaurant in the bay area ?", "sql": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "LOCATION", "AS", "t2", "JOIN", "restaurant", "AS", "t1", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t1.city_name", "IN", "(", "SELECT", "city_name", "FROM", "geographic", "WHERE", "region", "=", "``", "region0", "''", ")", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "location", "as", "t2", "join", "restaurant", "as", "t1", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t1", ".", "city_name", "in", "(", "select", "city_name", "from", "geographic", "where", "region", "=", "value", ")", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good restaurant in the bay area ?", "question_toks": ["give", "me", "a", "good", "restaurant", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2612}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | how many places for chinese food are there in the bay area ?", "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";", "example": {"db_id": "restaurants", "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "chinese", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value"], "question": "how many places for chinese food are there in the bay area ?", "question_toks": ["how", "many", "places", "for", "chinese", "food", "are", "there", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2613}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the name of rooms booked by some customers whose first name contains ROY.", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", "example": {"db_id": "inn_1", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'", "query_toks": ["SELECT", "T2.roomName", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "WHERE", "firstname", "LIKE", "'", "%", "ROY", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "roomname", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "where", "firstname", "like", "value"], "question": "Find the name of rooms booked by some customers whose first name contains ROY.", "question_toks": ["Find", "the", "name", "of", "rooms", "booked", "by", "some", "customers", "whose", "first", "name", "contains", "ROY", "."], "dataset_name": "spider", "guid": 2614}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the name and id of the top 3 expensive rooms.", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "example": {"db_id": "inn_1", "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "query_toks": ["SELECT", "RoomId", ",", "roomName", "FROM", "Rooms", "ORDER", "BY", "basePrice", "DESC", "LIMIT", "3", ";"], "query_toks_no_value": ["select", "roomid", ",", "roomname", "from", "rooms", "order", "by", "baseprice", "desc", "limit", "value"], "question": "Find the name and id of the top 3 expensive rooms.", "question_toks": ["Find", "the", "name", "and", "id", "of", "the", "top", "3", "expensive", "rooms", "."], "dataset_name": "spider", "guid": 2615}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find the names and opening hours of the tourist attractions that we get to by bus or walk.", "sql": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"", "query_toks": ["SELECT", "Name", ",", "Opening_Hours", "FROM", "TOURIST_ATTRACTIONS", "WHERE", "How_to_Get_There", "=", "``", "bus", "''", "OR", "How_to_Get_There", "=", "``", "walk", "''"], "query_toks_no_value": ["select", "name", ",", "opening_hours", "from", "tourist_attractions", "where", "how_to_get_there", "=", "value", "or", "how_to_get_there", "=", "value"], "question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.", "question_toks": ["Find", "the", "names", "and", "opening", "hours", "of", "the", "tourist", "attractions", "that", "we", "get", "to", "by", "bus", "or", "walk", "."], "dataset_name": "spider", "guid": 2616}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | How many apartments do not have any facility?", "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "example": {"db_id": "apartment_rentals", "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Apartments", "WHERE", "apt_id", "NOT", "IN", "(", "SELECT", "apt_id", "FROM", "Apartment_Facilities", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "apartments", "where", "apt_id", "not", "in", "(", "select", "apt_id", "from", "apartment_facilities", ")"], "question": "How many apartments do not have any facility?", "question_toks": ["How", "many", "apartments", "do", "not", "have", "any", "facility", "?"], "dataset_name": "spider", "guid": 2617}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the id and name of the most expensive base price room.", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;", "example": {"db_id": "inn_1", "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;", "query_toks": ["SELECT", "RoomId", ",", "roomName", "FROM", "Rooms", "ORDER", "BY", "basePrice", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "roomid", ",", "roomname", "from", "rooms", "order", "by", "baseprice", "desc", "limit", "value"], "question": "Find the id and name of the most expensive base price room.", "question_toks": ["Find", "the", "id", "and", "name", "of", "the", "most", "expensive", "base", "price", "room", "."], "dataset_name": "spider", "guid": 2618}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many Bars in \" Dallas \" have a rating above 3.5 ?", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Dallas", "''", "AND", "t1.rating", ">", "3.5", "AND", "t2.category_name", "=", "``", "Bars", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t1", ".", "rating", ">", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "How many Bars in \" Dallas \" have a rating above 3.5 ?", "question_toks": ["How", "many", "Bars", "in", "``", "Dallas", "``", "have", "a", "rating", "above", "3.5", "?"], "dataset_name": "spider", "guid": 2619}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".", "sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"", "example": {"db_id": "apartment_rentals", "query": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"", "query_toks": ["SELECT", "DISTINCT", "T2.apt_number", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T1.booking_status_code", "=", "``", "Confirmed", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "apt_number", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t1", ".", "booking_status_code", "=", "value"], "question": "Show the distinct apartment numbers of the apartments that have bookings with status code \"Confirmed\".", "question_toks": ["Show", "the", "distinct", "apartment", "numbers", "of", "the", "apartments", "that", "have", "bookings", "with", "status", "code", "``", "Confirmed", "''", "."], "dataset_name": "spider", "guid": 2620}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List the addresses of all Walmart in \" Los Angeles \"", "sql": "SELECT full_address FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Walmart\";", "example": {"db_id": "yelp", "query": "SELECT full_address FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Walmart\";", "query_toks": ["SELECT", "full_address", "FROM", "business", "WHERE", "city", "=", "``", "Los", "Angeles", "''", "AND", "name", "=", "``", "Walmart", "''", ";"], "query_toks_no_value": ["select", "full_address", "from", "business", "where", "city", "=", "value", "and", "name", "=", "value"], "question": "List the addresses of all Walmart in \" Los Angeles \"", "question_toks": ["List", "the", "addresses", "of", "all", "Walmart", "in", "``", "Los", "Angeles", "``"], "dataset_name": "spider", "guid": 2621}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | find the total checkins in Italian Delis in each state on Sunday", "sql": "SELECT t1.state  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"Delis\" AND t4.day  =  \"Sunday\" GROUP BY t1.state;", "example": {"db_id": "yelp", "query": "SELECT t1.state  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"Delis\" AND t4.day  =  \"Sunday\" GROUP BY t1.state;", "query_toks": ["SELECT", "t1.state", ",", "SUM", "(", "t4.count", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "checkin", "AS", "t4", "ON", "t4.business_id", "=", "t1.business_id", "WHERE", "t2.category_name", "=", "``", "Italian", "''", "AND", "t3.category_name", "=", "``", "Delis", "''", "AND", "t4.day", "=", "``", "Sunday", "''", "GROUP", "BY", "t1.state", ";"], "query_toks_no_value": ["select", "t1", ".", "state", ",", "sum", "(", "t4", ".", "count", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "checkin", "as", "t4", "on", "t4", ".", "business_id", "=", "t1", ".", "business_id", "where", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value", "and", "t4", ".", "day", "=", "value", "group", "by", "t1", ".", "state"], "question": "find the total checkins in Italian Delis in each state on Sunday", "question_toks": ["find", "the", "total", "checkins", "in", "Italian", "Delis", "in", "each", "state", "on", "Sunday"], "dataset_name": "spider", "guid": 2622}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Find the total number of rooms in the apartments that have facility code \"Gym\".", "sql": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"", "example": {"db_id": "apartment_rentals", "query": "SELECT sum(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.facility_code  =  \"Gym\"", "query_toks": ["SELECT", "sum", "(", "T2.room_count", ")", "FROM", "Apartment_Facilities", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T1.facility_code", "=", "``", "Gym", "''"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "room_count", ")", "from", "apartment_facilities", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t1", ".", "facility_code", "=", "value"], "question": "Find the total number of rooms in the apartments that have facility code \"Gym\".", "question_toks": ["Find", "the", "total", "number", "of", "rooms", "in", "the", "apartments", "that", "have", "facility", "code", "``", "Gym", "''", "."], "dataset_name": "spider", "guid": 2623}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all Apple Store in \" Los Angeles \"", "sql": "SELECT business_id FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Apple Store\";", "example": {"db_id": "yelp", "query": "SELECT business_id FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Apple Store\";", "query_toks": ["SELECT", "business_id", "FROM", "business", "WHERE", "city", "=", "``", "Los", "Angeles", "''", "AND", "name", "=", "``", "Apple", "Store", "''", ";"], "query_toks_no_value": ["select", "business_id", "from", "business", "where", "city", "=", "value", "and", "name", "=", "value"], "question": "Find all Apple Store in \" Los Angeles \"", "question_toks": ["Find", "all", "Apple", "Store", "in", "``", "Los", "Angeles", "``"], "dataset_name": "spider", "guid": 2624}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Find the number of apartments that have no facility.", "sql": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "example": {"db_id": "apartment_rentals", "query": "SELECT count(*) FROM Apartments WHERE apt_id NOT IN (SELECT apt_id FROM Apartment_Facilities)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Apartments", "WHERE", "apt_id", "NOT", "IN", "(", "SELECT", "apt_id", "FROM", "Apartment_Facilities", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "apartments", "where", "apt_id", "not", "in", "(", "select", "apt_id", "from", "apartment_facilities", ")"], "question": "Find the number of apartments that have no facility.", "question_toks": ["Find", "the", "number", "of", "apartments", "that", "have", "no", "facility", "."], "dataset_name": "spider", "guid": 2625}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.", "sql": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';", "example": {"db_id": "restaurant_1", "query": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F';", "query_toks": ["SELECT", "Fname", ",", "Lname", "FROM", "Student", "WHERE", "Age", ">", "18", "AND", "Major", "!", "=", "600", "AND", "Sex", "=", "'F", "'", ";"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student", "where", "age", ">", "value", "and", "major", "!", "=", "value", "and", "sex", "=", "value"], "question": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.", "question_toks": ["List", "all", "female", "students", "age", "is", "older", "than", "18", "who", "is", "not", "majoring", "in", "600", ".", "List", "students", "'", "first", "name", "and", "last", "name", "."], "dataset_name": "spider", "guid": 2626}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What are the names of artists who did not have an exhibition in 2004?", "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004", "example": {"db_id": "theme_gallery", "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004", "query_toks": ["SELECT", "name", "FROM", "artist", "EXCEPT", "SELECT", "T2.name", "FROM", "exhibition", "AS", "T1", "JOIN", "artist", "AS", "T2", "ON", "T1.artist_id", "=", "T2.artist_id", "WHERE", "T1.year", "=", "2004"], "query_toks_no_value": ["select", "name", "from", "artist", "except", "select", "t2", ".", "name", "from", "exhibition", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "year", "=", "value"], "question": "What are the names of artists who did not have an exhibition in 2004?", "question_toks": ["What", "are", "the", "names", "of", "artists", "who", "did", "not", "have", "an", "exhibition", "in", "2004", "?"], "dataset_name": "spider", "guid": 2627}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | For each bed type, find the average base price of different bed type.", "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "example": {"db_id": "inn_1", "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "query_toks": ["SELECT", "bedType", ",", "avg", "(", "basePrice", ")", "FROM", "Rooms", "GROUP", "BY", "bedType", ";"], "query_toks_no_value": ["select", "bedtype", ",", "avg", "(", "baseprice", ")", "from", "rooms", "group", "by", "bedtype"], "question": "For each bed type, find the average base price of different bed type.", "question_toks": ["For", "each", "bed", "type", ",", "find", "the", "average", "base", "price", "of", "different", "bed", "type", "."], "dataset_name": "spider", "guid": 2628}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | What is the total ticket expense of the visitors whose membership level is 1?", "sql": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "example": {"db_id": "museum_visit", "query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1", "query_toks": ["SELECT", "sum", "(", "t2.Total_spent", ")", "FROM", "visitor", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.id", "=", "t2.visitor_id", "WHERE", "t1.Level_of_membership", "=", "1"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "total_spent", ")", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "visitor_id", "where", "t1", ".", "level_of_membership", "=", "value"], "question": "What is the total ticket expense of the visitors whose membership level is 1?", "question_toks": ["What", "is", "the", "total", "ticket", "expense", "of", "the", "visitors", "whose", "membership", "level", "is", "1", "?"], "dataset_name": "spider", "guid": 2629}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show each gender code and the corresponding count of guests sorted by the count in descending order.", "sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "example": {"db_id": "apartment_rentals", "query": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "gender_code", ",", "COUNT", "(", "*", ")", "FROM", "Guests", "GROUP", "BY", "gender_code", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "gender_code", ",", "count", "(", "*", ")", "from", "guests", "group", "by", "gender_code", "order", "by", "count", "(", "*", ")", "desc"], "question": "Show each gender code and the corresponding count of guests sorted by the count in descending order.", "question_toks": ["Show", "each", "gender", "code", "and", "the", "corresponding", "count", "of", "guests", "sorted", "by", "the", "count", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 2630}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | Where is the best french restaurant in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "Where is the best french restaurant in san francisco ?", "question_toks": ["Where", "is", "the", "best", "french", "restaurant", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2631}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are the building full names that contain the word \"court\"?", "sql": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"", "example": {"db_id": "apartment_rentals", "query": "SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE \"%court%\"", "query_toks": ["SELECT", "building_full_name", "FROM", "Apartment_Buildings", "WHERE", "building_full_name", "LIKE", "``", "%", "court", "%", "''"], "query_toks_no_value": ["select", "building_full_name", "from", "apartment_buildings", "where", "building_full_name", "like", "value"], "question": "What are the building full names that contain the word \"court\"?", "question_toks": ["What", "are", "the", "building", "full", "names", "that", "contain", "the", "word", "``", "court", "''", "?"], "dataset_name": "spider", "guid": 2632}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show each apartment type code, and the maximum and minimum number of rooms for each type.", "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "query_toks": ["SELECT", "apt_type_code", ",", "max", "(", "room_count", ")", ",", "min", "(", "room_count", ")", "FROM", "Apartments", "GROUP", "BY", "apt_type_code"], "query_toks_no_value": ["select", "apt_type_code", ",", "max", "(", "room_count", ")", ",", "min", "(", "room_count", ")", "from", "apartments", "group", "by", "apt_type_code"], "question": "Show each apartment type code, and the maximum and minimum number of rooms for each type.", "question_toks": ["Show", "each", "apartment", "type", "code", ",", "and", "the", "maximum", "and", "minimum", "number", "of", "rooms", "for", "each", "type", "."], "dataset_name": "spider", "guid": 2633}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the facility codes of apartments with more than 4 bedrooms.", "sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4", "query_toks": ["SELECT", "T1.facility_code", "FROM", "Apartment_Facilities", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T2.bedroom_count", ">", "4"], "query_toks_no_value": ["select", "t1", ".", "facility_code", "from", "apartment_facilities", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t2", ".", "bedroom_count", ">", "value"], "question": "Show the facility codes of apartments with more than 4 bedrooms.", "question_toks": ["Show", "the", "facility", "codes", "of", "apartments", "with", "more", "than", "4", "bedrooms", "."], "dataset_name": "spider", "guid": 2634}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | What is the membership card held by both members living in Hartford and ones living in Waterbury address?", "sql": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'", "example": {"db_id": "coffee_shop", "query": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'", "query_toks": ["SELECT", "membership_card", "FROM", "member", "WHERE", "address", "=", "'Hartford", "'", "INTERSECT", "SELECT", "membership_card", "FROM", "member", "WHERE", "address", "=", "'Waterbury", "'"], "query_toks_no_value": ["select", "membership_card", "from", "member", "where", "address", "=", "value", "intersect", "select", "membership_card", "from", "member", "where", "address", "=", "value"], "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?", "question_toks": ["What", "is", "the", "membership", "card", "held", "by", "both", "members", "living", "in", "Hartford", "and", "ones", "living", "in", "Waterbury", "address", "?"], "dataset_name": "spider", "guid": 2635}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | Find the id and name of the museum that has the most staff members?", "sql": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "example": {"db_id": "museum_visit", "query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1", "query_toks": ["SELECT", "museum_id", ",", "name", "FROM", "museum", "ORDER", "BY", "num_of_staff", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "museum_id", ",", "name", "from", "museum", "order", "by", "num_of_staff", "desc", "limit", "value"], "question": "Find the id and name of the museum that has the most staff members?", "question_toks": ["Find", "the", "id", "and", "name", "of", "the", "museum", "that", "has", "the", "most", "staff", "members", "?"], "dataset_name": "spider", "guid": 2636}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some good restaurants on bethel island rd in bethel island ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "bethel", "island", "''", "AND", "t2.street_name", "=", "``", "bethel", "island", "rd", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some good restaurants on bethel island rd in bethel island ?", "question_toks": ["give", "me", "some", "good", "restaurants", "on", "bethel", "island", "rd", "in", "bethel", "island", "?"], "dataset_name": "spider", "guid": 2637}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many businesses has Michelle reviewed in 2010 ?", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  \"Michelle\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  \"Michelle\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "review", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t3", "ON", "t3.user_id", "=", "t2.user_id", "WHERE", "t2.year", "=", "2010", "AND", "t3.name", "=", "``", "Michelle", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "review", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t3", "on", "t3", ".", "user_id", "=", "t2", ".", "user_id", "where", "t2", ".", "year", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "How many businesses has Michelle reviewed in 2010 ?", "question_toks": ["How", "many", "businesses", "has", "Michelle", "reviewed", "in", "2010", "?"], "dataset_name": "spider", "guid": 2638}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many businesses in \" San Diego \" has Christine reviewed in 2010 ?", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"San Diego\" AND t2.year  =  2010 AND t3.name  =  \"Christine\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"San Diego\" AND t2.year  =  2010 AND t3.name  =  \"Christine\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "review", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t3", "ON", "t3.user_id", "=", "t2.user_id", "WHERE", "t1.city", "=", "``", "San", "Diego", "''", "AND", "t2.year", "=", "2010", "AND", "t3.name", "=", "``", "Christine", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "review", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t3", "on", "t3", ".", "user_id", "=", "t2", ".", "user_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "year", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "How many businesses in \" San Diego \" has Christine reviewed in 2010 ?", "question_toks": ["How", "many", "businesses", "in", "``", "San", "Diego", "``", "has", "Christine", "reviewed", "in", "2010", "?"], "dataset_name": "spider", "guid": 2639}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | What is the total likes on tips from Niloofar about \" Cafe Zinho \"", "sql": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Cafe Zinho\" AND t3.name  =  \"Niloofar\";", "example": {"db_id": "yelp", "query": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Cafe Zinho\" AND t3.name  =  \"Niloofar\";", "query_toks": ["SELECT", "SUM", "(", "t2.likes", ")", "FROM", "tip", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t3", "ON", "t3.user_id", "=", "t2.user_id", "WHERE", "t1.name", "=", "``", "Cafe", "Zinho", "''", "AND", "t3.name", "=", "``", "Niloofar", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "likes", ")", "from", "tip", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t3", "on", "t3", ".", "user_id", "=", "t2", ".", "user_id", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "What is the total likes on tips from Niloofar about \" Cafe Zinho \"", "question_toks": ["What", "is", "the", "total", "likes", "on", "tips", "from", "Niloofar", "about", "``", "Cafe", "Zinho", "``"], "dataset_name": "spider", "guid": 2640}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | Give me the best restaurant in san francisco for french food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "Give me the best restaurant in san francisco for french food ?", "question_toks": ["Give", "me", "the", "best", "restaurant", "in", "san", "francisco", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2641}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the visit date and details of the visitor whose detail is 'Vincent'?", "sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"", "query_toks": ["SELECT", "T2.Visit_Date", ",", "T2.Visit_Details", "FROM", "VISITORS", "AS", "T1", "JOIN", "VISITS", "AS", "T2", "ON", "T1.Tourist_ID", "=", "T2.Tourist_ID", "WHERE", "T1.Tourist_Details", "=", "``", "Vincent", "''"], "query_toks_no_value": ["select", "t2", ".", "visit_date", ",", "t2", ".", "visit_details", "from", "visitors", "as", "t1", "join", "visits", "as", "t2", "on", "t1", ".", "tourist_id", "=", "t2", ".", "tourist_id", "where", "t1", ".", "tourist_details", "=", "value"], "question": "What are the visit date and details of the visitor whose detail is 'Vincent'?", "question_toks": ["What", "are", "the", "visit", "date", "and", "details", "of", "the", "visitor", "whose", "detail", "is", "'Vincent", "'", "?"], "dataset_name": "spider", "guid": 2642}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What kind of decor has the least number of reservations?", "sql": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;", "example": {"db_id": "inn_1", "query": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1;", "query_toks": ["SELECT", "T2.decor", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "GROUP", "BY", "T2.decor", "ORDER", "BY", "count", "(", "T2.decor", ")", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "decor", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "group", "by", "t2", ".", "decor", "order", "by", "count", "(", "t2", ".", "decor", ")", "asc", "limit", "value"], "question": "What kind of decor has the least number of reservations?", "question_toks": ["What", "kind", "of", "decor", "has", "the", "least", "number", "of", "reservations", "?"], "dataset_name": "spider", "guid": 2643}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are dates of birth of all the guests whose gender is \"Male\"?", "sql": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"", "example": {"db_id": "apartment_rentals", "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"", "query_toks": ["SELECT", "date_of_birth", "FROM", "Guests", "WHERE", "gender_code", "=", "``", "Male", "''"], "query_toks_no_value": ["select", "date_of_birth", "from", "guests", "where", "gender_code", "=", "value"], "question": "What are dates of birth of all the guests whose gender is \"Male\"?", "question_toks": ["What", "are", "dates", "of", "birth", "of", "all", "the", "guests", "whose", "gender", "is", "``", "Male", "''", "?"], "dataset_name": "spider", "guid": 2644}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good place in the yosemite and mono lake area for french food ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "yosemite", "and", "mono", "lake", "area", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good place in the yosemite and mono lake area for french food ?", "question_toks": ["give", "me", "a", "good", "place", "in", "the", "yosemite", "and", "mono", "lake", "area", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2645}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | Find the id and address of the shops whose score is below the average score.", "sql": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)", "example": {"db_id": "coffee_shop", "query": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)", "query_toks": ["SELECT", "shop_id", ",", "address", "FROM", "shop", "WHERE", "score", "<", "(", "SELECT", "avg", "(", "score", ")", "FROM", "shop", ")"], "query_toks_no_value": ["select", "shop_id", ",", "address", "from", "shop", "where", "score", "<", "(", "select", "avg", "(", "score", ")", "from", "shop", ")"], "question": "Find the id and address of the shops whose score is below the average score.", "question_toks": ["Find", "the", "id", "and", "address", "of", "the", "shops", "whose", "score", "is", "below", "the", "average", "score", "."], "dataset_name": "spider", "guid": 2646}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Which room has the highest base price?", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;", "example": {"db_id": "inn_1", "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1;", "query_toks": ["SELECT", "RoomId", ",", "roomName", "FROM", "Rooms", "ORDER", "BY", "basePrice", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "roomid", ",", "roomname", "from", "rooms", "order", "by", "baseprice", "desc", "limit", "value"], "question": "Which room has the highest base price?", "question_toks": ["Which", "room", "has", "the", "highest", "base", "price", "?"], "dataset_name": "spider", "guid": 2647}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.", "sql": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;", "example": {"db_id": "inn_1", "query": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "WHERE", "T2.maxOccupancy", "=", "T1.Adults", "+", "T1.Kids", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "where", "t2", ".", "maxoccupancy", "=", "t1", ".", "adults", "+", "t1", ".", "kids"], "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.", "question_toks": ["List", "how", "many", "times", "the", "number", "of", "people", "in", "the", "room", "reached", "the", "maximum", "occupancy", "of", "the", "room", ".", "The", "number", "of", "people", "include", "adults", "and", "kids", "."], "dataset_name": "spider", "guid": 2648}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all the tips from a user who has written a review in 2012", "sql": "SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id  =  t1.user_id JOIN tip AS t2 ON t3.user_id  =  t2.user_id WHERE t1.year  =  2012;", "example": {"db_id": "yelp", "query": "SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id  =  t1.user_id JOIN tip AS t2 ON t3.user_id  =  t2.user_id WHERE t1.year  =  2012;", "query_toks": ["SELECT", "t2.text", "FROM", "USER", "AS", "t3", "JOIN", "review", "AS", "t1", "ON", "t3.user_id", "=", "t1.user_id", "JOIN", "tip", "AS", "t2", "ON", "t3.user_id", "=", "t2.user_id", "WHERE", "t1.year", "=", "2012", ";"], "query_toks_no_value": ["select", "t2", ".", "text", "from", "user", "as", "t3", "join", "review", "as", "t1", "on", "t3", ".", "user_id", "=", "t1", ".", "user_id", "join", "tip", "as", "t2", "on", "t3", ".", "user_id", "=", "t2", ".", "user_id", "where", "t1", ".", "year", "=", "value"], "question": "Find all the tips from a user who has written a review in 2012", "question_toks": ["Find", "all", "the", "tips", "from", "a", "user", "who", "has", "written", "a", "review", "in", "2012"], "dataset_name": "spider", "guid": 2649}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | For each bed type, find the average room price.", "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "example": {"db_id": "inn_1", "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "query_toks": ["SELECT", "bedType", ",", "avg", "(", "basePrice", ")", "FROM", "Rooms", "GROUP", "BY", "bedType", ";"], "query_toks_no_value": ["select", "bedtype", ",", "avg", "(", "baseprice", ")", "from", "rooms", "group", "by", "bedtype"], "question": "For each bed type, find the average room price.", "question_toks": ["For", "each", "bed", "type", ",", "find", "the", "average", "room", "price", "."], "dataset_name": "spider", "guid": 2650}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Which room has the largest number of reservations?", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "inn_1", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "T2.roomName", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "GROUP", "BY", "T1.Room", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "roomname", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "group", "by", "t1", ".", "room", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which room has the largest number of reservations?", "question_toks": ["Which", "room", "has", "the", "largest", "number", "of", "reservations", "?"], "dataset_name": "spider", "guid": 2651}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Which transportation method is used the most often to get to tourist attractions?", "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "cre_Theme_park", "query": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "How_to_Get_There", "FROM", "Tourist_Attractions", "GROUP", "BY", "How_to_Get_There", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "how_to_get_there", "from", "tourist_attractions", "group", "by", "how_to_get_there", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which transportation method is used the most often to get to tourist attractions?", "question_toks": ["Which", "transportation", "method", "is", "used", "the", "most", "often", "to", "get", "to", "tourist", "attractions", "?"], "dataset_name": "spider", "guid": 2652}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Return each apartment type code along with the maximum and minimum number of rooms among each type.", "sql": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code ,  max(room_count) ,  min(room_count) FROM Apartments GROUP BY apt_type_code", "query_toks": ["SELECT", "apt_type_code", ",", "max", "(", "room_count", ")", ",", "min", "(", "room_count", ")", "FROM", "Apartments", "GROUP", "BY", "apt_type_code"], "query_toks_no_value": ["select", "apt_type_code", ",", "max", "(", "room_count", ")", ",", "min", "(", "room_count", ")", "from", "apartments", "group", "by", "apt_type_code"], "question": "Return each apartment type code along with the maximum and minimum number of rooms among each type.", "question_toks": ["Return", "each", "apartment", "type", "code", "along", "with", "the", "maximum", "and", "minimum", "number", "of", "rooms", "among", "each", "type", "."], "dataset_name": "spider", "guid": 2653}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | What are the opening year and staff number of the museum named Plaza Museum?", "sql": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "example": {"db_id": "museum_visit", "query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'", "query_toks": ["SELECT", "Num_of_Staff", ",", "Open_Year", "FROM", "museum", "WHERE", "name", "=", "'Plaza", "Museum", "'"], "query_toks_no_value": ["select", "num_of_staff", ",", "open_year", "from", "museum", "where", "name", "=", "value"], "question": "What are the opening year and staff number of the museum named Plaza Museum?", "question_toks": ["What", "are", "the", "opening", "year", "and", "staff", "number", "of", "the", "museum", "named", "Plaza", "Museum", "?"], "dataset_name": "spider", "guid": 2654}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.", "sql": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "example": {"db_id": "inn_1", "query": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "query_toks": ["SELECT", "kids", "FROM", "Reservations", "WHERE", "FirstName", "=", "``", "ROY", "''", "AND", "LastName", "=", "``", "SWEAZY", "''", ";"], "query_toks_no_value": ["select", "kids", "from", "reservations", "where", "firstname", "=", "value", "and", "lastname", "=", "value"], "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.", "question_toks": ["Find", "the", "number", "of", "kids", "staying", "in", "the", "rooms", "reserved", "by", "a", "person", "called", "ROY", "SWEAZ", "."], "dataset_name": "spider", "guid": 2655}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many rooms have not had any reservation yet?", "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "example": {"db_id": "inn_1", "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "rooms", "WHERE", "roomid", "NOT", "IN", "(", "SELECT", "DISTINCT", "room", "FROM", "reservations", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "rooms", "where", "roomid", "not", "in", "(", "select", "distinct", "room", "from", "reservations", ")"], "question": "How many rooms have not had any reservation yet?", "question_toks": ["How", "many", "rooms", "have", "not", "had", "any", "reservation", "yet", "?"], "dataset_name": "spider", "guid": 2656}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many kids stay in the rooms reserved by ROY SWEAZY?", "sql": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "example": {"db_id": "inn_1", "query": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "query_toks": ["SELECT", "kids", "FROM", "Reservations", "WHERE", "FirstName", "=", "``", "ROY", "''", "AND", "LastName", "=", "``", "SWEAZY", "''", ";"], "query_toks_no_value": ["select", "kids", "from", "reservations", "where", "firstname", "=", "value", "and", "lastname", "=", "value"], "question": "How many kids stay in the rooms reserved by ROY SWEAZY?", "question_toks": ["How", "many", "kids", "stay", "in", "the", "rooms", "reserved", "by", "ROY", "SWEAZY", "?"], "dataset_name": "spider", "guid": 2657}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is the best restaurant in the bay area for american food ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", ")", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "where is the best restaurant in the bay area for american food ?", "question_toks": ["where", "is", "the", "best", "restaurant", "in", "the", "bay", "area", "for", "american", "food", "?"], "dataset_name": "spider", "guid": 2658}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what is the best french restaurant in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "what is the best french restaurant in san francisco ?", "question_toks": ["what", "is", "the", "best", "french", "restaurant", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2659}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?", "sql": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"", "example": {"db_id": "apartment_rentals", "query": "SELECT sum(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_short_name  =  \"Columbus Square\"", "query_toks": ["SELECT", "sum", "(", "T2.room_count", ")", "FROM", "Apartment_Buildings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.building_id", "=", "T2.building_id", "WHERE", "T1.building_short_name", "=", "``", "Columbus", "Square", "''"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "room_count", ")", "from", "apartment_buildings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "building_id", "where", "t1", ".", "building_short_name", "=", "value"], "question": "How many rooms in total are there in the apartments in the building with short name \"Columbus Square\"?", "question_toks": ["How", "many", "rooms", "in", "total", "are", "there", "in", "the", "apartments", "in", "the", "building", "with", "short", "name", "``", "Columbus", "Square", "''", "?"], "dataset_name": "spider", "guid": 2660}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is jamerican cuisine in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.name", "=", "``", "jamerican", "cuisine", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "where is jamerican cuisine in san francisco ?", "question_toks": ["where", "is", "jamerican", "cuisine", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2661}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.", "sql": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)", "example": {"db_id": "theme_gallery", "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)", "query_toks": ["SELECT", "T1.theme", ",", "T2.name", "FROM", "exhibition", "AS", "T1", "JOIN", "artist", "AS", "T2", "ON", "T1.artist_id", "=", "T2.artist_id", "WHERE", "T1.ticket_price", ">", "(", "SELECT", "avg", "(", "ticket_price", ")", "FROM", "exhibition", ")"], "query_toks_no_value": ["select", "t1", ".", "theme", ",", "t2", ".", "name", "from", "exhibition", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "ticket_price", ">", "(", "select", "avg", "(", "ticket_price", ")", "from", "exhibition", ")"], "question": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.", "question_toks": ["Return", "the", "names", "of", "artists", "and", "the", "themes", "of", "their", "exhibitions", "that", "had", "a", "ticket", "price", "higher", "than", "average", "."], "dataset_name": "spider", "guid": 2662}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | Which month has the most happy hours?", "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "coffee_shop", "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "MONTH", "FROM", "happy_hour", "GROUP", "BY", "MONTH", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "month", "from", "happy_hour", "group", "by", "month", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which month has the most happy hours?", "question_toks": ["Which", "month", "has", "the", "most", "happy", "hours", "?"], "dataset_name": "spider", "guid": 2663}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the details and ways to get to tourist attractions related to royal family?", "sql": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID", "query_toks": ["SELECT", "T1.Royal_Family_Details", ",", "T2.How_to_Get_There", "FROM", "ROYAL_FAMILY", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Royal_Family_ID", "=", "T2.Tourist_Attraction_ID"], "query_toks_no_value": ["select", "t1", ".", "royal_family_details", ",", "t2", ".", "how_to_get_there", "from", "royal_family", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "royal_family_id", "=", "t2", ".", "tourist_attraction_id"], "question": "What are the details and ways to get to tourist attractions related to royal family?", "question_toks": ["What", "are", "the", "details", "and", "ways", "to", "get", "to", "tourist", "attractions", "related", "to", "royal", "family", "?"], "dataset_name": "spider", "guid": 2664}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find the visit date and details of the tourist whose detail is 'Vincent'", "sql": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"", "query_toks": ["SELECT", "T2.Visit_Date", ",", "T2.Visit_Details", "FROM", "VISITORS", "AS", "T1", "JOIN", "VISITS", "AS", "T2", "ON", "T1.Tourist_ID", "=", "T2.Tourist_ID", "WHERE", "T1.Tourist_Details", "=", "``", "Vincent", "''"], "query_toks_no_value": ["select", "t2", ".", "visit_date", ",", "t2", ".", "visit_details", "from", "visitors", "as", "t1", "join", "visits", "as", "t2", "on", "t1", ".", "tourist_id", "=", "t2", ".", "tourist_id", "where", "t1", ".", "tourist_details", "=", "value"], "question": "Find the visit date and details of the tourist whose detail is 'Vincent'", "question_toks": ["Find", "the", "visit", "date", "and", "details", "of", "the", "tourist", "whose", "detail", "is", "'Vincent", "'"], "dataset_name": "spider", "guid": 2665}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | how many french restaurant are there in palo alto ?", "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";", "example": {"db_id": "restaurants", "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "palo", "alto", "''", "AND", "t1.food_type", "=", "``", "french", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value"], "question": "how many french restaurant are there in palo alto ?", "question_toks": ["how", "many", "french", "restaurant", "are", "there", "in", "palo", "alto", "?"], "dataset_name": "spider", "guid": 2666}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all restaurant reviewed by Patrick in \" Dallas \"", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t4", "ON", "t4.user_id", "=", "t3.user_id", "WHERE", "t1.city", "=", "``", "Dallas", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", "AND", "t4.name", "=", "``", "Patrick", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t4", "on", "t4", ".", "user_id", "=", "t3", ".", "user_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t4", ".", "name", "=", "value"], "question": "Find all restaurant reviewed by Patrick in \" Dallas \"", "question_toks": ["Find", "all", "restaurant", "reviewed", "by", "Patrick", "in", "``", "Dallas", "``"], "dataset_name": "spider", "guid": 2667}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Give me a list of all the distinct building descriptions.", "sql": "SELECT DISTINCT building_description FROM Apartment_Buildings", "example": {"db_id": "apartment_rentals", "query": "SELECT DISTINCT building_description FROM Apartment_Buildings", "query_toks": ["SELECT", "DISTINCT", "building_description", "FROM", "Apartment_Buildings"], "query_toks_no_value": ["select", "distinct", "building_description", "from", "apartment_buildings"], "question": "Give me a list of all the distinct building descriptions.", "question_toks": ["Give", "me", "a", "list", "of", "all", "the", "distinct", "building", "descriptions", "."], "dataset_name": "spider", "guid": 2668}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all restaurant with Valet Service in Dallas Texas", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Dallas", "''", "AND", "t1.state", "=", "``", "Texas", "''", "AND", "t2.category_name", "=", "``", "Valet", "Service", "''", "AND", "t3.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t1", ".", "state", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value"], "question": "Find all restaurant with Valet Service in Dallas Texas", "question_toks": ["Find", "all", "restaurant", "with", "Valet", "Service", "in", "Dallas", "Texas"], "dataset_name": "spider", "guid": 2669}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | Find the address and staff number of the shops that do not have any happy hour.", "sql": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)", "example": {"db_id": "coffee_shop", "query": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)", "query_toks": ["SELECT", "address", ",", "num_of_staff", "FROM", "shop", "WHERE", "shop_id", "NOT", "IN", "(", "SELECT", "shop_id", "FROM", "happy_hour", ")"], "query_toks_no_value": ["select", "address", ",", "num_of_staff", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "happy_hour", ")"], "question": "Find the address and staff number of the shops that do not have any happy hour.", "question_toks": ["Find", "the", "address", "and", "staff", "number", "of", "the", "shops", "that", "do", "not", "have", "any", "happy", "hour", "."], "dataset_name": "spider", "guid": 2670}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | Which major has least number of students? List the major and the number of students.", "sql": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;", "example": {"db_id": "restaurant_1", "query": "SELECT Major ,  count(*) FROM Student GROUP BY Major ORDER BY count(Major) ASC LIMIT 1;", "query_toks": ["SELECT", "Major", ",", "count", "(", "*", ")", "FROM", "Student", "GROUP", "BY", "Major", "ORDER", "BY", "count", "(", "Major", ")", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "major", ",", "count", "(", "*", ")", "from", "student", "group", "by", "major", "order", "by", "count", "(", "major", ")", "asc", "limit", "value"], "question": "Which major has least number of students? List the major and the number of students.", "question_toks": ["Which", "major", "has", "least", "number", "of", "students", "?", "List", "the", "major", "and", "the", "number", "of", "students", "."], "dataset_name": "spider", "guid": 2671}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What are the names of modern rooms that have a base price lower than $160 and two beds.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';", "example": {"db_id": "inn_1", "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';", "query_toks": ["SELECT", "roomName", "FROM", "Rooms", "WHERE", "basePrice", "<", "160", "AND", "beds", "=", "2", "AND", "decor", "=", "'modern", "'", ";"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "where", "baseprice", "<", "value", "and", "beds", "=", "value", "and", "decor", "=", "value"], "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.", "question_toks": ["What", "are", "the", "names", "of", "modern", "rooms", "that", "have", "a", "base", "price", "lower", "than", "$", "160", "and", "two", "beds", "."], "dataset_name": "spider", "guid": 2672}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What is the average room count of the apartments whose booking status code is \"Provisional\"?", "sql": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"", "example": {"db_id": "apartment_rentals", "query": "SELECT avg(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"", "query_toks": ["SELECT", "avg", "(", "room_count", ")", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T1.booking_status_code", "=", "``", "Provisional", "''"], "query_toks_no_value": ["select", "avg", "(", "room_count", ")", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t1", ".", "booking_status_code", "=", "value"], "question": "What is the average room count of the apartments whose booking status code is \"Provisional\"?", "question_toks": ["What", "is", "the", "average", "room", "count", "of", "the", "apartments", "whose", "booking", "status", "code", "is", "``", "Provisional", "''", "?"], "dataset_name": "spider", "guid": 2673}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many neighbourhoods have a business with rating 5 in Madison ?", "sql": "SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  =  5;", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  =  5;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.neighbourhood_name", ")", "FROM", "neighbourhood", "AS", "t1", "JOIN", "business", "AS", "t2", "ON", "t1.business_id", "=", "t2.business_id", "WHERE", "t2.city", "=", "``", "Madison", "''", "AND", "t2.rating", "=", "5", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "neighbourhood_name", ")", "from", "neighbourhood", "as", "t1", "join", "business", "as", "t2", "on", "t1", ".", "business_id", "=", "t2", ".", "business_id", "where", "t2", ".", "city", "=", "value", "and", "t2", ".", "rating", "=", "value"], "question": "How many neighbourhoods have a business with rating 5 in Madison ?", "question_toks": ["How", "many", "neighbourhoods", "have", "a", "business", "with", "rating", "5", "in", "Madison", "?"], "dataset_name": "spider", "guid": 2674}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all the reviews which rated a business less than 1", "sql": "SELECT text FROM review WHERE rating  <  1;", "example": {"db_id": "yelp", "query": "SELECT text FROM review WHERE rating  <  1;", "query_toks": ["SELECT", "text", "FROM", "review", "WHERE", "rating", "<", "1", ";"], "query_toks_no_value": ["select", "text", "from", "review", "where", "rating", "<", "value"], "question": "List all the reviews which rated a business less than 1", "question_toks": ["List", "all", "the", "reviews", "which", "rated", "a", "business", "less", "than", "1"], "dataset_name": "spider", "guid": 2675}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the apartment numbers, start dates, and end dates of all the apartment bookings.", "sql": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id", "example": {"db_id": "apartment_rentals", "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id", "query_toks": ["SELECT", "T2.apt_number", ",", "T1.booking_start_date", ",", "T1.booking_start_date", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id"], "query_toks_no_value": ["select", "t2", ".", "apt_number", ",", "t1", ".", "booking_start_date", ",", "t1", ".", "booking_start_date", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id"], "question": "Show the apartment numbers, start dates, and end dates of all the apartment bookings.", "question_toks": ["Show", "the", "apartment", "numbers", ",", "start", "dates", ",", "and", "end", "dates", "of", "all", "the", "apartment", "bookings", "."], "dataset_name": "spider", "guid": 2676}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What is the average number of rooms of apartments with type code \"Studio\"?", "sql": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"", "example": {"db_id": "apartment_rentals", "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"", "query_toks": ["SELECT", "avg", "(", "room_count", ")", "FROM", "Apartments", "WHERE", "apt_type_code", "=", "``", "Studio", "''"], "query_toks_no_value": ["select", "avg", "(", "room_count", ")", "from", "apartments", "where", "apt_type_code", "=", "value"], "question": "What is the average number of rooms of apartments with type code \"Studio\"?", "question_toks": ["What", "is", "the", "average", "number", "of", "rooms", "of", "apartments", "with", "type", "code", "``", "Studio", "''", "?"], "dataset_name": "spider", "guid": 2677}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many different types of beds are there?", "sql": "SELECT count(DISTINCT bedType) FROM Rooms;", "example": {"db_id": "inn_1", "query": "SELECT count(DISTINCT bedType) FROM Rooms;", "query_toks": ["SELECT", "count", "(", "DISTINCT", "bedType", ")", "FROM", "Rooms", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "bedtype", ")", "from", "rooms"], "question": "How many different types of beds are there?", "question_toks": ["How", "many", "different", "types", "of", "beds", "are", "there", "?"], "dataset_name": "spider", "guid": 2678}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many restaurant are there in the Hazelwood district of Dallas ?", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t3.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Hazelwood\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t3.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Hazelwood\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t3", "JOIN", "business", "AS", "t1", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "neighbourhood", "AS", "t2", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Dallas", "''", "AND", "t3.category_name", "=", "``", "restaurant", "''", "AND", "t2.neighbourhood_name", "=", "``", "Hazelwood", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t3", "join", "business", "as", "t1", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "neighbourhood", "as", "t2", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t3", ".", "category_name", "=", "value", "and", "t2", ".", "neighbourhood_name", "=", "value"], "question": "How many restaurant are there in the Hazelwood district of Dallas ?", "question_toks": ["How", "many", "restaurant", "are", "there", "in", "the", "Hazelwood", "district", "of", "Dallas", "?"], "dataset_name": "spider", "guid": 2679}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where are some restaurants good for arabic food on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where are some restaurants good for arabic food on buchanan in san francisco ?", "question_toks": ["where", "are", "some", "restaurants", "good", "for", "arabic", "food", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2680}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | What is the name of the museum that had no visitor yet?", "sql": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "example": {"db_id": "museum_visit", "query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)", "query_toks": ["SELECT", "name", "FROM", "museum", "WHERE", "Museum_ID", "NOT", "IN", "(", "SELECT", "museum_id", "FROM", "visit", ")"], "query_toks_no_value": ["select", "name", "from", "museum", "where", "museum_id", "not", "in", "(", "select", "museum_id", "from", "visit", ")"], "question": "What is the name of the museum that had no visitor yet?", "question_toks": ["What", "is", "the", "name", "of", "the", "museum", "that", "had", "no", "visitor", "yet", "?"], "dataset_name": "spider", "guid": 2681}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the top 3 apartment type codes sorted by the average number of rooms in descending order.", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY avg(room_count) DESC LIMIT 3", "query_toks": ["SELECT", "apt_type_code", "FROM", "Apartments", "GROUP", "BY", "apt_type_code", "ORDER", "BY", "avg", "(", "room_count", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "apt_type_code", "from", "apartments", "group", "by", "apt_type_code", "order", "by", "avg", "(", "room_count", ")", "desc", "limit", "value"], "question": "Show the top 3 apartment type codes sorted by the average number of rooms in descending order.", "question_toks": ["Show", "the", "top", "3", "apartment", "type", "codes", "sorted", "by", "the", "average", "number", "of", "rooms", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 2682}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the names of all modern rooms with a base price below $160 and two beds.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';", "example": {"db_id": "inn_1", "query": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern';", "query_toks": ["SELECT", "roomName", "FROM", "Rooms", "WHERE", "basePrice", "<", "160", "AND", "beds", "=", "2", "AND", "decor", "=", "'modern", "'", ";"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "where", "baseprice", "<", "value", "and", "beds", "=", "value", "and", "decor", "=", "value"], "question": "Find the names of all modern rooms with a base price below $160 and two beds.", "question_toks": ["Find", "the", "names", "of", "all", "modern", "rooms", "with", "a", "base", "price", "below", "$", "160", "and", "two", "beds", "."], "dataset_name": "spider", "guid": 2683}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | Please show the most common status of roller coasters.", "sql": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "roller_coaster", "query": "SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Status", "FROM", "roller_coaster", "GROUP", "BY", "Status", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "status", "from", "roller_coaster", "group", "by", "status", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the most common status of roller coasters.", "question_toks": ["Please", "show", "the", "most", "common", "status", "of", "roller", "coasters", "."], "dataset_name": "spider", "guid": 2684}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | Which membership card has more than 5 members?", "sql": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5", "example": {"db_id": "coffee_shop", "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5", "query_toks": ["SELECT", "Membership_card", "FROM", "member", "GROUP", "BY", "Membership_card", "HAVING", "count", "(", "*", ")", ">", "5"], "query_toks_no_value": ["select", "membership_card", "from", "member", "group", "by", "membership_card", "having", "count", "(", "*", ")", ">", "value"], "question": "Which membership card has more than 5 members?", "question_toks": ["Which", "membership", "card", "has", "more", "than", "5", "members", "?"], "dataset_name": "spider", "guid": 2685}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a good arabic in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a good arabic in mountain view ?", "question_toks": ["where", "is", "a", "good", "arabic", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2686}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the guest first names, start dates, and end dates of all the apartment bookings.", "sql": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id", "example": {"db_id": "apartment_rentals", "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id", "query_toks": ["SELECT", "T2.guest_first_name", ",", "T1.booking_start_date", ",", "T1.booking_start_date", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Guests", "AS", "T2", "ON", "T1.guest_id", "=", "T2.guest_id"], "query_toks_no_value": ["select", "t2", ".", "guest_first_name", ",", "t1", ".", "booking_start_date", ",", "t1", ".", "booking_start_date", "from", "apartment_bookings", "as", "t1", "join", "guests", "as", "t2", "on", "t1", ".", "guest_id", "=", "t2", ".", "guest_id"], "question": "Show the guest first names, start dates, and end dates of all the apartment bookings.", "question_toks": ["Show", "the", "guest", "first", "names", ",", "start", "dates", ",", "and", "end", "dates", "of", "all", "the", "apartment", "bookings", "."], "dataset_name": "spider", "guid": 2687}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | What are the id and address of the shops which have a happy hour in May?", "sql": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'", "example": {"db_id": "coffee_shop", "query": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'", "query_toks": ["SELECT", "t1.address", ",", "t1.shop_id", "FROM", "shop", "AS", "t1", "JOIN", "happy_hour", "AS", "t2", "ON", "t1.shop_id", "=", "t2.shop_id", "WHERE", "MONTH", "=", "'May", "'"], "query_toks_no_value": ["select", "t1", ".", "address", ",", "t1", ".", "shop_id", "from", "shop", "as", "t1", "join", "happy_hour", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "where", "month", "=", "value"], "question": "What are the id and address of the shops which have a happy hour in May?", "question_toks": ["What", "are", "the", "id", "and", "address", "of", "the", "shops", "which", "have", "a", "happy", "hour", "in", "May", "?"], "dataset_name": "spider", "guid": 2688}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | What are the country names, area and population which has both roller coasters with speed higher", "sql": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55", "example": {"db_id": "roller_coaster", "query": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55", "query_toks": ["SELECT", "T1.name", ",", "T1.area", ",", "T1.population", "FROM", "country", "AS", "T1", "JOIN", "roller_coaster", "AS", "T2", "ON", "T1.Country_ID", "=", "T2.Country_ID", "WHERE", "T2.speed", ">", "60", "INTERSECT", "SELECT", "T1.name", ",", "T1.area", ",", "T1.population", "FROM", "country", "AS", "T1", "JOIN", "roller_coaster", "AS", "T2", "ON", "T1.Country_ID", "=", "T2.Country_ID", "WHERE", "T2.speed", "<", "55"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "area", ",", "t1", ".", "population", "from", "country", "as", "t1", "join", "roller_coaster", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "where", "t2", ".", "speed", ">", "value", "intersect", "select", "t1", ".", "name", ",", "t1", ".", "area", ",", "t1", ".", "population", "from", "country", "as", "t1", "join", "roller_coaster", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "where", "t2", ".", "speed", "<", "value"], "question": "What are the country names, area and population which has both roller coasters with speed higher", "question_toks": ["What", "are", "the", "country", "names", ",", "area", "and", "population", "which", "has", "both", "roller", "coasters", "with", "speed", "higher"], "dataset_name": "spider", "guid": 2689}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the price ranges of hotels with 5 star ratings.", "sql": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"", "query_toks": ["SELECT", "price_range", "FROM", "HOTELS", "WHERE", "star_rating_code", "=", "``", "5", "''"], "query_toks_no_value": ["select", "price_range", "from", "hotels", "where", "star_rating_code", "=", "value"], "question": "Show the price ranges of hotels with 5 star ratings.", "question_toks": ["Show", "the", "price", "ranges", "of", "hotels", "with", "5", "star", "ratings", "."], "dataset_name": "spider", "guid": 2690}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all the neighbourhoods with Italian restaurant in Madison", "sql": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.neighbourhood_name", "FROM", "category", "AS", "t3", "JOIN", "business", "AS", "t2", "ON", "t3.business_id", "=", "t2.business_id", "JOIN", "category", "AS", "t4", "ON", "t4.business_id", "=", "t2.business_id", "JOIN", "neighbourhood", "AS", "t1", "ON", "t1.business_id", "=", "t2.business_id", "WHERE", "t2.city", "=", "``", "Madison", "''", "AND", "t3.category_name", "=", "``", "Italian", "''", "AND", "t4.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "neighbourhood_name", "from", "category", "as", "t3", "join", "business", "as", "t2", "on", "t3", ".", "business_id", "=", "t2", ".", "business_id", "join", "category", "as", "t4", "on", "t4", ".", "business_id", "=", "t2", ".", "business_id", "join", "neighbourhood", "as", "t1", "on", "t1", ".", "business_id", "=", "t2", ".", "business_id", "where", "t2", ".", "city", "=", "value", "and", "t3", ".", "category_name", "=", "value", "and", "t4", ".", "category_name", "=", "value"], "question": "List all the neighbourhoods with Italian restaurant in Madison", "question_toks": ["List", "all", "the", "neighbourhoods", "with", "Italian", "restaurant", "in", "Madison"], "dataset_name": "spider", "guid": 2691}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where are some restaurants good for french food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where are some restaurants good for french food ?", "question_toks": ["where", "are", "some", "restaurants", "good", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2692}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | Show the park of the roller coaster with the highest speed.", "sql": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1", "example": {"db_id": "roller_coaster", "query": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1", "query_toks": ["SELECT", "Park", "FROM", "roller_coaster", "ORDER", "BY", "Speed", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "park", "from", "roller_coaster", "order", "by", "speed", "desc", "limit", "value"], "question": "Show the park of the roller coaster with the highest speed.", "question_toks": ["Show", "the", "park", "of", "the", "roller", "coaster", "with", "the", "highest", "speed", "."], "dataset_name": "spider", "guid": 2693}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What are the names and decor of rooms with a king bed? Sort them by their price", "sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;", "example": {"db_id": "inn_1", "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;", "query_toks": ["SELECT", "roomName", ",", "decor", "FROM", "Rooms", "WHERE", "bedtype", "=", "'King", "'", "ORDER", "BY", "basePrice", ";"], "query_toks_no_value": ["select", "roomname", ",", "decor", "from", "rooms", "where", "bedtype", "=", "value", "order", "by", "baseprice"], "question": "What are the names and decor of rooms with a king bed? Sort them by their price", "question_toks": ["What", "are", "the", "names", "and", "decor", "of", "rooms", "with", "a", "king", "bed", "?", "Sort", "them", "by", "their", "price"], "dataset_name": "spider", "guid": 2694}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Count the number of programs.", "sql": "SELECT count(*) FROM program", "example": {"db_id": "program_share", "query": "SELECT count(*) FROM program", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "program"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "program"], "question": "Count the number of programs.", "question_toks": ["Count", "the", "number", "of", "programs", "."], "dataset_name": "spider", "guid": 3097}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the id of the reviewer whose name has substring \u201cMike\u201d?", "sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"", "query_toks": ["SELECT", "rID", "FROM", "Reviewer", "WHERE", "name", "LIKE", "``", "%", "Mike", "%", "''"], "query_toks_no_value": ["select", "rid", "from", "reviewer", "where", "name", "like", "value"], "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?", "question_toks": ["What", "is", "the", "id", "of", "the", "reviewer", "whose", "name", "has", "substring", "\u201cMike\u201d", "?"], "dataset_name": "spider", "guid": 3098}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the names of all reviewers who have contributed three or more ratings.", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "example": {"db_id": "movie_1", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T1.rID HAVING COUNT(*)  >=  3", "query_toks": ["SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "GROUP", "BY", "T1.rID", "HAVING", "COUNT", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "group", "by", "t1", ".", "rid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the names of all reviewers who have contributed three or more ratings.", "question_toks": ["Find", "the", "names", "of", "all", "reviewers", "who", "have", "contributed", "three", "or", "more", "ratings", "."], "dataset_name": "spider", "guid": 3099}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors who acted in the same movie as \" Tom Hanks \"", "sql": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"Tom Hanks\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"Tom Hanks\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t4", "JOIN", "actor", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t5", "ON", "t5.mid", "=", "t4.msid", "JOIN", "CAST", "AS", "t3", "ON", "t5.mid", "=", "t3.msid", "JOIN", "actor", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "WHERE", "t2.name", "=", "``", "Tom", "Hanks", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t4", "join", "actor", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t5", "on", "t5", ".", "mid", "=", "t4", ".", "msid", "join", "cast", "as", "t3", "on", "t5", ".", "mid", "=", "t3", ".", "msid", "join", "actor", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t2", ".", "name", "=", "value"], "question": "Find all actors who acted in the same movie as \" Tom Hanks \"", "question_toks": ["Find", "all", "actors", "who", "acted", "in", "the", "same", "movie", "as", "``", "Tom", "Hanks", "``"], "dataset_name": "spider", "guid": 3100}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the ids of all tv channels that have more than 2 TV channels?", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "example": {"db_id": "tvshow", "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "query_toks": ["SELECT", "id", "FROM", "tv_channel", "GROUP", "BY", "country", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the ids of all tv channels that have more than 2 TV channels?", "question_toks": ["What", "are", "the", "ids", "of", "all", "tv", "channels", "that", "have", "more", "than", "2", "TV", "channels", "?"], "dataset_name": "spider", "guid": 3101}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What movies have the same director as the movie \" Revolutionary Road \" ?", "sql": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  \"Revolutionary Road\";", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  \"Revolutionary Road\";", "query_toks": ["SELECT", "t3.title", "FROM", "director", "AS", "t5", "JOIN", "directed_by", "AS", "t2", "ON", "t5.did", "=", "t2.did", "JOIN", "directed_by", "AS", "t1", "ON", "t5.did", "=", "t1.did", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t2.msid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t4.title", "=", "``", "Revolutionary", "Road", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "director", "as", "t5", "join", "directed_by", "as", "t2", "on", "t5", ".", "did", "=", "t2", ".", "did", "join", "directed_by", "as", "t1", "on", "t5", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t4", ".", "title", "=", "value"], "question": "What movies have the same director as the movie \" Revolutionary Road \" ?", "question_toks": ["What", "movies", "have", "the", "same", "director", "as", "the", "movie", "``", "Revolutionary", "Road", "``", "?"], "dataset_name": "spider", "guid": 3102}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the titles of all movies not reviewed by Chris Jackson.", "sql": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Chris Jackson'", "query_toks": ["SELECT", "DISTINCT", "title", "FROM", "Movie", "EXCEPT", "SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T3.name", "=", "'Chris", "Jackson", "'"], "query_toks_no_value": ["select", "distinct", "title", "from", "movie", "except", "select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t3", ".", "name", "=", "value"], "question": "Find the titles of all movies not reviewed by Chris Jackson.", "question_toks": ["Find", "the", "titles", "of", "all", "movies", "not", "reviewed", "by", "Chris", "Jackson", "."], "dataset_name": "spider", "guid": 3103}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | find the total percentage share of all channels owned by CCTV.", "sql": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'", "example": {"db_id": "program_share", "query": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'", "query_toks": ["SELECT", "sum", "(", "Share_in_percent", ")", "FROM", "channel", "WHERE", "OWNER", "=", "'CCTV", "'"], "query_toks_no_value": ["select", "sum", "(", "share_in_percent", ")", "from", "channel", "where", "owner", "=", "value"], "question": "find the total percentage share of all channels owned by CCTV.", "question_toks": ["find", "the", "total", "percentage", "share", "of", "all", "channels", "owned", "by", "CCTV", "."], "dataset_name": "spider", "guid": 3104}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the directors of all movies featuring \" Kate Winslet \"", "sql": "SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Kate Winslet\";", "example": {"db_id": "imdb", "query": "SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Kate Winslet\";", "query_toks": ["SELECT", "t3.name", "FROM", "CAST", "AS", "t4", "JOIN", "actor", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t5", "ON", "t5.mid", "=", "t4.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t5.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t1.name", "=", "``", "Kate", "Winslet", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "cast", "as", "t4", "join", "actor", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t5", "on", "t5", ".", "mid", "=", "t4", ".", "msid", "join", "directed_by", "as", "t2", "on", "t5", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t1", ".", "name", "=", "value"], "question": "Find the directors of all movies featuring \" Kate Winslet \"", "question_toks": ["Find", "the", "directors", "of", "all", "movies", "featuring", "``", "Kate", "Winslet", "``"], "dataset_name": "spider", "guid": 3105}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the titles and directors of the films were never presented in China?", "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", "example": {"db_id": "film_rank", "query": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", "query_toks": ["SELECT", "title", ",", "director", "FROM", "film", "WHERE", "film_id", "NOT", "IN", "(", "SELECT", "film_id", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.market_id", "=", "T2.Market_ID", "WHERE", "country", "=", "'China", "'", ")"], "query_toks_no_value": ["select", "title", ",", "director", "from", "film", "where", "film_id", "not", "in", "(", "select", "film_id", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "where", "country", "=", "value", ")"], "question": "What are the titles and directors of the films were never presented in China?", "question_toks": ["What", "are", "the", "titles", "and", "directors", "of", "the", "films", "were", "never", "presented", "in", "China", "?"], "dataset_name": "spider", "guid": 3106}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | List all the directors of movies about nuclear weapons", "sql": "SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  \"nuclear weapons\";", "example": {"db_id": "imdb", "query": "SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  \"nuclear weapons\";", "query_toks": ["SELECT", "t3.name", "FROM", "director", "AS", "t3", "JOIN", "directed_by", "AS", "t2", "ON", "t3.did", "=", "t2.did", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t2.msid", "JOIN", "tags", "AS", "t5", "ON", "t5.msid", "=", "t4.mid", "JOIN", "keyword", "AS", "t1", "ON", "t5.kid", "=", "t1.id", "WHERE", "t1.keyword", "=", "``", "nuclear", "weapons", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "director", "as", "t3", "join", "directed_by", "as", "t2", "on", "t3", ".", "did", "=", "t2", ".", "did", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "tags", "as", "t5", "on", "t5", ".", "msid", "=", "t4", ".", "mid", "join", "keyword", "as", "t1", "on", "t5", ".", "kid", "=", "t1", ".", "id", "where", "t1", ".", "keyword", "=", "value"], "question": "List all the directors of movies about nuclear weapons", "question_toks": ["List", "all", "the", "directors", "of", "movies", "about", "nuclear", "weapons"], "dataset_name": "spider", "guid": 3107}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show the names of festivals that have nominated artworks of type \"Program Talent Show\".", "sql": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"", "example": {"db_id": "entertainment_awards", "query": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"", "query_toks": ["SELECT", "T3.Festival_Name", "FROM", "nomination", "AS", "T1", "JOIN", "artwork", "AS", "T2", "ON", "T1.Artwork_ID", "=", "T2.Artwork_ID", "JOIN", "festival_detail", "AS", "T3", "ON", "T1.Festival_ID", "=", "T3.Festival_ID", "WHERE", "T2.Type", "=", "``", "Program", "Talent", "Show", "''"], "query_toks_no_value": ["select", "t3", ".", "festival_name", "from", "nomination", "as", "t1", "join", "artwork", "as", "t2", "on", "t1", ".", "artwork_id", "=", "t2", ".", "artwork_id", "join", "festival_detail", "as", "t3", "on", "t1", ".", "festival_id", "=", "t3", ".", "festival_id", "where", "t2", ".", "type", "=", "value"], "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".", "question_toks": ["Show", "the", "names", "of", "festivals", "that", "have", "nominated", "artworks", "of", "type", "``", "Program", "Talent", "Show", "''", "."], "dataset_name": "spider", "guid": 3108}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Quentin Tarantino \" direct after 2010 ?", "sql": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  >  2010;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  >  2010;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Quentin", "Tarantino", "''", "AND", "t3.release_year", ">", "2010", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value", "and", "t3", ".", "release_year", ">", "value"], "question": "How many movies did \" Quentin Tarantino \" direct after 2010 ?", "question_toks": ["How", "many", "movies", "did", "``", "Quentin", "Tarantino", "``", "direct", "after", "2010", "?"], "dataset_name": "spider", "guid": 3109}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the ids of all moviest hat have not been reviewed by Britanny Harris?", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"", "example": {"db_id": "movie_1", "query": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"", "query_toks": ["SELECT", "mID", "FROM", "Rating", "EXCEPT", "SELECT", "T1.mID", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T2.name", "=", "``", "Brittany", "Harris", "''"], "query_toks_no_value": ["select", "mid", "from", "rating", "except", "select", "t1", ".", "mid", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t2", ".", "name", "=", "value"], "question": "What are the ids of all moviest hat have not been reviewed by Britanny Harris?", "question_toks": ["What", "are", "the", "ids", "of", "all", "moviest", "hat", "have", "not", "been", "reviewed", "by", "Britanny", "Harris", "?"], "dataset_name": "spider", "guid": 3110}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the nationality of the actor \" Christoph Waltz \" ?", "sql": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";", "example": {"db_id": "imdb", "query": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";", "query_toks": ["SELECT", "nationality", "FROM", "actor", "WHERE", "name", "=", "``", "Christoph", "Waltz", "''", ";"], "query_toks_no_value": ["select", "nationality", "from", "actor", "where", "name", "=", "value"], "question": "What is the nationality of the actor \" Christoph Waltz \" ?", "question_toks": ["What", "is", "the", "nationality", "of", "the", "actor", "``", "Christoph", "Waltz", "``", "?"], "dataset_name": "spider", "guid": 3111}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Please list the years of film market estimations when the market is in country \"Japan\" in descending order.", "sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC", "example": {"db_id": "film_rank", "query": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC", "query_toks": ["SELECT", "T1.Year", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "WHERE", "T2.Country", "=", "``", "Japan", "''", "ORDER", "BY", "T1.Year", "DESC"], "query_toks_no_value": ["select", "t1", ".", "year", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "where", "t2", ".", "country", "=", "value", "order", "by", "t1", ".", "year", "desc"], "question": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.", "question_toks": ["Please", "list", "the", "years", "of", "film", "market", "estimations", "when", "the", "market", "is", "in", "country", "``", "Japan", "''", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 3112}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | List the name of artworks in ascending alphabetical order.", "sql": "SELECT Name FROM artwork ORDER BY Name ASC", "example": {"db_id": "entertainment_awards", "query": "SELECT Name FROM artwork ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "artwork", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "artwork", "order", "by", "name", "asc"], "question": "List the name of artworks in ascending alphabetical order.", "question_toks": ["List", "the", "name", "of", "artworks", "in", "ascending", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 3113}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | In which locations are there more than one movie theater with capacity above 300?", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "300", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "capacity", ">", "value", "group", "by", "location", "having", "count", "(", "*", ")", ">", "value"], "question": "In which locations are there more than one movie theater with capacity above 300?", "question_toks": ["In", "which", "locations", "are", "there", "more", "than", "one", "movie", "theater", "with", "capacity", "above", "300", "?"], "dataset_name": "spider", "guid": 3114}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What was the budget of the movie Juno from 2007 ?", "sql": "SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";", "example": {"db_id": "imdb", "query": "SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";", "query_toks": ["SELECT", "budget", "FROM", "movie", "WHERE", "release_year", "=", "2007", "AND", "title", "=", "``", "Juno", "''", ";"], "query_toks_no_value": ["select", "budget", "from", "movie", "where", "release_year", "=", "value", "and", "title", "=", "value"], "question": "What was the budget of the movie Juno from 2007 ?", "question_toks": ["What", "was", "the", "budget", "of", "the", "movie", "Juno", "from", "2007", "?"], "dataset_name": "spider", "guid": 3115}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are the major roles in the movie \" Daddy Long Legs \"", "sql": "SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Daddy Long Legs\";", "example": {"db_id": "imdb", "query": "SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Daddy Long Legs\";", "query_toks": ["SELECT", "t2.role", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t3.title", "=", "``", "Daddy", "Long", "Legs", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "role", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "What are the major roles in the movie \" Daddy Long Legs \"", "question_toks": ["What", "are", "the", "major", "roles", "in", "the", "movie", "``", "Daddy", "Long", "Legs", "``"], "dataset_name": "spider", "guid": 3116}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Show me the owner of the channel with the highest rating.", "sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "example": {"db_id": "program_share", "query": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "query_toks": ["SELECT", "OWNER", "FROM", "channel", "ORDER", "BY", "rating_in_percent", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "owner", "from", "channel", "order", "by", "rating_in_percent", "desc", "limit", "value"], "question": "Show me the owner of the channel with the highest rating.", "question_toks": ["Show", "me", "the", "owner", "of", "the", "channel", "with", "the", "highest", "rating", "."], "dataset_name": "spider", "guid": 3117}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the package options and the name of the series for the TV Channel that supports high definition TV?", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "example": {"db_id": "tvshow", "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "query_toks": ["SELECT", "package_option", ",", "series_name", "FROM", "TV_Channel", "WHERE", "hight_definition_TV", "=", "``", "yes", "''"], "query_toks_no_value": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "value"], "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "question_toks": ["What", "are", "the", "package", "options", "and", "the", "name", "of", "the", "series", "for", "the", "TV", "Channel", "that", "supports", "high", "definition", "TV", "?"], "dataset_name": "spider", "guid": 3118}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | Find the package choice and series name of the TV channel that has high definition TV.", "sql": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "example": {"db_id": "tvshow", "query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\"", "query_toks": ["SELECT", "package_option", ",", "series_name", "FROM", "TV_Channel", "WHERE", "hight_definition_TV", "=", "``", "yes", "''"], "query_toks_no_value": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "value"], "question": "Find the package choice and series name of the TV channel that has high definition TV.", "question_toks": ["Find", "the", "package", "choice", "and", "series", "name", "of", "the", "TV", "channel", "that", "has", "high", "definition", "TV", "."], "dataset_name": "spider", "guid": 3119}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | List all program origins in the alphabetical order.", "sql": "SELECT origin FROM program ORDER BY origin", "example": {"db_id": "program_share", "query": "SELECT origin FROM program ORDER BY origin", "query_toks": ["SELECT", "origin", "FROM", "program", "ORDER", "BY", "origin"], "query_toks_no_value": ["select", "origin", "from", "program", "order", "by", "origin"], "question": "List all program origins in the alphabetical order.", "question_toks": ["List", "all", "program", "origins", "in", "the", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 3120}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who was the actor that played \" Alan Turing \" in the movie \" The Imitation Game \" ?", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t2.role", "=", "``", "Alan", "Turing", "''", "AND", "t3.title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t2", ".", "role", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Who was the actor that played \" Alan Turing \" in the movie \" The Imitation Game \" ?", "question_toks": ["Who", "was", "the", "actor", "that", "played", "``", "Alan", "Turing", "``", "in", "the", "movie", "``", "The", "Imitation", "Game", "``", "?"], "dataset_name": "spider", "guid": 3121}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the different film Directors?", "sql": "SELECT DISTINCT Director FROM film", "example": {"db_id": "film_rank", "query": "SELECT DISTINCT Director FROM film", "query_toks": ["SELECT", "DISTINCT", "Director", "FROM", "film"], "query_toks_no_value": ["select", "distinct", "director", "from", "film"], "question": "What are the different film Directors?", "question_toks": ["What", "are", "the", "different", "film", "Directors", "?"], "dataset_name": "spider", "guid": 3122}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Return the types of film market estimations in 1995.", "sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995", "example": {"db_id": "film_rank", "query": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995", "query_toks": ["SELECT", "TYPE", "FROM", "film_market_estimation", "WHERE", "YEAR", "=", "1995"], "query_toks_no_value": ["select", "type", "from", "film_market_estimation", "where", "year", "=", "value"], "question": "Return the types of film market estimations in 1995.", "question_toks": ["Return", "the", "types", "of", "film", "market", "estimations", "in", "1995", "."], "dataset_name": "spider", "guid": 3123}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Quentin Tarantino \" direct before 2010 ?", "sql": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  <  2010;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  <  2010;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Quentin", "Tarantino", "''", "AND", "t3.release_year", "<", "2010", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value", "and", "t3", ".", "release_year", "<", "value"], "question": "How many movies did \" Quentin Tarantino \" direct before 2010 ?", "question_toks": ["How", "many", "movies", "did", "``", "Quentin", "Tarantino", "``", "direct", "before", "2010", "?"], "dataset_name": "spider", "guid": 3124}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the maximum stars and year for the most recent movie?", "sql": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "example": {"db_id": "movie_1", "query": "SELECT max(T1.stars) ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT max(YEAR) FROM Movie)", "query_toks": ["SELECT", "max", "(", "T1.stars", ")", ",", "T2.year", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.year", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "Movie", ")"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "stars", ")", ",", "t2", ".", "year", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "year", "=", "(", "select", "max", "(", "year", ")", "from", "movie", ")"], "question": "What is the maximum stars and year for the most recent movie?", "question_toks": ["What", "is", "the", "maximum", "stars", "and", "year", "for", "the", "most", "recent", "movie", "?"], "dataset_name": "spider", "guid": 3125}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "example": {"db_id": "tvshow", "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "query_toks": ["SELECT", "Episode", ",", "Rating", "FROM", "TV_series", "ORDER", "BY", "Rating", "DESC", "LIMIT", "3", ";"], "query_toks_no_value": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "value"], "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "question_toks": ["List", "top", "3", "highest", "Rating", "TV", "series", ".", "List", "the", "TV", "series", "'s", "Episode", "and", "Rating", "."], "dataset_name": "spider", "guid": 3126}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | What are the names of the chairs of festivals, sorted in ascending order of the year held?", "sql": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC", "example": {"db_id": "entertainment_awards", "query": "SELECT Chair_Name FROM festival_detail ORDER BY YEAR ASC", "query_toks": ["SELECT", "Chair_Name", "FROM", "festival_detail", "ORDER", "BY", "YEAR", "ASC"], "query_toks_no_value": ["select", "chair_name", "from", "festival_detail", "order", "by", "year", "asc"], "question": "What are the names of the chairs of festivals, sorted in ascending order of the year held?", "question_toks": ["What", "are", "the", "names", "of", "the", "chairs", "of", "festivals", ",", "sorted", "in", "ascending", "order", "of", "the", "year", "held", "?"], "dataset_name": "spider", "guid": 3127}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the weekly rank for the episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "example": {"db_id": "tvshow", "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "Weekly_Rank", "FROM", "TV_series", "WHERE", "Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "value"], "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "question_toks": ["What", "is", "the", "weekly", "rank", "for", "the", "episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?"], "dataset_name": "spider", "guid": 3128}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show the cinema name and location for cinemas with capacity above average.", "sql": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)", "example": {"db_id": "cinema", "query": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)", "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "(", "SELECT", "avg", "(", "capacity", ")", "FROM", "cinema", ")"], "query_toks_no_value": ["select", "name", ",", "location", "from", "cinema", "where", "capacity", ">", "(", "select", "avg", "(", "capacity", ")", "from", "cinema", ")"], "question": "Show the cinema name and location for cinemas with capacity above average.", "question_toks": ["Show", "the", "cinema", "name", "and", "location", "for", "cinemas", "with", "capacity", "above", "average", "."], "dataset_name": "spider", "guid": 3129}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | Find the number of cartoons directed by each of the listed directors.", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "example": {"db_id": "tvshow", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "Directed_by", "FROM", "cartoon", "GROUP", "BY", "Directed_by"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by"], "question": "Find the number of cartoons directed by each of the listed directors.", "question_toks": ["Find", "the", "number", "of", "cartoons", "directed", "by", "each", "of", "the", "listed", "directors", "."], "dataset_name": "spider", "guid": 3130}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the titles of films that do not have a film market estimation?", "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)", "example": {"db_id": "film_rank", "query": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)", "query_toks": ["SELECT", "Title", "FROM", "film", "WHERE", "Film_ID", "NOT", "IN", "(", "SELECT", "Film_ID", "FROM", "film_market_estimation", ")"], "query_toks_no_value": ["select", "title", "from", "film", "where", "film_id", "not", "in", "(", "select", "film_id", "from", "film_market_estimation", ")"], "question": "What are the titles of films that do not have a film market estimation?", "question_toks": ["What", "are", "the", "titles", "of", "films", "that", "do", "not", "have", "a", "film", "market", "estimation", "?"], "dataset_name": "spider", "guid": 3131}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | How many artworks are there?", "sql": "SELECT count(*) FROM artwork", "example": {"db_id": "entertainment_awards", "query": "SELECT count(*) FROM artwork", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "artwork"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artwork"], "question": "How many artworks are there?", "question_toks": ["How", "many", "artworks", "are", "there", "?"], "dataset_name": "spider", "guid": 3132}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies directed by \" Steven Spielberg \" after 2006", "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\" AND t3.release_year  >  2006;", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\" AND t3.release_year  >  2006;", "query_toks": ["SELECT", "t3.title", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Steven", "Spielberg", "''", "AND", "t3.release_year", ">", "2006", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value", "and", "t3", ".", "release_year", ">", "value"], "question": "Find all movies directed by \" Steven Spielberg \" after 2006", "question_toks": ["Find", "all", "movies", "directed", "by", "``", "Steven", "Spielberg", "``", "after", "2006"], "dataset_name": "spider", "guid": 3133}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show the names of the three most recent festivals.", "sql": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3", "example": {"db_id": "entertainment_awards", "query": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3", "query_toks": ["SELECT", "Festival_Name", "FROM", "festival_detail", "ORDER", "BY", "YEAR", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "festival_name", "from", "festival_detail", "order", "by", "year", "desc", "limit", "value"], "question": "Show the names of the three most recent festivals.", "question_toks": ["Show", "the", "names", "of", "the", "three", "most", "recent", "festivals", "."], "dataset_name": "spider", "guid": 3134}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who is the director of the tv series \" House of Cards \" from 2013 ?", "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";", "query_toks": ["SELECT", "t2.name", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "tv_series", "AS", "t3", "ON", "t3.sid", "=", "t1.msid", "WHERE", "t3.release_year", "=", "2013", "AND", "t3.title", "=", "``", "House", "of", "Cards", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "tv_series", "as", "t3", "on", "t3", ".", "sid", "=", "t1", ".", "msid", "where", "t3", ".", "release_year", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Who is the director of the tv series \" House of Cards \" from 2013 ?", "question_toks": ["Who", "is", "the", "director", "of", "the", "tv", "series", "``", "House", "of", "Cards", "``", "from", "2013", "?"], "dataset_name": "spider", "guid": 3135}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | find the pixel aspect ratio and nation of the tv channels that do not use English.", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "example": {"db_id": "tvshow", "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "query_toks": ["SELECT", "Pixel_aspect_ratio_PAR", ",", "country", "FROM", "tv_channel", "WHERE", "LANGUAGE", "!", "=", "'English", "'"], "query_toks_no_value": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!", "=", "value"], "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "question_toks": ["find", "the", "pixel", "aspect", "ratio", "and", "nation", "of", "the", "tv", "channels", "that", "do", "not", "use", "English", "."], "dataset_name": "spider", "guid": 3136}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | How many TV Channel using language English?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "example": {"db_id": "tvshow", "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "TV_Channel", "WHERE", "LANGUAGE", "=", "``", "English", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "value"], "question": "How many TV Channel using language English?", "question_toks": ["How", "many", "TV", "Channel", "using", "language", "English", "?"], "dataset_name": "spider", "guid": 3137}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the id of the reviewer named Daniel Lewis?", "sql": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"", "query_toks": ["SELECT", "rID", "FROM", "Reviewer", "WHERE", "name", "=", "``", "Daniel", "Lewis", "''"], "query_toks_no_value": ["select", "rid", "from", "reviewer", "where", "name", "=", "value"], "question": "What is the id of the reviewer named Daniel Lewis?", "question_toks": ["What", "is", "the", "id", "of", "the", "reviewer", "named", "Daniel", "Lewis", "?"], "dataset_name": "spider", "guid": 3138}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the maximum and minimum share for the TV series?", "sql": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "example": {"db_id": "tvshow", "query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "query_toks": ["SELECT", "max", "(", "SHARE", ")", ",", "min", "(", "SHARE", ")", "FROM", "TV_series", ";"], "query_toks_no_value": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series"], "question": "What is the maximum and minimum share for the TV series?", "question_toks": ["What", "is", "the", "maximum", "and", "minimum", "share", "for", "the", "TV", "series", "?"], "dataset_name": "spider", "guid": 3139}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t2.role", "=", "``", "Alan", "Turing", "''", "AND", "t3.title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t2", ".", "role", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?", "question_toks": ["Who", "is", "the", "actor", "playing", "``", "Alan", "Turing", "``", "in", "``", "The", "Imitation", "Game", "``", "?"], "dataset_name": "spider", "guid": 3140}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the maximum and minimum number of cities in all markets.", "sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market", "example": {"db_id": "film_rank", "query": "SELECT max(Number_cities) ,  min(Number_cities) FROM market", "query_toks": ["SELECT", "max", "(", "Number_cities", ")", ",", "min", "(", "Number_cities", ")", "FROM", "market"], "query_toks_no_value": ["select", "max", "(", "number_cities", ")", ",", "min", "(", "number_cities", ")", "from", "market"], "question": "What are the maximum and minimum number of cities in all markets.", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "number", "of", "cities", "in", "all", "markets", "."], "dataset_name": "spider", "guid": 3141}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Which locations have 2 or more cinemas with capacity over 300?", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "300", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "capacity", ">", "value", "group", "by", "location", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which locations have 2 or more cinemas with capacity over 300?", "question_toks": ["Which", "locations", "have", "2", "or", "more", "cinemas", "with", "capacity", "over", "300", "?"], "dataset_name": "spider", "guid": 3142}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many actors from China have acted in \" Rush Hour 3 \"", "sql": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"China\" AND t3.title  =  \"Rush Hour 3\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"China\" AND t3.title  =  \"Rush Hour 3\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t1.nationality", "=", "``", "China", "''", "AND", "t3.title", "=", "``", "Rush", "Hour", "3", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t1", ".", "nationality", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "How many actors from China have acted in \" Rush Hour 3 \"", "question_toks": ["How", "many", "actors", "from", "China", "have", "acted", "in", "``", "Rush", "Hour", "3", "``"], "dataset_name": "spider", "guid": 3143}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | How many movies were made before 2000?", "sql": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "example": {"db_id": "movie_1", "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Movie", "WHERE", "YEAR", "<", "2000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "movie", "where", "year", "<", "value"], "question": "How many movies were made before 2000?", "question_toks": ["How", "many", "movies", "were", "made", "before", "2000", "?"], "dataset_name": "spider", "guid": 3144}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each director, how many reviews have they received?", "sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "example": {"db_id": "movie_1", "query": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.director", "FROM", "Movie", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.director"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "director", "from", "movie", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "director"], "question": "For each director, how many reviews have they received?", "question_toks": ["For", "each", "director", ",", "how", "many", "reviews", "have", "they", "received", "?"], "dataset_name": "spider", "guid": 3145}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | How many markets have number of cities smaller than 300?", "sql": "SELECT count(*) FROM market WHERE Number_cities  <  300", "example": {"db_id": "film_rank", "query": "SELECT count(*) FROM market WHERE Number_cities  <  300", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "market", "WHERE", "Number_cities", "<", "300"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "market", "where", "number_cities", "<", "value"], "question": "How many markets have number of cities smaller than 300?", "question_toks": ["How", "many", "markets", "have", "number", "of", "cities", "smaller", "than", "300", "?"], "dataset_name": "spider", "guid": 3146}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors from Italy born after 1980", "sql": "SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  \"Italy\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  \"Italy\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_year", ">", "1980", "AND", "nationality", "=", "``", "Italy", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_year", ">", "value", "and", "nationality", "=", "value"], "question": "Find all actors from Italy born after 1980", "question_toks": ["Find", "all", "actors", "from", "Italy", "born", "after", "1980"], "dataset_name": "spider", "guid": 3147}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For directors who had more than one movie, return the titles and produced years of all movies directed by them.", "sql": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "example": {"db_id": "movie_1", "query": "SELECT T1.title ,  T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director  =  T2.director WHERE T1.title != T2.title", "query_toks": ["SELECT", "T1.title", ",", "T1.year", "FROM", "Movie", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.director", "=", "T2.director", "WHERE", "T1.title", "!", "=", "T2.title"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "year", "from", "movie", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "director", "=", "t2", ".", "director", "where", "t1", ".", "title", "!", "=", "t2", ".", "title"], "question": "For directors who had more than one movie, return the titles and produced years of all movies directed by them.", "question_toks": ["For", "directors", "who", "had", "more", "than", "one", "movie", ",", "return", "the", "titles", "and", "produced", "years", "of", "all", "movies", "directed", "by", "them", "."], "dataset_name": "spider", "guid": 3148}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | How many cartoons did each director create?", "sql": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "example": {"db_id": "tvshow", "query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "Directed_by", "FROM", "cartoon", "GROUP", "BY", "Directed_by"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by"], "question": "How many cartoons did each director create?", "question_toks": ["How", "many", "cartoons", "did", "each", "director", "create", "?"], "dataset_name": "spider", "guid": 3149}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the Package Options of the TV Channels whose series names are Sky Radio?", "sql": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query_toks": ["SELECT", "Package_Option", "FROM", "TV_Channel", "WHERE", "series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "value"], "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "question_toks": ["What", "are", "the", "Package", "Options", "of", "the", "TV", "Channels", "whose", "series", "names", "are", "Sky", "Radio", "?"], "dataset_name": "spider", "guid": 3150}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What are the name, origin and owner of each program?", "sql": "SELECT name ,  origin ,  OWNER FROM program", "example": {"db_id": "program_share", "query": "SELECT name ,  origin ,  OWNER FROM program", "query_toks": ["SELECT", "name", ",", "origin", ",", "OWNER", "FROM", "program"], "query_toks_no_value": ["select", "name", ",", "origin", ",", "owner", "from", "program"], "question": "What are the name, origin and owner of each program?", "question_toks": ["What", "are", "the", "name", ",", "origin", "and", "owner", "of", "each", "program", "?"], "dataset_name": "spider", "guid": 3151}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | How films are produced by each studio?", "sql": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio", "example": {"db_id": "film_rank", "query": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio", "query_toks": ["SELECT", "Studio", ",", "COUNT", "(", "*", ")", "FROM", "film", "GROUP", "BY", "Studio"], "query_toks_no_value": ["select", "studio", ",", "count", "(", "*", ")", "from", "film", "group", "by", "studio"], "question": "How films are produced by each studio?", "question_toks": ["How", "films", "are", "produced", "by", "each", "studio", "?"], "dataset_name": "spider", "guid": 3152}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are 3 most highly rated episodes in the TV series table and what were those ratings?", "sql": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "example": {"db_id": "tvshow", "query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "query_toks": ["SELECT", "Episode", ",", "Rating", "FROM", "TV_series", "ORDER", "BY", "Rating", "DESC", "LIMIT", "3", ";"], "query_toks_no_value": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "value"], "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "question_toks": ["What", "are", "3", "most", "highly", "rated", "episodes", "in", "the", "TV", "series", "table", "and", "what", "were", "those", "ratings", "?"], "dataset_name": "spider", "guid": 3153}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t4.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t1.name", "=", "``", "Taraneh", "Alidoosti", "''", "AND", "t3.name", "=", "``", "Asghar", "Farhadi", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "directed_by", "as", "t2", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"", "question_toks": ["Find", "all", "movies", "directed", "by", "``", "Asghar", "Farhadi", "``", "and", "featuring", "``", "Taraneh", "Alidoosti", "``"], "dataset_name": "spider", "guid": 3154}}