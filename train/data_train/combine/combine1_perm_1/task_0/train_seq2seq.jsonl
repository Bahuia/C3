{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the names of all distinct wines that have appellations in North Coast area.", "sql": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.Area  =  \"North Coast\"", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "APPELLATIONs", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.Area", "=", "``", "North", "Coast", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "area", "=", "value"], "question": "Find the names of all distinct wines that have appellations in North Coast area.", "question_toks": ["Find", "the", "names", "of", "all", "distinct", "wines", "that", "have", "appellations", "in", "North", "Coast", "area", "."], "dataset_name": "spider", "guid": 1904}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the numbers of wines for different grapes?", "sql": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape", "example": {"db_id": "wine_1", "query": "SELECT count(*) ,  Grape FROM WINE GROUP BY Grape", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "Grape", "FROM", "WINE", "GROUP", "BY", "Grape"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "grape", "from", "wine", "group", "by", "grape"], "question": "What are the numbers of wines for different grapes?", "question_toks": ["What", "are", "the", "numbers", "of", "wines", "for", "different", "grapes", "?"], "dataset_name": "spider", "guid": 1905}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the grapes and appelations of all wines.", "sql": "SELECT Grape ,  Appelation FROM WINE", "example": {"db_id": "wine_1", "query": "SELECT Grape ,  Appelation FROM WINE", "query_toks": ["SELECT", "Grape", ",", "Appelation", "FROM", "WINE"], "query_toks_no_value": ["select", "grape", ",", "appelation", "from", "wine"], "question": "List the grapes and appelations of all wines.", "question_toks": ["List", "the", "grapes", "and", "appelations", "of", "all", "wines", "."], "dataset_name": "spider", "guid": 1906}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | What is the season of the game which causes the player 'Walter Samuel' to get injured?", "sql": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'", "example": {"db_id": "game_injury", "query": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'", "query_toks": ["SELECT", "T1.season", "FROM", "game", "AS", "T1", "JOIN", "injury_accident", "AS", "T2", "ON", "T1.id", "=", "T2.game_id", "WHERE", "T2.player", "=", "'Walter", "Samuel", "'"], "query_toks_no_value": ["select", "t1", ".", "season", "from", "game", "as", "t1", "join", "injury_accident", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "game_id", "where", "t2", ".", "player", "=", "value"], "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?", "question_toks": ["What", "is", "the", "season", "of", "the", "game", "which", "causes", "the", "player", "'Walter", "Samuel", "'", "to", "get", "injured", "?"], "dataset_name": "spider", "guid": 1907}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | What are all the distinct asset models?", "sql": "SELECT DISTINCT asset_model FROM Assets", "example": {"db_id": "assets_maintenance", "query": "SELECT DISTINCT asset_model FROM Assets", "query_toks": ["SELECT", "DISTINCT", "asset_model", "FROM", "Assets"], "query_toks_no_value": ["select", "distinct", "asset_model", "from", "assets"], "question": "What are all the distinct asset models?", "question_toks": ["What", "are", "all", "the", "distinct", "asset", "models", "?"], "dataset_name": "spider", "guid": 1908}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | What are the ids, scores, and dates of the games which caused at least two injury accidents?", "sql": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "example": {"db_id": "game_injury", "query": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.id", ",", "T1.score", ",", "T1.date", "FROM", "game", "AS", "T1", "JOIN", "injury_accident", "AS", "T2", "ON", "T2.game_id", "=", "T1.id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "score", ",", "t1", ".", "date", "from", "game", "as", "t1", "join", "injury_accident", "as", "t2", "on", "t2", ".", "game_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?", "question_toks": ["What", "are", "the", "ids", ",", "scores", ",", "and", "dates", "of", "the", "games", "which", "caused", "at", "least", "two", "injury", "accidents", "?"], "dataset_name": "spider", "guid": 1909}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the number of cities in counties that have a population more than 20000.", "sql": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "example": {"db_id": "county_public_safety", "query": "SELECT count(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population  >  20000)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "city", "WHERE", "county_ID", "IN", "(", "SELECT", "county_ID", "FROM", "county_public_safety", "WHERE", "population", ">", "20000", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "city", "where", "county_id", "in", "(", "select", "county_id", "from", "county_public_safety", "where", "population", ">", "value", ")"], "question": "Show the number of cities in counties that have a population more than 20000.", "question_toks": ["Show", "the", "number", "of", "cities", "in", "counties", "that", "have", "a", "population", "more", "than", "20000", "."], "dataset_name": "spider", "guid": 1910}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What is the average number of working horses of farms with more than 5000 total number of horses?", "sql": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "example": {"db_id": "farm", "query": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000", "query_toks": ["SELECT", "avg", "(", "Working_Horses", ")", "FROM", "farm", "WHERE", "Total_Horses", ">", "5000"], "query_toks_no_value": ["select", "avg", "(", "working_horses", ")", "from", "farm", "where", "total_horses", ">", "value"], "question": "What is the average number of working horses of farms with more than 5000 total number of horses?", "question_toks": ["What", "is", "the", "average", "number", "of", "working", "horses", "of", "farms", "with", "more", "than", "5000", "total", "number", "of", "horses", "?"], "dataset_name": "spider", "guid": 1911}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | How many weddings are there in year 2016?", "sql": "SELECT count(*) FROM wedding WHERE YEAR  =  2016", "example": {"db_id": "wedding", "query": "SELECT count(*) FROM wedding WHERE YEAR  =  2016", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "wedding", "WHERE", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "wedding", "where", "year", "=", "value"], "question": "How many weddings are there in year 2016?", "question_toks": ["How", "many", "weddings", "are", "there", "in", "year", "2016", "?"], "dataset_name": "spider", "guid": 1912}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Return the hispanic percentage for cities in which the black percentage is greater than 10.", "sql": "SELECT Hispanic FROM city WHERE Black  >  10", "example": {"db_id": "county_public_safety", "query": "SELECT Hispanic FROM city WHERE Black  >  10", "query_toks": ["SELECT", "Hispanic", "FROM", "city", "WHERE", "Black", ">", "10"], "query_toks_no_value": ["select", "hispanic", "from", "city", "where", "black", ">", "value"], "question": "Return the hispanic percentage for cities in which the black percentage is greater than 10.", "question_toks": ["Return", "the", "hispanic", "percentage", "for", "cities", "in", "which", "the", "black", "percentage", "is", "greater", "than", "10", "."], "dataset_name": "spider", "guid": 1913}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the distinct names and nationalities of the architects who have ever built a mill?", "sql": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id", "example": {"db_id": "architecture", "query": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id", "query_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.nationality", "FROM", "architect", "AS", "T1", "JOIN", "mill", "AS", "t2", "ON", "T1.id", "=", "T2.architect_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", ",", "t1", ".", "nationality", "from", "architect", "as", "t1", "join", "mill", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "architect_id"], "question": "What are the distinct names and nationalities of the architects who have ever built a mill?", "question_toks": ["What", "are", "the", "distinct", "names", "and", "nationalities", "of", "the", "architects", "who", "have", "ever", "built", "a", "mill", "?"], "dataset_name": "spider", "guid": 1914}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the average price and score of wines grouped by appelation?", "sql": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation", "example": {"db_id": "wine_1", "query": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation", "query_toks": ["SELECT", "avg", "(", "Price", ")", ",", "avg", "(", "Score", ")", ",", "Appelation", "FROM", "WINE", "GROUP", "BY", "Appelation"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "avg", "(", "score", ")", ",", "appelation", "from", "wine", "group", "by", "appelation"], "question": "What are the average price and score of wines grouped by appelation?", "question_toks": ["What", "are", "the", "average", "price", "and", "score", "of", "wines", "grouped", "by", "appelation", "?"], "dataset_name": "spider", "guid": 1915}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | List the names of counties in descending order of population.", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC", "query_toks": ["SELECT", "Name", "FROM", "county_public_safety", "ORDER", "BY", "Population", "DESC"], "query_toks_no_value": ["select", "name", "from", "county_public_safety", "order", "by", "population", "desc"], "question": "List the names of counties in descending order of population.", "question_toks": ["List", "the", "names", "of", "counties", "in", "descending", "order", "of", "population", "."], "dataset_name": "spider", "guid": 1916}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the distinct names of wines made before 2000 or after 2010.", "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "WHERE", "YEAR", "<", "2000", "OR", "YEAR", ">", "2010"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "where", "year", "<", "value", "or", "year", ">", "value"], "question": "Give the distinct names of wines made before 2000 or after 2010.", "question_toks": ["Give", "the", "distinct", "names", "of", "wines", "made", "before", "2000", "or", "after", "2010", "."], "dataset_name": "spider", "guid": 1917}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the names of all distinct wines that have scores higher than 90.", "sql": "SELECT Name FROM WINE WHERE score  >  90", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE score  >  90", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "score", ">", "90"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "score", ">", "value"], "question": "List the names of all distinct wines that have scores higher than 90.", "question_toks": ["List", "the", "names", "of", "all", "distinct", "wines", "that", "have", "scores", "higher", "than", "90", "."], "dataset_name": "spider", "guid": 1918}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | List the name, nationality and id of all male architects ordered by their names lexicographically.", "sql": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name", "example": {"db_id": "architecture", "query": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name", "query_toks": ["SELECT", "name", ",", "nationality", ",", "id", "FROM", "architect", "WHERE", "gender", "=", "'male", "'", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "name", ",", "nationality", ",", "id", "from", "architect", "where", "gender", "=", "value", "order", "by", "name"], "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.", "question_toks": ["List", "the", "name", ",", "nationality", "and", "id", "of", "all", "male", "architects", "ordered", "by", "their", "names", "lexicographically", "."], "dataset_name": "spider", "guid": 1919}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | How many games are free of injury accidents?", "sql": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )", "example": {"db_id": "game_injury", "query": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "game", "WHERE", "id", "NOT", "IN", "(", "SELECT", "game_id", "FROM", "injury_accident", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "game", "where", "id", "not", "in", "(", "select", "game_id", "from", "injury_accident", ")"], "question": "How many games are free of injury accidents?", "question_toks": ["How", "many", "games", "are", "free", "of", "injury", "accidents", "?"], "dataset_name": "spider", "guid": 1920}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?", "sql": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'", "example": {"db_id": "architecture", "query": "SELECT LOCATION FROM bridge WHERE name  =  'Kolob Arch' OR name  =  'Rainbow Bridge'", "query_toks": ["SELECT", "LOCATION", "FROM", "bridge", "WHERE", "name", "=", "'Kolob", "Arch", "'", "OR", "name", "=", "'Rainbow", "Bridge", "'"], "query_toks_no_value": ["select", "location", "from", "bridge", "where", "name", "=", "value", "or", "name", "=", "value"], "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?", "question_toks": ["What", "is", "the", "location", "of", "the", "bridge", "named", "'Kolob", "Arch", "'", "or", "'Rainbow", "Bridge", "'", "?"], "dataset_name": "spider", "guid": 1921}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?", "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "example": {"db_id": "farm", "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "query_toks": ["SELECT", "Status", "FROM", "city", "WHERE", "Population", ">", "1500", "INTERSECT", "SELECT", "Status", "FROM", "city", "WHERE", "Population", "<", "500"], "query_toks_no_value": ["select", "status", "from", "city", "where", "population", ">", "value", "intersect", "select", "status", "from", "city", "where", "population", "<", "value"], "question": "Which statuses correspond to both cities that have a population over 1500 and cities that have a population lower than 500?", "question_toks": ["Which", "statuses", "correspond", "to", "both", "cities", "that", "have", "a", "population", "over", "1500", "and", "cities", "that", "have", "a", "population", "lower", "than", "500", "?"], "dataset_name": "spider", "guid": 1922}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What is the starting year of the oldest technicians?", "sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "example": {"db_id": "machine_repair", "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Starting_Year", "FROM", "technician", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "starting_year", "from", "technician", "order", "by", "age", "desc", "limit", "value"], "question": "What is the starting year of the oldest technicians?", "question_toks": ["What", "is", "the", "starting", "year", "of", "the", "oldest", "technicians", "?"], "dataset_name": "spider", "guid": 1923}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the name, open date, and organizer for all churches.", "sql": "SELECT name ,  open_date ,  organized_by FROM Church", "example": {"db_id": "wedding", "query": "SELECT name ,  open_date ,  organized_by FROM Church", "query_toks": ["SELECT", "name", ",", "open_date", ",", "organized_by", "FROM", "Church"], "query_toks_no_value": ["select", "name", ",", "open_date", ",", "organized_by", "from", "church"], "question": "Show the name, open date, and organizer for all churches.", "question_toks": ["Show", "the", "name", ",", "open", "date", ",", "and", "organizer", "for", "all", "churches", "."], "dataset_name": "spider", "guid": 1924}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What is the average length in feet of the bridges?", "sql": "SELECT avg(length_feet) FROM bridge", "example": {"db_id": "architecture", "query": "SELECT avg(length_feet) FROM bridge", "query_toks": ["SELECT", "avg", "(", "length_feet", ")", "FROM", "bridge"], "query_toks_no_value": ["select", "avg", "(", "length_feet", ")", "from", "bridge"], "question": "What is the average length in feet of the bridges?", "question_toks": ["What", "is", "the", "average", "length", "in", "feet", "of", "the", "bridges", "?"], "dataset_name": "spider", "guid": 1925}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What are the different ids and names of the battles that lost any 'Brig' type shipes?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "example": {"db_id": "battle_death", "query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'", "query_toks": ["SELECT", "DISTINCT", "T1.id", ",", "T1.name", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "WHERE", "T2.ship_type", "=", "'Brig", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "id", ",", "t1", ".", "name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "where", "t2", ".", "ship_type", "=", "value"], "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "question_toks": ["What", "are", "the", "different", "ids", "and", "names", "of", "the", "battles", "that", "lost", "any", "'Brig", "'", "type", "shipes", "?"], "dataset_name": "spider", "guid": 1926}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show the starting years shared by technicians from team \"CLE\" and \"CWS\".", "sql": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"", "example": {"db_id": "machine_repair", "query": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"", "query_toks": ["SELECT", "Starting_Year", "FROM", "technician", "WHERE", "Team", "=", "``", "CLE", "''", "INTERSECT", "SELECT", "Starting_Year", "FROM", "technician", "WHERE", "Team", "=", "``", "CWS", "''"], "query_toks_no_value": ["select", "starting_year", "from", "technician", "where", "team", "=", "value", "intersect", "select", "starting_year", "from", "technician", "where", "team", "=", "value"], "question": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".", "question_toks": ["Show", "the", "starting", "years", "shared", "by", "technicians", "from", "team", "``", "CLE", "''", "and", "``", "CWS", "''", "."], "dataset_name": "spider", "guid": 1927}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Return the names of cities, ordered alphabetically.", "sql": "SELECT Name FROM city ORDER BY Name ASC", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM city ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "city", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "city", "order", "by", "name", "asc"], "question": "Return the names of cities, ordered alphabetically.", "question_toks": ["Return", "the", "names", "of", "cities", ",", "ordered", "alphabetically", "."], "dataset_name": "spider", "guid": 1928}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | List the name of the county with the largest population.", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "county_public_safety", "ORDER", "BY", "Population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "county_public_safety", "order", "by", "population", "desc", "limit", "value"], "question": "List the name of the county with the largest population.", "question_toks": ["List", "the", "name", "of", "the", "county", "with", "the", "largest", "population", "."], "dataset_name": "spider", "guid": 1929}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | How many farms are there?", "sql": "SELECT count(*) FROM farm", "example": {"db_id": "farm", "query": "SELECT count(*) FROM farm", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "farm"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "farm"], "question": "How many farms are there?", "question_toks": ["How", "many", "farms", "are", "there", "?"], "dataset_name": "spider", "guid": 1930}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | List the dates of debates with number of audience bigger than 150", "sql": "SELECT Date FROM debate WHERE Num_of_Audience  >  150", "example": {"db_id": "debate", "query": "SELECT Date FROM debate WHERE Num_of_Audience  >  150", "query_toks": ["SELECT", "Date", "FROM", "debate", "WHERE", "Num_of_Audience", ">", "150"], "query_toks_no_value": ["select", "date", "from", "debate", "where", "num_of_audience", ">", "value"], "question": "List the dates of debates with number of audience bigger than 150", "question_toks": ["List", "the", "dates", "of", "debates", "with", "number", "of", "audience", "bigger", "than", "150"], "dataset_name": "spider", "guid": 1931}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Which wineries produce at least four wines?", "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4", "example": {"db_id": "wine_1", "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4", "query_toks": ["SELECT", "Winery", "FROM", "WINE", "GROUP", "BY", "Winery", "HAVING", "count", "(", "*", ")", ">", "=", "4"], "query_toks_no_value": ["select", "winery", "from", "wine", "group", "by", "winery", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which wineries produce at least four wines?", "question_toks": ["Which", "wineries", "produce", "at", "least", "four", "wines", "?"], "dataset_name": "spider", "guid": 1932}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | How many architects haven't built a mill before year 1850?", "sql": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );", "example": {"db_id": "architecture", "query": "SELECT count(*) FROM architect WHERE id NOT IN ( SELECT architect_id FROM mill WHERE built_year  <  1850 );", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "architect", "WHERE", "id", "NOT", "IN", "(", "SELECT", "architect_id", "FROM", "mill", "WHERE", "built_year", "<", "1850", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "architect", "where", "id", "not", "in", "(", "select", "architect_id", "from", "mill", "where", "built_year", "<", "value", ")"], "question": "How many architects haven't built a mill before year 1850?", "question_toks": ["How", "many", "architects", "have", "n't", "built", "a", "mill", "before", "year", "1850", "?"], "dataset_name": "spider", "guid": 1933}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the line 1 of addresses shared by some students and some teachers?", "sql": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id  =  T2.address_id", "query_toks": ["SELECT", "T1.line_1", "FROM", "Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "INTERSECT", "SELECT", "T1.line_1", "FROM", "Addresses", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id"], "query_toks_no_value": ["select", "t1", ".", "line_1", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "intersect", "select", "t1", ".", "line_1", "from", "addresses", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id"], "question": "What are the line 1 of addresses shared by some students and some teachers?", "question_toks": ["What", "are", "the", "line", "1", "of", "addresses", "shared", "by", "some", "students", "and", "some", "teachers", "?"], "dataset_name": "spider", "guid": 1934}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | How many appelations are in Napa Country?", "sql": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"", "example": {"db_id": "wine_1", "query": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "APPELLATIONS", "WHERE", "County", "=", "``", "Napa", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "appellations", "where", "county", "=", "value"], "question": "How many appelations are in Napa Country?", "question_toks": ["How", "many", "appelations", "are", "in", "Napa", "Country", "?"], "dataset_name": "spider", "guid": 1935}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.", "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id  =  T2.engineer_id GROUP BY T1.engineer_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.engineer_id", ",", "T1.first_name", ",", "T1.last_name", "FROM", "Maintenance_Engineers", "AS", "T1", "JOIN", "Engineer_Visits", "AS", "T2", "ON", "T1.engineer_id", "=", "T2.engineer_id", "GROUP", "BY", "T1.engineer_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "engineer_id", ",", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "maintenance_engineers", "as", "t1", "join", "engineer_visits", "as", "t2", "on", "t1", ".", "engineer_id", "=", "t2", ".", "engineer_id", "group", "by", "t1", ".", "engineer_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.", "question_toks": ["Among", "those", "engineers", "who", "have", "visited", ",", "which", "engineer", "makes", "the", "least", "number", "of", "visits", "?", "List", "the", "engineer", "id", ",", "first", "name", "and", "last", "name", "."], "dataset_name": "spider", "guid": 1936}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the name and age for all male people who don't have a wedding.", "sql": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)", "example": {"db_id": "wedding", "query": "SELECT name ,  age FROM people WHERE is_male  =  'T' AND people_id NOT IN (SELECT male_id FROM wedding)", "query_toks": ["SELECT", "name", ",", "age", "FROM", "people", "WHERE", "is_male", "=", "'T", "'", "AND", "people_id", "NOT", "IN", "(", "SELECT", "male_id", "FROM", "wedding", ")"], "query_toks_no_value": ["select", "name", ",", "age", "from", "people", "where", "is_male", "=", "value", "and", "people_id", "not", "in", "(", "select", "male_id", "from", "wedding", ")"], "question": "Show the name and age for all male people who don't have a wedding.", "question_toks": ["Show", "the", "name", "and", "age", "for", "all", "male", "people", "who", "do", "n't", "have", "a", "wedding", "."], "dataset_name": "spider", "guid": 1937}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of technicians and the machine series that they repair?", "sql": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "example": {"db_id": "machine_repair", "query": "SELECT T3.Name ,  T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID", "query_toks": ["SELECT", "T3.Name", ",", "T2.Machine_series", "FROM", "repair_assignment", "AS", "T1", "JOIN", "machine", "AS", "T2", "ON", "T1.machine_id", "=", "T2.machine_id", "JOIN", "technician", "AS", "T3", "ON", "T1.technician_ID", "=", "T3.technician_ID"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "machine_series", "from", "repair_assignment", "as", "t1", "join", "machine", "as", "t2", "on", "t1", ".", "machine_id", "=", "t2", ".", "machine_id", "join", "technician", "as", "t3", "on", "t1", ".", "technician_id", "=", "t3", ".", "technician_id"], "question": "What are the names of technicians and the machine series that they repair?", "question_toks": ["What", "are", "the", "names", "of", "technicians", "and", "the", "machine", "series", "that", "they", "repair", "?"], "dataset_name": "spider", "guid": 1938}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Give the years and official names of the cities of each competition.", "sql": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID", "example": {"db_id": "farm", "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID", "query_toks": ["SELECT", "T2.Year", ",", "T1.Official_Name", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID"], "query_toks_no_value": ["select", "t2", ".", "year", ",", "t1", ".", "official_name", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id"], "question": "Give the years and official names of the cities of each competition.", "question_toks": ["Give", "the", "years", "and", "official", "names", "of", "the", "cities", "of", "each", "competition", "."], "dataset_name": "spider", "guid": 1939}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.", "sql": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC", "example": {"db_id": "debate", "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC", "query_toks": ["SELECT", "T3.Name", ",", "T2.Date", ",", "T2.Venue", "FROM", "debate_people", "AS", "T1", "JOIN", "debate", "AS", "T2", "ON", "T1.Debate_ID", "=", "T2.Debate_ID", "JOIN", "people", "AS", "T3", "ON", "T1.Negative", "=", "T3.People_ID", "ORDER", "BY", "T3.Name", "ASC"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "date", ",", "t2", ".", "venue", "from", "debate_people", "as", "t1", "join", "debate", "as", "t2", "on", "t1", ".", "debate_id", "=", "t2", ".", "debate_id", "join", "people", "as", "t3", "on", "t1", ".", "negative", "=", "t3", ".", "people_id", "order", "by", "t3", ".", "name", "asc"], "question": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.", "question_toks": ["Show", "the", "names", "of", "people", ",", "and", "dates", "and", "venues", "of", "debates", "they", "are", "on", "the", "negative", "side", ",", "ordered", "in", "ascending", "alphabetical", "order", "of", "name", "."], "dataset_name": "spider", "guid": 1940}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.", "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "example": {"db_id": "wine_1", "query": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "query_toks": ["SELECT", "Grape", ",", "Winery", ",", "YEAR", "FROM", "WINE", "WHERE", "Price", ">", "100", "ORDER", "BY", "YEAR"], "query_toks_no_value": ["select", "grape", ",", "winery", ",", "year", "from", "wine", "where", "price", ">", "value", "order", "by", "year"], "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.", "question_toks": ["List", "the", "grape", ",", "winery", "and", "year", "of", "the", "wines", "whose", "price", "is", "bigger", "than", "100", "ordered", "by", "year", "."], "dataset_name": "spider", "guid": 1941}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | How many distinct kinds of injuries happened after season 2010?", "sql": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010", "example": {"db_id": "game_injury", "query": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.injury", ")", "FROM", "injury_accident", "AS", "T1", "JOIN", "game", "AS", "T2", "ON", "T1.game_id", "=", "T2.id", "WHERE", "T2.season", ">", "2010"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "injury", ")", "from", "injury_accident", "as", "t1", "join", "game", "as", "t2", "on", "t1", ".", "game_id", "=", "t2", ".", "id", "where", "t2", ".", "season", ">", "value"], "question": "How many distinct kinds of injuries happened after season 2010?", "question_toks": ["How", "many", "distinct", "kinds", "of", "injuries", "happened", "after", "season", "2010", "?"], "dataset_name": "spider", "guid": 1942}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What is the ship id and name that caused most total injuries?", "sql": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "battle_death", "query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.id", ",", "T2.name", "FROM", "death", "AS", "T1", "JOIN", "ship", "AS", "t2", "ON", "T1.caused_by_ship_id", "=", "T2.id", "GROUP", "BY", "T2.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "id", ",", "t2", ".", "name", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "caused_by_ship_id", "=", "t2", ".", "id", "group", "by", "t2", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the ship id and name that caused most total injuries?", "question_toks": ["What", "is", "the", "ship", "id", "and", "name", "that", "caused", "most", "total", "injuries", "?"], "dataset_name": "spider", "guid": 1943}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the names of all distinct wines that are made of red color grape.", "sql": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "Red", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value"], "question": "List the names of all distinct wines that are made of red color grape.", "question_toks": ["List", "the", "names", "of", "all", "distinct", "wines", "that", "are", "made", "of", "red", "color", "grape", "."], "dataset_name": "spider", "guid": 1944}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the average price of wines that are not produced from Sonoma county.", "sql": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "example": {"db_id": "wine_1", "query": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')", "query_toks": ["SELECT", "avg", "(", "price", ")", "FROM", "wine", "WHERE", "Appelation", "NOT", "IN", "(", "SELECT", "T1.Appelation", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T1.County", "=", "'Sonoma", "'", ")"], "query_toks_no_value": ["select", "avg", "(", "price", ")", "from", "wine", "where", "appelation", "not", "in", "(", "select", "t1", ".", "appelation", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t1", ".", "county", "=", "value", ")"], "question": "Find the average price of wines that are not produced from Sonoma county.", "question_toks": ["Find", "the", "average", "price", "of", "wines", "that", "are", "not", "produced", "from", "Sonoma", "county", "."], "dataset_name": "spider", "guid": 1945}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What is the total kills of the perpetrators with height more than 1.84.", "sql": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84", "example": {"db_id": "perpetrator", "query": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84", "query_toks": ["SELECT", "sum", "(", "T2.Killed", ")", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Height", ">", "1.84"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "killed", ")", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "height", ">", "value"], "question": "What is the total kills of the perpetrators with height more than 1.84.", "question_toks": ["What", "is", "the", "total", "kills", "of", "the", "perpetrators", "with", "height", "more", "than", "1.84", "."], "dataset_name": "spider", "guid": 1946}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the countries that have at least two perpetrators?", "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2", "example": {"db_id": "perpetrator", "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Country", ",", "COUNT", "(", "*", ")", "FROM", "perpetrator", "GROUP", "BY", "Country", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "perpetrator", "group", "by", "country", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the countries that have at least two perpetrators?", "question_toks": ["What", "are", "the", "countries", "that", "have", "at", "least", "two", "perpetrators", "?"], "dataset_name": "spider", "guid": 1947}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the areas and counties for all appelations?", "sql": "SELECT Area ,  County FROM APPELLATIONS", "example": {"db_id": "wine_1", "query": "SELECT Area ,  County FROM APPELLATIONS", "query_toks": ["SELECT", "Area", ",", "County", "FROM", "APPELLATIONS"], "query_toks_no_value": ["select", "area", ",", "county", "from", "appellations"], "question": "What are the areas and counties for all appelations?", "question_toks": ["What", "are", "the", "areas", "and", "counties", "for", "all", "appelations", "?"], "dataset_name": "spider", "guid": 1948}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | How many perpetrators are there?", "sql": "SELECT count(*) FROM perpetrator", "example": {"db_id": "perpetrator", "query": "SELECT count(*) FROM perpetrator", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "perpetrator"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "perpetrator"], "question": "How many perpetrators are there?", "question_toks": ["How", "many", "perpetrators", "are", "there", "?"], "dataset_name": "spider", "guid": 1949}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the maximum price and score of wines in each year?", "sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR", "example": {"db_id": "wine_1", "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR", "query_toks": ["SELECT", "max", "(", "Price", ")", ",", "max", "(", "Score", ")", ",", "YEAR", "FROM", "WINE", "GROUP", "BY", "YEAR"], "query_toks_no_value": ["select", "max", "(", "price", ")", ",", "max", "(", "score", ")", ",", "year", "from", "wine", "group", "by", "year"], "question": "What are the maximum price and score of wines in each year?", "question_toks": ["What", "are", "the", "maximum", "price", "and", "score", "of", "wines", "in", "each", "year", "?"], "dataset_name": "spider", "guid": 1950}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of cities that are in the county with the most police officers?", "sql": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "example": {"db_id": "county_public_safety", "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "query_toks": ["SELECT", "name", "FROM", "city", "WHERE", "county_ID", "=", "(", "SELECT", "county_ID", "FROM", "county_public_safety", "ORDER", "BY", "Police_officers", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "name", "from", "city", "where", "county_id", "=", "(", "select", "county_id", "from", "county_public_safety", "order", "by", "police_officers", "desc", "limit", "value", ")"], "question": "What are the names of cities that are in the county with the most police officers?", "question_toks": ["What", "are", "the", "names", "of", "cities", "that", "are", "in", "the", "county", "with", "the", "most", "police", "officers", "?"], "dataset_name": "spider", "guid": 1951}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Show the census ranking of cities whose status are not \"Village\".", "sql": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"", "example": {"db_id": "farm", "query": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"", "query_toks": ["SELECT", "Census_Ranking", "FROM", "city", "WHERE", "Status", "!", "=", "``", "Village", "''"], "query_toks_no_value": ["select", "census_ranking", "from", "city", "where", "status", "!", "=", "value"], "question": "Show the census ranking of cities whose status are not \"Village\".", "question_toks": ["Show", "the", "census", "ranking", "of", "cities", "whose", "status", "are", "not", "``", "Village", "''", "."], "dataset_name": "spider", "guid": 1952}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the id and zip code of the address with the highest monthly rental?", "sql": "SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T2.address_id ,  T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY monthly_rental DESC LIMIT 1", "query_toks": ["SELECT", "T2.address_id", ",", "T1.zip_postcode", "FROM", "Addresses", "AS", "T1", "JOIN", "Student_Addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "ORDER", "BY", "monthly_rental", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "address_id", ",", "t1", ".", "zip_postcode", "from", "addresses", "as", "t1", "join", "student_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "order", "by", "monthly_rental", "desc", "limit", "value"], "question": "What are the id and zip code of the address with the highest monthly rental?", "question_toks": ["What", "are", "the", "id", "and", "zip", "code", "of", "the", "address", "with", "the", "highest", "monthly", "rental", "?"], "dataset_name": "spider", "guid": 1953}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Return the maximum and minimum number of cows across all farms.", "sql": "SELECT max(Cows) ,  min(Cows) FROM farm", "example": {"db_id": "farm", "query": "SELECT max(Cows) ,  min(Cows) FROM farm", "query_toks": ["SELECT", "max", "(", "Cows", ")", ",", "min", "(", "Cows", ")", "FROM", "farm"], "query_toks_no_value": ["select", "max", "(", "cows", ")", ",", "min", "(", "cows", ")", "from", "farm"], "question": "Return the maximum and minimum number of cows across all farms.", "question_toks": ["Return", "the", "maximum", "and", "minimum", "number", "of", "cows", "across", "all", "farms", "."], "dataset_name": "spider", "guid": 1954}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Please show the different statuses of cities and the average population of cities with each status.", "sql": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "example": {"db_id": "farm", "query": "SELECT Status ,  avg(Population) FROM city GROUP BY Status", "query_toks": ["SELECT", "Status", ",", "avg", "(", "Population", ")", "FROM", "city", "GROUP", "BY", "Status"], "query_toks_no_value": ["select", "status", ",", "avg", "(", "population", ")", "from", "city", "group", "by", "status"], "question": "Please show the different statuses of cities and the average population of cities with each status.", "question_toks": ["Please", "show", "the", "different", "statuses", "of", "cities", "and", "the", "average", "population", "of", "cities", "with", "each", "status", "."], "dataset_name": "spider", "guid": 1955}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the distinct venues of debates", "sql": "SELECT DISTINCT Venue FROM debate", "example": {"db_id": "debate", "query": "SELECT DISTINCT Venue FROM debate", "query_toks": ["SELECT", "DISTINCT", "Venue", "FROM", "debate"], "query_toks_no_value": ["select", "distinct", "venue", "from", "debate"], "question": "Show the distinct venues of debates", "question_toks": ["Show", "the", "distinct", "venues", "of", "debates"], "dataset_name": "spider", "guid": 1956}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | How many counties are there?", "sql": "SELECT count(*) FROM county_public_safety", "example": {"db_id": "county_public_safety", "query": "SELECT count(*) FROM county_public_safety", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "county_public_safety"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "county_public_safety"], "question": "How many counties are there?", "question_toks": ["How", "many", "counties", "are", "there", "?"], "dataset_name": "spider", "guid": 1957}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | List the all the assets make, model, details by the disposed date ascendingly.", "sql": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC", "example": {"db_id": "assets_maintenance", "query": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC", "query_toks": ["SELECT", "asset_make", ",", "asset_model", ",", "asset_details", "FROM", "Assets", "ORDER", "BY", "asset_disposed_date", "ASC"], "query_toks_no_value": ["select", "asset_make", ",", "asset_model", ",", "asset_details", "from", "assets", "order", "by", "asset_disposed_date", "asc"], "question": "List the all the assets make, model, details by the disposed date ascendingly.", "question_toks": ["List", "the", "all", "the", "assets", "make", ",", "model", ",", "details", "by", "the", "disposed", "date", "ascendingly", "."], "dataset_name": "spider", "guid": 1958}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | How many fault status codes are recorded in the fault log parts table?", "sql": "SELECT DISTINCT fault_status FROM Fault_Log_Parts", "example": {"db_id": "assets_maintenance", "query": "SELECT DISTINCT fault_status FROM Fault_Log_Parts", "query_toks": ["SELECT", "DISTINCT", "fault_status", "FROM", "Fault_Log_Parts"], "query_toks_no_value": ["select", "distinct", "fault_status", "from", "fault_log_parts"], "question": "How many fault status codes are recorded in the fault log parts table?", "question_toks": ["How", "many", "fault", "status", "codes", "are", "recorded", "in", "the", "fault", "log", "parts", "table", "?"], "dataset_name": "spider", "guid": 1959}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the grapes, appelations, and wines with scores above 93, sorted by Name?", "sql": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "example": {"db_id": "wine_1", "query": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name", "query_toks": ["SELECT", "Grape", ",", "Appelation", ",", "Name", "FROM", "WINE", "WHERE", "Score", ">", "93", "ORDER", "BY", "Name"], "query_toks_no_value": ["select", "grape", ",", "appelation", ",", "name", "from", "wine", "where", "score", ">", "value", "order", "by", "name"], "question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?", "question_toks": ["What", "are", "the", "grapes", ",", "appelations", ",", "and", "wines", "with", "scores", "above", "93", ",", "sorted", "by", "Name", "?"], "dataset_name": "spider", "guid": 1960}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the name of the highest rated wine?", "sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "WINE", "ORDER", "BY", "Score", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "wine", "order", "by", "score", "limit", "value"], "question": "What is the name of the highest rated wine?", "question_toks": ["What", "is", "the", "name", "of", "the", "highest", "rated", "wine", "?"], "dataset_name": "spider", "guid": 1961}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | How many assets can each parts be used in? List the part name and the number.", "sql": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name", "query_toks": ["SELECT", "T1.part_name", ",", "count", "(", "*", ")", "FROM", "Parts", "AS", "T1", "JOIN", "Asset_Parts", "AS", "T2", "ON", "T1.part_id", "=", "T2.part_id", "GROUP", "BY", "T1.part_name"], "query_toks_no_value": ["select", "t1", ".", "part_name", ",", "count", "(", "*", ")", "from", "parts", "as", "t1", "join", "asset_parts", "as", "t2", "on", "t1", ".", "part_id", "=", "t2", ".", "part_id", "group", "by", "t1", ".", "part_name"], "question": "How many assets can each parts be used in? List the part name and the number.", "question_toks": ["How", "many", "assets", "can", "each", "parts", "be", "used", "in", "?", "List", "the", "part", "name", "and", "the", "number", "."], "dataset_name": "spider", "guid": 1962}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | How many engineer visits are required at most for a single fault log? List the number and the log entry id.", "sql": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT count(*) ,  T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.fault_log_entry_id", "FROM", "Fault_Log", "AS", "T1", "JOIN", "Engineer_Visits", "AS", "T2", "ON", "T1.fault_log_entry_id", "=", "T2.fault_log_entry_id", "GROUP", "BY", "T1.fault_log_entry_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "fault_log_entry_id", "from", "fault_log", "as", "t1", "join", "engineer_visits", "as", "t2", "on", "t1", ".", "fault_log_entry_id", "=", "t2", ".", "fault_log_entry_id", "group", "by", "t1", ".", "fault_log_entry_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.", "question_toks": ["How", "many", "engineer", "visits", "are", "required", "at", "most", "for", "a", "single", "fault", "log", "?", "List", "the", "number", "and", "the", "log", "entry", "id", "."], "dataset_name": "spider", "guid": 1963}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines with scores higher than 90?", "sql": "SELECT Name FROM WINE WHERE score  >  90", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE score  >  90", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "score", ">", "90"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "score", ">", "value"], "question": "What are the names of wines with scores higher than 90?", "question_toks": ["What", "are", "the", "names", "of", "wines", "with", "scores", "higher", "than", "90", "?"], "dataset_name": "spider", "guid": 1964}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the distinct names of wines produced before the year of 2000 or after the year of 2010.", "sql": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "WHERE", "YEAR", "<", "2000", "OR", "YEAR", ">", "2010"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "where", "year", "<", "value", "or", "year", ">", "value"], "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.", "question_toks": ["Find", "the", "distinct", "names", "of", "wines", "produced", "before", "the", "year", "of", "2000", "or", "after", "the", "year", "of", "2010", "."], "dataset_name": "spider", "guid": 1965}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the first names and last names of students with address in Wisconsin state?", "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Wisconsin\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Wisconsin\"", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T1.state_province_county", "=", "``", "Wisconsin", "''"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "state_province_county", "=", "value"], "question": "What are the first names and last names of students with address in Wisconsin state?", "question_toks": ["What", "are", "the", "first", "names", "and", "last", "names", "of", "students", "with", "address", "in", "Wisconsin", "state", "?"], "dataset_name": "spider", "guid": 1966}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What are the death and injury situations caused by the ship with tonnage 't'?", "sql": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "example": {"db_id": "battle_death", "query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'", "query_toks": ["SELECT", "T1.killed", ",", "T1.injured", "FROM", "death", "AS", "T1", "JOIN", "ship", "AS", "t2", "ON", "T1.caused_by_ship_id", "=", "T2.id", "WHERE", "T2.tonnage", "=", "'t", "'"], "query_toks_no_value": ["select", "t1", ".", "killed", ",", "t1", ".", "injured", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "caused_by_ship_id", "=", "t2", ".", "id", "where", "t2", ".", "tonnage", "=", "value"], "question": "What are the death and injury situations caused by the ship with tonnage 't'?", "question_toks": ["What", "are", "the", "death", "and", "injury", "situations", "caused", "by", "the", "ship", "with", "tonnage", "'t", "'", "?"], "dataset_name": "spider", "guid": 1967}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the monthly rentals of student addresses in Texas state?", "sql": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.state_province_county  =  \"Texas\"", "query_toks": ["SELECT", "T2.monthly_rental", "FROM", "Addresses", "AS", "T1", "JOIN", "Student_Addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T1.state_province_county", "=", "``", "Texas", "''"], "query_toks_no_value": ["select", "t2", ".", "monthly_rental", "from", "addresses", "as", "t1", "join", "student_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "state_province_county", "=", "value"], "question": "What are the monthly rentals of student addresses in Texas state?", "question_toks": ["What", "are", "the", "monthly", "rentals", "of", "student", "addresses", "in", "Texas", "state", "?"], "dataset_name": "spider", "guid": 1968}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "sql": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "example": {"db_id": "battle_death", "query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'", "query_toks": ["SELECT", "name", "FROM", "battle", "WHERE", "bulgarian_commander", "=", "'Kaloyan", "'", "AND", "latin_commander", "=", "'Baldwin", "I", "'"], "query_toks_no_value": ["select", "name", "from", "battle", "where", "bulgarian_commander", "=", "value", "and", "latin_commander", "=", "value"], "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "question_toks": ["What", "are", "the", "distinct", "battle", "names", "which", "are", "between", "bulgarian", "commander", "'Kaloyan", "'", "and", "latin", "commander", "'Baldwin", "I", "'", "?"], "dataset_name": "spider", "guid": 1969}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the names of perpetrators whose country is not \"China\"?", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"", "example": {"db_id": "perpetrator", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country != \"China\"", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Country", "!", "=", "``", "China", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "country", "!", "=", "value"], "question": "What are the names of perpetrators whose country is not \"China\"?", "question_toks": ["What", "are", "the", "names", "of", "perpetrators", "whose", "country", "is", "not", "``", "China", "''", "?"], "dataset_name": "spider", "guid": 1970}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "sql": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "example": {"db_id": "battle_death", "query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'", "query_toks": ["SELECT", "T1.name", ",", "T1.date", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "WHERE", "T2.name", "=", "'Lettice", "'", "INTERSECT", "SELECT", "T1.name", ",", "T1.date", "FROM", "battle", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.id", "=", "T2.lost_in_battle", "WHERE", "T2.name", "=", "'HMS", "Atalanta", "'"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "where", "t2", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", ",", "t1", ".", "date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "lost_in_battle", "where", "t2", ".", "name", "=", "value"], "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "question_toks": ["List", "the", "name", "and", "date", "the", "battle", "that", "has", "lost", "the", "ship", "named", "'Lettice", "'", "and", "the", "ship", "named", "'HMS", "Atalanta", "'"], "dataset_name": "spider", "guid": 1971}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines, sorted in alphabetical order?", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "ORDER", "BY", "Name"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "order", "by", "name"], "question": "What are the names of wines, sorted in alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "wines", ",", "sorted", "in", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1972}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | List the number of people injured by perpetrators in ascending order.", "sql": "SELECT Injured FROM perpetrator ORDER BY Injured ASC", "example": {"db_id": "perpetrator", "query": "SELECT Injured FROM perpetrator ORDER BY Injured ASC", "query_toks": ["SELECT", "Injured", "FROM", "perpetrator", "ORDER", "BY", "Injured", "ASC"], "query_toks_no_value": ["select", "injured", "from", "perpetrator", "order", "by", "injured", "asc"], "question": "List the number of people injured by perpetrators in ascending order.", "question_toks": ["List", "the", "number", "of", "people", "injured", "by", "perpetrators", "in", "ascending", "order", "."], "dataset_name": "spider", "guid": 1973}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Return the prices of wines produced before 2010.", "sql": "SELECT Price FROM WINE WHERE YEAR  <  2010", "example": {"db_id": "wine_1", "query": "SELECT Price FROM WINE WHERE YEAR  <  2010", "query_toks": ["SELECT", "Price", "FROM", "WINE", "WHERE", "YEAR", "<", "2010"], "query_toks_no_value": ["select", "price", "from", "wine", "where", "year", "<", "value"], "question": "Return the prices of wines produced before 2010.", "question_toks": ["Return", "the", "prices", "of", "wines", "produced", "before", "2010", "."], "dataset_name": "spider", "guid": 1974}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the average prices of wines for each each?", "sql": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR", "example": {"db_id": "wine_1", "query": "SELECT avg(Price) ,  YEAR FROM WINE GROUP BY YEAR", "query_toks": ["SELECT", "avg", "(", "Price", ")", ",", "YEAR", "FROM", "WINE", "GROUP", "BY", "YEAR"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "year", "from", "wine", "group", "by", "year"], "question": "What is the average prices of wines for each each?", "question_toks": ["What", "is", "the", "average", "prices", "of", "wines", "for", "each", "each", "?"], "dataset_name": "spider", "guid": 1975}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.", "sql": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20", "example": {"db_id": "perpetrator", "query": "SELECT Country FROM perpetrator WHERE Injured  >  50 INTERSECT SELECT Country FROM perpetrator WHERE Injured  <  20", "query_toks": ["SELECT", "Country", "FROM", "perpetrator", "WHERE", "Injured", ">", "50", "INTERSECT", "SELECT", "Country", "FROM", "perpetrator", "WHERE", "Injured", "<", "20"], "query_toks_no_value": ["select", "country", "from", "perpetrator", "where", "injured", ">", "value", "intersect", "select", "country", "from", "perpetrator", "where", "injured", "<", "value"], "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.", "question_toks": ["Show", "the", "countries", "that", "have", "both", "perpetrators", "with", "injures", "more", "than", "50", "and", "perpetrators", "with", "injures", "smaller", "than", "20", "."], "dataset_name": "spider", "guid": 1976}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the first names and last names of teachers in alphabetical order of last name.", "sql": "SELECT first_name ,  last_name FROM Teachers ORDER BY last_name", "example": {"db_id": "behavior_monitoring", "query": "SELECT first_name ,  last_name FROM Teachers ORDER BY last_name", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "Teachers", "ORDER", "BY", "last_name"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "teachers", "order", "by", "last_name"], "question": "Find the first names and last names of teachers in alphabetical order of last name.", "question_toks": ["Find", "the", "first", "names", "and", "last", "names", "of", "teachers", "in", "alphabetical", "order", "of", "last", "name", "."], "dataset_name": "spider", "guid": 1977}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.", "sql": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'", "example": {"db_id": "game_injury", "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'", "query_toks": ["SELECT", "T2.name", "FROM", "game", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.id", "JOIN", "injury_accident", "AS", "T3", "ON", "T1.id", "=", "T3.game_id", "WHERE", "T3.player", "=", "'Walter", "Samuel", "'", "INTERSECT", "SELECT", "T2.name", "FROM", "game", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.id", "JOIN", "injury_accident", "AS", "T3", "ON", "T1.id", "=", "T3.game_id", "WHERE", "T3.player", "=", "'Thiago", "Motta", "'"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "game", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "id", "join", "injury_accident", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "game_id", "where", "t3", ".", "player", "=", "value", "intersect", "select", "t2", ".", "name", "from", "game", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "id", "join", "injury_accident", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "game_id", "where", "t3", ".", "player", "=", "value"], "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.", "question_toks": ["List", "the", "name", "of", "the", "stadium", "where", "both", "the", "player", "'Walter", "Samuel", "'", "and", "the", "player", "'Thiago", "Motta", "'", "got", "injured", "."], "dataset_name": "spider", "guid": 1978}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the code and description of the least frequent detention type ?", "sql": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.detention_type_code ,  T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code  =  T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.detention_type_code", ",", "T2.detention_type_description", "FROM", "Detention", "AS", "T1", "JOIN", "Ref_Detention_Type", "AS", "T2", "ON", "T1.detention_type_code", "=", "T2.detention_type_code", "GROUP", "BY", "T1.detention_type_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "detention_type_code", ",", "t2", ".", "detention_type_description", "from", "detention", "as", "t1", "join", "ref_detention_type", "as", "t2", "on", "t1", ".", "detention_type_code", "=", "t2", ".", "detention_type_code", "group", "by", "t1", ".", "detention_type_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What are the code and description of the least frequent detention type ?", "question_toks": ["What", "are", "the", "code", "and", "description", "of", "the", "least", "frequent", "detention", "type", "?"], "dataset_name": "spider", "guid": 1979}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What is the id, name and nationality of the architect who built most mills?", "sql": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "architecture", "query": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", ",", "T1.nationality", "FROM", "architect", "AS", "T1", "JOIN", "mill", "AS", "T2", "ON", "T1.id", "=", "T2.architect_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", ",", "t1", ".", "nationality", "from", "architect", "as", "t1", "join", "mill", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "architect_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id, name and nationality of the architect who built most mills?", "question_toks": ["What", "is", "the", "id", ",", "name", "and", "nationality", "of", "the", "architect", "who", "built", "most", "mills", "?"], "dataset_name": "spider", "guid": 1980}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the winery at which the wine with the highest score was made?", "sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "query_toks": ["SELECT", "Winery", "FROM", "WINE", "ORDER", "BY", "SCORE", "LIMIT", "1"], "query_toks_no_value": ["select", "winery", "from", "wine", "order", "by", "score", "limit", "value"], "question": "What is the winery at which the wine with the highest score was made?", "question_toks": ["What", "is", "the", "winery", "at", "which", "the", "wine", "with", "the", "highest", "score", "was", "made", "?"], "dataset_name": "spider", "guid": 1981}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the crime rate of counties with a city having white percentage more than 90.", "sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90", "example": {"db_id": "county_public_safety", "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90", "query_toks": ["SELECT", "T2.Crime_rate", "FROM", "city", "AS", "T1", "JOIN", "county_public_safety", "AS", "T2", "ON", "T1.County_ID", "=", "T2.County_ID", "WHERE", "T1.White", ">", "90"], "query_toks_no_value": ["select", "t2", ".", "crime_rate", "from", "city", "as", "t1", "join", "county_public_safety", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "county_id", "where", "t1", ".", "white", ">", "value"], "question": "Show the crime rate of counties with a city having white percentage more than 90.", "question_toks": ["Show", "the", "crime", "rate", "of", "counties", "with", "a", "city", "having", "white", "percentage", "more", "than", "90", "."], "dataset_name": "spider", "guid": 1982}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show names of technicians in ascending order of quality rank of the machine they are assigned.", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "example": {"db_id": "machine_repair", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID ORDER BY T2.quality_rank", "query_toks": ["SELECT", "T3.Name", "FROM", "repair_assignment", "AS", "T1", "JOIN", "machine", "AS", "T2", "ON", "T1.machine_id", "=", "T2.machine_id", "JOIN", "technician", "AS", "T3", "ON", "T1.technician_ID", "=", "T3.technician_ID", "ORDER", "BY", "T2.quality_rank"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "repair_assignment", "as", "t1", "join", "machine", "as", "t2", "on", "t1", ".", "machine_id", "=", "t2", ".", "machine_id", "join", "technician", "as", "t3", "on", "t1", ".", "technician_id", "=", "t3", ".", "technician_id", "order", "by", "t2", ".", "quality_rank"], "question": "Show names of technicians in ascending order of quality rank of the machine they are assigned.", "question_toks": ["Show", "names", "of", "technicians", "in", "ascending", "order", "of", "quality", "rank", "of", "the", "machine", "they", "are", "assigned", "."], "dataset_name": "spider", "guid": 1983}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Show the status shared by cities with population bigger than 1500 and smaller than 500.", "sql": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "example": {"db_id": "farm", "query": "SELECT Status FROM city WHERE Population  >  1500 INTERSECT SELECT Status FROM city WHERE Population  <  500", "query_toks": ["SELECT", "Status", "FROM", "city", "WHERE", "Population", ">", "1500", "INTERSECT", "SELECT", "Status", "FROM", "city", "WHERE", "Population", "<", "500"], "query_toks_no_value": ["select", "status", "from", "city", "where", "population", ">", "value", "intersect", "select", "status", "from", "city", "where", "population", "<", "value"], "question": "Show the status shared by cities with population bigger than 1500 and smaller than 500.", "question_toks": ["Show", "the", "status", "shared", "by", "cities", "with", "population", "bigger", "than", "1500", "and", "smaller", "than", "500", "."], "dataset_name": "spider", "guid": 1984}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.", "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country", "example": {"db_id": "perpetrator", "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country", "query_toks": ["SELECT", "Country", ",", "COUNT", "(", "*", ")", "FROM", "perpetrator", "GROUP", "BY", "Country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "perpetrator", "group", "by", "country"], "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.", "question_toks": ["What", "are", "the", "countries", "of", "perpetrators", "?", "Show", "each", "country", "and", "the", "corresponding", "number", "of", "perpetrators", "there", "."], "dataset_name": "spider", "guid": 1985}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the official names of cities, ordered descending by population?", "sql": "SELECT Official_Name FROM city ORDER BY Population DESC", "example": {"db_id": "farm", "query": "SELECT Official_Name FROM city ORDER BY Population DESC", "query_toks": ["SELECT", "Official_Name", "FROM", "city", "ORDER", "BY", "Population", "DESC"], "query_toks_no_value": ["select", "official_name", "from", "city", "order", "by", "population", "desc"], "question": "What are the official names of cities, ordered descending by population?", "question_toks": ["What", "are", "the", "official", "names", "of", "cities", ",", "ordered", "descending", "by", "population", "?"], "dataset_name": "spider", "guid": 1986}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?", "sql": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80", "example": {"db_id": "architecture", "query": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "mill", "AS", "T1", "JOIN", "architect", "AS", "t2", "ON", "T1.architect_id", "=", "T2.id", "JOIN", "bridge", "AS", "T3", "ON", "T3.architect_id", "=", "T2.id", "WHERE", "T3.length_meters", ">", "80"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "mill", "as", "t1", "join", "architect", "as", "t2", "on", "t1", ".", "architect_id", "=", "t2", ".", "id", "join", "bridge", "as", "t3", "on", "t3", ".", "architect_id", "=", "t2", ".", "id", "where", "t3", ".", "length_meters", ">", "value"], "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?", "question_toks": ["What", "are", "the", "distinct", "name", "of", "the", "mills", "built", "by", "the", "architects", "who", "have", "also", "built", "a", "bridge", "longer", "than", "80", "meters", "?"], "dataset_name": "spider", "guid": 1987}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Return the different statuses of cities, ascending by frequency.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "example": {"db_id": "farm", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC", "query_toks": ["SELECT", "Status", "FROM", "city", "GROUP", "BY", "Status", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "status", "from", "city", "group", "by", "status", "order", "by", "count", "(", "*", ")", "asc"], "question": "Return the different statuses of cities, ascending by frequency.", "question_toks": ["Return", "the", "different", "statuses", "of", "cities", ",", "ascending", "by", "frequency", "."], "dataset_name": "spider", "guid": 1988}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | List all cities of addresses in alphabetical order.", "sql": "SELECT city FROM Addresses ORDER BY city", "example": {"db_id": "behavior_monitoring", "query": "SELECT city FROM Addresses ORDER BY city", "query_toks": ["SELECT", "city", "FROM", "Addresses", "ORDER", "BY", "city"], "query_toks_no_value": ["select", "city", "from", "addresses", "order", "by", "city"], "question": "List all cities of addresses in alphabetical order.", "question_toks": ["List", "all", "cities", "of", "addresses", "in", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 1989}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of the technicians by ascending order of age?", "sql": "SELECT Name FROM technician ORDER BY Age ASC", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician ORDER BY Age ASC", "query_toks": ["SELECT", "Name", "FROM", "technician", "ORDER", "BY", "Age", "ASC"], "query_toks_no_value": ["select", "name", "from", "technician", "order", "by", "age", "asc"], "question": "What are the names of the technicians by ascending order of age?", "question_toks": ["What", "are", "the", "names", "of", "the", "technicians", "by", "ascending", "order", "of", "age", "?"], "dataset_name": "spider", "guid": 1990}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.", "sql": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC", "example": {"db_id": "game_injury", "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC", "query_toks": ["SELECT", "T1.date", ",", "T2.player", "FROM", "game", "AS", "T1", "JOIN", "injury_accident", "AS", "T2", "ON", "T1.id", "=", "T2.game_id", "ORDER", "BY", "T1.season", "DESC"], "query_toks_no_value": ["select", "t1", ".", "date", ",", "t2", ".", "player", "from", "game", "as", "t1", "join", "injury_accident", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "game_id", "order", "by", "t1", ".", "season", "desc"], "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.", "question_toks": ["For", "each", "injury", "accident", ",", "find", "the", "date", "of", "the", "game", "and", "the", "name", "of", "the", "injured", "player", "in", "the", "game", ",", "and", "sort", "the", "results", "in", "descending", "order", "of", "game", "season", "."], "dataset_name": "spider", "guid": 1991}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | List the names of people that are not perpetrators.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)", "example": {"db_id": "perpetrator", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM perpetrator)", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_ID", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "perpetrator", ")"], "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "perpetrator", ")"], "question": "List the names of people that are not perpetrators.", "question_toks": ["List", "the", "names", "of", "people", "that", "are", "not", "perpetrators", "."], "dataset_name": "spider", "guid": 1992}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | How many distinct students have been in detention?", "sql": "SELECT count(DISTINCT student_id) FROM Students_in_Detention", "example": {"db_id": "behavior_monitoring", "query": "SELECT count(DISTINCT student_id) FROM Students_in_Detention", "query_toks": ["SELECT", "count", "(", "DISTINCT", "student_id", ")", "FROM", "Students_in_Detention"], "query_toks_no_value": ["select", "count", "(", "distinct", "student_id", ")", "from", "students_in_detention"], "question": "How many distinct students have been in detention?", "question_toks": ["How", "many", "distinct", "students", "have", "been", "in", "detention", "?"], "dataset_name": "spider", "guid": 1993}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which skill is used in fixing the most number of faults? List the skill id and description.", "sql": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.skill_id", ",", "T1.skill_description", "FROM", "Skills", "AS", "T1", "JOIN", "Skills_Required_To_Fix", "AS", "T2", "ON", "T1.skill_id", "=", "T2.skill_id", "GROUP", "BY", "T1.skill_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "skill_id", ",", "t1", ".", "skill_description", "from", "skills", "as", "t1", "join", "skills_required_to_fix", "as", "t2", "on", "t1", ".", "skill_id", "=", "t2", ".", "skill_id", "group", "by", "t1", ".", "skill_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which skill is used in fixing the most number of faults? List the skill id and description.", "question_toks": ["Which", "skill", "is", "used", "in", "fixing", "the", "most", "number", "of", "faults", "?", "List", "the", "skill", "id", "and", "description", "."], "dataset_name": "spider", "guid": 1994}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the names for all females from Canada having a wedding in year 2016.", "sql": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'", "example": {"db_id": "wedding", "query": "SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id  =  T2.people_id WHERE T1.year  =  2016 AND T2.is_male  =  'F' AND T2.country  =  'Canada'", "query_toks": ["SELECT", "T2.name", "FROM", "wedding", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.female_id", "=", "T2.people_id", "WHERE", "T1.year", "=", "2016", "AND", "T2.is_male", "=", "'F", "'", "AND", "T2.country", "=", "'Canada", "'"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "wedding", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "female_id", "=", "t2", ".", "people_id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "is_male", "=", "value", "and", "t2", ".", "country", "=", "value"], "question": "Show the names for all females from Canada having a wedding in year 2016.", "question_toks": ["Show", "the", "names", "for", "all", "females", "from", "Canada", "having", "a", "wedding", "in", "year", "2016", "."], "dataset_name": "spider", "guid": 1995}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What is the country that has the most perpetrators?", "sql": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "perpetrator", "query": "SELECT Country ,  COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Country", ",", "COUNT", "(", "*", ")", "FROM", "perpetrator", "GROUP", "BY", "Country", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "perpetrator", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the country that has the most perpetrators?", "question_toks": ["What", "is", "the", "country", "that", "has", "the", "most", "perpetrators", "?"], "dataset_name": "spider", "guid": 1996}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the color of the grape whose wine products has the highest average price?", "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Color", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "GROUP", "BY", "T2.Grape", "ORDER", "BY", "AVG", "(", "Price", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "color", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "group", "by", "t2", ".", "grape", "order", "by", "avg", "(", "price", ")", "desc", "limit", "value"], "question": "What is the color of the grape whose wine products has the highest average price?", "question_toks": ["What", "is", "the", "color", "of", "the", "grape", "whose", "wine", "products", "has", "the", "highest", "average", "price", "?"], "dataset_name": "spider", "guid": 1997}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which company started the earliest the maintenance contract? Show the company name.", "sql": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1", "query_toks": ["SELECT", "T1.company_name", "FROM", "Third_Party_Companies", "AS", "T1", "JOIN", "Maintenance_Contracts", "AS", "T2", "ON", "T1.company_id", "=", "T2.maintenance_contract_company_id", "ORDER", "BY", "T2.contract_start_date", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "company_name", "from", "third_party_companies", "as", "t1", "join", "maintenance_contracts", "as", "t2", "on", "t1", ".", "company_id", "=", "t2", ".", "maintenance_contract_company_id", "order", "by", "t2", ".", "contract_start_date", "asc", "limit", "value"], "question": "Which company started the earliest the maintenance contract? Show the company name.", "question_toks": ["Which", "company", "started", "the", "earliest", "the", "maintenance", "contract", "?", "Show", "the", "company", "name", "."], "dataset_name": "spider", "guid": 1998}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | Which stadium name contains the substring \"Bank\"?", "sql": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"", "example": {"db_id": "game_injury", "query": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"", "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "name", "LIKE", "``", "%", "Bank", "%", "''"], "query_toks_no_value": ["select", "name", "from", "stadium", "where", "name", "like", "value"], "question": "Which stadium name contains the substring \"Bank\"?", "question_toks": ["Which", "stadium", "name", "contains", "the", "substring", "``", "Bank", "''", "?"], "dataset_name": "spider", "guid": 1999}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the maximum price and score of wines for each year?", "sql": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR", "example": {"db_id": "wine_1", "query": "SELECT max(Price) ,  max(Score) ,  YEAR FROM WINE GROUP BY YEAR", "query_toks": ["SELECT", "max", "(", "Price", ")", ",", "max", "(", "Score", ")", ",", "YEAR", "FROM", "WINE", "GROUP", "BY", "YEAR"], "query_toks_no_value": ["select", "max", "(", "price", ")", ",", "max", "(", "score", ")", ",", "year", "from", "wine", "group", "by", "year"], "question": "What are the maximum price and score of wines for each year?", "question_toks": ["What", "are", "the", "maximum", "price", "and", "score", "of", "wines", "for", "each", "year", "?"], "dataset_name": "spider", "guid": 2000}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the names and scores of all wines.", "sql": "SELECT Name ,  Score FROM WINE", "example": {"db_id": "wine_1", "query": "SELECT Name ,  Score FROM WINE", "query_toks": ["SELECT", "Name", ",", "Score", "FROM", "WINE"], "query_toks_no_value": ["select", "name", ",", "score", "from", "wine"], "question": "List the names and scores of all wines.", "question_toks": ["List", "the", "names", "and", "scores", "of", "all", "wines", "."], "dataset_name": "spider", "guid": 2001}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of the technicians  and how many machines are they assigned to repair?", "sql": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "example": {"db_id": "machine_repair", "query": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name", "query_toks": ["SELECT", "T2.Name", ",", "COUNT", "(", "*", ")", "FROM", "repair_assignment", "AS", "T1", "JOIN", "technician", "AS", "T2", "ON", "T1.technician_ID", "=", "T2.technician_ID", "GROUP", "BY", "T2.Name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "repair_assignment", "as", "t1", "join", "technician", "as", "t2", "on", "t1", ".", "technician_id", "=", "t2", ".", "technician_id", "group", "by", "t2", ".", "name"], "question": "What are the names of the technicians  and how many machines are they assigned to repair?", "question_toks": ["What", "are", "the", "names", "of", "the", "technicians", "and", "how", "many", "machines", "are", "they", "assigned", "to", "repair", "?"], "dataset_name": "spider", "guid": 2002}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | How many ships ended up being 'Captured'?", "sql": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "example": {"db_id": "battle_death", "query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ship", "WHERE", "disposition_of_ship", "=", "'Captured", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ship", "where", "disposition_of_ship", "=", "value"], "question": "How many ships ended up being 'Captured'?", "question_toks": ["How", "many", "ships", "ended", "up", "being", "'Captured", "'", "?"], "dataset_name": "spider", "guid": 2003}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | List all information about the assessment notes sorted by date in ascending order.", "sql": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC", "example": {"db_id": "behavior_monitoring", "query": "SELECT * FROM Assessment_Notes ORDER BY date_of_notes ASC", "query_toks": ["SELECT", "*", "FROM", "Assessment_Notes", "ORDER", "BY", "date_of_notes", "ASC"], "query_toks_no_value": ["select", "*", "from", "assessment_notes", "order", "by", "date_of_notes", "asc"], "question": "List all information about the assessment notes sorted by date in ascending order.", "question_toks": ["List", "all", "information", "about", "the", "assessment", "notes", "sorted", "by", "date", "in", "ascending", "order", "."], "dataset_name": "spider", "guid": 2004}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | Show the date of the tallest perpetrator.", "sql": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "example": {"db_id": "perpetrator", "query": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "query_toks": ["SELECT", "T2.Date", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "date", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "height", "desc", "limit", "value"], "question": "Show the date of the tallest perpetrator.", "question_toks": ["Show", "the", "date", "of", "the", "tallest", "perpetrator", "."], "dataset_name": "spider", "guid": 2005}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What is the team with at least 2 technicians?", "sql": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "example": {"db_id": "machine_repair", "query": "SELECT Team FROM technician GROUP BY Team HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Team", "FROM", "technician", "GROUP", "BY", "Team", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "team", "from", "technician", "group", "by", "team", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the team with at least 2 technicians?", "question_toks": ["What", "is", "the", "team", "with", "at", "least", "2", "technicians", "?"], "dataset_name": "spider", "guid": 2006}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | List the names of the city with the top 5 white percentages.", "sql": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM city ORDER BY White DESC LIMIT 5", "query_toks": ["SELECT", "Name", "FROM", "city", "ORDER", "BY", "White", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "name", "from", "city", "order", "by", "white", "desc", "limit", "value"], "question": "List the names of the city with the top 5 white percentages.", "question_toks": ["List", "the", "names", "of", "the", "city", "with", "the", "top", "5", "white", "percentages", "."], "dataset_name": "spider", "guid": 2007}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | How many churches opened before 1850 are there?", "sql": "SELECT count(*) FROM Church WHERE Open_Date  <  1850", "example": {"db_id": "wedding", "query": "SELECT count(*) FROM Church WHERE Open_Date  <  1850", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Church", "WHERE", "Open_Date", "<", "1850"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "church", "where", "open_date", "<", "value"], "question": "How many churches opened before 1850 are there?", "question_toks": ["How", "many", "churches", "opened", "before", "1850", "are", "there", "?"], "dataset_name": "spider", "guid": 2008}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the maximum price and score of wines produced by St. Helena appelation?", "sql": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"", "example": {"db_id": "wine_1", "query": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"", "query_toks": ["SELECT", "max", "(", "Price", ")", ",", "max", "(", "Score", ")", "FROM", "WINE", "WHERE", "Appelation", "=", "``", "St.", "Helena", "''"], "query_toks_no_value": ["select", "max", "(", "price", ")", ",", "max", "(", "score", ")", "from", "wine", "where", "appelation", "=", "value"], "question": "What are the maximum price and score of wines produced by St. Helena appelation?", "question_toks": ["What", "are", "the", "maximum", "price", "and", "score", "of", "wines", "produced", "by", "St.", "Helena", "appelation", "?"], "dataset_name": "spider", "guid": 2009}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the team and starting year of technicians?", "sql": "SELECT Team ,  Starting_Year FROM technician", "example": {"db_id": "machine_repair", "query": "SELECT Team ,  Starting_Year FROM technician", "query_toks": ["SELECT", "Team", ",", "Starting_Year", "FROM", "technician"], "query_toks_no_value": ["select", "team", ",", "starting_year", "from", "technician"], "question": "What are the team and starting year of technicians?", "question_toks": ["What", "are", "the", "team", "and", "starting", "year", "of", "technicians", "?"], "dataset_name": "spider", "guid": 2010}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | List the most common type of Status across cities.", "sql": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "farm", "query": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Status", "FROM", "city", "GROUP", "BY", "Status", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "status", "from", "city", "group", "by", "status", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the most common type of Status across cities.", "question_toks": ["List", "the", "most", "common", "type", "of", "Status", "across", "cities", "."], "dataset_name": "spider", "guid": 2011}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | What are the name and results of the battles when the bulgarian commander is not 'Boril'", "sql": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "example": {"db_id": "battle_death", "query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'", "query_toks": ["SELECT", "name", ",", "RESULT", "FROM", "battle", "WHERE", "bulgarian_commander", "!", "=", "'Boril", "'"], "query_toks_no_value": ["select", "name", ",", "result", "from", "battle", "where", "bulgarian_commander", "!", "=", "value"], "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "question_toks": ["What", "are", "the", "name", "and", "results", "of", "the", "battles", "when", "the", "bulgarian", "commander", "is", "not", "'Boril", "'"], "dataset_name": "spider", "guid": 2012}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the area for the appelation which produced the most wines prior to 2010?", "sql": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Area", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "GROUP", "BY", "T2.Appelation", "HAVING", "T2.year", "<", "2010", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "area", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "group", "by", "t2", ".", "appelation", "having", "t2", ".", "year", "<", "value", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the area for the appelation which produced the most wines prior to 2010?", "question_toks": ["What", "is", "the", "area", "for", "the", "appelation", "which", "produced", "the", "most", "wines", "prior", "to", "2010", "?"], "dataset_name": "spider", "guid": 2013}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the different police forces of counties that are not located in the East?", "sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"", "example": {"db_id": "county_public_safety", "query": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"", "query_toks": ["SELECT", "DISTINCT", "Police_force", "FROM", "county_public_safety", "WHERE", "LOCATION", "!", "=", "``", "East", "''"], "query_toks_no_value": ["select", "distinct", "police_force", "from", "county_public_safety", "where", "location", "!", "=", "value"], "question": "What are the different police forces of counties that are not located in the East?", "question_toks": ["What", "are", "the", "different", "police", "forces", "of", "counties", "that", "are", "not", "located", "in", "the", "East", "?"], "dataset_name": "spider", "guid": 2014}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the county where produces the most number of wines with score higher than 90.", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.County", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T2.Score", ">", "90", "GROUP", "BY", "T1.County", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "county", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t2", ".", "score", ">", "value", "group", "by", "t1", ".", "county", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the county where produces the most number of wines with score higher than 90.", "question_toks": ["Find", "the", "county", "where", "produces", "the", "most", "number", "of", "wines", "with", "score", "higher", "than", "90", "."], "dataset_name": "spider", "guid": 2015}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show names of cities and names of counties they are in.", "sql": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "example": {"db_id": "county_public_safety", "query": "SELECT T1.Name ,  T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Name", "FROM", "city", "AS", "T1", "JOIN", "county_public_safety", "AS", "T2", "ON", "T1.County_ID", "=", "T2.County_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "name", "from", "city", "as", "t1", "join", "county_public_safety", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "county_id"], "question": "Show names of cities and names of counties they are in.", "question_toks": ["Show", "names", "of", "cities", "and", "names", "of", "counties", "they", "are", "in", "."], "dataset_name": "spider", "guid": 2016}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of the technicians that have not been assigned to repair machines?", "sql": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician WHERE technician_id NOT IN (SELECT technician_id FROM repair_assignment)", "query_toks": ["SELECT", "Name", "FROM", "technician", "WHERE", "technician_id", "NOT", "IN", "(", "SELECT", "technician_id", "FROM", "repair_assignment", ")"], "query_toks_no_value": ["select", "name", "from", "technician", "where", "technician_id", "not", "in", "(", "select", "technician_id", "from", "repair_assignment", ")"], "question": "What are the names of the technicians that have not been assigned to repair machines?", "question_toks": ["What", "are", "the", "names", "of", "the", "technicians", "that", "have", "not", "been", "assigned", "to", "repair", "machines", "?"], "dataset_name": "spider", "guid": 2017}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | What are the maximum, minimum and average home games each stadium held?", "sql": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium", "example": {"db_id": "game_injury", "query": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium", "query_toks": ["SELECT", "max", "(", "home_games", ")", ",", "min", "(", "home_games", ")", ",", "avg", "(", "home_games", ")", "FROM", "stadium"], "query_toks_no_value": ["select", "max", "(", "home_games", ")", ",", "min", "(", "home_games", ")", ",", "avg", "(", "home_games", ")", "from", "stadium"], "question": "What are the maximum, minimum and average home games each stadium held?", "question_toks": ["What", "are", "the", "maximum", ",", "minimum", "and", "average", "home", "games", "each", "stadium", "held", "?"], "dataset_name": "spider", "guid": 2018}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the name of cities in the county that has the largest number of police officers.", "sql": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "example": {"db_id": "county_public_safety", "query": "SELECT name FROM city WHERE county_ID  =  (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1)", "query_toks": ["SELECT", "name", "FROM", "city", "WHERE", "county_ID", "=", "(", "SELECT", "county_ID", "FROM", "county_public_safety", "ORDER", "BY", "Police_officers", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "name", "from", "city", "where", "county_id", "=", "(", "select", "county_id", "from", "county_public_safety", "order", "by", "police_officers", "desc", "limit", "value", ")"], "question": "Show the name of cities in the county that has the largest number of police officers.", "question_toks": ["Show", "the", "name", "of", "cities", "in", "the", "county", "that", "has", "the", "largest", "number", "of", "police", "officers", "."], "dataset_name": "spider", "guid": 2019}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of cities that are in counties that have a crime rate below 100?", "sql": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "example": {"db_id": "county_public_safety", "query": "SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate  <  100)", "query_toks": ["SELECT", "name", "FROM", "city", "WHERE", "county_id", "IN", "(", "SELECT", "county_id", "FROM", "county_public_safety", "WHERE", "Crime_rate", "<", "100", ")"], "query_toks_no_value": ["select", "name", "from", "city", "where", "county_id", "in", "(", "select", "county_id", "from", "county_public_safety", "where", "crime_rate", "<", "value", ")"], "question": "What are the names of cities that are in counties that have a crime rate below 100?", "question_toks": ["What", "are", "the", "names", "of", "cities", "that", "are", "in", "counties", "that", "have", "a", "crime", "rate", "below", "100", "?"], "dataset_name": "spider", "guid": 2020}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the countries for appelations with at most 3 wines?", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "example": {"db_id": "wine_1", "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3", "query_toks": ["SELECT", "T1.County", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "GROUP", "BY", "T2.Appelation", "HAVING", "count", "(", "*", ")", "<", "=", "3"], "query_toks_no_value": ["select", "t1", ".", "county", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "group", "by", "t2", ".", "appelation", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "What are the countries for appelations with at most 3 wines?", "question_toks": ["What", "are", "the", "countries", "for", "appelations", "with", "at", "most", "3", "wines", "?"], "dataset_name": "spider", "guid": 2021}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which staff have contacted which engineers? List the staff name and the engineer first name and last name.", "sql": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id", "query_toks": ["SELECT", "T1.staff_name", ",", "T3.first_name", ",", "T3.last_name", "FROM", "Staff", "AS", "T1", "JOIN", "Engineer_Visits", "AS", "T2", "ON", "T1.staff_id", "=", "T2.contact_staff_id", "JOIN", "Maintenance_Engineers", "AS", "T3", "ON", "T2.engineer_id", "=", "T3.engineer_id"], "query_toks_no_value": ["select", "t1", ".", "staff_name", ",", "t3", ".", "first_name", ",", "t3", ".", "last_name", "from", "staff", "as", "t1", "join", "engineer_visits", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "contact_staff_id", "join", "maintenance_engineers", "as", "t3", "on", "t2", ".", "engineer_id", "=", "t3", ".", "engineer_id"], "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.", "question_toks": ["Which", "staff", "have", "contacted", "which", "engineers", "?", "List", "the", "staff", "name", "and", "the", "engineer", "first", "name", "and", "last", "name", "."], "dataset_name": "spider", "guid": 2022}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the top 3 wineries with the greatest number of wines made of white color grapes.", "sql": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "wine_1", "query": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.Winery", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.GRAPE", "=", "T2.GRAPE", "WHERE", "T1.Color", "=", "``", "White", "''", "GROUP", "BY", "T2.Winery", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "winery", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value", "group", "by", "t2", ".", "winery", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the top 3 wineries with the greatest number of wines made of white color grapes.", "question_toks": ["Find", "the", "top", "3", "wineries", "with", "the", "greatest", "number", "of", "wines", "made", "of", "white", "color", "grapes", "."], "dataset_name": "spider", "guid": 2023}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.", "sql": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2", "query_toks": ["SELECT", "T1.asset_id", ",", "T1.asset_details", "FROM", "Assets", "AS", "T1", "JOIN", "Asset_Parts", "AS", "T2", "ON", "T1.asset_id", "=", "T2.asset_id", "GROUP", "BY", "T1.asset_id", "HAVING", "count", "(", "*", ")", "=", "2", "INTERSECT", "SELECT", "T1.asset_id", ",", "T1.asset_details", "FROM", "Assets", "AS", "T1", "JOIN", "Fault_Log", "AS", "T2", "ON", "T1.asset_id", "=", "T2.asset_id", "GROUP", "BY", "T1.asset_id", "HAVING", "count", "(", "*", ")", "<", "2"], "query_toks_no_value": ["select", "t1", ".", "asset_id", ",", "t1", ".", "asset_details", "from", "assets", "as", "t1", "join", "asset_parts", "as", "t2", "on", "t1", ".", "asset_id", "=", "t2", ".", "asset_id", "group", "by", "t1", ".", "asset_id", "having", "count", "(", "*", ")", "=", "value", "intersect", "select", "t1", ".", "asset_id", ",", "t1", ".", "asset_details", "from", "assets", "as", "t1", "join", "fault_log", "as", "t2", "on", "t1", ".", "asset_id", "=", "t2", ".", "asset_id", "group", "by", "t1", ".", "asset_id", "having", "count", "(", "*", ")", "<", "value"], "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.", "question_toks": ["Which", "assets", "have", "2", "parts", "and", "have", "less", "than", "2", "fault", "logs", "?", "List", "the", "asset", "id", "and", "detail", "."], "dataset_name": "spider", "guid": 2024}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of the technicians aged either 36 or 37?", "sql": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "query_toks": ["SELECT", "Name", "FROM", "technician", "WHERE", "Age", "=", "36", "OR", "Age", "=", "37"], "query_toks_no_value": ["select", "name", "from", "technician", "where", "age", "=", "value", "or", "age", "=", "value"], "question": "What are the names of the technicians aged either 36 or 37?", "question_toks": ["What", "are", "the", "names", "of", "the", "technicians", "aged", "either", "36", "or", "37", "?"], "dataset_name": "spider", "guid": 2025}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What is the county that produces the most wines scoring higher than 90?", "sql": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.County", "FROM", "APPELLATIONS", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Appelation", "=", "T2.Appelation", "WHERE", "T2.Score", ">", "90", "GROUP", "BY", "T1.County", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "county", "from", "appellations", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "appelation", "=", "t2", ".", "appelation", "where", "t2", ".", "score", ">", "value", "group", "by", "t1", ".", "county", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the county that produces the most wines scoring higher than 90?", "question_toks": ["What", "is", "the", "county", "that", "produces", "the", "most", "wines", "scoring", "higher", "than", "90", "?"], "dataset_name": "spider", "guid": 2026}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | How many games has each stadium held?", "sql": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id", "example": {"db_id": "game_injury", "query": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id", "query_toks": ["SELECT", "T1.id", ",", "count", "(", "*", ")", "FROM", "stadium", "AS", "T1", "JOIN", "game", "AS", "T2", "ON", "T1.id", "=", "T2.stadium_id", "GROUP", "BY", "T1.id"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "count", "(", "*", ")", "from", "stadium", "as", "t1", "join", "game", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "group", "by", "t1", ".", "id"], "question": "How many games has each stadium held?", "question_toks": ["How", "many", "games", "has", "each", "stadium", "held", "?"], "dataset_name": "spider", "guid": 2027}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which fault log included the most number of faulty parts? List the fault log id, description and record time.", "sql": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.fault_log_entry_id", ",", "T1.fault_description", ",", "T1.fault_log_entry_datetime", "FROM", "Fault_Log", "AS", "T1", "JOIN", "Fault_Log_Parts", "AS", "T2", "ON", "T1.fault_log_entry_id", "=", "T2.fault_log_entry_id", "GROUP", "BY", "T1.fault_log_entry_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "fault_log_entry_id", ",", "t1", ".", "fault_description", ",", "t1", ".", "fault_log_entry_datetime", "from", "fault_log", "as", "t1", "join", "fault_log_parts", "as", "t2", "on", "t1", ".", "fault_log_entry_id", "=", "t2", ".", "fault_log_entry_id", "group", "by", "t1", ".", "fault_log_entry_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.", "question_toks": ["Which", "fault", "log", "included", "the", "most", "number", "of", "faulty", "parts", "?", "List", "the", "fault", "log", "id", ",", "description", "and", "record", "time", "."], "dataset_name": "spider", "guid": 2028}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show all church names except for those that had a wedding in year 2015.", "sql": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015", "example": {"db_id": "wedding", "query": "SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id  =  T2.church_id WHERE T2.year  =  2015", "query_toks": ["SELECT", "name", "FROM", "church", "EXCEPT", "SELECT", "T1.name", "FROM", "church", "AS", "T1", "JOIN", "wedding", "AS", "T2", "ON", "T1.church_id", "=", "T2.church_id", "WHERE", "T2.year", "=", "2015"], "query_toks_no_value": ["select", "name", "from", "church", "except", "select", "t1", ".", "name", "from", "church", "as", "t1", "join", "wedding", "as", "t2", "on", "t1", ".", "church_id", "=", "t2", ".", "church_id", "where", "t2", ".", "year", "=", "value"], "question": "Show all church names except for those that had a wedding in year 2015.", "question_toks": ["Show", "all", "church", "names", "except", "for", "those", "that", "had", "a", "wedding", "in", "year", "2015", "."], "dataset_name": "spider", "guid": 2029}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines whose production year are before the year of all wines by Brander winery?", "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "YEAR", "<", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "WINE", "WHERE", "Winery", "=", "``", "Brander", "''", ")"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "year", "<", "(", "select", "min", "(", "year", ")", "from", "wine", "where", "winery", "=", "value", ")"], "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?", "question_toks": ["What", "are", "the", "names", "of", "wines", "whose", "production", "year", "are", "before", "the", "year", "of", "all", "wines", "by", "Brander", "winery", "?"], "dataset_name": "spider", "guid": 2030}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the church names for the weddings of all people older than 30.", "sql": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30", "example": {"db_id": "wedding", "query": "SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id JOIN church AS T4 ON T4.church_id  =  T1.church_id WHERE T2.age  >  30 OR T3.age  >  30", "query_toks": ["SELECT", "T4.name", "FROM", "wedding", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.male_id", "=", "T2.people_id", "JOIN", "people", "AS", "T3", "ON", "T1.female_id", "=", "T3.people_id", "JOIN", "church", "AS", "T4", "ON", "T4.church_id", "=", "T1.church_id", "WHERE", "T2.age", ">", "30", "OR", "T3.age", ">", "30"], "query_toks_no_value": ["select", "t4", ".", "name", "from", "wedding", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "male_id", "=", "t2", ".", "people_id", "join", "people", "as", "t3", "on", "t1", ".", "female_id", "=", "t3", ".", "people_id", "join", "church", "as", "t4", "on", "t4", ".", "church_id", "=", "t1", ".", "church_id", "where", "t2", ".", "age", ">", "value", "or", "t3", ".", "age", ">", "value"], "question": "Show the church names for the weddings of all people older than 30.", "question_toks": ["Show", "the", "church", "names", "for", "the", "weddings", "of", "all", "people", "older", "than", "30", "."], "dataset_name": "spider", "guid": 2031}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the appelations that produce wines after the year of 2008 but not in Central Coast area.", "sql": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"", "example": {"db_id": "wine_1", "query": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"", "query_toks": ["SELECT", "Appelation", "FROM", "WINE", "WHERE", "YEAR", ">", "2008", "EXCEPT", "SELECT", "Appelation", "FROM", "APPELLATIONS", "WHERE", "Area", "=", "``", "Central", "Coast", "''"], "query_toks_no_value": ["select", "appelation", "from", "wine", "where", "year", ">", "value", "except", "select", "appelation", "from", "appellations", "where", "area", "=", "value"], "question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.", "question_toks": ["Find", "the", "appelations", "that", "produce", "wines", "after", "the", "year", "of", "2008", "but", "not", "in", "Central", "Coast", "area", "."], "dataset_name": "spider", "guid": 2032}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the minimum, maximum, and average age for all people.", "sql": "SELECT min(age) ,  max(age) ,  avg(age) FROM people", "example": {"db_id": "wedding", "query": "SELECT min(age) ,  max(age) ,  avg(age) FROM people", "query_toks": ["SELECT", "min", "(", "age", ")", ",", "max", "(", "age", ")", ",", "avg", "(", "age", ")", "FROM", "people"], "query_toks_no_value": ["select", "min", "(", "age", ")", ",", "max", "(", "age", ")", ",", "avg", "(", "age", ")", "from", "people"], "question": "Show the minimum, maximum, and average age for all people.", "question_toks": ["Show", "the", "minimum", ",", "maximum", ",", "and", "average", "age", "for", "all", "people", "."], "dataset_name": "spider", "guid": 2033}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What is the email of the student with first name \"Emma\" and last name \"Rohan\"?", "sql": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT email_address FROM Students WHERE first_name  =  \"Emma\" AND last_name  =  \"Rohan\"", "query_toks": ["SELECT", "email_address", "FROM", "Students", "WHERE", "first_name", "=", "``", "Emma", "''", "AND", "last_name", "=", "``", "Rohan", "''"], "query_toks_no_value": ["select", "email_address", "from", "students", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?", "question_toks": ["What", "is", "the", "email", "of", "the", "student", "with", "first", "name", "``", "Emma", "''", "and", "last", "name", "``", "Rohan", "''", "?"], "dataset_name": "spider", "guid": 2034}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | List the distinct police forces of counties whose location is not on east side.", "sql": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"", "example": {"db_id": "county_public_safety", "query": "SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION != \"East\"", "query_toks": ["SELECT", "DISTINCT", "Police_force", "FROM", "county_public_safety", "WHERE", "LOCATION", "!", "=", "``", "East", "''"], "query_toks_no_value": ["select", "distinct", "police_force", "from", "county_public_safety", "where", "location", "!", "=", "value"], "question": "List the distinct police forces of counties whose location is not on east side.", "question_toks": ["List", "the", "distinct", "police", "forces", "of", "counties", "whose", "location", "is", "not", "on", "east", "side", "."], "dataset_name": "spider", "guid": 2035}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Return the themes of farm competitions, sorted by year ascending.", "sql": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "example": {"db_id": "farm", "query": "SELECT Theme FROM farm_competition ORDER BY YEAR ASC", "query_toks": ["SELECT", "Theme", "FROM", "farm_competition", "ORDER", "BY", "YEAR", "ASC"], "query_toks_no_value": ["select", "theme", "from", "farm_competition", "order", "by", "year", "asc"], "question": "Return the themes of farm competitions, sorted by year ascending.", "question_toks": ["Return", "the", "themes", "of", "farm", "competitions", ",", "sorted", "by", "year", "ascending", "."], "dataset_name": "spider", "guid": 2036}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Which winery is the wine that has the highest score from?", "sql": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1", "query_toks": ["SELECT", "Winery", "FROM", "WINE", "ORDER", "BY", "SCORE", "LIMIT", "1"], "query_toks_no_value": ["select", "winery", "from", "wine", "order", "by", "score", "limit", "value"], "question": "Which winery is the wine that has the highest score from?", "question_toks": ["Which", "winery", "is", "the", "wine", "that", "has", "the", "highest", "score", "from", "?"], "dataset_name": "spider", "guid": 2037}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the id and first name of the student whose addresses have the highest average monthly rental?", "sql": "SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.student_id ,  T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "query_toks": ["SELECT", "T1.student_id", ",", "T2.first_name", "FROM", "Student_Addresses", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "AVG", "(", "monthly_rental", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "student_id", ",", "t2", ".", "first_name", "from", "student_addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "group", "by", "t1", ".", "student_id", "order", "by", "avg", "(", "monthly_rental", ")", "desc", "limit", "value"], "question": "What are the id and first name of the student whose addresses have the highest average monthly rental?", "question_toks": ["What", "are", "the", "id", "and", "first", "name", "of", "the", "student", "whose", "addresses", "have", "the", "highest", "average", "monthly", "rental", "?"], "dataset_name": "spider", "guid": 2038}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Show the years and the official names of the host cities of competitions.", "sql": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID", "example": {"db_id": "farm", "query": "SELECT T2.Year ,  T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID", "query_toks": ["SELECT", "T2.Year", ",", "T1.Official_Name", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID"], "query_toks_no_value": ["select", "t2", ".", "year", ",", "t1", ".", "official_name", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id"], "question": "Show the years and the official names of the host cities of competitions.", "question_toks": ["Show", "the", "years", "and", "the", "official", "names", "of", "the", "host", "cities", "of", "competitions", "."], "dataset_name": "spider", "guid": 2039}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines that are more expensive then all wines made in the year 2006?", "sql": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE Price  >  (SELECT max(Price) FROM WINE WHERE YEAR  =  2006)", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "Price", ">", "(", "SELECT", "max", "(", "Price", ")", "FROM", "WINE", "WHERE", "YEAR", "=", "2006", ")"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "price", ">", "(", "select", "max", "(", "price", ")", "from", "wine", "where", "year", "=", "value", ")"], "question": "What are the names of wines that are more expensive then all wines made in the year 2006?", "question_toks": ["What", "are", "the", "names", "of", "wines", "that", "are", "more", "expensive", "then", "all", "wines", "made", "in", "the", "year", "2006", "?"], "dataset_name": "spider", "guid": 2040}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the names of all distinct wines in alphabetical order.", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE ORDER BY Name", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "ORDER", "BY", "Name"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "order", "by", "name"], "question": "List the names of all distinct wines in alphabetical order.", "question_toks": ["List", "the", "names", "of", "all", "distinct", "wines", "in", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 2041}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the grapes, wineries and years for wines with price higher than 100, sorted by year?", "sql": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "example": {"db_id": "wine_1", "query": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR", "query_toks": ["SELECT", "Grape", ",", "Winery", ",", "YEAR", "FROM", "WINE", "WHERE", "Price", ">", "100", "ORDER", "BY", "YEAR"], "query_toks_no_value": ["select", "grape", ",", "winery", ",", "year", "from", "wine", "where", "price", ">", "value", "order", "by", "year"], "question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?", "question_toks": ["What", "are", "the", "grapes", ",", "wineries", "and", "years", "for", "wines", "with", "price", "higher", "than", "100", ",", "sorted", "by", "year", "?"], "dataset_name": "spider", "guid": 2042}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show the names of people and the number of times they have been on the affirmative side of debates.", "sql": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name", "example": {"db_id": "debate", "query": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name", "query_toks": ["SELECT", "T2.Name", ",", "COUNT", "(", "*", ")", "FROM", "debate_people", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Affirmative", "=", "T2.People_ID", "GROUP", "BY", "T2.Name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "debate_people", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "affirmative", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "name"], "question": "Show the names of people and the number of times they have been on the affirmative side of debates.", "question_toks": ["Show", "the", "names", "of", "people", "and", "the", "number", "of", "times", "they", "have", "been", "on", "the", "affirmative", "side", "of", "debates", "."], "dataset_name": "spider", "guid": 2043}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the opening year in whcih at least two churches opened.", "sql": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2", "example": {"db_id": "wedding", "query": "SELECT open_date FROM church GROUP BY open_date HAVING count(*)  >=  2", "query_toks": ["SELECT", "open_date", "FROM", "church", "GROUP", "BY", "open_date", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "open_date", "from", "church", "group", "by", "open_date", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the opening year in whcih at least two churches opened.", "question_toks": ["Show", "the", "opening", "year", "in", "whcih", "at", "least", "two", "churches", "opened", "."], "dataset_name": "spider", "guid": 2044}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which part has the least chargeable amount? List the part id and amount.", "sql": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1", "query_toks": ["SELECT", "part_id", ",", "chargeable_amount", "FROM", "Parts", "ORDER", "BY", "chargeable_amount", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "part_id", ",", "chargeable_amount", "from", "parts", "order", "by", "chargeable_amount", "asc", "limit", "value"], "question": "Which part has the least chargeable amount? List the part id and amount.", "question_toks": ["Which", "part", "has", "the", "least", "chargeable", "amount", "?", "List", "the", "part", "id", "and", "amount", "."], "dataset_name": "spider", "guid": 2045}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | What are the id and name of the stadium where the most injury accidents happened?", "sql": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "game_injury", "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "stadium", "AS", "T1", "JOIN", "game", "AS", "T2", "ON", "T1.id", "=", "T2.stadium_id", "JOIN", "injury_accident", "AS", "T3", "ON", "T2.id", "=", "T3.game_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "stadium", "as", "t1", "join", "game", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "join", "injury_accident", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "game_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the id and name of the stadium where the most injury accidents happened?", "question_toks": ["What", "are", "the", "id", "and", "name", "of", "the", "stadium", "where", "the", "most", "injury", "accidents", "happened", "?"], "dataset_name": "spider", "guid": 2046}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Return the hosts of competitions for which the theme is not Aliens?", "sql": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "example": {"db_id": "farm", "query": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'", "query_toks": ["SELECT", "Hosts", "FROM", "farm_competition", "WHERE", "Theme", "!", "=", "'Aliens", "'"], "query_toks_no_value": ["select", "hosts", "from", "farm_competition", "where", "theme", "!", "=", "value"], "question": "Return the hosts of competitions for which the theme is not Aliens?", "question_toks": ["Return", "the", "hosts", "of", "competitions", "for", "which", "the", "theme", "is", "not", "Aliens", "?"], "dataset_name": "spider", "guid": 2047}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | How many debates are there?", "sql": "SELECT count(*) FROM debate", "example": {"db_id": "debate", "query": "SELECT count(*) FROM debate", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "debate"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "debate"], "question": "How many debates are there?", "question_toks": ["How", "many", "debates", "are", "there", "?"], "dataset_name": "spider", "guid": 2048}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the average price and case of wines made from Zinfandel grapes in the year 2009.", "sql": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"", "example": {"db_id": "wine_1", "query": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"", "query_toks": ["SELECT", "AVG", "(", "Price", ")", ",", "AVG", "(", "Cases", ")", "FROM", "WINE", "WHERE", "YEAR", "=", "2009", "AND", "Grape", "=", "``", "Zinfandel", "''"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "avg", "(", "cases", ")", "from", "wine", "where", "year", "=", "value", "and", "grape", "=", "value"], "question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.", "question_toks": ["Give", "the", "average", "price", "and", "case", "of", "wines", "made", "from", "Zinfandel", "grapes", "in", "the", "year", "2009", "."], "dataset_name": "spider", "guid": 2049}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | List the name and tonnage ordered by in descending alphaetical order for the names.", "sql": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "example": {"db_id": "battle_death", "query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC", "query_toks": ["SELECT", "name", ",", "tonnage", "FROM", "ship", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "name", ",", "tonnage", "from", "ship", "order", "by", "name", "desc"], "question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "question_toks": ["List", "the", "name", "and", "tonnage", "ordered", "by", "in", "descending", "alphaetical", "order", "for", "the", "names", "."], "dataset_name": "spider", "guid": 2050}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines, sorted by price ascending?", "sql": "SELECT DISTINCT Name FROM WINE ORDER BY price", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE ORDER BY price", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "ORDER", "BY", "price"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "order", "by", "price"], "question": "What are the names of wines, sorted by price ascending?", "question_toks": ["What", "are", "the", "names", "of", "wines", ",", "sorted", "by", "price", "ascending", "?"], "dataset_name": "spider", "guid": 2051}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the ids and names of the architects who built at least 3 bridges ?", "sql": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3", "example": {"db_id": "architecture", "query": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "architect", "AS", "T1", "JOIN", "bridge", "AS", "T2", "ON", "T1.id", "=", "T2.architect_id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "architect", "as", "t1", "join", "bridge", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "architect_id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the ids and names of the architects who built at least 3 bridges ?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "the", "architects", "who", "built", "at", "least", "3", "bridges", "?"], "dataset_name": "spider", "guid": 2052}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Show the official names of the cities that have hosted more than one competition.", "sql": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "example": {"db_id": "farm", "query": "SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T1.Official_Name", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "GROUP", "BY", "T2.Host_city_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "official_name", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "group", "by", "t2", ".", "host_city_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the official names of the cities that have hosted more than one competition.", "question_toks": ["Show", "the", "official", "names", "of", "the", "cities", "that", "have", "hosted", "more", "than", "one", "competition", "."], "dataset_name": "spider", "guid": 2053}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the wineries that have at least four wines.", "sql": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4", "example": {"db_id": "wine_1", "query": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4", "query_toks": ["SELECT", "Winery", "FROM", "WINE", "GROUP", "BY", "Winery", "HAVING", "count", "(", "*", ")", ">", "=", "4"], "query_toks_no_value": ["select", "winery", "from", "wine", "group", "by", "winery", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the wineries that have at least four wines.", "question_toks": ["Find", "the", "wineries", "that", "have", "at", "least", "four", "wines", "."], "dataset_name": "spider", "guid": 2054}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What is the official name and status of the city with the most residents?", "sql": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "example": {"db_id": "farm", "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "query_toks": ["SELECT", "Official_Name", ",", "Status", "FROM", "city", "ORDER", "BY", "Population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "official_name", ",", "status", "from", "city", "order", "by", "population", "desc", "limit", "value"], "question": "What is the official name and status of the city with the most residents?", "question_toks": ["What", "is", "the", "official", "name", "and", "status", "of", "the", "city", "with", "the", "most", "residents", "?"], "dataset_name": "spider", "guid": 2055}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | List the names of people that have not been on the affirmative side of debates.", "sql": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)", "example": {"db_id": "debate", "query": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_id", "NOT", "IN", "(", "SELECT", "Affirmative", "FROM", "debate_people", ")"], "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "affirmative", "from", "debate_people", ")"], "question": "List the names of people that have not been on the affirmative side of debates.", "question_toks": ["List", "the", "names", "of", "people", "that", "have", "not", "been", "on", "the", "affirmative", "side", "of", "debates", "."], "dataset_name": "spider", "guid": 2056}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which engineers have never visited to maintain the assets? List the engineer first name and last name.", "sql": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)", "example": {"db_id": "assets_maintenance", "query": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "Maintenance_Engineers", "WHERE", "engineer_id", "NOT", "IN", "(", "SELECT", "engineer_id", "FROM", "Engineer_Visits", ")"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "maintenance_engineers", "where", "engineer_id", "not", "in", "(", "select", "engineer_id", "from", "engineer_visits", ")"], "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.", "question_toks": ["Which", "engineers", "have", "never", "visited", "to", "maintain", "the", "assets", "?", "List", "the", "engineer", "first", "name", "and", "last", "name", "."], "dataset_name": "spider", "guid": 2057}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the names of the mills which are not located in 'Donceel'?", "sql": "SELECT name FROM mill WHERE LOCATION != 'Donceel'", "example": {"db_id": "architecture", "query": "SELECT name FROM mill WHERE LOCATION != 'Donceel'", "query_toks": ["SELECT", "name", "FROM", "mill", "WHERE", "LOCATION", "!", "=", "'Donceel", "'"], "query_toks_no_value": ["select", "name", "from", "mill", "where", "location", "!", "=", "value"], "question": "What are the names of the mills which are not located in 'Donceel'?", "question_toks": ["What", "are", "the", "names", "of", "the", "mills", "which", "are", "not", "located", "in", "'Donceel", "'", "?"], "dataset_name": "spider", "guid": 2058}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | In which year did the most recent crime happen?", "sql": "SELECT max(YEAR) FROM perpetrator;", "example": {"db_id": "perpetrator", "query": "SELECT max(YEAR) FROM perpetrator;", "query_toks": ["SELECT", "max", "(", "YEAR", ")", "FROM", "perpetrator", ";"], "query_toks_no_value": ["select", "max", "(", "year", ")", "from", "perpetrator"], "question": "In which year did the most recent crime happen?", "question_toks": ["In", "which", "year", "did", "the", "most", "recent", "crime", "happen", "?"], "dataset_name": "spider", "guid": 2059}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | List the season, home team, away team of all the games.", "sql": "SELECT season ,  home_team ,  away_team FROM game", "example": {"db_id": "game_injury", "query": "SELECT season ,  home_team ,  away_team FROM game", "query_toks": ["SELECT", "season", ",", "home_team", ",", "away_team", "FROM", "game"], "query_toks_no_value": ["select", "season", ",", "home_team", ",", "away_team", "from", "game"], "question": "List the season, home team, away team of all the games.", "question_toks": ["List", "the", "season", ",", "home", "team", ",", "away", "team", "of", "all", "the", "games", "."], "dataset_name": "spider", "guid": 2060}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | What are the code and description of the most frequent behavior incident type?", "sql": "SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.incident_type_code ,  T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code  =  T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.incident_type_code", ",", "T2.incident_type_description", "FROM", "Behavior_Incident", "AS", "T1", "JOIN", "Ref_Incident_Type", "AS", "T2", "ON", "T1.incident_type_code", "=", "T2.incident_type_code", "GROUP", "BY", "T1.incident_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "incident_type_code", ",", "t2", ".", "incident_type_description", "from", "behavior_incident", "as", "t1", "join", "ref_incident_type", "as", "t2", "on", "t1", ".", "incident_type_code", "=", "t2", ".", "incident_type_code", "group", "by", "t1", ".", "incident_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the code and description of the most frequent behavior incident type?", "question_toks": ["What", "are", "the", "code", "and", "description", "of", "the", "most", "frequent", "behavior", "incident", "type", "?"], "dataset_name": "spider", "guid": 2061}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | How many distinct locations of perpetrators are there?", "sql": "SELECT count(DISTINCT LOCATION) FROM perpetrator", "example": {"db_id": "perpetrator", "query": "SELECT count(DISTINCT LOCATION) FROM perpetrator", "query_toks": ["SELECT", "count", "(", "DISTINCT", "LOCATION", ")", "FROM", "perpetrator"], "query_toks_no_value": ["select", "count", "(", "distinct", "location", ")", "from", "perpetrator"], "question": "How many distinct locations of perpetrators are there?", "question_toks": ["How", "many", "distinct", "locations", "of", "perpetrators", "are", "there", "?"], "dataset_name": "spider", "guid": 2062}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Which location has the most corresponding counties?", "sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "county_public_safety", "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "county_public_safety", "GROUP", "BY", "LOCATION", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "county_public_safety", "group", "by", "location", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which location has the most corresponding counties?", "question_toks": ["Which", "location", "has", "the", "most", "corresponding", "counties", "?"], "dataset_name": "spider", "guid": 2063}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of wines produced before any wine from the Brander winery?", "sql": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "YEAR", "<", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "WINE", "WHERE", "Winery", "=", "``", "Brander", "''", ")"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "year", "<", "(", "select", "min", "(", "year", ")", "from", "wine", "where", "winery", "=", "value", ")"], "question": "What are the names of wines produced before any wine from the Brander winery?", "question_toks": ["What", "are", "the", "names", "of", "wines", "produced", "before", "any", "wine", "from", "the", "Brander", "winery", "?"], "dataset_name": "spider", "guid": 2064}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the the grape whose white color grapes are used to produce wines with scores higher than 90.", "sql": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90", "query_toks": ["SELECT", "DISTINCT", "T1.Grape", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "WHERE", "T1.Color", "=", "``", "White", "''", "AND", "T2.score", ">", "90"], "query_toks_no_value": ["select", "distinct", "t1", ".", "grape", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "where", "t1", ".", "color", "=", "value", "and", "t2", ".", "score", ">", "value"], "question": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.", "question_toks": ["Find", "the", "the", "grape", "whose", "white", "color", "grapes", "are", "used", "to", "produce", "wines", "with", "scores", "higher", "than", "90", "."], "dataset_name": "spider", "guid": 2065}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What is the status of the city that has hosted the most competitions?", "sql": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "farm", "query": "SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID  =  T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Status", "FROM", "city", "AS", "T1", "JOIN", "farm_competition", "AS", "T2", "ON", "T1.City_ID", "=", "T2.Host_city_ID", "GROUP", "BY", "T2.Host_city_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "status", "from", "city", "as", "t1", "join", "farm_competition", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "host_city_id", "group", "by", "t2", ".", "host_city_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the status of the city that has hosted the most competitions?", "question_toks": ["What", "is", "the", "status", "of", "the", "city", "that", "has", "hosted", "the", "most", "competitions", "?"], "dataset_name": "spider", "guid": 2066}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | List all every engineer's first name, last name, details and coresponding skill description.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T1.other_details", ",", "T3.skill_description", "FROM", "Maintenance_Engineers", "AS", "T1", "JOIN", "Engineer_Skills", "AS", "T2", "ON", "T1.engineer_id", "=", "T2.engineer_id", "JOIN", "Skills", "AS", "T3", "ON", "T2.skill_id", "=", "T3.skill_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t1", ".", "other_details", ",", "t3", ".", "skill_description", "from", "maintenance_engineers", "as", "t1", "join", "engineer_skills", "as", "t2", "on", "t1", ".", "engineer_id", "=", "t2", ".", "engineer_id", "join", "skills", "as", "t3", "on", "t2", ".", "skill_id", "=", "t3", ".", "skill_id"], "question": "List all every engineer's first name, last name, details and coresponding skill description.", "question_toks": ["List", "all", "every", "engineer", "'s", "first", "name", ",", "last", "name", ",", "details", "and", "coresponding", "skill", "description", "."], "dataset_name": "spider", "guid": 2067}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the distinct names of wines with prices higher than any wine from John Anthony winery.", "sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "WHERE", "Price", ">", "(", "SELECT", "min", "(", "Price", ")", "FROM", "wine", "WHERE", "Winery", "=", "``", "John", "Anthony", "''", ")"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "where", "price", ">", "(", "select", "min", "(", "price", ")", "from", "wine", "where", "winery", "=", "value", ")"], "question": "What are the distinct names of wines with prices higher than any wine from John Anthony winery.", "question_toks": ["What", "are", "the", "distinct", "names", "of", "wines", "with", "prices", "higher", "than", "any", "wine", "from", "John", "Anthony", "winery", "."], "dataset_name": "spider", "guid": 2068}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | Show different parties of people along with the number of people in each party.", "sql": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party", "example": {"db_id": "debate", "query": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party", "query_toks": ["SELECT", "Party", ",", "COUNT", "(", "*", ")", "FROM", "people", "GROUP", "BY", "Party"], "query_toks_no_value": ["select", "party", ",", "count", "(", "*", ")", "from", "people", "group", "by", "party"], "question": "Show different parties of people along with the number of people in each party.", "question_toks": ["Show", "different", "parties", "of", "people", "along", "with", "the", "number", "of", "people", "in", "each", "party", "."], "dataset_name": "spider", "guid": 2069}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What are the names of the technicians that are assigned to repair machines with more point values than 70?", "sql": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "example": {"db_id": "machine_repair", "query": "SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id  =  T2.machine_id JOIN technician AS T3 ON T1.technician_ID  =  T3.technician_ID WHERE T2.value_points  >  70", "query_toks": ["SELECT", "T3.Name", "FROM", "repair_assignment", "AS", "T1", "JOIN", "machine", "AS", "T2", "ON", "T1.machine_id", "=", "T2.machine_id", "JOIN", "technician", "AS", "T3", "ON", "T1.technician_ID", "=", "T3.technician_ID", "WHERE", "T2.value_points", ">", "70"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "repair_assignment", "as", "t1", "join", "machine", "as", "t2", "on", "t1", ".", "machine_id", "=", "t2", ".", "machine_id", "join", "technician", "as", "t3", "on", "t1", ".", "technician_id", "=", "t3", ".", "technician_id", "where", "t2", ".", "value_points", ">", "value"], "question": "What are the names of the technicians that are assigned to repair machines with more point values than 70?", "question_toks": ["What", "are", "the", "names", "of", "the", "technicians", "that", "are", "assigned", "to", "repair", "machines", "with", "more", "point", "values", "than", "70", "?"], "dataset_name": "spider", "guid": 2070}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the percentage of hispanics in cities with the black percentage higher than 10?", "sql": "SELECT Hispanic FROM city WHERE Black  >  10", "example": {"db_id": "county_public_safety", "query": "SELECT Hispanic FROM city WHERE Black  >  10", "query_toks": ["SELECT", "Hispanic", "FROM", "city", "WHERE", "Black", ">", "10"], "query_toks_no_value": ["select", "hispanic", "from", "city", "where", "black", ">", "value"], "question": "What are the percentage of hispanics in cities with the black percentage higher than 10?", "question_toks": ["What", "are", "the", "percentage", "of", "hispanics", "in", "cities", "with", "the", "black", "percentage", "higher", "than", "10", "?"], "dataset_name": "spider", "guid": 2071}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the distinct winery of wines having price between 50 and 100.", "sql": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100", "query_toks": ["SELECT", "DISTINCT", "Winery", "FROM", "WINE", "WHERE", "Price", "BETWEEN", "50", "AND", "100"], "query_toks_no_value": ["select", "distinct", "winery", "from", "wine", "where", "price", "between", "value", "and", "value"], "question": "Find the distinct winery of wines having price between 50 and 100.", "question_toks": ["Find", "the", "distinct", "winery", "of", "wines", "having", "price", "between", "50", "and", "100", "."], "dataset_name": "spider", "guid": 2072}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the name of the wine with the highest score.", "sql": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE ORDER BY Score LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "WINE", "ORDER", "BY", "Score", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "wine", "order", "by", "score", "limit", "value"], "question": "Give the name of the wine with the highest score.", "question_toks": ["Give", "the", "name", "of", "the", "wine", "with", "the", "highest", "score", "."], "dataset_name": "spider", "guid": 2073}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Give the color of the grape whose wine products have the highest average price?", "sql": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "example": {"db_id": "wine_1", "query": "SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Color", "FROM", "GRAPES", "AS", "T1", "JOIN", "WINE", "AS", "T2", "ON", "T1.Grape", "=", "T2.Grape", "GROUP", "BY", "T2.Grape", "ORDER", "BY", "AVG", "(", "Price", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "color", "from", "grapes", "as", "t1", "join", "wine", "as", "t2", "on", "t1", ".", "grape", "=", "t2", ".", "grape", "group", "by", "t2", ".", "grape", "order", "by", "avg", "(", "price", ")", "desc", "limit", "value"], "question": "Give the color of the grape whose wine products have the highest average price?", "question_toks": ["Give", "the", "color", "of", "the", "grape", "whose", "wine", "products", "have", "the", "highest", "average", "price", "?"], "dataset_name": "spider", "guid": 2074}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | What are the maximum and minimum number of cows across all farms.", "sql": "SELECT max(Cows) ,  min(Cows) FROM farm", "example": {"db_id": "farm", "query": "SELECT max(Cows) ,  min(Cows) FROM farm", "query_toks": ["SELECT", "max", "(", "Cows", ")", ",", "min", "(", "Cows", ")", "FROM", "farm"], "query_toks_no_value": ["select", "max", "(", "cows", ")", ",", "min", "(", "cows", ")", "from", "farm"], "question": "What are the maximum and minimum number of cows across all farms.", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "number", "of", "cows", "across", "all", "farms", "."], "dataset_name": "spider", "guid": 2075}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What are the names of people in ascending order of height?", "sql": "SELECT Name FROM People ORDER BY Height ASC", "example": {"db_id": "perpetrator", "query": "SELECT Name FROM People ORDER BY Height ASC", "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Height", "ASC"], "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "height", "asc"], "question": "What are the names of people in ascending order of height?", "question_toks": ["What", "are", "the", "names", "of", "people", "in", "ascending", "order", "of", "height", "?"], "dataset_name": "spider", "guid": 2076}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the grapes and appelations of each wine?", "sql": "SELECT Grape ,  Appelation FROM WINE", "example": {"db_id": "wine_1", "query": "SELECT Grape ,  Appelation FROM WINE", "query_toks": ["SELECT", "Grape", ",", "Appelation", "FROM", "WINE"], "query_toks_no_value": ["select", "grape", ",", "appelation", "from", "wine"], "question": "What are the grapes and appelations of each wine?", "question_toks": ["What", "are", "the", "grapes", "and", "appelations", "of", "each", "wine", "?"], "dataset_name": "spider", "guid": 2077}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show all countries and the number of people from each country.", "sql": "SELECT country ,  count(*) FROM people GROUP BY country", "example": {"db_id": "wedding", "query": "SELECT country ,  count(*) FROM people GROUP BY country", "query_toks": ["SELECT", "country", ",", "count", "(", "*", ")", "FROM", "people", "GROUP", "BY", "country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "people", "group", "by", "country"], "question": "Show all countries and the number of people from each country.", "question_toks": ["Show", "all", "countries", "and", "the", "number", "of", "people", "from", "each", "country", "."], "dataset_name": "spider", "guid": 2078}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | List the names of perpetrators in descending order of the year.", "sql": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC", "example": {"db_id": "perpetrator", "query": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Year DESC", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "perpetrator", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Year", "DESC"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "perpetrator", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "year", "desc"], "question": "List the names of perpetrators in descending order of the year.", "question_toks": ["List", "the", "names", "of", "perpetrators", "in", "descending", "order", "of", "the", "year", "."], "dataset_name": "spider", "guid": 2079}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What is the average number of people injured by all perpetrators?", "sql": "SELECT avg(Injured) FROM perpetrator", "example": {"db_id": "perpetrator", "query": "SELECT avg(Injured) FROM perpetrator", "query_toks": ["SELECT", "avg", "(", "Injured", ")", "FROM", "perpetrator"], "query_toks_no_value": ["select", "avg", "(", "injured", ")", "from", "perpetrator"], "question": "What is the average number of people injured by all perpetrators?", "question_toks": ["What", "is", "the", "average", "number", "of", "people", "injured", "by", "all", "perpetrators", "?"], "dataset_name": "spider", "guid": 2080}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | List the asset id, details, make and model for every asset.", "sql": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets", "example": {"db_id": "assets_maintenance", "query": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets", "query_toks": ["SELECT", "asset_id", ",", "asset_details", ",", "asset_make", ",", "asset_model", "FROM", "Assets"], "query_toks_no_value": ["select", "asset_id", ",", "asset_details", ",", "asset_make", ",", "asset_model", "from", "assets"], "question": "List the asset id, details, make and model for every asset.", "question_toks": ["List", "the", "asset", "id", ",", "details", ",", "make", "and", "model", "for", "every", "asset", "."], "dataset_name": "spider", "guid": 2081}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Please show the team that has the most number of technicians.", "sql": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "machine_repair", "query": "SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Team", "FROM", "technician", "GROUP", "BY", "Team", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "team", "from", "technician", "group", "by", "team", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the team that has the most number of technicians.", "question_toks": ["Please", "show", "the", "team", "that", "has", "the", "most", "number", "of", "technicians", "."], "dataset_name": "spider", "guid": 2082}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | How many counties correspond to each police force?", "sql": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force", "example": {"db_id": "county_public_safety", "query": "SELECT Police_force ,  COUNT(*) FROM county_public_safety GROUP BY Police_force", "query_toks": ["SELECT", "Police_force", ",", "COUNT", "(", "*", ")", "FROM", "county_public_safety", "GROUP", "BY", "Police_force"], "query_toks_no_value": ["select", "police_force", ",", "count", "(", "*", ")", "from", "county_public_safety", "group", "by", "police_force"], "question": "How many counties correspond to each police force?", "question_toks": ["How", "many", "counties", "correspond", "to", "each", "police", "force", "?"], "dataset_name": "spider", "guid": 2083}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | Show the police force shared by counties with location on the east and west.", "sql": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"", "example": {"db_id": "county_public_safety", "query": "SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"East\" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION  =  \"West\"", "query_toks": ["SELECT", "Police_force", "FROM", "county_public_safety", "WHERE", "LOCATION", "=", "``", "East", "''", "INTERSECT", "SELECT", "Police_force", "FROM", "county_public_safety", "WHERE", "LOCATION", "=", "``", "West", "''"], "query_toks_no_value": ["select", "police_force", "from", "county_public_safety", "where", "location", "=", "value", "intersect", "select", "police_force", "from", "county_public_safety", "where", "location", "=", "value"], "question": "Show the police force shared by counties with location on the east and west.", "question_toks": ["Show", "the", "police", "force", "shared", "by", "counties", "with", "location", "on", "the", "east", "and", "west", "."], "dataset_name": "spider", "guid": 2084}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | What is the starting year for the oldest technician?", "sql": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "example": {"db_id": "machine_repair", "query": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Starting_Year", "FROM", "technician", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "starting_year", "from", "technician", "order", "by", "age", "desc", "limit", "value"], "question": "What is the starting year for the oldest technician?", "question_toks": ["What", "is", "the", "starting", "year", "for", "the", "oldest", "technician", "?"], "dataset_name": "spider", "guid": 2085}}
{"text": "battle: id, name, date, bulgarian_commander, latin_commander, result; ship: lost_in_battle, id, name, tonnage, ship_type, location, disposition_of_ship; death: caused_by_ship_id, id, note, killed, injured | How many different results are there for the battles?", "sql": "SELECT count(DISTINCT RESULT) FROM battle", "example": {"db_id": "battle_death", "query": "SELECT count(DISTINCT RESULT) FROM battle", "query_toks": ["SELECT", "count", "(", "DISTINCT", "RESULT", ")", "FROM", "battle"], "query_toks_no_value": ["select", "count", "(", "distinct", "result", ")", "from", "battle"], "question": "How many different results are there for the battles?", "question_toks": ["How", "many", "different", "results", "are", "there", "for", "the", "battles", "?"], "dataset_name": "spider", "guid": 2086}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the ids, names and genders of the architects who built two bridges or one mill?", "sql": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1", "example": {"db_id": "architecture", "query": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", ",", "T1.gender", "FROM", "architect", "AS", "T1", "JOIN", "bridge", "AS", "T2", "ON", "T1.id", "=", "T2.architect_id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", "=", "2", "UNION", "SELECT", "T1.id", ",", "T1.name", ",", "T1.gender", "FROM", "architect", "AS", "T1", "JOIN", "mill", "AS", "T2", "ON", "T1.id", "=", "T2.architect_id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", ",", "t1", ".", "gender", "from", "architect", "as", "t1", "join", "bridge", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "architect_id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", "=", "value", "union", "select", "t1", ".", "id", ",", "t1", ".", "name", ",", "t1", ".", "gender", "from", "architect", "as", "t1", "join", "mill", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "architect_id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the ids, names and genders of the architects who built two bridges or one mill?", "question_toks": ["What", "are", "the", "ids", ",", "names", "and", "genders", "of", "the", "architects", "who", "built", "two", "bridges", "or", "one", "mill", "?"], "dataset_name": "spider", "guid": 2087}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | List the area and county of all appelations.", "sql": "SELECT Area ,  County FROM APPELLATIONS", "example": {"db_id": "wine_1", "query": "SELECT Area ,  County FROM APPELLATIONS", "query_toks": ["SELECT", "Area", ",", "County", "FROM", "APPELLATIONS"], "query_toks_no_value": ["select", "area", ",", "county", "from", "appellations"], "question": "List the area and county of all appelations.", "question_toks": ["List", "the", "area", "and", "county", "of", "all", "appelations", "."], "dataset_name": "spider", "guid": 2088}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | How many students are not involved in any behavior incident?", "sql": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )", "example": {"db_id": "behavior_monitoring", "query": "SELECT count(*) FROM STUDENTS WHERE student_id NOT IN ( SELECT student_id FROM Behavior_Incident )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENTS", "WHERE", "student_id", "NOT", "IN", "(", "SELECT", "student_id", "FROM", "Behavior_Incident", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "students", "where", "student_id", "not", "in", "(", "select", "student_id", "from", "behavior_incident", ")"], "question": "How many students are not involved in any behavior incident?", "question_toks": ["How", "many", "students", "are", "not", "involved", "in", "any", "behavior", "incident", "?"], "dataset_name": "spider", "guid": 2089}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names and scores of all wines?", "sql": "SELECT Name ,  Score FROM WINE", "example": {"db_id": "wine_1", "query": "SELECT Name ,  Score FROM WINE", "query_toks": ["SELECT", "Name", ",", "Score", "FROM", "WINE"], "query_toks_no_value": ["select", "name", ",", "score", "from", "wine"], "question": "What are the names and scores of all wines?", "question_toks": ["What", "are", "the", "names", "and", "scores", "of", "all", "wines", "?"], "dataset_name": "spider", "guid": 2090}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the names of cities in ascending alphabetical order?", "sql": "SELECT Name FROM city ORDER BY Name ASC", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM city ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "city", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "city", "order", "by", "name", "asc"], "question": "What are the names of cities in ascending alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "cities", "in", "ascending", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 2091}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | How many addresses have zip code 197?", "sql": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT count(*) FROM ADDRESSES WHERE zip_postcode  =  \"197\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ADDRESSES", "WHERE", "zip_postcode", "=", "``", "197", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "addresses", "where", "zip_postcode", "=", "value"], "question": "How many addresses have zip code 197?", "question_toks": ["How", "many", "addresses", "have", "zip", "code", "197", "?"], "dataset_name": "spider", "guid": 2092}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?", "sql": "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.teacher_id ,  T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.detention_type_code  =  \"AFTER\" GROUP BY T1.teacher_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.teacher_id", ",", "T2.last_name", "FROM", "Detention", "AS", "T1", "JOIN", "Teachers", "AS", "T2", "ON", "T1.teacher_id", "=", "T2.teacher_id", "WHERE", "T1.detention_type_code", "=", "``", "AFTER", "''", "GROUP", "BY", "T1.teacher_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "teacher_id", ",", "t2", ".", "last_name", "from", "detention", "as", "t1", "join", "teachers", "as", "t2", "on", "t1", ".", "teacher_id", "=", "t2", ".", "teacher_id", "where", "t1", ".", "detention_type_code", "=", "value", "group", "by", "t1", ".", "teacher_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?", "question_toks": ["Find", "the", "id", "and", "last", "name", "of", "the", "teacher", "that", "has", "the", "most", "detentions", "with", "detention", "type", "code", "``", "AFTER", "''", "?"], "dataset_name": "spider", "guid": 2093}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the id and city of the student address with the highest average monthly rental.", "sql": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "example": {"db_id": "behavior_monitoring", "query": "SELECT T2.address_id ,  T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1", "query_toks": ["SELECT", "T2.address_id", ",", "T1.city", "FROM", "Addresses", "AS", "T1", "JOIN", "Student_Addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "GROUP", "BY", "T2.address_id", "ORDER", "BY", "AVG", "(", "monthly_rental", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "address_id", ",", "t1", ".", "city", "from", "addresses", "as", "t1", "join", "student_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "group", "by", "t2", ".", "address_id", "order", "by", "avg", "(", "monthly_rental", ")", "desc", "limit", "value"], "question": "Find the id and city of the student address with the highest average monthly rental.", "question_toks": ["Find", "the", "id", "and", "city", "of", "the", "student", "address", "with", "the", "highest", "average", "monthly", "rental", "."], "dataset_name": "spider", "guid": 2094}}
{"text": "stadium: id, name, Home_Games, Average_Attendance, Total_Attendance, Capacity_Percentage; game: stadium_id, id, Season, Date, Home_team, Away_team, Score, Competition; injury_accident: game_id, id, Player, Injury, Number_of_matches, Source | List the dates of games by the home team name in descending order.", "sql": "SELECT Date FROM game ORDER BY home_team DESC", "example": {"db_id": "game_injury", "query": "SELECT Date FROM game ORDER BY home_team DESC", "query_toks": ["SELECT", "Date", "FROM", "game", "ORDER", "BY", "home_team", "DESC"], "query_toks_no_value": ["select", "date", "from", "game", "order", "by", "home_team", "desc"], "question": "List the dates of games by the home team name in descending order.", "question_toks": ["List", "the", "dates", "of", "games", "by", "the", "home", "team", "name", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 2095}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What is the location shared by most counties?", "sql": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "county_public_safety", "query": "SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "county_public_safety", "GROUP", "BY", "LOCATION", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "county_public_safety", "group", "by", "location", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the location shared by most counties?", "question_toks": ["What", "is", "the", "location", "shared", "by", "most", "counties", "?"], "dataset_name": "spider", "guid": 2096}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | List the official name and status of the city with the largest population.", "sql": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "example": {"db_id": "farm", "query": "SELECT Official_Name ,  Status FROM city ORDER BY Population DESC LIMIT 1", "query_toks": ["SELECT", "Official_Name", ",", "Status", "FROM", "city", "ORDER", "BY", "Population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "official_name", ",", "status", "from", "city", "order", "by", "population", "desc", "limit", "value"], "question": "List the official name and status of the city with the largest population.", "question_toks": ["List", "the", "official", "name", "and", "status", "of", "the", "city", "with", "the", "largest", "population", "."], "dataset_name": "spider", "guid": 2097}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What are the crime rates of counties that contain cities that have white percentages of over 90?", "sql": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90", "example": {"db_id": "county_public_safety", "query": "SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID  =  T2.County_ID WHERE T1.White  >  90", "query_toks": ["SELECT", "T2.Crime_rate", "FROM", "city", "AS", "T1", "JOIN", "county_public_safety", "AS", "T2", "ON", "T1.County_ID", "=", "T2.County_ID", "WHERE", "T1.White", ">", "90"], "query_toks_no_value": ["select", "t2", ".", "crime_rate", "from", "city", "as", "t1", "join", "county_public_safety", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "county_id", "where", "t1", ".", "white", ">", "value"], "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?", "question_toks": ["What", "are", "the", "crime", "rates", "of", "counties", "that", "contain", "cities", "that", "have", "white", "percentages", "of", "over", "90", "?"], "dataset_name": "spider", "guid": 2098}}
{"text": "city: City_ID, Official_Name, Status, Area_km_2, Population, Census_Ranking; farm: Farm_ID, Year, Total_Horses, Working_Horses, Total_Cattle, Oxen, Bulls, Cows, Pigs, Sheep_and_Goats; farm_competition: Competition_ID, Year, Theme, Host_city_ID, Hosts; competition_record: Competition_ID, Farm_ID, Rank | Count the number of farms.", "sql": "SELECT count(*) FROM farm", "example": {"db_id": "farm", "query": "SELECT count(*) FROM farm", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "farm"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "farm"], "question": "Count the number of farms.", "question_toks": ["Count", "the", "number", "of", "farms", "."], "dataset_name": "spider", "guid": 2099}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.", "sql": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")", "example": {"db_id": "wine_1", "query": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")", "query_toks": ["SELECT", "DISTINCT", "Name", "FROM", "WINE", "WHERE", "Price", ">", "(", "SELECT", "min", "(", "Price", ")", "FROM", "wine", "WHERE", "Winery", "=", "``", "John", "Anthony", "''", ")"], "query_toks_no_value": ["select", "distinct", "name", "from", "wine", "where", "price", ">", "(", "select", "min", "(", "price", ")", "from", "wine", "where", "winery", "=", "value", ")"], "question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.", "question_toks": ["Find", "the", "distinct", "names", "of", "all", "wines", "that", "have", "prices", "higher", "than", "some", "wines", "from", "John", "Anthony", "winery", "."], "dataset_name": "spider", "guid": 2100}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the prices of wines produced before the year of 2010?", "sql": "SELECT Price FROM WINE WHERE YEAR  <  2010", "example": {"db_id": "wine_1", "query": "SELECT Price FROM WINE WHERE YEAR  <  2010", "query_toks": ["SELECT", "Price", "FROM", "WINE", "WHERE", "YEAR", "<", "2010"], "query_toks_no_value": ["select", "price", "from", "wine", "where", "year", "<", "value"], "question": "What are the prices of wines produced before the year of 2010?", "question_toks": ["What", "are", "the", "prices", "of", "wines", "produced", "before", "the", "year", "of", "2010", "?"], "dataset_name": "spider", "guid": 2101}}
{"text": "perpetrator: Perpetrator_ID, People_ID, Date, Year, Location, Country, Killed, Injured; people: People_ID, Name, Height, Weight, Home_Town | What is the location of the perpetrator with the largest kills.", "sql": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1", "example": {"db_id": "perpetrator", "query": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "perpetrator", "ORDER", "BY", "Killed", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "perpetrator", "order", "by", "killed", "desc", "limit", "value"], "question": "What is the location of the perpetrator with the largest kills.", "question_toks": ["What", "is", "the", "location", "of", "the", "perpetrator", "with", "the", "largest", "kills", "."], "dataset_name": "spider", "guid": 2102}}
{"text": "repair: repair_ID, name, Launch_Date, Notes; machine: Machine_ID, Making_Year, Class, Team, Machine_series, value_points, quality_rank; technician: technician_id, Name, Team, Starting_Year, Age; repair_assignment: technician_id, repair_ID, Machine_ID | Show the name of technicians aged either 36 or 37", "sql": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "example": {"db_id": "machine_repair", "query": "SELECT Name FROM technician WHERE Age  =  36 OR Age  =  37", "query_toks": ["SELECT", "Name", "FROM", "technician", "WHERE", "Age", "=", "36", "OR", "Age", "=", "37"], "query_toks_no_value": ["select", "name", "from", "technician", "where", "age", "=", "value", "or", "age", "=", "value"], "question": "Show the name of technicians aged either 36 or 37", "question_toks": ["Show", "the", "name", "of", "technicians", "aged", "either", "36", "or", "37"], "dataset_name": "spider", "guid": 2103}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the names of all wines produced in 2008?", "sql": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"", "example": {"db_id": "wine_1", "query": "SELECT Name FROM WINE WHERE YEAR  =  \"2008\"", "query_toks": ["SELECT", "Name", "FROM", "WINE", "WHERE", "YEAR", "=", "``", "2008", "''"], "query_toks_no_value": ["select", "name", "from", "wine", "where", "year", "=", "value"], "question": "What are the names of all wines produced in 2008?", "question_toks": ["What", "are", "the", "names", "of", "all", "wines", "produced", "in", "2008", "?"], "dataset_name": "spider", "guid": 2104}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | How many female people are older than 30 in our record?", "sql": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30", "example": {"db_id": "wedding", "query": "SELECT count(*) FROM people WHERE is_male  =  'F' AND age  >  30", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "people", "WHERE", "is_male", "=", "'F", "'", "AND", "age", ">", "30"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "people", "where", "is_male", "=", "value", "and", "age", ">", "value"], "question": "How many female people are older than 30 in our record?", "question_toks": ["How", "many", "female", "people", "are", "older", "than", "30", "in", "our", "record", "?"], "dataset_name": "spider", "guid": 2105}}
{"text": "Ref_Address_Types: address_type_code, address_type_description; Ref_Detention_Type: detention_type_code, detention_type_description; Ref_Incident_Type: incident_type_code, incident_type_description; Addresses: address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details; Students: student_id, address_id, first_name, middle_name, last_name, cell_mobile_number, email_address, date_first_rental, date_left_university, other_student_details; Teachers: teacher_id, address_id, first_name, middle_name, last_name, gender, cell_mobile_number, email_address, other_details; Assessment_Notes: notes_id, student_id, teacher_id, date_of_notes, text_of_notes, other_details; Behavior_Incident: incident_id, incident_type_code, student_id, date_incident_start, date_incident_end, incident_summary, recommendations, other_details; Detention: detention_id, detention_type_code, teacher_id, datetime_detention_start, datetime_detention_end, detention_summary, other_details; Student_Addresses: student_id, address_id, date_address_from, date_address_to, monthly_rental, other_details | Find the dates of assessment notes for students with first name \"Fanny\".", "sql": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\"", "example": {"db_id": "behavior_monitoring", "query": "SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.first_name  =  \"Fanny\"", "query_toks": ["SELECT", "T1.date_of_notes", "FROM", "Assessment_Notes", "AS", "T1", "JOIN", "Students", "AS", "T2", "ON", "T1.student_id", "=", "T2.student_id", "WHERE", "T2.first_name", "=", "``", "Fanny", "''"], "query_toks_no_value": ["select", "t1", ".", "date_of_notes", "from", "assessment_notes", "as", "t1", "join", "students", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "student_id", "where", "t2", ".", "first_name", "=", "value"], "question": "Find the dates of assessment notes for students with first name \"Fanny\".", "question_toks": ["Find", "the", "dates", "of", "assessment", "notes", "for", "students", "with", "first", "name", "``", "Fanny", "''", "."], "dataset_name": "spider", "guid": 2106}}
{"text": "county_public_safety: County_ID, Name, Population, Police_officers, Residents_per_officer, Case_burden, Crime_rate, Police_force, Location; city: City_ID, County_ID, Name, White, Black, Amerindian, Asian, Multiracial, Hispanic | What is the name of the county with the greatest population?", "sql": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "example": {"db_id": "county_public_safety", "query": "SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "county_public_safety", "ORDER", "BY", "Population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "county_public_safety", "order", "by", "population", "desc", "limit", "value"], "question": "What is the name of the county with the greatest population?", "question_toks": ["What", "is", "the", "name", "of", "the", "county", "with", "the", "greatest", "population", "?"], "dataset_name": "spider", "guid": 2107}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What are the distinct types of mills that are built by American or Canadian architects?", "sql": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'", "example": {"db_id": "architecture", "query": "SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id WHERE T2.nationality  =  'American' OR T2.nationality  =  'Canadian'", "query_toks": ["SELECT", "DISTINCT", "T1.type", "FROM", "mill", "AS", "T1", "JOIN", "architect", "AS", "t2", "ON", "T1.architect_id", "=", "T2.id", "WHERE", "T2.nationality", "=", "'American", "'", "OR", "T2.nationality", "=", "'Canadian", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "type", "from", "mill", "as", "t1", "join", "architect", "as", "t2", "on", "t1", ".", "architect_id", "=", "t2", ".", "id", "where", "t2", ".", "nationality", "=", "value", "or", "t2", ".", "nationality", "=", "value"], "question": "What are the distinct types of mills that are built by American or Canadian architects?", "question_toks": ["What", "are", "the", "distinct", "types", "of", "mills", "that", "are", "built", "by", "American", "or", "Canadian", "architects", "?"], "dataset_name": "spider", "guid": 2108}}
{"text": "people: People_ID, District, Name, Party, Age; debate: Debate_ID, Date, Venue, Num_of_Audience; debate_people: Debate_ID, Affirmative, Negative, If_Affirmative_Win | What is the party of the youngest people?", "sql": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1", "example": {"db_id": "debate", "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1", "query_toks": ["SELECT", "Party", "FROM", "people", "ORDER", "BY", "Age", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "party", "from", "people", "order", "by", "age", "asc", "limit", "value"], "question": "What is the party of the youngest people?", "question_toks": ["What", "is", "the", "party", "of", "the", "youngest", "people", "?"], "dataset_name": "spider", "guid": 2109}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | Show the pair of male and female names in all weddings after year 2014", "sql": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014", "example": {"db_id": "wedding", "query": "SELECT T2.name ,  T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id  =  T2.people_id JOIN people AS T3 ON T1.female_id  =  T3.people_id WHERE T1.year  >  2014", "query_toks": ["SELECT", "T2.name", ",", "T3.name", "FROM", "wedding", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.male_id", "=", "T2.people_id", "JOIN", "people", "AS", "T3", "ON", "T1.female_id", "=", "T3.people_id", "WHERE", "T1.year", ">", "2014"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "name", "from", "wedding", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "male_id", "=", "t2", ".", "people_id", "join", "people", "as", "t3", "on", "t1", ".", "female_id", "=", "t3", ".", "people_id", "where", "t1", ".", "year", ">", "value"], "question": "Show the pair of male and female names in all weddings after year 2014", "question_toks": ["Show", "the", "pair", "of", "male", "and", "female", "names", "in", "all", "weddings", "after", "year", "2014"], "dataset_name": "spider", "guid": 2110}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which kind of part has the least number of faults? List the part name.", "sql": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.part_name", "FROM", "Parts", "AS", "T1", "JOIN", "Part_Faults", "AS", "T2", "ON", "T1.part_id", "=", "T2.part_id", "GROUP", "BY", "T1.part_name", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "part_name", "from", "parts", "as", "t1", "join", "part_faults", "as", "t2", "on", "t1", ".", "part_id", "=", "t2", ".", "part_id", "group", "by", "t1", ".", "part_name", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Which kind of part has the least number of faults? List the part name.", "question_toks": ["Which", "kind", "of", "part", "has", "the", "least", "number", "of", "faults", "?", "List", "the", "part", "name", "."], "dataset_name": "spider", "guid": 2111}}
{"text": "grapes: ID, Grape, Color; appellations: No, Appelation, County, State, Area, isAVA; wine: No, Grape, Winery, Appelation, State, Name, Year, Price, Score, Cases | What are the average price and score of wines for each appelation?", "sql": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation", "example": {"db_id": "wine_1", "query": "SELECT avg(Price) ,  avg(Score) ,  Appelation FROM WINE GROUP BY Appelation", "query_toks": ["SELECT", "avg", "(", "Price", ")", ",", "avg", "(", "Score", ")", ",", "Appelation", "FROM", "WINE", "GROUP", "BY", "Appelation"], "query_toks_no_value": ["select", "avg", "(", "price", ")", ",", "avg", "(", "score", ")", ",", "appelation", "from", "wine", "group", "by", "appelation"], "question": "What are the average price and score of wines for each appelation?", "question_toks": ["What", "are", "the", "average", "price", "and", "score", "of", "wines", "for", "each", "appelation", "?"], "dataset_name": "spider", "guid": 2112}}
{"text": "people: People_ID, Name, Country, Is_Male, Age; church: Church_ID, Name, Organized_by, Open_Date, Continuation_of; wedding: Church_ID, Male_ID, Female_ID, Year | List all church names in descending order of opening date.", "sql": "SELECT name FROM church ORDER BY open_date DESC", "example": {"db_id": "wedding", "query": "SELECT name FROM church ORDER BY open_date DESC", "query_toks": ["SELECT", "name", "FROM", "church", "ORDER", "BY", "open_date", "DESC"], "query_toks_no_value": ["select", "name", "from", "church", "order", "by", "open_date", "desc"], "question": "List all church names in descending order of opening date.", "question_toks": ["List", "all", "church", "names", "in", "descending", "order", "of", "opening", "date", "."], "dataset_name": "spider", "guid": 2113}}
{"text": "Third_Party_Companies: company_id, company_type, company_name, company_address, other_company_details; Maintenance_Contracts: maintenance_contract_id, maintenance_contract_company_id, contract_start_date, contract_end_date, other_contract_details; Parts: part_id, part_name, chargeable_yn, chargeable_amount, other_part_details; Skills: skill_id, skill_code, skill_description; Staff: staff_id, staff_name, gender, other_staff_details; Assets: asset_id, maintenance_contract_id, supplier_company_id, asset_details, asset_make, asset_model, asset_acquired_date, asset_disposed_date, other_asset_details; Asset_Parts: asset_id, part_id; Maintenance_Engineers: engineer_id, company_id, first_name, last_name, other_details; Engineer_Skills: engineer_id, skill_id; Fault_Log: fault_log_entry_id, asset_id, recorded_by_staff_id, fault_log_entry_datetime, fault_description, other_fault_details | Which engineer has visited the most times? Show the engineer id, first name and last name.", "sql": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "assets_maintenance", "query": "SELECT T1.engineer_id ,  T1.first_name ,  T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.engineer_id", ",", "T1.first_name", ",", "T1.last_name", "FROM", "Maintenance_Engineers", "AS", "T1", "JOIN", "Engineer_Visits", "AS", "T2", "GROUP", "BY", "T1.engineer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "engineer_id", ",", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "maintenance_engineers", "as", "t1", "join", "engineer_visits", "as", "t2", "group", "by", "t1", ".", "engineer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which engineer has visited the most times? Show the engineer id, first name and last name.", "question_toks": ["Which", "engineer", "has", "visited", "the", "most", "times", "?", "Show", "the", "engineer", "id", ",", "first", "name", "and", "last", "name", "."], "dataset_name": "spider", "guid": 2114}}
{"text": "architect: id, name, nationality, gender; bridge: architect_id, id, name, location, length_meters, length_feet; mill: architect_id, id, location, name, type, built_year, notes | What is the maximum length in meters for the bridges and what are the architects' names?", "sql": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id", "example": {"db_id": "architecture", "query": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id", "query_toks": ["SELECT", "max", "(", "T1.length_meters", ")", ",", "T2.name", "FROM", "bridge", "AS", "T1", "JOIN", "architect", "AS", "T2", "ON", "T1.architect_id", "=", "T2.id"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "length_meters", ")", ",", "t2", ".", "name", "from", "bridge", "as", "t1", "join", "architect", "as", "t2", "on", "t1", ".", "architect_id", "=", "t2", ".", "id"], "question": "What is the maximum length in meters for the bridges and what are the architects' names?", "question_toks": ["What", "is", "the", "maximum", "length", "in", "meters", "for", "the", "bridges", "and", "what", "are", "the", "architects", "'", "names", "?"], "dataset_name": "spider", "guid": 2115}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the title of the prerequisite to the course International Finance.", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.prereq_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'International", "Finance", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "prereq_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "Give the title of the prerequisite to the course International Finance.", "question_toks": ["Give", "the", "title", "of", "the", "prerequisite", "to", "the", "course", "International", "Finance", "."], "dataset_name": "spider", "guid": 460}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty lines are there at San Francisco State University in 2004?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"", "example": {"db_id": "csu_1", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"", "query_toks": ["SELECT", "faculty", "FROM", "faculty", "AS", "T1", "JOIN", "campuses", "AS", "T2", "ON", "T1.campus", "=", "T2.id", "WHERE", "T1.year", "=", "2004", "AND", "T2.campus", "=", "``", "San", "Francisco", "State", "University", "''"], "query_toks_no_value": ["select", "faculty", "from", "faculty", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "How many faculty lines are there at San Francisco State University in 2004?", "question_toks": ["How", "many", "faculty", "lines", "are", "there", "at", "San", "Francisco", "State", "University", "in", "2004", "?"], "dataset_name": "spider", "guid": 461}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the total number of students in each department.", "sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "example": {"db_id": "college_2", "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_name", "FROM", "student", "GROUP", "BY", "dept_name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_name", "from", "student", "group", "by", "dept_name"], "question": "Find the total number of students in each department.", "question_toks": ["Find", "the", "total", "number", "of", "students", "in", "each", "department", "."], "dataset_name": "spider", "guid": 462}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physicians have never taken any appointment? Find their names.", "sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "example": {"db_id": "hospital_1", "query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "query_toks": ["SELECT", "name", "FROM", "physician", "EXCEPT", "SELECT", "T2.name", "FROM", "appointment", "AS", "T1", "JOIN", "physician", "AS", "T2", "ON", "T1.Physician", "=", "T2.EmployeeID"], "query_toks_no_value": ["select", "name", "from", "physician", "except", "select", "t2", ".", "name", "from", "appointment", "as", "t1", "join", "physician", "as", "t2", "on", "t1", ".", "physician", "=", "t2", ".", "employeeid"], "question": "Which physicians have never taken any appointment? Find their names.", "question_toks": ["Which", "physicians", "have", "never", "taken", "any", "appointment", "?", "Find", "their", "names", "."], "dataset_name": "spider", "guid": 463}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the sum of budgets of the Marketing and Finance departments?", "sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "example": {"db_id": "college_2", "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "query_toks": ["SELECT", "sum", "(", "budget", ")", "FROM", "department", "WHERE", "dept_name", "=", "'Marketing", "'", "OR", "dept_name", "=", "'Finance", "'"], "query_toks_no_value": ["select", "sum", "(", "budget", ")", "from", "department", "where", "dept_name", "=", "value", "or", "dept_name", "=", "value"], "question": "What is the sum of budgets of the Marketing and Finance departments?", "question_toks": ["What", "is", "the", "sum", "of", "budgets", "of", "the", "Marketing", "and", "Finance", "departments", "?"], "dataset_name": "spider", "guid": 464}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | report the total number of degrees granted between 1998 and 2002.", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "example": {"db_id": "csu_1", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", ">", "=", "1998", "AND", "T2.year", "<", "=", "2002", "GROUP", "BY", "T1.campus"], "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", ">", "=", "value", "and", "t2", ".", "year", "<", "=", "value", "group", "by", "t1", ".", "campus"], "question": "report the total number of degrees granted between 1998 and 2002.", "question_toks": ["report", "the", "total", "number", "of", "degrees", "granted", "between", "1998", "and", "2002", "."], "dataset_name": "spider", "guid": 465}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the room number of the rooms which can sit 50 to 100 students and their buildings.", "sql": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "example": {"db_id": "college_2", "query": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100", "query_toks": ["SELECT", "building", ",", "room_number", "FROM", "classroom", "WHERE", "capacity", "BETWEEN", "50", "AND", "100"], "query_toks_no_value": ["select", "building", ",", "room_number", "from", "classroom", "where", "capacity", "between", "value", "and", "value"], "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.", "question_toks": ["Find", "the", "room", "number", "of", "the", "rooms", "which", "can", "sit", "50", "to", "100", "students", "and", "their", "buildings", "."], "dataset_name": "spider", "guid": 466}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the codes of all the courses that are located in room KLR209?", "sql": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'", "example": {"db_id": "college_1", "query": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'", "query_toks": ["SELECT", "class_code", "FROM", "CLASS", "WHERE", "class_room", "=", "'KLR209", "'"], "query_toks_no_value": ["select", "class_code", "from", "class", "where", "class_room", "=", "value"], "question": "What are the codes of all the courses that are located in room KLR209?", "question_toks": ["What", "are", "the", "codes", "of", "all", "the", "courses", "that", "are", "located", "in", "room", "KLR209", "?"], "dataset_name": "spider", "guid": 467}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the name of the department with an instructure who has a name like 'Soisalon'?", "sql": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%'", "query_toks": ["SELECT", "dept_name", "FROM", "instructor", "WHERE", "name", "LIKE", "'", "%", "Soisalon", "%", "'"], "query_toks_no_value": ["select", "dept_name", "from", "instructor", "where", "name", "like", "value"], "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "an", "instructure", "who", "has", "a", "name", "like", "'Soisalon", "'", "?"], "dataset_name": "spider", "guid": 468}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of all instructors in the Comp. Sci. department?", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "dept_name", "=", "'Comp", ".", "Sci", ".", "'"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "dept_name", "=", "value"], "question": "What are the names of all instructors in the Comp. Sci. department?", "question_toks": ["What", "are", "the", "names", "of", "all", "instructors", "in", "the", "Comp", ".", "Sci", ".", "department", "?"], "dataset_name": "spider", "guid": 469}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names and birthdates of the professors in charge of ACCT-211?", "sql": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"", "example": {"db_id": "college_1", "query": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"", "query_toks": ["SELECT", "DISTINCT", "T1.EMP_FNAME", ",", "T1.EMP_DOB", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.EMP_NUM", "=", "T2.PROF_NUM", "WHERE", "CRS_CODE", "=", "``", "ACCT-211", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "emp_fname", ",", "t1", ".", "emp_dob", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value"], "question": "What are the first names and birthdates of the professors in charge of ACCT-211?", "question_toks": ["What", "are", "the", "first", "names", "and", "birthdates", "of", "the", "professors", "in", "charge", "of", "ACCT-211", "?"], "dataset_name": "spider", "guid": 470}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the average grade point of student whose last name is Smith.", "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"", "example": {"db_id": "college_3", "query": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"", "query_toks": ["SELECT", "avg", "(", "T2.gradepoint", ")", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T3.LName", "=", "``", "Smith", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "gradepoint", ")", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "lname", "=", "value"], "question": "Find the average grade point of student whose last name is Smith.", "question_toks": ["Find", "the", "average", "grade", "point", "of", "student", "whose", "last", "name", "is", "Smith", "."], "dataset_name": "spider", "guid": 471}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the first names and last names of male (sex is M) faculties who live in building NEB.", "sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"", "example": {"db_id": "college_3", "query": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "Fname", ",", "Lname", "FROM", "FACULTY", "WHERE", "sex", "=", "``", "M", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "faculty", "where", "sex", "=", "value", "and", "building", "=", "value"], "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.", "question_toks": ["Find", "the", "first", "names", "and", "last", "names", "of", "male", "(", "sex", "is", "M", ")", "faculties", "who", "live", "in", "building", "NEB", "."], "dataset_name": "spider", "guid": 472}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the max, average, and minimum gpa of all students in each department.", "sql": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "max", "(", "stu_gpa", ")", ",", "avg", "(", "stu_gpa", ")", ",", "min", "(", "stu_gpa", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "max", "(", "stu_gpa", ")", ",", "avg", "(", "stu_gpa", ")", ",", "min", "(", "stu_gpa", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "Find the max, average, and minimum gpa of all students in each department.", "question_toks": ["Find", "the", "max", ",", "average", ",", "and", "minimum", "gpa", "of", "all", "students", "in", "each", "department", "."], "dataset_name": "spider", "guid": 473}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Which year has the most degrees conferred?", "sql": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "degrees", "GROUP", "BY", "YEAR", "ORDER", "BY", "sum", "(", "degrees", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "degrees", "group", "by", "year", "order", "by", "sum", "(", "degrees", ")", "desc", "limit", "value"], "question": "Which year has the most degrees conferred?", "question_toks": ["Which", "year", "has", "the", "most", "degrees", "conferred", "?"], "dataset_name": "spider", "guid": 474}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "INTERSECT", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "intersect", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?", "question_toks": ["What", "are", "the", "ids", "for", "courses", "that", "were", "offered", "in", "both", "Fall", "of", "2009", "and", "Spring", "of", "2010", "?"], "dataset_name": "spider", "guid": 475}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of students who didn't take any course from Biology department.", "sql": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "id", "NOT", "IN", "(", "SELECT", "T1.id", "FROM", "takes", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.dept_name", "=", "'Biology", "'", ")"], "query_toks_no_value": ["select", "name", "from", "student", "where", "id", "not", "in", "(", "select", "t1", ".", "id", "from", "takes", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "dept_name", "=", "value", ")"], "question": "Find the name of students who didn't take any course from Biology department.", "question_toks": ["Find", "the", "name", "of", "students", "who", "did", "n't", "take", "any", "course", "from", "Biology", "department", "."], "dataset_name": "spider", "guid": 476}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the department that offers the highest total credits?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "course", "GROUP", "BY", "dept_name", "ORDER", "BY", "sum", "(", "credits", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "course", "group", "by", "dept_name", "order", "by", "sum", "(", "credits", ")", "desc", "limit", "value"], "question": "Find the name of the department that offers the highest total credits?", "question_toks": ["Find", "the", "name", "of", "the", "department", "that", "offers", "the", "highest", "total", "credits", "?"], "dataset_name": "spider", "guid": 477}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many different locations does the school with code BUS has?", "sql": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_address", ")", "FROM", "department", "WHERE", "school_code", "=", "'BUS", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_address", ")", "from", "department", "where", "school_code", "=", "value"], "question": "How many different locations does the school with code BUS has?", "question_toks": ["How", "many", "different", "locations", "does", "the", "school", "with", "code", "BUS", "has", "?"], "dataset_name": "spider", "guid": 478}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the unique block codes that have available rooms?", "sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0", "query_toks": ["SELECT", "DISTINCT", "blockcode", "FROM", "room", "WHERE", "unavailable", "=", "0"], "query_toks_no_value": ["select", "distinct", "blockcode", "from", "room", "where", "unavailable", "=", "value"], "question": "What are the unique block codes that have available rooms?", "question_toks": ["What", "are", "the", "unique", "block", "codes", "that", "have", "available", "rooms", "?"], "dataset_name": "spider", "guid": 479}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many patients are not using Procrastin-X as medication?", "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )", "example": {"db_id": "hospital_1", "query": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "patient", "WHERE", "SSN", "NOT", "IN", "(", "SELECT", "T1.patient", "FROM", "Prescribes", "AS", "T1", "JOIN", "Medication", "AS", "T2", "ON", "T1.Medication", "=", "T2.Code", "WHERE", "T2.name", "=", "'Procrastin-X", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "patient", "where", "ssn", "not", "in", "(", "select", "t1", ".", "patient", "from", "prescribes", "as", "t1", "join", "medication", "as", "t2", "on", "t1", ".", "medication", "=", "t2", ".", "code", "where", "t2", ".", "name", "=", "value", ")"], "question": "How many patients are not using Procrastin-X as medication?", "question_toks": ["How", "many", "patients", "are", "not", "using", "Procrastin-X", "as", "medication", "?"], "dataset_name": "spider", "guid": 480}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of students who have taken Statistics courses?", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "example": {"db_id": "college_2", "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "query_toks": ["SELECT", "T3.name", "FROM", "course", "AS", "T1", "JOIN", "takes", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "JOIN", "student", "AS", "T3", "ON", "T2.id", "=", "T3.id", "WHERE", "T1.dept_name", "=", "'Statistics", "'"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "course", "as", "t1", "join", "takes", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "student", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "id", "where", "t1", ".", "dept_name", "=", "value"], "question": "What are the names of students who have taken Statistics courses?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "have", "taken", "Statistics", "courses", "?"], "dataset_name": "spider", "guid": 481}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Tell me the employee id of the head of the department with the least employees.", "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "example": {"db_id": "hospital_1", "query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "query_toks": ["SELECT", "head", "FROM", "department", "GROUP", "BY", "departmentID", "ORDER", "BY", "count", "(", "departmentID", ")", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "head", "from", "department", "group", "by", "departmentid", "order", "by", "count", "(", "departmentid", ")", "limit", "value"], "question": "Tell me the employee id of the head of the department with the least employees.", "question_toks": ["Tell", "me", "the", "employee", "id", "of", "the", "head", "of", "the", "department", "with", "the", "least", "employees", "."], "dataset_name": "spider", "guid": 482}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of students who took a course in the Fall of 2003?", "sql": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "id", "IN", "(", "SELECT", "id", "FROM", "takes", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2003", ")"], "query_toks_no_value": ["select", "name", "from", "student", "where", "id", "in", "(", "select", "id", "from", "takes", "where", "semester", "=", "value", "and", "year", "=", "value", ")"], "question": "What are the names of students who took a course in the Fall of 2003?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "took", "a", "course", "in", "the", "Fall", "of", "2003", "?"], "dataset_name": "spider", "guid": 483}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Which campus was opened between 1935 and 1939?", "sql": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", ">", "=", "1935", "AND", "YEAR", "<", "=", "1939"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", ">", "=", "value", "and", "year", "<", "=", "value"], "question": "Which campus was opened between 1935 and 1939?", "question_toks": ["Which", "campus", "was", "opened", "between", "1935", "and", "1939", "?"], "dataset_name": "spider", "guid": 484}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many classes exist for each school?", "sql": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T3.school_code", "FROM", "CLASS", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "GROUP", "BY", "T3.school_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t3", ".", "school_code", "from", "class", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "group", "by", "t3", ".", "school_code"], "question": "How many classes exist for each school?", "question_toks": ["How", "many", "classes", "exist", "for", "each", "school", "?"], "dataset_name": "spider", "guid": 485}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses are located in the county of Los Angeles?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value"], "question": "What campuses are located in the county of Los Angeles?", "question_toks": ["What", "campuses", "are", "located", "in", "the", "county", "of", "Los", "Angeles", "?"], "dataset_name": "spider", "guid": 486}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many rooms are located for each block code?", "sql": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode", "example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.blockcode", "FROM", "BLOCK", "AS", "T1", "JOIN", "room", "AS", "T2", "ON", "T1.blockfloor", "=", "T2.blockfloor", "AND", "T1.blockcode", "=", "T2.blockcode", "GROUP", "BY", "T1.blockcode"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "blockcode", "from", "block", "as", "t1", "join", "room", "as", "t2", "on", "t1", ".", "blockfloor", "=", "t2", ".", "blockfloor", "and", "t1", ".", "blockcode", "=", "t2", ".", "blockcode", "group", "by", "t1", ".", "blockcode"], "question": "How many rooms are located for each block code?", "question_toks": ["How", "many", "rooms", "are", "located", "for", "each", "block", "code", "?"], "dataset_name": "spider", "guid": 487}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the id of the patient who stayed in room 111 most recently?", "sql": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1", "query_toks": ["SELECT", "patient", "FROM", "stay", "WHERE", "room", "=", "111", "ORDER", "BY", "staystart", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "patient", "from", "stay", "where", "room", "=", "value", "order", "by", "staystart", "desc", "limit", "value"], "question": "What is the id of the patient who stayed in room 111 most recently?", "question_toks": ["What", "is", "the", "id", "of", "the", "patient", "who", "stayed", "in", "room", "111", "most", "recently", "?"], "dataset_name": "spider", "guid": 488}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the names of all the physicians who prescribe Thesisin as medication.", "sql": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "medication", "AS", "T3", "ON", "T3.code", "=", "T2.medication", "WHERE", "T3.name", "=", "``", "Thesisin", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "physician", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "medication", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "medication", "where", "t3", ".", "name", "=", "value"], "question": "List the names of all the physicians who prescribe Thesisin as medication.", "question_toks": ["List", "the", "names", "of", "all", "the", "physicians", "who", "prescribe", "Thesisin", "as", "medication", "."], "dataset_name": "spider", "guid": 489}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the id of the instructor who advises of all students from History department?", "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "example": {"db_id": "college_2", "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "query_toks": ["SELECT", "i_id", "FROM", "advisor", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.s_id", "=", "T2.id", "WHERE", "T2.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "i_id", "from", "advisor", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "s_id", "=", "t2", ".", "id", "where", "t2", ".", "dept_name", "=", "value"], "question": "What is the id of the instructor who advises of all students from History department?", "question_toks": ["What", "is", "the", "id", "of", "the", "instructor", "who", "advises", "of", "all", "students", "from", "History", "department", "?"], "dataset_name": "spider", "guid": 490}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many different professors are there for the different schools?", "sql": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code"], "question": "How many different professors are there for the different schools?", "question_toks": ["How", "many", "different", "professors", "are", "there", "for", "the", "different", "schools", "?"], "dataset_name": "spider", "guid": 491}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the total credits of all classes offered by each department.", "sql": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code", "example": {"db_id": "college_1", "query": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code", "query_toks": ["SELECT", "sum", "(", "T1.crs_credit", ")", ",", "T1.dept_code", "FROM", "course", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "GROUP", "BY", "T1.dept_code"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "crs_credit", ")", ",", "t1", ".", "dept_code", "from", "course", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "group", "by", "t1", ".", "dept_code"], "question": "Find the total credits of all classes offered by each department.", "question_toks": ["Find", "the", "total", "credits", "of", "all", "classes", "offered", "by", "each", "department", "."], "dataset_name": "spider", "guid": 492}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the total number of employees.", "sql": "SELECT count(*) FROM employee", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM employee", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee"], "question": "Find the total number of employees.", "question_toks": ["Find", "the", "total", "number", "of", "employees", "."], "dataset_name": "spider", "guid": 493}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of physicians who are in charge of more than one patient.", "sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.employeeid", "=", "T2.PCP", "GROUP", "BY", "T1.employeeid", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "pcp", "group", "by", "t1", ".", "employeeid", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of physicians who are in charge of more than one patient.", "question_toks": ["Find", "the", "name", "of", "physicians", "who", "are", "in", "charge", "of", "more", "than", "one", "patient", "."], "dataset_name": "spider", "guid": 494}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first name and office of history professor who did not get a Ph.D. degree.", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.prof_office", "FROM", "professor", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T1.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "AND", "T1.prof_high_degree", "!", "=", "'Ph.D", ".", "'"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "prof_office", "from", "professor", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t1", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "and", "t1", ".", "prof_high_degree", "!", "=", "value"], "question": "Find the first name and office of history professor who did not get a Ph.D. degree.", "question_toks": ["Find", "the", "first", "name", "and", "office", "of", "history", "professor", "who", "did", "not", "get", "a", "Ph.D.", "degree", "."], "dataset_name": "spider", "guid": 495}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title of the prerequisite class of International Finance course?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.prereq_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'International", "Finance", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "prereq_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "What is the title of the prerequisite class of International Finance course?", "question_toks": ["What", "is", "the", "title", "of", "the", "prerequisite", "class", "of", "International", "Finance", "course", "?"], "dataset_name": "spider", "guid": 496}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the last name of the student who got a grade A in the class with code 10018.", "sql": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018", "example": {"db_id": "college_1", "query": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018", "query_toks": ["SELECT", "T1.stu_lname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "T2.enroll_grade", "=", "'A", "'", "AND", "T2.class_code", "=", "10018"], "query_toks_no_value": ["select", "t1", ".", "stu_lname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t2", ".", "enroll_grade", "=", "value", "and", "t2", ".", "class_code", "=", "value"], "question": "What is the last name of the student who got a grade A in the class with code 10018.", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "student", "who", "got", "a", "grade", "A", "in", "the", "class", "with", "code", "10018", "."], "dataset_name": "spider", "guid": 497}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?", "sql": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'", "example": {"db_id": "college_1", "query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'", "query_toks": ["SELECT", "DISTINCT", "T2.emp_fname", ",", "T3.prof_high_degree", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "emp_fname", ",", "t3", ".", "prof_high_degree", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?", "question_toks": ["What", "are", "the", "different", "first", "names", "and", "highest", "degree", "attained", "for", "professors", "teaching", "in", "the", "Computer", "Information", "Systems", "department", "?"], "dataset_name": "spider", "guid": 498}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the courses that do not have any prerequisite?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "NOT", "IN", "(", "SELECT", "course_id", "FROM", "prereq", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "not", "in", "(", "select", "course_id", "from", "prereq", ")"], "question": "Find the name of the courses that do not have any prerequisite?", "question_toks": ["Find", "the", "name", "of", "the", "courses", "that", "do", "not", "have", "any", "prerequisite", "?"], "dataset_name": "spider", "guid": 499}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What are the degrees conferred in \"San Francisco State University\" in 2001.", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001", "example": {"db_id": "csu_1", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001", "query_toks": ["SELECT", "degrees", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "t2.year", "=", "2001"], "query_toks_no_value": ["select", "degrees", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.", "question_toks": ["What", "are", "the", "degrees", "conferred", "in", "``", "San", "Francisco", "State", "University", "''", "in", "2001", "."], "dataset_name": "spider", "guid": 500}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the title of the course that is offered by more than one department.", "sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "query_toks": ["SELECT", "title", "FROM", "course", "GROUP", "BY", "title", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "title", "from", "course", "group", "by", "title", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the title of the course that is offered by more than one department.", "question_toks": ["Find", "the", "title", "of", "the", "course", "that", "is", "offered", "by", "more", "than", "one", "department", "."], "dataset_name": "spider", "guid": 501}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Count how many appointments have been made in total.", "sql": "SELECT count(*) FROM appointment", "example": {"db_id": "hospital_1", "query": "SELECT count(*) FROM appointment", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "appointment"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "appointment"], "question": "Count how many appointments have been made in total.", "question_toks": ["Count", "how", "many", "appointments", "have", "been", "made", "in", "total", "."], "dataset_name": "spider", "guid": 502}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the first names of students, ordered by age from greatest to least?", "sql": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "example": {"db_id": "college_3", "query": "SELECT Fname FROM STUDENT ORDER BY Age DESC", "query_toks": ["SELECT", "Fname", "FROM", "STUDENT", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "fname", "from", "student", "order", "by", "age", "desc"], "question": "What are the first names of students, ordered by age from greatest to least?", "question_toks": ["What", "are", "the", "first", "names", "of", "students", ",", "ordered", "by", "age", "from", "greatest", "to", "least", "?"], "dataset_name": "spider", "guid": 503}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many patients do each physician take care of? List their names and number of patients they take care of.", "sql": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid", "example": {"db_id": "hospital_1", "query": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid", "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "physician", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.employeeid", "=", "T2.PCP", "GROUP", "BY", "T1.employeeid"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "physician", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "pcp", "group", "by", "t1", ".", "employeeid"], "question": "How many patients do each physician take care of? List their names and number of patients they take care of.", "question_toks": ["How", "many", "patients", "do", "each", "physician", "take", "care", "of", "?", "List", "their", "names", "and", "number", "of", "patients", "they", "take", "care", "of", "."], "dataset_name": "spider", "guid": 504}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of department where has the largest number of professors with a Ph.D. degree?", "sql": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", ",", "T1.dept_code", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T1.prof_high_degree", "=", "'Ph.D", ".", "'", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t1", ".", "dept_code", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t1", ".", "prof_high_degree", "=", "value", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of department where has the largest number of professors with a Ph.D. degree?", "question_toks": ["What", "is", "the", "name", "of", "department", "where", "has", "the", "largest", "number", "of", "professors", "with", "a", "Ph.D.", "degree", "?"], "dataset_name": "spider", "guid": 505}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the name of physicians who never took any appointment.", "sql": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "example": {"db_id": "hospital_1", "query": "SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID", "query_toks": ["SELECT", "name", "FROM", "physician", "EXCEPT", "SELECT", "T2.name", "FROM", "appointment", "AS", "T1", "JOIN", "physician", "AS", "T2", "ON", "T1.Physician", "=", "T2.EmployeeID"], "query_toks_no_value": ["select", "name", "from", "physician", "except", "select", "t2", ".", "name", "from", "appointment", "as", "t1", "join", "physician", "as", "t2", "on", "t1", ".", "physician", "=", "t2", ".", "employeeid"], "question": "List the name of physicians who never took any appointment.", "question_toks": ["List", "the", "name", "of", "physicians", "who", "never", "took", "any", "appointment", "."], "dataset_name": "spider", "guid": 506}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many universities have a campus fee higher than average?", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "csu_fees", "WHERE", "campusfee", ">", "(", "SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "csu_fees", "where", "campusfee", ">", "(", "select", "avg", "(", "campusfee", ")", "from", "csu_fees", ")"], "question": "How many universities have a campus fee higher than average?", "question_toks": ["How", "many", "universities", "have", "a", "campus", "fee", "higher", "than", "average", "?"], "dataset_name": "spider", "guid": 507}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the code of the course which the student whose last name is Smithson took?", "sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'", "example": {"db_id": "college_1", "query": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'", "query_toks": ["SELECT", "T1.crs_code", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T3.stu_num", "=", "T2.stu_num", "WHERE", "T3.stu_lname", "=", "'Smithson", "'"], "query_toks_no_value": ["select", "t1", ".", "crs_code", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t3", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t3", ".", "stu_lname", "=", "value"], "question": "What is the code of the course which the student whose last name is Smithson took?", "question_toks": ["What", "is", "the", "code", "of", "the", "course", "which", "the", "student", "whose", "last", "name", "is", "Smithson", "took", "?"], "dataset_name": "spider", "guid": 508}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the total number of instructors who teach a course in the Spring 2010 semester.", "sql": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "ID", ")", "FROM", "teaches", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "count", "(", "distinct", "id", ")", "from", "teaches", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.", "question_toks": ["Find", "the", "total", "number", "of", "instructors", "who", "teach", "a", "course", "in", "the", "Spring", "2010", "semester", "."], "dataset_name": "spider", "guid": 509}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the names of patients who have made appointments.", "sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn", "example": {"db_id": "hospital_1", "query": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn", "query_toks": ["SELECT", "name", "FROM", "appointment", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.patient", "=", "T2.ssn"], "query_toks_no_value": ["select", "name", "from", "appointment", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn"], "question": "List the names of patients who have made appointments.", "question_toks": ["List", "the", "names", "of", "patients", "who", "have", "made", "appointments", "."], "dataset_name": "spider", "guid": 510}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many degrees were conferred in \"San Jose State University\" in 2000?", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000", "example": {"db_id": "csu_1", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000", "query_toks": ["SELECT", "degrees", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "t2.year", "=", "2000"], "query_toks_no_value": ["select", "degrees", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "How many degrees were conferred in \"San Jose State University\" in 2000?", "question_toks": ["How", "many", "degrees", "were", "conferred", "in", "``", "San", "Jose", "State", "University", "''", "in", "2000", "?"], "dataset_name": "spider", "guid": 511}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of all physicians and their primary affiliated departments' names.", "sql": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1", "query_toks": ["SELECT", "T1.name", ",", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T2.PrimaryAffiliation", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t3", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t2", ".", "primaryaffiliation", "=", "value"], "question": "Find the names of all physicians and their primary affiliated departments' names.", "question_toks": ["Find", "the", "names", "of", "all", "physicians", "and", "their", "primary", "affiliated", "departments", "'", "names", "."], "dataset_name": "spider", "guid": 512}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What procedures cost less than 5000 and have John Wen as a trained physician?", "sql": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "name", "FROM", "procedures", "WHERE", "cost", "<", "5000", "INTERSECT", "SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "name", "from", "procedures", "where", "cost", "<", "value", "intersect", "select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "What procedures cost less than 5000 and have John Wen as a trained physician?", "question_toks": ["What", "procedures", "cost", "less", "than", "5000", "and", "have", "John", "Wen", "as", "a", "trained", "physician", "?"], "dataset_name": "spider", "guid": 513}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the total number of degrees granted after 2000 for each Orange county campus?", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus", "example": {"db_id": "csu_1", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus", "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T1.county", "=", "``", "Orange", "''", "AND", "T2.year", ">", "=", "2000", "GROUP", "BY", "T1.campus"], "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "county", "=", "value", "and", "t2", ".", "year", ">", "=", "value", "group", "by", "t1", ".", "campus"], "question": "What is the total number of degrees granted after 2000 for each Orange county campus?", "question_toks": ["What", "is", "the", "total", "number", "of", "degrees", "granted", "after", "2000", "for", "each", "Orange", "county", "campus", "?"], "dataset_name": "spider", "guid": 514}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | How many courses are there in total?", "sql": "SELECT count(*) FROM COURSE", "example": {"db_id": "college_3", "query": "SELECT count(*) FROM COURSE", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "COURSE"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "course"], "question": "How many courses are there in total?", "question_toks": ["How", "many", "courses", "are", "there", "in", "total", "?"], "dataset_name": "spider", "guid": 515}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T3.name", "=", "'Surgery", "'", "INTERSECT", "SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T3.name", "=", "'Psychiatry", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t3", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t3", ".", "name", "=", "value"], "question": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.", "question_toks": ["Which", "physicians", "are", "affiliated", "with", "both", "Surgery", "and", "Psychiatry", "departments", "?", "Tell", "me", "their", "names", "."], "dataset_name": "spider", "guid": 516}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.", "sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "id", "FROM", "teaches", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "EXCEPT", "SELECT", "id", "FROM", "teaches", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "id", "from", "teaches", "where", "semester", "=", "value", "and", "year", "=", "value", "except", "select", "id", "from", "teaches", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.", "question_toks": ["Find", "the", "id", "of", "instructors", "who", "taught", "a", "class", "in", "Fall", "2009", "but", "not", "in", "Spring", "2010", "."], "dataset_name": "spider", "guid": 517}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of instructor who is the advisor of the student who has the highest number of total credits.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "ORDER", "BY", "T3.tot_cred", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "order", "by", "t3", ".", "tot_cred", "desc", "limit", "value"], "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.", "question_toks": ["Find", "the", "name", "of", "instructor", "who", "is", "the", "advisor", "of", "the", "student", "who", "has", "the", "highest", "number", "of", "total", "credits", "."], "dataset_name": "spider", "guid": 518}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors who has a either Ph.D. or MA degree?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'", "OR", "prof_high_degree", "=", "'MA", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "where", "prof_high_degree", "=", "value", "or", "prof_high_degree", "=", "value"], "question": "How many professors who has a either Ph.D. or MA degree?", "question_toks": ["How", "many", "professors", "who", "has", "a", "either", "Ph.D.", "or", "MA", "degree", "?"], "dataset_name": "spider", "guid": 519}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the campus fee of \"San Francisco State University\" in year 1996?", "sql": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996", "example": {"db_id": "csu_1", "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996", "query_toks": ["SELECT", "campusfee", "FROM", "campuses", "AS", "T1", "JOIN", "csu_fees", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "T2.year", "=", "1996"], "query_toks_no_value": ["select", "campusfee", "from", "campuses", "as", "t1", "join", "csu_fees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "What is the campus fee of \"San Francisco State University\" in year 1996?", "question_toks": ["What", "is", "the", "campus", "fee", "of", "``", "San", "Francisco", "State", "University", "''", "in", "year", "1996", "?"], "dataset_name": "spider", "guid": 520}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the name of the instructor who advises the student with the greatest number of total credits?", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "ORDER", "BY", "T3.tot_cred", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "order", "by", "t3", ".", "tot_cred", "desc", "limit", "value"], "question": "What is the name of the instructor who advises the student with the greatest number of total credits?", "question_toks": ["What", "is", "the", "name", "of", "the", "instructor", "who", "advises", "the", "student", "with", "the", "greatest", "number", "of", "total", "credits", "?"], "dataset_name": "spider", "guid": 521}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the number of patients who are not using the medication of Procrastin-X.", "sql": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )", "example": {"db_id": "hospital_1", "query": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "patient", "WHERE", "SSN", "NOT", "IN", "(", "SELECT", "T1.patient", "FROM", "Prescribes", "AS", "T1", "JOIN", "Medication", "AS", "T2", "ON", "T1.Medication", "=", "T2.Code", "WHERE", "T2.name", "=", "'Procrastin-X", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "patient", "where", "ssn", "not", "in", "(", "select", "t1", ".", "patient", "from", "prescribes", "as", "t1", "join", "medication", "as", "t2", "on", "t1", ".", "medication", "=", "t2", ".", "code", "where", "t2", ".", "name", "=", "value", ")"], "question": "Find the number of patients who are not using the medication of Procrastin-X.", "question_toks": ["Find", "the", "number", "of", "patients", "who", "are", "not", "using", "the", "medication", "of", "Procrastin-X", "."], "dataset_name": "spider", "guid": 522}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors attained either Ph.D. or Masters degrees?", "sql": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'", "OR", "prof_high_degree", "=", "'MA", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "where", "prof_high_degree", "=", "value", "or", "prof_high_degree", "=", "value"], "question": "How many professors attained either Ph.D. or Masters degrees?", "question_toks": ["How", "many", "professors", "attained", "either", "Ph.D.", "or", "Masters", "degrees", "?"], "dataset_name": "spider", "guid": 523}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of the nurse who has the largest number of appointments.", "sql": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "nurse", "AS", "T1", "JOIN", "appointment", "AS", "T2", "ON", "T1.employeeid", "=", "T2.prepnurse", "GROUP", "BY", "T1.employeeid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "nurse", "as", "t1", "join", "appointment", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "prepnurse", "group", "by", "t1", ".", "employeeid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the nurse who has the largest number of appointments.", "question_toks": ["Find", "the", "name", "of", "the", "nurse", "who", "has", "the", "largest", "number", "of", "appointments", "."], "dataset_name": "spider", "guid": 524}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many credits is the course that the student with the last name Smithson took, and what is its description?", "sql": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'", "example": {"db_id": "college_1", "query": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'", "query_toks": ["SELECT", "T4.crs_description", ",", "T4.crs_credit", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T3.stu_num", "=", "T2.stu_num", "JOIN", "course", "AS", "T4", "ON", "T4.crs_code", "=", "T1.crs_code", "WHERE", "T3.stu_lname", "=", "'Smithson", "'"], "query_toks_no_value": ["select", "t4", ".", "crs_description", ",", "t4", ".", "crs_credit", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t3", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "course", "as", "t4", "on", "t4", ".", "crs_code", "=", "t1", ".", "crs_code", "where", "t3", ".", "stu_lname", "=", "value"], "question": "How many credits is the course that the student with the last name Smithson took, and what is its description?", "question_toks": ["How", "many", "credits", "is", "the", "course", "that", "the", "student", "with", "the", "last", "name", "Smithson", "took", ",", "and", "what", "is", "its", "description", "?"], "dataset_name": "spider", "guid": 525}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | list names of all departments ordered by their names.", "sql": "SELECT dept_name FROM department ORDER BY dept_name", "example": {"db_id": "college_1", "query": "SELECT dept_name FROM department ORDER BY dept_name", "query_toks": ["SELECT", "dept_name", "FROM", "department", "ORDER", "BY", "dept_name"], "query_toks_no_value": ["select", "dept_name", "from", "department", "order", "by", "dept_name"], "question": "list names of all departments ordered by their names.", "question_toks": ["list", "names", "of", "all", "departments", "ordered", "by", "their", "names", "."], "dataset_name": "spider", "guid": 526}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the total credits of courses provided by different department.", "sql": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "example": {"db_id": "college_2", "query": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name", "query_toks": ["SELECT", "sum", "(", "credits", ")", ",", "dept_name", "FROM", "course", "GROUP", "BY", "dept_name"], "query_toks_no_value": ["select", "sum", "(", "credits", ")", ",", "dept_name", "from", "course", "group", "by", "dept_name"], "question": "Find the total credits of courses provided by different department.", "question_toks": ["Find", "the", "total", "credits", "of", "courses", "provided", "by", "different", "department", "."], "dataset_name": "spider", "guid": 527}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of medication used on the patient who stays in room 111?", "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111", "example": {"db_id": "hospital_1", "query": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111", "query_toks": ["SELECT", "T4.name", "FROM", "stay", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.Patient", "=", "T2.SSN", "JOIN", "Prescribes", "AS", "T3", "ON", "T3.Patient", "=", "T2.SSN", "JOIN", "Medication", "AS", "T4", "ON", "T3.Medication", "=", "T4.Code", "WHERE", "room", "=", "111"], "query_toks_no_value": ["select", "t4", ".", "name", "from", "stay", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn", "join", "prescribes", "as", "t3", "on", "t3", ".", "patient", "=", "t2", ".", "ssn", "join", "medication", "as", "t4", "on", "t3", ".", "medication", "=", "t4", ".", "code", "where", "room", "=", "value"], "question": "Find the name of medication used on the patient who stays in room 111?", "question_toks": ["Find", "the", "name", "of", "medication", "used", "on", "the", "patient", "who", "stays", "in", "room", "111", "?"], "dataset_name": "spider", "guid": 528}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Which semeseter and year had the fewest students?", "sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "semester", ",", "YEAR", "FROM", "takes", "GROUP", "BY", "semester", ",", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "semester", ",", "year", "from", "takes", "group", "by", "semester", ",", "year", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Which semeseter and year had the fewest students?", "question_toks": ["Which", "semeseter", "and", "year", "had", "the", "fewest", "students", "?"], "dataset_name": "spider", "guid": 529}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?", "sql": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "name", "FROM", "procedures", "WHERE", "cost", ">", "1000", "EXCEPT", "SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "name", "from", "procedures", "where", "cost", ">", "value", "except", "select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?", "question_toks": ["Find", "the", "names", "of", "all", "procedures", "which", "cost", "more", "than", "1000", "but", "which", "physician", "John", "Wen", "was", "not", "trained", "in", "?"], "dataset_name": "spider", "guid": 530}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.", "sql": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "example": {"db_id": "college_2", "query": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred", "query_toks": ["SELECT", "T2.name", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "WHERE", "T3.dept_name", "=", "'Math", "'", "ORDER", "BY", "T3.tot_cred"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "where", "t3", ".", "dept_name", "=", "value", "order", "by", "t3", ".", "tot_cred"], "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.", "question_toks": ["Find", "the", "name", "of", "instructors", "who", "are", "advisors", "of", "the", "students", "from", "the", "Math", "department", ",", "and", "sort", "the", "results", "by", "students", "'", "total", "credit", "."], "dataset_name": "spider", "guid": 531}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the average fee for a CSU campus in the year of 1996?", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "example": {"db_id": "csu_1", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "query_toks": ["SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", "WHERE", "YEAR", "=", "1996"], "query_toks_no_value": ["select", "avg", "(", "campusfee", ")", "from", "csu_fees", "where", "year", "=", "value"], "question": "What is the average fee for a CSU campus in the year of 1996?", "question_toks": ["What", "is", "the", "average", "fee", "for", "a", "CSU", "campus", "in", "the", "year", "of", "1996", "?"], "dataset_name": "spider", "guid": 532}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the department name of the students with lowest gpa belongs to?", "sql": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "ORDER", "BY", "stu_gpa", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "order", "by", "stu_gpa", "limit", "value"], "question": "What is the department name of the students with lowest gpa belongs to?", "question_toks": ["What", "is", "the", "department", "name", "of", "the", "students", "with", "lowest", "gpa", "belongs", "to", "?"], "dataset_name": "spider", "guid": 533}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "salary", ">", "(", "SELECT", "min", "(", "salary", ")", "FROM", "instructor", "WHERE", "dept_name", "=", "'Biology", "'", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "salary", ">", "(", "select", "min", "(", "salary", ")", "from", "instructor", "where", "dept_name", "=", "value", ")"], "question": "Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.", "question_toks": ["Find", "names", "of", "instructors", "with", "salary", "greater", "than", "that", "of", "some", "(", "at", "least", "one", ")", "instructor", "in", "the", "Biology", "department", "."], "dataset_name": "spider", "guid": 534}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | List the names and buildings of all departments sorted by the budget from large to small.", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "query_toks": ["SELECT", "dept_name", ",", "building", "FROM", "department", "ORDER", "BY", "budget", "DESC"], "query_toks_no_value": ["select", "dept_name", ",", "building", "from", "department", "order", "by", "budget", "desc"], "question": "List the names and buildings of all departments sorted by the budget from large to small.", "question_toks": ["List", "the", "names", "and", "buildings", "of", "all", "departments", "sorted", "by", "the", "budget", "from", "large", "to", "small", "."], "dataset_name": "spider", "guid": 535}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Which department has the most professors with a Ph.D.?", "sql": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", ",", "T1.dept_code", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T1.prof_high_degree", "=", "'Ph.D", ".", "'", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t1", ".", "dept_code", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t1", ".", "prof_high_degree", "=", "value", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which department has the most professors with a Ph.D.?", "question_toks": ["Which", "department", "has", "the", "most", "professors", "with", "a", "Ph.D.", "?"], "dataset_name": "spider", "guid": 536}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T3.name", "=", "'Surgery", "'", "INTERSECT", "SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T3.name", "=", "'Psychiatry", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t3", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t3", ".", "name", "=", "value"], "question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.", "question_toks": ["Find", "the", "name", "of", "physicians", "who", "are", "affiliated", "with", "both", "Surgery", "and", "Psychiatry", "departments", "."], "dataset_name": "spider", "guid": 537}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find names of all students who took some course and got A or C.", "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'", "query_toks": ["SELECT", "T1.stu_fname", ",", "T1.stu_lname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "T2.enroll_grade", "=", "'C", "'", "OR", "T2.enroll_grade", "=", "'A", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", ",", "t1", ".", "stu_lname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t2", ".", "enroll_grade", "=", "value", "or", "t2", ".", "enroll_grade", "=", "value"], "question": "Find names of all students who took some course and got A or C.", "question_toks": ["Find", "names", "of", "all", "students", "who", "took", "some", "course", "and", "got", "A", "or", "C", "."], "dataset_name": "spider", "guid": 538}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of classes in each department.", "sql": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "CLASS", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "class", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "group", "by", "dept_code"], "question": "Find the number of classes in each department.", "question_toks": ["Find", "the", "number", "of", "classes", "in", "each", "department", "."], "dataset_name": "spider", "guid": 539}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the name of the department with the lowest budget.", "sql": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM department ORDER BY budget LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "department", "ORDER", "BY", "budget", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "department", "order", "by", "budget", "limit", "value"], "question": "Give the name of the department with the lowest budget.", "question_toks": ["Give", "the", "name", "of", "the", "department", "with", "the", "lowest", "budget", "."], "dataset_name": "spider", "guid": 540}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of students for each department.", "sql": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "Find the number of students for each department.", "question_toks": ["Find", "the", "number", "of", "students", "for", "each", "department", "."], "dataset_name": "spider", "guid": 541}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the number of professors for different school?", "sql": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code"], "question": "What is the number of professors for different school?", "question_toks": ["What", "is", "the", "number", "of", "professors", "for", "different", "school", "?"], "dataset_name": "spider", "guid": 542}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "sql": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "example": {"db_id": "college_2", "query": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title", "query_toks": ["SELECT", "T2.building", ",", "T2.room_number", ",", "T2.semester", ",", "T2.year", "FROM", "course", "AS", "T1", "JOIN", "SECTION", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T1.dept_name", "=", "'Psychology", "'", "ORDER", "BY", "T1.title"], "query_toks_no_value": ["select", "t2", ".", "building", ",", "t2", ".", "room_number", ",", "t2", ".", "semester", ",", "t2", ".", "year", "from", "course", "as", "t1", "join", "section", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t1", ".", "dept_name", "=", "value", "order", "by", "t1", ".", "title"], "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.", "question_toks": ["Find", "the", "building", ",", "room", "number", ",", "semester", "and", "year", "of", "all", "courses", "offered", "by", "Psychology", "department", "sorted", "by", "course", "titles", "."], "dataset_name": "spider", "guid": 543}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many different types of rooms are there?", "sql": "SELECT count(DISTINCT roomtype) FROM room", "example": {"db_id": "hospital_1", "query": "SELECT count(DISTINCT roomtype) FROM room", "query_toks": ["SELECT", "count", "(", "DISTINCT", "roomtype", ")", "FROM", "room"], "query_toks_no_value": ["select", "count", "(", "distinct", "roomtype", ")", "from", "room"], "question": "How many different types of rooms are there?", "question_toks": ["How", "many", "different", "types", "of", "rooms", "are", "there", "?"], "dataset_name": "spider", "guid": 544}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the distinct names of nurses on call?", "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "nurse", "AS", "T1", "JOIN", "on_call", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.nurse"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "nurse", "as", "t1", "join", "on_call", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "nurse"], "question": "What are the distinct names of nurses on call?", "question_toks": ["What", "are", "the", "distinct", "names", "of", "nurses", "on", "call", "?"], "dataset_name": "spider", "guid": 545}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all students in course ACCT-211?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "T3.stu_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T2.stu_num", "=", "T3.stu_num", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "t3", ".", "stu_fname", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t2", ".", "stu_num", "=", "t3", ".", "stu_num", "where", "t1", ".", "crs_code", "=", "value"], "question": "What are the first names of all students in course ACCT-211?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "in", "course", "ACCT-211", "?"], "dataset_name": "spider", "guid": 546}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the name and cost of all procedures sorted by the cost from the highest to the lowest.", "sql": "SELECT name ,  cost FROM procedures ORDER BY cost DESC", "example": {"db_id": "hospital_1", "query": "SELECT name ,  cost FROM procedures ORDER BY cost DESC", "query_toks": ["SELECT", "name", ",", "cost", "FROM", "procedures", "ORDER", "BY", "cost", "DESC"], "query_toks_no_value": ["select", "name", ",", "cost", "from", "procedures", "order", "by", "cost", "desc"], "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.", "question_toks": ["List", "the", "name", "and", "cost", "of", "all", "procedures", "sorted", "by", "the", "cost", "from", "the", "highest", "to", "the", "lowest", "."], "dataset_name": "spider", "guid": 547}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many patients' prescriptions are made by physician John Dorian?", "sql": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"", "example": {"db_id": "hospital_1", "query": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"", "query_toks": ["SELECT", "count", "(", "T1.SSN", ")", "FROM", "patient", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.SSN", "=", "T2.patient", "JOIN", "physician", "AS", "T3", "ON", "T2.physician", "=", "T3.employeeid", "WHERE", "T3.name", "=", "``", "John", "Dorian", "''"], "query_toks_no_value": ["select", "count", "(", "t1", ".", "ssn", ")", "from", "patient", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "ssn", "=", "t2", ".", "patient", "join", "physician", "as", "t3", "on", "t2", ".", "physician", "=", "t3", ".", "employeeid", "where", "t3", ".", "name", "=", "value"], "question": "How many patients' prescriptions are made by physician John Dorian?", "question_toks": ["How", "many", "patients", "'", "prescriptions", "are", "made", "by", "physician", "John", "Dorian", "?"], "dataset_name": "spider", "guid": 548}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the physician who was trained in the most expensive procedure?", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "ORDER", "BY", "T3.cost", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "order", "by", "t3", ".", "cost", "desc", "limit", "value"], "question": "Find the physician who was trained in the most expensive procedure?", "question_toks": ["Find", "the", "physician", "who", "was", "trained", "in", "the", "most", "expensive", "procedure", "?"], "dataset_name": "spider", "guid": 549}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of instructors who have taught C Programming courses?", "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "query_toks": ["SELECT", "T1.name", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.id", "=", "T2.id", "JOIN", "course", "AS", "T3", "ON", "T2.course_id", "=", "T3.course_id", "WHERE", "T3.title", "=", "'C", "Programming", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "join", "course", "as", "t3", "on", "t2", ".", "course_id", "=", "t3", ".", "course_id", "where", "t3", ".", "title", "=", "value"], "question": "What are the names of instructors who have taught C Programming courses?", "question_toks": ["What", "are", "the", "names", "of", "instructors", "who", "have", "taught", "C", "Programming", "courses", "?"], "dataset_name": "spider", "guid": 550}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names and offices of all instructors who have taught some course and the course description and the department name.", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code", "query_toks": ["SELECT", "T2.emp_fname", ",", "T4.prof_office", ",", "T3.crs_description", ",", "T5.dept_name", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "professor", "AS", "T4", "ON", "T2.emp_num", "=", "T4.emp_num", "JOIN", "department", "AS", "T5", "ON", "T4.dept_code", "=", "T5.dept_code"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t4", ".", "prof_office", ",", "t3", ".", "crs_description", ",", "t5", ".", "dept_name", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "professor", "as", "t4", "on", "t2", ".", "emp_num", "=", "t4", ".", "emp_num", "join", "department", "as", "t5", "on", "t4", ".", "dept_code", "=", "t5", ".", "dept_code"], "question": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.", "question_toks": ["Find", "the", "first", "names", "and", "offices", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "the", "course", "description", "and", "the", "department", "name", "."], "dataset_name": "spider", "guid": 551}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find all the campuses opened in 1958.", "sql": "SELECT campus FROM campuses WHERE YEAR  =  1958", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE YEAR  =  1958", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", "=", "1958"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", "=", "value"], "question": "Find all the campuses opened in 1958.", "question_toks": ["Find", "all", "the", "campuses", "opened", "in", "1958", "."], "dataset_name": "spider", "guid": 552}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give id of the instructor who advises students in the History department.", "sql": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "example": {"db_id": "college_2", "query": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'", "query_toks": ["SELECT", "i_id", "FROM", "advisor", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.s_id", "=", "T2.id", "WHERE", "T2.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "i_id", "from", "advisor", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "s_id", "=", "t2", ".", "id", "where", "t2", ".", "dept_name", "=", "value"], "question": "Give id of the instructor who advises students in the History department.", "question_toks": ["Give", "id", "of", "the", "instructor", "who", "advises", "students", "in", "the", "History", "department", "."], "dataset_name": "spider", "guid": 553}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many universities have a campus fee greater than the average?", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "csu_fees", "WHERE", "campusfee", ">", "(", "SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "csu_fees", "where", "campusfee", ">", "(", "select", "avg", "(", "campusfee", ")", "from", "csu_fees", ")"], "question": "How many universities have a campus fee greater than the average?", "question_toks": ["How", "many", "universities", "have", "a", "campus", "fee", "greater", "than", "the", "average", "?"], "dataset_name": "spider", "guid": 554}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Compute the mean price of procedures physician John Wen was trained in.", "sql": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT avg(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "avg", "(", "T3.cost", ")", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "cost", ")", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "Compute the mean price of procedures physician John Wen was trained in.", "question_toks": ["Compute", "the", "mean", "price", "of", "procedures", "physician", "John", "Wen", "was", "trained", "in", "."], "dataset_name": "spider", "guid": 555}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | List the names of departments where some physicians are primarily affiliated with.", "sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "affiliated_with", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.department", "=", "T2.departmentid", "WHERE", "PrimaryAffiliation", "=", "1"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "affiliated_with", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "department", "=", "t2", ".", "departmentid", "where", "primaryaffiliation", "=", "value"], "question": "List the names of departments where some physicians are primarily affiliated with.", "question_toks": ["List", "the", "names", "of", "departments", "where", "some", "physicians", "are", "primarily", "affiliated", "with", "."], "dataset_name": "spider", "guid": 556}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of distinct instructors who have taught a course.", "sql": "SELECT COUNT (DISTINCT id) FROM teaches", "example": {"db_id": "college_2", "query": "SELECT COUNT (DISTINCT id) FROM teaches", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "id", ")", "FROM", "teaches"], "query_toks_no_value": ["select", "count", "(", "distinct", "id", ")", "from", "teaches"], "question": "Count the number of distinct instructors who have taught a course.", "question_toks": ["Count", "the", "number", "of", "distinct", "instructors", "who", "have", "taught", "a", "course", "."], "dataset_name": "spider", "guid": 557}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the total number of campuses?", "sql": "SELECT count(*) FROM campuses", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM campuses", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "campuses"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "campuses"], "question": "What is the total number of campuses?", "question_toks": ["What", "is", "the", "total", "number", "of", "campuses", "?"], "dataset_name": "spider", "guid": 558}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the name of the deparment with the highest enrollment?", "sql": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "student", "GROUP", "BY", "dept_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "student", "group", "by", "dept_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the deparment with the highest enrollment?", "question_toks": ["What", "is", "the", "name", "of", "the", "deparment", "with", "the", "highest", "enrollment", "?"], "dataset_name": "spider", "guid": 559}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the first names of all students that are not enrolled in courses?", "sql": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "example": {"db_id": "college_3", "query": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)", "query_toks": ["SELECT", "Fname", "FROM", "STUDENT", "WHERE", "StuID", "NOT", "IN", "(", "SELECT", "StuID", "FROM", "ENROLLED_IN", ")"], "query_toks_no_value": ["select", "fname", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "enrolled_in", ")"], "question": "What are the first names of all students that are not enrolled in courses?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "that", "are", "not", "enrolled", "in", "courses", "?"], "dataset_name": "spider", "guid": 560}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of departments that have primarily affiliated physicians.", "sql": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "affiliated_with", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.department", "=", "T2.departmentid", "WHERE", "PrimaryAffiliation", "=", "1"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "affiliated_with", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "department", "=", "t2", ".", "departmentid", "where", "primaryaffiliation", "=", "value"], "question": "What are the names of departments that have primarily affiliated physicians.", "question_toks": ["What", "are", "the", "names", "of", "departments", "that", "have", "primarily", "affiliated", "physicians", "."], "dataset_name": "spider", "guid": 561}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first name and office of the professor who is in the history department and has a Ph.D. degree.", "sql": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'", "query_toks": ["SELECT", "T1.emp_fname", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T3.dept_code", "=", "T2.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "AND", "T2.prof_high_degree", "=", "'Ph.D", ".", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_fname", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t3", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "and", "t2", ".", "prof_high_degree", "=", "value"], "question": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.", "question_toks": ["Find", "the", "first", "name", "and", "office", "of", "the", "professor", "who", "is", "in", "the", "history", "department", "and", "has", "a", "Ph.D.", "degree", "."], "dataset_name": "spider", "guid": 562}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many students are in each department?", "sql": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "example": {"db_id": "college_2", "query": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_name", "FROM", "student", "GROUP", "BY", "dept_name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_name", "from", "student", "group", "by", "dept_name"], "question": "How many students are in each department?", "question_toks": ["How", "many", "students", "are", "in", "each", "department", "?"], "dataset_name": "spider", "guid": 563}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the average fee on a CSU campus in 2005?", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "example": {"db_id": "csu_1", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "query_toks": ["SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", "WHERE", "YEAR", "=", "2005"], "query_toks_no_value": ["select", "avg", "(", "campusfee", ")", "from", "csu_fees", "where", "year", "=", "value"], "question": "What is the average fee on a CSU campus in 2005?", "question_toks": ["What", "is", "the", "average", "fee", "on", "a", "CSU", "campus", "in", "2005", "?"], "dataset_name": "spider", "guid": 564}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of nurses who are on call.", "sql": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "nurse", "AS", "T1", "JOIN", "on_call", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.nurse"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "nurse", "as", "t1", "join", "on_call", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "nurse"], "question": "Find the names of nurses who are on call.", "question_toks": ["Find", "the", "names", "of", "nurses", "who", "are", "on", "call", "."], "dataset_name": "spider", "guid": 565}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.", "sql": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"", "query_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.position", "FROM", "physician", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "medication", "AS", "T3", "ON", "T3.code", "=", "T2.medication", "WHERE", "T3.Brand", "=", "``", "X", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", ",", "t1", ".", "position", "from", "physician", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "medication", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "medication", "where", "t3", ".", "brand", "=", "value"], "question": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.", "question_toks": ["Which", "physicians", "prescribe", "a", "medication", "of", "brand", "X", "?", "Tell", "me", "the", "name", "and", "position", "of", "those", "physicians", "."], "dataset_name": "spider", "guid": 566}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of courses without prerequisites?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "NOT", "IN", "(", "SELECT", "course_id", "FROM", "prereq", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "not", "in", "(", "select", "course_id", "from", "prereq", ")"], "question": "What are the names of courses without prerequisites?", "question_toks": ["What", "are", "the", "names", "of", "courses", "without", "prerequisites", "?"], "dataset_name": "spider", "guid": 567}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the name of the department in the Building Mergenthaler?", "sql": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"", "example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Building", "=", "``", "Mergenthaler", "''"], "query_toks_no_value": ["select", "dname", "from", "department", "where", "building", "=", "value"], "question": "What is the name of the department in the Building Mergenthaler?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "in", "the", "Building", "Mergenthaler", "?"], "dataset_name": "spider", "guid": 568}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many instructors are in the department with the highest budget, and what is their average salary?", "sql": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "query_toks": ["SELECT", "avg", "(", "T1.salary", ")", ",", "count", "(", "*", ")", "FROM", "instructor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_name", "=", "T2.dept_name", "ORDER", "BY", "T2.budget", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "salary", ")", ",", "count", "(", "*", ")", "from", "instructor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_name", "=", "t2", ".", "dept_name", "order", "by", "t2", ".", "budget", "desc", "limit", "value"], "question": "How many instructors are in the department with the highest budget, and what is their average salary?", "question_toks": ["How", "many", "instructors", "are", "in", "the", "department", "with", "the", "highest", "budget", ",", "and", "what", "is", "their", "average", "salary", "?"], "dataset_name": "spider", "guid": 569}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of physicians whose position title contains the word 'senior'.", "sql": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "example": {"db_id": "hospital_1", "query": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'", "query_toks": ["SELECT", "name", "FROM", "physician", "WHERE", "POSITION", "LIKE", "'", "%", "senior", "%", "'"], "query_toks_no_value": ["select", "name", "from", "physician", "where", "position", "like", "value"], "question": "Find the name of physicians whose position title contains the word 'senior'.", "question_toks": ["Find", "the", "name", "of", "physicians", "whose", "position", "title", "contains", "the", "word", "'senior", "'", "."], "dataset_name": "spider", "guid": 570}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the total credit does each department offer?", "sql": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code", "query_toks": ["SELECT", "sum", "(", "crs_credit", ")", ",", "dept_code", "FROM", "course", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "sum", "(", "crs_credit", ")", ",", "dept_code", "from", "course", "group", "by", "dept_code"], "question": "What is the total credit does each department offer?", "question_toks": ["What", "is", "the", "total", "credit", "does", "each", "department", "offer", "?"], "dataset_name": "spider", "guid": 571}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "t1", "JOIN", "enrollments", "AS", "t2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t2.year", "=", "1956", "AND", "totalenrollment_ay", ">", "400", "AND", "FTE_AY", ">", "200"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "enrollments", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "totalenrollment_ay", ">", "value", "and", "fte_ay", ">", "value"], "question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?", "question_toks": ["What", "campus", "started", "in", "year", "1956", ",", "has", "more", "than", "200", "full", "time", "students", ",", "and", "more", "than", "400", "students", "enrolled", "?"], "dataset_name": "spider", "guid": 572}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the alphabetically ordered list of all the distinct names of nurses?", "sql": "SELECT DISTINCT name FROM nurse ORDER BY name", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT name FROM nurse ORDER BY name", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "nurse", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "distinct", "name", "from", "nurse", "order", "by", "name"], "question": "What is the alphabetically ordered list of all the distinct names of nurses?", "question_toks": ["What", "is", "the", "alphabetically", "ordered", "list", "of", "all", "the", "distinct", "names", "of", "nurses", "?"], "dataset_name": "spider", "guid": 573}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of the top 3 departments that provide the largest amount of courses?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "dept_name", "FROM", "course", "GROUP", "BY", "dept_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "dept_name", "from", "course", "group", "by", "dept_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the names of the top 3 departments that provide the largest amount of courses?", "question_toks": ["Find", "the", "names", "of", "the", "top", "3", "departments", "that", "provide", "the", "largest", "amount", "of", "courses", "?"], "dataset_name": "spider", "guid": 574}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many students and instructors are in each department?", "sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T2.id", ")", ",", "count", "(", "DISTINCT", "T3.id", ")", ",", "T3.dept_name", "FROM", "department", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.dept_name", "=", "T2.dept_name", "JOIN", "instructor", "AS", "T3", "ON", "T1.dept_name", "=", "T3.dept_name", "GROUP", "BY", "T3.dept_name"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "id", ")", ",", "count", "(", "distinct", "t3", ".", "id", ")", ",", "t3", ".", "dept_name", "from", "department", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "dept_name", "=", "t2", ".", "dept_name", "join", "instructor", "as", "t3", "on", "t1", ".", "dept_name", "=", "t3", ".", "dept_name", "group", "by", "t3", ".", "dept_name"], "question": "How many students and instructors are in each department?", "question_toks": ["How", "many", "students", "and", "instructors", "are", "in", "each", "department", "?"], "dataset_name": "spider", "guid": 575}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the name of the lowest earning instructor in the Statistics department.", "sql": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "dept_name", "=", "'Statistics", "'", "ORDER", "BY", "salary", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "dept_name", "=", "value", "order", "by", "salary", "limit", "value"], "question": "Give the name of the lowest earning instructor in the Statistics department.", "question_toks": ["Give", "the", "name", "of", "the", "lowest", "earning", "instructor", "in", "the", "Statistics", "department", "."], "dataset_name": "spider", "guid": 576}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of nurses who are nursing an undergoing treatment.", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "undergoes", "AS", "T1", "JOIN", "nurse", "AS", "T2", "ON", "T1.AssistingNurse", "=", "T2.EmployeeID"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "undergoes", "as", "t1", "join", "nurse", "as", "t2", "on", "t1", ".", "assistingnurse", "=", "t2", ".", "employeeid"], "question": "Find the names of nurses who are nursing an undergoing treatment.", "question_toks": ["Find", "the", "names", "of", "nurses", "who", "are", "nursing", "an", "undergoing", "treatment", "."], "dataset_name": "spider", "guid": 577}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the name and address of the department that has the highest number of students.", "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", ",", "T2.dept_address", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t2", ".", "dept_address", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name and address of the department that has the highest number of students.", "question_toks": ["Find", "the", "name", "and", "address", "of", "the", "department", "that", "has", "the", "highest", "number", "of", "students", "."], "dataset_name": "spider", "guid": 578}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name and position of the head of the department with the least employees.", "sql": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "example": {"db_id": "hospital_1", "query": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "query_toks": ["SELECT", "T2.name", ",", "T2.position", "FROM", "department", "AS", "T1", "JOIN", "physician", "AS", "T2", "ON", "T1.head", "=", "T2.EmployeeID", "GROUP", "BY", "departmentID", "ORDER", "BY", "count", "(", "departmentID", ")", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "position", "from", "department", "as", "t1", "join", "physician", "as", "t2", "on", "t1", ".", "head", "=", "t2", ".", "employeeid", "group", "by", "departmentid", "order", "by", "count", "(", "departmentid", ")", "limit", "value"], "question": "Find the name and position of the head of the department with the least employees.", "question_toks": ["Find", "the", "name", "and", "position", "of", "the", "head", "of", "the", "department", "with", "the", "least", "employees", "."], "dataset_name": "spider", "guid": 579}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.", "sql": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'", "example": {"db_id": "college_1", "query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'", "query_toks": ["SELECT", "DISTINCT", "T2.emp_fname", ",", "T3.prof_high_degree", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "emp_fname", ",", "t3", ".", "prof_high_degree", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"], "question": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.", "question_toks": ["Find", "the", "first", "names", "and", "degree", "of", "all", "professors", "who", "are", "teaching", "some", "class", "in", "Computer", "Info", ".", "Systems", "department", "."], "dataset_name": "spider", "guid": 580}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many schools are there in the department?", "sql": "SELECT count(DISTINCT school_code) FROM department", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT school_code) FROM department", "query_toks": ["SELECT", "count", "(", "DISTINCT", "school_code", ")", "FROM", "department"], "query_toks_no_value": ["select", "count", "(", "distinct", "school_code", ")", "from", "department"], "question": "How many schools are there in the department?", "question_toks": ["How", "many", "schools", "are", "there", "in", "the", "department", "?"], "dataset_name": "spider", "guid": 581}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many campuses are there in Los Angeles county?", "sql": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "campuses", "where", "county", "=", "value"], "question": "How many campuses are there in Los Angeles county?", "question_toks": ["How", "many", "campuses", "are", "there", "in", "Los", "Angeles", "county", "?"], "dataset_name": "spider", "guid": 582}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names and buildings of the deparments, sorted by budget descending?", "sql": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  building FROM department ORDER BY budget DESC", "query_toks": ["SELECT", "dept_name", ",", "building", "FROM", "department", "ORDER", "BY", "budget", "DESC"], "query_toks_no_value": ["select", "dept_name", ",", "building", "from", "department", "order", "by", "budget", "desc"], "question": "What are the names and buildings of the deparments, sorted by budget descending?", "question_toks": ["What", "are", "the", "names", "and", "buildings", "of", "the", "deparments", ",", "sorted", "by", "budget", "descending", "?"], "dataset_name": "spider", "guid": 583}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of professors with a Ph.D. degree in each department.", "sql": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "professor", "where", "prof_high_degree", "=", "value", "group", "by", "dept_code"], "question": "Find the number of professors with a Ph.D. degree in each department.", "question_toks": ["Find", "the", "number", "of", "professors", "with", "a", "Ph.D.", "degree", "in", "each", "department", "."], "dataset_name": "spider", "guid": 584}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of all patients who have an undergoing treatment and are staying in room 111.", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "undergoes", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.patient", "=", "T2.SSN", "JOIN", "stay", "AS", "T3", "ON", "T1.Stay", "=", "T3.StayID", "WHERE", "T3.room", "=", "111"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "undergoes", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn", "join", "stay", "as", "t3", "on", "t1", ".", "stay", "=", "t3", ".", "stayid", "where", "t3", ".", "room", "=", "value"], "question": "Find the names of all patients who have an undergoing treatment and are staying in room 111.", "question_toks": ["Find", "the", "names", "of", "all", "patients", "who", "have", "an", "undergoing", "treatment", "and", "are", "staying", "in", "room", "111", "."], "dataset_name": "spider", "guid": 585}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the distinct buildings with capacities of greater than 50?", "sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "example": {"db_id": "college_2", "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "query_toks": ["SELECT", "DISTINCT", "building", "FROM", "classroom", "WHERE", "capacity", ">", "50"], "query_toks_no_value": ["select", "distinct", "building", "from", "classroom", "where", "capacity", ">", "value"], "question": "What are the distinct buildings with capacities of greater than 50?", "question_toks": ["What", "are", "the", "distinct", "buildings", "with", "capacities", "of", "greater", "than", "50", "?"], "dataset_name": "spider", "guid": 586}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Return the name of each physician and the number of patients he or she treats.", "sql": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid", "example": {"db_id": "hospital_1", "query": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid", "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "physician", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.employeeid", "=", "T2.PCP", "GROUP", "BY", "T1.employeeid"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "physician", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "pcp", "group", "by", "t1", ".", "employeeid"], "question": "Return the name of each physician and the number of patients he or she treats.", "question_toks": ["Return", "the", "name", "of", "each", "physician", "and", "the", "number", "of", "patients", "he", "or", "she", "treats", "."], "dataset_name": "spider", "guid": 587}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | In the year 2000, what is the campus fee for San Francisco State University?", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000", "example": {"db_id": "csu_1", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000", "query_toks": ["SELECT", "t1.campusfee", "FROM", "csu_fees", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "t1.year", "=", "2000"], "query_toks_no_value": ["select", "t1", ".", "campusfee", "from", "csu_fees", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t2", ".", "campus", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "In the year 2000, what is the campus fee for San Francisco State University?", "question_toks": ["In", "the", "year", "2000", ",", "what", "is", "the", "campus", "fee", "for", "San", "Francisco", "State", "University", "?"], "dataset_name": "spider", "guid": 588}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Who is the instructor with the highest salary?", "sql": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor ORDER BY salary DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "instructor", "ORDER", "BY", "salary", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "instructor", "order", "by", "salary", "desc", "limit", "value"], "question": "Who is the instructor with the highest salary?", "question_toks": ["Who", "is", "the", "instructor", "with", "the", "highest", "salary", "?"], "dataset_name": "spider", "guid": 589}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the department name that is in Building \"Mergenthaler\".", "sql": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"", "example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT WHERE Building  =  \"Mergenthaler\"", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Building", "=", "``", "Mergenthaler", "''"], "query_toks_no_value": ["select", "dname", "from", "department", "where", "building", "=", "value"], "question": "Find the department name that is in Building \"Mergenthaler\".", "question_toks": ["Find", "the", "department", "name", "that", "is", "in", "Building", "``", "Mergenthaler", "''", "."], "dataset_name": "spider", "guid": 590}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names of students who took exactly one class.", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "GROUP", "BY", "T2.stu_num", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "group", "by", "t2", ".", "stu_num", "having", "count", "(", "*", ")", "=", "value"], "question": "Find the first names of students who took exactly one class.", "question_toks": ["Find", "the", "first", "names", "of", "students", "who", "took", "exactly", "one", "class", "."], "dataset_name": "spider", "guid": 591}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is all the information about courses, ordered by credits ascending?", "sql": "SELECT * FROM COURSE ORDER BY Credits", "example": {"db_id": "college_3", "query": "SELECT * FROM COURSE ORDER BY Credits", "query_toks": ["SELECT", "*", "FROM", "COURSE", "ORDER", "BY", "Credits"], "query_toks_no_value": ["select", "*", "from", "course", "order", "by", "credits"], "question": "What is all the information about courses, ordered by credits ascending?", "question_toks": ["What", "is", "all", "the", "information", "about", "courses", ",", "ordered", "by", "credits", "ascending", "?"], "dataset_name": "spider", "guid": 592}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the titles of courses without prerequisites?", "sql": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "NOT", "IN", "(", "SELECT", "course_id", "FROM", "prereq", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "not", "in", "(", "select", "course_id", "from", "prereq", ")"], "question": "What are the titles of courses without prerequisites?", "question_toks": ["What", "are", "the", "titles", "of", "courses", "without", "prerequisites", "?"], "dataset_name": "spider", "guid": 593}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of students who took some course offered by Statistics department.", "sql": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "example": {"db_id": "college_2", "query": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'", "query_toks": ["SELECT", "T3.name", "FROM", "course", "AS", "T1", "JOIN", "takes", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "JOIN", "student", "AS", "T3", "ON", "T2.id", "=", "T3.id", "WHERE", "T1.dept_name", "=", "'Statistics", "'"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "course", "as", "t1", "join", "takes", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "student", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "id", "where", "t1", ".", "dept_name", "=", "value"], "question": "Find the name of students who took some course offered by Statistics department.", "question_toks": ["Find", "the", "name", "of", "students", "who", "took", "some", "course", "offered", "by", "Statistics", "department", "."], "dataset_name": "spider", "guid": 594}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of all instructors whose name includes the substring \u201cdar\u201d.", "sql": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE name LIKE '%dar%'", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "name", "LIKE", "'", "%", "dar", "%", "'"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "name", "like", "value"], "question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "whose", "name", "includes", "the", "substring", "\u201cdar\u201d", "."], "dataset_name": "spider", "guid": 595}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name and budget of departments whose budgets are more than the average budget.", "sql": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "example": {"db_id": "college_2", "query": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)", "query_toks": ["SELECT", "dept_name", ",", "budget", "FROM", "department", "WHERE", "budget", ">", "(", "SELECT", "avg", "(", "budget", ")", "FROM", "department", ")"], "query_toks_no_value": ["select", "dept_name", ",", "budget", "from", "department", "where", "budget", ">", "(", "select", "avg", "(", "budget", ")", "from", "department", ")"], "question": "Find the name and budget of departments whose budgets are more than the average budget.", "question_toks": ["Find", "the", "name", "and", "budget", "of", "departments", "whose", "budgets", "are", "more", "than", "the", "average", "budget", "."], "dataset_name": "spider", "guid": 596}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the name of the department with the most students minoring in it?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.DName", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "MINOR_IN", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO", "GROUP", "BY", "T2.DNO", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "minor_in", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno", "group", "by", "t2", ".", "dno", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the department with the most students minoring in it?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "most", "students", "minoring", "in", "it", "?"], "dataset_name": "spider", "guid": 597}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of the 3 departments with the most courses?", "sql": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "dept_name", "FROM", "course", "GROUP", "BY", "dept_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "dept_name", "from", "course", "group", "by", "dept_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the names of the 3 departments with the most courses?", "question_toks": ["What", "are", "the", "names", "of", "the", "3", "departments", "with", "the", "most", "courses", "?"], "dataset_name": "spider", "guid": 598}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the count of universities whose campus fee is greater than the average campus fee.", "sql": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "csu_fees", "WHERE", "campusfee", ">", "(", "SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "csu_fees", "where", "campusfee", ">", "(", "select", "avg", "(", "campusfee", ")", "from", "csu_fees", ")"], "question": "Find the count of universities whose campus fee is greater than the average campus fee.", "question_toks": ["Find", "the", "count", "of", "universities", "whose", "campus", "fee", "is", "greater", "than", "the", "average", "campus", "fee", "."], "dataset_name": "spider", "guid": 599}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name and address of the department with the most students?", "sql": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", ",", "T2.dept_address", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t2", ".", "dept_address", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and address of the department with the most students?", "question_toks": ["What", "is", "the", "name", "and", "address", "of", "the", "department", "with", "the", "most", "students", "?"], "dataset_name": "spider", "guid": 600}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Which campus has the most degrees conferred in all times?", "sql": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1", "query_toks": ["SELECT", "campus", "FROM", "degrees", "GROUP", "BY", "campus", "ORDER", "BY", "sum", "(", "degrees", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "campus", "from", "degrees", "group", "by", "campus", "order", "by", "sum", "(", "degrees", ")", "desc", "limit", "value"], "question": "Which campus has the most degrees conferred in all times?", "question_toks": ["Which", "campus", "has", "the", "most", "degrees", "conferred", "in", "all", "times", "?"], "dataset_name": "spider", "guid": 601}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the name of department that offers the class whose description has the word \"Statistics\".", "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "query_toks": ["SELECT", "T2.dept_name", "FROM", "course", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T1.crs_description", "LIKE", "'", "%", "Statistics", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "course", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t1", ".", "crs_description", "like", "value"], "question": "Find the name of department that offers the class whose description has the word \"Statistics\".", "question_toks": ["Find", "the", "name", "of", "department", "that", "offers", "the", "class", "whose", "description", "has", "the", "word", "``", "Statistics", "''", "."], "dataset_name": "spider", "guid": 602}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the campus fee of \"San Jose State University\" in year 2000.", "sql": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000", "example": {"db_id": "csu_1", "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000", "query_toks": ["SELECT", "t1.campusfee", "FROM", "csu_fees", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t2.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "t1.year", "=", "2000"], "query_toks_no_value": ["select", "t1", ".", "campusfee", "from", "csu_fees", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t2", ".", "campus", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "Find the campus fee of \"San Jose State University\" in year 2000.", "question_toks": ["Find", "the", "campus", "fee", "of", "``", "San", "Jose", "State", "University", "''", "in", "year", "2000", "."], "dataset_name": "spider", "guid": 603}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the first names for students who have an \"a\" in their first name?", "sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'", "example": {"db_id": "college_3", "query": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'", "query_toks": ["SELECT", "DISTINCT", "Fname", "FROM", "STUDENT", "WHERE", "Fname", "LIKE", "'", "%", "a", "%", "'"], "query_toks_no_value": ["select", "distinct", "fname", "from", "student", "where", "fname", "like", "value"], "question": "What are the first names for students who have an \"a\" in their first name?", "question_toks": ["What", "are", "the", "first", "names", "for", "students", "who", "have", "an", "``", "a", "''", "in", "their", "first", "name", "?"], "dataset_name": "spider", "guid": 604}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What are the names of all campuses located at Chico?", "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "Chico", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "location", "=", "value"], "question": "What are the names of all campuses located at Chico?", "question_toks": ["What", "are", "the", "names", "of", "all", "campuses", "located", "at", "Chico", "?"], "dataset_name": "spider", "guid": 605}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the code of the school where the accounting department belongs to?", "sql": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"", "example": {"db_id": "college_1", "query": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"", "query_toks": ["SELECT", "school_code", "FROM", "department", "WHERE", "dept_name", "=", "``", "Accounting", "''"], "query_toks_no_value": ["select", "school_code", "from", "department", "where", "dept_name", "=", "value"], "question": "What is the code of the school where the accounting department belongs to?", "question_toks": ["What", "is", "the", "code", "of", "the", "school", "where", "the", "accounting", "department", "belongs", "to", "?"], "dataset_name": "spider", "guid": 606}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the ids of courses without prerequisites?", "sql": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "example": {"db_id": "college_2", "query": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq", "query_toks": ["SELECT", "course_id", "FROM", "course", "EXCEPT", "SELECT", "course_id", "FROM", "prereq"], "query_toks_no_value": ["select", "course_id", "from", "course", "except", "select", "course_id", "from", "prereq"], "question": "What are the ids of courses without prerequisites?", "question_toks": ["What", "are", "the", "ids", "of", "courses", "without", "prerequisites", "?"], "dataset_name": "spider", "guid": 607}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of students who have advisors.", "sql": "SELECT count(DISTINCT s_id) FROM advisor", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT s_id) FROM advisor", "query_toks": ["SELECT", "count", "(", "DISTINCT", "s_id", ")", "FROM", "advisor"], "query_toks_no_value": ["select", "count", "(", "distinct", "s_id", ")", "from", "advisor"], "question": "Count the number of students who have advisors.", "question_toks": ["Count", "the", "number", "of", "students", "who", "have", "advisors", "."], "dataset_name": "spider", "guid": 608}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the ids of the nurses who are on call in block floor 1 and block code 1.", "sql": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1", "example": {"db_id": "hospital_1", "query": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1", "query_toks": ["SELECT", "nurse", "FROM", "on_call", "WHERE", "blockfloor", "=", "1", "AND", "blockcode", "=", "1"], "query_toks_no_value": ["select", "nurse", "from", "on_call", "where", "blockfloor", "=", "value", "and", "blockcode", "=", "value"], "question": "Find the ids of the nurses who are on call in block floor 1 and block code 1.", "question_toks": ["Find", "the", "ids", "of", "the", "nurses", "who", "are", "on", "call", "in", "block", "floor", "1", "and", "block", "code", "1", "."], "dataset_name": "spider", "guid": 609}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the average gradepoint for students with the last name Smith?", "sql": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"", "example": {"db_id": "college_3", "query": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"", "query_toks": ["SELECT", "avg", "(", "T2.gradepoint", ")", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T3.LName", "=", "``", "Smith", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "gradepoint", ")", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "lname", "=", "value"], "question": "What is the average gradepoint for students with the last name Smith?", "question_toks": ["What", "is", "the", "average", "gradepoint", "for", "students", "with", "the", "last", "name", "Smith", "?"], "dataset_name": "spider", "guid": 610}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many courses are provided in each semester and year?", "sql": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "example": {"db_id": "college_2", "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "semester", ",", "YEAR", "FROM", "SECTION", "GROUP", "BY", "semester", ",", "YEAR"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "semester", ",", "year", "from", "section", "group", "by", "semester", ",", "year"], "question": "How many courses are provided in each semester and year?", "question_toks": ["How", "many", "courses", "are", "provided", "in", "each", "semester", "and", "year", "?"], "dataset_name": "spider", "guid": 611}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first name of student who is taking classes from accounting and Computer Info. Systems departments", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Accounting", "'", "INTERSECT", "SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value", "intersect", "select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value"], "question": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments", "question_toks": ["Find", "the", "first", "name", "of", "student", "who", "is", "taking", "classes", "from", "accounting", "and", "Computer", "Info", ".", "Systems", "departments"], "dataset_name": "spider", "guid": 612}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name and salary of the instructors who are advisors of any student from History department?", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "example": {"db_id": "college_2", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "query_toks": ["SELECT", "T2.name", ",", "T2.salary", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "WHERE", "T3.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "salary", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "where", "t3", ".", "dept_name", "=", "value"], "question": "Find the name and salary of the instructors who are advisors of any student from History department?", "question_toks": ["Find", "the", "name", "and", "salary", "of", "the", "instructors", "who", "are", "advisors", "of", "any", "student", "from", "History", "department", "?"], "dataset_name": "spider", "guid": 613}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the average fee on a CSU campus in 1996", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "example": {"db_id": "csu_1", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996", "query_toks": ["SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", "WHERE", "YEAR", "=", "1996"], "query_toks_no_value": ["select", "avg", "(", "campusfee", ")", "from", "csu_fees", "where", "year", "=", "value"], "question": "Find the average fee on a CSU campus in 1996", "question_toks": ["Find", "the", "average", "fee", "on", "a", "CSU", "campus", "in", "1996"], "dataset_name": "spider", "guid": 614}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the count and code of the job has most employees.", "sql": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "emp_jobcode", ",", "count", "(", "*", ")", "FROM", "employee", "GROUP", "BY", "emp_jobcode", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "emp_jobcode", ",", "count", "(", "*", ")", "from", "employee", "group", "by", "emp_jobcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the count and code of the job has most employees.", "question_toks": ["Find", "the", "count", "and", "code", "of", "the", "job", "has", "most", "employees", "."], "dataset_name": "spider", "guid": 615}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the total number of students and total number of instructors for each department.", "sql": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T2.id", ")", ",", "count", "(", "DISTINCT", "T3.id", ")", ",", "T3.dept_name", "FROM", "department", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.dept_name", "=", "T2.dept_name", "JOIN", "instructor", "AS", "T3", "ON", "T1.dept_name", "=", "T3.dept_name", "GROUP", "BY", "T3.dept_name"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "id", ")", ",", "count", "(", "distinct", "t3", ".", "id", ")", ",", "t3", ".", "dept_name", "from", "department", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "dept_name", "=", "t2", ".", "dept_name", "join", "instructor", "as", "t3", "on", "t1", ".", "dept_name", "=", "t3", ".", "dept_name", "group", "by", "t3", ".", "dept_name"], "question": "Find the total number of students and total number of instructors for each department.", "question_toks": ["Find", "the", "total", "number", "of", "students", "and", "total", "number", "of", "instructors", "for", "each", "department", "."], "dataset_name": "spider", "guid": 616}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.", "sql": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures WHERE cost  <  5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "name", "FROM", "procedures", "WHERE", "cost", "<", "5000", "INTERSECT", "SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "name", "from", "procedures", "where", "cost", "<", "value", "intersect", "select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.", "question_toks": ["Find", "the", "names", "of", "all", "procedures", "such", "that", "the", "cost", "is", "less", "than", "5000", "and", "physician", "John", "Wen", "was", "trained", "in", "."], "dataset_name": "spider", "guid": 617}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the first name and last name of the instructor of course that has course name", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"", "example": {"db_id": "college_3", "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "COURSE", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.Instructor", "=", "T2.FacID", "WHERE", "T1.CName", "=", "``", "COMPUTER", "LITERACY", "''"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "course", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "instructor", "=", "t2", ".", "facid", "where", "t1", ".", "cname", "=", "value"], "question": "Find the first name and last name of the instructor of course that has course name", "question_toks": ["Find", "the", "first", "name", "and", "last", "name", "of", "the", "instructor", "of", "course", "that", "has", "course", "name"], "dataset_name": "spider", "guid": 618}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | how many degrees were conferred between 1998 and 2002?", "sql": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "example": {"db_id": "csu_1", "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus", "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", ">", "=", "1998", "AND", "T2.year", "<", "=", "2002", "GROUP", "BY", "T1.campus"], "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", ">", "=", "value", "and", "t2", ".", "year", "<", "=", "value", "group", "by", "t1", ".", "campus"], "question": "how many degrees were conferred between 1998 and 2002?", "question_toks": ["how", "many", "degrees", "were", "conferred", "between", "1998", "and", "2002", "?"], "dataset_name": "spider", "guid": 619}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of instructors who earn more than at least one instructor from the Biology department?", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT min(salary) FROM instructor WHERE dept_name  =  'Biology')", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "salary", ">", "(", "SELECT", "min", "(", "salary", ")", "FROM", "instructor", "WHERE", "dept_name", "=", "'Biology", "'", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "salary", ">", "(", "select", "min", "(", "salary", ")", "from", "instructor", "where", "dept_name", "=", "value", ")"], "question": "What are the names of instructors who earn more than at least one instructor from the Biology department?", "question_toks": ["What", "are", "the", "names", "of", "instructors", "who", "earn", "more", "than", "at", "least", "one", "instructor", "from", "the", "Biology", "department", "?"], "dataset_name": "spider", "guid": 620}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which patients made more than one appointment? Tell me the name and phone number of these patients.", "sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1", "example": {"db_id": "hospital_1", "query": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1", "query_toks": ["SELECT", "name", ",", "phone", "FROM", "appointment", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.patient", "=", "T2.ssn", "GROUP", "BY", "T1.patient", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "name", ",", "phone", "from", "appointment", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn", "group", "by", "t1", ".", "patient", "having", "count", "(", "*", ")", ">", "value"], "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.", "question_toks": ["Which", "patients", "made", "more", "than", "one", "appointment", "?", "Tell", "me", "the", "name", "and", "phone", "number", "of", "these", "patients", "."], "dataset_name": "spider", "guid": 621}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | List the names of all courses ordered by their titles and credits.", "sql": "SELECT title FROM course ORDER BY title ,  credits", "example": {"db_id": "college_2", "query": "SELECT title FROM course ORDER BY title ,  credits", "query_toks": ["SELECT", "title", "FROM", "course", "ORDER", "BY", "title", ",", "credits"], "query_toks_no_value": ["select", "title", "from", "course", "order", "by", "title", ",", "credits"], "question": "List the names of all courses ordered by their titles and credits.", "question_toks": ["List", "the", "names", "of", "all", "courses", "ordered", "by", "their", "titles", "and", "credits", "."], "dataset_name": "spider", "guid": 622}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names of all instructors who have taught some course and the course code.", "sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.crs_code", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "crs_code", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num"], "question": "Find the first names of all instructors who have taught some course and the course code.", "question_toks": ["Find", "the", "first", "names", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "the", "course", "code", "."], "dataset_name": "spider", "guid": 623}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the number of professors who are in the Accounting or Biology departments?", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T2.dept_name", "=", "'Accounting", "'", "OR", "T2.dept_name", "=", "'Biology", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t2", ".", "dept_name", "=", "value", "or", "t2", ".", "dept_name", "=", "value"], "question": "What is the number of professors who are in the Accounting or Biology departments?", "question_toks": ["What", "is", "the", "number", "of", "professors", "who", "are", "in", "the", "Accounting", "or", "Biology", "departments", "?"], "dataset_name": "spider", "guid": 624}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the name of the department htat has no students minoring in it?", "sql": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO", "example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "EXCEPT", "SELECT", "T1.DName", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "MINOR_IN", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO"], "query_toks_no_value": ["select", "dname", "from", "department", "except", "select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "minor_in", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno"], "question": "What is the name of the department htat has no students minoring in it?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "htat", "has", "no", "students", "minoring", "in", "it", "?"], "dataset_name": "spider", "guid": 625}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | what is the name and position of the head whose department has least number of employees?", "sql": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "example": {"db_id": "hospital_1", "query": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "query_toks": ["SELECT", "T2.name", ",", "T2.position", "FROM", "department", "AS", "T1", "JOIN", "physician", "AS", "T2", "ON", "T1.head", "=", "T2.EmployeeID", "GROUP", "BY", "departmentID", "ORDER", "BY", "count", "(", "departmentID", ")", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "position", "from", "department", "as", "t1", "join", "physician", "as", "t2", "on", "t1", ".", "head", "=", "t2", ".", "employeeid", "group", "by", "departmentid", "order", "by", "count", "(", "departmentid", ")", "limit", "value"], "question": "what is the name and position of the head whose department has least number of employees?", "question_toks": ["what", "is", "the", "name", "and", "position", "of", "the", "head", "whose", "department", "has", "least", "number", "of", "employees", "?"], "dataset_name": "spider", "guid": 626}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | what is the address of history department?", "sql": "SELECT dept_address FROM department WHERE dept_name  =  'History'", "example": {"db_id": "college_1", "query": "SELECT dept_address FROM department WHERE dept_name  =  'History'", "query_toks": ["SELECT", "dept_address", "FROM", "department", "WHERE", "dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "dept_address", "from", "department", "where", "dept_name", "=", "value"], "question": "what is the address of history department?", "question_toks": ["what", "is", "the", "address", "of", "history", "department", "?"], "dataset_name": "spider", "guid": 627}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty members are at the university that gave the least number of degrees in 2001?", "sql": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "example": {"db_id": "csu_1", "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1", "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2001", "ORDER", "BY", "t3.degrees", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "limit", "value"], "question": "How many faculty members are at the university that gave the least number of degrees in 2001?", "question_toks": ["How", "many", "faculty", "members", "are", "at", "the", "university", "that", "gave", "the", "least", "number", "of", "degrees", "in", "2001", "?"], "dataset_name": "spider", "guid": 628}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the last name and hire date of the professor who is in office DRE 102.", "sql": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'", "query_toks": ["SELECT", "T1.emp_lname", ",", "T1.emp_hiredate", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "WHERE", "T2.prof_office", "=", "'DRE", "102", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_lname", ",", "t1", ".", "emp_hiredate", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "where", "t2", ".", "prof_office", "=", "value"], "question": "Find the last name and hire date of the professor who is in office DRE 102.", "question_toks": ["Find", "the", "last", "name", "and", "hire", "date", "of", "the", "professor", "who", "is", "in", "office", "DRE", "102", "."], "dataset_name": "spider", "guid": 629}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all professors not teaching any classes?", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num", "example": {"db_id": "college_1", "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num", "query_toks": ["SELECT", "emp_fname", "FROM", "employee", "WHERE", "emp_jobcode", "=", "'PROF", "'", "EXCEPT", "SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num"], "query_toks_no_value": ["select", "emp_fname", "from", "employee", "where", "emp_jobcode", "=", "value", "except", "select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num"], "question": "What are the first names of all professors not teaching any classes?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "professors", "not", "teaching", "any", "classes", "?"], "dataset_name": "spider", "guid": 630}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the max and min grade point for all letter grade.", "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION", "example": {"db_id": "college_3", "query": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION", "query_toks": ["SELECT", "max", "(", "gradepoint", ")", ",", "min", "(", "gradepoint", ")", "FROM", "GRADECONVERSION"], "query_toks_no_value": ["select", "max", "(", "gradepoint", ")", ",", "min", "(", "gradepoint", ")", "from", "gradeconversion"], "question": "Find the max and min grade point for all letter grade.", "question_toks": ["Find", "the", "max", "and", "min", "grade", "point", "for", "all", "letter", "grade", "."], "dataset_name": "spider", "guid": 631}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many departments does the college has?", "sql": "SELECT count(DISTINCT dept_name) FROM department", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_name) FROM department", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", "FROM", "department"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", "from", "department"], "question": "How many departments does the college has?", "question_toks": ["How", "many", "departments", "does", "the", "college", "has", "?"], "dataset_name": "spider", "guid": 632}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the three most costly procedures?", "sql": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures ORDER BY cost LIMIT 3", "query_toks": ["SELECT", "name", "FROM", "procedures", "ORDER", "BY", "cost", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "procedures", "order", "by", "cost", "limit", "value"], "question": "What are the three most costly procedures?", "question_toks": ["What", "are", "the", "three", "most", "costly", "procedures", "?"], "dataset_name": "spider", "guid": 633}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses are located in Chico?", "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "Chico", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "location", "=", "value"], "question": "What campuses are located in Chico?", "question_toks": ["What", "campuses", "are", "located", "in", "Chico", "?"], "dataset_name": "spider", "guid": 634}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the title of the course offered in Chandler during the Fall of 2010.", "sql": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010", "query_toks": ["SELECT", "T1.title", "FROM", "course", "AS", "T1", "JOIN", "SECTION", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "building", "=", "'Chandler", "'", "AND", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "course", "as", "t1", "join", "section", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "building", "=", "value", "and", "semester", "=", "value", "and", "year", "=", "value"], "question": "Give the title of the course offered in Chandler during the Fall of 2010.", "question_toks": ["Give", "the", "title", "of", "the", "course", "offered", "in", "Chandler", "during", "the", "Fall", "of", "2010", "."], "dataset_name": "spider", "guid": 635}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'", "query_toks": ["SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num", "WHERE", "crs_code", "=", "'CIS-220", "'", "INTERSECT", "SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num", "WHERE", "crs_code", "=", "'QM-261", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value", "intersect", "select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value"], "question": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.", "question_toks": ["Find", "the", "first", "name", "of", "the", "professor", "who", "is", "teaching", "two", "courses", "with", "code", "CIS-220", "and", "QM-261", "."], "dataset_name": "spider", "guid": 636}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?", "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "Northridge", "''", "AND", "county", "=", "``", "Los", "Angeles", "''", "UNION", "SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "San", "Francisco", "''", "AND", "county", "=", "``", "San", "Francisco", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "location", "=", "value", "and", "county", "=", "value", "union", "select", "campus", "from", "campuses", "where", "location", "=", "value", "and", "county", "=", "value"], "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?", "question_toks": ["What", "campuses", "are", "located", "in", "Northridge", ",", "Los", "Angeles", "or", "in", "San", "Francisco", ",", "San", "Francisco", "?"], "dataset_name": "spider", "guid": 637}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the number of different course codes?", "sql": "SELECT count(DISTINCT crs_code) FROM CLASS", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT crs_code) FROM CLASS", "query_toks": ["SELECT", "count", "(", "DISTINCT", "crs_code", ")", "FROM", "CLASS"], "query_toks_no_value": ["select", "count", "(", "distinct", "crs_code", ")", "from", "class"], "question": "What are the number of different course codes?", "question_toks": ["What", "are", "the", "number", "of", "different", "course", "codes", "?"], "dataset_name": "spider", "guid": 638}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the maximum and average capacity among rooms in each building.", "sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "example": {"db_id": "college_2", "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "query_toks": ["SELECT", "max", "(", "capacity", ")", ",", "avg", "(", "capacity", ")", ",", "building", "FROM", "classroom", "GROUP", "BY", "building"], "query_toks_no_value": ["select", "max", "(", "capacity", ")", ",", "avg", "(", "capacity", ")", ",", "building", "from", "classroom", "group", "by", "building"], "question": "Find the maximum and average capacity among rooms in each building.", "question_toks": ["Find", "the", "maximum", "and", "average", "capacity", "among", "rooms", "in", "each", "building", "."], "dataset_name": "spider", "guid": 639}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the total number of credits offered by each department?", "sql": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code", "example": {"db_id": "college_1", "query": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code", "query_toks": ["SELECT", "sum", "(", "T1.crs_credit", ")", ",", "T1.dept_code", "FROM", "course", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "GROUP", "BY", "T1.dept_code"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "crs_credit", ")", ",", "t1", ".", "dept_code", "from", "course", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "group", "by", "t1", ".", "dept_code"], "question": "What are the total number of credits offered by each department?", "question_toks": ["What", "are", "the", "total", "number", "of", "credits", "offered", "by", "each", "department", "?"], "dataset_name": "spider", "guid": 640}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the minimum salary for the departments whose average salary is above the average payment of all instructors.", "sql": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "example": {"db_id": "college_2", "query": "SELECT min(salary) ,  dept_name FROM instructor GROUP BY dept_name HAVING avg(salary)  >  (SELECT avg(salary) FROM instructor)", "query_toks": ["SELECT", "min", "(", "salary", ")", ",", "dept_name", "FROM", "instructor", "GROUP", "BY", "dept_name", "HAVING", "avg", "(", "salary", ")", ">", "(", "SELECT", "avg", "(", "salary", ")", "FROM", "instructor", ")"], "query_toks_no_value": ["select", "min", "(", "salary", ")", ",", "dept_name", "from", "instructor", "group", "by", "dept_name", "having", "avg", "(", "salary", ")", ">", "(", "select", "avg", "(", "salary", ")", "from", "instructor", ")"], "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.", "question_toks": ["Find", "the", "minimum", "salary", "for", "the", "departments", "whose", "average", "salary", "is", "above", "the", "average", "payment", "of", "all", "instructors", "."], "dataset_name": "spider", "guid": 641}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the id of the appointment that started most recently?", "sql": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1", "query_toks": ["SELECT", "appointmentid", "FROM", "appointment", "ORDER", "BY", "START", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "appointmentid", "from", "appointment", "order", "by", "start", "desc", "limit", "value"], "question": "What is the id of the appointment that started most recently?", "question_toks": ["What", "is", "the", "id", "of", "the", "appointment", "that", "started", "most", "recently", "?"], "dataset_name": "spider", "guid": 642}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of instructors who didn't teach any courses?", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "id", "NOT", "IN", "(", "SELECT", "id", "FROM", "teaches", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "id", "not", "in", "(", "select", "id", "from", "teaches", ")"], "question": "Find the name of instructors who didn't teach any courses?", "question_toks": ["Find", "the", "name", "of", "instructors", "who", "did", "n't", "teach", "any", "courses", "?"], "dataset_name": "spider", "guid": 643}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many campuses exist are in the county of LA?", "sql": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"", "example": {"db_id": "csu_1", "query": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "campuses", "where", "county", "=", "value"], "question": "How many campuses exist are in the county of LA?", "question_toks": ["How", "many", "campuses", "exist", "are", "in", "the", "county", "of", "LA", "?"], "dataset_name": "spider", "guid": 644}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the course codes for every class that the student with the last name Smithson took?", "sql": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'", "example": {"db_id": "college_1", "query": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'", "query_toks": ["SELECT", "T1.crs_code", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T3.stu_num", "=", "T2.stu_num", "WHERE", "T3.stu_lname", "=", "'Smithson", "'"], "query_toks_no_value": ["select", "t1", ".", "crs_code", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t3", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t3", ".", "stu_lname", "=", "value"], "question": "What are the course codes for every class that the student with the last name Smithson took?", "question_toks": ["What", "are", "the", "course", "codes", "for", "every", "class", "that", "the", "student", "with", "the", "last", "name", "Smithson", "took", "?"], "dataset_name": "spider", "guid": 645}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of all instructors in the Art department who have taught some course and the course_id.", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "example": {"db_id": "college_2", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "query_toks": ["SELECT", "name", ",", "course_id", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T1.dept_name", "=", "'Art", "'"], "query_toks_no_value": ["select", "name", ",", "course_id", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "where", "t1", ".", "dept_name", "=", "value"], "question": "Find the names of all instructors in the Art department who have taught some course and the course_id.", "question_toks": ["Find", "the", "names", "of", "all", "instructors", "in", "the", "Art", "department", "who", "have", "taught", "some", "course", "and", "the", "course_id", "."], "dataset_name": "spider", "guid": 646}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | List the information of all instructors ordered by their salary in ascending order.", "sql": "SELECT * FROM instructor ORDER BY salary", "example": {"db_id": "college_2", "query": "SELECT * FROM instructor ORDER BY salary", "query_toks": ["SELECT", "*", "FROM", "instructor", "ORDER", "BY", "salary"], "query_toks_no_value": ["select", "*", "from", "instructor", "order", "by", "salary"], "question": "List the information of all instructors ordered by their salary in ascending order.", "question_toks": ["List", "the", "information", "of", "all", "instructors", "ordered", "by", "their", "salary", "in", "ascending", "order", "."], "dataset_name": "spider", "guid": 647}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many rooms whose capacity is less than 50 does the Lamberton building have?", "sql": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "classroom", "WHERE", "building", "=", "'Lamberton", "'", "AND", "capacity", "<", "50"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "classroom", "where", "building", "=", "value", "and", "capacity", "<", "value"], "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?", "question_toks": ["How", "many", "rooms", "whose", "capacity", "is", "less", "than", "50", "does", "the", "Lamberton", "building", "have", "?"], "dataset_name": "spider", "guid": 648}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "EXCEPT", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "except", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?", "question_toks": ["What", "are", "the", "ids", "of", "courses", "offered", "in", "Fall", "of", "2009", "but", "not", "in", "Spring", "of", "2010", "?"], "dataset_name": "spider", "guid": 649}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty, in total, are there in the year 2002?", "sql": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "example": {"db_id": "csu_1", "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002", "query_toks": ["SELECT", "sum", "(", "faculty", ")", "FROM", "faculty", "WHERE", "YEAR", "=", "2002"], "query_toks_no_value": ["select", "sum", "(", "faculty", ")", "from", "faculty", "where", "year", "=", "value"], "question": "How many faculty, in total, are there in the year 2002?", "question_toks": ["How", "many", "faculty", ",", "in", "total", ",", "are", "there", "in", "the", "year", "2002", "?"], "dataset_name": "spider", "guid": 650}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of students who took any class in the years of 2009 and 2010.", "sql": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "student", "AS", "T1", "JOIN", "takes", "AS", "T2", "ON", "T1.id", "=", "T2.id", "WHERE", "YEAR", "=", "2009", "OR", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "student", "as", "t1", "join", "takes", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "Find the name of students who took any class in the years of 2009 and 2010.", "question_toks": ["Find", "the", "name", "of", "students", "who", "took", "any", "class", "in", "the", "years", "of", "2009", "and", "2010", "."], "dataset_name": "spider", "guid": 651}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of the department with the fewest professors?", "sql": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T2.dept_name", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What is the name of the department with the fewest professors?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "fewest", "professors", "?"], "dataset_name": "spider", "guid": 652}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many employees are there all together?", "sql": "SELECT count(*) FROM employee", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM employee", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee"], "question": "How many employees are there all together?", "question_toks": ["How", "many", "employees", "are", "there", "all", "together", "?"], "dataset_name": "spider", "guid": 653}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the titles of courses that are in the Statistics department but not the Psychology department?", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Statistics", "'", "EXCEPT", "SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Psychology", "'"], "query_toks_no_value": ["select", "title", "from", "course", "where", "dept_name", "=", "value", "except", "select", "title", "from", "course", "where", "dept_name", "=", "value"], "question": "What are the titles of courses that are in the Statistics department but not the Psychology department?", "question_toks": ["What", "are", "the", "titles", "of", "courses", "that", "are", "in", "the", "Statistics", "department", "but", "not", "the", "Psychology", "department", "?"], "dataset_name": "spider", "guid": 654}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?", "sql": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'", "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "WHERE", "T3.crs_code", "=", "'ACCT-211", "'", "AND", "T1.stu_lname", "LIKE", "'S", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "where", "t3", ".", "crs_code", "=", "value", "and", "t1", ".", "stu_lname", "like", "value"], "question": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?", "question_toks": ["What", "is", "the", "first", "name", "of", "the", "student", "whose", "last", "name", "starting", "with", "the", "letter", "S", "and", "is", "taking", "ACCT-211", "class", "?"], "dataset_name": "spider", "guid": 655}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the number of rooms located on each block floor.", "sql": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor", "example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockfloor", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.blockfloor", "FROM", "BLOCK", "AS", "T1", "JOIN", "room", "AS", "T2", "ON", "T1.blockfloor", "=", "T2.blockfloor", "AND", "T1.blockcode", "=", "T2.blockcode", "GROUP", "BY", "T1.blockfloor"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "blockfloor", "from", "block", "as", "t1", "join", "room", "as", "t2", "on", "t1", ".", "blockfloor", "=", "t2", ".", "blockfloor", "and", "t1", ".", "blockcode", "=", "t2", ".", "blockcode", "group", "by", "t1", ".", "blockfloor"], "question": "Find the number of rooms located on each block floor.", "question_toks": ["Find", "the", "number", "of", "rooms", "located", "on", "each", "block", "floor", "."], "dataset_name": "spider", "guid": 656}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the rooms of faculties with rank professor who live in building NEB.", "sql": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"", "example": {"db_id": "college_3", "query": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "Room", "FROM", "FACULTY", "WHERE", "Rank", "=", "``", "Professor", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "room", "from", "faculty", "where", "rank", "=", "value", "and", "building", "=", "value"], "question": "Find the rooms of faculties with rank professor who live in building NEB.", "question_toks": ["Find", "the", "rooms", "of", "faculties", "with", "rank", "professor", "who", "live", "in", "building", "NEB", "."], "dataset_name": "spider", "guid": 657}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many different classes are there?", "sql": "SELECT count(DISTINCT class_code) FROM CLASS", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT class_code) FROM CLASS", "query_toks": ["SELECT", "count", "(", "DISTINCT", "class_code", ")", "FROM", "CLASS"], "query_toks_no_value": ["select", "count", "(", "distinct", "class_code", ")", "from", "class"], "question": "How many different classes are there?", "question_toks": ["How", "many", "different", "classes", "are", "there", "?"], "dataset_name": "spider", "guid": 658}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses are located in Los Angeles county and opened after 1950?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''", "AND", "YEAR", ">", "1950"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value", "and", "year", ">", "value"], "question": "What campuses are located in Los Angeles county and opened after 1950?", "question_toks": ["What", "campuses", "are", "located", "in", "Los", "Angeles", "county", "and", "opened", "after", "1950", "?"], "dataset_name": "spider", "guid": 659}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | List the campus that have between 600 and 1000 faculty lines in year 2004.", "sql": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "example": {"db_id": "csu_1", "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004", "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "t1", "JOIN", "faculty", "AS", "t2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t2.faculty", ">", "=", "600", "AND", "t2.faculty", "<", "=", "1000", "AND", "T1.year", "=", "2004"], "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "faculty", ">", "=", "value", "and", "t2", ".", "faculty", "<", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "List the campus that have between 600 and 1000 faculty lines in year 2004.", "question_toks": ["List", "the", "campus", "that", "have", "between", "600", "and", "1000", "faculty", "lines", "in", "year", "2004", "."], "dataset_name": "spider", "guid": 660}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find names of all students who took some course and the course description.", "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code", "query_toks": ["SELECT", "T1.stu_fname", ",", "T1.stu_lname", ",", "T4.crs_description", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", ",", "t1", ".", "stu_lname", ",", "t4", ".", "crs_description", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code"], "question": "Find names of all students who took some course and the course description.", "question_toks": ["Find", "names", "of", "all", "students", "who", "took", "some", "course", "and", "the", "course", "description", "."], "dataset_name": "spider", "guid": 661}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Give the name of the student in the History department with the most credits.", "sql": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "student", "WHERE", "dept_name", "=", "'History", "'", "ORDER", "BY", "tot_cred", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "student", "where", "dept_name", "=", "value", "order", "by", "tot_cred", "desc", "limit", "value"], "question": "Give the name of the student in the History department with the most credits.", "question_toks": ["Give", "the", "name", "of", "the", "student", "in", "the", "History", "department", "with", "the", "most", "credits", "."], "dataset_name": "spider", "guid": 662}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names and date of birth of professors teaching course ACCT-211?", "sql": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"", "example": {"db_id": "college_1", "query": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"", "query_toks": ["SELECT", "DISTINCT", "T1.EMP_FNAME", ",", "T1.EMP_DOB", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.EMP_NUM", "=", "T2.PROF_NUM", "WHERE", "CRS_CODE", "=", "``", "ACCT-211", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "emp_fname", ",", "t1", ".", "emp_dob", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value"], "question": "What are the first names and date of birth of professors teaching course ACCT-211?", "question_toks": ["What", "are", "the", "first", "names", "and", "date", "of", "birth", "of", "professors", "teaching", "course", "ACCT-211", "?"], "dataset_name": "spider", "guid": 663}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the department with the most employees.", "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;", "example": {"db_id": "hospital_1", "query": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;", "query_toks": ["SELECT", "name", "FROM", "department", "GROUP", "BY", "departmentID", "ORDER", "BY", "count", "(", "departmentID", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "name", "from", "department", "group", "by", "departmentid", "order", "by", "count", "(", "departmentid", ")", "desc", "limit", "value"], "question": "Find the department with the most employees.", "question_toks": ["Find", "the", "department", "with", "the", "most", "employees", "."], "dataset_name": "spider", "guid": 664}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of all instructors with a higher salary than any of the instructors in the Biology department?", "sql": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE salary  >  (SELECT max(salary) FROM instructor WHERE dept_name  =  'Biology')", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "salary", ">", "(", "SELECT", "max", "(", "salary", ")", "FROM", "instructor", "WHERE", "dept_name", "=", "'Biology", "'", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "salary", ">", "(", "select", "max", "(", "salary", ")", "from", "instructor", "where", "dept_name", "=", "value", ")"], "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?", "question_toks": ["What", "are", "the", "names", "of", "all", "instructors", "with", "a", "higher", "salary", "than", "any", "of", "the", "instructors", "in", "the", "Biology", "department", "?"], "dataset_name": "spider", "guid": 665}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the number of courses provided in each semester and year.", "sql": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "example": {"db_id": "college_2", "query": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "semester", ",", "YEAR", "FROM", "SECTION", "GROUP", "BY", "semester", ",", "YEAR"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "semester", ",", "year", "from", "section", "group", "by", "semester", ",", "year"], "question": "Find the number of courses provided in each semester and year.", "question_toks": ["Find", "the", "number", "of", "courses", "provided", "in", "each", "semester", "and", "year", "."], "dataset_name": "spider", "guid": 666}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the total number of students enrolled in ACCT-211?", "sql": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "where", "t1", ".", "crs_code", "=", "value"], "question": "What are the total number of students enrolled in ACCT-211?", "question_toks": ["What", "are", "the", "total", "number", "of", "students", "enrolled", "in", "ACCT-211", "?"], "dataset_name": "spider", "guid": 667}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many courses that do not have prerequisite?", "sql": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "course", "WHERE", "course_id", "NOT", "IN", "(", "SELECT", "course_id", "FROM", "prereq", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "course", "where", "course_id", "not", "in", "(", "select", "course_id", "from", "prereq", ")"], "question": "How many courses that do not have prerequisite?", "question_toks": ["How", "many", "courses", "that", "do", "not", "have", "prerequisite", "?"], "dataset_name": "spider", "guid": 668}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the number and averaged salary of all instructors who are in the department with the highest budget.", "sql": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT avg(T1.salary) ,  count(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name  =  T2.dept_name ORDER BY T2.budget DESC LIMIT 1", "query_toks": ["SELECT", "avg", "(", "T1.salary", ")", ",", "count", "(", "*", ")", "FROM", "instructor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_name", "=", "T2.dept_name", "ORDER", "BY", "T2.budget", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "salary", ")", ",", "count", "(", "*", ")", "from", "instructor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_name", "=", "t2", ".", "dept_name", "order", "by", "t2", ".", "budget", "desc", "limit", "value"], "question": "Find the number and averaged salary of all instructors who are in the department with the highest budget.", "question_toks": ["Find", "the", "number", "and", "averaged", "salary", "of", "all", "instructors", "who", "are", "in", "the", "department", "with", "the", "highest", "budget", "."], "dataset_name": "spider", "guid": 669}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the names of instructors who didn't each any courses in any Spring semester.", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "id", "NOT", "IN", "(", "SELECT", "id", "FROM", "teaches", "WHERE", "semester", "=", "'Spring", "'", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "id", "not", "in", "(", "select", "id", "from", "teaches", "where", "semester", "=", "value", ")"], "question": "Find the names of instructors who didn't each any courses in any Spring semester.", "question_toks": ["Find", "the", "names", "of", "instructors", "who", "did", "n't", "each", "any", "courses", "in", "any", "Spring", "semester", "."], "dataset_name": "spider", "guid": 670}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name of the professor who is teaching CIS-220 and QM-261?", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'", "query_toks": ["SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num", "WHERE", "crs_code", "=", "'CIS-220", "'", "INTERSECT", "SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num", "WHERE", "crs_code", "=", "'QM-261", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value", "intersect", "select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value"], "question": "What is the first name of the professor who is teaching CIS-220 and QM-261?", "question_toks": ["What", "is", "the", "first", "name", "of", "the", "professor", "who", "is", "teaching", "CIS-220", "and", "QM-261", "?"], "dataset_name": "spider", "guid": 671}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first and last name of the oldest employee?", "sql": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "query_toks": ["SELECT", "emp_fname", ",", "emp_lname", "FROM", "employee", "ORDER", "BY", "emp_dob", "LIMIT", "1"], "query_toks_no_value": ["select", "emp_fname", ",", "emp_lname", "from", "employee", "order", "by", "emp_dob", "limit", "value"], "question": "What is the first and last name of the oldest employee?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "oldest", "employee", "?"], "dataset_name": "spider", "guid": 672}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "example": {"db_id": "college_2", "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "query_toks": ["SELECT", "name", ",", "salary", "FROM", "instructor", "WHERE", "salary", "<", "(", "SELECT", "avg", "(", "salary", ")", "FROM", "instructor", "WHERE", "dept_name", "=", "'Physics", "'", ")"], "query_toks_no_value": ["select", "name", ",", "salary", "from", "instructor", "where", "salary", "<", "(", "select", "avg", "(", "salary", ")", "from", "instructor", "where", "dept_name", "=", "value", ")"], "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.", "question_toks": ["Find", "the", "name", "and", "salary", "of", "instructors", "whose", "salary", "is", "below", "the", "average", "salary", "of", "the", "instructors", "in", "the", "Physics", "department", "."], "dataset_name": "spider", "guid": 673}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Tell me the distinct block codes where some rooms are available.", "sql": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0", "query_toks": ["SELECT", "DISTINCT", "blockcode", "FROM", "room", "WHERE", "unavailable", "=", "0"], "query_toks_no_value": ["select", "distinct", "blockcode", "from", "room", "where", "unavailable", "=", "value"], "question": "Tell me the distinct block codes where some rooms are available.", "question_toks": ["Tell", "me", "the", "distinct", "block", "codes", "where", "some", "rooms", "are", "available", "."], "dataset_name": "spider", "guid": 674}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of students and their respective departments, ordered by number of credits from least to greatest?", "sql": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "example": {"db_id": "college_2", "query": "SELECT name ,  dept_name FROM student ORDER BY tot_cred", "query_toks": ["SELECT", "name", ",", "dept_name", "FROM", "student", "ORDER", "BY", "tot_cred"], "query_toks_no_value": ["select", "name", ",", "dept_name", "from", "student", "order", "by", "tot_cred"], "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?", "question_toks": ["What", "are", "the", "names", "of", "students", "and", "their", "respective", "departments", ",", "ordered", "by", "number", "of", "credits", "from", "least", "to", "greatest", "?"], "dataset_name": "spider", "guid": 675}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the name of the department that has the biggest number of students minored in?", "sql": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.DName", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "MINOR_IN", "AS", "T2", "ON", "T1.DNO", "=", "T2.DNO", "GROUP", "BY", "T2.DNO", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "dname", "from", "department", "as", "t1", "join", "minor_in", "as", "t2", "on", "t1", ".", "dno", "=", "t2", ".", "dno", "group", "by", "t2", ".", "dno", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the department that has the biggest number of students minored in?", "question_toks": ["Find", "the", "name", "of", "the", "department", "that", "has", "the", "biggest", "number", "of", "students", "minored", "in", "?"], "dataset_name": "spider", "guid": 676}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many classrooms are not in Lamberton?", "sql": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "classroom", "WHERE", "building", "!", "=", "'Lamberton", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "classroom", "where", "building", "!", "=", "value"], "question": "How many classrooms are not in Lamberton?", "question_toks": ["How", "many", "classrooms", "are", "not", "in", "Lamberton", "?"], "dataset_name": "spider", "guid": 677}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first and last names of the employee with the earliest date of birth?", "sql": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1", "query_toks": ["SELECT", "emp_fname", ",", "emp_lname", "FROM", "employee", "ORDER", "BY", "emp_dob", "LIMIT", "1"], "query_toks_no_value": ["select", "emp_fname", ",", "emp_lname", "from", "employee", "order", "by", "emp_dob", "limit", "value"], "question": "What are the first and last names of the employee with the earliest date of birth?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "the", "employee", "with", "the", "earliest", "date", "of", "birth", "?"], "dataset_name": "spider", "guid": 678}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all professors who teach more than one class?", "sql": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1", "query_toks": ["SELECT", "T2.emp_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "GROUP", "BY", "T1.prof_num", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "group", "by", "t1", ".", "prof_num", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the first names of all professors who teach more than one class?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "professors", "who", "teach", "more", "than", "one", "class", "?"], "dataset_name": "spider", "guid": 679}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Given the titles of all courses, in order of titles and credits.", "sql": "SELECT title FROM course ORDER BY title ,  credits", "example": {"db_id": "college_2", "query": "SELECT title FROM course ORDER BY title ,  credits", "query_toks": ["SELECT", "title", "FROM", "course", "ORDER", "BY", "title", ",", "credits"], "query_toks_no_value": ["select", "title", "from", "course", "order", "by", "title", ",", "credits"], "question": "Given the titles of all courses, in order of titles and credits.", "question_toks": ["Given", "the", "titles", "of", "all", "courses", ",", "in", "order", "of", "titles", "and", "credits", "."], "dataset_name": "spider", "guid": 680}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the full names of faculties with sex M and who live in building NEB?", "sql": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"", "example": {"db_id": "college_3", "query": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "Fname", ",", "Lname", "FROM", "FACULTY", "WHERE", "sex", "=", "``", "M", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "faculty", "where", "sex", "=", "value", "and", "building", "=", "value"], "question": "What are the full names of faculties with sex M and who live in building NEB?", "question_toks": ["What", "are", "the", "full", "names", "of", "faculties", "with", "sex", "M", "and", "who", "live", "in", "building", "NEB", "?"], "dataset_name": "spider", "guid": 681}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is department name and office for the professor whose last name is Heffington?", "sql": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'", "example": {"db_id": "college_1", "query": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'", "query_toks": ["SELECT", "T3.dept_name", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T1.emp_lname", "=", "'Heffington", "'"], "query_toks_no_value": ["select", "t3", ".", "dept_name", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t1", ".", "emp_lname", "=", "value"], "question": "What is department name and office for the professor whose last name is Heffington?", "question_toks": ["What", "is", "department", "name", "and", "office", "for", "the", "professor", "whose", "last", "name", "is", "Heffington", "?"], "dataset_name": "spider", "guid": 682}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the full name of the instructor who has a course named COMPUTER LITERACY?", "sql": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"", "example": {"db_id": "college_3", "query": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID WHERE T1.CName  =  \"COMPUTER LITERACY\"", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "COURSE", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.Instructor", "=", "T2.FacID", "WHERE", "T1.CName", "=", "``", "COMPUTER", "LITERACY", "''"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "course", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "instructor", "=", "t2", ".", "facid", "where", "t1", ".", "cname", "=", "value"], "question": "What is the full name of the instructor who has a course named COMPUTER LITERACY?", "question_toks": ["What", "is", "the", "full", "name", "of", "the", "instructor", "who", "has", "a", "course", "named", "COMPUTER", "LITERACY", "?"], "dataset_name": "spider", "guid": 683}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the number of classes offered for all class rooms that held at least 2 classes.", "sql": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2", "example": {"db_id": "college_1", "query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "class_room", "FROM", "CLASS", "GROUP", "BY", "class_room", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "class_room", "from", "class", "group", "by", "class_room", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the number of classes offered for all class rooms that held at least 2 classes.", "question_toks": ["Find", "the", "number", "of", "classes", "offered", "for", "all", "class", "rooms", "that", "held", "at", "least", "2", "classes", "."], "dataset_name": "spider", "guid": 684}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the titles of courses that are offered in more than one department?", "sql": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1", "query_toks": ["SELECT", "title", "FROM", "course", "GROUP", "BY", "title", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "title", "from", "course", "group", "by", "title", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the titles of courses that are offered in more than one department?", "question_toks": ["What", "are", "the", "titles", "of", "courses", "that", "are", "offered", "in", "more", "than", "one", "department", "?"], "dataset_name": "spider", "guid": 685}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the buildings which have rooms with capacity more than 50.", "sql": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "example": {"db_id": "college_2", "query": "SELECT DISTINCT building FROM classroom WHERE capacity  >  50", "query_toks": ["SELECT", "DISTINCT", "building", "FROM", "classroom", "WHERE", "capacity", ">", "50"], "query_toks_no_value": ["select", "distinct", "building", "from", "classroom", "where", "capacity", ">", "value"], "question": "Find the buildings which have rooms with capacity more than 50.", "question_toks": ["Find", "the", "buildings", "which", "have", "rooms", "with", "capacity", "more", "than", "50", "."], "dataset_name": "spider", "guid": 686}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of instructors who didn't teach courses in the Spring?", "sql": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "example": {"db_id": "college_2", "query": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')", "query_toks": ["SELECT", "name", "FROM", "instructor", "WHERE", "id", "NOT", "IN", "(", "SELECT", "id", "FROM", "teaches", "WHERE", "semester", "=", "'Spring", "'", ")"], "query_toks_no_value": ["select", "name", "from", "instructor", "where", "id", "not", "in", "(", "select", "id", "from", "teaches", "where", "semester", "=", "value", ")"], "question": "What are the names of instructors who didn't teach courses in the Spring?", "question_toks": ["What", "are", "the", "names", "of", "instructors", "who", "did", "n't", "teach", "courses", "in", "the", "Spring", "?"], "dataset_name": "spider", "guid": 687}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?", "sql": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "example": {"db_id": "college_2", "query": "SELECT name ,  salary FROM instructor WHERE salary  <  (SELECT avg(salary) FROM instructor WHERE dept_name  =  'Physics')", "query_toks": ["SELECT", "name", ",", "salary", "FROM", "instructor", "WHERE", "salary", "<", "(", "SELECT", "avg", "(", "salary", ")", "FROM", "instructor", "WHERE", "dept_name", "=", "'Physics", "'", ")"], "query_toks_no_value": ["select", "name", ",", "salary", "from", "instructor", "where", "salary", "<", "(", "select", "avg", "(", "salary", ")", "from", "instructor", "where", "dept_name", "=", "value", ")"], "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?", "question_toks": ["What", "are", "the", "names", "and", "salaries", "for", "instructors", "who", "earn", "less", "than", "the", "average", "salary", "of", "instructors", "in", "the", "Physics", "department", "?"], "dataset_name": "spider", "guid": 688}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the course names for courses taught on MTW?", "sql": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "WHERE", "Days", "=", "``", "MTW", "''"], "query_toks_no_value": ["select", "cname", "from", "course", "where", "days", "=", "value"], "question": "What are the course names for courses taught on MTW?", "question_toks": ["What", "are", "the", "course", "names", "for", "courses", "taught", "on", "MTW", "?"], "dataset_name": "spider", "guid": 689}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find courses that ran in Fall 2009 and in Spring 2010.", "sql": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "INTERSECT", "SELECT", "course_id", "FROM", "SECTION", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value", "intersect", "select", "course_id", "from", "section", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "Find courses that ran in Fall 2009 and in Spring 2010.", "question_toks": ["Find", "courses", "that", "ran", "in", "Fall", "2009", "and", "in", "Spring", "2010", "."], "dataset_name": "spider", "guid": 690}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first names of the professors from the history department who do not teach a class.", "sql": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num", "example": {"db_id": "college_1", "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num", "query_toks": ["SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "EXCEPT", "SELECT", "T4.emp_fname", "FROM", "employee", "AS", "T4", "JOIN", "CLASS", "AS", "T5", "ON", "T4.emp_num", "=", "T5.prof_num"], "query_toks_no_value": ["select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "except", "select", "t4", ".", "emp_fname", "from", "employee", "as", "t4", "join", "class", "as", "t5", "on", "t4", ".", "emp_num", "=", "t5", ".", "prof_num"], "question": "What is the first names of the professors from the history department who do not teach a class.", "question_toks": ["What", "is", "the", "first", "names", "of", "the", "professors", "from", "the", "history", "department", "who", "do", "not", "teach", "a", "class", "."], "dataset_name": "spider", "guid": 691}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name and salary of instructors who are advisors of the students from the Math department.", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "example": {"db_id": "college_2", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'", "query_toks": ["SELECT", "T2.name", ",", "T2.salary", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "WHERE", "T3.dept_name", "=", "'Math", "'"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "salary", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "where", "t3", ".", "dept_name", "=", "value"], "question": "Find the name and salary of instructors who are advisors of the students from the Math department.", "question_toks": ["Find", "the", "name", "and", "salary", "of", "instructors", "who", "are", "advisors", "of", "the", "students", "from", "the", "Math", "department", "."], "dataset_name": "spider", "guid": 692}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many different courses offered by Physics department?", "sql": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "example": {"db_id": "college_2", "query": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "course_id", ")", "FROM", "course", "WHERE", "dept_name", "=", "'Physics", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "course_id", ")", "from", "course", "where", "dept_name", "=", "value"], "question": "How many different courses offered by Physics department?", "question_toks": ["How", "many", "different", "courses", "offered", "by", "Physics", "department", "?"], "dataset_name": "spider", "guid": 693}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the total budgets of the Marketing or Finance department.", "sql": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "example": {"db_id": "college_2", "query": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'", "query_toks": ["SELECT", "sum", "(", "budget", ")", "FROM", "department", "WHERE", "dept_name", "=", "'Marketing", "'", "OR", "dept_name", "=", "'Finance", "'"], "query_toks_no_value": ["select", "sum", "(", "budget", ")", "from", "department", "where", "dept_name", "=", "value", "or", "dept_name", "=", "value"], "question": "Find the total budgets of the Marketing or Finance department.", "question_toks": ["Find", "the", "total", "budgets", "of", "the", "Marketing", "or", "Finance", "department", "."], "dataset_name": "spider", "guid": 694}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | what are name and phone number of patients who had more than one appointment?", "sql": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1", "example": {"db_id": "hospital_1", "query": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1", "query_toks": ["SELECT", "name", ",", "phone", "FROM", "appointment", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.patient", "=", "T2.ssn", "GROUP", "BY", "T1.patient", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "name", ",", "phone", "from", "appointment", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn", "group", "by", "t1", ".", "patient", "having", "count", "(", "*", ")", ">", "value"], "question": "what are name and phone number of patients who had more than one appointment?", "question_toks": ["what", "are", "name", "and", "phone", "number", "of", "patients", "who", "had", "more", "than", "one", "appointment", "?"], "dataset_name": "spider", "guid": 695}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | List the first name of all employees with job code PROF ordered by their date of birth.", "sql": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob", "example": {"db_id": "college_1", "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob", "query_toks": ["SELECT", "emp_fname", "FROM", "employee", "WHERE", "emp_jobcode", "=", "'PROF", "'", "ORDER", "BY", "emp_dob"], "query_toks_no_value": ["select", "emp_fname", "from", "employee", "where", "emp_jobcode", "=", "value", "order", "by", "emp_dob"], "question": "List the first name of all employees with job code PROF ordered by their date of birth.", "question_toks": ["List", "the", "first", "name", "of", "all", "employees", "with", "job", "code", "PROF", "ordered", "by", "their", "date", "of", "birth", "."], "dataset_name": "spider", "guid": 696}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Sort the list of names and costs of all procedures in the descending order of cost.", "sql": "SELECT name ,  cost FROM procedures ORDER BY cost DESC", "example": {"db_id": "hospital_1", "query": "SELECT name ,  cost FROM procedures ORDER BY cost DESC", "query_toks": ["SELECT", "name", ",", "cost", "FROM", "procedures", "ORDER", "BY", "cost", "DESC"], "query_toks_no_value": ["select", "name", ",", "cost", "from", "procedures", "order", "by", "cost", "desc"], "question": "Sort the list of names and costs of all procedures in the descending order of cost.", "question_toks": ["Sort", "the", "list", "of", "names", "and", "costs", "of", "all", "procedures", "in", "the", "descending", "order", "of", "cost", "."], "dataset_name": "spider", "guid": 697}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of the patient who made the appointment with the most recent start date.", "sql": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "patient", "AS", "T1", "JOIN", "appointment", "AS", "T2", "ON", "T1.ssn", "=", "T2.patient", "ORDER", "BY", "T2.start", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "patient", "as", "t1", "join", "appointment", "as", "t2", "on", "t1", ".", "ssn", "=", "t2", ".", "patient", "order", "by", "t2", ".", "start", "desc", "limit", "value"], "question": "Find the name of the patient who made the appointment with the most recent start date.", "question_toks": ["Find", "the", "name", "of", "the", "patient", "who", "made", "the", "appointment", "with", "the", "most", "recent", "start", "date", "."], "dataset_name": "spider", "guid": 698}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all teachers who have taught a course and the corresponding course codes?", "sql": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.crs_code", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "crs_code", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num"], "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "teachers", "who", "have", "taught", "a", "course", "and", "the", "corresponding", "course", "codes", "?"], "dataset_name": "spider", "guid": 699}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What campuses opened before 1800?", "sql": "SELECT campus FROM campuses WHERE YEAR  <  1800", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE YEAR  <  1800", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", "<", "1800"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", "<", "value"], "question": "What campuses opened before 1800?", "question_toks": ["What", "campuses", "opened", "before", "1800", "?"], "dataset_name": "spider", "guid": 700}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the full names of students minoring in department 140?", "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "example": {"db_id": "college_3", "query": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "MINOR_IN", "AS", "T1", "JOIN", "STUDENT", "AS", "T2", "ON", "T1.StuID", "=", "T2.StuID", "WHERE", "T1.DNO", "=", "140"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "minor_in", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t1", ".", "dno", "=", "value"], "question": "What are the full names of students minoring in department 140?", "question_toks": ["What", "are", "the", "full", "names", "of", "students", "minoring", "in", "department", "140", "?"], "dataset_name": "spider", "guid": 701}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the rooms for members of the faculty who are professors and who live in building NEB?", "sql": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"", "example": {"db_id": "college_3", "query": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "Room", "FROM", "FACULTY", "WHERE", "Rank", "=", "``", "Professor", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "room", "from", "faculty", "where", "rank", "=", "value", "and", "building", "=", "value"], "question": "What are the rooms for members of the faculty who are professors and who live in building NEB?", "question_toks": ["What", "are", "the", "rooms", "for", "members", "of", "the", "faculty", "who", "are", "professors", "and", "who", "live", "in", "building", "NEB", "?"], "dataset_name": "spider", "guid": 702}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of students who have taken the prerequisite for the course International Finance?", "sql": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')", "query_toks": ["SELECT", "T1.name", "FROM", "student", "AS", "T1", "JOIN", "takes", "AS", "T2", "ON", "T1.id", "=", "T2.id", "WHERE", "T2.course_id", "IN", "(", "SELECT", "T4.prereq_id", "FROM", "course", "AS", "T3", "JOIN", "prereq", "AS", "T4", "ON", "T3.course_id", "=", "T4.course_id", "WHERE", "T3.title", "=", "'International", "Finance", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "student", "as", "t1", "join", "takes", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "where", "t2", ".", "course_id", "in", "(", "select", "t4", ".", "prereq_id", "from", "course", "as", "t3", "join", "prereq", "as", "t4", "on", "t3", ".", "course_id", "=", "t4", ".", "course_id", "where", "t3", ".", "title", "=", "value", ")"], "question": "What are the names of students who have taken the prerequisite for the course International Finance?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "have", "taken", "the", "prerequisite", "for", "the", "course", "International", "Finance", "?"], "dataset_name": "spider", "guid": 703}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?", "sql": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1", "query_toks": ["SELECT", "stu_fname", ",", "stu_lname", ",", "stu_gpa", "FROM", "student", "WHERE", "stu_gpa", ">", "3", "ORDER", "BY", "stu_dob", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "stu_fname", ",", "stu_lname", ",", "stu_gpa", "from", "student", "where", "stu_gpa", ">", "value", "order", "by", "stu_dob", "desc", "limit", "value"], "question": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "youngest", "student", "with", "a", "GPA", "above", "3", ",", "and", "what", "is", "their", "GPA", "?"], "dataset_name": "spider", "guid": 704}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?", "sql": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "example": {"db_id": "college_2", "query": "SELECT T3.title ,  T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building  =  T2.building AND T1.room_number  =  T2.room_number JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T1.capacity  =  (SELECT max(capacity) FROM classroom)", "query_toks": ["SELECT", "T3.title", ",", "T3.credits", "FROM", "classroom", "AS", "T1", "JOIN", "SECTION", "AS", "T2", "ON", "T1.building", "=", "T2.building", "AND", "T1.room_number", "=", "T2.room_number", "JOIN", "course", "AS", "T3", "ON", "T2.course_id", "=", "T3.course_id", "WHERE", "T1.capacity", "=", "(", "SELECT", "max", "(", "capacity", ")", "FROM", "classroom", ")"], "query_toks_no_value": ["select", "t3", ".", "title", ",", "t3", ".", "credits", "from", "classroom", "as", "t1", "join", "section", "as", "t2", "on", "t1", ".", "building", "=", "t2", ".", "building", "and", "t1", ".", "room_number", "=", "t2", ".", "room_number", "join", "course", "as", "t3", "on", "t2", ".", "course_id", "=", "t3", ".", "course_id", "where", "t1", ".", "capacity", "=", "(", "select", "max", "(", "capacity", ")", "from", "classroom", ")"], "question": "What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?", "question_toks": ["What", "is", "the", "title", "and", "credits", "of", "the", "course", "that", "is", "taught", "in", "the", "largest", "classroom", "(", "with", "the", "highest", "capacity", ")", "?"], "dataset_name": "spider", "guid": 705}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many sections does course ACCT-211 has?", "sql": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "class_section", ")", "FROM", "CLASS", "WHERE", "crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "class_section", ")", "from", "class", "where", "crs_code", "=", "value"], "question": "How many sections does course ACCT-211 has?", "question_toks": ["How", "many", "sections", "does", "course", "ACCT-211", "has", "?"], "dataset_name": "spider", "guid": 706}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of the department that offers a course that has a description including the word \"Statistics\"?", "sql": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "example": {"db_id": "college_1", "query": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'", "query_toks": ["SELECT", "T2.dept_name", "FROM", "course", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T1.crs_description", "LIKE", "'", "%", "Statistics", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "course", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t1", ".", "crs_description", "like", "value"], "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "that", "offers", "a", "course", "that", "has", "a", "description", "including", "the", "word", "``", "Statistics", "''", "?"], "dataset_name": "spider", "guid": 707}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names and salaries of instructors who advises students in the History department?", "sql": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "example": {"db_id": "college_2", "query": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'", "query_toks": ["SELECT", "T2.name", ",", "T2.salary", "FROM", "advisor", "AS", "T1", "JOIN", "instructor", "AS", "T2", "ON", "T1.i_id", "=", "T2.id", "JOIN", "student", "AS", "T3", "ON", "T1.s_id", "=", "T3.id", "WHERE", "T3.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "salary", "from", "advisor", "as", "t1", "join", "instructor", "as", "t2", "on", "t1", ".", "i_id", "=", "t2", ".", "id", "join", "student", "as", "t3", "on", "t1", ".", "s_id", "=", "t3", ".", "id", "where", "t3", ".", "dept_name", "=", "value"], "question": "What are the names and salaries of instructors who advises students in the History department?", "question_toks": ["What", "are", "the", "names", "and", "salaries", "of", "instructors", "who", "advises", "students", "in", "the", "History", "department", "?"], "dataset_name": "spider", "guid": 708}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the names of Art instructors who have taught a course, and the corresponding course id?", "sql": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "example": {"db_id": "college_2", "query": "SELECT name ,  course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID  =  T2.ID WHERE T1.dept_name  =  'Art'", "query_toks": ["SELECT", "name", ",", "course_id", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.ID", "=", "T2.ID", "WHERE", "T1.dept_name", "=", "'Art", "'"], "query_toks_no_value": ["select", "name", ",", "course_id", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "where", "t1", ".", "dept_name", "=", "value"], "question": "What are the names of Art instructors who have taught a course, and the corresponding course id?", "question_toks": ["What", "are", "the", "names", "of", "Art", "instructors", "who", "have", "taught", "a", "course", ",", "and", "the", "corresponding", "course", "id", "?"], "dataset_name": "spider", "guid": 709}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the year and semester with the most courses?", "sql": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "semester", ",", "YEAR", "FROM", "SECTION", "GROUP", "BY", "semester", ",", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "semester", ",", "year", "from", "section", "group", "by", "semester", ",", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the year and semester with the most courses?", "question_toks": ["What", "is", "the", "year", "and", "semester", "with", "the", "most", "courses", "?"], "dataset_name": "spider", "guid": 710}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the names of all students taking a course who received an A or C?", "sql": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'", "query_toks": ["SELECT", "T1.stu_fname", ",", "T1.stu_lname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "T2.enroll_grade", "=", "'C", "'", "OR", "T2.enroll_grade", "=", "'A", "'"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", ",", "t1", ".", "stu_lname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t2", ".", "enroll_grade", "=", "value", "or", "t2", ".", "enroll_grade", "=", "value"], "question": "What are the names of all students taking a course who received an A or C?", "question_toks": ["What", "are", "the", "names", "of", "all", "students", "taking", "a", "course", "who", "received", "an", "A", "or", "C", "?"], "dataset_name": "spider", "guid": 711}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title of a course that is listed in both the Statistics and Psychology departments?", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Statistics", "'", "INTERSECT", "SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Psychology", "'"], "query_toks_no_value": ["select", "title", "from", "course", "where", "dept_name", "=", "value", "intersect", "select", "title", "from", "course", "where", "dept_name", "=", "value"], "question": "What is the title of a course that is listed in both the Statistics and Psychology departments?", "question_toks": ["What", "is", "the", "title", "of", "a", "course", "that", "is", "listed", "in", "both", "the", "Statistics", "and", "Psychology", "departments", "?"], "dataset_name": "spider", "guid": 712}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the names of courses that give either 3 credits, or 1 credit and 4 hours?", "sql": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "WHERE", "Credits", "=", "3", "UNION", "SELECT", "CName", "FROM", "COURSE", "WHERE", "Credits", "=", "1", "AND", "Hours", "=", "4"], "query_toks_no_value": ["select", "cname", "from", "course", "where", "credits", "=", "value", "union", "select", "cname", "from", "course", "where", "credits", "=", "value", "and", "hours", "=", "value"], "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?", "question_toks": ["What", "are", "the", "names", "of", "courses", "that", "give", "either", "3", "credits", ",", "or", "1", "credit", "and", "4", "hours", "?"], "dataset_name": "spider", "guid": 713}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the name of the department that offers the largest number of credits of all classes.", "sql": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1", "query_toks": ["SELECT", "T3.dept_name", "FROM", "course", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "JOIN", "department", "AS", "T3", "ON", "T1.dept_code", "=", "T3.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "sum", "(", "T1.crs_credit", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "dept_name", "from", "course", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "join", "department", "as", "t3", "on", "t1", ".", "dept_code", "=", "t3", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "sum", "(", "t1", ".", "crs_credit", ")", "desc", "limit", "value"], "question": "Find the name of the department that offers the largest number of credits of all classes.", "question_toks": ["Find", "the", "name", "of", "the", "department", "that", "offers", "the", "largest", "number", "of", "credits", "of", "all", "classes", "."], "dataset_name": "spider", "guid": 714}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the first names of faculties of rank Professor in alphabetic order.", "sql": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname", "example": {"db_id": "college_3", "query": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname", "query_toks": ["SELECT", "Fname", "FROM", "FACULTY", "WHERE", "Rank", "=", "``", "Professor", "''", "ORDER", "BY", "Fname"], "query_toks_no_value": ["select", "fname", "from", "faculty", "where", "rank", "=", "value", "order", "by", "fname"], "question": "Find the first names of faculties of rank Professor in alphabetic order.", "question_toks": ["Find", "the", "first", "names", "of", "faculties", "of", "rank", "Professor", "in", "alphabetic", "order", "."], "dataset_name": "spider", "guid": 715}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.", "sql": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "example": {"db_id": "college_2", "query": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title", "query_toks": ["SELECT", "T1.title", ",", "T3.name", "FROM", "course", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "JOIN", "instructor", "AS", "T3", "ON", "T2.id", "=", "T3.id", "WHERE", "YEAR", "=", "2008", "ORDER", "BY", "T1.title"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t3", ".", "name", "from", "course", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "join", "instructor", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "id", "where", "year", "=", "value", "order", "by", "t1", ".", "title"], "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.", "question_toks": ["Show", "all", "titles", "and", "their", "instructors", "'", "names", "for", "courses", "in", "2008", ",", "in", "alphabetical", "order", "by", "title", "."], "dataset_name": "spider", "guid": 716}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | How many rooms in each building have a capacity of over 50?", "sql": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "example": {"db_id": "college_2", "query": "SELECT count(*) ,  building FROM classroom WHERE capacity  >  50 GROUP BY building", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "building", "FROM", "classroom", "WHERE", "capacity", ">", "50", "GROUP", "BY", "building"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "building", "from", "classroom", "where", "capacity", ">", "value", "group", "by", "building"], "question": "How many rooms in each building have a capacity of over 50?", "question_toks": ["How", "many", "rooms", "in", "each", "building", "have", "a", "capacity", "of", "over", "50", "?"], "dataset_name": "spider", "guid": 717}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many hours do the students spend studying in each department?", "sql": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code", "example": {"db_id": "college_1", "query": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code", "query_toks": ["SELECT", "sum", "(", "stu_hrs", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"], "query_toks_no_value": ["select", "sum", "(", "stu_hrs", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"], "question": "How many hours do the students spend studying in each department?", "question_toks": ["How", "many", "hours", "do", "the", "students", "spend", "studying", "in", "each", "department", "?"], "dataset_name": "spider", "guid": 718}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the names of all students who took a class and the corresponding course descriptions?", "sql": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code", "example": {"db_id": "college_1", "query": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code", "query_toks": ["SELECT", "T1.stu_fname", ",", "T1.stu_lname", ",", "T4.crs_description", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code"], "query_toks_no_value": ["select", "t1", ".", "stu_fname", ",", "t1", ".", "stu_lname", ",", "t4", ".", "crs_description", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code"], "question": "What are the names of all students who took a class and the corresponding course descriptions?", "question_toks": ["What", "are", "the", "names", "of", "all", "students", "who", "took", "a", "class", "and", "the", "corresponding", "course", "descriptions", "?"], "dataset_name": "spider", "guid": 719}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Which department has the highest average instructor salary?", "sql": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY avg(salary) DESC LIMIT 1", "query_toks": ["SELECT", "dept_name", "FROM", "instructor", "GROUP", "BY", "dept_name", "ORDER", "BY", "avg", "(", "salary", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "dept_name", "from", "instructor", "group", "by", "dept_name", "order", "by", "avg", "(", "salary", ")", "desc", "limit", "value"], "question": "Which department has the highest average instructor salary?", "question_toks": ["Which", "department", "has", "the", "highest", "average", "instructor", "salary", "?"], "dataset_name": "spider", "guid": 720}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title of the course that is a prerequisite for Mobile Computing?", "sql": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "course_id", "IN", "(", "SELECT", "T1.prereq_id", "FROM", "prereq", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "WHERE", "T2.title", "=", "'Mobile", "Computing", "'", ")"], "query_toks_no_value": ["select", "title", "from", "course", "where", "course_id", "in", "(", "select", "t1", ".", "prereq_id", "from", "prereq", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "where", "t2", ".", "title", "=", "value", ")"], "question": "What is the title of the course that is a prerequisite for Mobile Computing?", "question_toks": ["What", "is", "the", "title", "of", "the", "course", "that", "is", "a", "prerequisite", "for", "Mobile", "Computing", "?"], "dataset_name": "spider", "guid": 721}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the name of physicians who are affiliated with Surgery or Psychiatry department.", "sql": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "affiliated_with", "AS", "T2", "ON", "T1.EmployeeID", "=", "T2.physician", "JOIN", "department", "AS", "T3", "ON", "T2.department", "=", "T3.DepartmentID", "WHERE", "T3.name", "=", "'Surgery", "'", "OR", "T3.name", "=", "'Psychiatry", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "affiliated_with", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "department", "as", "t3", "on", "t2", ".", "department", "=", "t3", ".", "departmentid", "where", "t3", ".", "name", "=", "value", "or", "t3", ".", "name", "=", "value"], "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.", "question_toks": ["Find", "the", "name", "of", "physicians", "who", "are", "affiliated", "with", "Surgery", "or", "Psychiatry", "department", "."], "dataset_name": "spider", "guid": 722}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names, office locations of all lecturers who have taught some course?", "sql": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num", "query_toks": ["SELECT", "T2.emp_fname", ",", "T4.prof_office", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "professor", "AS", "T4", "ON", "T2.emp_num", "=", "T4.emp_num"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t4", ".", "prof_office", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "professor", "as", "t4", "on", "t2", ".", "emp_num", "=", "t4", ".", "emp_num"], "question": "What are the first names, office locations of all lecturers who have taught some course?", "question_toks": ["What", "are", "the", "first", "names", ",", "office", "locations", "of", "all", "lecturers", "who", "have", "taught", "some", "course", "?"], "dataset_name": "spider", "guid": 723}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of patients who are staying in room 111 and have an undergoing treatment?", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "undergoes", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.patient", "=", "T2.SSN", "JOIN", "stay", "AS", "T3", "ON", "T1.Stay", "=", "T3.StayID", "WHERE", "T3.room", "=", "111"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "undergoes", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn", "join", "stay", "as", "t3", "on", "t1", ".", "stay", "=", "t3", ".", "stayid", "where", "t3", ".", "room", "=", "value"], "question": "What are the names of patients who are staying in room 111 and have an undergoing treatment?", "question_toks": ["What", "are", "the", "names", "of", "patients", "who", "are", "staying", "in", "room", "111", "and", "have", "an", "undergoing", "treatment", "?"], "dataset_name": "spider", "guid": 724}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are names of patients who made an appointment?", "sql": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn", "example": {"db_id": "hospital_1", "query": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn", "query_toks": ["SELECT", "name", "FROM", "appointment", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.patient", "=", "T2.ssn"], "query_toks_no_value": ["select", "name", "from", "appointment", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn"], "question": "What are names of patients who made an appointment?", "question_toks": ["What", "are", "names", "of", "patients", "who", "made", "an", "appointment", "?"], "dataset_name": "spider", "guid": 725}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the maximum and minumum grade points?", "sql": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION", "example": {"db_id": "college_3", "query": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION", "query_toks": ["SELECT", "max", "(", "gradepoint", ")", ",", "min", "(", "gradepoint", ")", "FROM", "GRADECONVERSION"], "query_toks_no_value": ["select", "max", "(", "gradepoint", ")", ",", "min", "(", "gradepoint", ")", "from", "gradeconversion"], "question": "What are the maximum and minumum grade points?", "question_toks": ["What", "are", "the", "maximum", "and", "minumum", "grade", "points", "?"], "dataset_name": "spider", "guid": 726}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the first name of students who got grade C in any class?", "sql": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'", "example": {"db_id": "college_1", "query": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'", "query_toks": ["SELECT", "DISTINCT", "stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "enroll_grade", "=", "'C", "'"], "query_toks_no_value": ["select", "distinct", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "enroll_grade", "=", "value"], "question": "What is the first name of students who got grade C in any class?", "question_toks": ["What", "is", "the", "first", "name", "of", "students", "who", "got", "grade", "C", "in", "any", "class", "?"], "dataset_name": "spider", "guid": 727}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find all procedures which cost more than 1000 or which physician John Wen was trained in.", "sql": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT name FROM procedures WHERE cost  >  1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "name", "FROM", "procedures", "WHERE", "cost", ">", "1000", "UNION", "SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "name", "from", "procedures", "where", "cost", ">", "value", "union", "select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "Find all procedures which cost more than 1000 or which physician John Wen was trained in.", "question_toks": ["Find", "all", "procedures", "which", "cost", "more", "than", "1000", "or", "which", "physician", "John", "Wen", "was", "trained", "in", "."], "dataset_name": "spider", "guid": 728}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the description for the CIS-220 and how many credits does it have?", "sql": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'", "example": {"db_id": "college_1", "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'", "query_toks": ["SELECT", "crs_credit", ",", "crs_description", "FROM", "course", "WHERE", "crs_code", "=", "'CIS-220", "'"], "query_toks_no_value": ["select", "crs_credit", ",", "crs_description", "from", "course", "where", "crs_code", "=", "value"], "question": "What is the description for the CIS-220 and how many credits does it have?", "question_toks": ["What", "is", "the", "description", "for", "the", "CIS-220", "and", "how", "many", "credits", "does", "it", "have", "?"], "dataset_name": "spider", "guid": 729}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Which university is in Los Angeles county and opened after 1950?", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''", "AND", "YEAR", ">", "1950"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value", "and", "year", ">", "value"], "question": "Which university is in Los Angeles county and opened after 1950?", "question_toks": ["Which", "university", "is", "in", "Los", "Angeles", "county", "and", "opened", "after", "1950", "?"], "dataset_name": "spider", "guid": 730}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the id of instructors who didn't teach any courses?", "sql": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "example": {"db_id": "college_2", "query": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches", "query_toks": ["SELECT", "id", "FROM", "instructor", "EXCEPT", "SELECT", "id", "FROM", "teaches"], "query_toks_no_value": ["select", "id", "from", "instructor", "except", "select", "id", "from", "teaches"], "question": "Find the id of instructors who didn't teach any courses?", "question_toks": ["Find", "the", "id", "of", "instructors", "who", "did", "n't", "teach", "any", "courses", "?"], "dataset_name": "spider", "guid": 731}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names of all students who took ACCT-211 and received a C?", "sql": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'", "example": {"db_id": "college_1", "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'", "query_toks": ["SELECT", "T3.stu_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T2.stu_num", "=", "T3.stu_num", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'", "AND", "T2.enroll_grade", "=", "'C", "'"], "query_toks_no_value": ["select", "t3", ".", "stu_fname", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t2", ".", "stu_num", "=", "t3", ".", "stu_num", "where", "t1", ".", "crs_code", "=", "value", "and", "t2", ".", "enroll_grade", "=", "value"], "question": "What are the first names of all students who took ACCT-211 and received a C?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "who", "took", "ACCT-211", "and", "received", "a", "C", "?"], "dataset_name": "spider", "guid": 732}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What is the title, credit value, and department name for courses with more than one prerequisite?", "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.title", ",", "T1.credits", ",", "T1.dept_name", "FROM", "course", "AS", "T1", "JOIN", "prereq", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T2.course_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "credits", ",", "t1", ".", "dept_name", "from", "course", "as", "t1", "join", "prereq", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t2", ".", "course_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What is the title, credit value, and department name for courses with more than one prerequisite?", "question_toks": ["What", "is", "the", "title", ",", "credit", "value", ",", "and", "department", "name", "for", "courses", "with", "more", "than", "one", "prerequisite", "?"], "dataset_name": "spider", "guid": 733}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Which school has the smallest amount of professors?", "sql": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Which school has the smallest amount of professors?", "question_toks": ["Which", "school", "has", "the", "smallest", "amount", "of", "professors", "?"], "dataset_name": "spider", "guid": 734}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the greatest and average capacity for rooms in each building?", "sql": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "example": {"db_id": "college_2", "query": "SELECT max(capacity) ,  avg(capacity) ,  building FROM classroom GROUP BY building", "query_toks": ["SELECT", "max", "(", "capacity", ")", ",", "avg", "(", "capacity", ")", ",", "building", "FROM", "classroom", "GROUP", "BY", "building"], "query_toks_no_value": ["select", "max", "(", "capacity", ")", ",", "avg", "(", "capacity", ")", ",", "building", "from", "classroom", "group", "by", "building"], "question": "What are the greatest and average capacity for rooms in each building?", "question_toks": ["What", "are", "the", "greatest", "and", "average", "capacity", "for", "rooms", "in", "each", "building", "?"], "dataset_name": "spider", "guid": 735}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many different locations does each school have?", "sql": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_address", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_address", ")", ",", "school_code", "from", "department", "group", "by", "school_code"], "question": "How many different locations does each school have?", "question_toks": ["How", "many", "different", "locations", "does", "each", "school", "have", "?"], "dataset_name": "spider", "guid": 736}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the first names of students whose first names contain letter \"a\".", "sql": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'", "example": {"db_id": "college_3", "query": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'", "query_toks": ["SELECT", "DISTINCT", "Fname", "FROM", "STUDENT", "WHERE", "Fname", "LIKE", "'", "%", "a", "%", "'"], "query_toks_no_value": ["select", "distinct", "fname", "from", "student", "where", "fname", "like", "value"], "question": "Find the first names of students whose first names contain letter \"a\".", "question_toks": ["Find", "the", "first", "names", "of", "students", "whose", "first", "names", "contain", "letter", "``", "a", "''", "."], "dataset_name": "spider", "guid": 737}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the average GPA of students taking ACCT-211?", "sql": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'", "example": {"db_id": "college_1", "query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'", "query_toks": ["SELECT", "avg", "(", "T2.stu_gpa", ")", "FROM", "enroll", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T1.class_code", "=", "T3.class_code", "WHERE", "T3.crs_code", "=", "'ACCT-211", "'"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "stu_gpa", ")", "from", "enroll", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t1", ".", "class_code", "=", "t3", ".", "class_code", "where", "t3", ".", "crs_code", "=", "value"], "question": "What is the average GPA of students taking ACCT-211?", "question_toks": ["What", "is", "the", "average", "GPA", "of", "students", "taking", "ACCT-211", "?"], "dataset_name": "spider", "guid": 738}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | How many faculty lines are there in \"San Francisco State University\" in year 2004?", "sql": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"", "example": {"db_id": "csu_1", "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"", "query_toks": ["SELECT", "faculty", "FROM", "faculty", "AS", "T1", "JOIN", "campuses", "AS", "T2", "ON", "T1.campus", "=", "T2.id", "WHERE", "T1.year", "=", "2004", "AND", "T2.campus", "=", "``", "San", "Francisco", "State", "University", "''"], "query_toks_no_value": ["select", "faculty", "from", "faculty", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"], "question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?", "question_toks": ["How", "many", "faculty", "lines", "are", "there", "in", "``", "San", "Francisco", "State", "University", "''", "in", "year", "2004", "?"], "dataset_name": "spider", "guid": 739}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Count different addresses of each school.", "sql": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_address", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_address", ")", ",", "school_code", "from", "department", "group", "by", "school_code"], "question": "Count different addresses of each school.", "question_toks": ["Count", "different", "addresses", "of", "each", "school", "."], "dataset_name": "spider", "guid": 740}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Which year had the greatest number of courses?", "sql": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "SECTION", "GROUP", "BY", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "section", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which year had the greatest number of courses?", "question_toks": ["Which", "year", "had", "the", "greatest", "number", "of", "courses", "?"], "dataset_name": "spider", "guid": 741}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the physicians who are trained in a procedure that costs more than 5000.", "sql": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T3.cost", ">", "5000"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t3", ".", "cost", ">", "value"], "question": "Find the physicians who are trained in a procedure that costs more than 5000.", "question_toks": ["Find", "the", "physicians", "who", "are", "trained", "in", "a", "procedure", "that", "costs", "more", "than", "5000", "."], "dataset_name": "spider", "guid": 742}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Count the number of courses with more than 2 credits.", "sql": "SELECT count(*) FROM COURSE WHERE Credits  >  2", "example": {"db_id": "college_3", "query": "SELECT count(*) FROM COURSE WHERE Credits  >  2", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "COURSE", "WHERE", "Credits", ">", "2"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "course", "where", "credits", ">", "value"], "question": "Count the number of courses with more than 2 credits.", "question_toks": ["Count", "the", "number", "of", "courses", "with", "more", "than", "2", "credits", "."], "dataset_name": "spider", "guid": 743}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the last names of faculty who are part of the computer science department?", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"", "example": {"db_id": "college_3", "query": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"", "query_toks": ["SELECT", "T2.Lname", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.DNO", "=", "T3.DNO", "JOIN", "MEMBER_OF", "AS", "T3", "ON", "T2.FacID", "=", "T3.FacID", "WHERE", "T1.DName", "=", "``", "Computer", "Science", "''"], "query_toks_no_value": ["select", "t2", ".", "lname", "from", "department", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "dno", "=", "t3", ".", "dno", "join", "member_of", "as", "t3", "on", "t2", ".", "facid", "=", "t3", ".", "facid", "where", "t1", ".", "dname", "=", "value"], "question": "What are the last names of faculty who are part of the computer science department?", "question_toks": ["What", "are", "the", "last", "names", "of", "faculty", "who", "are", "part", "of", "the", "computer", "science", "department", "?"], "dataset_name": "spider", "guid": 744}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the name of the department and office location for the professor with the last name of Heffington?", "sql": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'", "example": {"db_id": "college_1", "query": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'", "query_toks": ["SELECT", "T3.dept_name", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T1.emp_lname", "=", "'Heffington", "'"], "query_toks_no_value": ["select", "t3", ".", "dept_name", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t1", ".", "emp_lname", "=", "value"], "question": "What is the name of the department and office location for the professor with the last name of Heffington?", "question_toks": ["What", "is", "the", "name", "of", "the", "department", "and", "office", "location", "for", "the", "professor", "with", "the", "last", "name", "of", "Heffington", "?"], "dataset_name": "spider", "guid": 745}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the title of course that is provided by both Statistics and Psychology departments.", "sql": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "example": {"db_id": "college_2", "query": "SELECT title FROM course WHERE dept_name  =  'Statistics' INTERSECT SELECT title FROM course WHERE dept_name  =  'Psychology'", "query_toks": ["SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Statistics", "'", "INTERSECT", "SELECT", "title", "FROM", "course", "WHERE", "dept_name", "=", "'Psychology", "'"], "query_toks_no_value": ["select", "title", "from", "course", "where", "dept_name", "=", "value", "intersect", "select", "title", "from", "course", "where", "dept_name", "=", "value"], "question": "Find the title of course that is provided by both Statistics and Psychology departments.", "question_toks": ["Find", "the", "title", "of", "course", "that", "is", "provided", "by", "both", "Statistics", "and", "Psychology", "departments", "."], "dataset_name": "spider", "guid": 746}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | List the codes of all courses that take place in room KLR209.", "sql": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'", "example": {"db_id": "college_1", "query": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'", "query_toks": ["SELECT", "class_code", "FROM", "CLASS", "WHERE", "class_room", "=", "'KLR209", "'"], "query_toks_no_value": ["select", "class_code", "from", "class", "where", "class_room", "=", "value"], "question": "List the codes of all courses that take place in room KLR209.", "question_toks": ["List", "the", "codes", "of", "all", "courses", "that", "take", "place", "in", "room", "KLR209", "."], "dataset_name": "spider", "guid": 747}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many professors who are from either Accounting or Biology department?", "sql": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T2.dept_name", "=", "'Accounting", "'", "OR", "T2.dept_name", "=", "'Biology", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t2", ".", "dept_name", "=", "value", "or", "t2", ".", "dept_name", "=", "value"], "question": "How many professors who are from either Accounting or Biology department?", "question_toks": ["How", "many", "professors", "who", "are", "from", "either", "Accounting", "or", "Biology", "department", "?"], "dataset_name": "spider", "guid": 748}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Give the phones for departments in room 268.", "sql": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268", "example": {"db_id": "college_3", "query": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268", "query_toks": ["SELECT", "DPhone", "FROM", "DEPARTMENT", "WHERE", "Room", "=", "268"], "query_toks_no_value": ["select", "dphone", "from", "department", "where", "room", "=", "value"], "question": "Give the phones for departments in room 268.", "question_toks": ["Give", "the", "phones", "for", "departments", "in", "room", "268", "."], "dataset_name": "spider", "guid": 749}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the first names and last names of the students that minor in the department with DNO 140.", "sql": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "example": {"db_id": "college_3", "query": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140", "query_toks": ["SELECT", "T2.Fname", ",", "T2.Lname", "FROM", "MINOR_IN", "AS", "T1", "JOIN", "STUDENT", "AS", "T2", "ON", "T1.StuID", "=", "T2.StuID", "WHERE", "T1.DNO", "=", "140"], "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "minor_in", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t1", ".", "dno", "=", "value"], "question": "What are the first names and last names of the students that minor in the department with DNO 140.", "question_toks": ["What", "are", "the", "first", "names", "and", "last", "names", "of", "the", "students", "that", "minor", "in", "the", "department", "with", "DNO", "140", "."], "dataset_name": "spider", "guid": 750}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the full names of faculty members who are a part of department 520?", "sql": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520", "example": {"db_id": "college_3", "query": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520", "query_toks": ["SELECT", "T1.Fname", ",", "T1.Lname", "FROM", "FACULTY", "AS", "T1", "JOIN", "MEMBER_OF", "AS", "T2", "ON", "T1.FacID", "=", "T2.FacID", "WHERE", "T2.DNO", "=", "520"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "member_of", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "where", "t2", ".", "dno", "=", "value"], "question": "What are the full names of faculty members who are a part of department 520?", "question_toks": ["What", "are", "the", "full", "names", "of", "faculty", "members", "who", "are", "a", "part", "of", "department", "520", "?"], "dataset_name": "spider", "guid": 751}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.", "sql": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "Northridge", "''", "AND", "county", "=", "``", "Los", "Angeles", "''", "UNION", "SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "San", "Francisco", "''", "AND", "county", "=", "``", "San", "Francisco", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "location", "=", "value", "and", "county", "=", "value", "union", "select", "campus", "from", "campuses", "where", "location", "=", "value", "and", "county", "=", "value"], "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.", "question_toks": ["Find", "the", "name", "of", "the", "campuses", "that", "is", "in", "Northridge", ",", "Los", "Angeles", "or", "in", "San", "Francisco", ",", "San", "Francisco", "."], "dataset_name": "spider", "guid": 752}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What are the first names for all faculty professors, ordered by first name?", "sql": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname", "example": {"db_id": "college_3", "query": "SELECT Fname FROM FACULTY WHERE Rank  =  \"Professor\" ORDER BY Fname", "query_toks": ["SELECT", "Fname", "FROM", "FACULTY", "WHERE", "Rank", "=", "``", "Professor", "''", "ORDER", "BY", "Fname"], "query_toks_no_value": ["select", "fname", "from", "faculty", "where", "rank", "=", "value", "order", "by", "fname"], "question": "What are the first names for all faculty professors, ordered by first name?", "question_toks": ["What", "are", "the", "first", "names", "for", "all", "faculty", "professors", ",", "ordered", "by", "first", "name", "?"], "dataset_name": "spider", "guid": 753}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the semester and year which has the least number of student taking any class.", "sql": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "example": {"db_id": "college_2", "query": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "semester", ",", "YEAR", "FROM", "takes", "GROUP", "BY", "semester", ",", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "semester", ",", "year", "from", "takes", "group", "by", "semester", ",", "year", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Find the semester and year which has the least number of student taking any class.", "question_toks": ["Find", "the", "semester", "and", "year", "which", "has", "the", "least", "number", "of", "student", "taking", "any", "class", "."], "dataset_name": "spider", "guid": 754}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the names of courses that have either 3 credits or 1 credit but 4 hours.", "sql": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "WHERE", "Credits", "=", "3", "UNION", "SELECT", "CName", "FROM", "COURSE", "WHERE", "Credits", "=", "1", "AND", "Hours", "=", "4"], "query_toks_no_value": ["select", "cname", "from", "course", "where", "credits", "=", "value", "union", "select", "cname", "from", "course", "where", "credits", "=", "value", "and", "hours", "=", "value"], "question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.", "question_toks": ["Find", "the", "names", "of", "courses", "that", "have", "either", "3", "credits", "or", "1", "credit", "but", "4", "hours", "."], "dataset_name": "spider", "guid": 755}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | Find the first names and offices of all professors sorted by alphabetical order of their first name.", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.prof_office", "FROM", "professor", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "ORDER", "BY", "T2.emp_fname"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "prof_office", "from", "professor", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "order", "by", "t2", ".", "emp_fname"], "question": "Find the first names and offices of all professors sorted by alphabetical order of their first name.", "question_toks": ["Find", "the", "first", "names", "and", "offices", "of", "all", "professors", "sorted", "by", "alphabetical", "order", "of", "their", "first", "name", "."], "dataset_name": "spider", "guid": 756}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the number of medications prescribed for each brand.", "sql": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "example": {"db_id": "hospital_1", "query": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "medication", "AS", "T1", "JOIN", "prescribes", "AS", "T2", "ON", "T1.code", "=", "T2.medication", "GROUP", "BY", "T1.brand"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "medication", "as", "t1", "join", "prescribes", "as", "t2", "on", "t1", ".", "code", "=", "t2", ".", "medication", "group", "by", "t1", ".", "brand"], "question": "Find the number of medications prescribed for each brand.", "question_toks": ["Find", "the", "number", "of", "medications", "prescribed", "for", "each", "brand", "."], "dataset_name": "spider", "guid": 757}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | List the course name of courses sorted by credits.", "sql": "SELECT CName FROM COURSE ORDER BY Credits", "example": {"db_id": "college_3", "query": "SELECT CName FROM COURSE ORDER BY Credits", "query_toks": ["SELECT", "CName", "FROM", "COURSE", "ORDER", "BY", "Credits"], "query_toks_no_value": ["select", "cname", "from", "course", "order", "by", "credits"], "question": "List the course name of courses sorted by credits.", "question_toks": ["List", "the", "course", "name", "of", "courses", "sorted", "by", "credits", "."], "dataset_name": "spider", "guid": 758}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the last name of female (sex is F) students in the descending order of age.", "sql": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC", "example": {"db_id": "college_3", "query": "SELECT LName FROM STUDENT WHERE Sex  =  \"F\" ORDER BY Age DESC", "query_toks": ["SELECT", "LName", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "F", "''", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "lname", "from", "student", "where", "sex", "=", "value", "order", "by", "age", "desc"], "question": "Find the last name of female (sex is F) students in the descending order of age.", "question_toks": ["Find", "the", "last", "name", "of", "female", "(", "sex", "is", "F", ")", "students", "in", "the", "descending", "order", "of", "age", "."], "dataset_name": "spider", "guid": 759}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | How many patients stay in room 112?", "sql": "SELECT count(patient) FROM stay WHERE room  =  112", "example": {"db_id": "hospital_1", "query": "SELECT count(patient) FROM stay WHERE room  =  112", "query_toks": ["SELECT", "count", "(", "patient", ")", "FROM", "stay", "WHERE", "room", "=", "112"], "query_toks_no_value": ["select", "count", "(", "patient", ")", "from", "stay", "where", "room", "=", "value"], "question": "How many patients stay in room 112?", "question_toks": ["How", "many", "patients", "stay", "in", "room", "112", "?"], "dataset_name": "spider", "guid": 760}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which physicians are in charge of more than one patient? Give me their names.", "sql": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1", "example": {"db_id": "hospital_1", "query": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "physician", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.employeeid", "=", "T2.PCP", "GROUP", "BY", "T1.employeeid", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "physician", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "pcp", "group", "by", "t1", ".", "employeeid", "having", "count", "(", "*", ")", ">", "value"], "question": "Which physicians are in charge of more than one patient? Give me their names.", "question_toks": ["Which", "physicians", "are", "in", "charge", "of", "more", "than", "one", "patient", "?", "Give", "me", "their", "names", "."], "dataset_name": "spider", "guid": 761}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Count the number of rooms that are not in the Lamberton building.", "sql": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "example": {"db_id": "college_2", "query": "SELECT count(*) FROM classroom WHERE building != 'Lamberton'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "classroom", "WHERE", "building", "!", "=", "'Lamberton", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "classroom", "where", "building", "!", "=", "value"], "question": "Count the number of rooms that are not in the Lamberton building.", "question_toks": ["Count", "the", "number", "of", "rooms", "that", "are", "not", "in", "the", "Lamberton", "building", "."], "dataset_name": "spider", "guid": 762}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the name of the instructors who taught C Programming course before.", "sql": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "example": {"db_id": "college_2", "query": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'", "query_toks": ["SELECT", "T1.name", "FROM", "instructor", "AS", "T1", "JOIN", "teaches", "AS", "T2", "ON", "T1.id", "=", "T2.id", "JOIN", "course", "AS", "T3", "ON", "T2.course_id", "=", "T3.course_id", "WHERE", "T3.title", "=", "'C", "Programming", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "instructor", "as", "t1", "join", "teaches", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "id", "join", "course", "as", "t3", "on", "t2", ".", "course_id", "=", "t3", ".", "course_id", "where", "t3", ".", "title", "=", "value"], "question": "Find the name of the instructors who taught C Programming course before.", "question_toks": ["Find", "the", "name", "of", "the", "instructors", "who", "taught", "C", "Programming", "course", "before", "."], "dataset_name": "spider", "guid": 763}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the last name and office of all history professors?", "sql": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'", "example": {"db_id": "college_1", "query": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'", "query_toks": ["SELECT", "T1.emp_lname", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'"], "query_toks_no_value": ["select", "t1", ".", "emp_lname", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value"], "question": "What are the last name and office of all history professors?", "question_toks": ["What", "are", "the", "last", "name", "and", "office", "of", "all", "history", "professors", "?"], "dataset_name": "spider", "guid": 764}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the rank of the faculty that the fewest faculties belong to.", "sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "Rank", "FROM", "FACULTY", "GROUP", "BY", "Rank", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "rank", "from", "faculty", "group", "by", "rank", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Find the rank of the faculty that the fewest faculties belong to.", "question_toks": ["Find", "the", "rank", "of", "the", "faculty", "that", "the", "fewest", "faculties", "belong", "to", "."], "dataset_name": "spider", "guid": 765}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What are the first names and offices of history professors who don't have Ph.D.s?", "sql": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'", "example": {"db_id": "college_1", "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'", "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.prof_office", "FROM", "professor", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T1.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "AND", "T1.prof_high_degree", "!", "=", "'Ph.D", ".", "'"], "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "prof_office", "from", "professor", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t1", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "and", "t1", ".", "prof_high_degree", "!", "=", "value"], "question": "What are the first names and offices of history professors who don't have Ph.D.s?", "question_toks": ["What", "are", "the", "first", "names", "and", "offices", "of", "history", "professors", "who", "do", "n't", "have", "Ph.D.s", "?"], "dataset_name": "spider", "guid": 766}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?", "sql": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "example": {"db_id": "college_2", "query": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010", "query_toks": ["SELECT", "id", "FROM", "teaches", "WHERE", "semester", "=", "'Fall", "'", "AND", "YEAR", "=", "2009", "EXCEPT", "SELECT", "id", "FROM", "teaches", "WHERE", "semester", "=", "'Spring", "'", "AND", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "id", "from", "teaches", "where", "semester", "=", "value", "and", "year", "=", "value", "except", "select", "id", "from", "teaches", "where", "semester", "=", "value", "and", "year", "=", "value"], "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?", "question_toks": ["What", "are", "the", "ids", "of", "instructors", "who", "taught", "in", "the", "Fall", "of", "2009", "but", "not", "in", "the", "Spring", "of", "2010", "?"], "dataset_name": "spider", "guid": 767}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What are the names of procedures physician John Wen was trained in?", "sql": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "example": {"db_id": "hospital_1", "query": "SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"", "query_toks": ["SELECT", "T3.name", "FROM", "physician", "AS", "T1", "JOIN", "trained_in", "AS", "T2", "ON", "T1.employeeid", "=", "T2.physician", "JOIN", "procedures", "AS", "T3", "ON", "T3.code", "=", "T2.treatment", "WHERE", "T1.name", "=", "``", "John", "Wen", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "physician", "as", "t1", "join", "trained_in", "as", "t2", "on", "t1", ".", "employeeid", "=", "t2", ".", "physician", "join", "procedures", "as", "t3", "on", "t3", ".", "code", "=", "t2", ".", "treatment", "where", "t1", ".", "name", "=", "value"], "question": "What are the names of procedures physician John Wen was trained in?", "question_toks": ["What", "are", "the", "names", "of", "procedures", "physician", "John", "Wen", "was", "trained", "in", "?"], "dataset_name": "spider", "guid": 768}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which nurses are in charge of patients undergoing treatments?", "sql": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID", "example": {"db_id": "hospital_1", "query": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "undergoes", "AS", "T1", "JOIN", "nurse", "AS", "T2", "ON", "T1.AssistingNurse", "=", "T2.EmployeeID"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "undergoes", "as", "t1", "join", "nurse", "as", "t2", "on", "t1", ".", "assistingnurse", "=", "t2", ".", "employeeid"], "question": "Which nurses are in charge of patients undergoing treatments?", "question_toks": ["Which", "nurses", "are", "in", "charge", "of", "patients", "undergoing", "treatments", "?"], "dataset_name": "spider", "guid": 769}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Count the number of patients who stayed in room 112.", "sql": "SELECT count(patient) FROM stay WHERE room  =  112", "example": {"db_id": "hospital_1", "query": "SELECT count(patient) FROM stay WHERE room  =  112", "query_toks": ["SELECT", "count", "(", "patient", ")", "FROM", "stay", "WHERE", "room", "=", "112"], "query_toks_no_value": ["select", "count", "(", "patient", ")", "from", "stay", "where", "room", "=", "value"], "question": "Count the number of patients who stayed in room 112.", "question_toks": ["Count", "the", "number", "of", "patients", "who", "stayed", "in", "room", "112", "."], "dataset_name": "spider", "guid": 770}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the title, credit, and department name of courses that have more than one prerequisites?", "sql": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "example": {"db_id": "college_2", "query": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.title", ",", "T1.credits", ",", "T1.dept_name", "FROM", "course", "AS", "T1", "JOIN", "prereq", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T2.course_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "credits", ",", "t1", ".", "dept_name", "from", "course", "as", "t1", "join", "prereq", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t2", ".", "course_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the title, credit, and department name of courses that have more than one prerequisites?", "question_toks": ["Find", "the", "title", ",", "credit", ",", "and", "department", "name", "of", "courses", "that", "have", "more", "than", "one", "prerequisites", "?"], "dataset_name": "spider", "guid": 771}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many courses are offered by the Computer Info. Systems department?", "sql": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "department", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "dept_name", "=", "``", "Computer", "Info", ".", "Systems", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "dept_name", "=", "value"], "question": "How many courses are offered by the Computer Info. Systems department?", "question_toks": ["How", "many", "courses", "are", "offered", "by", "the", "Computer", "Info", ".", "Systems", "department", "?"], "dataset_name": "spider", "guid": 772}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Give the maximum and minimum gradepoints for students living in NYC?", "sql": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"", "example": {"db_id": "college_3", "query": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"", "query_toks": ["SELECT", "max", "(", "T2.gradepoint", ")", ",", "min", "(", "T2.gradepoint", ")", "FROM", "ENROLLED_IN", "AS", "T1", "JOIN", "GRADECONVERSION", "AS", "T2", "JOIN", "STUDENT", "AS", "T3", "ON", "T1.Grade", "=", "T2.lettergrade", "AND", "T1.StuID", "=", "T3.StuID", "WHERE", "T3.city_code", "=", "``", "NYC", "''"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "gradepoint", ")", ",", "min", "(", "t2", ".", "gradepoint", ")", "from", "enrolled_in", "as", "t1", "join", "gradeconversion", "as", "t2", "join", "student", "as", "t3", "on", "t1", ".", "grade", "=", "t2", ".", "lettergrade", "and", "t1", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "city_code", "=", "value"], "question": "Give the maximum and minimum gradepoints for students living in NYC?", "question_toks": ["Give", "the", "maximum", "and", "minimum", "gradepoints", "for", "students", "living", "in", "NYC", "?"], "dataset_name": "spider", "guid": 773}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Find the names of patients who are not using the medication of Procrastin-X.", "sql": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'", "example": {"db_id": "hospital_1", "query": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'", "query_toks": ["SELECT", "name", "FROM", "patient", "EXCEPT", "SELECT", "T1.name", "FROM", "patient", "AS", "T1", "JOIN", "Prescribes", "AS", "T2", "ON", "T2.Patient", "=", "T1.SSN", "JOIN", "Medication", "AS", "T3", "ON", "T2.Medication", "=", "T3.Code", "WHERE", "T3.name", "=", "'Procrastin-X", "'"], "query_toks_no_value": ["select", "name", "from", "patient", "except", "select", "t1", ".", "name", "from", "patient", "as", "t1", "join", "prescribes", "as", "t2", "on", "t2", ".", "patient", "=", "t1", ".", "ssn", "join", "medication", "as", "t3", "on", "t2", ".", "medication", "=", "t3", ".", "code", "where", "t3", ".", "name", "=", "value"], "question": "Find the names of patients who are not using the medication of Procrastin-X.", "question_toks": ["Find", "the", "names", "of", "patients", "who", "are", "not", "using", "the", "medication", "of", "Procrastin-X", "."], "dataset_name": "spider", "guid": 774}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many classes are professor whose last name is Graztevski has?", "sql": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'", "example": {"db_id": "college_1", "query": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.EMP_NUM", "=", "T2.PROF_NUM", "WHERE", "T1.EMP_LNAME", "=", "'Graztevski", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "t1", ".", "emp_lname", "=", "value"], "question": "How many classes are professor whose last name is Graztevski has?", "question_toks": ["How", "many", "classes", "are", "professor", "whose", "last", "name", "is", "Graztevski", "has", "?"], "dataset_name": "spider", "guid": 775}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What nurses are on call with block floor 1 and block code 1? Tell me their names.", "sql": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1", "example": {"db_id": "hospital_1", "query": "SELECT nurse FROM on_call WHERE blockfloor  =  1 AND blockcode  =  1", "query_toks": ["SELECT", "nurse", "FROM", "on_call", "WHERE", "blockfloor", "=", "1", "AND", "blockcode", "=", "1"], "query_toks_no_value": ["select", "nurse", "from", "on_call", "where", "blockfloor", "=", "value", "and", "blockcode", "=", "value"], "question": "What nurses are on call with block floor 1 and block code 1? Tell me their names.", "question_toks": ["What", "nurses", "are", "on", "call", "with", "block", "floor", "1", "and", "block", "code", "1", "?", "Tell", "me", "their", "names", "."], "dataset_name": "spider", "guid": 776}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | List the campuses in Los Angeles county.", "sql": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "example": {"db_id": "csu_1", "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"", "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value"], "question": "List the campuses in Los Angeles county.", "question_toks": ["List", "the", "campuses", "in", "Los", "Angeles", "county", "."], "dataset_name": "spider", "guid": 777}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the names of departments that are either in division AS or in division EN and in Building NEB.", "sql": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"", "example": {"db_id": "college_3", "query": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"", "query_toks": ["SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "AS", "''", "UNION", "SELECT", "DName", "FROM", "DEPARTMENT", "WHERE", "Division", "=", "``", "EN", "''", "AND", "Building", "=", "``", "NEB", "''"], "query_toks_no_value": ["select", "dname", "from", "department", "where", "division", "=", "value", "union", "select", "dname", "from", "department", "where", "division", "=", "value", "and", "building", "=", "value"], "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.", "question_toks": ["Find", "the", "names", "of", "departments", "that", "are", "either", "in", "division", "AS", "or", "in", "division", "EN", "and", "in", "Building", "NEB", "."], "dataset_name": "spider", "guid": 778}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the employee id of the head whose department has the least number of employees?", "sql": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "example": {"db_id": "hospital_1", "query": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1;", "query_toks": ["SELECT", "head", "FROM", "department", "GROUP", "BY", "departmentID", "ORDER", "BY", "count", "(", "departmentID", ")", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "head", "from", "department", "group", "by", "departmentid", "order", "by", "count", "(", "departmentid", ")", "limit", "value"], "question": "What is the employee id of the head whose department has the least number of employees?", "question_toks": ["What", "is", "the", "employee", "id", "of", "the", "head", "whose", "department", "has", "the", "least", "number", "of", "employees", "?"], "dataset_name": "spider", "guid": 779}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What is the average fee for a CSU campus in the year of 2005?", "sql": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "example": {"db_id": "csu_1", "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005", "query_toks": ["SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", "WHERE", "YEAR", "=", "2005"], "query_toks_no_value": ["select", "avg", "(", "campusfee", ")", "from", "csu_fees", "where", "year", "=", "value"], "question": "What is the average fee for a CSU campus in the year of 2005?", "question_toks": ["What", "is", "the", "average", "fee", "for", "a", "CSU", "campus", "in", "the", "year", "of", "2005", "?"], "dataset_name": "spider", "guid": 780}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Give the names of the courses with at least five enrollments.", "sql": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5", "example": {"db_id": "college_3", "query": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5", "query_toks": ["SELECT", "T1.CName", "FROM", "COURSE", "AS", "T1", "JOIN", "ENROLLED_IN", "AS", "T2", "ON", "T1.CID", "=", "T2.CID", "GROUP", "BY", "T2.CID", "HAVING", "COUNT", "(", "*", ")", ">", "=", "5"], "query_toks_no_value": ["select", "t1", ".", "cname", "from", "course", "as", "t1", "join", "enrolled_in", "as", "t2", "on", "t1", ".", "cid", "=", "t2", ".", "cid", "group", "by", "t2", ".", "cid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Give the names of the courses with at least five enrollments.", "question_toks": ["Give", "the", "names", "of", "the", "courses", "with", "at", "least", "five", "enrollments", "."], "dataset_name": "spider", "guid": 781}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | What is the name of the medication used for the patient staying in room 111?", "sql": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111", "example": {"db_id": "hospital_1", "query": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111", "query_toks": ["SELECT", "T4.name", "FROM", "stay", "AS", "T1", "JOIN", "patient", "AS", "T2", "ON", "T1.Patient", "=", "T2.SSN", "JOIN", "Prescribes", "AS", "T3", "ON", "T3.Patient", "=", "T2.SSN", "JOIN", "Medication", "AS", "T4", "ON", "T3.Medication", "=", "T4.Code", "WHERE", "room", "=", "111"], "query_toks_no_value": ["select", "t4", ".", "name", "from", "stay", "as", "t1", "join", "patient", "as", "t2", "on", "t1", ".", "patient", "=", "t2", ".", "ssn", "join", "prescribes", "as", "t3", "on", "t3", ".", "patient", "=", "t2", ".", "ssn", "join", "medication", "as", "t4", "on", "t3", ".", "medication", "=", "t4", ".", "code", "where", "room", "=", "value"], "question": "What is the name of the medication used for the patient staying in room 111?", "question_toks": ["What", "is", "the", "name", "of", "the", "medication", "used", "for", "the", "patient", "staying", "in", "room", "111", "?"], "dataset_name": "spider", "guid": 782}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | What is the least common faculty rank?", "sql": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "college_3", "query": "SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "Rank", "FROM", "FACULTY", "GROUP", "BY", "Rank", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "rank", "from", "faculty", "group", "by", "rank", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the least common faculty rank?", "question_toks": ["What", "is", "the", "least", "common", "faculty", "rank", "?"], "dataset_name": "spider", "guid": 783}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | How many different departments are there?", "sql": "SELECT count(DISTINCT dept_name) FROM department", "example": {"db_id": "college_1", "query": "SELECT count(DISTINCT dept_name) FROM department", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", "FROM", "department"], "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", "from", "department"], "question": "How many different departments are there?", "question_toks": ["How", "many", "different", "departments", "are", "there", "?"], "dataset_name": "spider", "guid": 784}}
{"text": "Campuses: Id, Campus, Location, County, Year; csu_fees: Campus, Year, CampusFee; degrees: Year, Campus, Degrees; discipline_enrollments: Campus, Discipline, Year, Undergraduate, Graduate; enrollments: Campus, Year, TotalEnrollment_AY, FTE_AY; faculty: Campus, Year, Faculty | What degrees were conferred in San Francisco State University in the year 2001?", "sql": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001", "example": {"db_id": "csu_1", "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001", "query_toks": ["SELECT", "degrees", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "t2.year", "=", "2001"], "query_toks_no_value": ["select", "degrees", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "What degrees were conferred in San Francisco State University in the year 2001?", "question_toks": ["What", "degrees", "were", "conferred", "in", "San", "Francisco", "State", "University", "in", "the", "year", "2001", "?"], "dataset_name": "spider", "guid": 785}}
{"text": "Physician: EmployeeID, Name, Position, SSN; Department: DepartmentID, Name, Head; Affiliated_With: Physician, Department, PrimaryAffiliation; Procedures: Code, Name, Cost; Trained_In: Physician, Treatment, CertificationDate, CertificationExpires; Patient: SSN, Name, Address, Phone, InsuranceID, PCP; Nurse: EmployeeID, Name, Position, Registered, SSN; Appointment: AppointmentID, Patient, PrepNurse, Physician, Start, End, ExaminationRoom; Medication: Code, Name, Brand, Description; Prescribes: Physician, Patient, Medication, Date, Appointment, Dose | Which department has the largest number of employees?", "sql": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;", "example": {"db_id": "hospital_1", "query": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1;", "query_toks": ["SELECT", "name", "FROM", "department", "GROUP", "BY", "departmentID", "ORDER", "BY", "count", "(", "departmentID", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "name", "from", "department", "group", "by", "departmentid", "order", "by", "count", "(", "departmentid", ")", "desc", "limit", "value"], "question": "Which department has the largest number of employees?", "question_toks": ["Which", "department", "has", "the", "largest", "number", "of", "employees", "?"], "dataset_name": "spider", "guid": 786}}
{"text": "CLASS: CLASS_CODE, CRS_CODE, CLASS_SECTION, CLASS_TIME, CLASS_ROOM, PROF_NUM; COURSE: CRS_CODE, DEPT_CODE, CRS_DESCRIPTION, CRS_CREDIT; DEPARTMENT: DEPT_CODE, DEPT_NAME, SCHOOL_CODE, EMP_NUM, DEPT_ADDRESS, DEPT_EXTENSION; EMPLOYEE: EMP_NUM, EMP_LNAME, EMP_FNAME, EMP_INITIAL, EMP_JOBCODE, EMP_HIREDATE, EMP_DOB; ENROLL: CLASS_CODE, STU_NUM, ENROLL_GRADE; PROFESSOR: EMP_NUM, DEPT_CODE, PROF_OFFICE, PROF_EXTENSION, PROF_HIGH_DEGREE; STUDENT: STU_NUM, STU_LNAME, STU_FNAME, STU_INIT, STU_DOB, STU_HRS, STU_CLASS, STU_GPA, STU_TRANSFER, DEPT_CODE | What is the count and code of the job with the most employee?", "sql": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "college_1", "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "emp_jobcode", ",", "count", "(", "*", ")", "FROM", "employee", "GROUP", "BY", "emp_jobcode", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "emp_jobcode", ",", "count", "(", "*", ")", "from", "employee", "group", "by", "emp_jobcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the count and code of the job with the most employee?", "question_toks": ["What", "is", "the", "count", "and", "code", "of", "the", "job", "with", "the", "most", "employee", "?"], "dataset_name": "spider", "guid": 787}}
{"text": "classroom: building, room_number, capacity; department: dept_name, building, budget; course: course_id, title, dept_name, credits; instructor: ID, name, dept_name, salary; section: course_id, sec_id, semester, year, building, room_number, time_slot_id; teaches: ID, course_id, sec_id, semester, year; student: ID, name, dept_name, tot_cred; takes: ID, course_id, sec_id, semester, year, grade; advisor: s_ID, i_ID; time_slot: time_slot_id, day, start_hr, start_min, end_hr, end_min | Find the title of courses that have two prerequisites?", "sql": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "example": {"db_id": "college_2", "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2", "query_toks": ["SELECT", "T1.title", "FROM", "course", "AS", "T1", "JOIN", "prereq", "AS", "T2", "ON", "T1.course_id", "=", "T2.course_id", "GROUP", "BY", "T2.course_id", "HAVING", "count", "(", "*", ")", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "course", "as", "t1", "join", "prereq", "as", "t2", "on", "t1", ".", "course_id", "=", "t2", ".", "course_id", "group", "by", "t2", ".", "course_id", "having", "count", "(", "*", ")", "=", "value"], "question": "Find the title of courses that have two prerequisites?", "question_toks": ["Find", "the", "title", "of", "courses", "that", "have", "two", "prerequisites", "?"], "dataset_name": "spider", "guid": 788}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Faculty: FacID, Lname, Fname, Rank, Sex, Phone, Room, Building; Department: DNO, Division, DName, Room, Building, DPhone; Member_of: FacID, DNO, Appt_Type; Course: CID, CName, Credits, Instructor, Days, Hours, DNO; Minor_in: StuID, DNO; Enrolled_in: StuID, CID, Grade; Gradeconversion: lettergrade, gradepoint | Find the last names of faculties who are members of computer science department.", "sql": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"", "example": {"db_id": "college_3", "query": "SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO  =  T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID  =  T3.FacID WHERE T1.DName  =  \"Computer Science\"", "query_toks": ["SELECT", "T2.Lname", "FROM", "DEPARTMENT", "AS", "T1", "JOIN", "FACULTY", "AS", "T2", "ON", "T1.DNO", "=", "T3.DNO", "JOIN", "MEMBER_OF", "AS", "T3", "ON", "T2.FacID", "=", "T3.FacID", "WHERE", "T1.DName", "=", "``", "Computer", "Science", "''"], "query_toks_no_value": ["select", "t2", ".", "lname", "from", "department", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "dno", "=", "t3", ".", "dno", "join", "member_of", "as", "t3", "on", "t2", ".", "facid", "=", "t3", ".", "facid", "where", "t1", ".", "dname", "=", "value"], "question": "Find the last names of faculties who are members of computer science department.", "question_toks": ["Find", "the", "last", "names", "of", "faculties", "who", "are", "members", "of", "computer", "science", "department", "."], "dataset_name": "spider", "guid": 789}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which city has most number of departing flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_2", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.City", "FROM", "AIRPORTS", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.AirportCode", "=", "T2.SourceAirport", "GROUP", "BY", "T1.City", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "airportcode", "=", "t2", ".", "sourceairport", "group", "by", "t1", ".", "city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which city has most number of departing flights?", "question_toks": ["Which", "city", "has", "most", "number", "of", "departing", "flights", "?"], "dataset_name": "spider", "guid": 0}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the name, city, and country of the airport that has the lowest altitude.", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1", "query_toks": ["SELECT", "name", ",", "city", ",", "country", "FROM", "airports", "ORDER", "BY", "elevation", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "city", ",", "country", "from", "airports", "order", "by", "elevation", "limit", "value"], "question": "Find the name, city, and country of the airport that has the lowest altitude.", "question_toks": ["Find", "the", "name", ",", "city", ",", "and", "country", "of", "the", "airport", "that", "has", "the", "lowest", "altitude", "."], "dataset_name": "spider", "guid": 1}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | How many ships are there?", "sql": "SELECT count(*) FROM ship", "example": {"db_id": "ship_mission", "query": "SELECT count(*) FROM ship", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ship"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ship"], "question": "How many ships are there?", "question_toks": ["How", "many", "ships", "are", "there", "?"], "dataset_name": "spider", "guid": 2}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?", "sql": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000", "example": {"db_id": "ship_mission", "query": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000", "query_toks": ["SELECT", "TYPE", "FROM", "ship", "WHERE", "Tonnage", ">", "6000", "INTERSECT", "SELECT", "TYPE", "FROM", "ship", "WHERE", "Tonnage", "<", "4000"], "query_toks_no_value": ["select", "type", "from", "ship", "where", "tonnage", ">", "value", "intersect", "select", "type", "from", "ship", "where", "tonnage", "<", "value"], "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?", "question_toks": ["What", "are", "the", "types", "of", "the", "ships", "that", "have", "both", "shiips", "with", "tonnage", "more", "than", "6000", "and", "those", "with", "tonnage", "less", "than", "4000", "?"], "dataset_name": "spider", "guid": 3}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What are the names of ships that have more than one captain?", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1", "example": {"db_id": "ship_1", "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1", "query_toks": ["SELECT", "t1.name", "FROM", "ship", "AS", "t1", "JOIN", "captain", "AS", "t2", "ON", "t1.ship_id", "=", "t2.ship_id", "GROUP", "BY", "t2.ship_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "ship", "as", "t1", "join", "captain", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id", "group", "by", "t2", ".", "ship_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of ships that have more than one captain?", "question_toks": ["What", "are", "the", "names", "of", "ships", "that", "have", "more", "than", "one", "captain", "?"], "dataset_name": "spider", "guid": 4}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Give the flight numbers of flights landing at APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "example": {"db_id": "flight_2", "query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\"", "query_toks": ["SELECT", "FlightNo", "FROM", "FLIGHTS", "WHERE", "DestAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "flightno", "from", "flights", "where", "destairport", "=", "value"], "question": "Give the flight numbers of flights landing at APG.", "question_toks": ["Give", "the", "flight", "numbers", "of", "flights", "landing", "at", "APG", "."], "dataset_name": "spider", "guid": 5}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the ids of all employees that don't have certificates?", "sql": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "example": {"db_id": "flight_1", "query": "SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate", "query_toks": ["SELECT", "eid", "FROM", "Employee", "EXCEPT", "SELECT", "eid", "FROM", "Certificate"], "query_toks_no_value": ["select", "eid", "from", "employee", "except", "select", "eid", "from", "certificate"], "question": "What are the ids of all employees that don't have certificates?", "question_toks": ["What", "are", "the", "ids", "of", "all", "employees", "that", "do", "n't", "have", "certificates", "?"], "dataset_name": "spider", "guid": 6}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | Show the id and builder of the railway that are associated with the most trains.", "sql": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "railway", "query": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Railway_ID", ",", "T1.Builder", "FROM", "railway", "AS", "T1", "JOIN", "train", "AS", "T2", "ON", "T1.Railway_ID", "=", "T2.Railway_ID", "GROUP", "BY", "T2.Railway_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "railway_id", ",", "t1", ".", "builder", "from", "railway", "as", "t1", "join", "train", "as", "t2", "on", "t1", ".", "railway_id", "=", "t2", ".", "railway_id", "group", "by", "t2", ".", "railway_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the id and builder of the railway that are associated with the most trains.", "question_toks": ["Show", "the", "id", "and", "builder", "of", "the", "railway", "that", "are", "associated", "with", "the", "most", "trains", "."], "dataset_name": "spider", "guid": 7}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the names of all aicrafts that have never won any match?", "sql": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)", "example": {"db_id": "aircraft", "query": "SELECT Aircraft FROM aircraft WHERE Aircraft_ID NOT IN (SELECT Winning_Aircraft FROM MATCH)", "query_toks": ["SELECT", "Aircraft", "FROM", "aircraft", "WHERE", "Aircraft_ID", "NOT", "IN", "(", "SELECT", "Winning_Aircraft", "FROM", "MATCH", ")"], "query_toks_no_value": ["select", "aircraft", "from", "aircraft", "where", "aircraft_id", "not", "in", "(", "select", "winning_aircraft", "from", "match", ")"], "question": "What are the names of all aicrafts that have never won any match?", "question_toks": ["What", "are", "the", "names", "of", "all", "aicrafts", "that", "have", "never", "won", "any", "match", "?"], "dataset_name": "spider", "guid": 8}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | Show names of pilots that have more than one record.", "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1", "example": {"db_id": "pilot_record", "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T2.Pilot_name", ",", "COUNT", "(", "*", ")", "FROM", "pilot_record", "AS", "T1", "JOIN", "pilot", "AS", "T2", "ON", "T1.pilot_ID", "=", "T2.pilot_ID", "GROUP", "BY", "T2.Pilot_name", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "pilot_name", ",", "count", "(", "*", ")", "from", "pilot_record", "as", "t1", "join", "pilot", "as", "t2", "on", "t1", ".", "pilot_id", "=", "t2", ".", "pilot_id", "group", "by", "t2", ".", "pilot_name", "having", "count", "(", "*", ")", ">", "value"], "question": "Show names of pilots that have more than one record.", "question_toks": ["Show", "names", "of", "pilots", "that", "have", "more", "than", "one", "record", "."], "dataset_name": "spider", "guid": 9}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What are airport names at City 'Aberdeen'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "example": {"db_id": "flight_2", "query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\"", "query_toks": ["SELECT", "AirportName", "FROM", "AIRPORTS", "WHERE", "City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "city", "=", "value"], "question": "What are airport names at City 'Aberdeen'?", "question_toks": ["What", "are", "airport", "names", "at", "City", "'Aberdeen", "'", "?"], "dataset_name": "spider", "guid": 10}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | Please show the names of aircrafts associated with airport with name \"London Gatwick\".", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "example": {"db_id": "aircraft", "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "query_toks": ["SELECT", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "airport_aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "airport", "AS", "T3", "ON", "T2.Airport_ID", "=", "T3.Airport_ID", "WHERE", "T3.Airport_Name", "=", "``", "London", "Gatwick", "''"], "query_toks_no_value": ["select", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "airport_aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "airport", "as", "t3", "on", "t2", ".", "airport_id", "=", "t3", ".", "airport_id", "where", "t3", ".", "airport_name", "=", "value"], "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".", "question_toks": ["Please", "show", "the", "names", "of", "aircrafts", "associated", "with", "airport", "with", "name", "``", "London", "Gatwick", "''", "."], "dataset_name": "spider", "guid": 11}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the average price for flights from Los Angeles to Honolulu.", "sql": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "example": {"db_id": "flight_1", "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "query_toks": ["SELECT", "avg", "(", "price", ")", "FROM", "Flight", "WHERE", "origin", "=", "``", "Los", "Angeles", "''", "AND", "destination", "=", "``", "Honolulu", "''"], "query_toks_no_value": ["select", "avg", "(", "price", ")", "from", "flight", "where", "origin", "=", "value", "and", "destination", "=", "value"], "question": "What is the average price for flights from Los Angeles to Honolulu.", "question_toks": ["What", "is", "the", "average", "price", "for", "flights", "from", "Los", "Angeles", "to", "Honolulu", "."], "dataset_name": "spider", "guid": 12}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Sort all captain names by their ages from old to young.", "sql": "SELECT name FROM captain ORDER BY age DESC", "example": {"db_id": "ship_1", "query": "SELECT name FROM captain ORDER BY age DESC", "query_toks": ["SELECT", "name", "FROM", "captain", "ORDER", "BY", "age", "DESC"], "query_toks_no_value": ["select", "name", "from", "captain", "order", "by", "age", "desc"], "question": "Sort all captain names by their ages from old to young.", "question_toks": ["Sort", "all", "captain", "names", "by", "their", "ages", "from", "old", "to", "young", "."], "dataset_name": "spider", "guid": 13}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What are the names of all airports whose elevation is between -50 and 50?", "sql": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "example": {"db_id": "flight_4", "query": "SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50", "query_toks": ["SELECT", "name", "FROM", "airports", "WHERE", "elevation", "BETWEEN", "-50", "AND", "50"], "query_toks_no_value": ["select", "name", "from", "airports", "where", "elevation", "between", "value", "and", "value"], "question": "What are the names of all airports whose elevation is between -50 and 50?", "question_toks": ["What", "are", "the", "names", "of", "all", "airports", "whose", "elevation", "is", "between", "-50", "and", "50", "?"], "dataset_name": "spider", "guid": 14}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | How many employees have certificate.", "sql": "SELECT count(DISTINCT eid) FROM Certificate", "example": {"db_id": "flight_1", "query": "SELECT count(DISTINCT eid) FROM Certificate", "query_toks": ["SELECT", "count", "(", "DISTINCT", "eid", ")", "FROM", "Certificate"], "query_toks_no_value": ["select", "count", "(", "distinct", "eid", ")", "from", "certificate"], "question": "How many employees have certificate.", "question_toks": ["How", "many", "employees", "have", "certificate", "."], "dataset_name": "spider", "guid": 15}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | How many captains with younger than 50 are in each rank?", "sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank", "example": {"db_id": "ship_1", "query": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "rank", "FROM", "captain", "WHERE", "age", "<", "50", "GROUP", "BY", "rank"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "rank", "from", "captain", "where", "age", "<", "value", "group", "by", "rank"], "question": "How many captains with younger than 50 are in each rank?", "question_toks": ["How", "many", "captains", "with", "younger", "than", "50", "are", "in", "each", "rank", "?"], "dataset_name": "spider", "guid": 16}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | For each aircraft that has won an award, what is its name and how many time has it won?", "sql": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft", "example": {"db_id": "aircraft", "query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft", "query_toks": ["SELECT", "T1.Aircraft", ",", "COUNT", "(", "*", ")", "FROM", "aircraft", "AS", "T1", "JOIN", "MATCH", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Winning_Aircraft", "GROUP", "BY", "T2.Winning_Aircraft"], "query_toks_no_value": ["select", "t1", ".", "aircraft", ",", "count", "(", "*", ")", "from", "aircraft", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "winning_aircraft", "group", "by", "t2", ".", "winning_aircraft"], "question": "For each aircraft that has won an award, what is its name and how many time has it won?", "question_toks": ["For", "each", "aircraft", "that", "has", "won", "an", "award", ",", "what", "is", "its", "name", "and", "how", "many", "time", "has", "it", "won", "?"], "dataset_name": "spider", "guid": 17}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What airline serves the most flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What airline serves the most flights?", "question_toks": ["What", "airline", "serves", "the", "most", "flights", "?"], "dataset_name": "spider", "guid": 18}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many airports do we have?", "sql": "SELECT count(*) FROM AIRPORTS", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM AIRPORTS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRPORTS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airports"], "question": "How many airports do we have?", "question_toks": ["How", "many", "airports", "do", "we", "have", "?"], "dataset_name": "spider", "guid": 19}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the count of distinct employees with certificates?", "sql": "SELECT count(DISTINCT eid) FROM Certificate", "example": {"db_id": "flight_1", "query": "SELECT count(DISTINCT eid) FROM Certificate", "query_toks": ["SELECT", "count", "(", "DISTINCT", "eid", ")", "FROM", "Certificate"], "query_toks_no_value": ["select", "count", "(", "distinct", "eid", ")", "from", "certificate"], "question": "What is the count of distinct employees with certificates?", "question_toks": ["What", "is", "the", "count", "of", "distinct", "employees", "with", "certificates", "?"], "dataset_name": "spider", "guid": 20}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | How many international and domestic passengers are there in the airport London Heathrow?", "sql": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"", "example": {"db_id": "aircraft", "query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"", "query_toks": ["SELECT", "International_Passengers", ",", "Domestic_Passengers", "FROM", "airport", "WHERE", "Airport_Name", "=", "``", "London", "Heathrow", "''"], "query_toks_no_value": ["select", "international_passengers", ",", "domestic_passengers", "from", "airport", "where", "airport_name", "=", "value"], "question": "How many international and domestic passengers are there in the airport London Heathrow?", "question_toks": ["How", "many", "international", "and", "domestic", "passengers", "are", "there", "in", "the", "airport", "London", "Heathrow", "?"], "dataset_name": "spider", "guid": 21}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the name and city of the airport that the most routes end at?", "sql": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T1.city", ",", "T2.dst_apid", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.dst_apid", "GROUP", "BY", "T2.dst_apid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "city", ",", "t2", ".", "dst_apid", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "dst_apid", "group", "by", "t2", ".", "dst_apid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and city of the airport that the most routes end at?", "question_toks": ["What", "is", "the", "name", "and", "city", "of", "the", "airport", "that", "the", "most", "routes", "end", "at", "?"], "dataset_name": "spider", "guid": 22}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What place has the most flights coming from there?", "sql": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "origin", "FROM", "Flight", "GROUP", "BY", "origin", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "origin", "from", "flight", "group", "by", "origin", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What place has the most flights coming from there?", "question_toks": ["What", "place", "has", "the", "most", "flights", "coming", "from", "there", "?"], "dataset_name": "spider", "guid": 23}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the name and distance for the aircraft that has an id of 12?", "sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "example": {"db_id": "flight_1", "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "query_toks": ["SELECT", "name", ",", "distance", "FROM", "Aircraft", "WHERE", "aid", "=", "12"], "query_toks_no_value": ["select", "name", ",", "distance", "from", "aircraft", "where", "aid", "=", "value"], "question": "What is the name and distance for the aircraft that has an id of 12?", "question_toks": ["What", "is", "the", "name", "and", "distance", "for", "the", "aircraft", "that", "has", "an", "id", "of", "12", "?"], "dataset_name": "spider", "guid": 24}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the highest elevation of an airport in the country of Iceland?", "sql": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'", "example": {"db_id": "flight_4", "query": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'", "query_toks": ["SELECT", "max", "(", "elevation", ")", "FROM", "airports", "WHERE", "country", "=", "'Iceland", "'"], "query_toks_no_value": ["select", "max", "(", "elevation", ")", "from", "airports", "where", "country", "=", "value"], "question": "What is the highest elevation of an airport in the country of Iceland?", "question_toks": ["What", "is", "the", "highest", "elevation", "of", "an", "airport", "in", "the", "country", "of", "Iceland", "?"], "dataset_name": "spider", "guid": 25}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.", "sql": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'", "example": {"db_id": "flight_company", "query": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'", "query_toks": ["SELECT", "T2.pilot", "FROM", "operate_company", "AS", "T1", "JOIN", "flight", "AS", "t2", "ON", "T1.id", "=", "T2.company_id", "WHERE", "T1.principal_activities", "=", "'Cargo", "'", "INTERSECT", "SELECT", "T2.pilot", "FROM", "operate_company", "AS", "T1", "JOIN", "flight", "AS", "t2", "ON", "T1.id", "=", "T2.company_id", "WHERE", "T1.principal_activities", "=", "'Catering", "services", "'"], "query_toks_no_value": ["select", "t2", ".", "pilot", "from", "operate_company", "as", "t1", "join", "flight", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "company_id", "where", "t1", ".", "principal_activities", "=", "value", "intersect", "select", "t2", ".", "pilot", "from", "operate_company", "as", "t1", "join", "flight", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "company_id", "where", "t1", ".", "principal_activities", "=", "value"], "question": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.", "question_toks": ["List", "the", "name", "of", "the", "pilots", "who", "have", "flied", "for", "both", "a", "company", "that", "mainly", "provide", "'Cargo", "'", "services", "and", "a", "company", "that", "runs", "'Catering", "services", "'", "activities", "."], "dataset_name": "spider", "guid": 26}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | show the train name and station name for each train.", "sql": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id", "example": {"db_id": "train_station", "query": "SELECT T2.name ,  T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id", "query_toks": ["SELECT", "T2.name", ",", "T3.name", "FROM", "train_station", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.station_id", "=", "T2.station_id", "JOIN", "train", "AS", "T3", "ON", "T3.train_id", "=", "T1.train_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "name", "from", "train_station", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "station_id", "=", "t2", ".", "station_id", "join", "train", "as", "t3", "on", "t3", ".", "train_id", "=", "t1", ".", "train_id"], "question": "show the train name and station name for each train.", "question_toks": ["show", "the", "train", "name", "and", "station", "name", "for", "each", "train", "."], "dataset_name": "spider", "guid": 27}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the number of employees that have a salary between 100000 and 200000?", "sql": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "example": {"db_id": "flight_1", "query": "SELECT count(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Employee", "WHERE", "salary", "BETWEEN", "100000", "AND", "200000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee", "where", "salary", "between", "value", "and", "value"], "question": "What is the number of employees that have a salary between 100000 and 200000?", "question_toks": ["What", "is", "the", "number", "of", "employees", "that", "have", "a", "salary", "between", "100000", "and", "200000", "?"], "dataset_name": "spider", "guid": 28}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | Show the working years of managers in descending order of their level.", "sql": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC", "example": {"db_id": "railway", "query": "SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC", "query_toks": ["SELECT", "Working_year_starts", "FROM", "manager", "ORDER", "BY", "LEVEL", "DESC"], "query_toks_no_value": ["select", "working_year_starts", "from", "manager", "order", "by", "level", "desc"], "question": "Show the working years of managers in descending order of their level.", "question_toks": ["Show", "the", "working", "years", "of", "managers", "in", "descending", "order", "of", "their", "level", "."], "dataset_name": "spider", "guid": 29}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Count the number of United Airlines flights arriving in ASY Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T2.Airline", "=", "T1.uid", "WHERE", "T1.Airline", "=", "``", "United", "Airlines", "''", "AND", "T2.DestAirport", "=", "``", "ASY", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2", ".", "airline", "=", "t1", ".", "uid", "where", "t1", ".", "airline", "=", "value", "and", "t2", ".", "destairport", "=", "value"], "question": "Count the number of United Airlines flights arriving in ASY Airport.", "question_toks": ["Count", "the", "number", "of", "United", "Airlines", "flights", "arriving", "in", "ASY", "Airport", "."], "dataset_name": "spider", "guid": 30}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | What is the name of the oldest manager?", "sql": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1", "example": {"db_id": "railway", "query": "SELECT Name FROM manager ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "manager", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "manager", "order", "by", "age", "desc", "limit", "value"], "question": "What is the name of the oldest manager?", "question_toks": ["What", "is", "the", "name", "of", "the", "oldest", "manager", "?"], "dataset_name": "spider", "guid": 31}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show all locations which don't have a train station with at least 15 platforms.", "sql": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15", "example": {"db_id": "train_station", "query": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15", "query_toks": ["SELECT", "LOCATION", "FROM", "station", "EXCEPT", "SELECT", "LOCATION", "FROM", "station", "WHERE", "number_of_platforms", ">", "=", "15"], "query_toks_no_value": ["select", "location", "from", "station", "except", "select", "location", "from", "station", "where", "number_of_platforms", ">", "=", "value"], "question": "Show all locations which don't have a train station with at least 15 platforms.", "question_toks": ["Show", "all", "locations", "which", "do", "n't", "have", "a", "train", "station", "with", "at", "least", "15", "platforms", "."], "dataset_name": "spider", "guid": 32}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What are the names of ships that were involved in a mission launched after 1928?", "sql": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928", "example": {"db_id": "ship_mission", "query": "SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T1.Launched_Year  >  1928", "query_toks": ["SELECT", "T2.Name", "FROM", "mission", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.Ship_ID", "=", "T2.Ship_ID", "WHERE", "T1.Launched_Year", ">", "1928"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "mission", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id", "where", "t1", ".", "launched_year", ">", "value"], "question": "What are the names of ships that were involved in a mission launched after 1928?", "question_toks": ["What", "are", "the", "names", "of", "ships", "that", "were", "involved", "in", "a", "mission", "launched", "after", "1928", "?"], "dataset_name": "spider", "guid": 33}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many flights fly from Aberdeen to Ashley?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "JOIN", "AIRPORTS", "AS", "T3", "ON", "T1.SourceAirport", "=", "T3.AirportCode", "WHERE", "T2.City", "=", "``", "Ashley", "''", "AND", "T3.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "join", "airports", "as", "t3", "on", "t1", ".", "sourceairport", "=", "t3", ".", "airportcode", "where", "t2", ".", "city", "=", "value", "and", "t3", ".", "city", "=", "value"], "question": "How many flights fly from Aberdeen to Ashley?", "question_toks": ["How", "many", "flights", "fly", "from", "Aberdeen", "to", "Ashley", "?"], "dataset_name": "spider", "guid": 34}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the id and name of the employee with the highest salary?", "sql": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1", "query_toks": ["SELECT", "eid", ",", "name", "FROM", "Employee", "ORDER", "BY", "salary", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "eid", ",", "name", "from", "employee", "order", "by", "salary", "desc", "limit", "value"], "question": "What is the id and name of the employee with the highest salary?", "question_toks": ["What", "is", "the", "id", "and", "name", "of", "the", "employee", "with", "the", "highest", "salary", "?"], "dataset_name": "spider", "guid": 35}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What are flight numbers of Airline \"United Airlines\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "example": {"db_id": "flight_2", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "query_toks": ["SELECT", "T1.FlightNo", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRLINES", "AS", "T2", "ON", "T2.uid", "=", "T1.Airline", "WHERE", "T2.Airline", "=", "``", "United", "Airlines", "''"], "query_toks_no_value": ["select", "t1", ".", "flightno", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t2", ".", "uid", "=", "t1", ".", "airline", "where", "t2", ".", "airline", "=", "value"], "question": "What are flight numbers of Airline \"United Airlines\"?", "question_toks": ["What", "are", "flight", "numbers", "of", "Airline", "``", "United", "Airlines", "''", "?"], "dataset_name": "spider", "guid": 36}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | What is the maximum level of managers in countries that are not \"Australia\"?", "sql": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"", "example": {"db_id": "railway", "query": "SELECT max(LEVEL) FROM manager WHERE Country != \"Australia\t\"", "query_toks": ["SELECT", "max", "(", "LEVEL", ")", "FROM", "manager", "WHERE", "Country", "!", "=", "``", "Australia", "''"], "query_toks_no_value": ["select", "max", "(", "level", ")", "from", "manager", "where", "country", "!", "=", "value"], "question": "What is the maximum level of managers in countries that are not \"Australia\"?", "question_toks": ["What", "is", "the", "maximum", "level", "of", "managers", "in", "countries", "that", "are", "not", "``", "Australia", "''", "?"], "dataset_name": "spider", "guid": 37}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Return the name of the youngest captain.", "sql": "SELECT name FROM captain ORDER BY age LIMIT 1", "example": {"db_id": "ship_1", "query": "SELECT name FROM captain ORDER BY age LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "captain", "ORDER", "BY", "age", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "captain", "order", "by", "age", "limit", "value"], "question": "Return the name of the youngest captain.", "question_toks": ["Return", "the", "name", "of", "the", "youngest", "captain", "."], "dataset_name": "spider", "guid": 38}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | How many routes does American Airlines operate?", "sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airlines", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.alid", "=", "T2.alid", "WHERE", "T1.name", "=", "'American", "Airlines", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "alid", "=", "t2", ".", "alid", "where", "t1", ".", "name", "=", "value"], "question": "How many routes does American Airlines operate?", "question_toks": ["How", "many", "routes", "does", "American", "Airlines", "operate", "?"], "dataset_name": "spider", "guid": 39}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the names of the pilots in alphabetical order?", "sql": "SELECT Name FROM pilot ORDER BY Name ASC", "example": {"db_id": "aircraft", "query": "SELECT Name FROM pilot ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "pilot", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "pilot", "order", "by", "name", "asc"], "question": "What are the names of the pilots in alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "the", "pilots", "in", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 40}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What are the nations that have more than two ships?", "sql": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2", "example": {"db_id": "ship_mission", "query": "SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "Nationality", "FROM", "ship", "GROUP", "BY", "Nationality", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "nationality", "from", "ship", "group", "by", "nationality", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the nations that have more than two ships?", "question_toks": ["What", "are", "the", "nations", "that", "have", "more", "than", "two", "ships", "?"], "dataset_name": "spider", "guid": 41}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | For the airline ids with the top 10 most routes operated, what are their names?", "sql": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10", "example": {"db_id": "flight_4", "query": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10", "query_toks": ["SELECT", "T1.name", ",", "T2.alid", "FROM", "airlines", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.alid", "=", "T2.alid", "GROUP", "BY", "T2.alid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "10"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "alid", "from", "airlines", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "alid", "=", "t2", ".", "alid", "group", "by", "t2", ".", "alid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "For the airline ids with the top 10 most routes operated, what are their names?", "question_toks": ["For", "the", "airline", "ids", "with", "the", "top", "10", "most", "routes", "operated", ",", "what", "are", "their", "names", "?"], "dataset_name": "spider", "guid": 42}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Count the number of different ranks of captain.", "sql": "SELECT count(DISTINCT rank) FROM captain", "example": {"db_id": "ship_1", "query": "SELECT count(DISTINCT rank) FROM captain", "query_toks": ["SELECT", "count", "(", "DISTINCT", "rank", ")", "FROM", "captain"], "query_toks_no_value": ["select", "count", "(", "distinct", "rank", ")", "from", "captain"], "question": "Count the number of different ranks of captain.", "question_toks": ["Count", "the", "number", "of", "different", "ranks", "of", "captain", "."], "dataset_name": "spider", "guid": 43}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What is the code of airport that has the highest number of flights?", "sql": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_2", "query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.AirportCode", "FROM", "AIRPORTS", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.AirportCode", "=", "T2.DestAirport", "OR", "T1.AirportCode", "=", "T2.SourceAirport", "GROUP", "BY", "T1.AirportCode", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "airportcode", "=", "t2", ".", "destairport", "or", "t1", ".", "airportcode", "=", "t2", ".", "sourceairport", "group", "by", "t1", ".", "airportcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the code of airport that has the highest number of flights?", "question_toks": ["What", "is", "the", "code", "of", "airport", "that", "has", "the", "highest", "number", "of", "flights", "?"], "dataset_name": "spider", "guid": 44}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show the number of trains", "sql": "SELECT count(*) FROM train", "example": {"db_id": "train_station", "query": "SELECT count(*) FROM train", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "train"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "train"], "question": "Show the number of trains", "question_toks": ["Show", "the", "number", "of", "trains"], "dataset_name": "spider", "guid": 45}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Return the rank for which there are the fewest captains.", "sql": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "ship_1", "query": "SELECT rank FROM captain GROUP BY rank ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "rank", "FROM", "captain", "GROUP", "BY", "rank", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "rank", "from", "captain", "group", "by", "rank", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the rank for which there are the fewest captains.", "question_toks": ["Return", "the", "rank", "for", "which", "there", "are", "the", "fewest", "captains", "."], "dataset_name": "spider", "guid": 46}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "example": {"db_id": "flight_1", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "query_toks": ["SELECT", "T2.name", "FROM", "Certificate", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T2.aid", "=", "T1.aid", "WHERE", "T2.distance", ">", "5000", "GROUP", "BY", "T1.aid", "ORDER", "BY", "count", "(", "*", ")", ">", "=", "5"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "certificate", "as", "t1", "join", "aircraft", "as", "t2", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "distance", ">", "value", "group", "by", "t1", ".", "aid", "order", "by", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?", "question_toks": ["What", "is", "the", "name", "and", "distance", "of", "every", "aircraft", "that", "can", "cover", "a", "distance", "of", "more", "than", "5000", "and", "which", "at", "least", "5", "people", "can", "fly", "?"], "dataset_name": "spider", "guid": 47}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | Show id and location of railways that are associated with more than one train.", "sql": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1", "example": {"db_id": "railway", "query": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T2.Railway_ID", ",", "T1.Location", "FROM", "railway", "AS", "T1", "JOIN", "train", "AS", "T2", "ON", "T1.Railway_ID", "=", "T2.Railway_ID", "GROUP", "BY", "T2.Railway_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "railway_id", ",", "t1", ".", "location", "from", "railway", "as", "t1", "join", "train", "as", "t2", "on", "t1", ".", "railway_id", "=", "t2", ".", "railway_id", "group", "by", "t2", ".", "railway_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Show id and location of railways that are associated with more than one train.", "question_toks": ["Show", "id", "and", "location", "of", "railways", "that", "are", "associated", "with", "more", "than", "one", "train", "."], "dataset_name": "spider", "guid": 48}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | List the names of pilots in ascending order of rank.", "sql": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC", "example": {"db_id": "pilot_record", "query": "SELECT Pilot_name FROM pilot ORDER BY Rank ASC", "query_toks": ["SELECT", "Pilot_name", "FROM", "pilot", "ORDER", "BY", "Rank", "ASC"], "query_toks_no_value": ["select", "pilot_name", "from", "pilot", "order", "by", "rank", "asc"], "question": "List the names of pilots in ascending order of rank.", "question_toks": ["List", "the", "names", "of", "pilots", "in", "ascending", "order", "of", "rank", "."], "dataset_name": "spider", "guid": 49}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the id of routes whose source and destination airports are in the United States.", "sql": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "example": {"db_id": "flight_4", "query": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "query_toks": ["SELECT", "rid", "FROM", "routes", "WHERE", "dst_apid", "IN", "(", "SELECT", "apid", "FROM", "airports", "WHERE", "country", "=", "'United", "States", "'", ")", "AND", "src_apid", "IN", "(", "SELECT", "apid", "FROM", "airports", "WHERE", "country", "=", "'United", "States", "'", ")"], "query_toks_no_value": ["select", "rid", "from", "routes", "where", "dst_apid", "in", "(", "select", "apid", "from", "airports", "where", "country", "=", "value", ")", "and", "src_apid", "in", "(", "select", "apid", "from", "airports", "where", "country", "=", "value", ")"], "question": "Find the id of routes whose source and destination airports are in the United States.", "question_toks": ["Find", "the", "id", "of", "routes", "whose", "source", "and", "destination", "airports", "are", "in", "the", "United", "States", "."], "dataset_name": "spider", "guid": 50}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which airlines have a flight with destination airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.DestAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "destairport", "=", "value"], "question": "Which airlines have a flight with destination airport AHD?", "question_toks": ["Which", "airlines", "have", "a", "flight", "with", "destination", "airport", "AHD", "?"], "dataset_name": "spider", "guid": 51}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Return the number of airlines in the USA.", "sql": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "WHERE", "Country", "=", "``", "USA", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "value"], "question": "Return the number of airlines in the USA.", "question_toks": ["Return", "the", "number", "of", "airlines", "in", "the", "USA", "."], "dataset_name": "spider", "guid": 52}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Return the number of flights departing from Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.SourceAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "sourceairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "Return the number of flights departing from Aberdeen.", "question_toks": ["Return", "the", "number", "of", "flights", "departing", "from", "Aberdeen", "."], "dataset_name": "spider", "guid": 53}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the number of cities in the United States with more than 3 airports?", "sql": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3", "example": {"db_id": "flight_4", "query": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3", "query_toks": ["SELECT", "city", "FROM", "airports", "WHERE", "country", "=", "'United", "States", "'", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "city", "from", "airports", "where", "country", "=", "value", "group", "by", "city", "having", "count", "(", "*", ")", ">", "value"], "question": "What is the number of cities in the United States with more than 3 airports?", "question_toks": ["What", "is", "the", "number", "of", "cities", "in", "the", "United", "States", "with", "more", "than", "3", "airports", "?"], "dataset_name": "spider", "guid": 54}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the names of all aircrafts that have won a match at least twice?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2", "example": {"db_id": "aircraft", "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "MATCH", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Winning_Aircraft", "GROUP", "BY", "T2.Winning_Aircraft", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "winning_aircraft", "group", "by", "t2", ".", "winning_aircraft", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of all aircrafts that have won a match at least twice?", "question_toks": ["What", "are", "the", "names", "of", "all", "aircrafts", "that", "have", "won", "a", "match", "at", "least", "twice", "?"], "dataset_name": "spider", "guid": 55}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Return the name of the airport with code 'AKO'.", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "example": {"db_id": "flight_2", "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "query_toks": ["SELECT", "AirportName", "FROM", "AIRPORTS", "WHERE", "AirportCode", "=", "``", "AKO", "''"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "airportcode", "=", "value"], "question": "Return the name of the airport with code 'AKO'.", "question_toks": ["Return", "the", "name", "of", "the", "airport", "with", "code", "'AKO", "'", "."], "dataset_name": "spider", "guid": 56}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | List the cities which have more than one airport and number of airports.", "sql": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1", "example": {"db_id": "flight_4", "query": "SELECT city ,  count(*) FROM airports GROUP BY city HAVING count(*)  >  1", "query_toks": ["SELECT", "city", ",", "count", "(", "*", ")", "FROM", "airports", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "city", ",", "count", "(", "*", ")", "from", "airports", "group", "by", "city", "having", "count", "(", "*", ")", ">", "value"], "question": "List the cities which have more than one airport and number of airports.", "question_toks": ["List", "the", "cities", "which", "have", "more", "than", "one", "airport", "and", "number", "of", "airports", "."], "dataset_name": "spider", "guid": 57}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Give the flight numbers of flights leaving from APG.", "sql": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "example": {"db_id": "flight_2", "query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "query_toks": ["SELECT", "FlightNo", "FROM", "FLIGHTS", "WHERE", "SourceAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "flightno", "from", "flights", "where", "sourceairport", "=", "value"], "question": "Give the flight numbers of flights leaving from APG.", "question_toks": ["Give", "the", "flight", "numbers", "of", "flights", "leaving", "from", "APG", "."], "dataset_name": "spider", "guid": 58}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | How many captains are in each rank?", "sql": "SELECT count(*) ,  rank FROM captain GROUP BY rank", "example": {"db_id": "ship_1", "query": "SELECT count(*) ,  rank FROM captain GROUP BY rank", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "rank", "FROM", "captain", "GROUP", "BY", "rank"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "rank", "from", "captain", "group", "by", "rank"], "question": "How many captains are in each rank?", "question_toks": ["How", "many", "captains", "are", "in", "each", "rank", "?"], "dataset_name": "spider", "guid": 59}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | What is the id, name and IATA code of the airport that had most number of flights?", "sql": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_company", "query": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", ",", "T1.IATA", "FROM", "airport", "AS", "T1", "JOIN", "flight", "AS", "T2", "ON", "T1.id", "=", "T2.airport_id", "GROUP", "BY", "T2.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", ",", "t1", ".", "iata", "from", "airport", "as", "t1", "join", "flight", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "airport_id", "group", "by", "t2", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id, name and IATA code of the airport that had most number of flights?", "question_toks": ["What", "is", "the", "id", ",", "name", "and", "IATA", "code", "of", "the", "airport", "that", "had", "most", "number", "of", "flights", "?"], "dataset_name": "spider", "guid": 60}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | Please show the most common type of ships.", "sql": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "ship_mission", "query": "SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "ship", "GROUP", "BY", "TYPE", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "ship", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the most common type of ships.", "question_toks": ["Please", "show", "the", "most", "common", "type", "of", "ships", "."], "dataset_name": "spider", "guid": 61}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | List the name of the aircraft that has been named winning aircraft the most number of times.", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "aircraft", "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "MATCH", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Winning_Aircraft", "GROUP", "BY", "T2.Winning_Aircraft", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "winning_aircraft", "group", "by", "t2", ".", "winning_aircraft", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the name of the aircraft that has been named winning aircraft the most number of times.", "question_toks": ["List", "the", "name", "of", "the", "aircraft", "that", "has", "been", "named", "winning", "aircraft", "the", "most", "number", "of", "times", "."], "dataset_name": "spider", "guid": 62}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which abbreviation corresponds to Jetblue Airways?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "example": {"db_id": "flight_2", "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "query_toks": ["SELECT", "Abbreviation", "FROM", "AIRLINES", "WHERE", "Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "abbreviation", "from", "airlines", "where", "airline", "=", "value"], "question": "Which abbreviation corresponds to Jetblue Airways?", "question_toks": ["Which", "abbreviation", "corresponds", "to", "Jetblue", "Airways", "?"], "dataset_name": "spider", "guid": 63}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the name of the 3 employees who get paid the least?", "sql": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "example": {"db_id": "flight_1", "query": "SELECT name FROM Employee ORDER BY salary ASC LIMIT 3", "query_toks": ["SELECT", "name", "FROM", "Employee", "ORDER", "BY", "salary", "ASC", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "employee", "order", "by", "salary", "asc", "limit", "value"], "question": "What is the name of the 3 employees who get paid the least?", "question_toks": ["What", "is", "the", "name", "of", "the", "3", "employees", "who", "get", "paid", "the", "least", "?"], "dataset_name": "spider", "guid": 64}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the name, city, and country of the airport with the lowest altitude?", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation LIMIT 1", "query_toks": ["SELECT", "name", ",", "city", ",", "country", "FROM", "airports", "ORDER", "BY", "elevation", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "city", ",", "country", "from", "airports", "order", "by", "elevation", "limit", "value"], "question": "What is the name, city, and country of the airport with the lowest altitude?", "question_toks": ["What", "is", "the", "name", ",", "city", ",", "and", "country", "of", "the", "airport", "with", "the", "lowest", "altitude", "?"], "dataset_name": "spider", "guid": 65}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which airlines have at least 10 flights?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "GROUP", "BY", "T1.Airline", "HAVING", "count", "(", "*", ")", ">", "10"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "group", "by", "t1", ".", "airline", "having", "count", "(", "*", ")", ">", "value"], "question": "Which airlines have at least 10 flights?", "question_toks": ["Which", "airlines", "have", "at", "least", "10", "flights", "?"], "dataset_name": "spider", "guid": 66}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'", "example": {"db_id": "ship_1", "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id WHERE t2.rank  =  'Lieutenant'", "query_toks": ["SELECT", "t1.name", "FROM", "ship", "AS", "t1", "JOIN", "captain", "AS", "t2", "ON", "t1.ship_id", "=", "t2.ship_id", "WHERE", "t2.rank", "=", "'Midshipman", "'", "INTERSECT", "SELECT", "t1.name", "FROM", "ship", "AS", "t1", "JOIN", "captain", "AS", "t2", "ON", "t1.ship_id", "=", "t2.ship_id", "WHERE", "t2.rank", "=", "'Lieutenant", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "ship", "as", "t1", "join", "captain", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id", "where", "t2", ".", "rank", "=", "value", "intersect", "select", "t1", ".", "name", "from", "ship", "as", "t1", "join", "captain", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id", "where", "t2", ".", "rank", "=", "value"], "question": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.", "question_toks": ["Find", "the", "name", "of", "the", "ships", "that", "are", "steered", "by", "both", "a", "captain", "with", "Midshipman", "rank", "and", "a", "captain", "with", "Lieutenant", "rank", "."], "dataset_name": "spider", "guid": 67}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | how many airports are there in each country?", "sql": "SELECT count(*) ,  country FROM airport GROUP BY country", "example": {"db_id": "flight_company", "query": "SELECT count(*) ,  country FROM airport GROUP BY country", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "country", "FROM", "airport", "GROUP", "BY", "country"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "country", "from", "airport", "group", "by", "country"], "question": "how many airports are there in each country?", "question_toks": ["how", "many", "airports", "are", "there", "in", "each", "country", "?"], "dataset_name": "spider", "guid": 68}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Which flag is most widely used among all ships?", "sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "ship_1", "query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "flag", "FROM", "ship", "GROUP", "BY", "flag", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "flag", "from", "ship", "group", "by", "flag", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which flag is most widely used among all ships?", "question_toks": ["Which", "flag", "is", "most", "widely", "used", "among", "all", "ships", "?"], "dataset_name": "spider", "guid": 69}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the busiest source airport that runs most number of routes in China.", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.src_apid", "WHERE", "T1.country", "=", "'China", "'", "GROUP", "BY", "T1.name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "src_apid", "where", "t1", ".", "country", "=", "value", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the busiest source airport that runs most number of routes in China.", "question_toks": ["Find", "the", "busiest", "source", "airport", "that", "runs", "most", "number", "of", "routes", "in", "China", "."], "dataset_name": "spider", "guid": 70}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Give the airport code and airport name corresonding to the city Anthony.", "sql": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "example": {"db_id": "flight_2", "query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\"", "query_toks": ["SELECT", "AirportCode", ",", "AirportName", "FROM", "AIRPORTS", "WHERE", "city", "=", "``", "Anthony", "''"], "query_toks_no_value": ["select", "airportcode", ",", "airportname", "from", "airports", "where", "city", "=", "value"], "question": "Give the airport code and airport name corresonding to the city Anthony.", "question_toks": ["Give", "the", "airport", "code", "and", "airport", "name", "corresonding", "to", "the", "city", "Anthony", "."], "dataset_name": "spider", "guid": 71}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | In how many cities are there airports in the country of Greenland?", "sql": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'", "example": {"db_id": "flight_4", "query": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "airports", "WHERE", "country", "=", "'Greenland", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "airports", "where", "country", "=", "value"], "question": "In how many cities are there airports in the country of Greenland?", "question_toks": ["In", "how", "many", "cities", "are", "there", "airports", "in", "the", "country", "of", "Greenland", "?"], "dataset_name": "spider", "guid": 72}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show ids for all employees with at least 100000 salary.", "sql": "SELECT eid FROM Employee WHERE salary  >  100000", "example": {"db_id": "flight_1", "query": "SELECT eid FROM Employee WHERE salary  >  100000", "query_toks": ["SELECT", "eid", "FROM", "Employee", "WHERE", "salary", ">", "100000"], "query_toks_no_value": ["select", "eid", "from", "employee", "where", "salary", ">", "value"], "question": "Show ids for all employees with at least 100000 salary.", "question_toks": ["Show", "ids", "for", "all", "employees", "with", "at", "least", "100000", "salary", "."], "dataset_name": "spider", "guid": 73}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the name of the airports located in Cuba or Argentina.", "sql": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'", "example": {"db_id": "flight_4", "query": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'", "query_toks": ["SELECT", "name", "FROM", "airports", "WHERE", "country", "=", "'Cuba", "'", "OR", "country", "=", "'Argentina", "'"], "query_toks_no_value": ["select", "name", "from", "airports", "where", "country", "=", "value", "or", "country", "=", "value"], "question": "Find the name of the airports located in Cuba or Argentina.", "question_toks": ["Find", "the", "name", "of", "the", "airports", "located", "in", "Cuba", "or", "Argentina", "."], "dataset_name": "spider", "guid": 74}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many flights have destination ATO?", "sql": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "WHERE", "DestAirport", "=", "``", "ATO", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "where", "destairport", "=", "value"], "question": "How many flights have destination ATO?", "question_toks": ["How", "many", "flights", "have", "destination", "ATO", "?"], "dataset_name": "spider", "guid": 75}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which airlines have a flight with source airport AHD?", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "Which airlines have a flight with source airport AHD?", "question_toks": ["Which", "airlines", "have", "a", "flight", "with", "source", "airport", "AHD", "?"], "dataset_name": "spider", "guid": 76}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the total number of domestic passengers at all London airports?", "sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"", "example": {"db_id": "aircraft", "query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"", "query_toks": ["SELECT", "sum", "(", "Domestic_Passengers", ")", "FROM", "airport", "WHERE", "Airport_Name", "LIKE", "``", "%", "London", "%", "''"], "query_toks_no_value": ["select", "sum", "(", "domestic_passengers", ")", "from", "airport", "where", "airport_name", "like", "value"], "question": "What are the total number of domestic passengers at all London airports?", "question_toks": ["What", "are", "the", "total", "number", "of", "domestic", "passengers", "at", "all", "London", "airports", "?"], "dataset_name": "spider", "guid": 77}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What is the total number of airlines?", "sql": "SELECT count(*) FROM AIRLINES", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines"], "question": "What is the total number of airlines?", "question_toks": ["What", "is", "the", "total", "number", "of", "airlines", "?"], "dataset_name": "spider", "guid": 78}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the name of each aircraft and how many flights does each one complete?", "sql": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid", "example": {"db_id": "flight_1", "query": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "Flight", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T1.aid", "=", "T2.aid", "GROUP", "BY", "T1.aid"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "flight", "as", "t1", "join", "aircraft", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "aid", "group", "by", "t1", ".", "aid"], "question": "What is the name of each aircraft and how many flights does each one complete?", "question_toks": ["What", "is", "the", "name", "of", "each", "aircraft", "and", "how", "many", "flights", "does", "each", "one", "complete", "?"], "dataset_name": "spider", "guid": 79}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?", "sql": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "example": {"db_id": "flight_1", "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "query_toks": ["SELECT", "flno", ",", "origin", ",", "destination", "FROM", "Flight", "ORDER", "BY", "origin"], "query_toks_no_value": ["select", "flno", ",", "origin", ",", "destination", "from", "flight", "order", "by", "origin"], "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?", "question_toks": ["What", "is", "the", "flight", "number", ",", "origin", ",", "and", "destination", "for", "all", "flights", "in", "alphabetical", "order", "by", "departure", "cities", "?"], "dataset_name": "spider", "guid": 80}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the id of every employee who has at least a salary of  100000?", "sql": "SELECT eid FROM Employee WHERE salary  >  100000", "example": {"db_id": "flight_1", "query": "SELECT eid FROM Employee WHERE salary  >  100000", "query_toks": ["SELECT", "eid", "FROM", "Employee", "WHERE", "salary", ">", "100000"], "query_toks_no_value": ["select", "eid", "from", "employee", "where", "salary", ">", "value"], "question": "What is the id of every employee who has at least a salary of  100000?", "question_toks": ["What", "is", "the", "id", "of", "every", "employee", "who", "has", "at", "least", "a", "salary", "of", "100000", "?"], "dataset_name": "spider", "guid": 81}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | List the names of pilots that do not have any record.", "sql": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)", "example": {"db_id": "pilot_record", "query": "SELECT Pilot_name FROM pilot WHERE Pilot_ID NOT IN (SELECT Pilot_ID FROM pilot_record)", "query_toks": ["SELECT", "Pilot_name", "FROM", "pilot", "WHERE", "Pilot_ID", "NOT", "IN", "(", "SELECT", "Pilot_ID", "FROM", "pilot_record", ")"], "query_toks_no_value": ["select", "pilot_name", "from", "pilot", "where", "pilot_id", "not", "in", "(", "select", "pilot_id", "from", "pilot_record", ")"], "question": "List the names of pilots that do not have any record.", "question_toks": ["List", "the", "names", "of", "pilots", "that", "do", "not", "have", "any", "record", "."], "dataset_name": "spider", "guid": 82}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Give the number of Jetblue Airways flights.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRLINES", "AS", "T2", "ON", "T1.Airline", "=", "T2.uid", "WHERE", "T2.Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1", ".", "airline", "=", "t2", ".", "uid", "where", "t2", ".", "airline", "=", "value"], "question": "Give the number of Jetblue Airways flights.", "question_toks": ["Give", "the", "number", "of", "Jetblue", "Airways", "flights", "."], "dataset_name": "spider", "guid": 83}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | which pilot is in charge of the most number of flights?", "sql": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_company", "query": "SELECT pilot FROM flight GROUP BY pilot ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "pilot", "FROM", "flight", "GROUP", "BY", "pilot", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "pilot", "from", "flight", "group", "by", "pilot", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "which pilot is in charge of the most number of flights?", "question_toks": ["which", "pilot", "is", "in", "charge", "of", "the", "most", "number", "of", "flights", "?"], "dataset_name": "spider", "guid": 84}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What is the ship with the largest amount of tonnage called?", "sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1", "example": {"db_id": "ship_mission", "query": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "ship", "ORDER", "BY", "Tonnage", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "ship", "order", "by", "tonnage", "desc", "limit", "value"], "question": "What is the ship with the largest amount of tonnage called?", "question_toks": ["What", "is", "the", "ship", "with", "the", "largest", "amount", "of", "tonnage", "called", "?"], "dataset_name": "spider", "guid": 85}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show name and salary for all employees sorted by salary.", "sql": "SELECT name ,  salary FROM Employee ORDER BY salary", "example": {"db_id": "flight_1", "query": "SELECT name ,  salary FROM Employee ORDER BY salary", "query_toks": ["SELECT", "name", ",", "salary", "FROM", "Employee", "ORDER", "BY", "salary"], "query_toks_no_value": ["select", "name", ",", "salary", "from", "employee", "order", "by", "salary"], "question": "Show name and salary for all employees sorted by salary.", "question_toks": ["Show", "name", "and", "salary", "for", "all", "employees", "sorted", "by", "salary", "."], "dataset_name": "spider", "guid": 86}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What is the average number of international passengers of all airports?", "sql": "SELECT avg(International_Passengers) FROM airport", "example": {"db_id": "aircraft", "query": "SELECT avg(International_Passengers) FROM airport", "query_toks": ["SELECT", "avg", "(", "International_Passengers", ")", "FROM", "airport"], "query_toks_no_value": ["select", "avg", "(", "international_passengers", ")", "from", "airport"], "question": "What is the average number of international passengers of all airports?", "question_toks": ["What", "is", "the", "average", "number", "of", "international", "passengers", "of", "all", "airports", "?"], "dataset_name": "spider", "guid": 87}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show the station name with at least two trains.", "sql": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2", "example": {"db_id": "train_station", "query": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.name", "FROM", "train_station", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.station_id", "=", "T2.station_id", "GROUP", "BY", "T1.station_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "train_station", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "station_id", "=", "t2", ".", "station_id", "group", "by", "t1", ".", "station_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the station name with at least two trains.", "question_toks": ["Show", "the", "station", "name", "with", "at", "least", "two", "trains", "."], "dataset_name": "spider", "guid": 88}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What are the countries of all airlines whose names start with Orbit?", "sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'", "example": {"db_id": "flight_4", "query": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'", "query_toks": ["SELECT", "country", "FROM", "airlines", "WHERE", "name", "LIKE", "'Orbit", "%", "'"], "query_toks_no_value": ["select", "country", "from", "airlines", "where", "name", "like", "value"], "question": "What are the countries of all airlines whose names start with Orbit?", "question_toks": ["What", "are", "the", "countries", "of", "all", "airlines", "whose", "names", "start", "with", "Orbit", "?"], "dataset_name": "spider", "guid": 89}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | List names of all pilot in descending order of age.", "sql": "SELECT Name FROM pilot ORDER BY Age DESC", "example": {"db_id": "aircraft", "query": "SELECT Name FROM pilot ORDER BY Age DESC", "query_toks": ["SELECT", "Name", "FROM", "pilot", "ORDER", "BY", "Age", "DESC"], "query_toks_no_value": ["select", "name", "from", "pilot", "order", "by", "age", "desc"], "question": "List names of all pilot in descending order of age.", "question_toks": ["List", "names", "of", "all", "pilot", "in", "descending", "order", "of", "age", "."], "dataset_name": "spider", "guid": 90}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | How many airports haven't the pilot 'Thompson' driven an aircraft?", "sql": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );", "example": {"db_id": "flight_company", "query": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' );", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airport", "WHERE", "id", "NOT", "IN", "(", "SELECT", "airport_id", "FROM", "flight", "WHERE", "pilot", "=", "'Thompson", "'", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airport", "where", "id", "not", "in", "(", "select", "airport_id", "from", "flight", "where", "pilot", "=", "value", ")"], "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?", "question_toks": ["How", "many", "airports", "have", "n't", "the", "pilot", "'Thompson", "'", "driven", "an", "aircraft", "?"], "dataset_name": "spider", "guid": 91}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the origin and destination for all flights whose price is higher than 300?", "sql": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "example": {"db_id": "flight_1", "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "query_toks": ["SELECT", "origin", ",", "destination", "FROM", "Flight", "WHERE", "price", ">", "300"], "query_toks_no_value": ["select", "origin", ",", "destination", "from", "flight", "where", "price", ">", "value"], "question": "What is the origin and destination for all flights whose price is higher than 300?", "question_toks": ["What", "is", "the", "origin", "and", "destination", "for", "all", "flights", "whose", "price", "is", "higher", "than", "300", "?"], "dataset_name": "spider", "guid": 92}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | How many airlines are there?", "sql": "SELECT count(*) FROM airlines", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM airlines", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airlines"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines"], "question": "How many airlines are there?", "question_toks": ["How", "many", "airlines", "are", "there", "?"], "dataset_name": "spider", "guid": 93}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the departure and arrival dates of all flights from LA to Honolulu?", "sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "example": {"db_id": "flight_1", "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "query_toks": ["SELECT", "departure_date", ",", "arrival_date", "FROM", "Flight", "WHERE", "origin", "=", "``", "Los", "Angeles", "''", "AND", "destination", "=", "``", "Honolulu", "''"], "query_toks_no_value": ["select", "departure_date", ",", "arrival_date", "from", "flight", "where", "origin", "=", "value", "and", "destination", "=", "value"], "question": "What are the departure and arrival dates of all flights from LA to Honolulu?", "question_toks": ["What", "are", "the", "departure", "and", "arrival", "dates", "of", "all", "flights", "from", "LA", "to", "Honolulu", "?"], "dataset_name": "spider", "guid": 94}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Which destination has least number of flights?", "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "destination", "FROM", "Flight", "GROUP", "BY", "destination", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "destination", "from", "flight", "group", "by", "destination", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Which destination has least number of flights?", "question_toks": ["Which", "destination", "has", "least", "number", "of", "flights", "?"], "dataset_name": "spider", "guid": 95}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show all locations and the total number of platforms and passengers for all train stations in each location.", "sql": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION", "example": {"db_id": "train_station", "query": "SELECT LOCATION ,  sum(number_of_platforms) ,  sum(total_passengers) FROM station GROUP BY LOCATION", "query_toks": ["SELECT", "LOCATION", ",", "sum", "(", "number_of_platforms", ")", ",", "sum", "(", "total_passengers", ")", "FROM", "station", "GROUP", "BY", "LOCATION"], "query_toks_no_value": ["select", "location", ",", "sum", "(", "number_of_platforms", ")", ",", "sum", "(", "total_passengers", ")", "from", "station", "group", "by", "location"], "question": "Show all locations and the total number of platforms and passengers for all train stations in each location.", "question_toks": ["Show", "all", "locations", "and", "the", "total", "number", "of", "platforms", "and", "passengers", "for", "all", "train", "stations", "in", "each", "location", "."], "dataset_name": "spider", "guid": 96}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Which countries has the most number of airlines whose active status is 'Y'?", "sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country", "FROM", "airlines", "WHERE", "active", "=", "'Y", "'", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "airlines", "where", "active", "=", "value", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which countries has the most number of airlines whose active status is 'Y'?", "question_toks": ["Which", "countries", "has", "the", "most", "number", "of", "airlines", "whose", "active", "status", "is", "'Y", "'", "?"], "dataset_name": "spider", "guid": 97}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show the names and total passengers for all train stations not in London.", "sql": "SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'", "example": {"db_id": "train_station", "query": "SELECT name ,  total_passengers FROM station WHERE LOCATION != 'London'", "query_toks": ["SELECT", "name", ",", "total_passengers", "FROM", "station", "WHERE", "LOCATION", "!", "=", "'London", "'"], "query_toks_no_value": ["select", "name", ",", "total_passengers", "from", "station", "where", "location", "!", "=", "value"], "question": "Show the names and total passengers for all train stations not in London.", "question_toks": ["Show", "the", "names", "and", "total", "passengers", "for", "all", "train", "stations", "not", "in", "London", "."], "dataset_name": "spider", "guid": 98}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the total number of Domestic Passengers of airports that contain the word \"London\".", "sql": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"", "example": {"db_id": "aircraft", "query": "SELECT sum(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE \"%London%\"", "query_toks": ["SELECT", "sum", "(", "Domestic_Passengers", ")", "FROM", "airport", "WHERE", "Airport_Name", "LIKE", "``", "%", "London", "%", "''"], "query_toks_no_value": ["select", "sum", "(", "domestic_passengers", ")", "from", "airport", "where", "airport_name", "like", "value"], "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".", "question_toks": ["What", "are", "the", "total", "number", "of", "Domestic", "Passengers", "of", "airports", "that", "contain", "the", "word", "``", "London", "''", "."], "dataset_name": "spider", "guid": 99}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What types of ships have both ships that have Panama Flags and Malta flags?", "sql": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'", "example": {"db_id": "ship_1", "query": "SELECT TYPE FROM ship WHERE flag  =  'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag  =  'Malta'", "query_toks": ["SELECT", "TYPE", "FROM", "ship", "WHERE", "flag", "=", "'Panama", "'", "INTERSECT", "SELECT", "TYPE", "FROM", "ship", "WHERE", "flag", "=", "'Malta", "'"], "query_toks_no_value": ["select", "type", "from", "ship", "where", "flag", "=", "value", "intersect", "select", "type", "from", "ship", "where", "flag", "=", "value"], "question": "What types of ships have both ships that have Panama Flags and Malta flags?", "question_toks": ["What", "types", "of", "ships", "have", "both", "ships", "that", "have", "Panama", "Flags", "and", "Malta", "flags", "?"], "dataset_name": "spider", "guid": 100}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | How many airports are there per city in the US ordered from most to least?", "sql": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC", "example": {"db_id": "flight_4", "query": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "city", "FROM", "airports", "WHERE", "country", "=", "'United", "States", "'", "GROUP", "BY", "city", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "city", "from", "airports", "where", "country", "=", "value", "group", "by", "city", "order", "by", "count", "(", "*", ")", "desc"], "question": "How many airports are there per city in the US ordered from most to least?", "question_toks": ["How", "many", "airports", "are", "there", "per", "city", "in", "the", "US", "ordered", "from", "most", "to", "least", "?"], "dataset_name": "spider", "guid": 101}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | List the builders of railways in ascending alphabetical order.", "sql": "SELECT Builder FROM railway ORDER BY Builder ASC", "example": {"db_id": "railway", "query": "SELECT Builder FROM railway ORDER BY Builder ASC", "query_toks": ["SELECT", "Builder", "FROM", "railway", "ORDER", "BY", "Builder", "ASC"], "query_toks_no_value": ["select", "builder", "from", "railway", "order", "by", "builder", "asc"], "question": "List the builders of railways in ascending alphabetical order.", "question_toks": ["List", "the", "builders", "of", "railways", "in", "ascending", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 102}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show the name of aircraft which fewest people have its certificate.", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "Certificate", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T2.aid", "=", "T1.aid", "GROUP", "BY", "T1.aid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "certificate", "as", "t1", "join", "aircraft", "as", "t2", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "group", "by", "t1", ".", "aid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the name of aircraft which fewest people have its certificate.", "question_toks": ["Show", "the", "name", "of", "aircraft", "which", "fewest", "people", "have", "its", "certificate", "."], "dataset_name": "spider", "guid": 103}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the ids of all aircrafts that can cover a distance of more than 1000?", "sql": "SELECT aid FROM Aircraft WHERE distance  >  1000", "example": {"db_id": "flight_1", "query": "SELECT aid FROM Aircraft WHERE distance  >  1000", "query_toks": ["SELECT", "aid", "FROM", "Aircraft", "WHERE", "distance", ">", "1000"], "query_toks_no_value": ["select", "aid", "from", "aircraft", "where", "distance", ">", "value"], "question": "What are the ids of all aircrafts that can cover a distance of more than 1000?", "question_toks": ["What", "are", "the", "ids", "of", "all", "aircrafts", "that", "can", "cover", "a", "distance", "of", "more", "than", "1000", "?"], "dataset_name": "spider", "guid": 104}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the number of routes with destination airports in Italy.", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "routes", "AS", "T1", "JOIN", "airports", "AS", "T2", "ON", "T1.dst_apid", "=", "T2.apid", "WHERE", "T2.country", "=", "'Italy", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "routes", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "dst_apid", "=", "t2", ".", "apid", "where", "t2", ".", "country", "=", "value"], "question": "Find the number of routes with destination airports in Italy.", "question_toks": ["Find", "the", "number", "of", "routes", "with", "destination", "airports", "in", "Italy", "."], "dataset_name": "spider", "guid": 105}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"", "example": {"db_id": "flight_1", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"", "query_toks": ["SELECT", "T1.name", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "JOIN", "Aircraft", "AS", "T3", "ON", "T3.aid", "=", "T2.aid", "WHERE", "T3.name", "=", "``", "Boeing", "737-800", "''", "INTERSECT", "SELECT", "T1.name", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "JOIN", "Aircraft", "AS", "T3", "ON", "T3.aid", "=", "T2.aid", "WHERE", "T3.name", "=", "``", "Airbus", "A340-300", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "join", "aircraft", "as", "t3", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t3", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "join", "aircraft", "as", "t3", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t3", ".", "name", "=", "value"], "question": "Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.", "question_toks": ["Show", "names", "for", "all", "employees", "who", "have", "certificates", "on", "both", "Boeing", "737-800", "and", "Airbus", "A340-300", "."], "dataset_name": "spider", "guid": 106}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What are the names of all airports in Cuba or Argentina?", "sql": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'", "example": {"db_id": "flight_4", "query": "SELECT name FROM airports WHERE country  =  'Cuba' OR country  =  'Argentina'", "query_toks": ["SELECT", "name", "FROM", "airports", "WHERE", "country", "=", "'Cuba", "'", "OR", "country", "=", "'Argentina", "'"], "query_toks_no_value": ["select", "name", "from", "airports", "where", "country", "=", "value", "or", "country", "=", "value"], "question": "What are the names of all airports in Cuba or Argentina?", "question_toks": ["What", "are", "the", "names", "of", "all", "airports", "in", "Cuba", "or", "Argentina", "?"], "dataset_name": "spider", "guid": 107}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Find the name, class and rank of all captains.", "sql": "SELECT name ,  CLASS ,  rank FROM captain", "example": {"db_id": "ship_1", "query": "SELECT name ,  CLASS ,  rank FROM captain", "query_toks": ["SELECT", "name", ",", "CLASS", ",", "rank", "FROM", "captain"], "query_toks_no_value": ["select", "name", ",", "class", ",", "rank", "from", "captain"], "question": "Find the name, class and rank of all captains.", "question_toks": ["Find", "the", "name", ",", "class", "and", "rank", "of", "all", "captains", "."], "dataset_name": "spider", "guid": 108}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What is the number of ships?", "sql": "SELECT count(*) FROM ship", "example": {"db_id": "ship_mission", "query": "SELECT count(*) FROM ship", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ship"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ship"], "question": "What is the number of ships?", "question_toks": ["What", "is", "the", "number", "of", "ships", "?"], "dataset_name": "spider", "guid": 109}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many 'United Airlines' flights go to Airport 'ASY'?", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T2.Airline", "=", "T1.uid", "WHERE", "T1.Airline", "=", "``", "United", "Airlines", "''", "AND", "T2.DestAirport", "=", "``", "ASY", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2", ".", "airline", "=", "t1", ".", "uid", "where", "t1", ".", "airline", "=", "value", "and", "t2", ".", "destairport", "=", "value"], "question": "How many 'United Airlines' flights go to Airport 'ASY'?", "question_toks": ["How", "many", "'United", "Airlines", "'", "flights", "go", "to", "Airport", "'ASY", "'", "?"], "dataset_name": "spider", "guid": 110}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the name, city, and country of the airport that has the highest latitude.", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "city", ",", "country", "FROM", "airports", "ORDER", "BY", "elevation", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "city", ",", "country", "from", "airports", "order", "by", "elevation", "desc", "limit", "value"], "question": "Find the name, city, and country of the airport that has the highest latitude.", "question_toks": ["Find", "the", "name", ",", "city", ",", "and", "country", "of", "the", "airport", "that", "has", "the", "highest", "latitude", "."], "dataset_name": "spider", "guid": 111}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the number of routes operated by the airline American Airlines whose destinations are in Italy?", "sql": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "routes", "AS", "T1", "JOIN", "airports", "AS", "T2", "ON", "T1.dst_apid", "=", "T2.apid", "JOIN", "airlines", "AS", "T3", "ON", "T1.alid", "=", "T3.alid", "WHERE", "T2.country", "=", "'Italy", "'", "AND", "T3.name", "=", "'American", "Airlines", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "routes", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "dst_apid", "=", "t2", ".", "apid", "join", "airlines", "as", "t3", "on", "t1", ".", "alid", "=", "t3", ".", "alid", "where", "t2", ".", "country", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?", "question_toks": ["What", "is", "the", "number", "of", "routes", "operated", "by", "the", "airline", "American", "Airlines", "whose", "destinations", "are", "in", "Italy", "?"], "dataset_name": "spider", "guid": 112}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?", "sql": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'", "example": {"db_id": "flight_company", "query": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'", "query_toks": ["SELECT", "DISTINCT", "T2.pilot", "FROM", "airport", "AS", "T1", "JOIN", "flight", "AS", "T2", "ON", "T1.id", "=", "T2.airport_id", "WHERE", "T1.country", "=", "'United", "States", "'", "OR", "T1.name", "=", "'Billund", "Airport", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "pilot", "from", "airport", "as", "t1", "join", "flight", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "airport_id", "where", "t1", ".", "country", "=", "value", "or", "t1", ".", "name", "=", "value"], "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?", "question_toks": ["What", "are", "the", "different", "pilot", "names", "who", "had", "piloted", "a", "flight", "in", "the", "country", "'United", "States", "'", "or", "in", "the", "airport", "named", "'Billund", "Airport", "'", "?"], "dataset_name": "spider", "guid": 113}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the names of all aircrafts that John Williams have certificates to be able to fly?", "sql": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"", "example": {"db_id": "flight_1", "query": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"", "query_toks": ["SELECT", "T3.name", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "JOIN", "Aircraft", "AS", "T3", "ON", "T3.aid", "=", "T2.aid", "WHERE", "T1.name", "=", "``", "John", "Williams", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "join", "aircraft", "as", "t3", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "name", "=", "value"], "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?", "question_toks": ["What", "are", "the", "names", "of", "all", "aircrafts", "that", "John", "Williams", "have", "certificates", "to", "be", "able", "to", "fly", "?"], "dataset_name": "spider", "guid": 114}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | Show the builder of railways associated with the trains named \"Andaman Exp\".", "sql": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  \"Andaman Exp\"", "example": {"db_id": "railway", "query": "SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID WHERE T2.Name  =  \"Andaman Exp\"", "query_toks": ["SELECT", "T1.Builder", "FROM", "railway", "AS", "T1", "JOIN", "train", "AS", "T2", "ON", "T1.Railway_ID", "=", "T2.Railway_ID", "WHERE", "T2.Name", "=", "``", "Andaman", "Exp", "''"], "query_toks_no_value": ["select", "t1", ".", "builder", "from", "railway", "as", "t1", "join", "train", "as", "t2", "on", "t1", ".", "railway_id", "=", "t2", ".", "railway_id", "where", "t2", ".", "name", "=", "value"], "question": "Show the builder of railways associated with the trains named \"Andaman Exp\".", "question_toks": ["Show", "the", "builder", "of", "railways", "associated", "with", "the", "trains", "named", "``", "Andaman", "Exp", "''", "."], "dataset_name": "spider", "guid": 115}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Find the name of airports which do not have any flight in and out.", "sql": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "example": {"db_id": "flight_2", "query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)", "query_toks": ["SELECT", "AirportName", "FROM", "Airports", "WHERE", "AirportCode", "NOT", "IN", "(", "SELECT", "SourceAirport", "FROM", "Flights", "UNION", "SELECT", "DestAirport", "FROM", "Flights", ")"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")"], "question": "Find the name of airports which do not have any flight in and out.", "question_toks": ["Find", "the", "name", "of", "airports", "which", "do", "not", "have", "any", "flight", "in", "and", "out", "."], "dataset_name": "spider", "guid": 116}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | What are the ids and names of the companies that operated more than one flight?", "sql": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1", "example": {"db_id": "flight_company", "query": "SELECT T1.id ,  T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id GROUP BY T1.id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "operate_company", "AS", "T1", "JOIN", "flight", "AS", "t2", "ON", "T1.id", "=", "T2.company_id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "operate_company", "as", "t1", "join", "flight", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "company_id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the ids and names of the companies that operated more than one flight?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "the", "companies", "that", "operated", "more", "than", "one", "flight", "?"], "dataset_name": "spider", "guid": 117}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the number of airlines based in Russia?", "sql": "SELECT count(*) FROM airlines WHERE country  =  'Russia'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM airlines WHERE country  =  'Russia'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airlines", "WHERE", "country", "=", "'Russia", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "value"], "question": "What is the number of airlines based in Russia?", "question_toks": ["What", "is", "the", "number", "of", "airlines", "based", "in", "Russia", "?"], "dataset_name": "spider", "guid": 118}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | Show the distinct countries of managers.", "sql": "SELECT DISTINCT Country FROM manager", "example": {"db_id": "railway", "query": "SELECT DISTINCT Country FROM manager", "query_toks": ["SELECT", "DISTINCT", "Country", "FROM", "manager"], "query_toks_no_value": ["select", "distinct", "country", "from", "manager"], "question": "Show the distinct countries of managers.", "question_toks": ["Show", "the", "distinct", "countries", "of", "managers", "."], "dataset_name": "spider", "guid": 119}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the names of the pilots that have not won any matches in Australia?", "sql": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')", "example": {"db_id": "aircraft", "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')", "query_toks": ["SELECT", "name", "FROM", "pilot", "WHERE", "pilot_id", "NOT", "IN", "(", "SELECT", "Winning_Pilot", "FROM", "MATCH", "WHERE", "country", "=", "'Australia", "'", ")"], "query_toks_no_value": ["select", "name", "from", "pilot", "where", "pilot_id", "not", "in", "(", "select", "winning_pilot", "from", "match", "where", "country", "=", "value", ")"], "question": "What are the names of the pilots that have not won any matches in Australia?", "question_toks": ["What", "are", "the", "names", "of", "the", "pilots", "that", "have", "not", "won", "any", "matches", "in", "Australia", "?"], "dataset_name": "spider", "guid": 120}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show names for all aircrafts with distances more than the average.", "sql": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)", "example": {"db_id": "flight_1", "query": "SELECT name FROM Aircraft WHERE distance  >  (SELECT avg(distance) FROM Aircraft)", "query_toks": ["SELECT", "name", "FROM", "Aircraft", "WHERE", "distance", ">", "(", "SELECT", "avg", "(", "distance", ")", "FROM", "Aircraft", ")"], "query_toks_no_value": ["select", "name", "from", "aircraft", "where", "distance", ">", "(", "select", "avg", "(", "distance", ")", "from", "aircraft", ")"], "question": "Show names for all aircrafts with distances more than the average.", "question_toks": ["Show", "names", "for", "all", "aircrafts", "with", "distances", "more", "than", "the", "average", "."], "dataset_name": "spider", "guid": 121}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the names of all employees who have a salary higher than average?", "sql": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "example": {"db_id": "flight_1", "query": "SELECT name FROM Employee WHERE salary  >  (SELECT avg(salary) FROM Employee)", "query_toks": ["SELECT", "name", "FROM", "Employee", "WHERE", "salary", ">", "(", "SELECT", "avg", "(", "salary", ")", "FROM", "Employee", ")"], "query_toks_no_value": ["select", "name", "from", "employee", "where", "salary", ">", "(", "select", "avg", "(", "salary", ")", "from", "employee", ")"], "question": "What are the names of all employees who have a salary higher than average?", "question_toks": ["What", "are", "the", "names", "of", "all", "employees", "who", "have", "a", "salary", "higher", "than", "average", "?"], "dataset_name": "spider", "guid": 122}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which city has most number of arriving flights?", "sql": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_2", "query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.City", "FROM", "AIRPORTS", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.AirportCode", "=", "T2.DestAirport", "GROUP", "BY", "T1.City", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "airportcode", "=", "t2", ".", "destairport", "group", "by", "t1", ".", "city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which city has most number of arriving flights?", "question_toks": ["Which", "city", "has", "most", "number", "of", "arriving", "flights", "?"], "dataset_name": "spider", "guid": 123}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Return the number of flights arriving in Aberdeen.", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "Return the number of flights arriving in Aberdeen.", "question_toks": ["Return", "the", "number", "of", "flights", "arriving", "in", "Aberdeen", "."], "dataset_name": "spider", "guid": 124}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | What is the most common company type, and how many are there?", "sql": "SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_company", "query": "SELECT TYPE ,  count(*) FROM operate_company GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", ",", "count", "(", "*", ")", "FROM", "operate_company", "GROUP", "BY", "TYPE", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", ",", "count", "(", "*", ")", "from", "operate_company", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common company type, and how many are there?", "question_toks": ["What", "is", "the", "most", "common", "company", "type", ",", "and", "how", "many", "are", "there", "?"], "dataset_name": "spider", "guid": 125}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What is the name of the youngest captain?", "sql": "SELECT name FROM captain ORDER BY age LIMIT 1", "example": {"db_id": "ship_1", "query": "SELECT name FROM captain ORDER BY age LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "captain", "ORDER", "BY", "age", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "captain", "order", "by", "age", "limit", "value"], "question": "What is the name of the youngest captain?", "question_toks": ["What", "is", "the", "name", "of", "the", "youngest", "captain", "?"], "dataset_name": "spider", "guid": 126}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | What are the names and arrival times of trains?", "sql": "SELECT Name ,  Arrival FROM train", "example": {"db_id": "railway", "query": "SELECT Name ,  Arrival FROM train", "query_toks": ["SELECT", "Name", ",", "Arrival", "FROM", "train"], "query_toks_no_value": ["select", "name", ",", "arrival", "from", "train"], "question": "What are the names and arrival times of trains?", "question_toks": ["What", "are", "the", "names", "and", "arrival", "times", "of", "trains", "?"], "dataset_name": "spider", "guid": 127}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the numbers of all flights coming from Los Angeles?", "sql": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"", "example": {"db_id": "flight_1", "query": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"", "query_toks": ["SELECT", "flno", "FROM", "Flight", "WHERE", "origin", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "flno", "from", "flight", "where", "origin", "=", "value"], "question": "What are the numbers of all flights coming from Los Angeles?", "question_toks": ["What", "are", "the", "numbers", "of", "all", "flights", "coming", "from", "Los", "Angeles", "?"], "dataset_name": "spider", "guid": 128}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the name and city of the airport which is the destination of the most number of routes.", "sql": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT T1.name ,  T1.city ,  T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid GROUP BY T2.dst_apid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T1.city", ",", "T2.dst_apid", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.dst_apid", "GROUP", "BY", "T2.dst_apid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "city", ",", "t2", ".", "dst_apid", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "dst_apid", "group", "by", "t2", ".", "dst_apid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name and city of the airport which is the destination of the most number of routes.", "question_toks": ["Find", "the", "name", "and", "city", "of", "the", "airport", "which", "is", "the", "destination", "of", "the", "most", "number", "of", "routes", "."], "dataset_name": "spider", "guid": 129}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the aircrafts with top 3 shortest lengthes? List their names.", "sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "example": {"db_id": "flight_1", "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "query_toks": ["SELECT", "name", "FROM", "Aircraft", "ORDER", "BY", "distance", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "aircraft", "order", "by", "distance", "limit", "value"], "question": "What are the aircrafts with top 3 shortest lengthes? List their names.", "question_toks": ["What", "are", "the", "aircrafts", "with", "top", "3", "shortest", "lengthes", "?", "List", "their", "names", "."], "dataset_name": "spider", "guid": 130}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What is the airport name for airport 'AKO'?", "sql": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "example": {"db_id": "flight_2", "query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\"", "query_toks": ["SELECT", "AirportName", "FROM", "AIRPORTS", "WHERE", "AirportCode", "=", "``", "AKO", "''"], "query_toks_no_value": ["select", "airportname", "from", "airports", "where", "airportcode", "=", "value"], "question": "What is the airport name for airport 'AKO'?", "question_toks": ["What", "is", "the", "airport", "name", "for", "airport", "'AKO", "'", "?"], "dataset_name": "spider", "guid": 131}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | How many airports are there per country? Order the countries by decreasing number of airports.", "sql": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC", "example": {"db_id": "flight_4", "query": "SELECT count(*) ,  country FROM airports GROUP BY country ORDER BY count(*) DESC", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "country", "FROM", "airports", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "country", "from", "airports", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc"], "question": "How many airports are there per country? Order the countries by decreasing number of airports.", "question_toks": ["How", "many", "airports", "are", "there", "per", "country", "?", "Order", "the", "countries", "by", "decreasing", "number", "of", "airports", "."], "dataset_name": "spider", "guid": 132}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.", "sql": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000", "example": {"db_id": "ship_mission", "query": "SELECT TYPE FROM ship WHERE Tonnage  >  6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage  <  4000", "query_toks": ["SELECT", "TYPE", "FROM", "ship", "WHERE", "Tonnage", ">", "6000", "INTERSECT", "SELECT", "TYPE", "FROM", "ship", "WHERE", "Tonnage", "<", "4000"], "query_toks_no_value": ["select", "type", "from", "ship", "where", "tonnage", ">", "value", "intersect", "select", "type", "from", "ship", "where", "tonnage", "<", "value"], "question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.", "question_toks": ["Show", "the", "types", "of", "ships", "that", "have", "both", "ships", "with", "tonnage", "larger", "than", "6000", "and", "ships", "with", "tonnage", "smaller", "than", "4000", "."], "dataset_name": "spider", "guid": 133}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What are the names of the airports in the city of Goroka?", "sql": "SELECT name FROM airports WHERE city  =  'Goroka'", "example": {"db_id": "flight_4", "query": "SELECT name FROM airports WHERE city  =  'Goroka'", "query_toks": ["SELECT", "name", "FROM", "airports", "WHERE", "city", "=", "'Goroka", "'"], "query_toks_no_value": ["select", "name", "from", "airports", "where", "city", "=", "value"], "question": "What are the names of the airports in the city of Goroka?", "question_toks": ["What", "are", "the", "names", "of", "the", "airports", "in", "the", "city", "of", "Goroka", "?"], "dataset_name": "spider", "guid": 134}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the name of airline which runs the most number of routes.", "sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "airlines", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.alid", "=", "T2.alid", "GROUP", "BY", "T1.name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "airlines", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "alid", "=", "t2", ".", "alid", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of airline which runs the most number of routes.", "question_toks": ["Find", "the", "name", "of", "airline", "which", "runs", "the", "most", "number", "of", "routes", "."], "dataset_name": "spider", "guid": 135}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What are flight numbers of flights arriving at City \"Aberdeen\"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "example": {"db_id": "flight_2", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "T1.FlightNo", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "t1", ".", "flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "question_toks": ["What", "are", "flight", "numbers", "of", "flights", "arriving", "at", "City", "``", "Aberdeen", "''", "?"], "dataset_name": "spider", "guid": 136}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What is the maximum and mininum number of transit passengers for all airports?", "sql": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport", "example": {"db_id": "aircraft", "query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport", "query_toks": ["SELECT", "max", "(", "Transit_Passengers", ")", ",", "min", "(", "Transit_Passengers", ")", "FROM", "airport"], "query_toks_no_value": ["select", "max", "(", "transit_passengers", ")", ",", "min", "(", "transit_passengers", ")", "from", "airport"], "question": "What is the maximum and mininum number of transit passengers for all airports?", "question_toks": ["What", "is", "the", "maximum", "and", "mininum", "number", "of", "transit", "passengers", "for", "all", "airports", "?"], "dataset_name": "spider", "guid": 137}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What destination has the fewest number of flights?", "sql": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "destination", "FROM", "Flight", "GROUP", "BY", "destination", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "destination", "from", "flight", "group", "by", "destination", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What destination has the fewest number of flights?", "question_toks": ["What", "destination", "has", "the", "fewest", "number", "of", "flights", "?"], "dataset_name": "spider", "guid": 138}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Which flight numbers correspond to United Airlines flights?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "example": {"db_id": "flight_2", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\"", "query_toks": ["SELECT", "T1.FlightNo", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRLINES", "AS", "T2", "ON", "T2.uid", "=", "T1.Airline", "WHERE", "T2.Airline", "=", "``", "United", "Airlines", "''"], "query_toks_no_value": ["select", "t1", ".", "flightno", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t2", ".", "uid", "=", "t1", ".", "airline", "where", "t2", ".", "airline", "=", "value"], "question": "Which flight numbers correspond to United Airlines flights?", "question_toks": ["Which", "flight", "numbers", "correspond", "to", "United", "Airlines", "flights", "?"], "dataset_name": "spider", "guid": 139}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | List the id, country, city and name of the airports ordered alphabetically by the name.", "sql": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name", "example": {"db_id": "flight_company", "query": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name", "query_toks": ["SELECT", "id", ",", "country", ",", "city", ",", "name", "FROM", "airport", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "id", ",", "country", ",", "city", ",", "name", "from", "airport", "order", "by", "name"], "question": "List the id, country, city and name of the airports ordered alphabetically by the name.", "question_toks": ["List", "the", "id", ",", "country", ",", "city", "and", "name", "of", "the", "airports", "ordered", "alphabetically", "by", "the", "name", "."], "dataset_name": "spider", "guid": 140}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | Show the distinct fate of missions that involve ships with nationality \"United States\"", "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"", "example": {"db_id": "ship_mission", "query": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"", "query_toks": ["SELECT", "DISTINCT", "T1.Fate", "FROM", "mission", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.Ship_ID", "=", "T2.Ship_ID", "WHERE", "T2.Nationality", "=", "``", "United", "States", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fate", "from", "mission", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id", "where", "t2", ".", "nationality", "=", "value"], "question": "Show the distinct fate of missions that involve ships with nationality \"United States\"", "question_toks": ["Show", "the", "distinct", "fate", "of", "missions", "that", "involve", "ships", "with", "nationality", "``", "United", "States", "''"], "dataset_name": "spider", "guid": 141}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What are the different fates of the mission that involved ships from the United States?", "sql": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"", "example": {"db_id": "ship_mission", "query": "SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID WHERE T2.Nationality  =  \"United States\"", "query_toks": ["SELECT", "DISTINCT", "T1.Fate", "FROM", "mission", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.Ship_ID", "=", "T2.Ship_ID", "WHERE", "T2.Nationality", "=", "``", "United", "States", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fate", "from", "mission", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id", "where", "t2", ".", "nationality", "=", "value"], "question": "What are the different fates of the mission that involved ships from the United States?", "question_toks": ["What", "are", "the", "different", "fates", "of", "the", "mission", "that", "involved", "ships", "from", "the", "United", "States", "?"], "dataset_name": "spider", "guid": 142}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.", "sql": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges", "example": {"db_id": "train_station", "query": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges", "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "station", "ORDER", "BY", "Annual_entry_exit", ",", "Annual_interchanges"], "query_toks_no_value": ["select", "name", ",", "location", "from", "station", "order", "by", "annual_entry_exit", ",", "annual_interchanges"], "question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.", "question_toks": ["List", "the", "names", "and", "locations", "of", "all", "stations", "ordered", "by", "their", "yearly", "entry", "exit", "and", "interchange", "amounts", "."], "dataset_name": "spider", "guid": 143}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the name of pilots aged 25 or older?", "sql": "SELECT Name FROM pilot WHERE Age  >=  25", "example": {"db_id": "aircraft", "query": "SELECT Name FROM pilot WHERE Age  >=  25", "query_toks": ["SELECT", "Name", "FROM", "pilot", "WHERE", "Age", ">", "=", "25"], "query_toks_no_value": ["select", "name", "from", "pilot", "where", "age", ">", "=", "value"], "question": "What are the name of pilots aged 25 or older?", "question_toks": ["What", "are", "the", "name", "of", "pilots", "aged", "25", "or", "older", "?"], "dataset_name": "spider", "guid": 144}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show the name, time, and service for all trains.", "sql": "SELECT name ,  TIME ,  service FROM train", "example": {"db_id": "train_station", "query": "SELECT name ,  TIME ,  service FROM train", "query_toks": ["SELECT", "name", ",", "TIME", ",", "service", "FROM", "train"], "query_toks_no_value": ["select", "name", ",", "time", ",", "service", "from", "train"], "question": "Show the name, time, and service for all trains.", "question_toks": ["Show", "the", "name", ",", "time", ",", "and", "service", "for", "all", "trains", "."], "dataset_name": "spider", "guid": 145}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What are the countries with the most airlines whose active status is Y?", "sql": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT country FROM airlines WHERE active  =  'Y' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country", "FROM", "airlines", "WHERE", "active", "=", "'Y", "'", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "airlines", "where", "active", "=", "value", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the countries with the most airlines whose active status is Y?", "question_toks": ["What", "are", "the", "countries", "with", "the", "most", "airlines", "whose", "active", "status", "is", "Y", "?"], "dataset_name": "spider", "guid": 146}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "JOIN", "AIRPORTS", "AS", "T3", "ON", "T1.SourceAirport", "=", "T3.AirportCode", "WHERE", "T2.City", "=", "``", "Ashley", "''", "AND", "T3.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "join", "airports", "as", "t3", "on", "t1", ".", "sourceairport", "=", "t3", ".", "airportcode", "where", "t2", ".", "city", "=", "value", "and", "t3", ".", "city", "=", "value"], "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "question_toks": ["How", "many", "flights", "depart", "from", "City", "'Aberdeen", "'", "and", "have", "destination", "City", "'Ashley", "'", "?"], "dataset_name": "spider", "guid": 147}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | What are the names and types of the companies that have ever operated a flight?", "sql": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id", "example": {"db_id": "flight_company", "query": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id", "query_toks": ["SELECT", "T1.name", ",", "T1.type", "FROM", "operate_company", "AS", "T1", "JOIN", "flight", "AS", "t2", "ON", "T1.id", "=", "T2.company_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "type", "from", "operate_company", "as", "t1", "join", "flight", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "company_id"], "question": "What are the names and types of the companies that have ever operated a flight?", "question_toks": ["What", "are", "the", "names", "and", "types", "of", "the", "companies", "that", "have", "ever", "operated", "a", "flight", "?"], "dataset_name": "spider", "guid": 148}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the number of routes operated by American Airlines.", "sql": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airlines", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.alid", "=", "T2.alid", "WHERE", "T1.name", "=", "'American", "Airlines", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "alid", "=", "t2", ".", "alid", "where", "t1", ".", "name", "=", "value"], "question": "Find the number of routes operated by American Airlines.", "question_toks": ["Find", "the", "number", "of", "routes", "operated", "by", "American", "Airlines", "."], "dataset_name": "spider", "guid": 149}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?", "sql": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000", "example": {"db_id": "aircraft", "query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000", "query_toks": ["SELECT", "T1.Aircraft", ",", "T1.Description", "FROM", "aircraft", "AS", "T1", "JOIN", "airport_aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "airport", "AS", "T3", "ON", "T2.Airport_ID", "=", "T3.Airport_ID", "WHERE", "T3.Total_Passengers", ">", "10000000"], "query_toks_no_value": ["select", "t1", ".", "aircraft", ",", "t1", ".", "description", "from", "aircraft", "as", "t1", "join", "airport_aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "airport", "as", "t3", "on", "t2", ".", "airport_id", "=", "t3", ".", "airport_id", "where", "t3", ".", "total_passengers", ">", "value"], "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?", "question_toks": ["What", "are", "the", "names", "and", "descriptions", "of", "aircrafts", "associated", "with", "an", "airport", "that", "has", "more", "total", "passengers", "than", "10000000", "?"], "dataset_name": "spider", "guid": 150}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the total number of airlines?", "sql": "SELECT count(*) FROM airlines", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM airlines", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airlines"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines"], "question": "What is the total number of airlines?", "question_toks": ["What", "is", "the", "total", "number", "of", "airlines", "?"], "dataset_name": "spider", "guid": 151}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.", "sql": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000", "example": {"db_id": "aircraft", "query": "SELECT T1.Aircraft ,  T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Total_Passengers  >  10000000", "query_toks": ["SELECT", "T1.Aircraft", ",", "T1.Description", "FROM", "aircraft", "AS", "T1", "JOIN", "airport_aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "airport", "AS", "T3", "ON", "T2.Airport_ID", "=", "T3.Airport_ID", "WHERE", "T3.Total_Passengers", ">", "10000000"], "query_toks_no_value": ["select", "t1", ".", "aircraft", ",", "t1", ".", "description", "from", "aircraft", "as", "t1", "join", "airport_aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "airport", "as", "t3", "on", "t2", ".", "airport_id", "=", "t3", ".", "airport_id", "where", "t3", ".", "total_passengers", ">", "value"], "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.", "question_toks": ["Please", "show", "the", "names", "and", "descriptions", "of", "aircrafts", "associated", "with", "airports", "that", "have", "a", "total", "number", "of", "passengers", "bigger", "than", "10000000", "."], "dataset_name": "spider", "guid": 152}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | How many cities are there that have more than 3 airports?", "sql": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM (SELECT city FROM airports GROUP BY city HAVING count(*)  >  3)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "(", "SELECT", "city", "FROM", "airports", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", ">", "3", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "(", "select", "city", "from", "airports", "group", "by", "city", "having", "count", "(", "*", ")", ">", "value", ")"], "question": "How many cities are there that have more than 3 airports?", "question_toks": ["How", "many", "cities", "are", "there", "that", "have", "more", "than", "3", "airports", "?"], "dataset_name": "spider", "guid": 153}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the number of routes that end at John F Kennedy International Airport?", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.dst_apid", "WHERE", "T1.name", "=", "'John", "F", "Kennedy", "International", "Airport", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "dst_apid", "where", "t1", ".", "name", "=", "value"], "question": "What is the number of routes that end at John F Kennedy International Airport?", "question_toks": ["What", "is", "the", "number", "of", "routes", "that", "end", "at", "John", "F", "Kennedy", "International", "Airport", "?"], "dataset_name": "spider", "guid": 154}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Return the flag that is most common among all ships.", "sql": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "ship_1", "query": "SELECT flag FROM ship GROUP BY flag ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "flag", "FROM", "ship", "GROUP", "BY", "flag", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "flag", "from", "ship", "group", "by", "flag", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the flag that is most common among all ships.", "question_toks": ["Return", "the", "flag", "that", "is", "most", "common", "among", "all", "ships", "."], "dataset_name": "spider", "guid": 155}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What are the mission codes, fates, and names of the ships involved?", "sql": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID", "example": {"db_id": "ship_mission", "query": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID", "query_toks": ["SELECT", "T1.Code", ",", "T1.Fate", ",", "T2.Name", "FROM", "mission", "AS", "T1", "JOIN", "ship", "AS", "T2", "ON", "T1.Ship_ID", "=", "T2.Ship_ID"], "query_toks_no_value": ["select", "t1", ".", "code", ",", "t1", ".", "fate", ",", "t2", ".", "name", "from", "mission", "as", "t1", "join", "ship", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id"], "question": "What are the mission codes, fates, and names of the ships involved?", "question_toks": ["What", "are", "the", "mission", "codes", ",", "fates", ",", "and", "names", "of", "the", "ships", "involved", "?"], "dataset_name": "spider", "guid": 156}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What is the year in which most ships were built?", "sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "ship_1", "query": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "built_year", "FROM", "ship", "GROUP", "BY", "built_year", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "built_year", "from", "ship", "group", "by", "built_year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the year in which most ships were built?", "question_toks": ["What", "is", "the", "year", "in", "which", "most", "ships", "were", "built", "?"], "dataset_name": "spider", "guid": 157}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What are the names of captains, sorted by age descending?", "sql": "SELECT name FROM captain ORDER BY age DESC", "example": {"db_id": "ship_1", "query": "SELECT name FROM captain ORDER BY age DESC", "query_toks": ["SELECT", "name", "FROM", "captain", "ORDER", "BY", "age", "DESC"], "query_toks_no_value": ["select", "name", "from", "captain", "order", "by", "age", "desc"], "question": "What are the names of captains, sorted by age descending?", "question_toks": ["What", "are", "the", "names", "of", "captains", ",", "sorted", "by", "age", "descending", "?"], "dataset_name": "spider", "guid": 158}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | what are the names and classes of the ships that do not have any captain yet?", "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)", "example": {"db_id": "ship_1", "query": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)", "query_toks": ["SELECT", "name", ",", "CLASS", "FROM", "ship", "WHERE", "ship_id", "NOT", "IN", "(", "SELECT", "ship_id", "FROM", "captain", ")"], "query_toks_no_value": ["select", "name", ",", "class", "from", "ship", "where", "ship_id", "not", "in", "(", "select", "ship_id", "from", "captain", ")"], "question": "what are the names and classes of the ships that do not have any captain yet?", "question_toks": ["what", "are", "the", "names", "and", "classes", "of", "the", "ships", "that", "do", "not", "have", "any", "captain", "yet", "?"], "dataset_name": "spider", "guid": 159}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | Show the locations that have more than one railways.", "sql": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1", "example": {"db_id": "railway", "query": "SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "LOCATION", "FROM", "railway", "GROUP", "BY", "LOCATION", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "location", "from", "railway", "group", "by", "location", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the locations that have more than one railways.", "question_toks": ["Show", "the", "locations", "that", "have", "more", "than", "one", "railways", "."], "dataset_name": "spider", "guid": 160}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What are the names of the ships that are not involved in any missions?", "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)", "example": {"db_id": "ship_mission", "query": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)", "query_toks": ["SELECT", "Name", "FROM", "ship", "WHERE", "Ship_ID", "NOT", "IN", "(", "SELECT", "Ship_ID", "FROM", "mission", ")"], "query_toks_no_value": ["select", "name", "from", "ship", "where", "ship_id", "not", "in", "(", "select", "ship_id", "from", "mission", ")"], "question": "What are the names of the ships that are not involved in any missions?", "question_toks": ["What", "are", "the", "names", "of", "the", "ships", "that", "are", "not", "involved", "in", "any", "missions", "?"], "dataset_name": "spider", "guid": 161}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What is the abbreviation of Airline \"JetBlue Airways\"?", "sql": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "example": {"db_id": "flight_2", "query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\"", "query_toks": ["SELECT", "Abbreviation", "FROM", "AIRLINES", "WHERE", "Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "abbreviation", "from", "airlines", "where", "airline", "=", "value"], "question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "question_toks": ["What", "is", "the", "abbreviation", "of", "Airline", "``", "JetBlue", "Airways", "''", "?"], "dataset_name": "spider", "guid": 162}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the number of routes from the United States to Canada.", "sql": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "routes", "WHERE", "dst_apid", "IN", "(", "SELECT", "apid", "FROM", "airports", "WHERE", "country", "=", "'Canada", "'", ")", "AND", "src_apid", "IN", "(", "SELECT", "apid", "FROM", "airports", "WHERE", "country", "=", "'United", "States", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "routes", "where", "dst_apid", "in", "(", "select", "apid", "from", "airports", "where", "country", "=", "value", ")", "and", "src_apid", "in", "(", "select", "apid", "from", "airports", "where", "country", "=", "value", ")"], "question": "Find the number of routes from the United States to Canada.", "question_toks": ["Find", "the", "number", "of", "routes", "from", "the", "United", "States", "to", "Canada", "."], "dataset_name": "spider", "guid": 163}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | What are the distinct types of the companies that have operated any flights with velocity less than 200?", "sql": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200", "example": {"db_id": "flight_company", "query": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200", "query_toks": ["SELECT", "DISTINCT", "T1.type", "FROM", "operate_company", "AS", "T1", "JOIN", "flight", "AS", "t2", "ON", "T1.id", "=", "T2.company_id", "WHERE", "T2.velocity", "<", "200"], "query_toks_no_value": ["select", "distinct", "t1", ".", "type", "from", "operate_company", "as", "t1", "join", "flight", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "company_id", "where", "t2", ".", "velocity", "<", "value"], "question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?", "question_toks": ["What", "are", "the", "distinct", "types", "of", "the", "companies", "that", "have", "operated", "any", "flights", "with", "velocity", "less", "than", "200", "?"], "dataset_name": "spider", "guid": 164}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the country of the airlines whose name starts with 'Orbit'.", "sql": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'", "example": {"db_id": "flight_4", "query": "SELECT country FROM airlines WHERE name LIKE 'Orbit%'", "query_toks": ["SELECT", "country", "FROM", "airlines", "WHERE", "name", "LIKE", "'Orbit", "%", "'"], "query_toks_no_value": ["select", "country", "from", "airlines", "where", "name", "like", "value"], "question": "Find the country of the airlines whose name starts with 'Orbit'.", "question_toks": ["Find", "the", "country", "of", "the", "airlines", "whose", "name", "starts", "with", "'Orbit", "'", "."], "dataset_name": "spider", "guid": 165}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | what is the name and age of the youngest winning pilot?", "sql": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1", "example": {"db_id": "aircraft", "query": "SELECT t1.name ,  t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id  =  t2.winning_pilot ORDER BY t1.age LIMIT 1", "query_toks": ["SELECT", "t1.name", ",", "t1.age", "FROM", "pilot", "AS", "t1", "JOIN", "MATCH", "AS", "t2", "ON", "t1.pilot_id", "=", "t2.winning_pilot", "ORDER", "BY", "t1.age", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "age", "from", "pilot", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "pilot_id", "=", "t2", ".", "winning_pilot", "order", "by", "t1", ".", "age", "limit", "value"], "question": "what is the name and age of the youngest winning pilot?", "question_toks": ["what", "is", "the", "name", "and", "age", "of", "the", "youngest", "winning", "pilot", "?"], "dataset_name": "spider", "guid": 166}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Count the number of flights departing from 'APG'.", "sql": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "WHERE", "SourceAirport", "=", "``", "APG", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "where", "sourceairport", "=", "value"], "question": "Count the number of flights departing from 'APG'.", "question_toks": ["Count", "the", "number", "of", "flights", "departing", "from", "'APG", "'", "."], "dataset_name": "spider", "guid": 167}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | What are the positions and teams of pilots?", "sql": "SELECT POSITION ,  Team FROM pilot", "example": {"db_id": "pilot_record", "query": "SELECT POSITION ,  Team FROM pilot", "query_toks": ["SELECT", "POSITION", ",", "Team", "FROM", "pilot"], "query_toks_no_value": ["select", "position", ",", "team", "from", "pilot"], "question": "What are the positions and teams of pilots?", "question_toks": ["What", "are", "the", "positions", "and", "teams", "of", "pilots", "?"], "dataset_name": "spider", "guid": 168}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the names of all the aircrafts associated with London Gatwick airport?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "example": {"db_id": "aircraft", "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "query_toks": ["SELECT", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "airport_aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "airport", "AS", "T3", "ON", "T2.Airport_ID", "=", "T3.Airport_ID", "WHERE", "T3.Airport_Name", "=", "``", "London", "Gatwick", "''"], "query_toks_no_value": ["select", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "airport_aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "airport", "as", "t3", "on", "t2", ".", "airport_id", "=", "t3", ".", "airport_id", "where", "t3", ".", "airport_name", "=", "value"], "question": "What are the names of all the aircrafts associated with London Gatwick airport?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "aircrafts", "associated", "with", "London", "Gatwick", "airport", "?"], "dataset_name": "spider", "guid": 169}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | How many railways are there?", "sql": "SELECT count(*) FROM railway", "example": {"db_id": "railway", "query": "SELECT count(*) FROM railway", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "railway"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "railway"], "question": "How many railways are there?", "question_toks": ["How", "many", "railways", "are", "there", "?"], "dataset_name": "spider", "guid": 170}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | Show the names of pilots and the number of records they have.", "sql": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name", "example": {"db_id": "pilot_record", "query": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name", "query_toks": ["SELECT", "T2.Pilot_name", ",", "COUNT", "(", "*", ")", "FROM", "pilot_record", "AS", "T1", "JOIN", "pilot", "AS", "T2", "ON", "T1.pilot_ID", "=", "T2.pilot_ID", "GROUP", "BY", "T2.Pilot_name"], "query_toks_no_value": ["select", "t2", ".", "pilot_name", ",", "count", "(", "*", ")", "from", "pilot_record", "as", "t1", "join", "pilot", "as", "t2", "on", "t1", ".", "pilot_id", "=", "t2", ".", "pilot_id", "group", "by", "t2", ".", "pilot_name"], "question": "Show the names of pilots and the number of records they have.", "question_toks": ["Show", "the", "names", "of", "pilots", "and", "the", "number", "of", "records", "they", "have", "."], "dataset_name": "spider", "guid": 171}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "example": {"db_id": "aircraft", "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Heathrow\" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T3.Airport_Name  =  \"London Gatwick\"", "query_toks": ["SELECT", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "airport_aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "airport", "AS", "T3", "ON", "T2.Airport_ID", "=", "T3.Airport_ID", "WHERE", "T3.Airport_Name", "=", "``", "London", "Heathrow", "''", "INTERSECT", "SELECT", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "airport_aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "airport", "AS", "T3", "ON", "T2.Airport_ID", "=", "T3.Airport_ID", "WHERE", "T3.Airport_Name", "=", "``", "London", "Gatwick", "''"], "query_toks_no_value": ["select", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "airport_aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "airport", "as", "t3", "on", "t2", ".", "airport_id", "=", "t3", ".", "airport_id", "where", "t3", ".", "airport_name", "=", "value", "intersect", "select", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "airport_aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "airport", "as", "t3", "on", "t2", ".", "airport_id", "=", "t3", ".", "airport_id", "where", "t3", ".", "airport_name", "=", "value"], "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"", "question_toks": ["Show", "the", "names", "of", "aircrafts", "that", "are", "associated", "with", "both", "an", "airport", "named", "``", "London", "Heathrow", "''", "and", "an", "airport", "named", "``", "London", "Gatwick", "''"], "dataset_name": "spider", "guid": 172}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the numbers of all flights that can cover a distance of more than 2000?", "sql": "SELECT flno FROM Flight WHERE distance  >  2000", "example": {"db_id": "flight_1", "query": "SELECT flno FROM Flight WHERE distance  >  2000", "query_toks": ["SELECT", "flno", "FROM", "Flight", "WHERE", "distance", ">", "2000"], "query_toks_no_value": ["select", "flno", "from", "flight", "where", "distance", ">", "value"], "question": "What are the numbers of all flights that can cover a distance of more than 2000?", "question_toks": ["What", "are", "the", "numbers", "of", "all", "flights", "that", "can", "cover", "a", "distance", "of", "more", "than", "2000", "?"], "dataset_name": "spider", "guid": 173}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | List the names of aircrafts and the number of times it won matches.", "sql": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft", "example": {"db_id": "aircraft", "query": "SELECT T1.Aircraft ,  COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft", "query_toks": ["SELECT", "T1.Aircraft", ",", "COUNT", "(", "*", ")", "FROM", "aircraft", "AS", "T1", "JOIN", "MATCH", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Winning_Aircraft", "GROUP", "BY", "T2.Winning_Aircraft"], "query_toks_no_value": ["select", "t1", ".", "aircraft", ",", "count", "(", "*", ")", "from", "aircraft", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "winning_aircraft", "group", "by", "t2", ".", "winning_aircraft"], "question": "List the names of aircrafts and the number of times it won matches.", "question_toks": ["List", "the", "names", "of", "aircrafts", "and", "the", "number", "of", "times", "it", "won", "matches", "."], "dataset_name": "spider", "guid": 174}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What is the name of the aircraft that has won an award the most?", "sql": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "aircraft", "query": "SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "MATCH", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Winning_Aircraft", "GROUP", "BY", "T2.Winning_Aircraft", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "winning_aircraft", "group", "by", "t2", ".", "winning_aircraft", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the aircraft that has won an award the most?", "question_toks": ["What", "is", "the", "name", "of", "the", "aircraft", "that", "has", "won", "an", "award", "the", "most", "?"], "dataset_name": "spider", "guid": 175}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | What is the name of the ship with the largest tonnage?", "sql": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1", "example": {"db_id": "ship_mission", "query": "SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "ship", "ORDER", "BY", "Tonnage", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "ship", "order", "by", "tonnage", "desc", "limit", "value"], "question": "What is the name of the ship with the largest tonnage?", "question_toks": ["What", "is", "the", "name", "of", "the", "ship", "with", "the", "largest", "tonnage", "?"], "dataset_name": "spider", "guid": 176}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the origins of all flights that are headed to Honolulu?", "sql": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"", "example": {"db_id": "flight_1", "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"", "query_toks": ["SELECT", "origin", "FROM", "Flight", "WHERE", "destination", "=", "``", "Honolulu", "''"], "query_toks_no_value": ["select", "origin", "from", "flight", "where", "destination", "=", "value"], "question": "What are the origins of all flights that are headed to Honolulu?", "question_toks": ["What", "are", "the", "origins", "of", "all", "flights", "that", "are", "headed", "to", "Honolulu", "?"], "dataset_name": "spider", "guid": 177}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Return the average and minimum age of captains in each class.", "sql": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS", "example": {"db_id": "ship_1", "query": "SELECT avg(age) ,  min(age) ,  CLASS FROM captain GROUP BY CLASS", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "CLASS", "FROM", "captain", "GROUP", "BY", "CLASS"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "class", "from", "captain", "group", "by", "class"], "question": "Return the average and minimum age of captains in each class.", "question_toks": ["Return", "the", "average", "and", "minimum", "age", "of", "captains", "in", "each", "class", "."], "dataset_name": "spider", "guid": 178}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many flights does airline 'JetBlue Airways' have?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRLINES", "AS", "T2", "ON", "T1.Airline", "=", "T2.uid", "WHERE", "T2.Airline", "=", "``", "JetBlue", "Airways", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1", ".", "airline", "=", "t2", ".", "uid", "where", "t2", ".", "airline", "=", "value"], "question": "How many flights does airline 'JetBlue Airways' have?", "question_toks": ["How", "many", "flights", "does", "airline", "'JetBlue", "Airways", "'", "have", "?"], "dataset_name": "spider", "guid": 179}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the maximum and minimum number of transit passengers of all aiports.", "sql": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport", "example": {"db_id": "aircraft", "query": "SELECT max(Transit_Passengers) ,  min(Transit_Passengers) FROM airport", "query_toks": ["SELECT", "max", "(", "Transit_Passengers", ")", ",", "min", "(", "Transit_Passengers", ")", "FROM", "airport"], "query_toks_no_value": ["select", "max", "(", "transit_passengers", ")", ",", "min", "(", "transit_passengers", ")", "from", "airport"], "question": "What are the maximum and minimum number of transit passengers of all aiports.", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "number", "of", "transit", "passengers", "of", "all", "aiports", "."], "dataset_name": "spider", "guid": 180}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | Show different builders of railways, along with the corresponding number of railways using each builder.", "sql": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder", "example": {"db_id": "railway", "query": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder", "query_toks": ["SELECT", "Builder", ",", "COUNT", "(", "*", ")", "FROM", "railway", "GROUP", "BY", "Builder"], "query_toks_no_value": ["select", "builder", ",", "count", "(", "*", ")", "from", "railway", "group", "by", "builder"], "question": "Show different builders of railways, along with the corresponding number of railways using each builder.", "question_toks": ["Show", "different", "builders", "of", "railways", ",", "along", "with", "the", "corresponding", "number", "of", "railways", "using", "each", "builder", "."], "dataset_name": "spider", "guid": 181}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Return the cities with more than 3 airports in the United States.", "sql": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3", "example": {"db_id": "flight_4", "query": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3", "query_toks": ["SELECT", "city", "FROM", "airports", "WHERE", "country", "=", "'United", "States", "'", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "city", "from", "airports", "where", "country", "=", "value", "group", "by", "city", "having", "count", "(", "*", ")", ">", "value"], "question": "Return the cities with more than 3 airports in the United States.", "question_toks": ["Return", "the", "cities", "with", "more", "than", "3", "airports", "in", "the", "United", "States", "."], "dataset_name": "spider", "guid": 182}}
{"text": "airport: id, City, Country, IATA, ICAO, name; operate_company: id, name, Type, Principal_activities, Incorporated_in, Group_Equity_Shareholding; flight: id, Vehicle_Flight_number, Date, Pilot, Velocity, Altitude, airport_id, company_id | What is maximum group equity shareholding of the companies?", "sql": "SELECT max(group_equity_shareholding) FROM operate_company", "example": {"db_id": "flight_company", "query": "SELECT max(group_equity_shareholding) FROM operate_company", "query_toks": ["SELECT", "max", "(", "group_equity_shareholding", ")", "FROM", "operate_company"], "query_toks_no_value": ["select", "max", "(", "group_equity_shareholding", ")", "from", "operate_company"], "question": "What is maximum group equity shareholding of the companies?", "question_toks": ["What", "is", "maximum", "group", "equity", "shareholding", "of", "the", "companies", "?"], "dataset_name": "spider", "guid": 183}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is average and maximum salary of all employees.", "sql": "SELECT avg(salary) ,  max(salary) FROM Employee", "example": {"db_id": "flight_1", "query": "SELECT avg(salary) ,  max(salary) FROM Employee", "query_toks": ["SELECT", "avg", "(", "salary", ")", ",", "max", "(", "salary", ")", "FROM", "Employee"], "query_toks_no_value": ["select", "avg", "(", "salary", ")", ",", "max", "(", "salary", ")", "from", "employee"], "question": "What is average and maximum salary of all employees.", "question_toks": ["What", "is", "average", "and", "maximum", "salary", "of", "all", "employees", "."], "dataset_name": "spider", "guid": 184}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the number of different airports which are the destinations of the American Airlines.", "sql": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "example": {"db_id": "flight_4", "query": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dst_apid", ")", "FROM", "airlines", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.alid", "=", "T2.alid", "WHERE", "T1.name", "=", "'American", "Airlines", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "dst_apid", ")", "from", "airlines", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "alid", "=", "t2", ".", "alid", "where", "t1", ".", "name", "=", "value"], "question": "Find the number of different airports which are the destinations of the American Airlines.", "question_toks": ["Find", "the", "number", "of", "different", "airports", "which", "are", "the", "destinations", "of", "the", "American", "Airlines", "."], "dataset_name": "spider", "guid": 185}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.", "sql": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "example": {"db_id": "flight_1", "query": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "query_toks": ["SELECT", "departure_date", ",", "arrival_date", "FROM", "Flight", "WHERE", "origin", "=", "``", "Los", "Angeles", "''", "AND", "destination", "=", "``", "Honolulu", "''"], "query_toks_no_value": ["select", "departure_date", ",", "arrival_date", "from", "flight", "where", "origin", "=", "value", "and", "destination", "=", "value"], "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.", "question_toks": ["Show", "me", "the", "departure", "date", "and", "arrival", "date", "for", "all", "flights", "from", "Los", "Angeles", "to", "Honolulu", "."], "dataset_name": "spider", "guid": 186}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Find all airlines that have flights from both airports 'APG' and 'CVO'.", "sql": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "example": {"db_id": "flight_2", "query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\"", "query_toks": ["SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "APG", "''", "INTERSECT", "SELECT", "T1.Airline", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T1.uid", "=", "T2.Airline", "WHERE", "T2.SourceAirport", "=", "``", "CVO", "''"], "query_toks_no_value": ["select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value", "intersect", "select", "t1", ".", "airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "airline", "where", "t2", ".", "sourceairport", "=", "value"], "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "question_toks": ["Find", "all", "airlines", "that", "have", "flights", "from", "both", "airports", "'APG", "'", "and", "'CVO", "'", "."], "dataset_name": "spider", "guid": 187}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Return the number of  airports.", "sql": "SELECT count(*) FROM AIRPORTS", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM AIRPORTS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRPORTS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airports"], "question": "Return the number of  airports.", "question_toks": ["Return", "the", "number", "of", "airports", "."], "dataset_name": "spider", "guid": 188}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the name of the aircraft that was on flight number 99?", "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99", "example": {"db_id": "flight_1", "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99", "query_toks": ["SELECT", "T2.name", "FROM", "Flight", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T1.aid", "=", "T2.aid", "WHERE", "T1.flno", "=", "99"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "flight", "as", "t1", "join", "aircraft", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "flno", "=", "value"], "question": "What is the name of the aircraft that was on flight number 99?", "question_toks": ["What", "is", "the", "name", "of", "the", "aircraft", "that", "was", "on", "flight", "number", "99", "?"], "dataset_name": "spider", "guid": 189}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Count the number of captains younger than 50 of each rank.", "sql": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank", "example": {"db_id": "ship_1", "query": "SELECT count(*) ,  rank FROM captain WHERE age  <  50 GROUP BY rank", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "rank", "FROM", "captain", "WHERE", "age", "<", "50", "GROUP", "BY", "rank"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "rank", "from", "captain", "where", "age", "<", "value", "group", "by", "rank"], "question": "Count the number of captains younger than 50 of each rank.", "question_toks": ["Count", "the", "number", "of", "captains", "younger", "than", "50", "of", "each", "rank", "."], "dataset_name": "spider", "guid": 190}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | For each type, how many ships are there?", "sql": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE", "example": {"db_id": "ship_mission", "query": "SELECT TYPE ,  COUNT(*) FROM ship GROUP BY TYPE", "query_toks": ["SELECT", "TYPE", ",", "COUNT", "(", "*", ")", "FROM", "ship", "GROUP", "BY", "TYPE"], "query_toks_no_value": ["select", "type", ",", "count", "(", "*", ")", "from", "ship", "group", "by", "type"], "question": "For each type, how many ships are there?", "question_toks": ["For", "each", "type", ",", "how", "many", "ships", "are", "there", "?"], "dataset_name": "spider", "guid": 191}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show the name of aircrafts with top three lowest distances.", "sql": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "example": {"db_id": "flight_1", "query": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3", "query_toks": ["SELECT", "name", "FROM", "Aircraft", "ORDER", "BY", "distance", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "aircraft", "order", "by", "distance", "limit", "value"], "question": "Show the name of aircrafts with top three lowest distances.", "question_toks": ["Show", "the", "name", "of", "aircrafts", "with", "top", "three", "lowest", "distances", "."], "dataset_name": "spider", "guid": 192}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What are the names of ships, ordered by year they were built and their class?", "sql": "SELECT name FROM ship ORDER BY built_year ,  CLASS", "example": {"db_id": "ship_1", "query": "SELECT name FROM ship ORDER BY built_year ,  CLASS", "query_toks": ["SELECT", "name", "FROM", "ship", "ORDER", "BY", "built_year", ",", "CLASS"], "query_toks_no_value": ["select", "name", "from", "ship", "order", "by", "built_year", ",", "class"], "question": "What are the names of ships, ordered by year they were built and their class?", "question_toks": ["What", "are", "the", "names", "of", "ships", ",", "ordered", "by", "year", "they", "were", "built", "and", "their", "class", "?"], "dataset_name": "spider", "guid": 193}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show origin and destination for flights with price higher than 300.", "sql": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "example": {"db_id": "flight_1", "query": "SELECT origin ,  destination FROM Flight WHERE price  >  300", "query_toks": ["SELECT", "origin", ",", "destination", "FROM", "Flight", "WHERE", "price", ">", "300"], "query_toks_no_value": ["select", "origin", ",", "destination", "from", "flight", "where", "price", ">", "value"], "question": "Show origin and destination for flights with price higher than 300.", "question_toks": ["Show", "origin", "and", "destination", "for", "flights", "with", "price", "higher", "than", "300", "."], "dataset_name": "spider", "guid": 194}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Find the captain rank that has no captain in Third-rate ship of the line class.", "sql": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'", "example": {"db_id": "ship_1", "query": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'", "query_toks": ["SELECT", "rank", "FROM", "captain", "EXCEPT", "SELECT", "rank", "FROM", "captain", "WHERE", "CLASS", "=", "'Third-rate", "ship", "of", "the", "line", "'"], "query_toks_no_value": ["select", "rank", "from", "captain", "except", "select", "rank", "from", "captain", "where", "class", "=", "value"], "question": "Find the captain rank that has no captain in Third-rate ship of the line class.", "question_toks": ["Find", "the", "captain", "rank", "that", "has", "no", "captain", "in", "Third-rate", "ship", "of", "the", "line", "class", "."], "dataset_name": "spider", "guid": 195}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the name, city, and country of the airport with the highest elevation?", "sql": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT name ,  city ,  country FROM airports ORDER BY elevation DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "city", ",", "country", "FROM", "airports", "ORDER", "BY", "elevation", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "city", ",", "country", "from", "airports", "order", "by", "elevation", "desc", "limit", "value"], "question": "What is the name, city, and country of the airport with the highest elevation?", "question_toks": ["What", "is", "the", "name", ",", "city", ",", "and", "country", "of", "the", "airport", "with", "the", "highest", "elevation", "?"], "dataset_name": "spider", "guid": 196}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the name and salary of all employees in order of salary?", "sql": "SELECT name ,  salary FROM Employee ORDER BY salary", "example": {"db_id": "flight_1", "query": "SELECT name ,  salary FROM Employee ORDER BY salary", "query_toks": ["SELECT", "name", ",", "salary", "FROM", "Employee", "ORDER", "BY", "salary"], "query_toks_no_value": ["select", "name", ",", "salary", "from", "employee", "order", "by", "salary"], "question": "What is the name and salary of all employees in order of salary?", "question_toks": ["What", "is", "the", "name", "and", "salary", "of", "all", "employees", "in", "order", "of", "salary", "?"], "dataset_name": "spider", "guid": 197}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | For each origin, how many flights came from there?", "sql": "SELECT origin ,  count(*) FROM Flight GROUP BY origin", "example": {"db_id": "flight_1", "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin", "query_toks": ["SELECT", "origin", ",", "count", "(", "*", ")", "FROM", "Flight", "GROUP", "BY", "origin"], "query_toks_no_value": ["select", "origin", ",", "count", "(", "*", ")", "from", "flight", "group", "by", "origin"], "question": "For each origin, how many flights came from there?", "question_toks": ["For", "each", "origin", ",", "how", "many", "flights", "came", "from", "there", "?"], "dataset_name": "spider", "guid": 198}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show all flight numbers with aircraft Airbus A340-300.", "sql": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"", "example": {"db_id": "flight_1", "query": "SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T2.name  =  \"Airbus A340-300\"", "query_toks": ["SELECT", "T1.flno", "FROM", "Flight", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T1.aid", "=", "T2.aid", "WHERE", "T2.name", "=", "``", "Airbus", "A340-300", "''"], "query_toks_no_value": ["select", "t1", ".", "flno", "from", "flight", "as", "t1", "join", "aircraft", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "aid", "where", "t2", ".", "name", "=", "value"], "question": "Show all flight numbers with aircraft Airbus A340-300.", "question_toks": ["Show", "all", "flight", "numbers", "with", "aircraft", "Airbus", "A340-300", "."], "dataset_name": "spider", "guid": 199}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"", "example": {"db_id": "flight_1", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Airbus A340-300\"", "query_toks": ["SELECT", "T1.name", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "JOIN", "Aircraft", "AS", "T3", "ON", "T3.aid", "=", "T2.aid", "WHERE", "T3.name", "=", "``", "Boeing", "737-800", "''", "INTERSECT", "SELECT", "T1.name", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "JOIN", "Aircraft", "AS", "T3", "ON", "T3.aid", "=", "T2.aid", "WHERE", "T3.name", "=", "``", "Airbus", "A340-300", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "join", "aircraft", "as", "t3", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t3", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "join", "aircraft", "as", "t3", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t3", ".", "name", "=", "value"], "question": "What are the names of all employees who can fly both the Boeing 737-800 and the Airbus A340-300?", "question_toks": ["What", "are", "the", "names", "of", "all", "employees", "who", "can", "fly", "both", "the", "Boeing", "737-800", "and", "the", "Airbus", "A340-300", "?"], "dataset_name": "spider", "guid": 200}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | How many aircrafts exist in the database?", "sql": "SELECT count(*) FROM Aircraft", "example": {"db_id": "flight_1", "query": "SELECT count(*) FROM Aircraft", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Aircraft"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "aircraft"], "question": "How many aircrafts exist in the database?", "question_toks": ["How", "many", "aircrafts", "exist", "in", "the", "database", "?"], "dataset_name": "spider", "guid": 201}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Return the minimum, average and maximum distances traveled across all aircrafts.", "sql": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft", "example": {"db_id": "flight_1", "query": "SELECT min(distance) ,  avg(distance) ,  max(distance) FROM Aircraft", "query_toks": ["SELECT", "min", "(", "distance", ")", ",", "avg", "(", "distance", ")", ",", "max", "(", "distance", ")", "FROM", "Aircraft"], "query_toks_no_value": ["select", "min", "(", "distance", ")", ",", "avg", "(", "distance", ")", ",", "max", "(", "distance", ")", "from", "aircraft"], "question": "Return the minimum, average and maximum distances traveled across all aircrafts.", "question_toks": ["Return", "the", "minimum", ",", "average", "and", "maximum", "distances", "traveled", "across", "all", "aircrafts", "."], "dataset_name": "spider", "guid": 202}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Find the name of the ships that have more than one captain.", "sql": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1", "example": {"db_id": "ship_1", "query": "SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id  =  t2.ship_id GROUP BY t2.ship_id HAVING count(*)  >  1", "query_toks": ["SELECT", "t1.name", "FROM", "ship", "AS", "t1", "JOIN", "captain", "AS", "t2", "ON", "t1.ship_id", "=", "t2.ship_id", "GROUP", "BY", "t2.ship_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "ship", "as", "t1", "join", "captain", "as", "t2", "on", "t1", ".", "ship_id", "=", "t2", ".", "ship_id", "group", "by", "t2", ".", "ship_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of the ships that have more than one captain.", "question_toks": ["Find", "the", "name", "of", "the", "ships", "that", "have", "more", "than", "one", "captain", "."], "dataset_name": "spider", "guid": 203}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the names of all employees who have a certificate to fly Boeing 737-800?", "sql": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "example": {"db_id": "flight_1", "query": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "query_toks": ["SELECT", "T1.name", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "JOIN", "Aircraft", "AS", "T3", "ON", "T3.aid", "=", "T2.aid", "WHERE", "T3.name", "=", "``", "Boeing", "737-800", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "join", "aircraft", "as", "t3", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t3", ".", "name", "=", "value"], "question": "What are the names of all employees who have a certificate to fly Boeing 737-800?", "question_toks": ["What", "are", "the", "names", "of", "all", "employees", "who", "have", "a", "certificate", "to", "fly", "Boeing", "737-800", "?"], "dataset_name": "spider", "guid": 204}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.", "sql": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25", "example": {"db_id": "train_station", "query": "SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms  >=  15 AND total_passengers  >  25", "query_toks": ["SELECT", "DISTINCT", "LOCATION", "FROM", "station", "WHERE", "number_of_platforms", ">", "=", "15", "AND", "total_passengers", ">", "25"], "query_toks_no_value": ["select", "distinct", "location", "from", "station", "where", "number_of_platforms", ">", "=", "value", "and", "total_passengers", ">", "value"], "question": "Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.", "question_toks": ["Show", "all", "locations", "that", "have", "train", "stations", "with", "at", "least", "15", "platforms", "and", "train", "stations", "with", "more", "than", "25", "total", "passengers", "."], "dataset_name": "spider", "guid": 205}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the country of the airport with the highest elevation?", "sql": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT country FROM airports ORDER BY elevation DESC LIMIT 1", "query_toks": ["SELECT", "country", "FROM", "airports", "ORDER", "BY", "elevation", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "airports", "order", "by", "elevation", "desc", "limit", "value"], "question": "What is the country of the airport with the highest elevation?", "question_toks": ["What", "is", "the", "country", "of", "the", "airport", "with", "the", "highest", "elevation", "?"], "dataset_name": "spider", "guid": 206}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | List the name of ships that are not involved in any mission", "sql": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)", "example": {"db_id": "ship_mission", "query": "SELECT Name FROM ship WHERE Ship_ID NOT IN (SELECT Ship_ID FROM mission)", "query_toks": ["SELECT", "Name", "FROM", "ship", "WHERE", "Ship_ID", "NOT", "IN", "(", "SELECT", "Ship_ID", "FROM", "mission", ")"], "query_toks_no_value": ["select", "name", "from", "ship", "where", "ship_id", "not", "in", "(", "select", "ship_id", "from", "mission", ")"], "question": "List the name of ships that are not involved in any mission", "question_toks": ["List", "the", "name", "of", "ships", "that", "are", "not", "involved", "in", "any", "mission"], "dataset_name": "spider", "guid": 207}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | List the distinct positions of pilots older than 30.", "sql": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30", "example": {"db_id": "pilot_record", "query": "SELECT DISTINCT POSITION FROM pilot WHERE Age  >  30", "query_toks": ["SELECT", "DISTINCT", "POSITION", "FROM", "pilot", "WHERE", "Age", ">", "30"], "query_toks_no_value": ["select", "distinct", "position", "from", "pilot", "where", "age", ">", "value"], "question": "List the distinct positions of pilots older than 30.", "question_toks": ["List", "the", "distinct", "positions", "of", "pilots", "older", "than", "30", "."], "dataset_name": "spider", "guid": 208}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the names of the top 10 airlines that operate the most number of routes.", "sql": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10", "example": {"db_id": "flight_4", "query": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10", "query_toks": ["SELECT", "T1.name", ",", "T2.alid", "FROM", "airlines", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.alid", "=", "T2.alid", "GROUP", "BY", "T2.alid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "10"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "alid", "from", "airlines", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "alid", "=", "t2", ".", "alid", "group", "by", "t2", ".", "alid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the names of the top 10 airlines that operate the most number of routes.", "question_toks": ["Find", "the", "names", "of", "the", "top", "10", "airlines", "that", "operate", "the", "most", "number", "of", "routes", "."], "dataset_name": "spider", "guid": 209}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | List the description of all aircrafts.", "sql": "SELECT Description FROM aircraft", "example": {"db_id": "aircraft", "query": "SELECT Description FROM aircraft", "query_toks": ["SELECT", "Description", "FROM", "aircraft"], "query_toks_no_value": ["select", "description", "from", "aircraft"], "question": "List the description of all aircrafts.", "question_toks": ["List", "the", "description", "of", "all", "aircrafts", "."], "dataset_name": "spider", "guid": 210}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show the flight number of flights with three lowest distances.", "sql": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "example": {"db_id": "flight_1", "query": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3", "query_toks": ["SELECT", "flno", "FROM", "Flight", "ORDER", "BY", "distance", "ASC", "LIMIT", "3"], "query_toks_no_value": ["select", "flno", "from", "flight", "order", "by", "distance", "asc", "limit", "value"], "question": "Show the flight number of flights with three lowest distances.", "question_toks": ["Show", "the", "flight", "number", "of", "flights", "with", "three", "lowest", "distances", "."], "dataset_name": "spider", "guid": 211}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Return the number of United Airlines flights leaving from AHD Airport.", "sql": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "AIRLINES", "AS", "T1", "JOIN", "FLIGHTS", "AS", "T2", "ON", "T2.Airline", "=", "T1.uid", "WHERE", "T1.Airline", "=", "``", "United", "Airlines", "''", "AND", "T2.SourceAirport", "=", "``", "AHD", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2", ".", "airline", "=", "t1", ".", "uid", "where", "t1", ".", "airline", "=", "value", "and", "t2", ".", "sourceairport", "=", "value"], "question": "Return the number of United Airlines flights leaving from AHD Airport.", "question_toks": ["Return", "the", "number", "of", "United", "Airlines", "flights", "leaving", "from", "AHD", "Airport", "."], "dataset_name": "spider", "guid": 212}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show names for all employees who do not have certificate of Boeing 737-800.", "sql": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "example": {"db_id": "flight_1", "query": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"", "query_toks": ["SELECT", "name", "FROM", "Employee", "EXCEPT", "SELECT", "T1.name", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "JOIN", "Aircraft", "AS", "T3", "ON", "T3.aid", "=", "T2.aid", "WHERE", "T3.name", "=", "``", "Boeing", "737-800", "''"], "query_toks_no_value": ["select", "name", "from", "employee", "except", "select", "t1", ".", "name", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "join", "aircraft", "as", "t3", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t3", ".", "name", "=", "value"], "question": "Show names for all employees who do not have certificate of Boeing 737-800.", "question_toks": ["Show", "names", "for", "all", "employees", "who", "do", "not", "have", "certificate", "of", "Boeing", "737-800", "."], "dataset_name": "spider", "guid": 213}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | what are the names of the ships ordered by ascending tonnage?", "sql": "SELECT Name FROM ship ORDER BY Tonnage ASC", "example": {"db_id": "ship_mission", "query": "SELECT Name FROM ship ORDER BY Tonnage ASC", "query_toks": ["SELECT", "Name", "FROM", "ship", "ORDER", "BY", "Tonnage", "ASC"], "query_toks_no_value": ["select", "name", "from", "ship", "order", "by", "tonnage", "asc"], "question": "what are the names of the ships ordered by ascending tonnage?", "question_toks": ["what", "are", "the", "names", "of", "the", "ships", "ordered", "by", "ascending", "tonnage", "?"], "dataset_name": "spider", "guid": 214}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | what is the name of every pilot who is at least 25 years old?", "sql": "SELECT Name FROM pilot WHERE Age  >=  25", "example": {"db_id": "aircraft", "query": "SELECT Name FROM pilot WHERE Age  >=  25", "query_toks": ["SELECT", "Name", "FROM", "pilot", "WHERE", "Age", ">", "=", "25"], "query_toks_no_value": ["select", "name", "from", "pilot", "where", "age", ">", "=", "value"], "question": "what is the name of every pilot who is at least 25 years old?", "question_toks": ["what", "is", "the", "name", "of", "every", "pilot", "who", "is", "at", "least", "25", "years", "old", "?"], "dataset_name": "spider", "guid": 215}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Return the names and classes of ships that do not have a captain?", "sql": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)", "example": {"db_id": "ship_1", "query": "SELECT name ,  CLASS FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain)", "query_toks": ["SELECT", "name", ",", "CLASS", "FROM", "ship", "WHERE", "ship_id", "NOT", "IN", "(", "SELECT", "ship_id", "FROM", "captain", ")"], "query_toks_no_value": ["select", "name", ",", "class", "from", "ship", "where", "ship_id", "not", "in", "(", "select", "ship_id", "from", "captain", ")"], "question": "Return the names and classes of ships that do not have a captain?", "question_toks": ["Return", "the", "names", "and", "classes", "of", "ships", "that", "do", "not", "have", "a", "captain", "?"], "dataset_name": "spider", "guid": 216}}
{"text": "mission: Mission_ID, Ship_ID, Code, Launched_Year, Location, Speed_knots, Fate; ship: Ship_ID, Name, Type, Nationality, Tonnage | For each type, what is the average tonnage?", "sql": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE", "example": {"db_id": "ship_mission", "query": "SELECT TYPE ,  avg(Tonnage) FROM ship GROUP BY TYPE", "query_toks": ["SELECT", "TYPE", ",", "avg", "(", "Tonnage", ")", "FROM", "ship", "GROUP", "BY", "TYPE"], "query_toks_no_value": ["select", "type", ",", "avg", "(", "tonnage", ")", "from", "ship", "group", "by", "type"], "question": "For each type, what is the average tonnage?", "question_toks": ["For", "each", "type", ",", "what", "is", "the", "average", "tonnage", "?"], "dataset_name": "spider", "guid": 217}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | Give the flight numbers of flights arriving in Aberdeen.", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "example": {"db_id": "flight_2", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "T1.FlightNo", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "t1", ".", "flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "Give the flight numbers of flights arriving in Aberdeen.", "question_toks": ["Give", "the", "flight", "numbers", "of", "flights", "arriving", "in", "Aberdeen", "."], "dataset_name": "spider", "guid": 218}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | How many aircrafts are there?", "sql": "SELECT count(*) FROM aircraft", "example": {"db_id": "aircraft", "query": "SELECT count(*) FROM aircraft", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "aircraft"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "aircraft"], "question": "How many aircrafts are there?", "question_toks": ["How", "many", "aircrafts", "are", "there", "?"], "dataset_name": "spider", "guid": 219}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.", "sql": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank", "example": {"db_id": "pilot_record", "query": "SELECT T3.Pilot_name ,  T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID  =  T3.Pilot_ID ORDER BY T3.Rank", "query_toks": ["SELECT", "T3.Pilot_name", ",", "T2.Fleet_Series", "FROM", "pilot_record", "AS", "T1", "JOIN", "aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "pilot", "AS", "T3", "ON", "T1.Pilot_ID", "=", "T3.Pilot_ID", "ORDER", "BY", "T3.Rank"], "query_toks_no_value": ["select", "t3", ".", "pilot_name", ",", "t2", ".", "fleet_series", "from", "pilot_record", "as", "t1", "join", "aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "pilot", "as", "t3", "on", "t1", ".", "pilot_id", "=", "t3", ".", "pilot_id", "order", "by", "t3", ".", "rank"], "question": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.", "question_toks": ["Show", "the", "names", "of", "pilots", "and", "fleet", "series", "of", "the", "aircrafts", "they", "have", "flied", "with", "in", "ascending", "order", "of", "the", "rank", "of", "the", "pilot", "."], "dataset_name": "spider", "guid": 220}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Count the number of ships.", "sql": "SELECT count(*) FROM ship", "example": {"db_id": "ship_1", "query": "SELECT count(*) FROM ship", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ship"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ship"], "question": "Count the number of ships.", "question_toks": ["Count", "the", "number", "of", "ships", "."], "dataset_name": "spider", "guid": 221}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show the flight number and distance of the flight with maximum price.", "sql": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1", "query_toks": ["SELECT", "flno", ",", "distance", "FROM", "Flight", "ORDER", "BY", "price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "flno", ",", "distance", "from", "flight", "order", "by", "price", "desc", "limit", "value"], "question": "Show the flight number and distance of the flight with maximum price.", "question_toks": ["Show", "the", "flight", "number", "and", "distance", "of", "the", "flight", "with", "maximum", "price", "."], "dataset_name": "spider", "guid": 222}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show all origins and the number of flights from each origin.", "sql": "SELECT origin ,  count(*) FROM Flight GROUP BY origin", "example": {"db_id": "flight_1", "query": "SELECT origin ,  count(*) FROM Flight GROUP BY origin", "query_toks": ["SELECT", "origin", ",", "count", "(", "*", ")", "FROM", "Flight", "GROUP", "BY", "origin"], "query_toks_no_value": ["select", "origin", ",", "count", "(", "*", ")", "from", "flight", "group", "by", "origin"], "question": "Show all origins and the number of flights from each origin.", "question_toks": ["Show", "all", "origins", "and", "the", "number", "of", "flights", "from", "each", "origin", "."], "dataset_name": "spider", "guid": 223}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | What are the ranks of captains that are both in the Cutter and Armed schooner classes?", "sql": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'", "example": {"db_id": "ship_1", "query": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'", "query_toks": ["SELECT", "rank", "FROM", "captain", "WHERE", "CLASS", "=", "'Cutter", "'", "INTERSECT", "SELECT", "rank", "FROM", "captain", "WHERE", "CLASS", "=", "'Armed", "schooner", "'"], "query_toks_no_value": ["select", "rank", "from", "captain", "where", "class", "=", "value", "intersect", "select", "rank", "from", "captain", "where", "class", "=", "value"], "question": "What are the ranks of captains that are both in the Cutter and Armed schooner classes?", "question_toks": ["What", "are", "the", "ranks", "of", "captains", "that", "are", "both", "in", "the", "Cutter", "and", "Armed", "schooner", "classes", "?"], "dataset_name": "spider", "guid": 224}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show station names without any trains.", "sql": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)", "example": {"db_id": "train_station", "query": "SELECT name FROM station WHERE station_id NOT IN (SELECT station_id FROM train_station)", "query_toks": ["SELECT", "name", "FROM", "station", "WHERE", "station_id", "NOT", "IN", "(", "SELECT", "station_id", "FROM", "train_station", ")"], "query_toks_no_value": ["select", "name", "from", "station", "where", "station_id", "not", "in", "(", "select", "station_id", "from", "train_station", ")"], "question": "Show station names without any trains.", "question_toks": ["Show", "station", "names", "without", "any", "trains", "."], "dataset_name": "spider", "guid": 225}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | List names of all pilot aged 30 or younger in descending alphabetical order.", "sql": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC", "example": {"db_id": "aircraft", "query": "SELECT Name FROM pilot WHERE Age  <=  30 ORDER BY Name DESC", "query_toks": ["SELECT", "Name", "FROM", "pilot", "WHERE", "Age", "<", "=", "30", "ORDER", "BY", "Name", "DESC"], "query_toks_no_value": ["select", "name", "from", "pilot", "where", "age", "<", "=", "value", "order", "by", "name", "desc"], "question": "List names of all pilot aged 30 or younger in descending alphabetical order.", "question_toks": ["List", "names", "of", "all", "pilot", "aged", "30", "or", "younger", "in", "descending", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 226}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | What are the names of managers in ascending order of level?", "sql": "SELECT Name FROM manager ORDER BY LEVEL ASC", "example": {"db_id": "railway", "query": "SELECT Name FROM manager ORDER BY LEVEL ASC", "query_toks": ["SELECT", "Name", "FROM", "manager", "ORDER", "BY", "LEVEL", "ASC"], "query_toks_no_value": ["select", "name", "from", "manager", "order", "by", "level", "asc"], "question": "What are the names of managers in ascending order of level?", "question_toks": ["What", "are", "the", "names", "of", "managers", "in", "ascending", "order", "of", "level", "?"], "dataset_name": "spider", "guid": 227}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?", "sql": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"", "example": {"db_id": "aircraft", "query": "SELECT avg(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID  =  T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID  =  T3.Airport_ID WHERE T1.Aircraft  =  \"Robinson R-22\"", "query_toks": ["SELECT", "avg", "(", "T3.Total_Passengers", ")", "FROM", "aircraft", "AS", "T1", "JOIN", "airport_aircraft", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Aircraft_ID", "JOIN", "airport", "AS", "T3", "ON", "T2.Airport_ID", "=", "T3.Airport_ID", "WHERE", "T1.Aircraft", "=", "``", "Robinson", "R-22", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "total_passengers", ")", "from", "aircraft", "as", "t1", "join", "airport_aircraft", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "aircraft_id", "join", "airport", "as", "t3", "on", "t2", ".", "airport_id", "=", "t3", ".", "airport_id", "where", "t1", ".", "aircraft", "=", "value"], "question": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?", "question_toks": ["What", "is", "the", "average", "total", "number", "of", "passengers", "for", "all", "airports", "that", "the", "aircraft", "``", "Robinson", "R-22", "''", "visits", "?"], "dataset_name": "spider", "guid": 228}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | find the name of pilots who did not win the matches held in the country of Australia.", "sql": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')", "example": {"db_id": "aircraft", "query": "SELECT name FROM pilot WHERE pilot_id NOT IN (SELECT Winning_Pilot  FROM MATCH WHERE country  =  'Australia')", "query_toks": ["SELECT", "name", "FROM", "pilot", "WHERE", "pilot_id", "NOT", "IN", "(", "SELECT", "Winning_Pilot", "FROM", "MATCH", "WHERE", "country", "=", "'Australia", "'", ")"], "query_toks_no_value": ["select", "name", "from", "pilot", "where", "pilot_id", "not", "in", "(", "select", "winning_pilot", "from", "match", "where", "country", "=", "value", ")"], "question": "find the name of pilots who did not win the matches held in the country of Australia.", "question_toks": ["find", "the", "name", "of", "pilots", "who", "did", "not", "win", "the", "matches", "held", "in", "the", "country", "of", "Australia", "."], "dataset_name": "spider", "guid": 229}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the average price for flights from LA to Honolulu?", "sql": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "example": {"db_id": "flight_1", "query": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"", "query_toks": ["SELECT", "avg", "(", "price", ")", "FROM", "Flight", "WHERE", "origin", "=", "``", "Los", "Angeles", "''", "AND", "destination", "=", "``", "Honolulu", "''"], "query_toks_no_value": ["select", "avg", "(", "price", ")", "from", "flight", "where", "origin", "=", "value", "and", "destination", "=", "value"], "question": "What is the average price for flights from LA to Honolulu?", "question_toks": ["What", "is", "the", "average", "price", "for", "flights", "from", "LA", "to", "Honolulu", "?"], "dataset_name": "spider", "guid": 230}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | What is the average age for all managers?", "sql": "SELECT avg(Age) FROM manager", "example": {"db_id": "railway", "query": "SELECT avg(Age) FROM manager", "query_toks": ["SELECT", "avg", "(", "Age", ")", "FROM", "manager"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "manager"], "question": "What is the average age for all managers?", "question_toks": ["What", "is", "the", "average", "age", "for", "all", "managers", "?"], "dataset_name": "spider", "guid": 231}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the name of the airline with the most routes?", "sql": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "airlines", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.alid", "=", "T2.alid", "GROUP", "BY", "T1.name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "airlines", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "alid", "=", "t2", ".", "alid", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the airline with the most routes?", "question_toks": ["What", "is", "the", "name", "of", "the", "airline", "with", "the", "most", "routes", "?"], "dataset_name": "spider", "guid": 232}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many flights depart from City Aberdeen?", "sql": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.SourceAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "sourceairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "How many flights depart from City Aberdeen?", "question_toks": ["How", "many", "flights", "depart", "from", "City", "Aberdeen", "?"], "dataset_name": "spider", "guid": 233}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | In which year were most of ships built?", "sql": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "ship_1", "query": "SELECT built_year FROM ship GROUP BY built_year ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "built_year", "FROM", "ship", "GROUP", "BY", "built_year", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "built_year", "from", "ship", "group", "by", "built_year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "In which year were most of ships built?", "question_toks": ["In", "which", "year", "were", "most", "of", "ships", "built", "?"], "dataset_name": "spider", "guid": 234}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What is the name of the airport that is the destination of the most number of routes that start in China?", "sql": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_4", "query": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.dst_apid", "WHERE", "T1.country", "=", "'China", "'", "GROUP", "BY", "T1.name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "dst_apid", "where", "t1", ".", "country", "=", "value", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the airport that is the destination of the most number of routes that start in China?", "question_toks": ["What", "is", "the", "name", "of", "the", "airport", "that", "is", "the", "destination", "of", "the", "most", "number", "of", "routes", "that", "start", "in", "China", "?"], "dataset_name": "spider", "guid": 235}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the names and distances for all airplanes?", "sql": "SELECT name ,  distance FROM Aircraft", "example": {"db_id": "flight_1", "query": "SELECT name ,  distance FROM Aircraft", "query_toks": ["SELECT", "name", ",", "distance", "FROM", "Aircraft"], "query_toks_no_value": ["select", "name", ",", "distance", "from", "aircraft"], "question": "What are the names and distances for all airplanes?", "question_toks": ["What", "are", "the", "names", "and", "distances", "for", "all", "airplanes", "?"], "dataset_name": "spider", "guid": 236}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | how many ships are there?", "sql": "SELECT count(*) FROM ship", "example": {"db_id": "ship_1", "query": "SELECT count(*) FROM ship", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ship"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ship"], "question": "how many ships are there?", "question_toks": ["how", "many", "ships", "are", "there", "?"], "dataset_name": "spider", "guid": 237}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | Show the countries that have both managers of age above 50 and managers of age below 46.", "sql": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46", "example": {"db_id": "railway", "query": "SELECT Country FROM manager WHERE Age  >  50 INTERSECT SELECT Country FROM manager WHERE Age  <  46", "query_toks": ["SELECT", "Country", "FROM", "manager", "WHERE", "Age", ">", "50", "INTERSECT", "SELECT", "Country", "FROM", "manager", "WHERE", "Age", "<", "46"], "query_toks_no_value": ["select", "country", "from", "manager", "where", "age", ">", "value", "intersect", "select", "country", "from", "manager", "where", "age", "<", "value"], "question": "Show the countries that have both managers of age above 50 and managers of age below 46.", "question_toks": ["Show", "the", "countries", "that", "have", "both", "managers", "of", "age", "above", "50", "and", "managers", "of", "age", "below", "46", "."], "dataset_name": "spider", "guid": 238}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show the id and salary of Mark Young.", "sql": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "example": {"db_id": "flight_1", "query": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'", "query_toks": ["SELECT", "eid", ",", "salary", "FROM", "Employee", "WHERE", "name", "=", "'Mark", "Young", "'"], "query_toks_no_value": ["select", "eid", ",", "salary", "from", "employee", "where", "name", "=", "value"], "question": "Show the id and salary of Mark Young.", "question_toks": ["Show", "the", "id", "and", "salary", "of", "Mark", "Young", "."], "dataset_name": "spider", "guid": 239}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What is the average number of international passengers for an airport?", "sql": "SELECT avg(International_Passengers) FROM airport", "example": {"db_id": "aircraft", "query": "SELECT avg(International_Passengers) FROM airport", "query_toks": ["SELECT", "avg", "(", "International_Passengers", ")", "FROM", "airport"], "query_toks_no_value": ["select", "avg", "(", "international_passengers", ")", "from", "airport"], "question": "What is the average number of international passengers for an airport?", "question_toks": ["What", "is", "the", "average", "number", "of", "international", "passengers", "for", "an", "airport", "?"], "dataset_name": "spider", "guid": 240}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What are the number of international and domestic passengers of the airport named London \"Heathrow\"?", "sql": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"", "example": {"db_id": "aircraft", "query": "SELECT International_Passengers ,  Domestic_Passengers FROM airport WHERE Airport_Name  =  \"London Heathrow\"", "query_toks": ["SELECT", "International_Passengers", ",", "Domestic_Passengers", "FROM", "airport", "WHERE", "Airport_Name", "=", "``", "London", "Heathrow", "''"], "query_toks_no_value": ["select", "international_passengers", ",", "domestic_passengers", "from", "airport", "where", "airport_name", "=", "value"], "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?", "question_toks": ["What", "are", "the", "number", "of", "international", "and", "domestic", "passengers", "of", "the", "airport", "named", "London", "``", "Heathrow", "''", "?"], "dataset_name": "spider", "guid": 241}}
{"text": "station: Station_ID, Name, Annual_entry_exit, Annual_interchanges, Total_Passengers, Location, Main_Services, Number_of_Platforms; train: Train_ID, Name, Time, Service; train_station: Train_ID, Station_ID | Show the name and service for all trains in order by time.", "sql": "SELECT name ,  service FROM train ORDER BY TIME", "example": {"db_id": "train_station", "query": "SELECT name ,  service FROM train ORDER BY TIME", "query_toks": ["SELECT", "name", ",", "service", "FROM", "train", "ORDER", "BY", "TIME"], "query_toks_no_value": ["select", "name", ",", "service", "from", "train", "order", "by", "time"], "question": "Show the name and service for all trains in order by time.", "question_toks": ["Show", "the", "name", "and", "service", "for", "all", "trains", "in", "order", "by", "time", "."], "dataset_name": "spider", "guid": 242}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show names for all aircraft with at least two flights.", "sql": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2", "example": {"db_id": "flight_1", "query": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2", "query_toks": ["SELECT", "T2.name", "FROM", "Flight", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T1.aid", "=", "T2.aid", "GROUP", "BY", "T1.aid", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "flight", "as", "t1", "join", "aircraft", "as", "t2", "on", "t1", ".", "aid", "=", "t2", ".", "aid", "group", "by", "t1", ".", "aid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show names for all aircraft with at least two flights.", "question_toks": ["Show", "names", "for", "all", "aircraft", "with", "at", "least", "two", "flights", "."], "dataset_name": "spider", "guid": 243}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the average and largest salary of all employees?", "sql": "SELECT avg(salary) ,  max(salary) FROM Employee", "example": {"db_id": "flight_1", "query": "SELECT avg(salary) ,  max(salary) FROM Employee", "query_toks": ["SELECT", "avg", "(", "salary", ")", ",", "max", "(", "salary", ")", "FROM", "Employee"], "query_toks_no_value": ["select", "avg", "(", "salary", ")", ",", "max", "(", "salary", ")", "from", "employee"], "question": "What is the average and largest salary of all employees?", "question_toks": ["What", "is", "the", "average", "and", "largest", "salary", "of", "all", "employees", "?"], "dataset_name": "spider", "guid": 244}}
{"text": "railway: Railway_ID, Railway, Builder, Built, Wheels, Location, ObjectNumber; train: Train_ID, Train_Num, Name, From, Arrival, Railway_ID; manager: Manager_ID, Name, Country, Working_year_starts, Age, Level; railway_manage: Railway_ID, Manager_ID, From_Year | Show the names of trains and locations of railways they are in.", "sql": "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID", "example": {"db_id": "railway", "query": "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID", "query_toks": ["SELECT", "T2.Name", ",", "T1.Location", "FROM", "railway", "AS", "T1", "JOIN", "train", "AS", "T2", "ON", "T1.Railway_ID", "=", "T2.Railway_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "location", "from", "railway", "as", "t1", "join", "train", "as", "t2", "on", "t1", ".", "railway_id", "=", "t2", ".", "railway_id"], "question": "Show the names of trains and locations of railways they are in.", "question_toks": ["Show", "the", "names", "of", "trains", "and", "locations", "of", "railways", "they", "are", "in", "."], "dataset_name": "spider", "guid": 245}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the average distance and average price for flights from Los Angeles.", "sql": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"", "example": {"db_id": "flight_1", "query": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"", "query_toks": ["SELECT", "avg", "(", "distance", ")", ",", "avg", "(", "price", ")", "FROM", "Flight", "WHERE", "origin", "=", "``", "Los", "Angeles", "''"], "query_toks_no_value": ["select", "avg", "(", "distance", ")", ",", "avg", "(", "price", ")", "from", "flight", "where", "origin", "=", "value"], "question": "What is the average distance and average price for flights from Los Angeles.", "question_toks": ["What", "is", "the", "average", "distance", "and", "average", "price", "for", "flights", "from", "Los", "Angeles", "."], "dataset_name": "spider", "guid": 246}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "example": {"db_id": "flight_1", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5", "query_toks": ["SELECT", "T2.name", "FROM", "Certificate", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T2.aid", "=", "T1.aid", "WHERE", "T2.distance", ">", "5000", "GROUP", "BY", "T1.aid", "ORDER", "BY", "count", "(", "*", ")", ">", "=", "5"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "certificate", "as", "t1", "join", "aircraft", "as", "t2", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "where", "t2", ".", "distance", ">", "value", "group", "by", "t1", ".", "aid", "order", "by", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.", "question_toks": ["Show", "the", "name", "and", "distance", "of", "the", "aircrafts", "with", "more", "than", "5000", "distance", "and", "which", "at", "least", "5", "people", "have", "its", "certificate", "."], "dataset_name": "spider", "guid": 247}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | What are the cities that have more than 2 airports sorted by number of airports?", "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)", "example": {"db_id": "flight_4", "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)", "query_toks": ["SELECT", "city", "FROM", "airports", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", ">", "2", "ORDER", "BY", "count", "(", "*", ")"], "query_toks_no_value": ["select", "city", "from", "airports", "group", "by", "city", "having", "count", "(", "*", ")", ">", "value", "order", "by", "count", "(", "*", ")"], "question": "What are the cities that have more than 2 airports sorted by number of airports?", "question_toks": ["What", "are", "the", "cities", "that", "have", "more", "than", "2", "airports", "sorted", "by", "number", "of", "airports", "?"], "dataset_name": "spider", "guid": 248}}
{"text": "aircraft: Aircraft_ID, Order_Year, Manufacturer, Model, Fleet_Series, Powertrain, Fuel_Propulsion; pilot: Pilot_ID, Pilot_name, Rank, Age, Nationality, Position, Join_Year, Team; pilot_record: Record_ID, Pilot_ID, Aircraft_ID, Date | What is the joined year of the pilot of the highest rank?", "sql": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1", "example": {"db_id": "pilot_record", "query": "SELECT Join_Year FROM pilot ORDER BY Rank ASC LIMIT 1", "query_toks": ["SELECT", "Join_Year", "FROM", "pilot", "ORDER", "BY", "Rank", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "join_year", "from", "pilot", "order", "by", "rank", "asc", "limit", "value"], "question": "What is the joined year of the pilot of the highest rank?", "question_toks": ["What", "is", "the", "joined", "year", "of", "the", "pilot", "of", "the", "highest", "rank", "?"], "dataset_name": "spider", "guid": 249}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the number of routes whose destination airports are in Canada.", "sql": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'", "example": {"db_id": "flight_4", "query": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "airports", "AS", "T1", "JOIN", "routes", "AS", "T2", "ON", "T1.apid", "=", "T2.dst_apid", "WHERE", "country", "=", "'Canada", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "airports", "as", "t1", "join", "routes", "as", "t2", "on", "t1", ".", "apid", "=", "t2", ".", "dst_apid", "where", "country", "=", "value"], "question": "Find the number of routes whose destination airports are in Canada.", "question_toks": ["Find", "the", "number", "of", "routes", "whose", "destination", "airports", "are", "in", "Canada", "."], "dataset_name": "spider", "guid": 250}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | What are flight numbers of flights departing from City \"Aberdeen \"?", "sql": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "example": {"db_id": "flight_2", "query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\"", "query_toks": ["SELECT", "T1.FlightNo", "FROM", "FLIGHTS", "AS", "T1", "JOIN", "AIRPORTS", "AS", "T2", "ON", "T1.SourceAirport", "=", "T2.AirportCode", "WHERE", "T2.City", "=", "``", "Aberdeen", "''"], "query_toks_no_value": ["select", "t1", ".", "flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "sourceairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value"], "question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "question_toks": ["What", "are", "flight", "numbers", "of", "flights", "departing", "from", "City", "``", "Aberdeen", "``", "?"], "dataset_name": "spider", "guid": 251}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.", "sql": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "example": {"db_id": "flight_1", "query": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin", "query_toks": ["SELECT", "flno", ",", "origin", ",", "destination", "FROM", "Flight", "ORDER", "BY", "origin"], "query_toks_no_value": ["select", "flno", ",", "origin", ",", "destination", "from", "flight", "order", "by", "origin"], "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.", "question_toks": ["Show", "flight", "number", ",", "origin", ",", "destination", "of", "all", "flights", "in", "the", "alphabetical", "order", "of", "the", "departure", "cities", "."], "dataset_name": "spider", "guid": 252}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | Please list the location and the winning aircraft name.", "sql": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft", "example": {"db_id": "aircraft", "query": "SELECT T2.Location ,  T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID  =  T2.Winning_Aircraft", "query_toks": ["SELECT", "T2.Location", ",", "T1.Aircraft", "FROM", "aircraft", "AS", "T1", "JOIN", "MATCH", "AS", "T2", "ON", "T1.Aircraft_ID", "=", "T2.Winning_Aircraft"], "query_toks_no_value": ["select", "t2", ".", "location", ",", "t1", ".", "aircraft", "from", "aircraft", "as", "t1", "join", "match", "as", "t2", "on", "t1", ".", "aircraft_id", "=", "t2", ".", "winning_aircraft"], "question": "Please list the location and the winning aircraft name.", "question_toks": ["Please", "list", "the", "location", "and", "the", "winning", "aircraft", "name", "."], "dataset_name": "spider", "guid": 253}}
{"text": "routes: rid, dst_apid, dst_ap, src_apid, src_ap, alid, airline, codeshare; airports: apid, name, city, country, x, y, elevation, iata, icao; airlines: alid, name, iata, icao, callsign, country, active | Find the cities which have exactly two airports.", "sql": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2", "example": {"db_id": "flight_4", "query": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2", "query_toks": ["SELECT", "city", "FROM", "airports", "GROUP", "BY", "city", "HAVING", "count", "(", "*", ")", "=", "2"], "query_toks_no_value": ["select", "city", "from", "airports", "group", "by", "city", "having", "count", "(", "*", ")", "=", "value"], "question": "Find the cities which have exactly two airports.", "question_toks": ["Find", "the", "cities", "which", "have", "exactly", "two", "airports", "."], "dataset_name": "spider", "guid": 254}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | Show origins of all flights with destination Honolulu.", "sql": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"", "example": {"db_id": "flight_1", "query": "SELECT origin FROM Flight WHERE destination  =  \"Honolulu\"", "query_toks": ["SELECT", "origin", "FROM", "Flight", "WHERE", "destination", "=", "``", "Honolulu", "''"], "query_toks_no_value": ["select", "origin", "from", "flight", "where", "destination", "=", "value"], "question": "Show origins of all flights with destination Honolulu.", "question_toks": ["Show", "origins", "of", "all", "flights", "with", "destination", "Honolulu", "."], "dataset_name": "spider", "guid": 255}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the salaray and name of the employee that is certified to fly the most planes?", "sql": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T1.salary", "FROM", "Employee", "AS", "T1", "JOIN", "Certificate", "AS", "T2", "ON", "T1.eid", "=", "T2.eid", "GROUP", "BY", "T1.eid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "salary", "from", "employee", "as", "t1", "join", "certificate", "as", "t2", "on", "t1", ".", "eid", "=", "t2", ".", "eid", "group", "by", "t1", ".", "eid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the salaray and name of the employee that is certified to fly the most planes?", "question_toks": ["What", "is", "the", "salaray", "and", "name", "of", "the", "employee", "that", "is", "certified", "to", "fly", "the", "most", "planes", "?"], "dataset_name": "spider", "guid": 256}}
{"text": "pilot: Pilot_Id, Name, Age; aircraft: Aircraft_ID, Aircraft, Description, Max_Gross_Weight, Total_disk_area, Max_disk_Loading; match: Round, Location, Country, Date, Fastest_Qualifying, Winning_Pilot, Winning_Aircraft; airport: Airport_ID, Airport_Name, Total_Passengers, %_Change_2007, International_Passengers, Domestic_Passengers, Transit_Passengers, Aircraft_Movements, Freight_Metric_Tonnes; airport_aircraft: ID, Airport_ID, Aircraft_ID | What is the number of aircraft?", "sql": "SELECT count(*) FROM aircraft", "example": {"db_id": "aircraft", "query": "SELECT count(*) FROM aircraft", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "aircraft"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "aircraft"], "question": "What is the number of aircraft?", "question_toks": ["What", "is", "the", "number", "of", "aircraft", "?"], "dataset_name": "spider", "guid": 257}}
{"text": "airlines: uid, Airline, Abbreviation, Country; airports: City, AirportCode, AirportName, Country, CountryAbbrev; flights: Airline, FlightNo, SourceAirport, DestAirport | How many flights land in Aberdeen or Abilene?", "sql": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "example": {"db_id": "flight_2", "query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Flights", "AS", "T1", "JOIN", "Airports", "AS", "T2", "ON", "T1.DestAirport", "=", "T2.AirportCode", "WHERE", "T2.city", "=", "``", "Aberdeen", "''", "OR", "T2.city", "=", "``", "Abilene", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1", ".", "destairport", "=", "t2", ".", "airportcode", "where", "t2", ".", "city", "=", "value", "or", "t2", ".", "city", "=", "value"], "question": "How many flights land in Aberdeen or Abilene?", "question_toks": ["How", "many", "flights", "land", "in", "Aberdeen", "or", "Abilene", "?"], "dataset_name": "spider", "guid": 258}}
{"text": "captain: Captain_ID, Name, Ship_ID, age, Class, Rank; Ship: Ship_ID, Name, Type, Built_Year, Class, Flag | Count the number of captains that have each rank.", "sql": "SELECT count(*) ,  rank FROM captain GROUP BY rank", "example": {"db_id": "ship_1", "query": "SELECT count(*) ,  rank FROM captain GROUP BY rank", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "rank", "FROM", "captain", "GROUP", "BY", "rank"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "rank", "from", "captain", "group", "by", "rank"], "question": "Count the number of captains that have each rank.", "question_toks": ["Count", "the", "number", "of", "captains", "that", "have", "each", "rank", "."], "dataset_name": "spider", "guid": 259}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What is the name and distance for aircraft with id 12?", "sql": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "example": {"db_id": "flight_1", "query": "SELECT name ,  distance FROM Aircraft WHERE aid  =  12", "query_toks": ["SELECT", "name", ",", "distance", "FROM", "Aircraft", "WHERE", "aid", "=", "12"], "query_toks_no_value": ["select", "name", ",", "distance", "from", "aircraft", "where", "aid", "=", "value"], "question": "What is the name and distance for aircraft with id 12?", "question_toks": ["What", "is", "the", "name", "and", "distance", "for", "aircraft", "with", "id", "12", "?"], "dataset_name": "spider", "guid": 260}}
{"text": "flight: flno, origin, destination, distance, departure_date, arrival_date, price, aid; aircraft: aid, name, distance; employee: eid, name, salary; certificate: eid, aid | What are the names of the aircraft that the least people are certified to fly?", "sql": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "flight_1", "query": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "Certificate", "AS", "T1", "JOIN", "Aircraft", "AS", "T2", "ON", "T2.aid", "=", "T1.aid", "GROUP", "BY", "T1.aid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "certificate", "as", "t1", "join", "aircraft", "as", "t2", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "group", "by", "t1", ".", "aid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the names of the aircraft that the least people are certified to fly?", "question_toks": ["What", "are", "the", "names", "of", "the", "aircraft", "that", "the", "least", "people", "are", "certified", "to", "fly", "?"], "dataset_name": "spider", "guid": 261}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | Give me the best french restaurant in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "Give me the best french restaurant in san francisco ?", "question_toks": ["Give", "me", "the", "best", "french", "restaurant", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2275}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a good arabic on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a good arabic on buchanan in san francisco ?", "question_toks": ["where", "is", "a", "good", "arabic", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2276}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some restaurants good for french food in the yosemite and mono lake area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "yosemite", "and", "mono", "lake", "area", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some restaurants good for french food in the yosemite and mono lake area ?", "question_toks": ["give", "me", "some", "restaurants", "good", "for", "french", "food", "in", "the", "yosemite", "and", "mono", "lake", "area", "?"], "dataset_name": "spider", "guid": 2277}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many tips have been written in 2015", "sql": "SELECT COUNT ( DISTINCT text ) FROM tip WHERE YEAR  =  2015;", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT text ) FROM tip WHERE YEAR  =  2015;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "text", ")", "FROM", "tip", "WHERE", "YEAR", "=", "2015", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "text", ")", "from", "tip", "where", "year", "=", "value"], "question": "How many tips have been written in 2015", "question_toks": ["How", "many", "tips", "have", "been", "written", "in", "2015"], "dataset_name": "spider", "guid": 2278}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many Bars in Dallas have a rating above 3.5 ?", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Dallas", "''", "AND", "t1.rating", ">", "3.5", "AND", "t2.category_name", "=", "``", "Bars", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t1", ".", "rating", ">", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "How many Bars in Dallas have a rating above 3.5 ?", "question_toks": ["How", "many", "Bars", "in", "Dallas", "have", "a", "rating", "above", "3.5", "?"], "dataset_name": "spider", "guid": 2279}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | What is the rating of the restaurant Subway?", "sql": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";", "example": {"db_id": "restaurant_1", "query": "SELECT Rating FROM Restaurant WHERE ResName = \"Subway\";", "query_toks": ["SELECT", "Rating", "FROM", "Restaurant", "WHERE", "ResName", "=", "``", "Subway", "''", ";"], "query_toks_no_value": ["select", "rating", "from", "restaurant", "where", "resname", "=", "value"], "question": "What is the rating of the restaurant Subway?", "question_toks": ["What", "is", "the", "rating", "of", "the", "restaurant", "Subway", "?"], "dataset_name": "spider", "guid": 2280}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what is a good restaurant in the bay area ?", "sql": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "LOCATION", "AS", "t2", "JOIN", "restaurant", "AS", "t1", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t1.city_name", "IN", "(", "SELECT", "city_name", "FROM", "geographic", "WHERE", "region", "=", "``", "region0", "''", ")", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "location", "as", "t2", "join", "restaurant", "as", "t1", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t1", ".", "city_name", "in", "(", "select", "city_name", "from", "geographic", "where", "region", "=", "value", ")", "and", "t1", ".", "rating", ">", "value"], "question": "what is a good restaurant in the bay area ?", "question_toks": ["what", "is", "a", "good", "restaurant", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2281}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Return the themes, dates, and attendance for exhibitions that happened in 2004.", "sql": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004", "example": {"db_id": "theme_gallery", "query": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004", "query_toks": ["SELECT", "T2.theme", ",", "T1.date", ",", "T1.attendance", "FROM", "exhibition_record", "AS", "T1", "JOIN", "exhibition", "AS", "T2", "ON", "T1.exhibition_id", "=", "T2.exhibition_id", "WHERE", "T2.year", "=", "2004"], "query_toks_no_value": ["select", "t2", ".", "theme", ",", "t1", ".", "date", ",", "t1", ".", "attendance", "from", "exhibition_record", "as", "t1", "join", "exhibition", "as", "t2", "on", "t1", ".", "exhibition_id", "=", "t2", ".", "exhibition_id", "where", "t2", ".", "year", "=", "value"], "question": "Return the themes, dates, and attendance for exhibitions that happened in 2004.", "question_toks": ["Return", "the", "themes", ",", "dates", ",", "and", "attendance", "for", "exhibitions", "that", "happened", "in", "2004", "."], "dataset_name": "spider", "guid": 2282}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the names and ids of the tourist attractions that are visited at most once?", "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1", "query_toks": ["SELECT", "T1.Name", ",", "T1.Tourist_Attraction_ID", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "GROUP", "BY", "T2.Tourist_Attraction_ID", "HAVING", "count", "(", "*", ")", "<", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "tourist_attraction_id", "from", "tourist_attractions", "as", "t1", "join", "visits", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "group", "by", "t2", ".", "tourist_attraction_id", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "What are the names and ids of the tourist attractions that are visited at most once?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "the", "tourist", "attractions", "that", "are", "visited", "at", "most", "once", "?"], "dataset_name": "spider", "guid": 2283}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | What is the age of student Linda Smith?", "sql": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";", "example": {"db_id": "restaurant_1", "query": "SELECT Age FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";", "query_toks": ["SELECT", "Age", "FROM", "Student", "WHERE", "Fname", "=", "``", "Linda", "''", "AND", "Lname", "=", "``", "Smith", "''", ";"], "query_toks_no_value": ["select", "age", "from", "student", "where", "fname", "=", "value", "and", "lname", "=", "value"], "question": "What is the age of student Linda Smith?", "question_toks": ["What", "is", "the", "age", "of", "student", "Linda", "Smith", "?"], "dataset_name": "spider", "guid": 2284}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find the number of tips written in each month", "sql": "SELECT COUNT ( DISTINCT text )  ,  MONTH FROM tip GROUP BY MONTH;", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT text )  ,  MONTH FROM tip GROUP BY MONTH;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "text", ")", ",", "MONTH", "FROM", "tip", "GROUP", "BY", "MONTH", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "text", ")", ",", "month", "from", "tip", "group", "by", "month"], "question": "Find the number of tips written in each month", "question_toks": ["Find", "the", "number", "of", "tips", "written", "in", "each", "month"], "dataset_name": "spider", "guid": 2285}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.", "sql": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"", "query_toks": ["SELECT", "T1.Name", ",", "T3.Visit_Date", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITORS", "AS", "T2", "JOIN", "VISITS", "AS", "T3", "ON", "T1.Tourist_Attraction_ID", "=", "T3.Tourist_Attraction_ID", "AND", "T2.Tourist_ID", "=", "T3.Tourist_ID", "WHERE", "T2.Tourist_Details", "=", "``", "Vincent", "''", "OR", "T2.Tourist_Details", "=", "``", "Vivian", "''"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t3", ".", "visit_date", "from", "tourist_attractions", "as", "t1", "join", "visitors", "as", "t2", "join", "visits", "as", "t3", "on", "t1", ".", "tourist_attraction_id", "=", "t3", ".", "tourist_attraction_id", "and", "t2", ".", "tourist_id", "=", "t3", ".", "tourist_id", "where", "t2", ".", "tourist_details", "=", "value", "or", "t2", ".", "tourist_details", "=", "value"], "question": "For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.", "question_toks": ["For", "each", "tourist", "attraction", ",", "return", "its", "name", "and", "the", "date", "when", "the", "tourists", "named", "Vincent", "or", "Vivian", "visited", "there", "."], "dataset_name": "spider", "guid": 2286}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all the Seafood restaurant in \" Los Angeles \"", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Los", "Angeles", "''", "AND", "t2.category_name", "=", "``", "Seafood", "''", "AND", "t3.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value"], "question": "List all the Seafood restaurant in \" Los Angeles \"", "question_toks": ["List", "all", "the", "Seafood", "restaurant", "in", "``", "Los", "Angeles", "``"], "dataset_name": "spider", "guid": 2287}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all cities in Texas in which there is a restaurant called \" MGM Grand Buffet \"", "sql": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.city", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.name", "=", "``", "MGM", "Grand", "Buffet", "''", "AND", "t1.state", "=", "``", "Texas", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "city", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "name", "=", "value", "and", "t1", ".", "state", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "Find all cities in Texas in which there is a restaurant called \" MGM Grand Buffet \"", "question_toks": ["Find", "all", "cities", "in", "Texas", "in", "which", "there", "is", "a", "restaurant", "called", "``", "MGM", "Grand", "Buffet", "``"], "dataset_name": "spider", "guid": 2288}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | Advisor 1121 has how many students?", "sql": "SELECT count(*) FROM Student WHERE Advisor =  1121;", "example": {"db_id": "restaurant_1", "query": "SELECT count(*) FROM Student WHERE Advisor =  1121;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student", "WHERE", "Advisor", "=", "1121", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "where", "advisor", "=", "value"], "question": "Advisor 1121 has how many students?", "question_toks": ["Advisor", "1121", "has", "how", "many", "students", "?"], "dataset_name": "spider", "guid": 2289}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | Show the names of countries that have more than one roller coaster.", "sql": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "example": {"db_id": "roller_coaster", "query": "SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "roller_coaster", "AS", "T2", "ON", "T1.Country_ID", "=", "T2.Country_ID", "GROUP", "BY", "T1.Name", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "country", "as", "t1", "join", "roller_coaster", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "group", "by", "t1", ".", "name", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the names of countries that have more than one roller coaster.", "question_toks": ["Show", "the", "names", "of", "countries", "that", "have", "more", "than", "one", "roller", "coaster", "."], "dataset_name": "spider", "guid": 2290}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all tips about \" Vintner Grill \" that received more than 9 likes", "sql": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Vintner Grill\" AND t2.likes  >  9;", "example": {"db_id": "yelp", "query": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Vintner Grill\" AND t2.likes  >  9;", "query_toks": ["SELECT", "t2.text", "FROM", "tip", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.name", "=", "``", "Vintner", "Grill", "''", "AND", "t2.likes", ">", "9", ";"], "query_toks_no_value": ["select", "t2", ".", "text", "from", "tip", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "likes", ">", "value"], "question": "Find all tips about \" Vintner Grill \" that received more than 9 likes", "question_toks": ["Find", "all", "tips", "about", "``", "Vintner", "Grill", "``", "that", "received", "more", "than", "9", "likes"], "dataset_name": "spider", "guid": 2291}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show details of all visitors.", "sql": "SELECT Tourist_Details FROM VISITORS", "example": {"db_id": "cre_Theme_park", "query": "SELECT Tourist_Details FROM VISITORS", "query_toks": ["SELECT", "Tourist_Details", "FROM", "VISITORS"], "query_toks_no_value": ["select", "tourist_details", "from", "visitors"], "question": "Show details of all visitors.", "question_toks": ["Show", "details", "of", "all", "visitors", "."], "dataset_name": "spider", "guid": 2292}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?", "sql": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500", "example": {"db_id": "theme_gallery", "query": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500", "query_toks": ["SELECT", "T2.theme", "FROM", "exhibition_record", "AS", "T1", "JOIN", "exhibition", "AS", "T2", "ON", "T1.exhibition_id", "=", "T2.exhibition_id", "WHERE", "T1.attendance", "<", "100", "INTERSECT", "SELECT", "T2.theme", "FROM", "exhibition_record", "AS", "T1", "JOIN", "exhibition", "AS", "T2", "ON", "T1.exhibition_id", "=", "T2.exhibition_id", "WHERE", "T1.attendance", ">", "500"], "query_toks_no_value": ["select", "t2", ".", "theme", "from", "exhibition_record", "as", "t1", "join", "exhibition", "as", "t2", "on", "t1", ".", "exhibition_id", "=", "t2", ".", "exhibition_id", "where", "t1", ".", "attendance", "<", "value", "intersect", "select", "t2", ".", "theme", "from", "exhibition_record", "as", "t1", "join", "exhibition", "as", "t2", "on", "t1", ".", "exhibition_id", "=", "t2", ".", "exhibition_id", "where", "t1", ".", "attendance", ">", "value"], "question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?", "question_toks": ["Which", "themes", "have", "had", "corresponding", "exhibitions", "that", "have", "had", "attendance", "both", "below", "100", "and", "above", "500", "?"], "dataset_name": "spider", "guid": 2293}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?", "sql": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";", "example": {"db_id": "inn_1", "query": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\";", "query_toks": ["SELECT", "Kids", "FROM", "Reservations", "WHERE", "CheckIn", "=", "``", "2010-09-21", "''", "AND", "FirstName", "=", "``", "DAMIEN", "''", "AND", "LastName", "=", "``", "TRACHSEL", "''", ";"], "query_toks_no_value": ["select", "kids", "from", "reservations", "where", "checkin", "=", "value", "and", "firstname", "=", "value", "and", "lastname", "=", "value"], "question": "How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?", "question_toks": ["How", "many", "kids", "stay", "in", "the", "room", "DAMIEN", "TRACHSEL", "checked", "in", "on", "Sep", "21", ",", "2010", "?"], "dataset_name": "spider", "guid": 2294}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | Which student visited restaurant most often? List student's first name and last name.", "sql": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "restaurant_1", "query": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "Student.Fname", ",", "Student.Lname", "FROM", "Student", "JOIN", "Visits_Restaurant", "ON", "Student.StuID", "=", "Visits_Restaurant.StuID", "GROUP", "BY", "Student.StuID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "student.fname", ",", "student.lname", "from", "student", "join", "visits_restaurant", "on", "student.stuid", "=", "visits_restaurant.stuid", "group", "by", "student.stuid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which student visited restaurant most often? List student's first name and last name.", "question_toks": ["Which", "student", "visited", "restaurant", "most", "often", "?", "List", "student", "'s", "first", "name", "and", "last", "name", "."], "dataset_name": "spider", "guid": 2295}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where are some good arabic restaurants in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where are some good arabic restaurants in mountain view ?", "question_toks": ["where", "are", "some", "good", "arabic", "restaurants", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2296}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some good arabics on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some good arabics on buchanan in san francisco ?", "question_toks": ["give", "me", "some", "good", "arabics", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2297}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can we find a restaurant in alameda ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "alameda", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value"], "question": "where can we find a restaurant in alameda ?", "question_toks": ["where", "can", "we", "find", "a", "restaurant", "in", "alameda", "?"], "dataset_name": "spider", "guid": 2298}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the details and opening hours of the museums?", "sql": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID", "query_toks": ["SELECT", "T1.Museum_Details", ",", "T2.Opening_Hours", "FROM", "MUSEUMS", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Museum_ID", "=", "T2.Tourist_Attraction_ID"], "query_toks_no_value": ["select", "t1", ".", "museum_details", ",", "t2", ".", "opening_hours", "from", "museums", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "museum_id", "=", "t2", ".", "tourist_attraction_id"], "question": "What are the details and opening hours of the museums?", "question_toks": ["What", "are", "the", "details", "and", "opening", "hours", "of", "the", "museums", "?"], "dataset_name": "spider", "guid": 2299}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a good place in the yosemite and mono lake area for french food ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "yosemite", "and", "mono", "lake", "area", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a good place in the yosemite and mono lake area for french food ?", "question_toks": ["where", "is", "a", "good", "place", "in", "the", "yosemite", "and", "mono", "lake", "area", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2300}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Which room has cheapest base price? List the room's name and the base price.", "sql": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;", "example": {"db_id": "inn_1", "query": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1;", "query_toks": ["SELECT", "roomName", ",", "basePrice", "FROM", "Rooms", "ORDER", "BY", "basePrice", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "roomname", ",", "baseprice", "from", "rooms", "order", "by", "baseprice", "asc", "limit", "value"], "question": "Which room has cheapest base price? List the room's name and the base price.", "question_toks": ["Which", "room", "has", "cheapest", "base", "price", "?", "List", "the", "room", "'s", "name", "and", "the", "base", "price", "."], "dataset_name": "spider", "guid": 2301}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good arabic in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good arabic in mountain view ?", "question_toks": ["give", "me", "a", "good", "arabic", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2302}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all breweries in Los Angeles", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Los", "Angeles", "''", "AND", "t2.category_name", "=", "``", "breweries", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "Find all breweries in Los Angeles", "question_toks": ["Find", "all", "breweries", "in", "Los", "Angeles"], "dataset_name": "spider", "guid": 2303}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the details and star ratings of the 3 least expensive hotels.", "sql": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3", "example": {"db_id": "cre_Theme_park", "query": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3", "query_toks": ["SELECT", "other_hotel_details", ",", "star_rating_code", "FROM", "HOTELS", "ORDER", "BY", "price_range", "ASC", "LIMIT", "3"], "query_toks_no_value": ["select", "other_hotel_details", ",", "star_rating_code", "from", "hotels", "order", "by", "price_range", "asc", "limit", "value"], "question": "Show the details and star ratings of the 3 least expensive hotels.", "question_toks": ["Show", "the", "details", "and", "star", "ratings", "of", "the", "3", "least", "expensive", "hotels", "."], "dataset_name": "spider", "guid": 2304}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What are the name of rooms that cost more than the average.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "example": {"db_id": "inn_1", "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "query_toks": ["SELECT", "roomName", "FROM", "Rooms", "WHERE", "basePrice", ">", "(", "SELECT", "avg", "(", "basePrice", ")", "FROM", "Rooms", ")", ";"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "where", "baseprice", ">", "(", "select", "avg", "(", "baseprice", ")", "from", "rooms", ")"], "question": "What are the name of rooms that cost more than the average.", "question_toks": ["What", "are", "the", "name", "of", "rooms", "that", "cost", "more", "than", "the", "average", "."], "dataset_name": "spider", "guid": 2305}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Show all artist name, age, and country ordered by the yeared they joined.", "sql": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join", "example": {"db_id": "theme_gallery", "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join", "query_toks": ["SELECT", "name", ",", "age", ",", "country", "FROM", "artist", "ORDER", "BY", "Year_Join"], "query_toks_no_value": ["select", "name", ",", "age", ",", "country", "from", "artist", "order", "by", "year_join"], "question": "Show all artist name, age, and country ordered by the yeared they joined.", "question_toks": ["Show", "all", "artist", "name", ",", "age", ",", "and", "country", "ordered", "by", "the", "yeared", "they", "joined", "."], "dataset_name": "spider", "guid": 2306}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the name, id and the corresponding number of visits for each  tourist attraction?", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Tourist_Attraction_ID", ",", "COUNT", "(", "*", ")", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "GROUP", "BY", "T2.Tourist_Attraction_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "tourist_attraction_id", ",", "count", "(", "*", ")", "from", "tourist_attractions", "as", "t1", "join", "visits", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "group", "by", "t2", ".", "tourist_attraction_id"], "question": "What are the name, id and the corresponding number of visits for each  tourist attraction?", "question_toks": ["What", "are", "the", "name", ",", "id", "and", "the", "corresponding", "number", "of", "visits", "for", "each", "tourist", "attraction", "?"], "dataset_name": "spider", "guid": 2307}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | find all cities which has a \" Taj Mahal \" restaurant", "sql": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Taj Mahal\" AND t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Taj Mahal\" AND t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.city", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.name", "=", "``", "Taj", "Mahal", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "city", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "find all cities which has a \" Taj Mahal \" restaurant", "question_toks": ["find", "all", "cities", "which", "has", "a", "``", "Taj", "Mahal", "``", "restaurant"], "dataset_name": "spider", "guid": 2308}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many reviews has Michelle written in March 2014 ?", "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"March\" AND t1.year  =  2014 AND t2.name  =  \"Michelle\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"March\" AND t1.year  =  2014 AND t2.name  =  \"Michelle\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.text", ")", "FROM", "USER", "AS", "t2", "JOIN", "review", "AS", "t1", "ON", "t2.user_id", "=", "t1.user_id", "WHERE", "t1.month", "=", "``", "March", "''", "AND", "t1.year", "=", "2014", "AND", "t2.name", "=", "``", "Michelle", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "text", ")", "from", "user", "as", "t2", "join", "review", "as", "t1", "on", "t2", ".", "user_id", "=", "t1", ".", "user_id", "where", "t1", ".", "month", "=", "value", "and", "t1", ".", "year", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "How many reviews has Michelle written in March 2014 ?", "question_toks": ["How", "many", "reviews", "has", "Michelle", "written", "in", "March", "2014", "?"], "dataset_name": "spider", "guid": 2309}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some good places for arabic in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some good places for arabic in mountain view ?", "question_toks": ["give", "me", "some", "good", "places", "for", "arabic", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2310}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | What is the address of the restaurant Subway?", "sql": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";", "example": {"db_id": "restaurant_1", "query": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\";", "query_toks": ["SELECT", "Address", "FROM", "Restaurant", "WHERE", "ResName", "=", "``", "Subway", "''", ";"], "query_toks_no_value": ["select", "address", "from", "restaurant", "where", "resname", "=", "value"], "question": "What is the address of the restaurant Subway?", "question_toks": ["What", "is", "the", "address", "of", "the", "restaurant", "Subway", "?"], "dataset_name": "spider", "guid": 2311}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all breweries in \" Los Angeles \"", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Los", "Angeles", "''", "AND", "t2.category_name", "=", "``", "breweries", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "Find all breweries in \" Los Angeles \"", "question_toks": ["Find", "all", "breweries", "in", "``", "Los", "Angeles", "``"], "dataset_name": "spider", "guid": 2312}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | how many places for french are there in palo alto ?", "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";", "example": {"db_id": "restaurants", "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "palo", "alto", "''", "AND", "t1.food_type", "=", "``", "french", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value"], "question": "how many places for french are there in palo alto ?", "question_toks": ["how", "many", "places", "for", "french", "are", "there", "in", "palo", "alto", "?"], "dataset_name": "spider", "guid": 2313}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Return the apartment numbers of the apartments with type code \"Flat\".", "sql": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"", "query_toks": ["SELECT", "apt_number", "FROM", "Apartments", "WHERE", "apt_type_code", "=", "``", "Flat", "''"], "query_toks_no_value": ["select", "apt_number", "from", "apartments", "where", "apt_type_code", "=", "value"], "question": "Return the apartment numbers of the apartments with type code \"Flat\".", "question_toks": ["Return", "the", "apartment", "numbers", "of", "the", "apartments", "with", "type", "code", "``", "Flat", "''", "."], "dataset_name": "spider", "guid": 2314}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"", "query_toks": ["SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITORS", "AS", "T2", "JOIN", "VISITS", "AS", "T3", "ON", "T1.Tourist_Attraction_ID", "=", "T3.Tourist_Attraction_ID", "AND", "T2.Tourist_ID", "=", "T3.Tourist_ID", "WHERE", "T2.Tourist_Details", "=", "``", "Vincent", "''", "INTERSECT", "SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITORS", "AS", "T2", "JOIN", "VISITS", "AS", "T3", "ON", "T1.Tourist_Attraction_ID", "=", "T3.Tourist_Attraction_ID", "AND", "T2.Tourist_ID", "=", "T3.Tourist_ID", "WHERE", "T2.Tourist_Details", "=", "``", "Marcelle", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "visitors", "as", "t2", "join", "visits", "as", "t3", "on", "t1", ".", "tourist_attraction_id", "=", "t3", ".", "tourist_attraction_id", "and", "t2", ".", "tourist_id", "=", "t3", ".", "tourist_id", "where", "t2", ".", "tourist_details", "=", "value", "intersect", "select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "visitors", "as", "t2", "join", "visits", "as", "t3", "on", "t1", ".", "tourist_attraction_id", "=", "t3", ".", "tourist_attraction_id", "and", "t2", ".", "tourist_id", "=", "t3", ".", "tourist_id", "where", "t2", ".", "tourist_details", "=", "value"], "question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.", "question_toks": ["Which", "tourist", "attractions", "do", "the", "tourists", "Vincent", "and", "Marcelle", "visit", "?", "Tell", "me", "the", "names", "of", "the", "attractions", "."], "dataset_name": "spider", "guid": 2315}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the number of rooms with a king bed.", "sql": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";", "example": {"db_id": "inn_1", "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Rooms", "WHERE", "bedType", "=", "``", "King", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "rooms", "where", "bedtype", "=", "value"], "question": "Find the number of rooms with a king bed.", "question_toks": ["Find", "the", "number", "of", "rooms", "with", "a", "king", "bed", "."], "dataset_name": "spider", "guid": 2316}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Count the total number of apartment bookings.", "sql": "SELECT count(*) FROM Apartment_Bookings", "example": {"db_id": "apartment_rentals", "query": "SELECT count(*) FROM Apartment_Bookings", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Apartment_Bookings"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "apartment_bookings"], "question": "Count the total number of apartment bookings.", "question_toks": ["Count", "the", "total", "number", "of", "apartment", "bookings", "."], "dataset_name": "spider", "guid": 2317}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers.", "sql": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"", "example": {"db_id": "apartment_rentals", "query": "SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\"", "query_toks": ["SELECT", "DISTINCT", "T2.apt_number", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T1.booking_status_code", "=", "``", "Confirmed", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "apt_number", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t1", ".", "booking_status_code", "=", "value"], "question": "Which apartments have bookings with status code \"Confirmed\"? Return their apartment numbers.", "question_toks": ["Which", "apartments", "have", "bookings", "with", "status", "code", "``", "Confirmed", "''", "?", "Return", "their", "apartment", "numbers", "."], "dataset_name": "spider", "guid": 2318}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Which apartments have type code \"Flat\"? Give me their apartment numbers.", "sql": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_number FROM Apartments WHERE apt_type_code  =  \"Flat\"", "query_toks": ["SELECT", "apt_number", "FROM", "Apartments", "WHERE", "apt_type_code", "=", "``", "Flat", "''"], "query_toks_no_value": ["select", "apt_number", "from", "apartments", "where", "apt_type_code", "=", "value"], "question": "Which apartments have type code \"Flat\"? Give me their apartment numbers.", "question_toks": ["Which", "apartments", "have", "type", "code", "``", "Flat", "''", "?", "Give", "me", "their", "apartment", "numbers", "."], "dataset_name": "spider", "guid": 2319}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the addresses of the buildings that have apartments with more than 2 bathrooms.", "sql": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T2.bathroom_count  >  2", "query_toks": ["SELECT", "T1.building_address", "FROM", "Apartment_Buildings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.building_id", "=", "T2.building_id", "WHERE", "T2.bathroom_count", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "building_address", "from", "apartment_buildings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "building_id", "where", "t2", ".", "bathroom_count", ">", "value"], "question": "Show the addresses of the buildings that have apartments with more than 2 bathrooms.", "question_toks": ["Show", "the", "addresses", "of", "the", "buildings", "that", "have", "apartments", "with", "more", "than", "2", "bathrooms", "."], "dataset_name": "spider", "guid": 2320}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What is the average base price of rooms, for each bed type?", "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "example": {"db_id": "inn_1", "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "query_toks": ["SELECT", "bedType", ",", "avg", "(", "basePrice", ")", "FROM", "Rooms", "GROUP", "BY", "bedType", ";"], "query_toks_no_value": ["select", "bedtype", ",", "avg", "(", "baseprice", ")", "from", "rooms", "group", "by", "bedtype"], "question": "What is the average base price of rooms, for each bed type?", "question_toks": ["What", "is", "the", "average", "base", "price", "of", "rooms", ",", "for", "each", "bed", "type", "?"], "dataset_name": "spider", "guid": 2321}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What is the average number of bedrooms of all apartments?", "sql": "SELECT avg(bedroom_count) FROM Apartments", "example": {"db_id": "apartment_rentals", "query": "SELECT avg(bedroom_count) FROM Apartments", "query_toks": ["SELECT", "avg", "(", "bedroom_count", ")", "FROM", "Apartments"], "query_toks_no_value": ["select", "avg", "(", "bedroom_count", ")", "from", "apartments"], "question": "What is the average number of bedrooms of all apartments?", "question_toks": ["What", "is", "the", "average", "number", "of", "bedrooms", "of", "all", "apartments", "?"], "dataset_name": "spider", "guid": 2322}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | Where is the best french in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "Where is the best french in san francisco ?", "question_toks": ["Where", "is", "the", "best", "french", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2323}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can i find a restaurant in the bay area ?", "sql": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "LOCATION", "AS", "t2", "JOIN", "restaurant", "AS", "t1", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t1.city_name", "IN", "(", "SELECT", "city_name", "FROM", "geographic", "WHERE", "region", "=", "``", "bay", "area", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "location", "as", "t2", "join", "restaurant", "as", "t1", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t1", ".", "city_name", "in", "(", "select", "city_name", "from", "geographic", "where", "region", "=", "value", ")"], "question": "where can i find a restaurant in the bay area ?", "question_toks": ["where", "can", "i", "find", "a", "restaurant", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2324}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find the address of the location named \"UK Gallery\".", "sql": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "query_toks": ["SELECT", "Address", "FROM", "LOCATIONS", "WHERE", "Location_Name", "=", "``", "UK", "Gallery", "''"], "query_toks_no_value": ["select", "address", "from", "locations", "where", "location_name", "=", "value"], "question": "Find the address of the location named \"UK Gallery\".", "question_toks": ["Find", "the", "address", "of", "the", "location", "named", "``", "UK", "Gallery", "''", "."], "dataset_name": "spider", "guid": 2325}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a good place in mountain view for arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a good place in mountain view for arabic food ?", "question_toks": ["where", "is", "a", "good", "place", "in", "mountain", "view", "for", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2326}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Return all the apartment numbers sorted by the room count in ascending order.", "sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "query_toks": ["SELECT", "apt_number", "FROM", "Apartments", "ORDER", "BY", "room_count", "ASC"], "query_toks_no_value": ["select", "apt_number", "from", "apartments", "order", "by", "room_count", "asc"], "question": "Return all the apartment numbers sorted by the room count in ascending order.", "question_toks": ["Return", "all", "the", "apartment", "numbers", "sorted", "by", "the", "room", "count", "in", "ascending", "order", "."], "dataset_name": "spider", "guid": 2327}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | Where is the best restaurant in san francisco for french food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "Where is the best restaurant in san francisco for french food ?", "question_toks": ["Where", "is", "the", "best", "restaurant", "in", "san", "francisco", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2328}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Sort all the rooms according to the price. Just report the room names.", "sql": "SELECT roomName FROM Rooms ORDER BY basePrice;", "example": {"db_id": "inn_1", "query": "SELECT roomName FROM Rooms ORDER BY basePrice;", "query_toks": ["SELECT", "roomName", "FROM", "Rooms", "ORDER", "BY", "basePrice", ";"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "order", "by", "baseprice"], "question": "Sort all the rooms according to the price. Just report the room names.", "question_toks": ["Sort", "all", "the", "rooms", "according", "to", "the", "price", ".", "Just", "report", "the", "room", "names", "."], "dataset_name": "spider", "guid": 2329}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Return the booking start date and end date for the apartments that have type code \"Duplex\".", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_type_code  =  \"Duplex\"", "query_toks": ["SELECT", "T1.booking_start_date", ",", "T1.booking_start_date", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T2.apt_type_code", "=", "``", "Duplex", "''"], "query_toks_no_value": ["select", "t1", ".", "booking_start_date", ",", "t1", ".", "booking_start_date", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t2", ".", "apt_type_code", "=", "value"], "question": "Return the booking start date and end date for the apartments that have type code \"Duplex\".", "question_toks": ["Return", "the", "booking", "start", "date", "and", "end", "date", "for", "the", "apartments", "that", "have", "type", "code", "``", "Duplex", "''", "."], "dataset_name": "spider", "guid": 2330}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | how many places for french food are there in palo alto ?", "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";", "example": {"db_id": "restaurants", "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "palo", "alto", "''", "AND", "t1.food_type", "=", "``", "french", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value"], "question": "how many places for french food are there in palo alto ?", "question_toks": ["how", "many", "places", "for", "french", "food", "are", "there", "in", "palo", "alto", "?"], "dataset_name": "spider", "guid": 2331}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all cities in which there is a restaurant called \" MGM Grand Buffet \"", "sql": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t2.category_name  =  \"category_category_name0\";", "example": {"db_id": "yelp", "query": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t2.category_name  =  \"category_category_name0\";", "query_toks": ["SELECT", "t1.city", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.name", "=", "``", "MGM", "Grand", "Buffet", "''", "AND", "t2.category_name", "=", "``", "category_category_name0", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "city", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "Find all cities in which there is a restaurant called \" MGM Grand Buffet \"", "question_toks": ["Find", "all", "cities", "in", "which", "there", "is", "a", "restaurant", "called", "``", "MGM", "Grand", "Buffet", "``"], "dataset_name": "spider", "guid": 2332}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Which tourist attractions are visited at least twice? Give me their names and ids.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.Name", ",", "T2.Tourist_Attraction_ID", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "GROUP", "BY", "T2.Tourist_Attraction_ID", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "tourist_attraction_id", "from", "tourist_attractions", "as", "t1", "join", "visits", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "group", "by", "t2", ".", "tourist_attraction_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which tourist attractions are visited at least twice? Give me their names and ids.", "question_toks": ["Which", "tourist", "attractions", "are", "visited", "at", "least", "twice", "?", "Give", "me", "their", "names", "and", "ids", "."], "dataset_name": "spider", "guid": 2333}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many rooms have king beds? Report the number for each decor type.", "sql": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;", "example": {"db_id": "inn_1", "query": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;", "query_toks": ["SELECT", "decor", ",", "count", "(", "*", ")", "FROM", "Rooms", "WHERE", "bedType", "=", "``", "King", "''", "GROUP", "BY", "decor", ";"], "query_toks_no_value": ["select", "decor", ",", "count", "(", "*", ")", "from", "rooms", "where", "bedtype", "=", "value", "group", "by", "decor"], "question": "How many rooms have king beds? Report the number for each decor type.", "question_toks": ["How", "many", "rooms", "have", "king", "beds", "?", "Report", "the", "number", "for", "each", "decor", "type", "."], "dataset_name": "spider", "guid": 2334}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | List the names of roller coasters by ascending order of length.", "sql": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC", "example": {"db_id": "roller_coaster", "query": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC", "query_toks": ["SELECT", "Name", "FROM", "roller_coaster", "ORDER", "BY", "LENGTH", "ASC"], "query_toks_no_value": ["select", "name", "from", "roller_coaster", "order", "by", "length", "asc"], "question": "List the names of roller coasters by ascending order of length.", "question_toks": ["List", "the", "names", "of", "roller", "coasters", "by", "ascending", "order", "of", "length", "."], "dataset_name": "spider", "guid": 2335}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | find the number of restaurant rated more than 3.5", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.rating", ">", "3.5", "AND", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "rating", ">", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "find the number of restaurant rated more than 3.5", "question_toks": ["find", "the", "number", "of", "restaurant", "rated", "more", "than", "3.5"], "dataset_name": "spider", "guid": 2336}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what is the best restaurant in the bay area for american food ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", ")", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "what is the best restaurant in the bay area for american food ?", "question_toks": ["what", "is", "the", "best", "restaurant", "in", "the", "bay", "area", "for", "american", "food", "?"], "dataset_name": "spider", "guid": 2337}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are the facility codes of the apartments with more than four bedrooms?", "sql": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  4", "query_toks": ["SELECT", "T1.facility_code", "FROM", "Apartment_Facilities", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T2.bedroom_count", ">", "4"], "query_toks_no_value": ["select", "t1", ".", "facility_code", "from", "apartment_facilities", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t2", ".", "bedroom_count", ">", "value"], "question": "What are the facility codes of the apartments with more than four bedrooms?", "question_toks": ["What", "are", "the", "facility", "codes", "of", "the", "apartments", "with", "more", "than", "four", "bedrooms", "?"], "dataset_name": "spider", "guid": 2338}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the names of rooms that have been reserved for more than 60 times.", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60", "example": {"db_id": "inn_1", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60", "query_toks": ["SELECT", "T2.roomName", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "GROUP", "BY", "T1.Room", "HAVING", "count", "(", "*", ")", ">", "60"], "query_toks_no_value": ["select", "t2", ".", "roomname", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "group", "by", "t1", ".", "room", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the names of rooms that have been reserved for more than 60 times.", "question_toks": ["Find", "the", "names", "of", "rooms", "that", "have", "been", "reserved", "for", "more", "than", "60", "times", "."], "dataset_name": "spider", "guid": 2339}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all businesses in Texas with a rating below 2", "sql": "SELECT name FROM business WHERE rating  <  2 AND state  =  \"Texas\";", "example": {"db_id": "yelp", "query": "SELECT name FROM business WHERE rating  <  2 AND state  =  \"Texas\";", "query_toks": ["SELECT", "name", "FROM", "business", "WHERE", "rating", "<", "2", "AND", "state", "=", "``", "Texas", "''", ";"], "query_toks_no_value": ["select", "name", "from", "business", "where", "rating", "<", "value", "and", "state", "=", "value"], "question": "Find all businesses in Texas with a rating below 2", "question_toks": ["Find", "all", "businesses", "in", "Texas", "with", "a", "rating", "below", "2"], "dataset_name": "spider", "guid": 2340}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | What is the best french in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "What is the best french in san francisco ?", "question_toks": ["What", "is", "the", "best", "french", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2341}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many tips has Michelle written in 2010", "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.text", ")", "FROM", "USER", "AS", "t2", "JOIN", "tip", "AS", "t1", "ON", "t2.user_id", "=", "t1.user_id", "WHERE", "t1.year", "=", "2010", "AND", "t2.name", "=", "``", "Michelle", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "text", ")", "from", "user", "as", "t2", "join", "tip", "as", "t1", "on", "t2", ".", "user_id", "=", "t1", ".", "user_id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "How many tips has Michelle written in 2010", "question_toks": ["How", "many", "tips", "has", "Michelle", "written", "in", "2010"], "dataset_name": "spider", "guid": 2342}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what are some good places in the yosemite and mono lake area for french food ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "yosemite", "and", "mono", "lake", "area", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "what are some good places in the yosemite and mono lake area for french food ?", "question_toks": ["what", "are", "some", "good", "places", "in", "the", "yosemite", "and", "mono", "lake", "area", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2343}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are the booking start and end dates of the apartments with more than 2 bedrooms?", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2", "query_toks": ["SELECT", "T1.booking_start_date", ",", "T1.booking_start_date", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T2.bedroom_count", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "booking_start_date", ",", "t1", ".", "booking_start_date", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t2", ".", "bedroom_count", ">", "value"], "question": "What are the booking start and end dates of the apartments with more than 2 bedrooms?", "question_toks": ["What", "are", "the", "booking", "start", "and", "end", "dates", "of", "the", "apartments", "with", "more", "than", "2", "bedrooms", "?"], "dataset_name": "spider", "guid": 2344}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Which buildings does \"Emma\" manage? Give me the short names of the buildings.", "sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"", "example": {"db_id": "apartment_rentals", "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"", "query_toks": ["SELECT", "building_short_name", "FROM", "Apartment_Buildings", "WHERE", "building_manager", "=", "``", "Emma", "''"], "query_toks_no_value": ["select", "building_short_name", "from", "apartment_buildings", "where", "building_manager", "=", "value"], "question": "Which buildings does \"Emma\" manage? Give me the short names of the buildings.", "question_toks": ["Which", "buildings", "does", "``", "Emma", "''", "manage", "?", "Give", "me", "the", "short", "names", "of", "the", "buildings", "."], "dataset_name": "spider", "guid": 2345}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | How many members are not living in Hartford?", "sql": "SELECT count(*) FROM member WHERE address != 'Hartford'", "example": {"db_id": "coffee_shop", "query": "SELECT count(*) FROM member WHERE address != 'Hartford'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "member", "WHERE", "address", "!", "=", "'Hartford", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "member", "where", "address", "!", "=", "value"], "question": "How many members are not living in Hartford?", "question_toks": ["How", "many", "members", "are", "not", "living", "in", "Hartford", "?"], "dataset_name": "spider", "guid": 2346}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all Bars reviewed by Patrick", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t4", "ON", "t4.user_id", "=", "t3.user_id", "WHERE", "t2.category_name", "=", "``", "Bars", "''", "AND", "t4.name", "=", "``", "Patrick", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t4", "on", "t4", ".", "user_id", "=", "t3", ".", "user_id", "where", "t2", ".", "category_name", "=", "value", "and", "t4", ".", "name", "=", "value"], "question": "Find all Bars reviewed by Patrick", "question_toks": ["Find", "all", "Bars", "reviewed", "by", "Patrick"], "dataset_name": "spider", "guid": 2347}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the tourist attractions visited by the tourist whose detail is 'Vincent'.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"", "query_toks": ["SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "JOIN", "VISITORS", "AS", "T3", "ON", "T2.Tourist_ID", "=", "T3.Tourist_ID", "WHERE", "T3.Tourist_Details", "=", "``", "Vincent", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "visits", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "join", "visitors", "as", "t3", "on", "t2", ".", "tourist_id", "=", "t3", ".", "tourist_id", "where", "t3", ".", "tourist_details", "=", "value"], "question": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.", "question_toks": ["Show", "the", "tourist", "attractions", "visited", "by", "the", "tourist", "whose", "detail", "is", "'Vincent", "'", "."], "dataset_name": "spider", "guid": 2348}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the names and ids of tourist attractions that are visited at least two times.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.Name", ",", "T2.Tourist_Attraction_ID", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "GROUP", "BY", "T2.Tourist_Attraction_ID", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "tourist_attraction_id", "from", "tourist_attractions", "as", "t1", "join", "visits", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "group", "by", "t2", ".", "tourist_attraction_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the names and ids of tourist attractions that are visited at least two times.", "question_toks": ["Show", "the", "names", "and", "ids", "of", "tourist", "attractions", "that", "are", "visited", "at", "least", "two", "times", "."], "dataset_name": "spider", "guid": 2349}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?", "sql": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";", "example": {"db_id": "inn_1", "query": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";", "query_toks": ["SELECT", "Adults", "FROM", "Reservations", "WHERE", "CheckIn", "=", "``", "2010-10-23", "''", "AND", "FirstName", "=", "``", "CONRAD", "''", "AND", "LastName", "=", "``", "SELBIG", "''", ";"], "query_toks_no_value": ["select", "adults", "from", "reservations", "where", "checkin", "=", "value", "and", "firstname", "=", "value", "and", "lastname", "=", "value"], "question": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?", "question_toks": ["How", "many", "adults", "stay", "in", "the", "room", "CONRAD", "SELBIG", "checked", "in", "on", "Oct", "23", ",", "2010", "?"], "dataset_name": "spider", "guid": 2350}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find the users who have given tips on Pet Groomers", "sql": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN tip AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Pet Groomers\";", "example": {"db_id": "yelp", "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN tip AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Pet Groomers\";", "query_toks": ["SELECT", "t4.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "tip", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t4", "ON", "t4.user_id", "=", "t3.user_id", "WHERE", "t2.category_name", "=", "``", "Pet", "Groomers", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "tip", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t4", "on", "t4", ".", "user_id", "=", "t3", ".", "user_id", "where", "t2", ".", "category_name", "=", "value"], "question": "Find the users who have given tips on Pet Groomers", "question_toks": ["Find", "the", "users", "who", "have", "given", "tips", "on", "Pet", "Groomers"], "dataset_name": "spider", "guid": 2351}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What is the name and country for the artist with most number of exhibitions?", "sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "theme_gallery", "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", ",", "T2.country", "FROM", "exhibition", "AS", "T1", "JOIN", "artist", "AS", "T2", "ON", "T1.artist_id", "=", "T2.artist_id", "GROUP", "BY", "T1.artist_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "country", "from", "exhibition", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "group", "by", "t1", ".", "artist_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and country for the artist with most number of exhibitions?", "question_toks": ["What", "is", "the", "name", "and", "country", "for", "the", "artist", "with", "most", "number", "of", "exhibitions", "?"], "dataset_name": "spider", "guid": 2352}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show different tourist attractions' names, ids, and the corresponding number of visits.", "sql": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name ,  T2.Tourist_Attraction_ID ,   COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Tourist_Attraction_ID", ",", "COUNT", "(", "*", ")", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "GROUP", "BY", "T2.Tourist_Attraction_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "tourist_attraction_id", ",", "count", "(", "*", ")", "from", "tourist_attractions", "as", "t1", "join", "visits", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "group", "by", "t2", ".", "tourist_attraction_id"], "question": "Show different tourist attractions' names, ids, and the corresponding number of visits.", "question_toks": ["Show", "different", "tourist", "attractions", "'", "names", ",", "ids", ",", "and", "the", "corresponding", "number", "of", "visits", "."], "dataset_name": "spider", "guid": 2353}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Show theme and year for all exhibitions in an descending order of ticket price.", "sql": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC", "example": {"db_id": "theme_gallery", "query": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC", "query_toks": ["SELECT", "theme", ",", "YEAR", "FROM", "exhibition", "ORDER", "BY", "ticket_price", "DESC"], "query_toks_no_value": ["select", "theme", ",", "year", "from", "exhibition", "order", "by", "ticket_price", "desc"], "question": "Show theme and year for all exhibitions in an descending order of ticket price.", "question_toks": ["Show", "theme", "and", "year", "for", "all", "exhibitions", "in", "an", "descending", "order", "of", "ticket", "price", "."], "dataset_name": "spider", "guid": 2354}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | Show the shop addresses ordered by their opening year.", "sql": "SELECT address FROM shop ORDER BY open_year", "example": {"db_id": "coffee_shop", "query": "SELECT address FROM shop ORDER BY open_year", "query_toks": ["SELECT", "address", "FROM", "shop", "ORDER", "BY", "open_year"], "query_toks_no_value": ["select", "address", "from", "shop", "order", "by", "open_year"], "question": "Show the shop addresses ordered by their opening year.", "question_toks": ["Show", "the", "shop", "addresses", "ordered", "by", "their", "opening", "year", "."], "dataset_name": "spider", "guid": 2355}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the average and minimum price of the rooms in different decor.", "sql": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;", "example": {"db_id": "inn_1", "query": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;", "query_toks": ["SELECT", "decor", ",", "avg", "(", "basePrice", ")", ",", "min", "(", "basePrice", ")", "FROM", "Rooms", "GROUP", "BY", "decor", ";"], "query_toks_no_value": ["select", "decor", ",", "avg", "(", "baseprice", ")", ",", "min", "(", "baseprice", ")", "from", "rooms", "group", "by", "decor"], "question": "Find the average and minimum price of the rooms in different decor.", "question_toks": ["Find", "the", "average", "and", "minimum", "price", "of", "the", "rooms", "in", "different", "decor", "."], "dataset_name": "spider", "guid": 2356}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all users who reviewed businesses that are restaurant .", "sql": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t4.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t4", "ON", "t4.user_id", "=", "t3.user_id", "WHERE", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t4", "on", "t4", ".", "user_id", "=", "t3", ".", "user_id", "where", "t2", ".", "category_name", "=", "value"], "question": "List all users who reviewed businesses that are restaurant .", "question_toks": ["List", "all", "users", "who", "reviewed", "businesses", "that", "are", "restaurant", "."], "dataset_name": "spider", "guid": 2357}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some good arabics in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some good arabics in mountain view ?", "question_toks": ["give", "me", "some", "good", "arabics", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2358}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"", "query_toks": ["SELECT", "T2.Name", "FROM", "Locations", "AS", "T1", "JOIN", "Tourist_Attractions", "AS", "T2", "ON", "T1.Location_ID", "=", "T2.Location_ID", "WHERE", "T1.Address", "=", "``", "254", "Ottilie", "Junction", "''", "OR", "T2.How_to_Get_There", "=", "``", "bus", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "locations", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "location_id", "=", "t2", ".", "location_id", "where", "t1", ".", "address", "=", "value", "or", "t2", ".", "how_to_get_there", "=", "value"], "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.", "question_toks": ["Find", "the", "names", "of", "the", "tourist", "attractions", "that", "is", "either", "accessible", "by", "bus", "or", "at", "address", "254", "Ottilie", "Junction", "."], "dataset_name": "spider", "guid": 2359}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | Show the name and population of the country that has the highest roller coaster.", "sql": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1", "example": {"db_id": "roller_coaster", "query": "SELECT T1.Name ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID ORDER BY T2.Height DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", ",", "T1.population", "FROM", "country", "AS", "T1", "JOIN", "roller_coaster", "AS", "T2", "ON", "T1.Country_ID", "=", "T2.Country_ID", "ORDER", "BY", "T2.Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "population", "from", "country", "as", "t1", "join", "roller_coaster", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "order", "by", "t2", ".", "height", "desc", "limit", "value"], "question": "Show the name and population of the country that has the highest roller coaster.", "question_toks": ["Show", "the", "name", "and", "population", "of", "the", "country", "that", "has", "the", "highest", "roller", "coaster", "."], "dataset_name": "spider", "guid": 2360}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find the business which has the most number of categories", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "GROUP", "BY", "t1.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t2.category_name", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "distinct", "t2", ".", "category_name", ")", "desc", "limit", "value"], "question": "Find the business which has the most number of categories", "question_toks": ["Find", "the", "business", "which", "has", "the", "most", "number", "of", "categories"], "dataset_name": "spider", "guid": 2361}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all reviews by Patrick with a rating above 4", "sql": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  \"Patrick\";", "example": {"db_id": "yelp", "query": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  \"Patrick\";", "query_toks": ["SELECT", "t1.text", "FROM", "USER", "AS", "t2", "JOIN", "review", "AS", "t1", "ON", "t2.user_id", "=", "t1.user_id", "WHERE", "t1.rating", ">", "4", "AND", "t2.name", "=", "``", "Patrick", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "text", "from", "user", "as", "t2", "join", "review", "as", "t1", "on", "t2", ".", "user_id", "=", "t1", ".", "user_id", "where", "t1", ".", "rating", ">", "value", "and", "t2", ".", "name", "=", "value"], "question": "Find all reviews by Patrick with a rating above 4", "question_toks": ["Find", "all", "reviews", "by", "Patrick", "with", "a", "rating", "above", "4"], "dataset_name": "spider", "guid": 2362}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a good restaurant in the yosemite and mono lake area for french food ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "yosemite", "and", "mono", "lake", "area", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a good restaurant in the yosemite and mono lake area for french food ?", "question_toks": ["where", "is", "a", "good", "restaurant", "in", "the", "yosemite", "and", "mono", "lake", "area", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2363}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the most common apartment type code among apartments with more than 1 bathroom.", "sql": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code FROM Apartments WHERE bathroom_count  >  1 GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "apt_type_code", "FROM", "Apartments", "WHERE", "bathroom_count", ">", "1", "GROUP", "BY", "apt_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "apt_type_code", "from", "apartments", "where", "bathroom_count", ">", "value", "group", "by", "apt_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common apartment type code among apartments with more than 1 bathroom.", "question_toks": ["Show", "the", "most", "common", "apartment", "type", "code", "among", "apartments", "with", "more", "than", "1", "bathroom", "."], "dataset_name": "spider", "guid": 2364}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"", "query_toks": ["SELECT", "T2.Name", "FROM", "Locations", "AS", "T1", "JOIN", "Tourist_Attractions", "AS", "T2", "ON", "T1.Location_ID", "=", "T2.Location_ID", "WHERE", "T1.Address", "=", "``", "660", "Shea", "Crescent", "''", "OR", "T2.How_to_Get_There", "=", "``", "walk", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "locations", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "location_id", "=", "t2", ".", "location_id", "where", "t1", ".", "address", "=", "value", "or", "t2", ".", "how_to_get_there", "=", "value"], "question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?", "question_toks": ["What", "are", "the", "names", "of", "tourist", "attractions", "that", "can", "be", "reached", "by", "walk", "or", "is", "at", "address", "660", "Shea", "Crescent", "?"], "dataset_name": "spider", "guid": 2365}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Show all artist names and the year joined who are not from United States.", "sql": "SELECT name ,  year_join FROM artist WHERE country != 'United States'", "example": {"db_id": "theme_gallery", "query": "SELECT name ,  year_join FROM artist WHERE country != 'United States'", "query_toks": ["SELECT", "name", ",", "year_join", "FROM", "artist", "WHERE", "country", "!", "=", "'United", "States", "'"], "query_toks_no_value": ["select", "name", ",", "year_join", "from", "artist", "where", "country", "!", "=", "value"], "question": "Show all artist names and the year joined who are not from United States.", "question_toks": ["Show", "all", "artist", "names", "and", "the", "year", "joined", "who", "are", "not", "from", "United", "States", "."], "dataset_name": "spider", "guid": 2366}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | find the total checkins in Moroccan restaurant in \" Los Angeles \"", "sql": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Moroccan\";", "example": {"db_id": "yelp", "query": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Moroccan\";", "query_toks": ["SELECT", "SUM", "(", "t4.count", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "checkin", "AS", "t4", "ON", "t4.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Los", "Angeles", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", "AND", "t3.category_name", "=", "``", "Moroccan", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t4", ".", "count", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "checkin", "as", "t4", "on", "t4", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value"], "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \"", "question_toks": ["find", "the", "total", "checkins", "in", "Moroccan", "restaurant", "in", "``", "Los", "Angeles", "``"], "dataset_name": "spider", "guid": 2367}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a restaurant in the bay area ?", "sql": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "LOCATION", "AS", "t2", "JOIN", "restaurant", "AS", "t1", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t1.city_name", "IN", "(", "SELECT", "city_name", "FROM", "geographic", "WHERE", "region", "=", "``", "bay", "area", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "location", "as", "t2", "join", "restaurant", "as", "t1", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t1", ".", "city_name", "in", "(", "select", "city_name", "from", "geographic", "where", "region", "=", "value", ")"], "question": "give me a restaurant in the bay area ?", "question_toks": ["give", "me", "a", "restaurant", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2368}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Show all artist names and the number of exhibitions for each artist.", "sql": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id", "example": {"db_id": "theme_gallery", "query": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "exhibition", "AS", "T1", "JOIN", "artist", "AS", "T2", "ON", "T1.artist_id", "=", "T2.artist_id", "GROUP", "BY", "T1.artist_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "exhibition", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "group", "by", "t1", ".", "artist_id"], "question": "Show all artist names and the number of exhibitions for each artist.", "question_toks": ["Show", "all", "artist", "names", "and", "the", "number", "of", "exhibitions", "for", "each", "artist", "."], "dataset_name": "spider", "guid": 2369}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good restaurant in alameda ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "alameda", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good restaurant in alameda ?", "question_toks": ["give", "me", "a", "good", "restaurant", "in", "alameda", "?"], "dataset_name": "spider", "guid": 2370}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what are some good restaurants in alameda ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "alameda", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "what are some good restaurants in alameda ?", "question_toks": ["what", "are", "some", "good", "restaurants", "in", "alameda", "?"], "dataset_name": "spider", "guid": 2371}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Give me the detail and opening hour for each museum.", "sql": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Museum_Details ,  T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID  =  T2.Tourist_Attraction_ID", "query_toks": ["SELECT", "T1.Museum_Details", ",", "T2.Opening_Hours", "FROM", "MUSEUMS", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Museum_ID", "=", "T2.Tourist_Attraction_ID"], "query_toks_no_value": ["select", "t1", ".", "museum_details", ",", "t2", ".", "opening_hours", "from", "museums", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "museum_id", "=", "t2", ".", "tourist_attraction_id"], "question": "Give me the detail and opening hour for each museum.", "question_toks": ["Give", "me", "the", "detail", "and", "opening", "hour", "for", "each", "museum", "."], "dataset_name": "spider", "guid": 2372}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some restaurants in alameda ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "alameda", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value"], "question": "give me some restaurants in alameda ?", "question_toks": ["give", "me", "some", "restaurants", "in", "alameda", "?"], "dataset_name": "spider", "guid": 2373}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many people in total can stay in the modern rooms of this inn?", "sql": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';", "example": {"db_id": "inn_1", "query": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern';", "query_toks": ["SELECT", "sum", "(", "maxOccupancy", ")", "FROM", "Rooms", "WHERE", "decor", "=", "'modern", "'", ";"], "query_toks_no_value": ["select", "sum", "(", "maxoccupancy", ")", "from", "rooms", "where", "decor", "=", "value"], "question": "How many people in total can stay in the modern rooms of this inn?", "question_toks": ["How", "many", "people", "in", "total", "can", "stay", "in", "the", "modern", "rooms", "of", "this", "inn", "?"], "dataset_name": "spider", "guid": 2374}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | Show the names of roller coasters and names of country they are in.", "sql": "SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID", "example": {"db_id": "roller_coaster", "query": "SELECT T2.Name ,  T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID", "query_toks": ["SELECT", "T2.Name", ",", "T1.Name", "FROM", "country", "AS", "T1", "JOIN", "roller_coaster", "AS", "T2", "ON", "T1.Country_ID", "=", "T2.Country_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "name", "from", "country", "as", "t1", "join", "roller_coaster", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id"], "question": "Show the names of roller coasters and names of country they are in.", "question_toks": ["Show", "the", "names", "of", "roller", "coasters", "and", "names", "of", "country", "they", "are", "in", "."], "dataset_name": "spider", "guid": 2375}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all tips for \" Cafe Zinho \" in Texas .", "sql": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\";", "example": {"db_id": "yelp", "query": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\";", "query_toks": ["SELECT", "t2.text", "FROM", "tip", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.name", "=", "``", "Cafe", "Zinho", "''", "AND", "t1.state", "=", "``", "Texas", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "text", "from", "tip", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "name", "=", "value", "and", "t1", ".", "state", "=", "value"], "question": "Find all tips for \" Cafe Zinho \" in Texas .", "question_toks": ["Find", "all", "tips", "for", "``", "Cafe", "Zinho", "``", "in", "Texas", "."], "dataset_name": "spider", "guid": 2376}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What is the detail of each visitor?", "sql": "SELECT Tourist_Details FROM VISITORS", "example": {"db_id": "cre_Theme_park", "query": "SELECT Tourist_Details FROM VISITORS", "query_toks": ["SELECT", "Tourist_Details", "FROM", "VISITORS"], "query_toks_no_value": ["select", "tourist_details", "from", "visitors"], "question": "What is the detail of each visitor?", "question_toks": ["What", "is", "the", "detail", "of", "each", "visitor", "?"], "dataset_name": "spider", "guid": 2377}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Return the decor of the room named \"Recluse and defiance\".", "sql": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";", "example": {"db_id": "inn_1", "query": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\";", "query_toks": ["SELECT", "decor", "FROM", "Rooms", "WHERE", "roomName", "=", "``", "Recluse", "and", "defiance", "''", ";"], "query_toks_no_value": ["select", "decor", "from", "rooms", "where", "roomname", "=", "value"], "question": "Return the decor of the room named \"Recluse and defiance\".", "question_toks": ["Return", "the", "decor", "of", "the", "room", "named", "``", "Recluse", "and", "defiance", "''", "."], "dataset_name": "spider", "guid": 2378}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | how many chinese restaurants are there in the bay area ?", "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";", "example": {"db_id": "restaurants", "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "chinese", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value"], "question": "how many chinese restaurants are there in the bay area ?", "question_toks": ["how", "many", "chinese", "restaurants", "are", "there", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2379}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What are the names of rooms whose reservation frequency exceeds 60 times?", "sql": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60", "example": {"db_id": "inn_1", "query": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60", "query_toks": ["SELECT", "T2.roomName", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "GROUP", "BY", "T1.Room", "HAVING", "count", "(", "*", ")", ">", "60"], "query_toks_no_value": ["select", "t2", ".", "roomname", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "group", "by", "t1", ".", "room", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of rooms whose reservation frequency exceeds 60 times?", "question_toks": ["What", "are", "the", "names", "of", "rooms", "whose", "reservation", "frequency", "exceeds", "60", "times", "?"], "dataset_name": "spider", "guid": 2380}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the price ranges of five star hotels?", "sql": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"", "query_toks": ["SELECT", "price_range", "FROM", "HOTELS", "WHERE", "star_rating_code", "=", "``", "5", "''"], "query_toks_no_value": ["select", "price_range", "from", "hotels", "where", "star_rating_code", "=", "value"], "question": "What are the price ranges of five star hotels?", "question_toks": ["What", "are", "the", "price", "ranges", "of", "five", "star", "hotels", "?"], "dataset_name": "spider", "guid": 2381}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many rooms are there?", "sql": "SELECT count(*) FROM Rooms;", "example": {"db_id": "inn_1", "query": "SELECT count(*) FROM Rooms;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Rooms", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "rooms"], "question": "How many rooms are there?", "question_toks": ["How", "many", "rooms", "are", "there", "?"], "dataset_name": "spider", "guid": 2382}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | What are the speeds of the longest roller coaster?", "sql": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1", "example": {"db_id": "roller_coaster", "query": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1", "query_toks": ["SELECT", "Speed", "FROM", "roller_coaster", "ORDER", "BY", "LENGTH", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "speed", "from", "roller_coaster", "order", "by", "length", "desc", "limit", "value"], "question": "What are the speeds of the longest roller coaster?", "question_toks": ["What", "are", "the", "speeds", "of", "the", "longest", "roller", "coaster", "?"], "dataset_name": "spider", "guid": 2383}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"", "query_toks": ["SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITORS", "AS", "T2", "JOIN", "VISITS", "AS", "T3", "ON", "T1.Tourist_Attraction_ID", "=", "T3.Tourist_Attraction_ID", "AND", "T2.Tourist_ID", "=", "T3.Tourist_ID", "WHERE", "T2.Tourist_Details", "=", "``", "Alison", "''", "EXCEPT", "SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITORS", "AS", "T2", "JOIN", "VISITS", "AS", "T3", "ON", "T1.Tourist_Attraction_ID", "=", "T3.Tourist_Attraction_ID", "AND", "T2.Tourist_ID", "=", "T3.Tourist_ID", "WHERE", "T2.Tourist_Details", "=", "``", "Rosalind", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "visitors", "as", "t2", "join", "visits", "as", "t3", "on", "t1", ".", "tourist_attraction_id", "=", "t3", ".", "tourist_attraction_id", "and", "t2", ".", "tourist_id", "=", "t3", ".", "tourist_id", "where", "t2", ".", "tourist_details", "=", "value", "except", "select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "visitors", "as", "t2", "join", "visits", "as", "t3", "on", "t1", ".", "tourist_attraction_id", "=", "t3", ".", "tourist_attraction_id", "and", "t2", ".", "tourist_id", "=", "t3", ".", "tourist_id", "where", "t2", ".", "tourist_details", "=", "value"], "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.", "question_toks": ["Find", "the", "the", "names", "of", "the", "tourist", "attractions", "that", "the", "tourist", "named", "Alison", "visited", "but", "Rosalind", "did", "not", "visit", "."], "dataset_name": "spider", "guid": 2384}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Count the number of artists who are older than 46 and joined after 1990.", "sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990", "example": {"db_id": "theme_gallery", "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "artist", "WHERE", "age", ">", "46", "AND", "year_join", ">", "1990"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artist", "where", "age", ">", "value", "and", "year_join", ">", "value"], "question": "Count the number of artists who are older than 46 and joined after 1990.", "question_toks": ["Count", "the", "number", "of", "artists", "who", "are", "older", "than", "46", "and", "joined", "after", "1990", "."], "dataset_name": "spider", "guid": 2385}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What is the detail of the location UK Gallery?", "sql": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "query_toks": ["SELECT", "Other_Details", "FROM", "LOCATIONS", "WHERE", "Location_Name", "=", "``", "UK", "Gallery", "''"], "query_toks_no_value": ["select", "other_details", "from", "locations", "where", "location_name", "=", "value"], "question": "What is the detail of the location UK Gallery?", "question_toks": ["What", "is", "the", "detail", "of", "the", "location", "UK", "Gallery", "?"], "dataset_name": "spider", "guid": 2386}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.", "sql": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "example": {"db_id": "apartment_rentals", "query": "SELECT gender_code ,  COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "gender_code", ",", "COUNT", "(", "*", ")", "FROM", "Guests", "GROUP", "BY", "gender_code", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "gender_code", ",", "count", "(", "*", ")", "from", "guests", "group", "by", "gender_code", "order", "by", "count", "(", "*", ")", "desc"], "question": "Sort the gender codes in descending order of their corresponding number of guests. Return both the gender codes and counts.", "question_toks": ["Sort", "the", "gender", "codes", "in", "descending", "order", "of", "their", "corresponding", "number", "of", "guests", ".", "Return", "both", "the", "gender", "codes", "and", "counts", "."], "dataset_name": "spider", "guid": 2387}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find the total number of reviews written in March", "sql": "SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH  =  \"March\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH  =  \"March\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "text", ")", "FROM", "review", "WHERE", "MONTH", "=", "``", "March", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "text", ")", "from", "review", "where", "month", "=", "value"], "question": "Find the total number of reviews written in March", "question_toks": ["Find", "the", "total", "number", "of", "reviews", "written", "in", "March"], "dataset_name": "spider", "guid": 2388}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | When did Linda Smith visit Subway?", "sql": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";", "example": {"db_id": "restaurant_1", "query": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";", "query_toks": ["SELECT", "TIME", "FROM", "Student", "JOIN", "Visits_Restaurant", "ON", "Student.StuID", "=", "Visits_Restaurant.StuID", "JOIN", "Restaurant", "ON", "Visits_Restaurant.ResID", "=", "Restaurant.ResID", "WHERE", "Student.Fname", "=", "``", "Linda", "''", "AND", "Student.Lname", "=", "``", "Smith", "''", "AND", "Restaurant.ResName", "=", "``", "Subway", "''", ";"], "query_toks_no_value": ["select", "time", "from", "student", "join", "visits_restaurant", "on", "student.stuid", "=", "visits_restaurant.stuid", "join", "restaurant", "on", "visits_restaurant.resid", "=", "restaurant.resid", "where", "student.fname", "=", "value", "and", "student.lname", "=", "value", "and", "restaurant.resname", "=", "value"], "question": "When did Linda Smith visit Subway?", "question_toks": ["When", "did", "Linda", "Smith", "visit", "Subway", "?"], "dataset_name": "spider", "guid": 2389}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | Which months have more than 2 happy hours?", "sql": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2", "example": {"db_id": "coffee_shop", "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2", "query_toks": ["SELECT", "MONTH", "FROM", "happy_hour", "GROUP", "BY", "MONTH", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "month", "from", "happy_hour", "group", "by", "month", "having", "count", "(", "*", ")", ">", "value"], "question": "Which months have more than 2 happy hours?", "question_toks": ["Which", "months", "have", "more", "than", "2", "happy", "hours", "?"], "dataset_name": "spider", "guid": 2390}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the details of the markets that can be accessed by walk or bus?", "sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"", "query_toks": ["SELECT", "T1.Market_Details", "FROM", "Street_Markets", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Tourist_Attraction_ID", "WHERE", "T2.How_to_Get_There", "=", "``", "walk", "''", "OR", "T2.How_to_Get_There", "=", "``", "bus", "''"], "query_toks_no_value": ["select", "t1", ".", "market_details", "from", "street_markets", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "tourist_attraction_id", "where", "t2", ".", "how_to_get_there", "=", "value", "or", "t2", ".", "how_to_get_there", "=", "value"], "question": "What are the details of the markets that can be accessed by walk or bus?", "question_toks": ["What", "are", "the", "details", "of", "the", "markets", "that", "can", "be", "accessed", "by", "walk", "or", "bus", "?"], "dataset_name": "spider", "guid": 2391}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all 5 star Italian restaurant", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  \"Italian\" AND t3.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  \"Italian\" AND t3.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "WHERE", "t1.rating", "=", "5", "AND", "t2.category_name", "=", "``", "Italian", "''", "AND", "t3.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "rating", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value"], "question": "List all 5 star Italian restaurant", "question_toks": ["List", "all", "5", "star", "Italian", "restaurant"], "dataset_name": "spider", "guid": 2392}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | find the total checkins in Moroccan restaurant in \" Los Angeles \" on Friday", "sql": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" AND t4.day  =  \"Friday\";", "example": {"db_id": "yelp", "query": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" AND t4.day  =  \"Friday\";", "query_toks": ["SELECT", "SUM", "(", "t4.count", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "checkin", "AS", "t4", "ON", "t4.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Los", "Angeles", "''", "AND", "t2.category_name", "=", "``", "Moroccan", "''", "AND", "t3.category_name", "=", "``", "restaurant", "''", "AND", "t4.day", "=", "``", "Friday", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t4", ".", "count", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "checkin", "as", "t4", "on", "t4", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value", "and", "t4", ".", "day", "=", "value"], "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \" on Friday", "question_toks": ["find", "the", "total", "checkins", "in", "Moroccan", "restaurant", "in", "``", "Los", "Angeles", "``", "on", "Friday"], "dataset_name": "spider", "guid": 2393}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | which shop has happy hour most frequently? List its id and number of happy hours.", "sql": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "coffee_shop", "query": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "shop_id", ",", "count", "(", "*", ")", "FROM", "happy_hour", "GROUP", "BY", "shop_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "shop_id", ",", "count", "(", "*", ")", "from", "happy_hour", "group", "by", "shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "which shop has happy hour most frequently? List its id and number of happy hours.", "question_toks": ["which", "shop", "has", "happy", "hour", "most", "frequently", "?", "List", "its", "id", "and", "number", "of", "happy", "hours", "."], "dataset_name": "spider", "guid": 2394}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the number of rooms with price higher than 120 for different decor.", "sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;", "example": {"db_id": "inn_1", "query": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;", "query_toks": ["SELECT", "decor", ",", "count", "(", "*", ")", "FROM", "Rooms", "WHERE", "basePrice", ">", "120", "GROUP", "BY", "decor", ";"], "query_toks_no_value": ["select", "decor", ",", "count", "(", "*", ")", "from", "rooms", "where", "baseprice", ">", "value", "group", "by", "decor"], "question": "Find the number of rooms with price higher than 120 for different decor.", "question_toks": ["Find", "the", "number", "of", "rooms", "with", "price", "higher", "than", "120", "for", "different", "decor", "."], "dataset_name": "spider", "guid": 2395}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | how many denny are there in the bay area ?", "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";", "example": {"db_id": "restaurants", "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.name", "=", "``", "denny", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "how many denny are there in the bay area ?", "question_toks": ["how", "many", "denny", "are", "there", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2396}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".", "sql": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"", "example": {"db_id": "apartment_rentals", "query": "SELECT T2.apt_type_code ,  T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id  =  T2.building_id WHERE T1.building_manager  =  \"Kyle\"", "query_toks": ["SELECT", "T2.apt_type_code", ",", "T2.apt_number", "FROM", "Apartment_Buildings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.building_id", "=", "T2.building_id", "WHERE", "T1.building_manager", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "t2", ".", "apt_type_code", ",", "t2", ".", "apt_number", "from", "apartment_buildings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "building_id", "where", "t1", ".", "building_manager", "=", "value"], "question": "Show the apartment type codes and apartment numbers in the buildings managed by \"Kyle\".", "question_toks": ["Show", "the", "apartment", "type", "codes", "and", "apartment", "numbers", "in", "the", "buildings", "managed", "by", "``", "Kyle", "''", "."], "dataset_name": "spider", "guid": 2397}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | Which restaurants have highest rating? List the restaurant name and its rating.", "sql": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;", "example": {"db_id": "restaurant_1", "query": "SELECT ResName , Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1;", "query_toks": ["SELECT", "ResName", ",", "Rating", "FROM", "Restaurant", "ORDER", "BY", "Rating", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "resname", ",", "rating", "from", "restaurant", "order", "by", "rating", "desc", "limit", "value"], "question": "Which restaurants have highest rating? List the restaurant name and its rating.", "question_toks": ["Which", "restaurants", "have", "highest", "rating", "?", "List", "the", "restaurant", "name", "and", "its", "rating", "."], "dataset_name": "spider", "guid": 2398}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the first and last names of people who payed more than the rooms' base prices.", "sql": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0", "example": {"db_id": "inn_1", "query": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0", "query_toks": ["SELECT", "T1.firstname", ",", "T1.lastname", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "WHERE", "T1.Rate", "-", "T2.basePrice", ">", "0"], "query_toks_no_value": ["select", "t1", ".", "firstname", ",", "t1", ".", "lastname", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "where", "t1", ".", "rate", "-", "t2", ".", "baseprice", ">", "value"], "question": "Find the first and last names of people who payed more than the rooms' base prices.", "question_toks": ["Find", "the", "first", "and", "last", "names", "of", "people", "who", "payed", "more", "than", "the", "rooms", "'", "base", "prices", "."], "dataset_name": "spider", "guid": 2399}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find the total number of available hotels.", "sql": "SELECT count(*) FROM HOTELS", "example": {"db_id": "cre_Theme_park", "query": "SELECT count(*) FROM HOTELS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "HOTELS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "hotels"], "question": "Find the total number of available hotels.", "question_toks": ["Find", "the", "total", "number", "of", "available", "hotels", "."], "dataset_name": "spider", "guid": 2400}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the number of distinct bed types available in this inn.", "sql": "SELECT count(DISTINCT bedType) FROM Rooms;", "example": {"db_id": "inn_1", "query": "SELECT count(DISTINCT bedType) FROM Rooms;", "query_toks": ["SELECT", "count", "(", "DISTINCT", "bedType", ")", "FROM", "Rooms", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "bedtype", ")", "from", "rooms"], "question": "Find the number of distinct bed types available in this inn.", "question_toks": ["Find", "the", "number", "of", "distinct", "bed", "types", "available", "in", "this", "inn", "."], "dataset_name": "spider", "guid": 2401}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "sql": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "example": {"db_id": "museum_visit", "query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC", "query_toks": ["SELECT", "name", ",", "Level_of_membership", "FROM", "visitor", "WHERE", "Level_of_membership", ">", "4", "ORDER", "BY", "age", "DESC"], "query_toks_no_value": ["select", "name", ",", "level_of_membership", "from", "visitor", "where", "level_of_membership", ">", "value", "order", "by", "age", "desc"], "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "question_toks": ["Find", "the", "name", "and", "membership", "level", "of", "the", "visitors", "whose", "membership", "level", "is", "higher", "than", "4", ",", "and", "sort", "by", "their", "age", "from", "old", "to", "young", "."], "dataset_name": "spider", "guid": 2402}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | What are the id and name of the museum visited most times?", "sql": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "museum_visit", "query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.Museum_ID", ",", "t1.name", "FROM", "museum", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.Museum_ID", "=", "t2.Museum_ID", "GROUP", "BY", "t2.Museum_ID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "museum_id", ",", "t1", ".", "name", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "museum_id", "=", "t2", ".", "museum_id", "group", "by", "t2", ".", "museum_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the id and name of the museum visited most times?", "question_toks": ["What", "are", "the", "id", "and", "name", "of", "the", "museum", "visited", "most", "times", "?"], "dataset_name": "spider", "guid": 2403}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What is the minimum and maximum number of bathrooms of all the apartments?", "sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments", "example": {"db_id": "apartment_rentals", "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments", "query_toks": ["SELECT", "min", "(", "bathroom_count", ")", ",", "max", "(", "bathroom_count", ")", "FROM", "Apartments"], "query_toks_no_value": ["select", "min", "(", "bathroom_count", ")", ",", "max", "(", "bathroom_count", ")", "from", "apartments"], "question": "What is the minimum and maximum number of bathrooms of all the apartments?", "question_toks": ["What", "is", "the", "minimum", "and", "maximum", "number", "of", "bathrooms", "of", "all", "the", "apartments", "?"], "dataset_name": "spider", "guid": 2404}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | how many buttercup kitchen are there in san francisco ?", "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"buttercup kitchen\";", "example": {"db_id": "restaurants", "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"buttercup kitchen\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.name", "=", "``", "buttercup", "kitchen", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "how many buttercup kitchen are there in san francisco ?", "question_toks": ["how", "many", "buttercup", "kitchen", "are", "there", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2405}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | show me a good arabic restaurant in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "show me a good arabic restaurant in mountain view ?", "question_toks": ["show", "me", "a", "good", "arabic", "restaurant", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2406}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | what is the average rating given in Michelle reviews", "sql": "SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";", "example": {"db_id": "yelp", "query": "SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";", "query_toks": ["SELECT", "AVG", "(", "t1.rating", ")", "FROM", "USER", "AS", "t2", "JOIN", "review", "AS", "t1", "ON", "t2.user_id", "=", "t1.user_id", "WHERE", "t2.name", "=", "``", "Michelle", "''", ";"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "rating", ")", "from", "user", "as", "t2", "join", "review", "as", "t1", "on", "t2", ".", "user_id", "=", "t1", ".", "user_id", "where", "t2", ".", "name", "=", "value"], "question": "what is the average rating given in Michelle reviews", "question_toks": ["what", "is", "the", "average", "rating", "given", "in", "Michelle", "reviews"], "dataset_name": "spider", "guid": 2407}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a restaurant in mountain view that serves good arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a restaurant in mountain view that serves good arabic food ?", "question_toks": ["where", "is", "a", "restaurant", "in", "mountain", "view", "that", "serves", "good", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2408}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what is the best restaurant in bay area for american food ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", ")", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "what is the best restaurant in bay area for american food ?", "question_toks": ["what", "is", "the", "best", "restaurant", "in", "bay", "area", "for", "american", "food", "?"], "dataset_name": "spider", "guid": 2409}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the names of the tourist attractions that can be accessed by bus?", "sql": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"", "query_toks": ["SELECT", "Name", "FROM", "TOURIST_ATTRACTIONS", "WHERE", "How_to_Get_There", "=", "``", "bus", "''"], "query_toks_no_value": ["select", "name", "from", "tourist_attractions", "where", "how_to_get_there", "=", "value"], "question": "What are the names of the tourist attractions that can be accessed by bus?", "question_toks": ["What", "are", "the", "names", "of", "the", "tourist", "attractions", "that", "can", "be", "accessed", "by", "bus", "?"], "dataset_name": "spider", "guid": 2410}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | Find the purchase time, age and address of each member, and show the results in the order of purchase time.", "sql": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase", "example": {"db_id": "coffee_shop", "query": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase", "query_toks": ["SELECT", "Time_of_purchase", ",", "age", ",", "address", "FROM", "member", "ORDER", "BY", "Time_of_purchase"], "query_toks_no_value": ["select", "time_of_purchase", ",", "age", ",", "address", "from", "member", "order", "by", "time_of_purchase"], "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.", "question_toks": ["Find", "the", "purchase", "time", ",", "age", "and", "address", "of", "each", "member", ",", "and", "show", "the", "results", "in", "the", "order", "of", "purchase", "time", "."], "dataset_name": "spider", "guid": 2411}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | find the number of reviews written for \" Cafe Zinho \" restaurant in Texas", "sql": "SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.text", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "WHERE", "t1.name", "=", "``", "Cafe", "Zinho", "''", "AND", "t1.state", "=", "``", "Texas", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "text", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "name", "=", "value", "and", "t1", ".", "state", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "find the number of reviews written for \" Cafe Zinho \" restaurant in Texas", "question_toks": ["find", "the", "number", "of", "reviews", "written", "for", "``", "Cafe", "Zinho", "``", "restaurant", "in", "Texas"], "dataset_name": "spider", "guid": 2412}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are the guest first name, start date, and end date of each apartment booking?", "sql": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id", "example": {"db_id": "apartment_rentals", "query": "SELECT T2.guest_first_name ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id", "query_toks": ["SELECT", "T2.guest_first_name", ",", "T1.booking_start_date", ",", "T1.booking_start_date", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Guests", "AS", "T2", "ON", "T1.guest_id", "=", "T2.guest_id"], "query_toks_no_value": ["select", "t2", ".", "guest_first_name", ",", "t1", ".", "booking_start_date", ",", "t1", ".", "booking_start_date", "from", "apartment_bookings", "as", "t1", "join", "guests", "as", "t2", "on", "t1", ".", "guest_id", "=", "t2", ".", "guest_id"], "question": "What are the guest first name, start date, and end date of each apartment booking?", "question_toks": ["What", "are", "the", "guest", "first", "name", ",", "start", "date", ",", "and", "end", "date", "of", "each", "apartment", "booking", "?"], "dataset_name": "spider", "guid": 2413}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many rooms have a king bed?", "sql": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";", "example": {"db_id": "inn_1", "query": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Rooms", "WHERE", "bedType", "=", "``", "King", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "rooms", "where", "bedtype", "=", "value"], "question": "How many rooms have a king bed?", "question_toks": ["How", "many", "rooms", "have", "a", "king", "bed", "?"], "dataset_name": "spider", "guid": 2414}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the number of rooms that do not have any reservation.", "sql": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "example": {"db_id": "inn_1", "query": "SELECT count(*) FROM rooms WHERE roomid NOT IN (SELECT DISTINCT room FROM reservations)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "rooms", "WHERE", "roomid", "NOT", "IN", "(", "SELECT", "DISTINCT", "room", "FROM", "reservations", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "rooms", "where", "roomid", "not", "in", "(", "select", "distinct", "room", "from", "reservations", ")"], "question": "Find the number of rooms that do not have any reservation.", "question_toks": ["Find", "the", "number", "of", "rooms", "that", "do", "not", "have", "any", "reservation", "."], "dataset_name": "spider", "guid": 2415}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the details of the shops that can be accessed by walk?", "sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"", "query_toks": ["SELECT", "T1.Shop_Details", "FROM", "SHOPS", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Shop_ID", "=", "T2.Tourist_Attraction_ID", "WHERE", "T2.How_to_Get_There", "=", "``", "walk", "''"], "query_toks_no_value": ["select", "t1", ".", "shop_details", "from", "shops", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "tourist_attraction_id", "where", "t2", ".", "how_to_get_there", "=", "value"], "question": "What are the details of the shops that can be accessed by walk?", "question_toks": ["What", "are", "the", "details", "of", "the", "shops", "that", "can", "be", "accessed", "by", "walk", "?"], "dataset_name": "spider", "guid": 2416}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the distinct location names?", "sql": "SELECT DISTINCT Location_Name FROM LOCATIONS", "example": {"db_id": "cre_Theme_park", "query": "SELECT DISTINCT Location_Name FROM LOCATIONS", "query_toks": ["SELECT", "DISTINCT", "Location_Name", "FROM", "LOCATIONS"], "query_toks_no_value": ["select", "distinct", "location_name", "from", "locations"], "question": "What are the distinct location names?", "question_toks": ["What", "are", "the", "distinct", "location", "names", "?"], "dataset_name": "spider", "guid": 2417}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Give me the minimum and maximum bathroom count among all the apartments.", "sql": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments", "example": {"db_id": "apartment_rentals", "query": "SELECT min(bathroom_count) ,  max(bathroom_count) FROM Apartments", "query_toks": ["SELECT", "min", "(", "bathroom_count", ")", ",", "max", "(", "bathroom_count", ")", "FROM", "Apartments"], "query_toks_no_value": ["select", "min", "(", "bathroom_count", ")", ",", "max", "(", "bathroom_count", ")", "from", "apartments"], "question": "Give me the minimum and maximum bathroom count among all the apartments.", "question_toks": ["Give", "me", "the", "minimum", "and", "maximum", "bathroom", "count", "among", "all", "the", "apartments", "."], "dataset_name": "spider", "guid": 2418}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What is the average minimum and price of the rooms for each different decor.", "sql": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;", "example": {"db_id": "inn_1", "query": "SELECT decor , avg(basePrice) ,  min(basePrice) FROM Rooms GROUP BY decor;", "query_toks": ["SELECT", "decor", ",", "avg", "(", "basePrice", ")", ",", "min", "(", "basePrice", ")", "FROM", "Rooms", "GROUP", "BY", "decor", ";"], "query_toks_no_value": ["select", "decor", ",", "avg", "(", "baseprice", ")", ",", "min", "(", "baseprice", ")", "from", "rooms", "group", "by", "decor"], "question": "What is the average minimum and price of the rooms for each different decor.", "question_toks": ["What", "is", "the", "average", "minimum", "and", "price", "of", "the", "rooms", "for", "each", "different", "decor", "."], "dataset_name": "spider", "guid": 2419}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all Mexican restaurant in Dallas with a rating above 3.5", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Dallas", "''", "AND", "t1.rating", ">", "3.5", "AND", "t2.category_name", "=", "``", "Mexican", "''", "AND", "t3.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t1", ".", "rating", ">", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value"], "question": "Find all Mexican restaurant in Dallas with a rating above 3.5", "question_toks": ["Find", "all", "Mexican", "restaurant", "in", "Dallas", "with", "a", "rating", "above", "3.5"], "dataset_name": "spider", "guid": 2420}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "sql": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "example": {"db_id": "museum_visit", "query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC", "query_toks": ["SELECT", "name", "FROM", "visitor", "WHERE", "Level_of_membership", ">", "4", "ORDER", "BY", "Level_of_membership", "DESC"], "query_toks_no_value": ["select", "name", "from", "visitor", "where", "level_of_membership", ">", "value", "order", "by", "level_of_membership", "desc"], "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "question_toks": ["Find", "the", "names", "of", "the", "visitors", "whose", "membership", "level", "is", "higher", "than", "4", ",", "and", "order", "the", "results", "by", "the", "level", "from", "high", "to", "low", "."], "dataset_name": "spider", "guid": 2421}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | Which city does student Linda Smith live in?", "sql": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";", "example": {"db_id": "restaurant_1", "query": "SELECT city_code FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";", "query_toks": ["SELECT", "city_code", "FROM", "Student", "WHERE", "Fname", "=", "``", "Linda", "''", "AND", "Lname", "=", "``", "Smith", "''", ";"], "query_toks_no_value": ["select", "city_code", "from", "student", "where", "fname", "=", "value", "and", "lname", "=", "value"], "question": "Which city does student Linda Smith live in?", "question_toks": ["Which", "city", "does", "student", "Linda", "Smith", "live", "in", "?"], "dataset_name": "spider", "guid": 2422}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | Which student's age is older than 18 and is majoring in 600? List each student's first and last name.", "sql": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;", "example": {"db_id": "restaurant_1", "query": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major = 600;", "query_toks": ["SELECT", "Fname", ",", "Lname", "FROM", "Student", "WHERE", "Age", ">", "18", "AND", "Major", "=", "600", ";"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student", "where", "age", ">", "value", "and", "major", "=", "value"], "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.", "question_toks": ["Which", "student", "'s", "age", "is", "older", "than", "18", "and", "is", "majoring", "in", "600", "?", "List", "each", "student", "'s", "first", "and", "last", "name", "."], "dataset_name": "spider", "guid": 2423}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many escape games are there in Madison ?", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Madison", "''", "AND", "t2.category_name", "=", "``", "escape", "games", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "How many escape games are there in Madison ?", "question_toks": ["How", "many", "escape", "games", "are", "there", "in", "Madison", "?"], "dataset_name": "spider", "guid": 2424}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.", "sql": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code", "example": {"db_id": "apartment_rentals", "query": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code", "query_toks": ["SELECT", "booking_status_code", ",", "COUNT", "(", "*", ")", "FROM", "Apartment_Bookings", "GROUP", "BY", "booking_status_code"], "query_toks_no_value": ["select", "booking_status_code", ",", "count", "(", "*", ")", "from", "apartment_bookings", "group", "by", "booking_status_code"], "question": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings.", "question_toks": ["How", "many", "bookings", "does", "each", "booking", "status", "have", "?", "List", "the", "booking", "status", "code", "and", "the", "number", "of", "corresponding", "bookings", "."], "dataset_name": "spider", "guid": 2425}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | List the status shared by more than two roller coaster.", "sql": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2", "example": {"db_id": "roller_coaster", "query": "SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "Status", "FROM", "roller_coaster", "GROUP", "BY", "Status", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "status", "from", "roller_coaster", "group", "by", "status", "having", "count", "(", "*", ")", ">", "value"], "question": "List the status shared by more than two roller coaster.", "question_toks": ["List", "the", "status", "shared", "by", "more", "than", "two", "roller", "coaster", "."], "dataset_name": "spider", "guid": 2426}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is the best american restaurant in the bay area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "american", "''", ")", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "where is the best american restaurant in the bay area ?", "question_toks": ["where", "is", "the", "best", "american", "restaurant", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2427}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What is the name of the room that can accommodate the most people?", "sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;", "example": {"db_id": "inn_1", "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;", "query_toks": ["SELECT", "roomName", "FROM", "Rooms", "ORDER", "BY", "maxOccupancy", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "order", "by", "maxoccupancy", "desc", "limit", "value"], "question": "What is the name of the room that can accommodate the most people?", "question_toks": ["What", "is", "the", "name", "of", "the", "room", "that", "can", "accommodate", "the", "most", "people", "?"], "dataset_name": "spider", "guid": 2428}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the price ranges of hotels?", "sql": "SELECT price_range FROM HOTELS", "example": {"db_id": "cre_Theme_park", "query": "SELECT price_range FROM HOTELS", "query_toks": ["SELECT", "price_range", "FROM", "HOTELS"], "query_toks_no_value": ["select", "price_range", "from", "hotels"], "question": "What are the price ranges of hotels?", "question_toks": ["What", "are", "the", "price", "ranges", "of", "hotels", "?"], "dataset_name": "spider", "guid": 2429}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the name of rooms whose price is higher than the average price.", "sql": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "example": {"db_id": "inn_1", "query": "SELECT roomName FROM Rooms WHERE basePrice  >  ( SELECT avg(basePrice) FROM Rooms );", "query_toks": ["SELECT", "roomName", "FROM", "Rooms", "WHERE", "basePrice", ">", "(", "SELECT", "avg", "(", "basePrice", ")", "FROM", "Rooms", ")", ";"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "where", "baseprice", ">", "(", "select", "avg", "(", "baseprice", ")", "from", "rooms", ")"], "question": "Find the name of rooms whose price is higher than the average price.", "question_toks": ["Find", "the", "name", "of", "rooms", "whose", "price", "is", "higher", "than", "the", "average", "price", "."], "dataset_name": "spider", "guid": 2430}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the apartment numbers of apartments with unit status availability of both 0 and 1.", "sql": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.available_yn  =  1", "query_toks": ["SELECT", "T1.apt_number", "FROM", "Apartments", "AS", "T1", "JOIN", "View_Unit_Status", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T2.available_yn", "=", "0", "INTERSECT", "SELECT", "T1.apt_number", "FROM", "Apartments", "AS", "T1", "JOIN", "View_Unit_Status", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T2.available_yn", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "apt_number", "from", "apartments", "as", "t1", "join", "view_unit_status", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t2", ".", "available_yn", "=", "value", "intersect", "select", "t1", ".", "apt_number", "from", "apartments", "as", "t1", "join", "view_unit_status", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t2", ".", "available_yn", "=", "value"], "question": "Show the apartment numbers of apartments with unit status availability of both 0 and 1.", "question_toks": ["Show", "the", "apartment", "numbers", "of", "apartments", "with", "unit", "status", "availability", "of", "both", "0", "and", "1", "."], "dataset_name": "spider", "guid": 2431}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the booking status code and the corresponding number of bookings.", "sql": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code", "example": {"db_id": "apartment_rentals", "query": "SELECT \tbooking_status_code ,  COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code", "query_toks": ["SELECT", "booking_status_code", ",", "COUNT", "(", "*", ")", "FROM", "Apartment_Bookings", "GROUP", "BY", "booking_status_code"], "query_toks_no_value": ["select", "booking_status_code", ",", "count", "(", "*", ")", "from", "apartment_bookings", "group", "by", "booking_status_code"], "question": "Show the booking status code and the corresponding number of bookings.", "question_toks": ["Show", "the", "booking", "status", "code", "and", "the", "corresponding", "number", "of", "bookings", "."], "dataset_name": "spider", "guid": 2432}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | list all the businesses which Niloofar rated 5", "sql": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  \"Niloofar\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  \"Niloofar\";", "query_toks": ["SELECT", "t1.name", "FROM", "review", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t3", "ON", "t3.user_id", "=", "t2.user_id", "WHERE", "t2.rating", "=", "5", "AND", "t3.name", "=", "``", "Niloofar", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "review", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t3", "on", "t3", ".", "user_id", "=", "t2", ".", "user_id", "where", "t2", ".", "rating", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "list all the businesses which Niloofar rated 5", "question_toks": ["list", "all", "the", "businesses", "which", "Niloofar", "rated", "5"], "dataset_name": "spider", "guid": 2433}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is denny in the bay area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.name", "=", "``", "denny", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "where is denny in the bay area ?", "question_toks": ["where", "is", "denny", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2434}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the names of the tourist attractions that have parking or shopping as their feature details?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'", "query_toks": ["SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "Tourist_Attraction_Features", "AS", "T2", "ON", "T1.tourist_attraction_id", "=", "T2.tourist_attraction_id", "JOIN", "Features", "AS", "T3", "ON", "T2.Feature_ID", "=", "T3.Feature_ID", "WHERE", "T3.feature_Details", "=", "'park", "'", "UNION", "SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "Tourist_Attraction_Features", "AS", "T2", "ON", "T1.tourist_attraction_id", "=", "T2.tourist_attraction_id", "JOIN", "Features", "AS", "T3", "ON", "T2.Feature_ID", "=", "T3.Feature_ID", "WHERE", "T3.feature_Details", "=", "'shopping", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "tourist_attraction_features", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "join", "features", "as", "t3", "on", "t2", ".", "feature_id", "=", "t3", ".", "feature_id", "where", "t3", ".", "feature_details", "=", "value", "union", "select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "tourist_attraction_features", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "join", "features", "as", "t3", "on", "t2", ".", "feature_id", "=", "t3", ".", "feature_id", "where", "t3", ".", "feature_details", "=", "value"], "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?", "question_toks": ["What", "are", "the", "names", "of", "the", "tourist", "attractions", "that", "have", "parking", "or", "shopping", "as", "their", "feature", "details", "?"], "dataset_name": "spider", "guid": 2435}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Return me the number of tips that are written by Michelle .", "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.text", ")", "FROM", "USER", "AS", "t2", "JOIN", "tip", "AS", "t1", "ON", "t2.user_id", "=", "t1.user_id", "WHERE", "t2.name", "=", "``", "Michelle", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "text", ")", "from", "user", "as", "t2", "join", "tip", "as", "t1", "on", "t2", ".", "user_id", "=", "t1", ".", "user_id", "where", "t2", ".", "name", "=", "value"], "question": "Return me the number of tips that are written by Michelle .", "question_toks": ["Return", "me", "the", "number", "of", "tips", "that", "are", "written", "by", "Michelle", "."], "dataset_name": "spider", "guid": 2436}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many rooms cost more than 120, for each different decor?", "sql": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;", "example": {"db_id": "inn_1", "query": "SELECT decor , count(*) FROM Rooms WHERE basePrice  >  120 GROUP BY decor;", "query_toks": ["SELECT", "decor", ",", "count", "(", "*", ")", "FROM", "Rooms", "WHERE", "basePrice", ">", "120", "GROUP", "BY", "decor", ";"], "query_toks_no_value": ["select", "decor", ",", "count", "(", "*", ")", "from", "rooms", "where", "baseprice", ">", "value", "group", "by", "decor"], "question": "How many rooms cost more than 120, for each different decor?", "question_toks": ["How", "many", "rooms", "cost", "more", "than", "120", ",", "for", "each", "different", "decor", "?"], "dataset_name": "spider", "guid": 2437}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the names of the tourist attractions Vincent and Marcelle visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"", "query_toks": ["SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITORS", "AS", "T2", "JOIN", "VISITS", "AS", "T3", "ON", "T1.Tourist_Attraction_ID", "=", "T3.Tourist_Attraction_ID", "AND", "T2.Tourist_ID", "=", "T3.Tourist_ID", "WHERE", "T2.Tourist_Details", "=", "``", "Vincent", "''", "INTERSECT", "SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITORS", "AS", "T2", "JOIN", "VISITS", "AS", "T3", "ON", "T1.Tourist_Attraction_ID", "=", "T3.Tourist_Attraction_ID", "AND", "T2.Tourist_ID", "=", "T3.Tourist_ID", "WHERE", "T2.Tourist_Details", "=", "``", "Marcelle", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "visitors", "as", "t2", "join", "visits", "as", "t3", "on", "t1", ".", "tourist_attraction_id", "=", "t3", ".", "tourist_attraction_id", "and", "t2", ".", "tourist_id", "=", "t3", ".", "tourist_id", "where", "t2", ".", "tourist_details", "=", "value", "intersect", "select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "visitors", "as", "t2", "join", "visits", "as", "t3", "on", "t1", ".", "tourist_attraction_id", "=", "t3", ".", "tourist_attraction_id", "and", "t2", ".", "tourist_id", "=", "t3", ".", "tourist_id", "where", "t2", ".", "tourist_details", "=", "value"], "question": "What are the names of the tourist attractions Vincent and Marcelle visit?", "question_toks": ["What", "are", "the", "names", "of", "the", "tourist", "attractions", "Vincent", "and", "Marcelle", "visit", "?"], "dataset_name": "spider", "guid": 2438}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What is the average base price of different bed type? List bed type and average base price.", "sql": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "example": {"db_id": "inn_1", "query": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType;", "query_toks": ["SELECT", "bedType", ",", "avg", "(", "basePrice", ")", "FROM", "Rooms", "GROUP", "BY", "bedType", ";"], "query_toks_no_value": ["select", "bedtype", ",", "avg", "(", "baseprice", ")", "from", "rooms", "group", "by", "bedtype"], "question": "What is the average base price of different bed type? List bed type and average base price.", "question_toks": ["What", "is", "the", "average", "base", "price", "of", "different", "bed", "type", "?", "List", "bed", "type", "and", "average", "base", "price", "."], "dataset_name": "spider", "guid": 2439}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what is a good restaurant in alameda ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "alameda", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "what is a good restaurant in alameda ?", "question_toks": ["what", "is", "a", "good", "restaurant", "in", "alameda", "?"], "dataset_name": "spider", "guid": 2440}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.", "sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"", "example": {"db_id": "apartment_rentals", "query": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"", "query_toks": ["SELECT", "T2.apt_number", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T1.booking_status_code", "=", "``", "Confirmed", "''", "INTERSECT", "SELECT", "T2.apt_number", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T1.booking_status_code", "=", "``", "Provisional", "''"], "query_toks_no_value": ["select", "t2", ".", "apt_number", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t1", ".", "booking_status_code", "=", "value", "intersect", "select", "t2", ".", "apt_number", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t1", ".", "booking_status_code", "=", "value"], "question": "Which apartments have bookings with both status codes \"Provisional\" and \"Confirmed\"? Give me the apartment numbers.", "question_toks": ["Which", "apartments", "have", "bookings", "with", "both", "status", "codes", "``", "Provisional", "''", "and", "``", "Confirmed", "''", "?", "Give", "me", "the", "apartment", "numbers", "."], "dataset_name": "spider", "guid": 2441}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | how many italian restaurants are in the yolo county ?", "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"yolo county\" AND t1.food_type  =  \"italian\";", "example": {"db_id": "restaurants", "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"yolo county\" AND t1.food_type  =  \"italian\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.county", "=", "``", "yolo", "county", "''", "AND", "t1.food_type", "=", "``", "italian", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "county", "=", "value", "and", "t1", ".", "food_type", "=", "value"], "question": "how many italian restaurants are in the yolo county ?", "question_toks": ["how", "many", "italian", "restaurants", "are", "in", "the", "yolo", "county", "?"], "dataset_name": "spider", "guid": 2442}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What are the name and id of the three highest priced rooms?", "sql": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "example": {"db_id": "inn_1", "query": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3;", "query_toks": ["SELECT", "RoomId", ",", "roomName", "FROM", "Rooms", "ORDER", "BY", "basePrice", "DESC", "LIMIT", "3", ";"], "query_toks_no_value": ["select", "roomid", ",", "roomname", "from", "rooms", "order", "by", "baseprice", "desc", "limit", "value"], "question": "What are the name and id of the three highest priced rooms?", "question_toks": ["What", "are", "the", "name", "and", "id", "of", "the", "three", "highest", "priced", "rooms", "?"], "dataset_name": "spider", "guid": 2443}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the start dates and end dates of all the apartment bookings.", "sql": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings", "example": {"db_id": "apartment_rentals", "query": "SELECT booking_start_date ,  booking_end_date FROM Apartment_Bookings", "query_toks": ["SELECT", "booking_start_date", ",", "booking_end_date", "FROM", "Apartment_Bookings"], "query_toks_no_value": ["select", "booking_start_date", ",", "booking_end_date", "from", "apartment_bookings"], "question": "Show the start dates and end dates of all the apartment bookings.", "question_toks": ["Show", "the", "start", "dates", "and", "end", "dates", "of", "all", "the", "apartment", "bookings", "."], "dataset_name": "spider", "guid": 2444}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Tell me the name of the staff in charge of the attraction called \"US museum\".", "sql": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"US museum\"", "query_toks": ["SELECT", "T1.Name", "FROM", "STAFF", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "WHERE", "T2.Name", "=", "``", "US", "museum", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "staff", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "where", "t2", ".", "name", "=", "value"], "question": "Tell me the name of the staff in charge of the attraction called \"US museum\".", "question_toks": ["Tell", "me", "the", "name", "of", "the", "staff", "in", "charge", "of", "the", "attraction", "called", "``", "US", "museum", "''", "."], "dataset_name": "spider", "guid": 2445}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | List the name of all rooms sorted by their prices.", "sql": "SELECT roomName FROM Rooms ORDER BY basePrice;", "example": {"db_id": "inn_1", "query": "SELECT roomName FROM Rooms ORDER BY basePrice;", "query_toks": ["SELECT", "roomName", "FROM", "Rooms", "ORDER", "BY", "basePrice", ";"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "order", "by", "baseprice"], "question": "List the name of all rooms sorted by their prices.", "question_toks": ["List", "the", "name", "of", "all", "rooms", "sorted", "by", "their", "prices", "."], "dataset_name": "spider", "guid": 2446}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | How many king beds are there?", "sql": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';", "example": {"db_id": "inn_1", "query": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King';", "query_toks": ["SELECT", "sum", "(", "beds", ")", "FROM", "Rooms", "WHERE", "bedtype", "=", "'King", "'", ";"], "query_toks_no_value": ["select", "sum", "(", "beds", ")", "from", "rooms", "where", "bedtype", "=", "value"], "question": "How many king beds are there?", "question_toks": ["How", "many", "king", "beds", "are", "there", "?"], "dataset_name": "spider", "guid": 2447}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the average price of hotels for different pet policy.", "sql": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn", "example": {"db_id": "cre_Theme_park", "query": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn", "query_toks": ["SELECT", "pets_allowed_yn", ",", "avg", "(", "price_range", ")", "FROM", "HOTELS", "GROUP", "BY", "pets_allowed_yn"], "query_toks_no_value": ["select", "pets_allowed_yn", ",", "avg", "(", "price_range", ")", "from", "hotels", "group", "by", "pets_allowed_yn"], "question": "Show the average price of hotels for different pet policy.", "question_toks": ["Show", "the", "average", "price", "of", "hotels", "for", "different", "pet", "policy", "."], "dataset_name": "spider", "guid": 2448}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what are some good places in mountain view for arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "what are some good places in mountain view for arabic food ?", "question_toks": ["what", "are", "some", "good", "places", "in", "mountain", "view", "for", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2449}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What are the first and last names of people who payed more than the rooms' base prices?", "sql": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0", "example": {"db_id": "inn_1", "query": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0", "query_toks": ["SELECT", "T1.firstname", ",", "T1.lastname", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "WHERE", "T1.Rate", "-", "T2.basePrice", ">", "0"], "query_toks_no_value": ["select", "t1", ".", "firstname", ",", "t1", ".", "lastname", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "where", "t1", ".", "rate", "-", "t2", ".", "baseprice", ">", "value"], "question": "What are the first and last names of people who payed more than the rooms' base prices?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "people", "who", "payed", "more", "than", "the", "rooms", "'", "base", "prices", "?"], "dataset_name": "spider", "guid": 2450}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | find the total checkins in Moroccan restaurant in \" Los Angeles \" per day", "sql": "SELECT t4.day  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" GROUP BY t4.day;", "example": {"db_id": "yelp", "query": "SELECT t4.day  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" GROUP BY t4.day;", "query_toks": ["SELECT", "t4.day", ",", "SUM", "(", "t4.count", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "checkin", "AS", "t4", "ON", "t4.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Los", "Angeles", "''", "AND", "t2.category_name", "=", "``", "Moroccan", "''", "AND", "t3.category_name", "=", "``", "restaurant", "''", "GROUP", "BY", "t4.day", ";"], "query_toks_no_value": ["select", "t4", ".", "day", ",", "sum", "(", "t4", ".", "count", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "checkin", "as", "t4", "on", "t4", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value", "group", "by", "t4", ".", "day"], "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \" per day", "question_toks": ["find", "the", "total", "checkins", "in", "Moroccan", "restaurant", "in", "``", "Los", "Angeles", "``", "per", "day"], "dataset_name": "spider", "guid": 2451}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all users who reviewed restaurant \" Mesa Grill \"", "sql": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Mesa Grill\" AND t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Mesa Grill\" AND t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t4.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t4", "ON", "t4.user_id", "=", "t3.user_id", "WHERE", "t1.name", "=", "``", "Mesa", "Grill", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t4", "on", "t4", ".", "user_id", "=", "t3", ".", "user_id", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "Find all users who reviewed restaurant \" Mesa Grill \"", "question_toks": ["Find", "all", "users", "who", "reviewed", "restaurant", "``", "Mesa", "Grill", "``"], "dataset_name": "spider", "guid": 2452}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What is the theme and artist name for the exhibition with a ticket price higher than the average?", "sql": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)", "example": {"db_id": "theme_gallery", "query": "SELECT T1.theme ,  T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.ticket_price  >  (SELECT avg(ticket_price) FROM exhibition)", "query_toks": ["SELECT", "T1.theme", ",", "T2.name", "FROM", "exhibition", "AS", "T1", "JOIN", "artist", "AS", "T2", "ON", "T1.artist_id", "=", "T2.artist_id", "WHERE", "T1.ticket_price", ">", "(", "SELECT", "avg", "(", "ticket_price", ")", "FROM", "exhibition", ")"], "query_toks_no_value": ["select", "t1", ".", "theme", ",", "t2", ".", "name", "from", "exhibition", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "ticket_price", ">", "(", "select", "avg", "(", "ticket_price", ")", "from", "exhibition", ")"], "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?", "question_toks": ["What", "is", "the", "theme", "and", "artist", "name", "for", "the", "exhibition", "with", "a", "ticket", "price", "higher", "than", "the", "average", "?"], "dataset_name": "spider", "guid": 2453}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what are some good restaurants in mountain view for arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "what are some good restaurants in mountain view for arabic food ?", "question_toks": ["what", "are", "some", "good", "restaurants", "in", "mountain", "view", "for", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2454}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a restaurant in mountain view that serves good arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a restaurant in mountain view that serves good arabic food ?", "question_toks": ["give", "me", "a", "restaurant", "in", "mountain", "view", "that", "serves", "good", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2455}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good french restaurant in the yosemite and mono lake area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "yosemite", "and", "mono", "lake", "area", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good french restaurant in the yosemite and mono lake area ?", "question_toks": ["give", "me", "a", "good", "french", "restaurant", "in", "the", "yosemite", "and", "mono", "lake", "area", "?"], "dataset_name": "spider", "guid": 2456}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some restaurants on bethel island rd in bethel island ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "bethel", "island", "''", "AND", "t2.street_name", "=", "``", "bethel", "island", "rd", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value"], "question": "give me some restaurants on bethel island rd in bethel island ?", "question_toks": ["give", "me", "some", "restaurants", "on", "bethel", "island", "rd", "in", "bethel", "island", "?"], "dataset_name": "spider", "guid": 2457}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the number of rooms for each bed type.", "sql": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;", "example": {"db_id": "inn_1", "query": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;", "query_toks": ["SELECT", "bedType", ",", "count", "(", "*", ")", "FROM", "Rooms", "GROUP", "BY", "bedType", ";"], "query_toks_no_value": ["select", "bedtype", ",", "count", "(", "*", ")", "from", "rooms", "group", "by", "bedtype"], "question": "Find the number of rooms for each bed type.", "question_toks": ["Find", "the", "number", "of", "rooms", "for", "each", "bed", "type", "."], "dataset_name": "spider", "guid": 2458}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What is the booking status code of the apartment with apartment number \"Suite 634\"?", "sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"", "query_toks": ["SELECT", "T1.booking_status_code", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T2.apt_number", "=", "``", "Suite", "634", "''"], "query_toks_no_value": ["select", "t1", ".", "booking_status_code", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t2", ".", "apt_number", "=", "value"], "question": "What is the booking status code of the apartment with apartment number \"Suite 634\"?", "question_toks": ["What", "is", "the", "booking", "status", "code", "of", "the", "apartment", "with", "apartment", "number", "``", "Suite", "634", "''", "?"], "dataset_name": "spider", "guid": 2459}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what are some good restaurants in the yosemite and mono lake area for french food ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "yosemite", "and", "mono", "lake", "area", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "what are some good restaurants in the yosemite and mono lake area for french food ?", "question_toks": ["what", "are", "some", "good", "restaurants", "in", "the", "yosemite", "and", "mono", "lake", "area", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2460}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.", "sql": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code ,  bathroom_count ,  bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY sum(room_count) DESC LIMIT 1", "query_toks": ["SELECT", "apt_type_code", ",", "bathroom_count", ",", "bedroom_count", "FROM", "Apartments", "GROUP", "BY", "apt_type_code", "ORDER", "BY", "sum", "(", "room_count", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "apt_type_code", ",", "bathroom_count", ",", "bedroom_count", "from", "apartments", "group", "by", "apt_type_code", "order", "by", "sum", "(", "room_count", ")", "desc", "limit", "value"], "question": "Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.", "question_toks": ["Show", "the", "apartment", "type", "code", "that", "has", "the", "largest", "number", "of", "total", "rooms", ",", "together", "with", "the", "number", "of", "bathrooms", "and", "number", "of", "bedrooms", "."], "dataset_name": "spider", "guid": 2461}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all users who reviewed businesses that are restaurant in 2010 .", "sql": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\" AND t3.year  =  2010;", "example": {"db_id": "yelp", "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\" AND t3.year  =  2010;", "query_toks": ["SELECT", "t4.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t4", "ON", "t4.user_id", "=", "t3.user_id", "WHERE", "t2.category_name", "=", "``", "restaurant", "''", "AND", "t3.year", "=", "2010", ";"], "query_toks_no_value": ["select", "t4", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t4", "on", "t4", ".", "user_id", "=", "t3", ".", "user_id", "where", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "year", "=", "value"], "question": "List all users who reviewed businesses that are restaurant in 2010 .", "question_toks": ["List", "all", "users", "who", "reviewed", "businesses", "that", "are", "restaurant", "in", "2010", "."], "dataset_name": "spider", "guid": 2462}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the transportation method most people choose to get to tourist attractions.", "sql": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "cre_Theme_park", "query": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "How_to_Get_There", "FROM", "Tourist_Attractions", "GROUP", "BY", "How_to_Get_There", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "how_to_get_there", "from", "tourist_attractions", "group", "by", "how_to_get_there", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the transportation method most people choose to get to tourist attractions.", "question_toks": ["Show", "the", "transportation", "method", "most", "people", "choose", "to", "get", "to", "tourist", "attractions", "."], "dataset_name": "spider", "guid": 2463}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the name of the room with the maximum occupancy.", "sql": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;", "example": {"db_id": "inn_1", "query": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1;", "query_toks": ["SELECT", "roomName", "FROM", "Rooms", "ORDER", "BY", "maxOccupancy", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "order", "by", "maxoccupancy", "desc", "limit", "value"], "question": "Find the name of the room with the maximum occupancy.", "question_toks": ["Find", "the", "name", "of", "the", "room", "with", "the", "maximum", "occupancy", "."], "dataset_name": "spider", "guid": 2464}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | What are all the breweries in \" Los Angeles \" ?", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Los", "Angeles", "''", "AND", "t2.category_name", "=", "``", "breweries", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "What are all the breweries in \" Los Angeles \" ?", "question_toks": ["What", "are", "all", "the", "breweries", "in", "``", "Los", "Angeles", "``", "?"], "dataset_name": "spider", "guid": 2465}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Show all artist names who didn't have an exhibition in 2004.", "sql": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004", "example": {"db_id": "theme_gallery", "query": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004", "query_toks": ["SELECT", "name", "FROM", "artist", "EXCEPT", "SELECT", "T2.name", "FROM", "exhibition", "AS", "T1", "JOIN", "artist", "AS", "T2", "ON", "T1.artist_id", "=", "T2.artist_id", "WHERE", "T1.year", "=", "2004"], "query_toks_no_value": ["select", "name", "from", "artist", "except", "select", "t2", ".", "name", "from", "exhibition", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "where", "t1", ".", "year", "=", "value"], "question": "Show all artist names who didn't have an exhibition in 2004.", "question_toks": ["Show", "all", "artist", "names", "who", "did", "n't", "have", "an", "exhibition", "in", "2004", "."], "dataset_name": "spider", "guid": 2466}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | How many exhibitions have a attendance more than 100 or have a ticket price below 10?", "sql": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "example": {"db_id": "theme_gallery", "query": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "exhibition_record", "AS", "T1", "JOIN", "exhibition", "AS", "T2", "ON", "T1.exhibition_id", "=", "T2.exhibition_id", "WHERE", "T1.attendance", ">", "100", "OR", "T2.ticket_price", "<", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "exhibition_record", "as", "t1", "join", "exhibition", "as", "t2", "on", "t1", ".", "exhibition_id", "=", "t2", ".", "exhibition_id", "where", "t1", ".", "attendance", ">", "value", "or", "t2", ".", "ticket_price", "<", "value"], "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?", "question_toks": ["How", "many", "exhibitions", "have", "a", "attendance", "more", "than", "100", "or", "have", "a", "ticket", "price", "below", "10", "?"], "dataset_name": "spider", "guid": 2467}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a restaurant on bethel island rd in bethel island ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "bethel", "island", "''", "AND", "t2.street_name", "=", "``", "bethel", "island", "rd", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value"], "question": "give me a restaurant on bethel island rd in bethel island ?", "question_toks": ["give", "me", "a", "restaurant", "on", "bethel", "island", "rd", "in", "bethel", "island", "?"], "dataset_name": "spider", "guid": 2468}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good restaurant in mountain view for arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good restaurant in mountain view for arabic food ?", "question_toks": ["give", "me", "a", "good", "restaurant", "in", "mountain", "view", "for", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2469}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | Give me the best french in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "Give me the best french in san francisco ?", "question_toks": ["Give", "me", "the", "best", "french", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2470}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good arabic on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good arabic on buchanan in san francisco ?", "question_toks": ["give", "me", "a", "good", "arabic", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2471}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | How many distinct names are associated with all the photos?", "sql": "SELECT count(DISTINCT Name) FROM PHOTOS", "example": {"db_id": "cre_Theme_park", "query": "SELECT count(DISTINCT Name) FROM PHOTOS", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Name", ")", "FROM", "PHOTOS"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "photos"], "question": "How many distinct names are associated with all the photos?", "question_toks": ["How", "many", "distinct", "names", "are", "associated", "with", "all", "the", "photos", "?"], "dataset_name": "spider", "guid": 2472}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names.", "sql": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"", "example": {"db_id": "apartment_rentals", "query": "SELECT T2.guest_first_name ,  T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id  =  T2.guest_id WHERE T1.booking_status_code  =  \"Confirmed\"", "query_toks": ["SELECT", "T2.guest_first_name", ",", "T2.guest_last_name", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Guests", "AS", "T2", "ON", "T1.guest_id", "=", "T2.guest_id", "WHERE", "T1.booking_status_code", "=", "``", "Confirmed", "''"], "query_toks_no_value": ["select", "t2", ".", "guest_first_name", ",", "t2", ".", "guest_last_name", "from", "apartment_bookings", "as", "t1", "join", "guests", "as", "t2", "on", "t1", ".", "guest_id", "=", "t2", ".", "guest_id", "where", "t1", ".", "booking_status_code", "=", "value"], "question": "Which guests have apartment bookings with status code \"Confirmed\"? Return their first names and last names.", "question_toks": ["Which", "guests", "have", "apartment", "bookings", "with", "status", "code", "``", "Confirmed", "''", "?", "Return", "their", "first", "names", "and", "last", "names", "."], "dataset_name": "spider", "guid": 2473}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What are the theme and year for all exhibitions that have a ticket price under 15?", "sql": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15", "example": {"db_id": "theme_gallery", "query": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15", "query_toks": ["SELECT", "theme", ",", "YEAR", "FROM", "exhibition", "WHERE", "ticket_price", "<", "15"], "query_toks_no_value": ["select", "theme", ",", "year", "from", "exhibition", "where", "ticket_price", "<", "value"], "question": "What are the theme and year for all exhibitions that have a ticket price under 15?", "question_toks": ["What", "are", "the", "theme", "and", "year", "for", "all", "exhibitions", "that", "have", "a", "ticket", "price", "under", "15", "?"], "dataset_name": "spider", "guid": 2474}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What are the bed type and name of all the rooms with traditional decor?", "sql": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";", "example": {"db_id": "inn_1", "query": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\";", "query_toks": ["SELECT", "roomName", ",", "bedType", "FROM", "Rooms", "WHERE", "decor", "=", "``", "traditional", "''", ";"], "query_toks_no_value": ["select", "roomname", ",", "bedtype", "from", "rooms", "where", "decor", "=", "value"], "question": "What are the bed type and name of all the rooms with traditional decor?", "question_toks": ["What", "are", "the", "bed", "type", "and", "name", "of", "all", "the", "rooms", "with", "traditional", "decor", "?"], "dataset_name": "spider", "guid": 2475}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the number of rooms with king bed for each decor type.", "sql": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;", "example": {"db_id": "inn_1", "query": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor;", "query_toks": ["SELECT", "decor", ",", "count", "(", "*", ")", "FROM", "Rooms", "WHERE", "bedType", "=", "``", "King", "''", "GROUP", "BY", "decor", ";"], "query_toks_no_value": ["select", "decor", ",", "count", "(", "*", ")", "from", "rooms", "where", "bedtype", "=", "value", "group", "by", "decor"], "question": "Find the number of rooms with king bed for each decor type.", "question_toks": ["Find", "the", "number", "of", "rooms", "with", "king", "bed", "for", "each", "decor", "type", "."], "dataset_name": "spider", "guid": 2476}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can i eat some good arabic food in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where can i eat some good arabic food in mountain view ?", "question_toks": ["where", "can", "i", "eat", "some", "good", "arabic", "food", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2477}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.", "sql": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"", "query_toks": ["SELECT", "T2.Name", "FROM", "Locations", "AS", "T1", "JOIN", "Tourist_Attractions", "AS", "T2", "ON", "T1.Location_ID", "=", "T2.Location_ID", "WHERE", "T1.Address", "=", "``", "660", "Shea", "Crescent", "''", "OR", "T2.How_to_Get_There", "=", "``", "walk", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "locations", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "location_id", "=", "t2", ".", "location_id", "where", "t1", ".", "address", "=", "value", "or", "t2", ".", "how_to_get_there", "=", "value"], "question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.", "question_toks": ["Find", "the", "names", "of", "the", "tourist", "attractions", "that", "is", "either", "accessible", "by", "walk", "or", "at", "address", "660", "Shea", "Crescent", "."], "dataset_name": "spider", "guid": 2478}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are the address and phone number of the buildings managed by \"Brenden\"?", "sql": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"", "example": {"db_id": "apartment_rentals", "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"", "query_toks": ["SELECT", "building_address", ",", "building_phone", "FROM", "Apartment_Buildings", "WHERE", "building_manager", "=", "``", "Brenden", "''"], "query_toks_no_value": ["select", "building_address", ",", "building_phone", "from", "apartment_buildings", "where", "building_manager", "=", "value"], "question": "What are the address and phone number of the buildings managed by \"Brenden\"?", "question_toks": ["What", "are", "the", "address", "and", "phone", "number", "of", "the", "buildings", "managed", "by", "``", "Brenden", "''", "?"], "dataset_name": "spider", "guid": 2479}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Find the average room count of the apartments that have the \"Studio\" type code.", "sql": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"", "example": {"db_id": "apartment_rentals", "query": "SELECT avg(room_count) FROM Apartments WHERE apt_type_code  =  \"Studio\"", "query_toks": ["SELECT", "avg", "(", "room_count", ")", "FROM", "Apartments", "WHERE", "apt_type_code", "=", "``", "Studio", "''"], "query_toks_no_value": ["select", "avg", "(", "room_count", ")", "from", "apartments", "where", "apt_type_code", "=", "value"], "question": "Find the average room count of the apartments that have the \"Studio\" type code.", "question_toks": ["Find", "the", "average", "room", "count", "of", "the", "apartments", "that", "have", "the", "``", "Studio", "''", "type", "code", "."], "dataset_name": "spider", "guid": 2480}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.", "sql": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "example": {"db_id": "cre_Theme_park", "query": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "query_toks": ["SELECT", "How_to_Get_There", ",", "COUNT", "(", "*", ")", "FROM", "Tourist_Attractions", "GROUP", "BY", "How_to_Get_There"], "query_toks_no_value": ["select", "how_to_get_there", ",", "count", "(", "*", ")", "from", "tourist_attractions", "group", "by", "how_to_get_there"], "question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.", "question_toks": ["List", "all", "the", "possible", "ways", "to", "get", "to", "attractions", ",", "together", "with", "the", "number", "of", "attractions", "accessible", "by", "these", "methods", "."], "dataset_name": "spider", "guid": 2481}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find the details of all the markets that are accessible by walk or bus.", "sql": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"", "query_toks": ["SELECT", "T1.Market_Details", "FROM", "Street_Markets", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Tourist_Attraction_ID", "WHERE", "T2.How_to_Get_There", "=", "``", "walk", "''", "OR", "T2.How_to_Get_There", "=", "``", "bus", "''"], "query_toks_no_value": ["select", "t1", ".", "market_details", "from", "street_markets", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "tourist_attraction_id", "where", "t2", ".", "how_to_get_there", "=", "value", "or", "t2", ".", "how_to_get_there", "=", "value"], "question": "Find the details of all the markets that are accessible by walk or bus.", "question_toks": ["Find", "the", "details", "of", "all", "the", "markets", "that", "are", "accessible", "by", "walk", "or", "bus", "."], "dataset_name": "spider", "guid": 2482}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | how many places for chinese are there in the bay area ?", "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";", "example": {"db_id": "restaurants", "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "chinese", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value"], "question": "how many places for chinese are there in the bay area ?", "question_toks": ["how", "many", "places", "for", "chinese", "are", "there", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2483}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | How many times has the student Linda Smith visited Subway?", "sql": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";", "example": {"db_id": "restaurant_1", "query": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student", "JOIN", "Visits_Restaurant", "ON", "Student.StuID", "=", "Visits_Restaurant.StuID", "JOIN", "Restaurant", "ON", "Visits_Restaurant.ResID", "=", "Restaurant.ResID", "WHERE", "Student.Fname", "=", "``", "Linda", "''", "AND", "Student.Lname", "=", "``", "Smith", "''", "AND", "Restaurant.ResName", "=", "``", "Subway", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "join", "visits_restaurant", "on", "student.stuid", "=", "visits_restaurant.stuid", "join", "restaurant", "on", "visits_restaurant.resid", "=", "restaurant.resid", "where", "student.fname", "=", "value", "and", "student.lname", "=", "value", "and", "restaurant.resname", "=", "value"], "question": "How many times has the student Linda Smith visited Subway?", "question_toks": ["How", "many", "times", "has", "the", "student", "Linda", "Smith", "visited", "Subway", "?"], "dataset_name": "spider", "guid": 2484}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the names and ids of tourist attractions that are visited at most once.", "sql": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1", "query_toks": ["SELECT", "T1.Name", ",", "T1.Tourist_Attraction_ID", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "GROUP", "BY", "T2.Tourist_Attraction_ID", "HAVING", "count", "(", "*", ")", "<", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "tourist_attraction_id", "from", "tourist_attractions", "as", "t1", "join", "visits", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "group", "by", "t2", ".", "tourist_attraction_id", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "Show the names and ids of tourist attractions that are visited at most once.", "question_toks": ["Show", "the", "names", "and", "ids", "of", "tourist", "attractions", "that", "are", "visited", "at", "most", "once", "."], "dataset_name": "spider", "guid": 2485}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can i eat some good arabic food on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where can i eat some good arabic food on buchanan in san francisco ?", "question_toks": ["where", "can", "i", "eat", "some", "good", "arabic", "food", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2486}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find the details of the shops that can be reached by walk.", "sql": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"", "query_toks": ["SELECT", "T1.Shop_Details", "FROM", "SHOPS", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Shop_ID", "=", "T2.Tourist_Attraction_ID", "WHERE", "T2.How_to_Get_There", "=", "``", "walk", "''"], "query_toks_no_value": ["select", "t1", ".", "shop_details", "from", "shops", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "tourist_attraction_id", "where", "t2", ".", "how_to_get_there", "=", "value"], "question": "Find the details of the shops that can be reached by walk.", "question_toks": ["Find", "the", "details", "of", "the", "shops", "that", "can", "be", "reached", "by", "walk", "."], "dataset_name": "spider", "guid": 2487}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.", "sql": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "example": {"db_id": "cre_Theme_park", "query": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There", "query_toks": ["SELECT", "How_to_Get_There", ",", "COUNT", "(", "*", ")", "FROM", "Tourist_Attractions", "GROUP", "BY", "How_to_Get_There"], "query_toks_no_value": ["select", "how_to_get_there", ",", "count", "(", "*", ")", "from", "tourist_attractions", "group", "by", "how_to_get_there"], "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.", "question_toks": ["Show", "different", "ways", "to", "get", "to", "attractions", "and", "the", "number", "of", "attractions", "that", "can", "be", "accessed", "in", "the", "corresponding", "way", "."], "dataset_name": "spider", "guid": 2488}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | Which Advisor has most of students? List advisor and the number of students.", "sql": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;", "example": {"db_id": "restaurant_1", "query": "SELECT Advisor ,  count(*) FROM Student GROUP BY Advisor ORDER BY count(Advisor) DESC LIMIT 1;", "query_toks": ["SELECT", "Advisor", ",", "count", "(", "*", ")", "FROM", "Student", "GROUP", "BY", "Advisor", "ORDER", "BY", "count", "(", "Advisor", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "advisor", ",", "count", "(", "*", ")", "from", "student", "group", "by", "advisor", "order", "by", "count", "(", "advisor", ")", "desc", "limit", "value"], "question": "Which Advisor has most of students? List advisor and the number of students.", "question_toks": ["Which", "Advisor", "has", "most", "of", "students", "?", "List", "advisor", "and", "the", "number", "of", "students", "."], "dataset_name": "spider", "guid": 2489}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | What is the gender of the student Linda Smith?", "sql": "SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";", "example": {"db_id": "restaurant_1", "query": "SELECT Sex FROM Student WHERE Fname = \"Linda\" AND Lname = \"Smith\";", "query_toks": ["SELECT", "Sex", "FROM", "Student", "WHERE", "Fname", "=", "``", "Linda", "''", "AND", "Lname", "=", "``", "Smith", "''", ";"], "query_toks_no_value": ["select", "sex", "from", "student", "where", "fname", "=", "value", "and", "lname", "=", "value"], "question": "What is the gender of the student Linda Smith?", "question_toks": ["What", "is", "the", "gender", "of", "the", "student", "Linda", "Smith", "?"], "dataset_name": "spider", "guid": 2490}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What are the number of rooms for each bed type?", "sql": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;", "example": {"db_id": "inn_1", "query": "SELECT bedType ,  count(*) FROM Rooms GROUP BY bedType;", "query_toks": ["SELECT", "bedType", ",", "count", "(", "*", ")", "FROM", "Rooms", "GROUP", "BY", "bedType", ";"], "query_toks_no_value": ["select", "bedtype", ",", "count", "(", "*", ")", "from", "rooms", "group", "by", "bedtype"], "question": "What are the number of rooms for each bed type?", "question_toks": ["What", "are", "the", "number", "of", "rooms", "for", "each", "bed", "type", "?"], "dataset_name": "spider", "guid": 2491}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.", "sql": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";", "example": {"db_id": "inn_1", "query": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\";", "query_toks": ["SELECT", "Adults", "FROM", "Reservations", "WHERE", "CheckIn", "=", "``", "2010-10-23", "''", "AND", "FirstName", "=", "``", "CONRAD", "''", "AND", "LastName", "=", "``", "SELBIG", "''", ";"], "query_toks_no_value": ["select", "adults", "from", "reservations", "where", "checkin", "=", "value", "and", "firstname", "=", "value", "and", "lastname", "=", "value"], "question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.", "question_toks": ["Find", "the", "number", "of", "adults", "for", "the", "room", "reserved", "and", "checked", "in", "by", "CONRAD", "SELBIG", "on", "Oct", "23", ",", "2010", "."], "dataset_name": "spider", "guid": 2492}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | how many jamerican cuisine are there in santa cruz county ?", "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"santa cruz county\" AND t1.name  =  \"jamerican cuisine\";", "example": {"db_id": "restaurants", "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"santa cruz county\" AND t1.name  =  \"jamerican cuisine\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.county", "=", "``", "santa", "cruz", "county", "''", "AND", "t1.name", "=", "``", "jamerican", "cuisine", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "county", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "how many jamerican cuisine are there in santa cruz county ?", "question_toks": ["how", "many", "jamerican", "cuisine", "are", "there", "in", "santa", "cruz", "county", "?"], "dataset_name": "spider", "guid": 2493}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | For each room, find its name and the number of times reservations were made for it.", "sql": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room", "example": {"db_id": "inn_1", "query": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room", "query_toks": ["SELECT", "T2.roomName", ",", "count", "(", "*", ")", ",", "T1.Room", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "GROUP", "BY", "T1.Room"], "query_toks_no_value": ["select", "t2", ".", "roomname", ",", "count", "(", "*", ")", ",", "t1", ".", "room", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "group", "by", "t1", ".", "room"], "question": "For each room, find its name and the number of times reservations were made for it.", "question_toks": ["For", "each", "room", ",", "find", "its", "name", "and", "the", "number", "of", "times", "reservations", "were", "made", "for", "it", "."], "dataset_name": "spider", "guid": 2494}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Return the name, rate, check in and check out date for the room with the highest rate.", "sql": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;", "example": {"db_id": "inn_1", "query": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1;", "query_toks": ["SELECT", "T2.roomName", ",", "T1.Rate", ",", "T1.CheckIn", ",", "T1.CheckOut", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "GROUP", "BY", "T1.Room", "ORDER", "BY", "T1.Rate", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "roomname", ",", "t1", ".", "rate", ",", "t1", ".", "checkin", ",", "t1", ".", "checkout", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "group", "by", "t1", ".", "room", "order", "by", "t1", ".", "rate", "desc", "limit", "value"], "question": "Return the name, rate, check in and check out date for the room with the highest rate.", "question_toks": ["Return", "the", "name", ",", "rate", ",", "check", "in", "and", "check", "out", "date", "for", "the", "room", "with", "the", "highest", "rate", "."], "dataset_name": "spider", "guid": 2495}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.", "sql": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "query_toks": ["SELECT", "apt_type_code", ",", "COUNT", "(", "*", ")", "FROM", "Apartments", "GROUP", "BY", "apt_type_code", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "apt_type_code", ",", "count", "(", "*", ")", "from", "apartments", "group", "by", "apt_type_code", "order", "by", "count", "(", "*", ")", "asc"], "question": "Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.", "question_toks": ["Show", "the", "apartment", "type", "codes", "and", "the", "corresponding", "number", "of", "apartments", "sorted", "by", "the", "number", "of", "apartments", "in", "ascending", "order", "."], "dataset_name": "spider", "guid": 2496}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can we find some restaurants in alameda ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "alameda", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value"], "question": "where can we find some restaurants in alameda ?", "question_toks": ["where", "can", "we", "find", "some", "restaurants", "in", "alameda", "?"], "dataset_name": "spider", "guid": 2497}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find the number of users called Michelle", "sql": "SELECT COUNT ( DISTINCT name ) FROM USER WHERE name  =  \"Michelle\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT name ) FROM USER WHERE name  =  \"Michelle\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "name", ")", "FROM", "USER", "WHERE", "name", "=", "``", "Michelle", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "user", "where", "name", "=", "value"], "question": "Find the number of users called Michelle", "question_toks": ["Find", "the", "number", "of", "users", "called", "Michelle"], "dataset_name": "spider", "guid": 2498}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What is the theme, date, and attendance for the exhibition in year 2004?", "sql": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004", "example": {"db_id": "theme_gallery", "query": "SELECT T2.theme ,  T1.date ,  T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T2.year  =  2004", "query_toks": ["SELECT", "T2.theme", ",", "T1.date", ",", "T1.attendance", "FROM", "exhibition_record", "AS", "T1", "JOIN", "exhibition", "AS", "T2", "ON", "T1.exhibition_id", "=", "T2.exhibition_id", "WHERE", "T2.year", "=", "2004"], "query_toks_no_value": ["select", "t2", ".", "theme", ",", "t1", ".", "date", ",", "t1", ".", "attendance", "from", "exhibition_record", "as", "t1", "join", "exhibition", "as", "t2", "on", "t1", ".", "exhibition_id", "=", "t2", ".", "exhibition_id", "where", "t2", ".", "year", "=", "value"], "question": "What is the theme, date, and attendance for the exhibition in year 2004?", "question_toks": ["What", "is", "the", "theme", ",", "date", ",", "and", "attendance", "for", "the", "exhibition", "in", "year", "2004", "?"], "dataset_name": "spider", "guid": 2499}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | List the names of countries whose language is not \"German\".", "sql": "SELECT Name FROM country WHERE Languages != \"German\"", "example": {"db_id": "roller_coaster", "query": "SELECT Name FROM country WHERE Languages != \"German\"", "query_toks": ["SELECT", "Name", "FROM", "country", "WHERE", "Languages", "!", "=", "``", "German", "''"], "query_toks_no_value": ["select", "name", "from", "country", "where", "languages", "!", "=", "value"], "question": "List the names of countries whose language is not \"German\".", "question_toks": ["List", "the", "names", "of", "countries", "whose", "language", "is", "not", "``", "German", "''", "."], "dataset_name": "spider", "guid": 2500}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many reviews has Niloofar written in 2015", "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  \"Niloofar\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  \"Niloofar\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.text", ")", "FROM", "USER", "AS", "t2", "JOIN", "review", "AS", "t1", "ON", "t2.user_id", "=", "t1.user_id", "WHERE", "t1.year", "=", "2015", "AND", "t2.name", "=", "``", "Niloofar", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "text", ")", "from", "user", "as", "t2", "join", "review", "as", "t1", "on", "t2", ".", "user_id", "=", "t1", ".", "user_id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "How many reviews has Niloofar written in 2015", "question_toks": ["How", "many", "reviews", "has", "Niloofar", "written", "in", "2015"], "dataset_name": "spider", "guid": 2501}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | Find the number of members living in each address.", "sql": "SELECT count(*) ,  address FROM member GROUP BY address", "example": {"db_id": "coffee_shop", "query": "SELECT count(*) ,  address FROM member GROUP BY address", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "address", "FROM", "member", "GROUP", "BY", "address"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "address", "from", "member", "group", "by", "address"], "question": "Find the number of members living in each address.", "question_toks": ["Find", "the", "number", "of", "members", "living", "in", "each", "address", "."], "dataset_name": "spider", "guid": 2502}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good place on buchanan in san francisco for arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good place on buchanan in san francisco for arabic food ?", "question_toks": ["give", "me", "a", "good", "place", "on", "buchanan", "in", "san", "francisco", "for", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2503}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a good french restaurant in the yosemite and mono lake area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "yosemite", "and", "mono", "lake", "area", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a good french restaurant in the yosemite and mono lake area ?", "question_toks": ["where", "is", "a", "good", "french", "restaurant", "in", "the", "yosemite", "and", "mono", "lake", "area", "?"], "dataset_name": "spider", "guid": 2504}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | How many artists do we have?", "sql": "SELECT count(*) FROM artist", "example": {"db_id": "theme_gallery", "query": "SELECT count(*) FROM artist", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "artist"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artist"], "question": "How many artists do we have?", "question_toks": ["How", "many", "artists", "do", "we", "have", "?"], "dataset_name": "spider", "guid": 2505}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Return the date of birth for all the guests with gender code \"Male\".", "sql": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"", "example": {"db_id": "apartment_rentals", "query": "SELECT date_of_birth FROM Guests WHERE gender_code  =  \"Male\"", "query_toks": ["SELECT", "date_of_birth", "FROM", "Guests", "WHERE", "gender_code", "=", "``", "Male", "''"], "query_toks_no_value": ["select", "date_of_birth", "from", "guests", "where", "gender_code", "=", "value"], "question": "Return the date of birth for all the guests with gender code \"Male\".", "question_toks": ["Return", "the", "date", "of", "birth", "for", "all", "the", "guests", "with", "gender", "code", "``", "Male", "''", "."], "dataset_name": "spider", "guid": 2506}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good arabic restaurant in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good arabic restaurant in mountain view ?", "question_toks": ["give", "me", "a", "good", "arabic", "restaurant", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2507}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the details of the three most expensive hotels?", "sql": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3", "example": {"db_id": "cre_Theme_park", "query": "SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3", "query_toks": ["SELECT", "other_hotel_details", "FROM", "HOTELS", "ORDER", "BY", "price_range", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "other_hotel_details", "from", "hotels", "order", "by", "price_range", "desc", "limit", "value"], "question": "What are the details of the three most expensive hotels?", "question_toks": ["What", "are", "the", "details", "of", "the", "three", "most", "expensive", "hotels", "?"], "dataset_name": "spider", "guid": 2508}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all the reviews by Michelle for Italian restaurant", "sql": "SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN review AS t4 ON t4.business_id  =  t1.business_id JOIN USER AS t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"category_category_name1\" AND t5.name  =  \"Michelle\";", "example": {"db_id": "yelp", "query": "SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN review AS t4 ON t4.business_id  =  t1.business_id JOIN USER AS t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"category_category_name1\" AND t5.name  =  \"Michelle\";", "query_toks": ["SELECT", "t4.text", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t4", "ON", "t4.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t5", "ON", "t5.user_id", "=", "t4.user_id", "WHERE", "t2.category_name", "=", "``", "Italian", "''", "AND", "t3.category_name", "=", "``", "category_category_name1", "''", "AND", "t5.name", "=", "``", "Michelle", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "text", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t4", "on", "t4", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t5", "on", "t5", ".", "user_id", "=", "t4", ".", "user_id", "where", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value", "and", "t5", ".", "name", "=", "value"], "question": "List all the reviews by Michelle for Italian restaurant", "question_toks": ["List", "all", "the", "reviews", "by", "Michelle", "for", "Italian", "restaurant"], "dataset_name": "spider", "guid": 2509}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find the total checkins in \" Brighton Heights \" neighbourhood", "sql": "SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  \"Brighton Heights\";", "example": {"db_id": "yelp", "query": "SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  \"Brighton Heights\";", "query_toks": ["SELECT", "SUM", "(", "t3.count", ")", "FROM", "checkin", "AS", "t3", "JOIN", "business", "AS", "t1", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "neighbourhood", "AS", "t2", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t2.neighbourhood_name", "=", "``", "Brighton", "Heights", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t3", ".", "count", ")", "from", "checkin", "as", "t3", "join", "business", "as", "t1", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "neighbourhood", "as", "t2", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t2", ".", "neighbourhood_name", "=", "value"], "question": "Find the total checkins in \" Brighton Heights \" neighbourhood", "question_toks": ["Find", "the", "total", "checkins", "in", "``", "Brighton", "Heights", "``", "neighbourhood"], "dataset_name": "spider", "guid": 2510}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | list all the reviews by Niloofar", "sql": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";", "example": {"db_id": "yelp", "query": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";", "query_toks": ["SELECT", "t1.text", "FROM", "USER", "AS", "t2", "JOIN", "review", "AS", "t1", "ON", "t2.user_id", "=", "t1.user_id", "WHERE", "t2.name", "=", "``", "Niloofar", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "text", "from", "user", "as", "t2", "join", "review", "as", "t1", "on", "t2", ".", "user_id", "=", "t1", ".", "user_id", "where", "t2", ".", "name", "=", "value"], "question": "list all the reviews by Niloofar", "question_toks": ["list", "all", "the", "reviews", "by", "Niloofar"], "dataset_name": "spider", "guid": 2511}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | List the names and decor of rooms that have a king bed. Sort the list by their price.", "sql": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;", "example": {"db_id": "inn_1", "query": "SELECT roomName ,  decor FROM Rooms WHERE bedtype  =  'King' ORDER BY basePrice;", "query_toks": ["SELECT", "roomName", ",", "decor", "FROM", "Rooms", "WHERE", "bedtype", "=", "'King", "'", "ORDER", "BY", "basePrice", ";"], "query_toks_no_value": ["select", "roomname", ",", "decor", "from", "rooms", "where", "bedtype", "=", "value", "order", "by", "baseprice"], "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.", "question_toks": ["List", "the", "names", "and", "decor", "of", "rooms", "that", "have", "a", "king", "bed", ".", "Sort", "the", "list", "by", "their", "price", "."], "dataset_name": "spider", "guid": 2512}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Count the number of tourists who did not visit any place.", "sql": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )", "example": {"db_id": "cre_Theme_park", "query": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Visitors", "WHERE", "Tourist_ID", "NOT", "IN", "(", "SELECT", "Tourist_ID", "FROM", "Visits", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "visitors", "where", "tourist_id", "not", "in", "(", "select", "tourist_id", "from", "visits", ")"], "question": "Count the number of tourists who did not visit any place.", "question_toks": ["Count", "the", "number", "of", "tourists", "who", "did", "not", "visit", "any", "place", "."], "dataset_name": "spider", "guid": 2513}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What are all distinct country for artists?", "sql": "SELECT DISTINCT country FROM artist", "example": {"db_id": "theme_gallery", "query": "SELECT DISTINCT country FROM artist", "query_toks": ["SELECT", "DISTINCT", "country", "FROM", "artist"], "query_toks_no_value": ["select", "distinct", "country", "from", "artist"], "question": "What are all distinct country for artists?", "question_toks": ["What", "are", "all", "distinct", "country", "for", "artists", "?"], "dataset_name": "spider", "guid": 2514}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the average price range of hotels that have 5 star ratings and allow pets.", "sql": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1", "example": {"db_id": "cre_Theme_park", "query": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1", "query_toks": ["SELECT", "avg", "(", "price_range", ")", "FROM", "HOTELS", "WHERE", "star_rating_code", "=", "``", "5", "''", "AND", "pets_allowed_yn", "=", "1"], "query_toks_no_value": ["select", "avg", "(", "price_range", ")", "from", "hotels", "where", "star_rating_code", "=", "value", "and", "pets_allowed_yn", "=", "value"], "question": "Show the average price range of hotels that have 5 star ratings and allow pets.", "question_toks": ["Show", "the", "average", "price", "range", "of", "hotels", "that", "have", "5", "star", "ratings", "and", "allow", "pets", "."], "dataset_name": "spider", "guid": 2515}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | List the name of rooms with king or queen bed.", "sql": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";", "example": {"db_id": "inn_1", "query": "SELECT roomName FROM Rooms WHERE bedType  =  \"King\" OR bedType  =  \"Queen\";", "query_toks": ["SELECT", "roomName", "FROM", "Rooms", "WHERE", "bedType", "=", "``", "King", "''", "OR", "bedType", "=", "``", "Queen", "''", ";"], "query_toks_no_value": ["select", "roomname", "from", "rooms", "where", "bedtype", "=", "value", "or", "bedtype", "=", "value"], "question": "List the name of rooms with king or queen bed.", "question_toks": ["List", "the", "name", "of", "rooms", "with", "king", "or", "queen", "bed", "."], "dataset_name": "spider", "guid": 2516}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison", "sql": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.neighbourhood_name", "FROM", "category", "AS", "t3", "JOIN", "business", "AS", "t2", "ON", "t3.business_id", "=", "t2.business_id", "JOIN", "category", "AS", "t4", "ON", "t4.business_id", "=", "t2.business_id", "JOIN", "neighbourhood", "AS", "t1", "ON", "t1.business_id", "=", "t2.business_id", "WHERE", "t2.city", "=", "``", "Madison", "''", "AND", "t2.rating", "<", "2.5", "AND", "t3.category_name", "=", "``", "Italian", "''", "AND", "t4.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "neighbourhood_name", "from", "category", "as", "t3", "join", "business", "as", "t2", "on", "t3", ".", "business_id", "=", "t2", ".", "business_id", "join", "category", "as", "t4", "on", "t4", ".", "business_id", "=", "t2", ".", "business_id", "join", "neighbourhood", "as", "t1", "on", "t1", ".", "business_id", "=", "t2", ".", "business_id", "where", "t2", ".", "city", "=", "value", "and", "t2", ".", "rating", "<", "value", "and", "t3", ".", "category_name", "=", "value", "and", "t4", ".", "category_name", "=", "value"], "question": "List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison", "question_toks": ["List", "all", "the", "neighbourhoods", "with", "Italian", "restaurant", "rated", "less", "than", "2.5", "in", "Madison"], "dataset_name": "spider", "guid": 2517}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can we find some restaurants on bethel island rd in bethel island ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "bethel", "island", "''", "AND", "t2.street_name", "=", "``", "bethel", "island", "rd", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value"], "question": "where can we find some restaurants on bethel island rd in bethel island ?", "question_toks": ["where", "can", "we", "find", "some", "restaurants", "on", "bethel", "island", "rd", "in", "bethel", "island", "?"], "dataset_name": "spider", "guid": 2518}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | What is the best place in san francisco for french food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "What is the best place in san francisco for french food ?", "question_toks": ["What", "is", "the", "best", "place", "in", "san", "francisco", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2519}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | How many artists are above age 46 and joined after 1990?", "sql": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990", "example": {"db_id": "theme_gallery", "query": "SELECT count(*) FROM artist WHERE age  >  46 AND year_join  >  1990", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "artist", "WHERE", "age", ">", "46", "AND", "year_join", ">", "1990"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artist", "where", "age", ">", "value", "and", "year_join", ">", "value"], "question": "How many artists are above age 46 and joined after 1990?", "question_toks": ["How", "many", "artists", "are", "above", "age", "46", "and", "joined", "after", "1990", "?"], "dataset_name": "spider", "guid": 2520}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Show names for artists without any exhibition.", "sql": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)", "example": {"db_id": "theme_gallery", "query": "SELECT name FROM artist WHERE artist_id NOT IN (SELECT artist_id FROM exhibition)", "query_toks": ["SELECT", "name", "FROM", "artist", "WHERE", "artist_id", "NOT", "IN", "(", "SELECT", "artist_id", "FROM", "exhibition", ")"], "query_toks_no_value": ["select", "name", "from", "artist", "where", "artist_id", "not", "in", "(", "select", "artist_id", "from", "exhibition", ")"], "question": "Show names for artists without any exhibition.", "question_toks": ["Show", "names", "for", "artists", "without", "any", "exhibition", "."], "dataset_name": "spider", "guid": 2521}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Return the name of the artist who has the latest join year.", "sql": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1", "example": {"db_id": "theme_gallery", "query": "SELECT name FROM artist ORDER BY year_join DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "artist", "ORDER", "BY", "year_join", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "artist", "order", "by", "year_join", "desc", "limit", "value"], "question": "Return the name of the artist who has the latest join year.", "question_toks": ["Return", "the", "name", "of", "the", "artist", "who", "has", "the", "latest", "join", "year", "."], "dataset_name": "spider", "guid": 2522}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"", "sql": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"", "example": {"db_id": "apartment_rentals", "query": "SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Confirmed\" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T1.booking_status_code  =  \"Provisional\"", "query_toks": ["SELECT", "T2.apt_number", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T1.booking_status_code", "=", "``", "Confirmed", "''", "INTERSECT", "SELECT", "T2.apt_number", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T1.booking_status_code", "=", "``", "Provisional", "''"], "query_toks_no_value": ["select", "t2", ".", "apt_number", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t1", ".", "booking_status_code", "=", "value", "intersect", "select", "t2", ".", "apt_number", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t1", ".", "booking_status_code", "=", "value"], "question": "Show the apartment numbers of apartments with bookings that have status code both \"Provisional\" and \"Confirmed\"", "question_toks": ["Show", "the", "apartment", "numbers", "of", "apartments", "with", "bookings", "that", "have", "status", "code", "both", "``", "Provisional", "''", "and", "``", "Confirmed", "''"], "dataset_name": "spider", "guid": 2523}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Find the average number of bedrooms of all the apartments.", "sql": "SELECT avg(bedroom_count) FROM Apartments", "example": {"db_id": "apartment_rentals", "query": "SELECT avg(bedroom_count) FROM Apartments", "query_toks": ["SELECT", "avg", "(", "bedroom_count", ")", "FROM", "Apartments"], "query_toks_no_value": ["select", "avg", "(", "bedroom_count", ")", "from", "apartments"], "question": "Find the average number of bedrooms of all the apartments.", "question_toks": ["Find", "the", "average", "number", "of", "bedrooms", "of", "all", "the", "apartments", "."], "dataset_name": "spider", "guid": 2524}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Sort the apartment numbers in ascending order of room count.", "sql": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_number FROM Apartments ORDER BY room_count ASC", "query_toks": ["SELECT", "apt_number", "FROM", "Apartments", "ORDER", "BY", "room_count", "ASC"], "query_toks_no_value": ["select", "apt_number", "from", "apartments", "order", "by", "room_count", "asc"], "question": "Sort the apartment numbers in ascending order of room count.", "question_toks": ["Sort", "the", "apartment", "numbers", "in", "ascending", "order", "of", "room", "count", "."], "dataset_name": "spider", "guid": 2525}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Which tourist attractions does the visitor with detail 'Vincent' visit?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"", "query_toks": ["SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "VISITS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "JOIN", "VISITORS", "AS", "T3", "ON", "T2.Tourist_ID", "=", "T3.Tourist_ID", "WHERE", "T3.Tourist_Details", "=", "``", "Vincent", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "visits", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "join", "visitors", "as", "t3", "on", "t2", ".", "tourist_id", "=", "t3", ".", "tourist_id", "where", "t3", ".", "tourist_details", "=", "value"], "question": "Which tourist attractions does the visitor with detail 'Vincent' visit?", "question_toks": ["Which", "tourist", "attractions", "does", "the", "visitor", "with", "detail", "'Vincent", "'", "visit", "?"], "dataset_name": "spider", "guid": 2526}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can i eat arabic food on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where can i eat arabic food on buchanan in san francisco ?", "question_toks": ["where", "can", "i", "eat", "arabic", "food", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2527}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | List all restaurant types.", "sql": "SELECT ResTypeName FROM Restaurant_Type;", "example": {"db_id": "restaurant_1", "query": "SELECT ResTypeName FROM Restaurant_Type;", "query_toks": ["SELECT", "ResTypeName", "FROM", "Restaurant_Type", ";"], "query_toks_no_value": ["select", "restypename", "from", "restaurant_type"], "question": "List all restaurant types.", "question_toks": ["List", "all", "restaurant", "types", "."], "dataset_name": "spider", "guid": 2528}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are the apartment number, start date, and end date of each apartment booking?", "sql": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id", "example": {"db_id": "apartment_rentals", "query": "SELECT T2.apt_number ,  T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id", "query_toks": ["SELECT", "T2.apt_number", ",", "T1.booking_start_date", ",", "T1.booking_start_date", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id"], "query_toks_no_value": ["select", "t2", ".", "apt_number", ",", "t1", ".", "booking_start_date", ",", "t1", ".", "booking_start_date", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id"], "question": "What are the apartment number, start date, and end date of each apartment booking?", "question_toks": ["What", "are", "the", "apartment", "number", ",", "start", "date", ",", "and", "end", "date", "of", "each", "apartment", "booking", "?"], "dataset_name": "spider", "guid": 2529}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Return the apartment number and the number of rooms for each apartment.", "sql": "SELECT apt_number ,  room_count FROM Apartments", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_number ,  room_count FROM Apartments", "query_toks": ["SELECT", "apt_number", ",", "room_count", "FROM", "Apartments"], "query_toks_no_value": ["select", "apt_number", ",", "room_count", "from", "apartments"], "question": "Return the apartment number and the number of rooms for each apartment.", "question_toks": ["Return", "the", "apartment", "number", "and", "the", "number", "of", "rooms", "for", "each", "apartment", "."], "dataset_name": "spider", "guid": 2530}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good arabic restaurant on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good arabic restaurant on buchanan in san francisco ?", "question_toks": ["give", "me", "a", "good", "arabic", "restaurant", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2531}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What are the names, ages, and countries of artists, sorted by the year they joined?", "sql": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join", "example": {"db_id": "theme_gallery", "query": "SELECT name ,  age ,  country FROM artist ORDER BY Year_Join", "query_toks": ["SELECT", "name", ",", "age", ",", "country", "FROM", "artist", "ORDER", "BY", "Year_Join"], "query_toks_no_value": ["select", "name", ",", "age", ",", "country", "from", "artist", "order", "by", "year_join"], "question": "What are the names, ages, and countries of artists, sorted by the year they joined?", "question_toks": ["What", "are", "the", "names", ",", "ages", ",", "and", "countries", "of", "artists", ",", "sorted", "by", "the", "year", "they", "joined", "?"], "dataset_name": "spider", "guid": 2532}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What are the names of artist whose exhibitions draw over 200 attendees on average?", "sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200", "example": {"db_id": "theme_gallery", "query": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200", "query_toks": ["SELECT", "T3.name", "FROM", "exhibition_record", "AS", "T1", "JOIN", "exhibition", "AS", "T2", "ON", "T1.exhibition_id", "=", "T2.exhibition_id", "JOIN", "artist", "AS", "T3", "ON", "T3.artist_id", "=", "T2.artist_id", "GROUP", "BY", "T3.artist_id", "HAVING", "avg", "(", "T1.attendance", ")", ">", "200"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "exhibition_record", "as", "t1", "join", "exhibition", "as", "t2", "on", "t1", ".", "exhibition_id", "=", "t2", ".", "exhibition_id", "join", "artist", "as", "t3", "on", "t3", ".", "artist_id", "=", "t2", ".", "artist_id", "group", "by", "t3", ".", "artist_id", "having", "avg", "(", "t1", ".", "attendance", ")", ">", "value"], "question": "What are the names of artist whose exhibitions draw over 200 attendees on average?", "question_toks": ["What", "are", "the", "names", "of", "artist", "whose", "exhibitions", "draw", "over", "200", "attendees", "on", "average", "?"], "dataset_name": "spider", "guid": 2533}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all the businesses with more than 4.5 stars", "sql": "SELECT name FROM business WHERE rating  >  4.5;", "example": {"db_id": "yelp", "query": "SELECT name FROM business WHERE rating  >  4.5;", "query_toks": ["SELECT", "name", "FROM", "business", "WHERE", "rating", ">", "4.5", ";"], "query_toks_no_value": ["select", "name", "from", "business", "where", "rating", ">", "value"], "question": "List all the businesses with more than 4.5 stars", "question_toks": ["List", "all", "the", "businesses", "with", "more", "than", "4.5", "stars"], "dataset_name": "spider", "guid": 2534}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all businesses with rating 3.5", "sql": "SELECT name FROM business WHERE rating  =  3.5;", "example": {"db_id": "yelp", "query": "SELECT name FROM business WHERE rating  =  3.5;", "query_toks": ["SELECT", "name", "FROM", "business", "WHERE", "rating", "=", "3.5", ";"], "query_toks_no_value": ["select", "name", "from", "business", "where", "rating", "=", "value"], "question": "List all businesses with rating 3.5", "question_toks": ["List", "all", "businesses", "with", "rating", "3.5"], "dataset_name": "spider", "guid": 2535}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | how many chinese places are there in the bay area ?", "sql": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";", "example": {"db_id": "restaurants", "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "chinese", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value"], "question": "how many chinese places are there in the bay area ?", "question_toks": ["how", "many", "chinese", "places", "are", "there", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2536}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Which apartment type code appears the most often?", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "apt_type_code", "FROM", "Apartments", "GROUP", "BY", "apt_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "apt_type_code", "from", "apartments", "group", "by", "apt_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which apartment type code appears the most often?", "question_toks": ["Which", "apartment", "type", "code", "appears", "the", "most", "often", "?"], "dataset_name": "spider", "guid": 2537}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Tell me the booking status code for the apartment with number \"Suite 634\".", "sql": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.apt_number  =  \"Suite 634\"", "query_toks": ["SELECT", "T1.booking_status_code", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T2.apt_number", "=", "``", "Suite", "634", "''"], "query_toks_no_value": ["select", "t1", ".", "booking_status_code", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t2", ".", "apt_number", "=", "value"], "question": "Tell me the booking status code for the apartment with number \"Suite 634\".", "question_toks": ["Tell", "me", "the", "booking", "status", "code", "for", "the", "apartment", "with", "number", "``", "Suite", "634", "''", "."], "dataset_name": "spider", "guid": 2538}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Return the name and country corresponding to the artist who has had the most exhibitions.", "sql": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "theme_gallery", "query": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", ",", "T2.country", "FROM", "exhibition", "AS", "T1", "JOIN", "artist", "AS", "T2", "ON", "T1.artist_id", "=", "T2.artist_id", "GROUP", "BY", "T1.artist_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "country", "from", "exhibition", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "artist_id", "group", "by", "t1", ".", "artist_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the name and country corresponding to the artist who has had the most exhibitions.", "question_toks": ["Return", "the", "name", "and", "country", "corresponding", "to", "the", "artist", "who", "has", "had", "the", "most", "exhibitions", "."], "dataset_name": "spider", "guid": 2539}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find the average number of checkins in restaurant \" Barrio Cafe \" per day", "sql": "SELECT AVG ( t3.count )  ,  t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN checkin AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.category_name  =  \"restaurant\" GROUP BY t3.day;", "example": {"db_id": "yelp", "query": "SELECT AVG ( t3.count )  ,  t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN checkin AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.category_name  =  \"restaurant\" GROUP BY t3.day;", "query_toks": ["SELECT", "AVG", "(", "t3.count", ")", ",", "t3.day", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "checkin", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "WHERE", "t1.name", "=", "``", "Barrio", "Cafe", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", "GROUP", "BY", "t3.day", ";"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "count", ")", ",", "t3", ".", "day", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "checkin", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "category_name", "=", "value", "group", "by", "t3", ".", "day"], "question": "Find the average number of checkins in restaurant \" Barrio Cafe \" per day", "question_toks": ["Find", "the", "average", "number", "of", "checkins", "in", "restaurant", "``", "Barrio", "Cafe", "``", "per", "day"], "dataset_name": "spider", "guid": 2540}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what is a good restaurant on bethel island rd in bethel island ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "bethel", "island", "''", "AND", "t2.street_name", "=", "``", "bethel", "island", "rd", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "what is a good restaurant on bethel island rd in bethel island ?", "question_toks": ["what", "is", "a", "good", "restaurant", "on", "bethel", "island", "rd", "in", "bethel", "island", "?"], "dataset_name": "spider", "guid": 2541}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Return the name and number of reservations made for each of the rooms.", "sql": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room", "example": {"db_id": "inn_1", "query": "SELECT T2.roomName ,  count(*) ,  T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room", "query_toks": ["SELECT", "T2.roomName", ",", "count", "(", "*", ")", ",", "T1.Room", "FROM", "Reservations", "AS", "T1", "JOIN", "Rooms", "AS", "T2", "ON", "T1.Room", "=", "T2.RoomId", "GROUP", "BY", "T1.Room"], "query_toks_no_value": ["select", "t2", ".", "roomname", ",", "count", "(", "*", ")", ",", "t1", ".", "room", "from", "reservations", "as", "t1", "join", "rooms", "as", "t2", "on", "t1", ".", "room", "=", "t2", ".", "roomid", "group", "by", "t1", ".", "room"], "question": "Return the name and number of reservations made for each of the rooms.", "question_toks": ["Return", "the", "name", "and", "number", "of", "reservations", "made", "for", "each", "of", "the", "rooms", "."], "dataset_name": "spider", "guid": 2542}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some restaurants in the bay area ?", "sql": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "LOCATION", "AS", "t2", "JOIN", "restaurant", "AS", "t1", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t1.city_name", "IN", "(", "SELECT", "city_name", "FROM", "geographic", "WHERE", "region", "=", "``", "bay", "area", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "location", "as", "t2", "join", "restaurant", "as", "t1", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t1", ".", "city_name", "in", "(", "select", "city_name", "from", "geographic", "where", "region", "=", "value", ")"], "question": "give me some restaurants in the bay area ?", "question_toks": ["give", "me", "some", "restaurants", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2543}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | What is the average rating of reviews written in year 2014 ?", "sql": "SELECT AVG ( rating ) FROM review WHERE YEAR  =  2014;", "example": {"db_id": "yelp", "query": "SELECT AVG ( rating ) FROM review WHERE YEAR  =  2014;", "query_toks": ["SELECT", "AVG", "(", "rating", ")", "FROM", "review", "WHERE", "YEAR", "=", "2014", ";"], "query_toks_no_value": ["select", "avg", "(", "rating", ")", "from", "review", "where", "year", "=", "value"], "question": "What is the average rating of reviews written in year 2014 ?", "question_toks": ["What", "is", "the", "average", "rating", "of", "reviews", "written", "in", "year", "2014", "?"], "dataset_name": "spider", "guid": 2544}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a arabic restaurant on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a arabic restaurant on buchanan in san francisco ?", "question_toks": ["where", "is", "a", "arabic", "restaurant", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2545}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Which location names contain the word \"film\"?", "sql": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"", "query_toks": ["SELECT", "Location_Name", "FROM", "LOCATIONS", "WHERE", "Location_Name", "LIKE", "``", "%", "film", "%", "''"], "query_toks_no_value": ["select", "location_name", "from", "locations", "where", "location_name", "like", "value"], "question": "Which location names contain the word \"film\"?", "question_toks": ["Which", "location", "names", "contain", "the", "word", "``", "film", "''", "?"], "dataset_name": "spider", "guid": 2546}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all the reviews for all Pet Groomers with more than 100 reviews", "sql": "SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  \"Pet Groomers\";", "example": {"db_id": "yelp", "query": "SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  \"Pet Groomers\";", "query_toks": ["SELECT", "t3.text", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "WHERE", "t1.review_count", ">", "100", "AND", "t2.category_name", "=", "``", "Pet", "Groomers", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "text", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "review_count", ">", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "Find all the reviews for all Pet Groomers with more than 100 reviews", "question_toks": ["Find", "all", "the", "reviews", "for", "all", "Pet", "Groomers", "with", "more", "than", "100", "reviews"], "dataset_name": "spider", "guid": 2547}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all Mexican restaurant in Dallas with at least 3.5 stars", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Dallas", "''", "AND", "t1.rating", ">", "3.5", "AND", "t2.category_name", "=", "``", "Mexican", "''", "AND", "t3.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t1", ".", "rating", ">", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value"], "question": "Find all Mexican restaurant in Dallas with at least 3.5 stars", "question_toks": ["Find", "all", "Mexican", "restaurant", "in", "Dallas", "with", "at", "least", "3.5", "stars"], "dataset_name": "spider", "guid": 2548}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.", "sql": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009", "example": {"db_id": "theme_gallery", "query": "SELECT avg(ticket_price) ,  min(ticket_price) ,  max(ticket_price) FROM exhibition WHERE YEAR  <  2009", "query_toks": ["SELECT", "avg", "(", "ticket_price", ")", ",", "min", "(", "ticket_price", ")", ",", "max", "(", "ticket_price", ")", "FROM", "exhibition", "WHERE", "YEAR", "<", "2009"], "query_toks_no_value": ["select", "avg", "(", "ticket_price", ")", ",", "min", "(", "ticket_price", ")", ",", "max", "(", "ticket_price", ")", "from", "exhibition", "where", "year", "<", "value"], "question": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.", "question_toks": ["Show", "the", "average", ",", "minimum", ",", "and", "maximum", "ticket", "prices", "for", "exhibitions", "for", "all", "years", "before", "2009", "."], "dataset_name": "spider", "guid": 2549}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what are some good places for arabic in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "what are some good places for arabic in mountain view ?", "question_toks": ["what", "are", "some", "good", "places", "for", "arabic", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2550}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Show all artist names with an average exhibition attendance over 200.", "sql": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200", "example": {"db_id": "theme_gallery", "query": "SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id JOIN artist AS T3 ON T3.artist_id  =  T2.artist_id GROUP BY T3.artist_id HAVING avg(T1.attendance)  >  200", "query_toks": ["SELECT", "T3.name", "FROM", "exhibition_record", "AS", "T1", "JOIN", "exhibition", "AS", "T2", "ON", "T1.exhibition_id", "=", "T2.exhibition_id", "JOIN", "artist", "AS", "T3", "ON", "T3.artist_id", "=", "T2.artist_id", "GROUP", "BY", "T3.artist_id", "HAVING", "avg", "(", "T1.attendance", ")", ">", "200"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "exhibition_record", "as", "t1", "join", "exhibition", "as", "t2", "on", "t1", ".", "exhibition_id", "=", "t2", ".", "exhibition_id", "join", "artist", "as", "t3", "on", "t3", ".", "artist_id", "=", "t2", ".", "artist_id", "group", "by", "t3", ".", "artist_id", "having", "avg", "(", "t1", ".", "attendance", ")", ">", "value"], "question": "Show all artist names with an average exhibition attendance over 200.", "question_toks": ["Show", "all", "artist", "names", "with", "an", "average", "exhibition", "attendance", "over", "200", "."], "dataset_name": "spider", "guid": 2551}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me a good place in mountain view for arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me a good place in mountain view for arabic food ?", "question_toks": ["give", "me", "a", "good", "place", "in", "mountain", "view", "for", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2552}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | What is the description of the restaurant type Sandwich?", "sql": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";", "example": {"db_id": "restaurant_1", "query": "SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = \"Sandwich\";", "query_toks": ["SELECT", "ResTypeDescription", "FROM", "Restaurant_Type", "WHERE", "ResTypeName", "=", "``", "Sandwich", "''", ";"], "query_toks_no_value": ["select", "restypedescription", "from", "restaurant_type", "where", "restypename", "=", "value"], "question": "What is the description of the restaurant type Sandwich?", "question_toks": ["What", "is", "the", "description", "of", "the", "restaurant", "type", "Sandwich", "?"], "dataset_name": "spider", "guid": 2553}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all cities which has a \" Taj Mahal \" .", "sql": "SELECT city FROM business WHERE name  =  \"Taj Mahal\";", "example": {"db_id": "yelp", "query": "SELECT city FROM business WHERE name  =  \"Taj Mahal\";", "query_toks": ["SELECT", "city", "FROM", "business", "WHERE", "name", "=", "``", "Taj", "Mahal", "''", ";"], "query_toks_no_value": ["select", "city", "from", "business", "where", "name", "=", "value"], "question": "Find all cities which has a \" Taj Mahal \" .", "question_toks": ["Find", "all", "cities", "which", "has", "a", "``", "Taj", "Mahal", "``", "."], "dataset_name": "spider", "guid": 2554}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | Show me all the restaurants.", "sql": "SELECT ResName FROM Restaurant;", "example": {"db_id": "restaurant_1", "query": "SELECT ResName FROM Restaurant;", "query_toks": ["SELECT", "ResName", "FROM", "Restaurant", ";"], "query_toks_no_value": ["select", "resname", "from", "restaurant"], "question": "Show me all the restaurants.", "question_toks": ["Show", "me", "all", "the", "restaurants", "."], "dataset_name": "spider", "guid": 2555}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Give me the star rating descriptions of the hotels that cost more than 10000.", "sql": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000", "example": {"db_id": "cre_Theme_park", "query": "SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code  =  T2.star_rating_code WHERE T1.price_range  >  10000", "query_toks": ["SELECT", "T2.star_rating_description", "FROM", "HOTELS", "AS", "T1", "JOIN", "Ref_Hotel_Star_Ratings", "AS", "T2", "ON", "T1.star_rating_code", "=", "T2.star_rating_code", "WHERE", "T1.price_range", ">", "10000"], "query_toks_no_value": ["select", "t2", ".", "star_rating_description", "from", "hotels", "as", "t1", "join", "ref_hotel_star_ratings", "as", "t2", "on", "t1", ".", "star_rating_code", "=", "t2", ".", "star_rating_code", "where", "t1", ".", "price_range", ">", "value"], "question": "Give me the star rating descriptions of the hotels that cost more than 10000.", "question_toks": ["Give", "me", "the", "star", "rating", "descriptions", "of", "the", "hotels", "that", "cost", "more", "than", "10000", "."], "dataset_name": "spider", "guid": 2556}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Return me the number of businesses that are restaurant .", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  \"restaurant\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  \"restaurant\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t2.category_name", "=", "``", "restaurant", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t2", ".", "category_name", "=", "value"], "question": "Return me the number of businesses that are restaurant .", "question_toks": ["Return", "me", "the", "number", "of", "businesses", "that", "are", "restaurant", "."], "dataset_name": "spider", "guid": 2557}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | find the number of escape games in Madison", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Madison", "''", "AND", "t2.category_name", "=", "``", "escape", "games", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "find the number of escape games in Madison", "question_toks": ["find", "the", "number", "of", "escape", "games", "in", "Madison"], "dataset_name": "spider", "guid": 2558}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the short names of the buildings managed by \"Emma\".", "sql": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"", "example": {"db_id": "apartment_rentals", "query": "SELECT building_short_name FROM Apartment_Buildings WHERE building_manager\t =  \"Emma\"", "query_toks": ["SELECT", "building_short_name", "FROM", "Apartment_Buildings", "WHERE", "building_manager", "=", "``", "Emma", "''"], "query_toks_no_value": ["select", "building_short_name", "from", "apartment_buildings", "where", "building_manager", "=", "value"], "question": "Show the short names of the buildings managed by \"Emma\".", "question_toks": ["Show", "the", "short", "names", "of", "the", "buildings", "managed", "by", "``", "Emma", "''", "."], "dataset_name": "spider", "guid": 2559}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are the first names and last names of all the guests?", "sql": "SELECT guest_first_name ,  guest_last_name FROM Guests", "example": {"db_id": "apartment_rentals", "query": "SELECT guest_first_name ,  guest_last_name FROM Guests", "query_toks": ["SELECT", "guest_first_name", ",", "guest_last_name", "FROM", "Guests"], "query_toks_no_value": ["select", "guest_first_name", ",", "guest_last_name", "from", "guests"], "question": "What are the first names and last names of all the guests?", "question_toks": ["What", "are", "the", "first", "names", "and", "last", "names", "of", "all", "the", "guests", "?"], "dataset_name": "spider", "guid": 2560}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find all the distinct visit dates.", "sql": "SELECT DISTINCT Visit_Date FROM VISITS", "example": {"db_id": "cre_Theme_park", "query": "SELECT DISTINCT Visit_Date FROM VISITS", "query_toks": ["SELECT", "DISTINCT", "Visit_Date", "FROM", "VISITS"], "query_toks_no_value": ["select", "distinct", "visit_date", "from", "visits"], "question": "Find all the distinct visit dates.", "question_toks": ["Find", "all", "the", "distinct", "visit", "dates", "."], "dataset_name": "spider", "guid": 2561}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where can i eat french food in the bay area ?", "sql": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"french\";", "example": {"db_id": "restaurants", "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"french\";", "query_toks": ["SELECT", "t3.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "geographic", "AS", "t2", "ON", "t1.city_name", "=", "t2.city_name", "JOIN", "LOCATION", "AS", "t3", "ON", "t1.id", "=", "t3.restaurant_id", "WHERE", "t2.region", "=", "``", "bay", "area", "''", "AND", "t1.food_type", "=", "``", "french", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "geographic", "as", "t2", "on", "t1", ".", "city_name", "=", "t2", ".", "city_name", "join", "location", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "restaurant_id", "where", "t2", ".", "region", "=", "value", "and", "t1", ".", "food_type", "=", "value"], "question": "where can i eat french food in the bay area ?", "question_toks": ["where", "can", "i", "eat", "french", "food", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2562}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | What are the apartment number and the room count of each apartment?", "sql": "SELECT apt_number ,  room_count FROM Apartments", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_number ,  room_count FROM Apartments", "query_toks": ["SELECT", "apt_number", ",", "room_count", "FROM", "Apartments"], "query_toks_no_value": ["select", "apt_number", ",", "room_count", "from", "apartments"], "question": "What are the apartment number and the room count of each apartment?", "question_toks": ["What", "are", "the", "apartment", "number", "and", "the", "room", "count", "of", "each", "apartment", "?"], "dataset_name": "spider", "guid": 2563}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | Find the name and age of the visitor who bought the most tickets at once.", "sql": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "example": {"db_id": "museum_visit", "query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", ",", "t1.age", "FROM", "visitor", "AS", "t1", "JOIN", "visit", "AS", "t2", "ON", "t1.id", "=", "t2.visitor_id", "ORDER", "BY", "t2.num_of_ticket", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "visitor_id", "order", "by", "t2", ".", "num_of_ticket", "desc", "limit", "value"], "question": "Find the name and age of the visitor who bought the most tickets at once.", "question_toks": ["Find", "the", "name", "and", "age", "of", "the", "visitor", "who", "bought", "the", "most", "tickets", "at", "once", "."], "dataset_name": "spider", "guid": 2564}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.", "sql": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Attraction_Type_Description", ",", "T2.Attraction_Type_Code", "FROM", "Ref_Attraction_Types", "AS", "T1", "JOIN", "Tourist_Attractions", "AS", "T2", "ON", "T1.Attraction_Type_Code", "=", "T2.Attraction_Type_Code", "GROUP", "BY", "T2.Attraction_Type_Code", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "attraction_type_description", ",", "t2", ".", "attraction_type_code", "from", "ref_attraction_types", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "attraction_type_code", "=", "t2", ".", "attraction_type_code", "group", "by", "t2", ".", "attraction_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.", "question_toks": ["Which", "attraction", "type", "does", "the", "most", "tourist", "attractions", "belong", "to", "?", "Tell", "me", "its", "attraction", "type", "description", "and", "code", "."], "dataset_name": "spider", "guid": 2565}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all users who have written tips for \" Barrio Cafe \" in 2015", "sql": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;", "example": {"db_id": "yelp", "query": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;", "query_toks": ["SELECT", "t3.name", "FROM", "tip", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t3", "ON", "t3.user_id", "=", "t2.user_id", "WHERE", "t1.name", "=", "``", "Barrio", "Cafe", "''", "AND", "t2.year", "=", "2015", ";"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "tip", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t3", "on", "t3", ".", "user_id", "=", "t2", ".", "user_id", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "Find all users who have written tips for \" Barrio Cafe \" in 2015", "question_toks": ["Find", "all", "users", "who", "have", "written", "tips", "for", "``", "Barrio", "Cafe", "``", "in", "2015"], "dataset_name": "spider", "guid": 2566}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | Which address has both members younger than 30 and members older than 40?", "sql": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40", "example": {"db_id": "coffee_shop", "query": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40", "query_toks": ["SELECT", "address", "FROM", "member", "WHERE", "age", "<", "30", "INTERSECT", "SELECT", "address", "FROM", "member", "WHERE", "age", ">", "40"], "query_toks_no_value": ["select", "address", "from", "member", "where", "age", "<", "value", "intersect", "select", "address", "from", "member", "where", "age", ">", "value"], "question": "Which address has both members younger than 30 and members older than 40?", "question_toks": ["Which", "address", "has", "both", "members", "younger", "than", "30", "and", "members", "older", "than", "40", "?"], "dataset_name": "spider", "guid": 2567}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".", "sql": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"", "query_toks": ["SELECT", "T1.Name", ",", "T1.Description", "FROM", "PHOTOS", "AS", "T1", "JOIN", "TOURIST_ATTRACTIONS", "AS", "T2", "ON", "T1.Tourist_Attraction_ID", "=", "T2.Tourist_Attraction_ID", "WHERE", "T2.Name", "=", "``", "film", "festival", "''"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "description", "from", "photos", "as", "t1", "join", "tourist_attractions", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "where", "t2", ".", "name", "=", "value"], "question": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".", "question_toks": ["Find", "the", "names", "and", "descriptions", "of", "the", "photos", "taken", "at", "the", "tourist", "attraction", "called", "``", "film", "festival", "''", "."], "dataset_name": "spider", "guid": 2568}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all reviews for businesses rated 2.5", "sql": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;", "example": {"db_id": "yelp", "query": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;", "query_toks": ["SELECT", "t2.text", "FROM", "review", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.rating", "=", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "text", "from", "review", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "rating", "=", "value"], "question": "Find all reviews for businesses rated 2.5", "question_toks": ["Find", "all", "reviews", "for", "businesses", "rated", "2.5"], "dataset_name": "spider", "guid": 2569}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some good places for arabic on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "give me some good places for arabic on buchanan in san francisco ?", "question_toks": ["give", "me", "some", "good", "places", "for", "arabic", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2570}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a good arabic restaurant in mountain view ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a good arabic restaurant in mountain view ?", "question_toks": ["where", "is", "a", "good", "arabic", "restaurant", "in", "mountain", "view", "?"], "dataset_name": "spider", "guid": 2571}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | Give me the names of members whose address is in Harford or Waterbury.", "sql": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'", "example": {"db_id": "coffee_shop", "query": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'", "query_toks": ["SELECT", "name", "FROM", "member", "WHERE", "address", "=", "'Harford", "'", "OR", "address", "=", "'Waterbury", "'"], "query_toks_no_value": ["select", "name", "from", "member", "where", "address", "=", "value", "or", "address", "=", "value"], "question": "Give me the names of members whose address is in Harford or Waterbury.", "question_toks": ["Give", "me", "the", "names", "of", "members", "whose", "address", "is", "in", "Harford", "or", "Waterbury", "."], "dataset_name": "spider", "guid": 2572}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a restaurant on buchanan in san francisco that serves good arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a restaurant on buchanan in san francisco that serves good arabic food ?", "question_toks": ["where", "is", "a", "restaurant", "on", "buchanan", "in", "san", "francisco", "that", "serves", "good", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2573}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What are the themes and years for exhibitions, sorted by ticket price descending?", "sql": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC", "example": {"db_id": "theme_gallery", "query": "SELECT theme ,  YEAR FROM exhibition ORDER BY ticket_price DESC", "query_toks": ["SELECT", "theme", ",", "YEAR", "FROM", "exhibition", "ORDER", "BY", "ticket_price", "DESC"], "query_toks_no_value": ["select", "theme", ",", "year", "from", "exhibition", "order", "by", "ticket_price", "desc"], "question": "What are the themes and years for exhibitions, sorted by ticket price descending?", "question_toks": ["What", "are", "the", "themes", "and", "years", "for", "exhibitions", ",", "sorted", "by", "ticket", "price", "descending", "?"], "dataset_name": "spider", "guid": 2574}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What is the address of the location \"UK Gallery\"?", "sql": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "example": {"db_id": "cre_Theme_park", "query": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"", "query_toks": ["SELECT", "Address", "FROM", "LOCATIONS", "WHERE", "Location_Name", "=", "``", "UK", "Gallery", "''"], "query_toks_no_value": ["select", "address", "from", "locations", "where", "location_name", "=", "value"], "question": "What is the address of the location \"UK Gallery\"?", "question_toks": ["What", "is", "the", "address", "of", "the", "location", "``", "UK", "Gallery", "''", "?"], "dataset_name": "spider", "guid": 2575}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a good restaurant in mountain view for arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "mountain", "view", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a good restaurant in mountain view for arabic food ?", "question_toks": ["where", "is", "a", "good", "restaurant", "in", "mountain", "view", "for", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2576}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a restaurant in alameda ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "alameda", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value"], "question": "where is a restaurant in alameda ?", "question_toks": ["where", "is", "a", "restaurant", "in", "alameda", "?"], "dataset_name": "spider", "guid": 2577}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What is the average price range of five star hotels that allow pets?", "sql": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1", "example": {"db_id": "cre_Theme_park", "query": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1", "query_toks": ["SELECT", "avg", "(", "price_range", ")", "FROM", "HOTELS", "WHERE", "star_rating_code", "=", "``", "5", "''", "AND", "pets_allowed_yn", "=", "1"], "query_toks_no_value": ["select", "avg", "(", "price_range", ")", "from", "hotels", "where", "star_rating_code", "=", "value", "and", "pets_allowed_yn", "=", "value"], "question": "What is the average price range of five star hotels that allow pets?", "question_toks": ["What", "is", "the", "average", "price", "range", "of", "five", "star", "hotels", "that", "allow", "pets", "?"], "dataset_name": "spider", "guid": 2578}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | What is the average and minimum age of all artists from United States.", "sql": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'", "example": {"db_id": "theme_gallery", "query": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "min", "(", "age", ")", "FROM", "artist", "WHERE", "country", "=", "'United", "States", "'"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", "from", "artist", "where", "country", "=", "value"], "question": "What is the average and minimum age of all artists from United States.", "question_toks": ["What", "is", "the", "average", "and", "minimum", "age", "of", "all", "artists", "from", "United", "States", "."], "dataset_name": "spider", "guid": 2579}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all Italian restaurant in the Meadowood neighbourhood of Madison", "sql": "SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN category AS t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Meadowood\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN category AS t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Meadowood\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t3", "JOIN", "business", "AS", "t1", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t4", "ON", "t4.business_id", "=", "t1.business_id", "JOIN", "neighbourhood", "AS", "t2", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Madison", "''", "AND", "t3.category_name", "=", "``", "Italian", "''", "AND", "t4.category_name", "=", "``", "restaurant", "''", "AND", "t2.neighbourhood_name", "=", "``", "Meadowood", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t3", "join", "business", "as", "t1", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t4", "on", "t4", ".", "business_id", "=", "t1", ".", "business_id", "join", "neighbourhood", "as", "t2", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t3", ".", "category_name", "=", "value", "and", "t4", ".", "category_name", "=", "value", "and", "t2", ".", "neighbourhood_name", "=", "value"], "question": "Find all Italian restaurant in the Meadowood neighbourhood of Madison", "question_toks": ["Find", "all", "Italian", "restaurant", "in", "the", "Meadowood", "neighbourhood", "of", "Madison"], "dataset_name": "spider", "guid": 2580}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | Find the number of times ROY SWEAZY has reserved a room.", "sql": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "example": {"db_id": "inn_1", "query": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Reservations", "WHERE", "FirstName", "=", "``", "ROY", "''", "AND", "LastName", "=", "``", "SWEAZY", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "reservations", "where", "firstname", "=", "value", "and", "lastname", "=", "value"], "question": "Find the number of times ROY SWEAZY has reserved a room.", "question_toks": ["Find", "the", "number", "of", "times", "ROY", "SWEAZY", "has", "reserved", "a", "room", "."], "dataset_name": "spider", "guid": 2581}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a good place on buchanan in san francisco for arabic food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a good place on buchanan in san francisco for arabic food ?", "question_toks": ["where", "is", "a", "good", "place", "on", "buchanan", "in", "san", "francisco", "for", "arabic", "food", "?"], "dataset_name": "spider", "guid": 2582}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the most common apartment type code.", "sql": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "apt_type_code", "FROM", "Apartments", "GROUP", "BY", "apt_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "apt_type_code", "from", "apartments", "group", "by", "apt_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common apartment type code.", "question_toks": ["Show", "the", "most", "common", "apartment", "type", "code", "."], "dataset_name": "spider", "guid": 2583}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find all Bars in \" Los Angeles \" with at least 30 reviews and average rating above 3 stars", "sql": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  \"Bars\";", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  \"Bars\";", "query_toks": ["SELECT", "t1.name", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Los", "Angeles", "''", "AND", "t1.rating", ">", "3", "AND", "t1.review_count", ">", "30", "AND", "t2.category_name", "=", "``", "Bars", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t1", ".", "rating", ">", "value", "and", "t1", ".", "review_count", ">", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "Find all Bars in \" Los Angeles \" with at least 30 reviews and average rating above 3 stars", "question_toks": ["Find", "all", "Bars", "in", "``", "Los", "Angeles", "``", "with", "at", "least", "30", "reviews", "and", "average", "rating", "above", "3", "stars"], "dataset_name": "spider", "guid": 2584}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?", "sql": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'", "example": {"db_id": "cre_Theme_park", "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'", "query_toks": ["SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "Tourist_Attraction_Features", "AS", "T2", "ON", "T1.tourist_attraction_id", "=", "T2.tourist_attraction_id", "JOIN", "Features", "AS", "T3", "ON", "T2.Feature_ID", "=", "T3.Feature_ID", "WHERE", "T3.feature_Details", "=", "'park", "'", "UNION", "SELECT", "T1.Name", "FROM", "Tourist_Attractions", "AS", "T1", "JOIN", "Tourist_Attraction_Features", "AS", "T2", "ON", "T1.tourist_attraction_id", "=", "T2.tourist_attraction_id", "JOIN", "Features", "AS", "T3", "ON", "T2.Feature_ID", "=", "T3.Feature_ID", "WHERE", "T3.feature_Details", "=", "'shopping", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "tourist_attraction_features", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "join", "features", "as", "t3", "on", "t2", ".", "feature_id", "=", "t3", ".", "feature_id", "where", "t3", ".", "feature_details", "=", "value", "union", "select", "t1", ".", "name", "from", "tourist_attractions", "as", "t1", "join", "tourist_attraction_features", "as", "t2", "on", "t1", ".", "tourist_attraction_id", "=", "t2", ".", "tourist_attraction_id", "join", "features", "as", "t3", "on", "t2", ".", "feature_id", "=", "t3", ".", "feature_id", "where", "t3", ".", "feature_details", "=", "value"], "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?", "question_toks": ["Find", "the", "tourist", "attractions", "that", "have", "parking", "or", "shopping", "as", "their", "feature", "details", ".", "What", "are", "the", "names", "of", "the", "attractions", "?"], "dataset_name": "spider", "guid": 2585}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | what are some good restaurants in the bay area ?", "sql": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "LOCATION", "AS", "t2", "JOIN", "restaurant", "AS", "t1", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t1.city_name", "IN", "(", "SELECT", "city_name", "FROM", "geographic", "WHERE", "region", "=", "``", "region0", "''", ")", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "location", "as", "t2", "join", "restaurant", "as", "t1", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t1", ".", "city_name", "in", "(", "select", "city_name", "from", "geographic", "where", "region", "=", "value", ")", "and", "t1", ".", "rating", ">", "value"], "question": "what are some good restaurants in the bay area ?", "question_toks": ["what", "are", "some", "good", "restaurants", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2586}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many users have reviewed Irish Pub in Dallas ?", "sql": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"Irish Pub\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"Irish Pub\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "review", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "JOIN", "USER", "AS", "t4", "ON", "t4.user_id", "=", "t3.user_id", "WHERE", "t1.city", "=", "``", "Dallas", "''", "AND", "t2.category_name", "=", "``", "Irish", "Pub", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "review", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "join", "user", "as", "t4", "on", "t4", ".", "user_id", "=", "t3", ".", "user_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value"], "question": "How many users have reviewed Irish Pub in Dallas ?", "question_toks": ["How", "many", "users", "have", "reviewed", "Irish", "Pub", "in", "Dallas", "?"], "dataset_name": "spider", "guid": 2587}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Find the booking start date and end date for the apartments that have more than two bedrooms.", "sql": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2", "example": {"db_id": "apartment_rentals", "query": "SELECT T1.booking_start_date ,  T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id  =  T2.apt_id WHERE T2.bedroom_count  >  2", "query_toks": ["SELECT", "T1.booking_start_date", ",", "T1.booking_start_date", "FROM", "Apartment_Bookings", "AS", "T1", "JOIN", "Apartments", "AS", "T2", "ON", "T1.apt_id", "=", "T2.apt_id", "WHERE", "T2.bedroom_count", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "booking_start_date", ",", "t1", ".", "booking_start_date", "from", "apartment_bookings", "as", "t1", "join", "apartments", "as", "t2", "on", "t1", ".", "apt_id", "=", "t2", ".", "apt_id", "where", "t2", ".", "bedroom_count", ">", "value"], "question": "Find the booking start date and end date for the apartments that have more than two bedrooms.", "question_toks": ["Find", "the", "booking", "start", "date", "and", "end", "date", "for", "the", "apartments", "that", "have", "more", "than", "two", "bedrooms", "."], "dataset_name": "spider", "guid": 2588}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | give me some good restaurants in the bay area ?", "sql": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "LOCATION", "AS", "t2", "JOIN", "restaurant", "AS", "t1", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t1.city_name", "IN", "(", "SELECT", "city_name", "FROM", "geographic", "WHERE", "region", "=", "``", "region0", "''", ")", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "location", "as", "t2", "join", "restaurant", "as", "t1", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t1", ".", "city_name", "in", "(", "select", "city_name", "from", "geographic", "where", "region", "=", "value", ")", "and", "t1", ".", "rating", ">", "value"], "question": "give me some good restaurants in the bay area ?", "question_toks": ["give", "me", "some", "good", "restaurants", "in", "the", "bay", "area", "?"], "dataset_name": "spider", "guid": 2589}}
{"text": "Rooms: RoomId, roomName, beds, bedType, maxOccupancy, basePrice, decor; Reservations: Code, Room, CheckIn, CheckOut, Rate, LastName, FirstName, Adults, Kids | What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.", "sql": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;", "example": {"db_id": "inn_1", "query": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2;", "query_toks": ["SELECT", "roomName", ",", "RoomId", "FROM", "Rooms", "WHERE", "basePrice", ">", "160", "AND", "maxOccupancy", ">", "2", ";"], "query_toks_no_value": ["select", "roomname", ",", "roomid", "from", "rooms", "where", "baseprice", ">", "value", "and", "maxoccupancy", ">", "value"], "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.", "question_toks": ["What", "are", "the", "room", "names", "and", "ids", "of", "all", "the", "rooms", "that", "cost", "more", "than", "160", "and", "can", "accommodate", "more", "than", "two", "people", "."], "dataset_name": "spider", "guid": 2590}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | What are the distinct visit dates?", "sql": "SELECT DISTINCT Visit_Date FROM VISITS", "example": {"db_id": "cre_Theme_park", "query": "SELECT DISTINCT Visit_Date FROM VISITS", "query_toks": ["SELECT", "DISTINCT", "Visit_Date", "FROM", "VISITS"], "query_toks_no_value": ["select", "distinct", "visit_date", "from", "visits"], "question": "What are the distinct visit dates?", "question_toks": ["What", "are", "the", "distinct", "visit", "dates", "?"], "dataset_name": "spider", "guid": 2591}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | How many countries do not have an roller coaster longer than 3000?", "sql": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )", "example": {"db_id": "roller_coaster", "query": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "country", "WHERE", "country_id", "NOT", "IN", "(", "SELECT", "country_id", "FROM", "roller_coaster", "WHERE", "LENGTH", ">", "3000", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country", "where", "country_id", "not", "in", "(", "select", "country_id", "from", "roller_coaster", "where", "length", ">", "value", ")"], "question": "How many countries do not have an roller coaster longer than 3000?", "question_toks": ["How", "many", "countries", "do", "not", "have", "an", "roller", "coaster", "longer", "than", "3000", "?"], "dataset_name": "spider", "guid": 2592}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Return me the number of tips that are written by Michelle in 2010 .", "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.text", ")", "FROM", "USER", "AS", "t2", "JOIN", "tip", "AS", "t1", "ON", "t2.user_id", "=", "t1.user_id", "WHERE", "t1.year", "=", "2010", "AND", "t2.name", "=", "``", "Michelle", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "text", ")", "from", "user", "as", "t2", "join", "tip", "as", "t1", "on", "t2", ".", "user_id", "=", "t1", ".", "user_id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "Return me the number of tips that are written by Michelle in 2010 .", "question_toks": ["Return", "me", "the", "number", "of", "tips", "that", "are", "written", "by", "Michelle", "in", "2010", "."], "dataset_name": "spider", "guid": 2593}}
{"text": "shop: Shop_ID, Address, Num_of_staff, Score, Open_Year; member: Member_ID, Name, Membership_card, Age, Time_of_purchase, Level_of_membership, Address; happy_hour: HH_ID, Shop_ID, Month, Num_of_shaff_in_charge; happy_hour_member: HH_ID, Member_ID, Total_amount | Find the ids and names of members who are under age 30 or with black membership card.", "sql": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30", "example": {"db_id": "coffee_shop", "query": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30", "query_toks": ["SELECT", "name", ",", "member_id", "FROM", "member", "WHERE", "Membership_card", "=", "'Black", "'", "OR", "age", "<", "30"], "query_toks_no_value": ["select", "name", ",", "member_id", "from", "member", "where", "membership_card", "=", "value", "or", "age", "<", "value"], "question": "Find the ids and names of members who are under age 30 or with black membership card.", "question_toks": ["Find", "the", "ids", "and", "names", "of", "members", "who", "are", "under", "age", "30", "or", "with", "black", "membership", "card", "."], "dataset_name": "spider", "guid": 2594}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Return the first names and last names of all guests", "sql": "SELECT guest_first_name ,  guest_last_name FROM Guests", "example": {"db_id": "apartment_rentals", "query": "SELECT guest_first_name ,  guest_last_name FROM Guests", "query_toks": ["SELECT", "guest_first_name", ",", "guest_last_name", "FROM", "Guests"], "query_toks_no_value": ["select", "guest_first_name", ",", "guest_last_name", "from", "guests"], "question": "Return the first names and last names of all guests", "question_toks": ["Return", "the", "first", "names", "and", "last", "names", "of", "all", "guests"], "dataset_name": "spider", "guid": 2595}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | Find the business with the most number of reviews in April", "sql": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  \"April\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1;", "example": {"db_id": "yelp", "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  \"April\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "review", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t2.month", "=", "``", "April", "''", "GROUP", "BY", "t1.name", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t2.text", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "review", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t2", ".", "month", "=", "value", "group", "by", "t1", ".", "name", "order", "by", "count", "(", "distinct", "t2", ".", "text", ")", "desc", "limit", "value"], "question": "Find the business with the most number of reviews in April", "question_toks": ["Find", "the", "business", "with", "the", "most", "number", "of", "reviews", "in", "April"], "dataset_name": "spider", "guid": 2596}}
{"text": "museum: Museum_ID, Name, Num_of_Staff, Open_Year; visitor: ID, Name, Level_of_membership, Age; visit: Museum_ID, visitor_ID, Num_of_Ticket, Total_spent | find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "sql": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "example": {"db_id": "museum_visit", "query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)", "query_toks": ["SELECT", "name", "FROM", "museum", "WHERE", "num_of_staff", ">", "(", "SELECT", "min", "(", "num_of_staff", ")", "FROM", "museum", "WHERE", "open_year", ">", "2010", ")"], "query_toks_no_value": ["select", "name", "from", "museum", "where", "num_of_staff", ">", "(", "select", "min", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", ">", "value", ")"], "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "question_toks": ["find", "the", "names", "of", "museums", "which", "have", "more", "staff", "than", "the", "minimum", "staff", "number", "of", "all", "museums", "opened", "after", "2010", "."], "dataset_name": "spider", "guid": 2597}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Restaurant: ResID, ResName, Address, Rating; Type_Of_Restaurant: ResID, ResTypeID; Restaurant_Type: ResTypeID, ResTypeName, ResTypeDescription; Visits_Restaurant: StuID, ResID, Time, Spent | How long does student Linda Smith spend on the restaurant in total?", "sql": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";", "example": {"db_id": "restaurant_1", "query": "SELECT sum(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\";", "query_toks": ["SELECT", "sum", "(", "Spent", ")", "FROM", "Student", "JOIN", "Visits_Restaurant", "ON", "Student.StuID", "=", "Visits_Restaurant.StuID", "WHERE", "Student.Fname", "=", "``", "Linda", "''", "AND", "Student.Lname", "=", "``", "Smith", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "spent", ")", "from", "student", "join", "visits_restaurant", "on", "student.stuid", "=", "visits_restaurant.stuid", "where", "student.fname", "=", "value", "and", "student.lname", "=", "value"], "question": "How long does student Linda Smith spend on the restaurant in total?", "question_toks": ["How", "long", "does", "student", "Linda", "Smith", "spend", "on", "the", "restaurant", "in", "total", "?"], "dataset_name": "spider", "guid": 2598}}
{"text": "Ref_Hotel_Star_Ratings: star_rating_code, star_rating_description; Locations: Location_ID, Location_Name, Address, Other_Details; Ref_Attraction_Types: Attraction_Type_Code, Attraction_Type_Description; Visitors: Tourist_ID, Tourist_Details; Features: Feature_ID, Feature_Details; Hotels: hotel_id, star_rating_code, pets_allowed_yn, price_range, other_hotel_details; Tourist_Attractions: Tourist_Attraction_ID, Attraction_Type_Code, Location_ID, How_to_Get_There, Name, Description, Opening_Hours, Other_Details; Street_Markets: Market_ID, Market_Details; Shops: Shop_ID, Shop_Details; Museums: Museum_ID, Museum_Details | Show the average price of hotels for each star rating code.", "sql": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code", "example": {"db_id": "cre_Theme_park", "query": "SELECT star_rating_code ,  avg(price_range) FROM HOTELS GROUP BY star_rating_code", "query_toks": ["SELECT", "star_rating_code", ",", "avg", "(", "price_range", ")", "FROM", "HOTELS", "GROUP", "BY", "star_rating_code"], "query_toks_no_value": ["select", "star_rating_code", ",", "avg", "(", "price_range", ")", "from", "hotels", "group", "by", "star_rating_code"], "question": "Show the average price of hotels for each star rating code.", "question_toks": ["Show", "the", "average", "price", "of", "hotels", "for", "each", "star", "rating", "code", "."], "dataset_name": "spider", "guid": 2599}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many Egyptian restaurant are there in Edinburgh ?", "sql": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Edinburgh\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Egyptian\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Edinburgh\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Egyptian\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "category", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "JOIN", "category", "AS", "t3", "ON", "t3.business_id", "=", "t1.business_id", "WHERE", "t1.city", "=", "``", "Edinburgh", "''", "AND", "t2.category_name", "=", "``", "restaurant", "''", "AND", "t3.category_name", "=", "``", "Egyptian", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "category", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "join", "category", "as", "t3", "on", "t3", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "city", "=", "value", "and", "t2", ".", "category_name", "=", "value", "and", "t3", ".", "category_name", "=", "value"], "question": "How many Egyptian restaurant are there in Edinburgh ?", "question_toks": ["How", "many", "Egyptian", "restaurant", "are", "there", "in", "Edinburgh", "?"], "dataset_name": "spider", "guid": 2600}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | How many reviews has Adrienne written ?", "sql": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Adrienne\";", "example": {"db_id": "yelp", "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Adrienne\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.text", ")", "FROM", "USER", "AS", "t2", "JOIN", "review", "AS", "t1", "ON", "t2.user_id", "=", "t1.user_id", "WHERE", "t2.name", "=", "``", "Adrienne", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "text", ")", "from", "user", "as", "t2", "join", "review", "as", "t1", "on", "t2", ".", "user_id", "=", "t1", ".", "user_id", "where", "t2", ".", "name", "=", "value"], "question": "How many reviews has Adrienne written ?", "question_toks": ["How", "many", "reviews", "has", "Adrienne", "written", "?"], "dataset_name": "spider", "guid": 2601}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Show theme and year for all exhibitions with ticket prices lower than 15.", "sql": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15", "example": {"db_id": "theme_gallery", "query": "SELECT theme ,  YEAR FROM exhibition WHERE ticket_price  <  15", "query_toks": ["SELECT", "theme", ",", "YEAR", "FROM", "exhibition", "WHERE", "ticket_price", "<", "15"], "query_toks_no_value": ["select", "theme", ",", "year", "from", "exhibition", "where", "ticket_price", "<", "value"], "question": "Show theme and year for all exhibitions with ticket prices lower than 15.", "question_toks": ["Show", "theme", "and", "year", "for", "all", "exhibitions", "with", "ticket", "prices", "lower", "than", "15", "."], "dataset_name": "spider", "guid": 2602}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Return the different countries for artists.", "sql": "SELECT DISTINCT country FROM artist", "example": {"db_id": "theme_gallery", "query": "SELECT DISTINCT country FROM artist", "query_toks": ["SELECT", "DISTINCT", "country", "FROM", "artist"], "query_toks_no_value": ["select", "distinct", "country", "from", "artist"], "question": "Return the different countries for artists.", "question_toks": ["Return", "the", "different", "countries", "for", "artists", "."], "dataset_name": "spider", "guid": 2603}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | where is a good arabic restaurant on buchanan in san francisco ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t2.street_name", "=", "``", "buchanan", "''", "AND", "t1.food_type", "=", "``", "arabic", "''", "AND", "t1.rating", ">", "2.5", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t2", ".", "street_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", ">", "value"], "question": "where is a good arabic restaurant on buchanan in san francisco ?", "question_toks": ["where", "is", "a", "good", "arabic", "restaurant", "on", "buchanan", "in", "san", "francisco", "?"], "dataset_name": "spider", "guid": 2604}}
{"text": "business: bid, business_id, name, full_address, city, latitude, longitude, review_count, is_open, rating; category: id, business_id, category_name; user: uid, user_id, name; checkin: cid, business_id, count, day; neighbourhood: id, business_id, neighbourhood_name; review: rid, business_id, user_id, rating, text, year, month; tip: tip_id, business_id, text, user_id, likes, year, month | List all tips for \" Cafe Zinho \" in Pennsylvania in 2010 .", "sql": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Pennsylvania\" AND t2.year  =  2010;", "example": {"db_id": "yelp", "query": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Pennsylvania\" AND t2.year  =  2010;", "query_toks": ["SELECT", "t2.text", "FROM", "tip", "AS", "t2", "JOIN", "business", "AS", "t1", "ON", "t2.business_id", "=", "t1.business_id", "WHERE", "t1.name", "=", "``", "Cafe", "Zinho", "''", "AND", "t1.state", "=", "``", "Pennsylvania", "''", "AND", "t2.year", "=", "2010", ";"], "query_toks_no_value": ["select", "t2", ".", "text", "from", "tip", "as", "t2", "join", "business", "as", "t1", "on", "t2", ".", "business_id", "=", "t1", ".", "business_id", "where", "t1", ".", "name", "=", "value", "and", "t1", ".", "state", "=", "value", "and", "t2", ".", "year", "=", "value"], "question": "List all tips for \" Cafe Zinho \" in Pennsylvania in 2010 .", "question_toks": ["List", "all", "tips", "for", "``", "Cafe", "Zinho", "``", "in", "Pennsylvania", "in", "2010", "."], "dataset_name": "spider", "guid": 2605}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Show the addresses and phones of all the buildings managed by \"Brenden\".", "sql": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"", "example": {"db_id": "apartment_rentals", "query": "SELECT building_address ,  building_phone FROM Apartment_Buildings WHERE building_manager\t =  \"Brenden\"", "query_toks": ["SELECT", "building_address", ",", "building_phone", "FROM", "Apartment_Buildings", "WHERE", "building_manager", "=", "``", "Brenden", "''"], "query_toks_no_value": ["select", "building_address", ",", "building_phone", "from", "apartment_buildings", "where", "building_manager", "=", "value"], "question": "Show the addresses and phones of all the buildings managed by \"Brenden\".", "question_toks": ["Show", "the", "addresses", "and", "phones", "of", "all", "the", "buildings", "managed", "by", "``", "Brenden", "''", "."], "dataset_name": "spider", "guid": 2606}}
{"text": "Apartment_Buildings: building_id, building_short_name, building_full_name, building_description, building_address, building_manager, building_phone; Apartments: apt_id, building_id, apt_type_code, apt_number, bathroom_count, bedroom_count, room_count; Apartment_Facilities: apt_id, facility_code; Guests: guest_id, gender_code, guest_first_name, guest_last_name, date_of_birth; Apartment_Bookings: apt_booking_id, apt_id, guest_id, booking_status_code, booking_start_date, booking_end_date; View_Unit_Status: apt_id, apt_booking_id, status_date, available_yn | Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.", "sql": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "example": {"db_id": "apartment_rentals", "query": "SELECT apt_type_code ,  COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC", "query_toks": ["SELECT", "apt_type_code", ",", "COUNT", "(", "*", ")", "FROM", "Apartments", "GROUP", "BY", "apt_type_code", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC"], "query_toks_no_value": ["select", "apt_type_code", ",", "count", "(", "*", ")", "from", "apartments", "group", "by", "apt_type_code", "order", "by", "count", "(", "*", ")", "asc"], "question": "Return each apartment type code with the number of apartments having that apartment type, in ascending order of the number of apartments.", "question_toks": ["Return", "each", "apartment", "type", "code", "with", "the", "number", "of", "apartments", "having", "that", "apartment", "type", ",", "in", "ascending", "order", "of", "the", "number", "of", "apartments", "."], "dataset_name": "spider", "guid": 2607}}
{"text": "roller_coaster: Roller_Coaster_ID, Name, Park, Country_ID, Length, Height, Speed, Opened, Status; country: Country_ID, Name, Population, Area, Languages | Show the statuses of roller coasters longer than 3300 or higher than 100.", "sql": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100", "example": {"db_id": "roller_coaster", "query": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100", "query_toks": ["SELECT", "Status", "FROM", "roller_coaster", "WHERE", "LENGTH", ">", "3300", "OR", "Height", ">", "100"], "query_toks_no_value": ["select", "status", "from", "roller_coaster", "where", "length", ">", "value", "or", "height", ">", "value"], "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.", "question_toks": ["Show", "the", "statuses", "of", "roller", "coasters", "longer", "than", "3300", "or", "higher", "than", "100", "."], "dataset_name": "spider", "guid": 2608}}
{"text": "GEOGRAPHIC: CITY_NAME, COUNTY, REGION; RESTAURANT: ID, NAME, FOOD_TYPE, CITY_NAME, RATING; LOCATION: RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME | What is the best restaurant in san francisco for french food ?", "sql": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "example": {"db_id": "restaurants", "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );", "query_toks": ["SELECT", "t2.house_number", ",", "t1.name", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", "AND", "t1.rating", "=", "(", "SELECT", "MAX", "(", "t1.rating", ")", "FROM", "restaurant", "AS", "t1", "JOIN", "LOCATION", "AS", "t2", "ON", "t1.id", "=", "t2.restaurant_id", "WHERE", "t2.city_name", "=", "``", "san", "francisco", "''", "AND", "t1.food_type", "=", "``", "french", "''", ")", ";"], "query_toks_no_value": ["select", "t2", ".", "house_number", ",", "t1", ".", "name", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", "and", "t1", ".", "rating", "=", "(", "select", "max", "(", "t1", ".", "rating", ")", "from", "restaurant", "as", "t1", "join", "location", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "restaurant_id", "where", "t2", ".", "city_name", "=", "value", "and", "t1", ".", "food_type", "=", "value", ")"], "question": "What is the best restaurant in san francisco for french food ?", "question_toks": ["What", "is", "the", "best", "restaurant", "in", "san", "francisco", "for", "french", "food", "?"], "dataset_name": "spider", "guid": 2609}}
{"text": "artist: Artist_ID, Name, Country, Year_Join, Age; exhibition: Exhibition_ID, Year, Theme, Artist_ID, Ticket_Price; exhibition_record: Exhibition_ID, Date, Attendance | Count the number of exhibitions that happened in or after 2005.", "sql": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005", "example": {"db_id": "theme_gallery", "query": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "exhibition", "WHERE", "YEAR", ">", "=", "2005"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "exhibition", "where", "year", ">", "=", "value"], "question": "Count the number of exhibitions that happened in or after 2005.", "question_toks": ["Count", "the", "number", "of", "exhibitions", "that", "happened", "in", "or", "after", "2005", "."], "dataset_name": "spider", "guid": 2610}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | How many film are there?", "sql": "SELECT count(*) FROM film", "example": {"db_id": "film_rank", "query": "SELECT count(*) FROM film", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "film"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "film"], "question": "How many film are there?", "question_toks": ["How", "many", "film", "are", "there", "?"], "dataset_name": "spider", "guid": 2864}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the titles of films and corresponding types of market estimations?", "sql": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID", "example": {"db_id": "film_rank", "query": "SELECT T1.Title ,  T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID", "query_toks": ["SELECT", "T1.Title", ",", "T2.Type", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "type", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id"], "question": "What are the titles of films and corresponding types of market estimations?", "question_toks": ["What", "are", "the", "titles", "of", "films", "and", "corresponding", "types", "of", "market", "estimations", "?"], "dataset_name": "spider", "guid": 2865}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who is the director of the movie \" James Bond \" ?", "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";", "query_toks": ["SELECT", "t2.name", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t3.title", "=", "``", "James", "Bond", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "Who is the director of the movie \" James Bond \" ?", "question_toks": ["Who", "is", "the", "director", "of", "the", "movie", "``", "James", "Bond", "``", "?"], "dataset_name": "spider", "guid": 2866}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Find the name of the program that is broadcast most frequently.", "sql": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "program_share", "query": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "GROUP", "BY", "t2.program_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "group", "by", "t2", ".", "program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the program that is broadcast most frequently.", "question_toks": ["Find", "the", "name", "of", "the", "program", "that", "is", "broadcast", "most", "frequently", "."], "dataset_name": "spider", "guid": 2867}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the actors who played in the movie \" Camp X-Ray \"", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Camp X-Ray\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Camp X-Ray\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t3.title", "=", "``", "Camp", "X-Ray", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "Find the actors who played in the movie \" Camp X-Ray \"", "question_toks": ["Find", "the", "actors", "who", "played", "in", "the", "movie", "``", "Camp", "X-Ray", "``"], "dataset_name": "spider", "guid": 2868}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | List the most common type of artworks.", "sql": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "entertainment_awards", "query": "SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "artwork", "GROUP", "BY", "TYPE", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "artwork", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the most common type of artworks.", "question_toks": ["List", "the", "most", "common", "type", "of", "artworks", "."], "dataset_name": "spider", "guid": 2869}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who directed the movie \" James Bond \" ?", "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";", "query_toks": ["SELECT", "t2.name", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t3.title", "=", "``", "James", "Bond", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "Who directed the movie \" James Bond \" ?", "question_toks": ["Who", "directed", "the", "movie", "``", "James", "Bond", "``", "?"], "dataset_name": "spider", "guid": 2870}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the types of film market estimations in year 1995?", "sql": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995", "example": {"db_id": "film_rank", "query": "SELECT TYPE FROM film_market_estimation WHERE YEAR  =  1995", "query_toks": ["SELECT", "TYPE", "FROM", "film_market_estimation", "WHERE", "YEAR", "=", "1995"], "query_toks_no_value": ["select", "type", "from", "film_market_estimation", "where", "year", "=", "value"], "question": "What are the types of film market estimations in year 1995?", "question_toks": ["What", "are", "the", "types", "of", "film", "market", "estimations", "in", "year", "1995", "?"], "dataset_name": "spider", "guid": 2871}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t2.role", "=", "``", "Alan", "Turing", "''", "AND", "t3.title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t2", ".", "role", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?", "question_toks": ["Who", "acts", "as", "``", "Alan", "Turing", "``", "in", "the", "movie", "``", "The", "Imitation", "Game", "``", "?"], "dataset_name": "spider", "guid": 2872}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?", "sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "query_toks": ["SELECT", "Studio", "FROM", "film", "WHERE", "Director", "=", "``", "Nicholas", "Meyer", "''", "INTERSECT", "SELECT", "Studio", "FROM", "film", "WHERE", "Director", "=", "``", "Walter", "Hill", "''"], "query_toks_no_value": ["select", "studio", "from", "film", "where", "director", "=", "value", "intersect", "select", "studio", "from", "film", "where", "director", "=", "value"], "question": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?", "question_toks": ["What", "are", "the", "names", "of", "studios", "that", "have", "produced", "films", "with", "both", "Nicholas", "Meyer", "and", "Walter", "Hill", "?"], "dataset_name": "spider", "guid": 2873}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What is total number of show times per dat for each cinema?", "sql": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id", "example": {"db_id": "cinema", "query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id", "query_toks": ["SELECT", "T2.name", ",", "sum", "(", "T1.show_times_per_day", ")", "FROM", "schedule", "AS", "T1", "JOIN", "cinema", "AS", "T2", "ON", "T1.cinema_id", "=", "T2.cinema_id", "GROUP", "BY", "T1.cinema_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "sum", "(", "t1", ".", "show_times_per_day", ")", "from", "schedule", "as", "t1", "join", "cinema", "as", "t2", "on", "t1", ".", "cinema_id", "=", "t2", ".", "cinema_id", "group", "by", "t1", ".", "cinema_id"], "question": "What is total number of show times per dat for each cinema?", "question_toks": ["What", "is", "total", "number", "of", "show", "times", "per", "dat", "for", "each", "cinema", "?"], "dataset_name": "spider", "guid": 2874}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the actor who played \" Alan Turing \" in the movie \" The Imitation Game \"", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t2.role", "=", "``", "Alan", "Turing", "''", "AND", "t3.title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t2", ".", "role", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Find the actor who played \" Alan Turing \" in the movie \" The Imitation Game \"", "question_toks": ["Find", "the", "actor", "who", "played", "``", "Alan", "Turing", "``", "in", "the", "movie", "``", "The", "Imitation", "Game", "``"], "dataset_name": "spider", "guid": 2875}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Which studios have an average gross of over 4500000?", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film GROUP BY Studio HAVING avg(Gross_in_dollar)  >=  4500000", "query_toks": ["SELECT", "Studio", "FROM", "film", "GROUP", "BY", "Studio", "HAVING", "avg", "(", "Gross_in_dollar", ")", ">", "=", "4500000"], "query_toks_no_value": ["select", "studio", "from", "film", "group", "by", "studio", "having", "avg", "(", "gross_in_dollar", ")", ">", "=", "value"], "question": "Which studios have an average gross of over 4500000?", "question_toks": ["Which", "studios", "have", "an", "average", "gross", "of", "over", "4500000", "?"], "dataset_name": "spider", "guid": 2876}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the name of the series that has the episode \"A Love of a Lifetime\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "example": {"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "TV_series", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "episode", "=", "value"], "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "question_toks": ["What", "is", "the", "name", "of", "the", "series", "that", "has", "the", "episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?"], "dataset_name": "spider", "guid": 2877}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Who are the different directors of films which had market estimation in 1995?", "sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995", "example": {"db_id": "film_rank", "query": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995", "query_toks": ["SELECT", "DISTINCT", "T1.Director", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID", "WHERE", "T2.Year", "=", "1995"], "query_toks_no_value": ["select", "distinct", "t1", ".", "director", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "where", "t2", ".", "year", "=", "value"], "question": "Who are the different directors of films which had market estimation in 1995?", "question_toks": ["Who", "are", "the", "different", "directors", "of", "films", "which", "had", "market", "estimation", "in", "1995", "?"], "dataset_name": "spider", "guid": 2878}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For the oldest movie listed, what is its average rating and title?", "sql": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "example": {"db_id": "movie_1", "query": "SELECT avg(T1.stars) ,  T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.year  =  (SELECT min(YEAR) FROM Movie)", "query_toks": ["SELECT", "avg", "(", "T1.stars", ")", ",", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.year", "=", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "Movie", ")"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "stars", ")", ",", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "year", "=", "(", "select", "min", "(", "year", ")", "from", "movie", ")"], "question": "For the oldest movie listed, what is its average rating and title?", "question_toks": ["For", "the", "oldest", "movie", "listed", ",", "what", "is", "its", "average", "rating", "and", "title", "?"], "dataset_name": "spider", "guid": 2879}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".", "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"", "example": {"db_id": "film_rank", "query": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"", "query_toks": ["SELECT", "title", ",", "Studio", "FROM", "film", "WHERE", "Studio", "LIKE", "``", "%", "Universal", "%", "''"], "query_toks_no_value": ["select", "title", ",", "studio", "from", "film", "where", "studio", "like", "value"], "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".", "question_toks": ["Find", "the", "titles", "and", "studios", "of", "the", "films", "that", "are", "produced", "by", "some", "film", "studios", "that", "contained", "the", "word", "``", "Universal", "''", "."], "dataset_name": "spider", "guid": 2880}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Which actors were born in Tehran", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Tehran", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value"], "question": "Which actors were born in Tehran", "question_toks": ["Which", "actors", "were", "born", "in", "Tehran"], "dataset_name": "spider", "guid": 2881}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles and average ratings for all movies that have the lowest average rating?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.mID", "ORDER", "BY", "avg", "(", "T1.stars", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "mid", "order", "by", "avg", "(", "t1", ".", "stars", ")", "limit", "value"], "question": "What are the titles and average ratings for all movies that have the lowest average rating?", "question_toks": ["What", "are", "the", "titles", "and", "average", "ratings", "for", "all", "movies", "that", "have", "the", "lowest", "average", "rating", "?"], "dataset_name": "spider", "guid": 2882}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What are the name and location of the cinema with the largest capacity?", "sql": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1", "example": {"db_id": "cinema", "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "cinema", "ORDER", "BY", "capacity", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "location", "from", "cinema", "order", "by", "capacity", "desc", "limit", "value"], "question": "What are the name and location of the cinema with the largest capacity?", "question_toks": ["What", "are", "the", "name", "and", "location", "of", "the", "cinema", "with", "the", "largest", "capacity", "?"], "dataset_name": "spider", "guid": 2883}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each director, what is the title and score of their most poorly rated movie?", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director", "query_toks": ["SELECT", "T2.title", ",", "T1.stars", ",", "T2.director", ",", "min", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T2.director"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t2", ".", "director", ",", "min", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t2", ".", "director"], "question": "For each director, what is the title and score of their most poorly rated movie?", "question_toks": ["For", "each", "director", ",", "what", "is", "the", "title", "and", "score", "of", "their", "most", "poorly", "rated", "movie", "?"], "dataset_name": "spider", "guid": 2884}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What is the average ticket sales gross in dollars of films?", "sql": "SELECT avg(Gross_in_dollar) FROM film", "example": {"db_id": "film_rank", "query": "SELECT avg(Gross_in_dollar) FROM film", "query_toks": ["SELECT", "avg", "(", "Gross_in_dollar", ")", "FROM", "film"], "query_toks_no_value": ["select", "avg", "(", "gross_in_dollar", ")", "from", "film"], "question": "What is the average ticket sales gross in dollars of films?", "question_toks": ["What", "is", "the", "average", "ticket", "sales", "gross", "in", "dollars", "of", "films", "?"], "dataset_name": "spider", "guid": 2885}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | What is the average number of audience for festivals?", "sql": "SELECT avg(Num_of_Audience) FROM festival_detail", "example": {"db_id": "entertainment_awards", "query": "SELECT avg(Num_of_Audience) FROM festival_detail", "query_toks": ["SELECT", "avg", "(", "Num_of_Audience", ")", "FROM", "festival_detail"], "query_toks_no_value": ["select", "avg", "(", "num_of_audience", ")", "from", "festival_detail"], "question": "What is the average number of audience for festivals?", "question_toks": ["What", "is", "the", "average", "number", "of", "audience", "for", "festivals", "?"], "dataset_name": "spider", "guid": 2886}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of reviewers who had rated 3 star and 4 star?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4", "example": {"db_id": "movie_1", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4", "query_toks": ["SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T1.stars", "=", "3", "INTERSECT", "SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T1.stars", "=", "4"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t1", ".", "stars", "=", "value", "intersect", "select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t1", ".", "stars", "=", "value"], "question": "What are the names of reviewers who had rated 3 star and 4 star?", "question_toks": ["What", "are", "the", "names", "of", "reviewers", "who", "had", "rated", "3", "star", "and", "4", "star", "?"], "dataset_name": "spider", "guid": 2887}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show the number of audience in year 2008 or 2010.", "sql": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010", "example": {"db_id": "entertainment_awards", "query": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010", "query_toks": ["SELECT", "Num_of_Audience", "FROM", "festival_detail", "WHERE", "YEAR", "=", "2008", "OR", "YEAR", "=", "2010"], "query_toks_no_value": ["select", "num_of_audience", "from", "festival_detail", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "Show the number of audience in year 2008 or 2010.", "question_toks": ["Show", "the", "number", "of", "audience", "in", "year", "2008", "or", "2010", "."], "dataset_name": "spider", "guid": 2888}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each movie that received more than 3 reviews, what is the average rating?", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "example": {"db_id": "movie_1", "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "query_toks": ["SELECT", "mID", ",", "avg", "(", "stars", ")", "FROM", "Rating", "GROUP", "BY", "mID", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "mid", ",", "avg", "(", "stars", ")", "from", "rating", "group", "by", "mid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "For each movie that received more than 3 reviews, what is the average rating?", "question_toks": ["For", "each", "movie", "that", "received", "more", "than", "3", "reviews", ",", "what", "is", "the", "average", "rating", "?"], "dataset_name": "spider", "guid": 2889}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | where is the director of \" The Past \" from", "sql": "SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"The Past\";", "example": {"db_id": "imdb", "query": "SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"The Past\";", "query_toks": ["SELECT", "t2.birth_city", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t3.title", "=", "``", "The", "Past", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "birth_city", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "where is the director of \" The Past \" from", "question_toks": ["where", "is", "the", "director", "of", "``", "The", "Past", "``", "from"], "dataset_name": "spider", "guid": 2890}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all the female actors from Austin", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND gender  =  \"female\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND gender  =  \"female\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Austin", "''", "AND", "gender", "=", "``", "female", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value", "and", "gender", "=", "value"], "question": "Find all the female actors from Austin", "question_toks": ["Find", "all", "the", "female", "actors", "from", "Austin"], "dataset_name": "spider", "guid": 2891}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies were produced in the year 2013 ?", "sql": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "title", ")", "FROM", "movie", "WHERE", "release_year", "=", "2013", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "title", ")", "from", "movie", "where", "release_year", "=", "value"], "question": "How many movies were produced in the year 2013 ?", "question_toks": ["How", "many", "movies", "were", "produced", "in", "the", "year", "2013", "?"], "dataset_name": "spider", "guid": 2892}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "sql": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "example": {"db_id": "tvshow", "query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "Weekly_Rank", "FROM", "TV_series", "WHERE", "Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "value"], "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "question_toks": ["What", "is", "Weekly", "Rank", "of", "TV", "series", "with", "Episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?"], "dataset_name": "spider", "guid": 2893}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | which countries' tv channels are not playing any cartoon written by Todd Casey?", "sql": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "example": {"db_id": "tvshow", "query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "country", "FROM", "TV_Channel", "EXCEPT", "SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "country", "from", "tv_channel", "except", "select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "question_toks": ["which", "countries", "'", "tv", "channels", "are", "not", "playing", "any", "cartoon", "written", "by", "Todd", "Casey", "?"], "dataset_name": "spider", "guid": 2894}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Count the number of cinemas.", "sql": "SELECT count(*) FROM cinema", "example": {"db_id": "cinema", "query": "SELECT count(*) FROM cinema", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "cinema"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cinema"], "question": "Count the number of cinemas.", "question_toks": ["Count", "the", "number", "of", "cinemas", "."], "dataset_name": "spider", "guid": 2895}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | list all cartoon titles and their directors ordered by their air date", "sql": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "example": {"db_id": "tvshow", "query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date", "query_toks": ["SELECT", "title", ",", "Directed_by", "FROM", "Cartoon", "ORDER", "BY", "Original_air_date"], "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date"], "question": "list all cartoon titles and their directors ordered by their air date", "question_toks": ["list", "all", "cartoon", "titles", "and", "their", "directors", "ordered", "by", "their", "air", "date"], "dataset_name": "spider", "guid": 2896}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all movies directed by Steven Spielberg?", "sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "director", "=", "'Steven", "Spielberg", "'"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "director", "=", "value"], "question": "What are the names of all movies directed by Steven Spielberg?", "question_toks": ["What", "are", "the", "names", "of", "all", "movies", "directed", "by", "Steven", "Spielberg", "?"], "dataset_name": "spider", "guid": 2897}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the different names of all reviewers whose ratings do not have a date field?", "sql": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID  =  T2.rID WHERE ratingDate  =  \"null\"", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "Reviewer", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "ratingDate", "=", "``", "null", "''"], "query_toks_no_value": ["select", "distinct", "name", "from", "reviewer", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "ratingdate", "=", "value"], "question": "What are the different names of all reviewers whose ratings do not have a date field?", "question_toks": ["What", "are", "the", "different", "names", "of", "all", "reviewers", "whose", "ratings", "do", "not", "have", "a", "date", "field", "?"], "dataset_name": "spider", "guid": 2898}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the name of the movie that has been reviewed the most?", "sql": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "T1.mID", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.mID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "mid", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "mid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the movie that has been reviewed the most?", "question_toks": ["What", "is", "the", "name", "of", "the", "movie", "that", "has", "been", "reviewed", "the", "most", "?"], "dataset_name": "spider", "guid": 2899}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | find the number of actors from Iran who played in \" Jim Jarmusch \" movies", "sql": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "CAST", "AS", "t4", "JOIN", "actor", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t5", "ON", "t5.mid", "=", "t4.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t5.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t1.nationality", "=", "``", "Iran", "''", "AND", "t3.name", "=", "``", "Jim", "Jarmusch", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "cast", "as", "t4", "join", "actor", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t5", "on", "t5", ".", "mid", "=", "t4", ".", "msid", "join", "directed_by", "as", "t2", "on", "t5", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t1", ".", "nationality", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "find the number of actors from Iran who played in \" Jim Jarmusch \" movies", "question_toks": ["find", "the", "number", "of", "actors", "from", "Iran", "who", "played", "in", "``", "Jim", "Jarmusch", "``", "movies"], "dataset_name": "spider", "guid": 2900}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What year is the movie \" The Imitation Game \" from ?", "sql": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "release_year", "FROM", "movie", "WHERE", "title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "release_year", "from", "movie", "where", "title", "=", "value"], "question": "What year is the movie \" The Imitation Game \" from ?", "question_toks": ["What", "year", "is", "the", "movie", "``", "The", "Imitation", "Game", "``", "from", "?"], "dataset_name": "spider", "guid": 2901}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Shahab Hosseini \" act in ?", "sql": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Shahab", "Hosseini", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "How many movies did \" Shahab Hosseini \" act in ?", "question_toks": ["How", "many", "movies", "did", "``", "Shahab", "Hosseini", "``", "act", "in", "?"], "dataset_name": "spider", "guid": 2902}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many actors are in the movie \" Saving Private Ryan \" ?", "sql": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t3.title", "=", "``", "Saving", "Private", "Ryan", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "How many actors are in the movie \" Saving Private Ryan \" ?", "question_toks": ["How", "many", "actors", "are", "in", "the", "movie", "``", "Saving", "Private", "Ryan", "``", "?"], "dataset_name": "spider", "guid": 2903}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the average rating star for each movie that are not reviewed by Brittany Harris.", "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID", "example": {"db_id": "movie_1", "query": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID", "query_toks": ["SELECT", "mID", ",", "avg", "(", "stars", ")", "FROM", "Rating", "WHERE", "mID", "NOT", "IN", "(", "SELECT", "T1.mID", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T2.name", "=", "``", "Brittany", "Harris", "''", ")", "GROUP", "BY", "mID"], "query_toks_no_value": ["select", "mid", ",", "avg", "(", "stars", ")", "from", "rating", "where", "mid", "not", "in", "(", "select", "t1", ".", "mid", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t2", ".", "name", "=", "value", ")", "group", "by", "mid"], "question": "Find the average rating star for each movie that are not reviewed by Brittany Harris.", "question_toks": ["Find", "the", "average", "rating", "star", "for", "each", "movie", "that", "are", "not", "reviewed", "by", "Brittany", "Harris", "."], "dataset_name": "spider", "guid": 2904}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are the movies related to nuclear weapons", "sql": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";", "query_toks": ["SELECT", "t3.title", "FROM", "tags", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.id", "JOIN", "movie", "AS", "t3", "ON", "t2.msid", "=", "t3.mid", "WHERE", "t1.keyword", "=", "``", "nuclear", "weapons", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "tags", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "id", "join", "movie", "as", "t3", "on", "t2", ".", "msid", "=", "t3", ".", "mid", "where", "t1", ".", "keyword", "=", "value"], "question": "What are the movies related to nuclear weapons", "question_toks": ["What", "are", "the", "movies", "related", "to", "nuclear", "weapons"], "dataset_name": "spider", "guid": 2905}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are names of the movies that are either made before 1980 or directed by James Cameron?", "sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "director", "=", "``", "James", "Cameron", "''", "OR", "YEAR", "<", "1980"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "director", "=", "value", "or", "year", "<", "value"], "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?", "question_toks": ["What", "are", "names", "of", "the", "movies", "that", "are", "either", "made", "before", "1980", "or", "directed", "by", "James", "Cameron", "?"], "dataset_name": "spider", "guid": 2906}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "example": {"db_id": "tvshow", "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "query_toks": ["SELECT", "package_option", "FROM", "TV_Channel", "WHERE", "id", "NOT", "IN", "(", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'", ")"], "query_toks_no_value": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ")"], "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "question_toks": ["find", "the", "package", "option", "of", "the", "tv", "channel", "that", "do", "not", "have", "any", "cartoon", "directed", "by", "Ben", "Jones", "."], "dataset_name": "spider", "guid": 2907}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | List all channel names ordered by their rating in percent from big to small.", "sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "example": {"db_id": "program_share", "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "query_toks": ["SELECT", "name", "FROM", "channel", "ORDER", "BY", "rating_in_percent", "DESC"], "query_toks_no_value": ["select", "name", "from", "channel", "order", "by", "rating_in_percent", "desc"], "question": "List all channel names ordered by their rating in percent from big to small.", "question_toks": ["List", "all", "channel", "names", "ordered", "by", "their", "rating", "in", "percent", "from", "big", "to", "small", "."], "dataset_name": "spider", "guid": 2908}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names and years released for the movies with the top 3 highest ratings?", "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "query_toks": ["SELECT", "T2.title", ",", "T2.year", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "ORDER", "BY", "T1.stars", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t2", ".", "year", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "order", "by", "t1", ".", "stars", "desc", "limit", "value"], "question": "What are the names and years released for the movies with the top 3 highest ratings?", "question_toks": ["What", "are", "the", "names", "and", "years", "released", "for", "the", "movies", "with", "the", "top", "3", "highest", "ratings", "?"], "dataset_name": "spider", "guid": 2909}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all movies that were created after the most recent Steven Spielberg film?", "sql": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE YEAR  >  (SELECT max(YEAR) FROM Movie WHERE director  =  \"Steven Spielberg\")", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "YEAR", ">", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "Movie", "WHERE", "director", "=", "``", "Steven", "Spielberg", "''", ")"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "year", ">", "(", "select", "max", "(", "year", ")", "from", "movie", "where", "director", "=", "value", ")"], "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?", "question_toks": ["What", "are", "the", "names", "of", "all", "movies", "that", "were", "created", "after", "the", "most", "recent", "Steven", "Spielberg", "film", "?"], "dataset_name": "spider", "guid": 2910}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show all the locations where some cinemas were opened in both year 2010 and year 2011.", "sql": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "openning_year", "=", "2010", "INTERSECT", "SELECT", "LOCATION", "FROM", "cinema", "WHERE", "openning_year", "=", "2011"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "openning_year", "=", "value", "intersect", "select", "location", "from", "cinema", "where", "openning_year", "=", "value"], "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.", "question_toks": ["Show", "all", "the", "locations", "where", "some", "cinemas", "were", "opened", "in", "both", "year", "2010", "and", "year", "2011", "."], "dataset_name": "spider", "guid": 2911}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Episode", "FROM", "TV_Channel", "AS", "T1", "JOIN", "TV_series", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "question_toks": ["List", "the", "Episode", "of", "all", "TV", "series", "showed", "on", "TV", "Channel", "with", "series", "name", "``", "Sky", "Radio", "''", "."], "dataset_name": "spider", "guid": 2912}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the name of the most recent movie?", "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "YEAR", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "Movie", ")"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "year", "=", "(", "select", "max", "(", "year", ")", "from", "movie", ")"], "question": "What is the name of the most recent movie?", "question_toks": ["What", "is", "the", "name", "of", "the", "most", "recent", "movie", "?"], "dataset_name": "spider", "guid": 2913}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "example": {"db_id": "tvshow", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "WHERE", "Directed_by", "=", "``", "Ben", "Jones", "''", "OR", "Directed_by", "=", "``", "Brandon", "Vietti", "''", ";"], "query_toks_no_value": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", "or", "directed_by", "=", "value"], "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "question_toks": ["What", "are", "the", "titles", "of", "all", "cartoons", "directed", "by", "Ben", "Jones", "or", "Brandon", "Vietti", "?"], "dataset_name": "spider", "guid": 2914}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Which movie had the character \" Daffy Duck \"", "sql": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"Daffy Duck\";", "example": {"db_id": "imdb", "query": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"Daffy Duck\";", "query_toks": ["SELECT", "t1.title", "FROM", "movie", "AS", "t1", "JOIN", "CAST", "AS", "t2", "ON", "t1.mid", "=", "t2.msid", "WHERE", "t2.role", "=", "``", "Daffy", "Duck", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "movie", "as", "t1", "join", "cast", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "msid", "where", "t2", ".", "role", "=", "value"], "question": "Which movie had the character \" Daffy Duck \"", "question_toks": ["Which", "movie", "had", "the", "character", "``", "Daffy", "Duck", "``"], "dataset_name": "spider", "guid": 2915}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the nationality of the actress \" Christoph Waltz \" ?", "sql": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";", "example": {"db_id": "imdb", "query": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";", "query_toks": ["SELECT", "nationality", "FROM", "actor", "WHERE", "name", "=", "``", "Christoph", "Waltz", "''", ";"], "query_toks_no_value": ["select", "nationality", "from", "actor", "where", "name", "=", "value"], "question": "What is the nationality of the actress \" Christoph Waltz \" ?", "question_toks": ["What", "is", "the", "nationality", "of", "the", "actress", "``", "Christoph", "Waltz", "``", "?"], "dataset_name": "spider", "guid": 2916}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "example": {"db_id": "tvshow", "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "T1.series_name", ",", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.directed_by", "=", "'Michael", "Chang", "'", "INTERSECT", "SELECT", "T1.series_name", ",", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "t1", ".", "series_name", ",", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "directed_by", "=", "value", "intersect", "select", "t1", ".", "series_name", ",", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "directed_by", "=", "value"], "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "question_toks": ["What", "is", "the", "series", "name", "and", "country", "of", "all", "TV", "channels", "that", "are", "playing", "cartoons", "directed", "by", "Ben", "Jones", "and", "cartoons", "directed", "by", "Michael", "Chang", "?"], "dataset_name": "spider", "guid": 2917}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Return the titles and directors of films that were never in the market of China.", "sql": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", "example": {"db_id": "film_rank", "query": "SELECT title ,  director FROM film WHERE film_id NOT IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id  =  T2.Market_ID WHERE country  =  'China')", "query_toks": ["SELECT", "title", ",", "director", "FROM", "film", "WHERE", "film_id", "NOT", "IN", "(", "SELECT", "film_id", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.market_id", "=", "T2.Market_ID", "WHERE", "country", "=", "'China", "'", ")"], "query_toks_no_value": ["select", "title", ",", "director", "from", "film", "where", "film_id", "not", "in", "(", "select", "film_id", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "where", "country", "=", "value", ")"], "question": "Return the titles and directors of films that were never in the market of China.", "question_toks": ["Return", "the", "titles", "and", "directors", "of", "films", "that", "were", "never", "in", "the", "market", "of", "China", "."], "dataset_name": "spider", "guid": 2918}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors who are from Afghanistan", "sql": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "nationality", "=", "``", "Afghanistan", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "nationality", "=", "value"], "question": "Find all actors who are from Afghanistan", "question_toks": ["Find", "all", "actors", "who", "are", "from", "Afghanistan"], "dataset_name": "spider", "guid": 2919}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the names of all reviewers who rated Gone with the Wind.", "sql": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.title  =  'Gone with the Wind'", "query_toks": ["SELECT", "DISTINCT", "T3.name", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T2.title", "=", "'Gone", "with", "the", "Wind", "'"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t2", ".", "title", "=", "value"], "question": "Find the names of all reviewers who rated Gone with the Wind.", "question_toks": ["Find", "the", "names", "of", "all", "reviewers", "who", "rated", "Gone", "with", "the", "Wind", "."], "dataset_name": "spider", "guid": 2920}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each reviewer id, what is the title and rating for the movie with the smallest rating?", "sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID", "query_toks": ["SELECT", "T2.title", ",", "T1.rID", ",", "T1.stars", ",", "min", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.rID"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "rid", ",", "t1", ".", "stars", ",", "min", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "rid"], "question": "For each reviewer id, what is the title and rating for the movie with the smallest rating?", "question_toks": ["For", "each", "reviewer", "id", ",", "what", "is", "the", "title", "and", "rating", "for", "the", "movie", "with", "the", "smallest", "rating", "?"], "dataset_name": "spider", "guid": 2921}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Show the studios that have not produced films with director \"Walter Hill\".", "sql": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "query_toks": ["SELECT", "Studio", "FROM", "film", "EXCEPT", "SELECT", "Studio", "FROM", "film", "WHERE", "Director", "=", "``", "Walter", "Hill", "''"], "query_toks_no_value": ["select", "studio", "from", "film", "except", "select", "studio", "from", "film", "where", "director", "=", "value"], "question": "Show the studios that have not produced films with director \"Walter Hill\".", "question_toks": ["Show", "the", "studios", "that", "have", "not", "produced", "films", "with", "director", "``", "Walter", "Hill", "''", "."], "dataset_name": "spider", "guid": 2922}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | List all the Sci-Fi movies which released in 2010", "sql": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;", "query_toks": ["SELECT", "t3.title", "FROM", "genre", "AS", "t2", "JOIN", "classification", "AS", "t1", "ON", "t2.gid", "=", "t1.gid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.genre", "=", "``", "Sci-Fi", "''", "AND", "t3.release_year", "=", "2010", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "genre", "as", "t2", "join", "classification", "as", "t1", "on", "t2", ".", "gid", "=", "t1", ".", "gid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "genre", "=", "value", "and", "t3", ".", "release_year", "=", "value"], "question": "List all the Sci-Fi movies which released in 2010", "question_toks": ["List", "all", "the", "Sci-Fi", "movies", "which", "released", "in", "2010"], "dataset_name": "spider", "guid": 2923}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Find the names of channels that are not owned by CCTV.", "sql": "SELECT name FROM channel WHERE OWNER != 'CCTV'", "example": {"db_id": "program_share", "query": "SELECT name FROM channel WHERE OWNER != 'CCTV'", "query_toks": ["SELECT", "name", "FROM", "channel", "WHERE", "OWNER", "!", "=", "'CCTV", "'"], "query_toks_no_value": ["select", "name", "from", "channel", "where", "owner", "!", "=", "value"], "question": "Find the names of channels that are not owned by CCTV.", "question_toks": ["Find", "the", "names", "of", "channels", "that", "are", "not", "owned", "by", "CCTV", "."], "dataset_name": "spider", "guid": 2924}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List the title of films that do not have any market estimation.", "sql": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)", "example": {"db_id": "film_rank", "query": "SELECT Title FROM film WHERE Film_ID NOT IN (SELECT Film_ID FROM film_market_estimation)", "query_toks": ["SELECT", "Title", "FROM", "film", "WHERE", "Film_ID", "NOT", "IN", "(", "SELECT", "Film_ID", "FROM", "film_market_estimation", ")"], "query_toks_no_value": ["select", "title", "from", "film", "where", "film_id", "not", "in", "(", "select", "film_id", "from", "film_market_estimation", ")"], "question": "List the title of films that do not have any market estimation.", "question_toks": ["List", "the", "title", "of", "films", "that", "do", "not", "have", "any", "market", "estimation", "."], "dataset_name": "spider", "guid": 2925}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the titles of all movies that have no ratings.", "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "mID", "NOT", "IN", "(", "SELECT", "mID", "FROM", "Rating", ")"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "mid", "not", "in", "(", "select", "mid", "from", "rating", ")"], "question": "Find the titles of all movies that have no ratings.", "question_toks": ["Find", "the", "titles", "of", "all", "movies", "that", "have", "no", "ratings", "."], "dataset_name": "spider", "guid": 2926}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | What are the names of festivals held in year 2007?", "sql": "SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007", "example": {"db_id": "entertainment_awards", "query": "SELECT Festival_Name FROM festival_detail WHERE YEAR  =  2007", "query_toks": ["SELECT", "Festival_Name", "FROM", "festival_detail", "WHERE", "YEAR", "=", "2007"], "query_toks_no_value": ["select", "festival_name", "from", "festival_detail", "where", "year", "=", "value"], "question": "What are the names of festivals held in year 2007?", "question_toks": ["What", "are", "the", "names", "of", "festivals", "held", "in", "year", "2007", "?"], "dataset_name": "spider", "guid": 2927}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the name of the movie produced after 2000 and directed by James Cameron?", "sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "director", "=", "'James", "Cameron", "'", "AND", "YEAR", ">", "2000"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "director", "=", "value", "and", "year", ">", "value"], "question": "What is the name of the movie produced after 2000 and directed by James Cameron?", "question_toks": ["What", "is", "the", "name", "of", "the", "movie", "produced", "after", "2000", "and", "directed", "by", "James", "Cameron", "?"], "dataset_name": "spider", "guid": 2928}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the average number of stars that each reviewer awards for a movie?", "sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "example": {"db_id": "movie_1", "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "query_toks": ["SELECT", "T2.name", ",", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "GROUP", "BY", "T2.name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "group", "by", "t2", ".", "name"], "question": "What is the average number of stars that each reviewer awards for a movie?", "question_toks": ["What", "is", "the", "average", "number", "of", "stars", "that", "each", "reviewer", "awards", "for", "a", "movie", "?"], "dataset_name": "spider", "guid": 2929}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List each language and the number of TV Channels using it.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "example": {"db_id": "tvshow", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE", "query_toks": ["SELECT", "LANGUAGE", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "LANGUAGE"], "query_toks_no_value": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language"], "question": "List each language and the number of TV Channels using it.", "question_toks": ["List", "each", "language", "and", "the", "number", "of", "TV", "Channels", "using", "it", "."], "dataset_name": "spider", "guid": 2930}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the movie titles with the highest average rating and what are those ratings?", "sql": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.mID ORDER BY avg(T1.stars) DESC LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.mID", "ORDER", "BY", "avg", "(", "T1.stars", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "mid", "order", "by", "avg", "(", "t1", ".", "stars", ")", "desc", "limit", "value"], "question": "What are the movie titles with the highest average rating and what are those ratings?", "question_toks": ["What", "are", "the", "movie", "titles", "with", "the", "highest", "average", "rating", "and", "what", "are", "those", "ratings", "?"], "dataset_name": "spider", "guid": 2931}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Title", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "question_toks": ["What", "is", "the", "title", "of", "all", "the", "cartools", "that", "are", "on", "the", "TV", "Channel", "with", "the", "series", "name", "``", "Sky", "Radio", "''", "?"], "dataset_name": "spider", "guid": 2932}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | How many movies were made before 2000?", "sql": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "example": {"db_id": "movie_1", "query": "SELECT count(*) FROM Movie WHERE YEAR  <  2000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Movie", "WHERE", "YEAR", "<", "2000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "movie", "where", "year", "<", "value"], "question": "How many movies were made before 2000?", "question_toks": ["How", "many", "movies", "were", "made", "before", "2000", "?"], "dataset_name": "spider", "guid": 2933}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors born in \" Austin \" after 1980", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Austin", "''", "AND", "birth_year", ">", "1980", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", ">", "value"], "question": "Find all actors born in \" Austin \" after 1980", "question_toks": ["Find", "all", "actors", "born", "in", "``", "Austin", "``", "after", "1980"], "dataset_name": "spider", "guid": 2934}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the title and score of the movie with the lowest rating among all movies directed by each director.", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T2.director", "query_toks": ["SELECT", "T2.title", ",", "T1.stars", ",", "T2.director", ",", "min", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T2.director"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t2", ".", "director", ",", "min", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t2", ".", "director"], "question": "Find the title and score of the movie with the lowest rating among all movies directed by each director.", "question_toks": ["Find", "the", "title", "and", "score", "of", "the", "movie", "with", "the", "lowest", "rating", "among", "all", "movies", "directed", "by", "each", "director", "."], "dataset_name": "spider", "guid": 2935}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | how many programs are broadcast in each time section of the day?", "sql": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day", "example": {"db_id": "program_share", "query": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "time_of_day", "FROM", "broadcast", "GROUP", "BY", "time_of_day"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "time_of_day", "from", "broadcast", "group", "by", "time_of_day"], "question": "how many programs are broadcast in each time section of the day?", "question_toks": ["how", "many", "programs", "are", "broadcast", "in", "each", "time", "section", "of", "the", "day", "?"], "dataset_name": "spider", "guid": 2936}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | In what year was \" Benedict Cumberbatch \" born", "sql": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";", "example": {"db_id": "imdb", "query": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";", "query_toks": ["SELECT", "birth_year", "FROM", "actor", "WHERE", "name", "=", "``", "Benedict", "Cumberbatch", "''", ";"], "query_toks_no_value": ["select", "birth_year", "from", "actor", "where", "name", "=", "value"], "question": "In what year was \" Benedict Cumberbatch \" born", "question_toks": ["In", "what", "year", "was", "``", "Benedict", "Cumberbatch", "``", "born"], "dataset_name": "spider", "guid": 2937}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the ids of reviewers who didn't only give 4 star.", "sql": "SELECT rID FROM Rating WHERE stars != 4", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Rating WHERE stars != 4", "query_toks": ["SELECT", "rID", "FROM", "Rating", "WHERE", "stars", "!", "=", "4"], "query_toks_no_value": ["select", "rid", "from", "rating", "where", "stars", "!", "=", "value"], "question": "Find the ids of reviewers who didn't only give 4 star.", "question_toks": ["Find", "the", "ids", "of", "reviewers", "who", "did", "n't", "only", "give", "4", "star", "."], "dataset_name": "spider", "guid": 2938}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the countries that have cartoons on TV that were written by Todd Casey?", "sql": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "example": {"db_id": "tvshow", "query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'", "query_toks": ["SELECT", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.written_by", "=", "'Todd", "Casey", "'"], "query_toks_no_value": ["select", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "written_by", "=", "value"], "question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "question_toks": ["What", "are", "the", "countries", "that", "have", "cartoons", "on", "TV", "that", "were", "written", "by", "Todd", "Casey", "?"], "dataset_name": "spider", "guid": 2939}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "example": {"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "TV_series", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "episode", "=", "value"], "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "question_toks": ["What", "is", "the", "TV", "Channel", "of", "TV", "series", "with", "Episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?", "List", "the", "TV", "Channel", "'s", "series", "name", "."], "dataset_name": "spider", "guid": 2940}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Where is the birth place of \" Kevin Spacey \"", "sql": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";", "example": {"db_id": "imdb", "query": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";", "query_toks": ["SELECT", "birth_city", "FROM", "director", "WHERE", "name", "=", "``", "director_name0", "''", ";"], "query_toks_no_value": ["select", "birth_city", "from", "director", "where", "name", "=", "value"], "question": "Where is the birth place of \" Kevin Spacey \"", "question_toks": ["Where", "is", "the", "birth", "place", "of", "``", "Kevin", "Spacey", "``"], "dataset_name": "spider", "guid": 2941}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of movies that get 3 star and 4 star?", "sql": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "example": {"db_id": "movie_1", "query": "SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  =  4", "query_toks": ["SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", "=", "3", "INTERSECT", "SELECT", "T2.title", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", "=", "4"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", "=", "value", "intersect", "select", "t2", ".", "title", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", "=", "value"], "question": "What are the names of movies that get 3 star and 4 star?", "question_toks": ["What", "are", "the", "names", "of", "movies", "that", "get", "3", "star", "and", "4", "star", "?"], "dataset_name": "spider", "guid": 2942}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.", "sql": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011", "example": {"db_id": "cinema", "query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011", "query_toks": ["SELECT", "avg", "(", "capacity", ")", ",", "min", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "FROM", "cinema", "WHERE", "openning_year", ">", "=", "2011"], "query_toks_no_value": ["select", "avg", "(", "capacity", ")", ",", "min", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "from", "cinema", "where", "openning_year", ">", "=", "value"], "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.", "question_toks": ["Show", "the", "average", ",", "minimum", ",", "and", "maximum", "capacity", "for", "all", "the", "cinemas", "opened", "in", "year", "2011", "or", "later", "."], "dataset_name": "spider", "guid": 2943}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?", "sql": "SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t4.title", ")", "FROM", "director", "AS", "t3", "JOIN", "directed_by", "AS", "t2", "ON", "t3.did", "=", "t2.did", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t2.msid", "JOIN", "made_by", "AS", "t5", "ON", "t4.mid", "=", "t5.msid", "JOIN", "producer", "AS", "t1", "ON", "t1.pid", "=", "t5.pid", "WHERE", "t3.name", "=", "``", "Quentin", "Tarantino", "''", "AND", "t4.release_year", "<", "2010", "AND", "t4.release_year", ">", "2002", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t4", ".", "title", ")", "from", "director", "as", "t3", "join", "directed_by", "as", "t2", "on", "t3", ".", "did", "=", "t2", ".", "did", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "made_by", "as", "t5", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "producer", "as", "t1", "on", "t1", ".", "pid", "=", "t5", ".", "pid", "where", "t3", ".", "name", "=", "value", "and", "t4", ".", "release_year", "<", "value", "and", "t4", ".", "release_year", ">", "value"], "question": "How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?", "question_toks": ["How", "many", "movies", "did", "``", "Quentin", "Tarantino", "``", "direct", "before", "2002", "and", "after", "2010", "?"], "dataset_name": "spider", "guid": 2944}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the ids of all reviewers who have not given 4 stars at least once?", "sql": "SELECT rID FROM Rating WHERE stars != 4", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Rating WHERE stars != 4", "query_toks": ["SELECT", "rID", "FROM", "Rating", "WHERE", "stars", "!", "=", "4"], "query_toks_no_value": ["select", "rid", "from", "rating", "where", "stars", "!", "=", "value"], "question": "What are the ids of all reviewers who have not given 4 stars at least once?", "question_toks": ["What", "are", "the", "ids", "of", "all", "reviewers", "who", "have", "not", "given", "4", "stars", "at", "least", "once", "?"], "dataset_name": "spider", "guid": 2945}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List the name of film studio that have the most number of films.", "sql": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Studio", "FROM", "film", "GROUP", "BY", "Studio", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "studio", "from", "film", "group", "by", "studio", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the name of film studio that have the most number of films.", "question_toks": ["List", "the", "name", "of", "film", "studio", "that", "have", "the", "most", "number", "of", "films", "."], "dataset_name": "spider", "guid": 2946}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | What is the location of the festival with the largest number of audience?", "sql": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1", "example": {"db_id": "entertainment_awards", "query": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1", "query_toks": ["SELECT", "LOCATION", "FROM", "festival_detail", "ORDER", "BY", "Num_of_Audience", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location", "from", "festival_detail", "order", "by", "num_of_audience", "desc", "limit", "value"], "question": "What is the location of the festival with the largest number of audience?", "question_toks": ["What", "is", "the", "location", "of", "the", "festival", "with", "the", "largest", "number", "of", "audience", "?"], "dataset_name": "spider", "guid": 2947}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.", "sql": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T3.name ,  T2.title ,  T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T2.director  =  T3.name", "query_toks": ["SELECT", "DISTINCT", "T3.name", ",", "T2.title", ",", "T1.stars", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T2.director", "=", "T3.name"], "query_toks_no_value": ["select", "distinct", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "stars", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t2", ".", "director", "=", "t3", ".", "name"], "question": "For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.", "question_toks": ["For", "any", "rating", "where", "the", "name", "of", "reviewer", "is", "the", "same", "as", "the", "director", "of", "the", "movie", ",", "return", "the", "reviewer", "name", ",", "movie", "title", ",", "and", "number", "of", "stars", "."], "dataset_name": "spider", "guid": 2948}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors from Afghanistan", "sql": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "nationality", "=", "``", "Afghanistan", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "nationality", "=", "value"], "question": "Find all actors from Afghanistan", "question_toks": ["Find", "all", "actors", "from", "Afghanistan"], "dataset_name": "spider", "guid": 2949}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the average rating star for each reviewer?", "sql": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "example": {"db_id": "movie_1", "query": "SELECT T2.name ,  avg(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID GROUP BY T2.name", "query_toks": ["SELECT", "T2.name", ",", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "GROUP", "BY", "T2.name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "group", "by", "t2", ".", "name"], "question": "What is the average rating star for each reviewer?", "question_toks": ["What", "is", "the", "average", "rating", "star", "for", "each", "reviewer", "?"], "dataset_name": "spider", "guid": 2950}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show name, opening year, and capacity for each cinema.", "sql": "SELECT name ,  openning_year ,  capacity FROM cinema", "example": {"db_id": "cinema", "query": "SELECT name ,  openning_year ,  capacity FROM cinema", "query_toks": ["SELECT", "name", ",", "openning_year", ",", "capacity", "FROM", "cinema"], "query_toks_no_value": ["select", "name", ",", "openning_year", ",", "capacity", "from", "cinema"], "question": "Show name, opening year, and capacity for each cinema.", "question_toks": ["Show", "name", ",", "opening", "year", ",", "and", "capacity", "for", "each", "cinema", "."], "dataset_name": "spider", "guid": 2951}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the number of cartoones written by Joseph Kuhr?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "example": {"db_id": "tvshow", "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Cartoon", "WHERE", "Written_by", "=", "``", "Joseph", "Kuhr", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "value"], "question": "What is the number of cartoones written by Joseph Kuhr?", "question_toks": ["What", "is", "the", "number", "of", "cartoones", "written", "by", "Joseph", "Kuhr", "?"], "dataset_name": "spider", "guid": 2952}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "sql": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "example": {"db_id": "tvshow", "query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'", "query_toks": ["SELECT", "Pixel_aspect_ratio_PAR", ",", "country", "FROM", "tv_channel", "WHERE", "LANGUAGE", "!", "=", "'English", "'"], "query_toks_no_value": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!", "=", "value"], "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "question_toks": ["What", "is", "the", "pixel", "aspect", "ratio", "and", "country", "of", "origin", "for", "all", "TV", "channels", "that", "do", "not", "use", "English", "?"], "dataset_name": "spider", "guid": 2953}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | How many different series and contents are listed in the TV Channel table?", "sql": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "example": {"db_id": "tvshow", "query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "query_toks": ["SELECT", "count", "(", "DISTINCT", "series_name", ")", ",", "count", "(", "DISTINCT", "content", ")", "FROM", "TV_Channel", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel"], "question": "How many different series and contents are listed in the TV Channel table?", "question_toks": ["How", "many", "different", "series", "and", "contents", "are", "listed", "in", "the", "TV", "Channel", "table", "?"], "dataset_name": "spider", "guid": 2954}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | List \" James Bond \" directors", "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";", "query_toks": ["SELECT", "t2.name", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t3.title", "=", "``", "James", "Bond", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "List \" James Bond \" directors", "question_toks": ["List", "``", "James", "Bond", "``", "directors"], "dataset_name": "spider", "guid": 2955}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t4.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t1.name", "=", "``", "Taraneh", "Alidoosti", "''", "AND", "t3.name", "=", "``", "Asghar", "Farhadi", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "directed_by", "as", "t2", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?", "question_toks": ["What", "are", "all", "the", "movies", "directed", "by", "``", "Asghar", "Farhadi", "``", "featuring", "``", "Taraneh", "Alidoosti", "``", "?"], "dataset_name": "spider", "guid": 2956}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | For each director, what are the titles and ratings for all the movies they reviewed?", "sql": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.stars ,  T2.director ,  max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE director != \"null\" GROUP BY director", "query_toks": ["SELECT", "T2.title", ",", "T1.stars", ",", "T2.director", ",", "max", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "director", "!", "=", "``", "null", "''", "GROUP", "BY", "director"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t2", ".", "director", ",", "max", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "director", "!", "=", "value", "group", "by", "director"], "question": "For each director, what are the titles and ratings for all the movies they reviewed?", "question_toks": ["For", "each", "director", ",", "what", "are", "the", "titles", "and", "ratings", "for", "all", "the", "movies", "they", "reviewed", "?"], "dataset_name": "spider", "guid": 2957}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who is the writer of \" The Truman Show \"", "sql": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";", "query_toks": ["SELECT", "t2.name", "FROM", "written_by", "AS", "t3", "JOIN", "movie", "AS", "t1", "ON", "t3.msid", "=", "t1.mid", "JOIN", "writer", "AS", "t2", "ON", "t3.wid", "=", "t2.wid", "WHERE", "t1.title", "=", "``", "The", "Truman", "Show", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "written_by", "as", "t3", "join", "movie", "as", "t1", "on", "t3", ".", "msid", "=", "t1", ".", "mid", "join", "writer", "as", "t2", "on", "t3", ".", "wid", "=", "t2", ".", "wid", "where", "t1", ".", "title", "=", "value"], "question": "Who is the writer of \" The Truman Show \"", "question_toks": ["Who", "is", "the", "writer", "of", "``", "The", "Truman", "Show", "``"], "dataset_name": "spider", "guid": 2958}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | find the program owners that have some programs in both morning and night time.", "sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"", "example": {"db_id": "program_share", "query": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"", "query_toks": ["SELECT", "t1.owner", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "WHERE", "t2.Time_of_day", "=", "``", "Morning", "''", "INTERSECT", "SELECT", "t1.owner", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "WHERE", "t2.Time_of_day", "=", "``", "Night", "''"], "query_toks_no_value": ["select", "t1", ".", "owner", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "where", "t2", ".", "time_of_day", "=", "value", "intersect", "select", "t1", ".", "owner", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "find the program owners that have some programs in both morning and night time.", "question_toks": ["find", "the", "program", "owners", "that", "have", "some", "programs", "in", "both", "morning", "and", "night", "time", "."], "dataset_name": "spider", "guid": 2959}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Return all reviewer names and movie names together in a single list.", "sql": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "example": {"db_id": "movie_1", "query": "SELECT name FROM Reviewer UNION SELECT title FROM Movie", "query_toks": ["SELECT", "name", "FROM", "Reviewer", "UNION", "SELECT", "title", "FROM", "Movie"], "query_toks_no_value": ["select", "name", "from", "reviewer", "union", "select", "title", "from", "movie"], "question": "Return all reviewer names and movie names together in a single list.", "question_toks": ["Return", "all", "reviewer", "names", "and", "movie", "names", "together", "in", "a", "single", "list", "."], "dataset_name": "spider", "guid": 2960}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of actors in the movie \" Saving Private Ryan \" ?", "sql": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t1.name", ")", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t3.title", "=", "``", "Saving", "Private", "Ryan", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "name", ")", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t3", ".", "title", "=", "value"], "question": "What is the number of actors in the movie \" Saving Private Ryan \" ?", "question_toks": ["What", "is", "the", "number", "of", "actors", "in", "the", "movie", "``", "Saving", "Private", "Ryan", "``", "?"], "dataset_name": "spider", "guid": 2961}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which program was launched most recently? Return the program name.", "sql": "SELECT name FROM program ORDER BY launch DESC LIMIT 1", "example": {"db_id": "program_share", "query": "SELECT name FROM program ORDER BY launch DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "program", "ORDER", "BY", "launch", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "program", "order", "by", "launch", "desc", "limit", "value"], "question": "Which program was launched most recently? Return the program name.", "question_toks": ["Which", "program", "was", "launched", "most", "recently", "?", "Return", "the", "program", "name", "."], "dataset_name": "spider", "guid": 2962}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who is the writer of the movie \" The Truman Show \"", "sql": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";", "query_toks": ["SELECT", "t2.name", "FROM", "written_by", "AS", "t3", "JOIN", "movie", "AS", "t1", "ON", "t3.msid", "=", "t1.mid", "JOIN", "writer", "AS", "t2", "ON", "t3.wid", "=", "t2.wid", "WHERE", "t1.title", "=", "``", "The", "Truman", "Show", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "written_by", "as", "t3", "join", "movie", "as", "t1", "on", "t3", ".", "msid", "=", "t1", ".", "mid", "join", "writer", "as", "t2", "on", "t3", ".", "wid", "=", "t2", ".", "wid", "where", "t1", ".", "title", "=", "value"], "question": "Who is the writer of the movie \" The Truman Show \"", "question_toks": ["Who", "is", "the", "writer", "of", "the", "movie", "``", "The", "Truman", "Show", "``"], "dataset_name": "spider", "guid": 2963}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the content of TV Channel with serial name \"Sky Radio\"?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query_toks": ["SELECT", "Content", "FROM", "TV_Channel", "WHERE", "series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "value"], "question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "question_toks": ["What", "is", "the", "content", "of", "TV", "Channel", "with", "serial", "name", "``", "Sky", "Radio", "''", "?"], "dataset_name": "spider", "guid": 2964}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all the female actors born in \" New York City \" after 1980", "sql": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "New", "York", "City", "''", "AND", "birth_year", ">", "1980", "AND", "gender", "=", "``", "female", "''", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", ">", "value", "and", "gender", "=", "value"], "question": "Find all the female actors born in \" New York City \" after 1980", "question_toks": ["Find", "all", "the", "female", "actors", "born", "in", "``", "New", "York", "City", "``", "after", "1980"], "dataset_name": "spider", "guid": 2965}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | How many TV Channels use the English language?", "sql": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "example": {"db_id": "tvshow", "query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "TV_Channel", "WHERE", "LANGUAGE", "=", "``", "English", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "value"], "question": "How many TV Channels use the English language?", "question_toks": ["How", "many", "TV", "Channels", "use", "the", "English", "language", "?"], "dataset_name": "spider", "guid": 2966}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | How many movie ratings have more than 3 stars?", "sql": "SELECT count(*) FROM Rating WHERE stars  >  3", "example": {"db_id": "movie_1", "query": "SELECT count(*) FROM Rating WHERE stars  >  3", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Rating", "WHERE", "stars", ">", "3"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "rating", "where", "stars", ">", "value"], "question": "How many movie ratings have more than 3 stars?", "question_toks": ["How", "many", "movie", "ratings", "have", "more", "than", "3", "stars", "?"], "dataset_name": "spider", "guid": 2967}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the names of reviewers who had given higher than 3 star ratings.", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "example": {"db_id": "movie_1", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "query_toks": ["SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T1.stars", ">", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t1", ".", "stars", ">", "value"], "question": "Find the names of reviewers who had given higher than 3 star ratings.", "question_toks": ["Find", "the", "names", "of", "reviewers", "who", "had", "given", "higher", "than", "3", "star", "ratings", "."], "dataset_name": "spider", "guid": 2968}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?", "sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "query_toks": ["SELECT", "DISTINCT", "YEAR", "FROM", "Movie", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.stars", ">", "=", "4", "ORDER", "BY", "T1.year"], "query_toks_no_value": ["select", "distinct", "year", "from", "movie", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "stars", ">", "=", "value", "order", "by", "t1", ".", "year"], "question": "In what years did a movie receive a 4 or 5 star rating, and list the years from oldest to most recently?", "question_toks": ["In", "what", "years", "did", "a", "movie", "receive", "a", "4", "or", "5", "star", "rating", ",", "and", "list", "the", "years", "from", "oldest", "to", "most", "recently", "?"], "dataset_name": "spider", "guid": 2969}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "sql": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "example": {"db_id": "tvshow", "query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "T1.series_name", ",", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.directed_by", "=", "'Michael", "Chang", "'", "INTERSECT", "SELECT", "T1.series_name", ",", "T1.country", "FROM", "TV_Channel", "AS", "T1", "JOIN", "cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "t1", ".", "series_name", ",", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "directed_by", "=", "value", "intersect", "select", "t1", ".", "series_name", ",", "t1", ".", "country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "directed_by", "=", "value"], "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "question_toks": ["Find", "the", "series", "name", "and", "country", "of", "the", "tv", "channel", "that", "is", "playing", "some", "cartoons", "directed", "by", "Ben", "Jones", "and", "Michael", "Chang", "?"], "dataset_name": "spider", "guid": 2970}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies featuring \" Woody Strode \" and \" Jason Robards \"", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "CAST", "AS", "t3", "ON", "t4.mid", "=", "t3.msid", "JOIN", "actor", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "WHERE", "t1.name", "=", "``", "Woody", "Strode", "''", "AND", "t2.name", "=", "``", "Jason", "Robards", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "cast", "as", "t3", "on", "t4", ".", "mid", "=", "t3", ".", "msid", "join", "actor", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "Find all movies featuring \" Woody Strode \" and \" Jason Robards \"", "question_toks": ["Find", "all", "movies", "featuring", "``", "Woody", "Strode", "``", "and", "``", "Jason", "Robards", "``"], "dataset_name": "spider", "guid": 2971}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of the reviewers who have rated a movie more than 3 stars before?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "example": {"db_id": "movie_1", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  >  3", "query_toks": ["SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T1.stars", ">", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t1", ".", "stars", ">", "value"], "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?", "question_toks": ["What", "are", "the", "names", "of", "the", "reviewers", "who", "have", "rated", "a", "movie", "more", "than", "3", "stars", "before", "?"], "dataset_name": "spider", "guid": 2972}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show director with the largest number of show times in total.", "sql": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1", "example": {"db_id": "cinema", "query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1", "query_toks": ["SELECT", "T2.directed_by", "FROM", "schedule", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T2.directed_by", "ORDER", "BY", "sum", "(", "T1.show_times_per_day", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "directed_by", "from", "schedule", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t2", ".", "directed_by", "order", "by", "sum", "(", "t1", ".", "show_times_per_day", ")", "desc", "limit", "value"], "question": "Show director with the largest number of show times in total.", "question_toks": ["Show", "director", "with", "the", "largest", "number", "of", "show", "times", "in", "total", "."], "dataset_name": "spider", "guid": 2973}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | what are the names of the channels that broadcast in both morning and night?", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'", "example": {"db_id": "program_share", "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'", "query_toks": ["SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Morning", "'", "INTERSECT", "SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Night", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value", "intersect", "select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "what are the names of the channels that broadcast in both morning and night?", "question_toks": ["what", "are", "the", "names", "of", "the", "channels", "that", "broadcast", "in", "both", "morning", "and", "night", "?"], "dataset_name": "spider", "guid": 2974}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Count the number of distinct channel owners.", "sql": "SELECT count(DISTINCT OWNER) FROM channel", "example": {"db_id": "program_share", "query": "SELECT count(DISTINCT OWNER) FROM channel", "query_toks": ["SELECT", "count", "(", "DISTINCT", "OWNER", ")", "FROM", "channel"], "query_toks_no_value": ["select", "count", "(", "distinct", "owner", ")", "from", "channel"], "question": "Count the number of distinct channel owners.", "question_toks": ["Count", "the", "number", "of", "distinct", "channel", "owners", "."], "dataset_name": "spider", "guid": 2975}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the average rating for each movie that has never been reviewed by Brittany Harris?", "sql": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID", "example": {"db_id": "movie_1", "query": "SELECT mID ,  avg(stars) FROM Rating WHERE mID NOT IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\") GROUP BY mID", "query_toks": ["SELECT", "mID", ",", "avg", "(", "stars", ")", "FROM", "Rating", "WHERE", "mID", "NOT", "IN", "(", "SELECT", "T1.mID", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T2.name", "=", "``", "Brittany", "Harris", "''", ")", "GROUP", "BY", "mID"], "query_toks_no_value": ["select", "mid", ",", "avg", "(", "stars", ")", "from", "rating", "where", "mid", "not", "in", "(", "select", "t1", ".", "mid", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t2", ".", "name", "=", "value", ")", "group", "by", "mid"], "question": "What is the average rating for each movie that has never been reviewed by Brittany Harris?", "question_toks": ["What", "is", "the", "average", "rating", "for", "each", "movie", "that", "has", "never", "been", "reviewed", "by", "Brittany", "Harris", "?"], "dataset_name": "spider", "guid": 2976}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | How many cinema do we have?", "sql": "SELECT count(*) FROM cinema", "example": {"db_id": "cinema", "query": "SELECT count(*) FROM cinema", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "cinema"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cinema"], "question": "How many cinema do we have?", "question_toks": ["How", "many", "cinema", "do", "we", "have", "?"], "dataset_name": "spider", "guid": 2977}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What are all the locations with a cinema?", "sql": "SELECT DISTINCT LOCATION FROM cinema", "example": {"db_id": "cinema", "query": "SELECT DISTINCT LOCATION FROM cinema", "query_toks": ["SELECT", "DISTINCT", "LOCATION", "FROM", "cinema"], "query_toks_no_value": ["select", "distinct", "location", "from", "cinema"], "question": "What are all the locations with a cinema?", "question_toks": ["What", "are", "all", "the", "locations", "with", "a", "cinema", "?"], "dataset_name": "spider", "guid": 2978}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?", "sql": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")", "query_toks": ["SELECT", "T2.title", ",", "T2.director", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", ">", "(", "SELECT", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.director", "=", "``", "James", "Cameron", "''", ")"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t2", ".", "director", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", ">", "(", "select", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "director", "=", "value", ")"], "question": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?", "question_toks": ["What", "are", "the", "titles", "and", "directors", "of", "all", "movies", "that", "have", "a", "rating", "higher", "than", "the", "average", "James", "Cameron", "film", "rating", "?"], "dataset_name": "spider", "guid": 2979}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the languages used by the least number of TV Channels and how many channels use it?", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "example": {"db_id": "tvshow", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "query_toks": ["SELECT", "LANGUAGE", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "LANGUAGE", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What are the languages used by the least number of TV Channels and how many channels use it?", "question_toks": ["What", "are", "the", "languages", "used", "by", "the", "least", "number", "of", "TV", "Channels", "and", "how", "many", "channels", "use", "it", "?"], "dataset_name": "spider", "guid": 2980}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies about nuclear weapons", "sql": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";", "query_toks": ["SELECT", "t3.title", "FROM", "tags", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.id", "JOIN", "movie", "AS", "t3", "ON", "t2.msid", "=", "t3.mid", "WHERE", "t1.keyword", "=", "``", "nuclear", "weapons", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "tags", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "id", "join", "movie", "as", "t3", "on", "t2", ".", "msid", "=", "t3", ".", "mid", "where", "t1", ".", "keyword", "=", "value"], "question": "Find all movies about nuclear weapons", "question_toks": ["Find", "all", "movies", "about", "nuclear", "weapons"], "dataset_name": "spider", "guid": 2981}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Steven Spielberg \" direct ?", "sql": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Steven", "Spielberg", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value"], "question": "How many movies did \" Steven Spielberg \" direct ?", "question_toks": ["How", "many", "movies", "did", "``", "Steven", "Spielberg", "``", "direct", "?"], "dataset_name": "spider", "guid": 2982}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the country with the most number of TV Channels and how many does it have?", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "tvshow", "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "Country", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "Country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the country with the most number of TV Channels and how many does it have?", "question_toks": ["What", "is", "the", "country", "with", "the", "most", "number", "of", "TV", "Channels", "and", "how", "many", "does", "it", "have", "?"], "dataset_name": "spider", "guid": 2983}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the title of the newest movie?", "sql": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE YEAR  =  (SELECT max(YEAR) FROM Movie)", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "YEAR", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "Movie", ")"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "year", "=", "(", "select", "max", "(", "year", ")", "from", "movie", ")"], "question": "What is the title of the newest movie?", "question_toks": ["What", "is", "the", "title", "of", "the", "newest", "movie", "?"], "dataset_name": "spider", "guid": 2984}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What is the average number of cities of markets with low film market estimate bigger than 10000?", "sql": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000", "example": {"db_id": "film_rank", "query": "SELECT avg(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T1.Low_Estimate  >  10000", "query_toks": ["SELECT", "avg", "(", "T2.Number_cities", ")", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "WHERE", "T1.Low_Estimate", ">", "10000"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "number_cities", ")", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "where", "t1", ".", "low_estimate", ">", "value"], "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?", "question_toks": ["What", "is", "the", "average", "number", "of", "cities", "of", "markets", "with", "low", "film", "market", "estimate", "bigger", "than", "10000", "?"], "dataset_name": "spider", "guid": 2985}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Who was the director of the movie Joy from 2015 ?", "sql": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";", "example": {"db_id": "imdb", "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";", "query_toks": ["SELECT", "t2.name", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t3.release_year", "=", "2015", "AND", "t3.title", "=", "``", "Joy", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t3", ".", "release_year", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Who was the director of the movie Joy from 2015 ?", "question_toks": ["Who", "was", "the", "director", "of", "the", "movie", "Joy", "from", "2015", "?"], "dataset_name": "spider", "guid": 2986}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Show the id, name of each festival and the number of artworks it has nominated.", "sql": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID", "example": {"db_id": "entertainment_awards", "query": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID", "query_toks": ["SELECT", "T1.Festival_ID", ",", "T3.Festival_Name", ",", "COUNT", "(", "*", ")", "FROM", "nomination", "AS", "T1", "JOIN", "artwork", "AS", "T2", "ON", "T1.Artwork_ID", "=", "T2.Artwork_ID", "JOIN", "festival_detail", "AS", "T3", "ON", "T1.Festival_ID", "=", "T3.Festival_ID", "GROUP", "BY", "T1.Festival_ID"], "query_toks_no_value": ["select", "t1", ".", "festival_id", ",", "t3", ".", "festival_name", ",", "count", "(", "*", ")", "from", "nomination", "as", "t1", "join", "artwork", "as", "t2", "on", "t1", ".", "artwork_id", "=", "t2", ".", "artwork_id", "join", "festival_detail", "as", "t3", "on", "t1", ".", "festival_id", "=", "t3", ".", "festival_id", "group", "by", "t1", ".", "festival_id"], "question": "Show the id, name of each festival and the number of artworks it has nominated.", "question_toks": ["Show", "the", "id", ",", "name", "of", "each", "festival", "and", "the", "number", "of", "artworks", "it", "has", "nominated", "."], "dataset_name": "spider", "guid": 2987}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Which movies did \" Alfred Hitchcock \" direct ?", "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Alfred Hitchcock\";", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Alfred Hitchcock\";", "query_toks": ["SELECT", "t3.title", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Alfred", "Hitchcock", "''", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value"], "question": "Which movies did \" Alfred Hitchcock \" direct ?", "question_toks": ["Which", "movies", "did", "``", "Alfred", "Hitchcock", "``", "direct", "?"], "dataset_name": "spider", "guid": 2988}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Count the number of films whose title contains the word 'Dummy'.", "sql": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"", "example": {"db_id": "cinema", "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "film", "WHERE", "title", "LIKE", "``", "%", "Dummy", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "film", "where", "title", "like", "value"], "question": "Count the number of films whose title contains the word 'Dummy'.", "question_toks": ["Count", "the", "number", "of", "films", "whose", "title", "contains", "the", "word", "'Dummy", "'", "."], "dataset_name": "spider", "guid": 2989}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".", "sql": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"", "query_toks": ["SELECT", "Studio", "FROM", "film", "WHERE", "Director", "=", "``", "Nicholas", "Meyer", "''", "INTERSECT", "SELECT", "Studio", "FROM", "film", "WHERE", "Director", "=", "``", "Walter", "Hill", "''"], "query_toks_no_value": ["select", "studio", "from", "film", "where", "director", "=", "value", "intersect", "select", "studio", "from", "film", "where", "director", "=", "value"], "question": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".", "question_toks": ["Show", "the", "studios", "that", "have", "produced", "films", "with", "director", "``", "Nicholas", "Meyer", "''", "and", "``", "Walter", "Hill", "''", "."], "dataset_name": "spider", "guid": 2990}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which programs are never broadcasted in the morning? Give me the names of the programs.", "sql": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"", "example": {"db_id": "program_share", "query": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"", "query_toks": ["SELECT", "name", "FROM", "program", "EXCEPT", "SELECT", "t1.name", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "WHERE", "t2.Time_of_day", "=", "``", "Morning", "''"], "query_toks_no_value": ["select", "name", "from", "program", "except", "select", "t1", ".", "name", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Which programs are never broadcasted in the morning? Give me the names of the programs.", "question_toks": ["Which", "programs", "are", "never", "broadcasted", "in", "the", "morning", "?", "Give", "me", "the", "names", "of", "the", "programs", "."], "dataset_name": "spider", "guid": 2991}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Find the locations that have more than one movie theater with capacity above 300.", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "300", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "capacity", ">", "value", "group", "by", "location", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the locations that have more than one movie theater with capacity above 300.", "question_toks": ["Find", "the", "locations", "that", "have", "more", "than", "one", "movie", "theater", "with", "capacity", "above", "300", "."], "dataset_name": "spider", "guid": 2992}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.", "sql": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "example": {"db_id": "movie_1", "query": "SELECT T1.director ,  T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  =  5", "query_toks": ["SELECT", "T1.director", ",", "T1.title", "FROM", "Movie", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.stars", "=", "5"], "query_toks_no_value": ["select", "t1", ".", "director", ",", "t1", ".", "title", "from", "movie", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "stars", "=", "value"], "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.", "question_toks": ["What", "are", "the", "names", "of", "directors", "who", "directed", "movies", "with", "5", "star", "rating", "?", "Also", "return", "the", "title", "of", "these", "movies", "."], "dataset_name": "spider", "guid": 2993}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of the directors who made exactly one movie excluding director NULL?", "sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1", "example": {"db_id": "movie_1", "query": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1", "query_toks": ["SELECT", "director", "FROM", "Movie", "WHERE", "director", "!", "=", "``", "null", "''", "GROUP", "BY", "director", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "director", "from", "movie", "where", "director", "!", "=", "value", "group", "by", "director", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the names of the directors who made exactly one movie excluding director NULL?", "question_toks": ["What", "are", "the", "names", "of", "the", "directors", "who", "made", "exactly", "one", "movie", "excluding", "director", "NULL", "?"], "dataset_name": "spider", "guid": 2994}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show all the cinema names and opening years in descending order of opening year.", "sql": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC", "example": {"db_id": "cinema", "query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC", "query_toks": ["SELECT", "name", ",", "openning_year", "FROM", "cinema", "ORDER", "BY", "openning_year", "DESC"], "query_toks_no_value": ["select", "name", ",", "openning_year", "from", "cinema", "order", "by", "openning_year", "desc"], "question": "Show all the cinema names and opening years in descending order of opening year.", "question_toks": ["Show", "all", "the", "cinema", "names", "and", "opening", "years", "in", "descending", "order", "of", "opening", "year", "."], "dataset_name": "spider", "guid": 2995}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | What are the names and locations of festivals?", "sql": "SELECT Festival_Name ,  LOCATION FROM festival_detail", "example": {"db_id": "entertainment_awards", "query": "SELECT Festival_Name ,  LOCATION FROM festival_detail", "query_toks": ["SELECT", "Festival_Name", ",", "LOCATION", "FROM", "festival_detail"], "query_toks_no_value": ["select", "festival_name", ",", "location", "from", "festival_detail"], "question": "What are the names and locations of festivals?", "question_toks": ["What", "are", "the", "names", "and", "locations", "of", "festivals", "?"], "dataset_name": "spider", "guid": 2996}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "sql": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "example": {"db_id": "tvshow", "query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')", "query_toks": ["SELECT", "package_option", "FROM", "TV_Channel", "WHERE", "id", "NOT", "IN", "(", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'", ")"], "query_toks_no_value": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ")"], "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "question_toks": ["What", "are", "the", "package", "options", "of", "all", "tv", "channels", "that", "are", "not", "playing", "any", "cartoons", "directed", "by", "Ben", "Jones", "?"], "dataset_name": "spider", "guid": 2997}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List all cartoon directed by \"Ben Jones\".", "sql": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "example": {"db_id": "tvshow", "query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "WHERE", "Directed_by", "=", "``", "Ben", "Jones", "''", ";"], "query_toks_no_value": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "List all cartoon directed by \"Ben Jones\".", "question_toks": ["List", "all", "cartoon", "directed", "by", "``", "Ben", "Jones", "''", "."], "dataset_name": "spider", "guid": 2998}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the names of all directors whose movies are rated by Sarah Martinez.", "sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "query_toks": ["SELECT", "DISTINCT", "T2.director", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T3.name", "=", "'Sarah", "Martinez", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "director", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t3", ".", "name", "=", "value"], "question": "Find the names of all directors whose movies are rated by Sarah Martinez.", "question_toks": ["Find", "the", "names", "of", "all", "directors", "whose", "movies", "are", "rated", "by", "Sarah", "Martinez", "."], "dataset_name": "spider", "guid": 2999}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies featuring both \" Woody Strode \" and \" Jason Robards \"", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "CAST", "AS", "t3", "ON", "t4.mid", "=", "t3.msid", "JOIN", "actor", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "WHERE", "t1.name", "=", "``", "Woody", "Strode", "''", "AND", "t2.name", "=", "``", "Jason", "Robards", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "cast", "as", "t3", "on", "t4", ".", "mid", "=", "t3", ".", "msid", "join", "actor", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "Find all movies featuring both \" Woody Strode \" and \" Jason Robards \"", "question_toks": ["Find", "all", "movies", "featuring", "both", "``", "Woody", "Strode", "``", "and", "``", "Jason", "Robards", "``"], "dataset_name": "spider", "guid": 3000}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the title and star rating of the movie that got the least rating star for each reviewer.", "sql": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T1.rID ,  T1.stars ,  min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID GROUP BY T1.rID", "query_toks": ["SELECT", "T2.title", ",", "T1.rID", ",", "T1.stars", ",", "min", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.rID"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t1", ".", "rid", ",", "t1", ".", "stars", ",", "min", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "rid"], "question": "Find the title and star rating of the movie that got the least rating star for each reviewer.", "question_toks": ["Find", "the", "title", "and", "star", "rating", "of", "the", "movie", "that", "got", "the", "least", "rating", "star", "for", "each", "reviewer", "."], "dataset_name": "spider", "guid": 3001}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Who are all the directors?", "sql": "SELECT DISTINCT directed_by FROM film", "example": {"db_id": "cinema", "query": "SELECT DISTINCT directed_by FROM film", "query_toks": ["SELECT", "DISTINCT", "directed_by", "FROM", "film"], "query_toks_no_value": ["select", "distinct", "directed_by", "from", "film"], "question": "Who are all the directors?", "question_toks": ["Who", "are", "all", "the", "directors", "?"], "dataset_name": "spider", "guid": 3002}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | List the name of artworks that are not nominated.", "sql": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)", "example": {"db_id": "entertainment_awards", "query": "SELECT Name FROM Artwork WHERE Artwork_ID NOT IN (SELECT Artwork_ID FROM nomination)", "query_toks": ["SELECT", "Name", "FROM", "Artwork", "WHERE", "Artwork_ID", "NOT", "IN", "(", "SELECT", "Artwork_ID", "FROM", "nomination", ")"], "query_toks_no_value": ["select", "name", "from", "artwork", "where", "artwork_id", "not", "in", "(", "select", "artwork_id", "from", "nomination", ")"], "question": "List the name of artworks that are not nominated.", "question_toks": ["List", "the", "name", "of", "artworks", "that", "are", "not", "nominated", "."], "dataset_name": "spider", "guid": 3003}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the latest movie by \" Jim Jarmusch \"", "sql": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;", "query_toks": ["SELECT", "t3.title", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Jim", "Jarmusch", "''", "ORDER", "BY", "t3.release_year", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t3", ".", "title", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value", "order", "by", "t3", ".", "release_year", "desc", "limit", "value"], "question": "What is the latest movie by \" Jim Jarmusch \"", "question_toks": ["What", "is", "the", "latest", "movie", "by", "``", "Jim", "Jarmusch", "``"], "dataset_name": "spider", "guid": 3004}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Return the title of the film with the highest high estimate?", "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "example": {"db_id": "film_rank", "query": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "query_toks": ["SELECT", "t1.title", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID", "ORDER", "BY", "high_estimate", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "order", "by", "high_estimate", "desc", "limit", "value"], "question": "Return the title of the film with the highest high estimate?", "question_toks": ["Return", "the", "title", "of", "the", "film", "with", "the", "highest", "high", "estimate", "?"], "dataset_name": "spider", "guid": 3005}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "example": {"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Title", "=", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "!", "``", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "title", "=", "value"], "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "question_toks": ["What", "is", "the", "series", "name", "of", "the", "TV", "Channel", "that", "shows", "the", "cartoon", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "''", "?"], "dataset_name": "spider", "guid": 3006}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Give me a list of all the channel names sorted by the channel rating in descending order.", "sql": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "example": {"db_id": "program_share", "query": "SELECT name FROM channel ORDER BY rating_in_percent DESC", "query_toks": ["SELECT", "name", "FROM", "channel", "ORDER", "BY", "rating_in_percent", "DESC"], "query_toks_no_value": ["select", "name", "from", "channel", "order", "by", "rating_in_percent", "desc"], "question": "Give me a list of all the channel names sorted by the channel rating in descending order.", "question_toks": ["Give", "me", "a", "list", "of", "all", "the", "channel", "names", "sorted", "by", "the", "channel", "rating", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 3007}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the countries for each market ordered by decreasing number of cities?", "sql": "SELECT Country FROM market ORDER BY Number_cities DESC", "example": {"db_id": "film_rank", "query": "SELECT Country FROM market ORDER BY Number_cities DESC", "query_toks": ["SELECT", "Country", "FROM", "market", "ORDER", "BY", "Number_cities", "DESC"], "query_toks_no_value": ["select", "country", "from", "market", "order", "by", "number_cities", "desc"], "question": "What are the countries for each market ordered by decreasing number of cities?", "question_toks": ["What", "are", "the", "countries", "for", "each", "market", "ordered", "by", "decreasing", "number", "of", "cities", "?"], "dataset_name": "spider", "guid": 3008}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies did \" Humphrey Bogart \" act in before 1942 ?", "sql": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Humphrey Bogart\" AND t2.release_year  <  1942;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Humphrey Bogart\" AND t2.release_year  <  1942;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Humphrey", "Bogart", "''", "AND", "t2.release_year", "<", "1942", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "release_year", "<", "value"], "question": "How many movies did \" Humphrey Bogart \" act in before 1942 ?", "question_toks": ["How", "many", "movies", "did", "``", "Humphrey", "Bogart", "``", "act", "in", "before", "1942", "?"], "dataset_name": "spider", "guid": 3009}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Return the maximum and minimum number of cities across all markets.", "sql": "SELECT max(Number_cities) ,  min(Number_cities) FROM market", "example": {"db_id": "film_rank", "query": "SELECT max(Number_cities) ,  min(Number_cities) FROM market", "query_toks": ["SELECT", "max", "(", "Number_cities", ")", ",", "min", "(", "Number_cities", ")", "FROM", "market"], "query_toks_no_value": ["select", "max", "(", "number_cities", ")", ",", "min", "(", "number_cities", ")", "from", "market"], "question": "Return the maximum and minimum number of cities across all markets.", "question_toks": ["Return", "the", "maximum", "and", "minimum", "number", "of", "cities", "across", "all", "markets", "."], "dataset_name": "spider", "guid": 3010}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | In what year was \" Kevin Spacey \" born ?", "sql": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";", "example": {"db_id": "imdb", "query": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";", "query_toks": ["SELECT", "birth_year", "FROM", "actor", "WHERE", "name", "=", "``", "actor_name0", "''", ";"], "query_toks_no_value": ["select", "birth_year", "from", "actor", "where", "name", "=", "value"], "question": "In what year was \" Kevin Spacey \" born ?", "question_toks": ["In", "what", "year", "was", "``", "Kevin", "Spacey", "``", "born", "?"], "dataset_name": "spider", "guid": 3011}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the names of studios that have made two or more films?", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Studio", "FROM", "film", "GROUP", "BY", "Studio", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "studio", "from", "film", "group", "by", "studio", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of studios that have made two or more films?", "question_toks": ["What", "are", "the", "names", "of", "studios", "that", "have", "made", "two", "or", "more", "films", "?"], "dataset_name": "spider", "guid": 3012}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | List the name, origin and owner of each program.", "sql": "SELECT name ,  origin ,  OWNER FROM program", "example": {"db_id": "program_share", "query": "SELECT name ,  origin ,  OWNER FROM program", "query_toks": ["SELECT", "name", ",", "origin", ",", "OWNER", "FROM", "program"], "query_toks_no_value": ["select", "name", ",", "origin", ",", "owner", "from", "program"], "question": "List the name, origin and owner of each program.", "question_toks": ["List", "the", "name", ",", "origin", "and", "owner", "of", "each", "program", "."], "dataset_name": "spider", "guid": 3013}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names and years of the movies that has the top 3 highest rating star?", "sql": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID ORDER BY T1.stars DESC LIMIT 3", "query_toks": ["SELECT", "T2.title", ",", "T2.year", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "ORDER", "BY", "T1.stars", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t2", ".", "year", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "order", "by", "t1", ".", "stars", "desc", "limit", "value"], "question": "What are the names and years of the movies that has the top 3 highest rating star?", "question_toks": ["What", "are", "the", "names", "and", "years", "of", "the", "movies", "that", "has", "the", "top", "3", "highest", "rating", "star", "?"], "dataset_name": "spider", "guid": 3014}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors from Canada who acted in \" James Bond \" movies", "sql": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"Canada\" AND t3.title  =  \"James Bond\";", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"Canada\" AND t3.title  =  \"James Bond\";", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t2", "JOIN", "actor", "AS", "t1", "ON", "t2.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t2.msid", "WHERE", "t1.nationality", "=", "``", "Canada", "''", "AND", "t3.title", "=", "``", "James", "Bond", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t2", "join", "actor", "as", "t1", "on", "t2", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t2", ".", "msid", "where", "t1", ".", "nationality", "=", "value", "and", "t3", ".", "title", "=", "value"], "question": "Find all actors from Canada who acted in \" James Bond \" movies", "question_toks": ["Find", "all", "actors", "from", "Canada", "who", "acted", "in", "``", "James", "Bond", "``", "movies"], "dataset_name": "spider", "guid": 3015}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies about Iraq war were produced in 2015 ?", "sql": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Iraq war\" AND t3.release_year  =  2015;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Iraq war\" AND t3.release_year  =  2015;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t3.title", ")", "FROM", "tags", "AS", "t2", "JOIN", "keyword", "AS", "t1", "ON", "t2.kid", "=", "t1.id", "JOIN", "movie", "AS", "t3", "ON", "t2.msid", "=", "t3.mid", "WHERE", "t1.keyword", "=", "``", "Iraq", "war", "''", "AND", "t3.release_year", "=", "2015", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "title", ")", "from", "tags", "as", "t2", "join", "keyword", "as", "t1", "on", "t2", ".", "kid", "=", "t1", ".", "id", "join", "movie", "as", "t3", "on", "t2", ".", "msid", "=", "t3", ".", "mid", "where", "t1", ".", "keyword", "=", "value", "and", "t3", ".", "release_year", "=", "value"], "question": "How many movies about Iraq war were produced in 2015 ?", "question_toks": ["How", "many", "movies", "about", "Iraq", "war", "were", "produced", "in", "2015", "?"], "dataset_name": "spider", "guid": 3016}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the title of all cartoons in alphabetical order.", "sql": "SELECT Title FROM Cartoon ORDER BY title", "example": {"db_id": "tvshow", "query": "SELECT Title FROM Cartoon ORDER BY title", "query_toks": ["SELECT", "Title", "FROM", "Cartoon", "ORDER", "BY", "title"], "query_toks_no_value": ["select", "title", "from", "cartoon", "order", "by", "title"], "question": "List the title of all cartoons in alphabetical order.", "question_toks": ["List", "the", "title", "of", "all", "cartoons", "in", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 3017}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List the studios of each film and the number of films produced by that studio.", "sql": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio", "example": {"db_id": "film_rank", "query": "SELECT Studio ,  COUNT(*) FROM film GROUP BY Studio", "query_toks": ["SELECT", "Studio", ",", "COUNT", "(", "*", ")", "FROM", "film", "GROUP", "BY", "Studio"], "query_toks_no_value": ["select", "studio", ",", "count", "(", "*", ")", "from", "film", "group", "by", "studio"], "question": "List the studios of each film and the number of films produced by that studio.", "question_toks": ["List", "the", "studios", "of", "each", "film", "and", "the", "number", "of", "films", "produced", "by", "that", "studio", "."], "dataset_name": "spider", "guid": 3018}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the nationality of \" Kevin Spacey \" ?", "sql": "SELECT nationality FROM director WHERE name  =  \"director_name0\";", "example": {"db_id": "imdb", "query": "SELECT nationality FROM director WHERE name  =  \"director_name0\";", "query_toks": ["SELECT", "nationality", "FROM", "director", "WHERE", "name", "=", "``", "director_name0", "''", ";"], "query_toks_no_value": ["select", "nationality", "from", "director", "where", "name", "=", "value"], "question": "What is the nationality of \" Kevin Spacey \" ?", "question_toks": ["What", "is", "the", "nationality", "of", "``", "Kevin", "Spacey", "``", "?"], "dataset_name": "spider", "guid": 3019}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Count the number of programs broadcast for each time section of a day.", "sql": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day", "example": {"db_id": "program_share", "query": "SELECT count(*) ,  time_of_day FROM broadcast GROUP BY time_of_day", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "time_of_day", "FROM", "broadcast", "GROUP", "BY", "time_of_day"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "time_of_day", "from", "broadcast", "group", "by", "time_of_day"], "question": "Count the number of programs broadcast for each time section of a day.", "question_toks": ["Count", "the", "number", "of", "programs", "broadcast", "for", "each", "time", "section", "of", "a", "day", "."], "dataset_name": "spider", "guid": 3020}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show all the locations with at least two cinemas with capacity above 300.", "sql": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "example": {"db_id": "cinema", "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2", "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "300", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "location", "from", "cinema", "where", "capacity", ">", "value", "group", "by", "location", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show all the locations with at least two cinemas with capacity above 300.", "question_toks": ["Show", "all", "the", "locations", "with", "at", "least", "two", "cinemas", "with", "capacity", "above", "300", "."], "dataset_name": "spider", "guid": 3021}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the reviewer id of Daniel Lewis?", "sql": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Reviewer WHERE name  =  \"Daniel Lewis\"", "query_toks": ["SELECT", "rID", "FROM", "Reviewer", "WHERE", "name", "=", "``", "Daniel", "Lewis", "''"], "query_toks_no_value": ["select", "rid", "from", "reviewer", "where", "name", "=", "value"], "question": "What is the reviewer id of Daniel Lewis?", "question_toks": ["What", "is", "the", "reviewer", "id", "of", "Daniel", "Lewis", "?"], "dataset_name": "spider", "guid": 3022}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | list all the names of programs, ordering by launch time.", "sql": "SELECT name FROM program ORDER BY launch", "example": {"db_id": "program_share", "query": "SELECT name FROM program ORDER BY launch", "query_toks": ["SELECT", "name", "FROM", "program", "ORDER", "BY", "launch"], "query_toks_no_value": ["select", "name", "from", "program", "order", "by", "launch"], "question": "list all the names of programs, ordering by launch time.", "question_toks": ["list", "all", "the", "names", "of", "programs", ",", "ordering", "by", "launch", "time", "."], "dataset_name": "spider", "guid": 3023}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | Which country has the most of TV Channels? List the country and number of TV Channels it has.", "sql": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "tvshow", "query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "Country", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "Country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "question_toks": ["Which", "country", "has", "the", "most", "of", "TV", "Channels", "?", "List", "the", "country", "and", "number", "of", "TV", "Channels", "it", "has", "."], "dataset_name": "spider", "guid": 3024}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the actors who played in the latest movie by \" Quentin Tarantino \"", "sql": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;", "query_toks": ["SELECT", "t1.name", "FROM", "CAST", "AS", "t4", "JOIN", "actor", "AS", "t1", "ON", "t4.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t5", "ON", "t5.mid", "=", "t4.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t5.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t3.name", "=", "``", "Quentin", "Tarantino", "''", "ORDER", "BY", "t5.release_year", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "cast", "as", "t4", "join", "actor", "as", "t1", "on", "t4", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t5", "on", "t5", ".", "mid", "=", "t4", ".", "msid", "join", "directed_by", "as", "t2", "on", "t5", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t3", ".", "name", "=", "value", "order", "by", "t5", ".", "release_year", "desc", "limit", "value"], "question": "Find the actors who played in the latest movie by \" Quentin Tarantino \"", "question_toks": ["Find", "the", "actors", "who", "played", "in", "the", "latest", "movie", "by", "``", "Quentin", "Tarantino", "``"], "dataset_name": "spider", "guid": 3025}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Please list the countries and years of film market estimations.", "sql": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID", "example": {"db_id": "film_rank", "query": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID", "query_toks": ["SELECT", "T2.Country", ",", "T1.Year", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID"], "query_toks_no_value": ["select", "t2", ".", "country", ",", "t1", ".", "year", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id"], "question": "Please list the countries and years of film market estimations.", "question_toks": ["Please", "list", "the", "countries", "and", "years", "of", "film", "market", "estimations", "."], "dataset_name": "spider", "guid": 3026}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors who were born in \" New York City \" in 1984", "sql": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "New", "York", "City", "''", "AND", "birth_year", "=", "1984", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", "=", "value"], "question": "Find all actors who were born in \" New York City \" in 1984", "question_toks": ["Find", "all", "actors", "who", "were", "born", "in", "``", "New", "York", "City", "``", "in", "1984"], "dataset_name": "spider", "guid": 3027}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?", "sql": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"", "example": {"db_id": "film_rank", "query": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"", "query_toks": ["SELECT", "title", ",", "Studio", "FROM", "film", "WHERE", "Studio", "LIKE", "``", "%", "Universal", "%", "''"], "query_toks_no_value": ["select", "title", ",", "studio", "from", "film", "where", "studio", "like", "value"], "question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?", "question_toks": ["What", "are", "the", "titles", "and", "studios", "of", "films", "that", "have", "been", "produced", "by", "a", "studio", "whose", "name", "contains", "``", "Universal", "''", "?"], "dataset_name": "spider", "guid": 3028}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which programs' origins are not \"Beijing\"? Give me the program names.", "sql": "SELECT name FROM program WHERE origin != 'Beijing'", "example": {"db_id": "program_share", "query": "SELECT name FROM program WHERE origin != 'Beijing'", "query_toks": ["SELECT", "name", "FROM", "program", "WHERE", "origin", "!", "=", "'Beijing", "'"], "query_toks_no_value": ["select", "name", "from", "program", "where", "origin", "!", "=", "value"], "question": "Which programs' origins are not \"Beijing\"? Give me the program names.", "question_toks": ["Which", "programs", "'", "origins", "are", "not", "``", "Beijing", "''", "?", "Give", "me", "the", "program", "names", "."], "dataset_name": "spider", "guid": 3029}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Count the number of films.", "sql": "SELECT count(*) FROM film", "example": {"db_id": "film_rank", "query": "SELECT count(*) FROM film", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "film"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "film"], "question": "Count the number of films.", "question_toks": ["Count", "the", "number", "of", "films", "."], "dataset_name": "spider", "guid": 3030}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What is the list of program origins ordered alphabetically?", "sql": "SELECT origin FROM program ORDER BY origin", "example": {"db_id": "program_share", "query": "SELECT origin FROM program ORDER BY origin", "query_toks": ["SELECT", "origin", "FROM", "program", "ORDER", "BY", "origin"], "query_toks_no_value": ["select", "origin", "from", "program", "order", "by", "origin"], "question": "What is the list of program origins ordered alphabetically?", "question_toks": ["What", "is", "the", "list", "of", "program", "origins", "ordered", "alphabetically", "?"], "dataset_name": "spider", "guid": 3031}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all reviewers that have given 3 or 4 stars for reviews?", "sql": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4", "example": {"db_id": "movie_1", "query": "SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T1.stars  =  4", "query_toks": ["SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T1.stars", "=", "3", "INTERSECT", "SELECT", "T2.name", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T1.stars", "=", "4"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t1", ".", "stars", "=", "value", "intersect", "select", "t2", ".", "name", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t1", ".", "stars", "=", "value"], "question": "What are the names of all reviewers that have given 3 or 4 stars for reviews?", "question_toks": ["What", "are", "the", "names", "of", "all", "reviewers", "that", "have", "given", "3", "or", "4", "stars", "for", "reviews", "?"], "dataset_name": "spider", "guid": 3032}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | How many cartoons were written by \"Joseph Kuhr\"?", "sql": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "example": {"db_id": "tvshow", "query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Cartoon", "WHERE", "Written_by", "=", "``", "Joseph", "Kuhr", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "value"], "question": "How many cartoons were written by \"Joseph Kuhr\"?", "question_toks": ["How", "many", "cartoons", "were", "written", "by", "``", "Joseph", "Kuhr", "''", "?"], "dataset_name": "spider", "guid": 3033}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of movies featuring \" Shahab Hosseini \" ?", "sql": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Shahab", "Hosseini", "''", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "What is the number of movies featuring \" Shahab Hosseini \" ?", "question_toks": ["What", "is", "the", "number", "of", "movies", "featuring", "``", "Shahab", "Hosseini", "``", "?"], "dataset_name": "spider", "guid": 3034}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the language used least number of TV Channel. List language and number of TV Channel.", "sql": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "example": {"db_id": "tvshow", "query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "query_toks": ["SELECT", "LANGUAGE", ",", "count", "(", "*", ")", "FROM", "TV_Channel", "GROUP", "BY", "LANGUAGE", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "List the language used least number of TV Channel. List language and number of TV Channel.", "question_toks": ["List", "the", "language", "used", "least", "number", "of", "TV", "Channel", ".", "List", "language", "and", "number", "of", "TV", "Channel", "."], "dataset_name": "spider", "guid": 3035}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the titles of all movies directed by steven spielberg.", "sql": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE director = 'Steven Spielberg'", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "director", "=", "'Steven", "Spielberg", "'"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "director", "=", "value"], "question": "Find the titles of all movies directed by steven spielberg.", "question_toks": ["Find", "the", "titles", "of", "all", "movies", "directed", "by", "steven", "spielberg", "."], "dataset_name": "spider", "guid": 3036}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | What are the total number of the audiences who visited any of the festivals?", "sql": "SELECT sum(Num_of_Audience) FROM festival_detail", "example": {"db_id": "entertainment_awards", "query": "SELECT sum(Num_of_Audience) FROM festival_detail", "query_toks": ["SELECT", "sum", "(", "Num_of_Audience", ")", "FROM", "festival_detail"], "query_toks_no_value": ["select", "sum", "(", "num_of_audience", ")", "from", "festival_detail"], "question": "What are the total number of the audiences who visited any of the festivals?", "question_toks": ["What", "are", "the", "total", "number", "of", "the", "audiences", "who", "visited", "any", "of", "the", "festivals", "?"], "dataset_name": "spider", "guid": 3037}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | Please show different types of artworks with the corresponding number of artworks of each type.", "sql": "SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE", "example": {"db_id": "entertainment_awards", "query": "SELECT TYPE ,  COUNT(*) FROM artwork GROUP BY TYPE", "query_toks": ["SELECT", "TYPE", ",", "COUNT", "(", "*", ")", "FROM", "artwork", "GROUP", "BY", "TYPE"], "query_toks_no_value": ["select", "type", ",", "count", "(", "*", ")", "from", "artwork", "group", "by", "type"], "question": "Please show different types of artworks with the corresponding number of artworks of each type.", "question_toks": ["Please", "show", "different", "types", "of", "artworks", "with", "the", "corresponding", "number", "of", "artworks", "of", "each", "type", "."], "dataset_name": "spider", "guid": 3038}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "sql": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "example": {"db_id": "tvshow", "query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'", "query_toks": ["SELECT", "id", "FROM", "TV_Channel", "EXCEPT", "SELECT", "channel", "FROM", "cartoon", "WHERE", "directed_by", "=", "'Ben", "Jones", "'"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value"], "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "question_toks": ["What", "are", "the", "ids", "of", "the", "TV", "channels", "that", "do", "not", "have", "any", "cartoons", "directed", "by", "Ben", "Jones", "?"], "dataset_name": "spider", "guid": 3039}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?", "sql": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Jennifer Aniston\" AND t2.release_year  >  2010;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Jennifer Aniston\" AND t2.release_year  >  2010;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Jennifer", "Aniston", "''", "AND", "t2.release_year", ">", "2010", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "release_year", ">", "value"], "question": "What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?", "question_toks": ["What", "is", "the", "number", "of", "movies", "in", "which", "``", "Jennifer", "Aniston", "``", "acted", "after", "2010", "?"], "dataset_name": "spider", "guid": 3040}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors from Austin born after 1980", "sql": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Austin", "''", "AND", "birth_year", ">", "1980", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", ">", "value"], "question": "Find all actors from Austin born after 1980", "question_toks": ["Find", "all", "actors", "from", "Austin", "born", "after", "1980"], "dataset_name": "spider", "guid": 3041}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the content of the series Sky Radio?", "sql": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "query_toks": ["SELECT", "Content", "FROM", "TV_Channel", "WHERE", "series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "value"], "question": "What is the content of the series Sky Radio?", "question_toks": ["What", "is", "the", "content", "of", "the", "series", "Sky", "Radio", "?"], "dataset_name": "spider", "guid": 3042}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Show each location and the number of cinemas there.", "sql": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION", "example": {"db_id": "cinema", "query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION", "query_toks": ["SELECT", "LOCATION", ",", "count", "(", "*", ")", "FROM", "cinema", "GROUP", "BY", "LOCATION"], "query_toks_no_value": ["select", "location", ",", "count", "(", "*", ")", "from", "cinema", "group", "by", "location"], "question": "Show each location and the number of cinemas there.", "question_toks": ["Show", "each", "location", "and", "the", "number", "of", "cinemas", "there", "."], "dataset_name": "spider", "guid": 3043}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | How many movie reviews does each director get?", "sql": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "example": {"db_id": "movie_1", "query": "SELECT count(*) ,  T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID GROUP BY T1.director", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.director", "FROM", "Movie", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "GROUP", "BY", "T1.director"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "director", "from", "movie", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "group", "by", "t1", ".", "director"], "question": "How many movie reviews does each director get?", "question_toks": ["How", "many", "movie", "reviews", "does", "each", "director", "get", "?"], "dataset_name": "spider", "guid": 3044}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Who directed Avatar?", "sql": "SELECT director FROM Movie WHERE title  = 'Avatar'", "example": {"db_id": "movie_1", "query": "SELECT director FROM Movie WHERE title  = 'Avatar'", "query_toks": ["SELECT", "director", "FROM", "Movie", "WHERE", "title", "=", "'Avatar", "'"], "query_toks_no_value": ["select", "director", "from", "movie", "where", "title", "=", "value"], "question": "Who directed Avatar?", "question_toks": ["Who", "directed", "Avatar", "?"], "dataset_name": "spider", "guid": 3045}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find the average rating star for each movie that received at least 2 ratings.", "sql": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "example": {"db_id": "movie_1", "query": "SELECT mID ,  avg(stars) FROM Rating GROUP BY mID HAVING count(*)  >=  2", "query_toks": ["SELECT", "mID", ",", "avg", "(", "stars", ")", "FROM", "Rating", "GROUP", "BY", "mID", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "mid", ",", "avg", "(", "stars", ")", "from", "rating", "group", "by", "mid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the average rating star for each movie that received at least 2 ratings.", "question_toks": ["Find", "the", "average", "rating", "star", "for", "each", "movie", "that", "received", "at", "least", "2", "ratings", "."], "dataset_name": "spider", "guid": 3046}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What is the title of the film that has the highest high market estimation.", "sql": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "example": {"db_id": "film_rank", "query": "SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2  ON T1.Film_ID  =  T2.Film_ID ORDER BY high_estimate DESC LIMIT 1", "query_toks": ["SELECT", "t1.title", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID", "ORDER", "BY", "high_estimate", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "order", "by", "high_estimate", "desc", "limit", "value"], "question": "What is the title of the film that has the highest high market estimation.", "question_toks": ["What", "is", "the", "title", "of", "the", "film", "that", "has", "the", "highest", "high", "market", "estimation", "."], "dataset_name": "spider", "guid": 3047}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What is the list of program names, sorted by the order of launch date?", "sql": "SELECT name FROM program ORDER BY launch", "example": {"db_id": "program_share", "query": "SELECT name FROM program ORDER BY launch", "query_toks": ["SELECT", "name", "FROM", "program", "ORDER", "BY", "launch"], "query_toks_no_value": ["select", "name", "from", "program", "order", "by", "launch"], "question": "What is the list of program names, sorted by the order of launch date?", "question_toks": ["What", "is", "the", "list", "of", "program", "names", ",", "sorted", "by", "the", "order", "of", "launch", "date", "?"], "dataset_name": "spider", "guid": 3048}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What year was the movie \" The Imitation Game \" produced", "sql": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";", "example": {"db_id": "imdb", "query": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";", "query_toks": ["SELECT", "release_year", "FROM", "movie", "WHERE", "title", "=", "``", "The", "Imitation", "Game", "''", ";"], "query_toks_no_value": ["select", "release_year", "from", "movie", "where", "title", "=", "value"], "question": "What year was the movie \" The Imitation Game \" produced", "question_toks": ["What", "year", "was", "the", "movie", "``", "The", "Imitation", "Game", "``", "produced"], "dataset_name": "spider", "guid": 3049}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | What are the title and director of the films without any schedule?", "sql": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)", "example": {"db_id": "cinema", "query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)", "query_toks": ["SELECT", "title", ",", "directed_by", "FROM", "film", "WHERE", "film_id", "NOT", "IN", "(", "SELECT", "film_id", "FROM", "schedule", ")"], "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "film", "where", "film_id", "not", "in", "(", "select", "film_id", "from", "schedule", ")"], "question": "What are the title and director of the films without any schedule?", "question_toks": ["What", "are", "the", "title", "and", "director", "of", "the", "films", "without", "any", "schedule", "?"], "dataset_name": "spider", "guid": 3050}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Find the distinct locations that has a cinema.", "sql": "SELECT DISTINCT LOCATION FROM cinema", "example": {"db_id": "cinema", "query": "SELECT DISTINCT LOCATION FROM cinema", "query_toks": ["SELECT", "DISTINCT", "LOCATION", "FROM", "cinema"], "query_toks_no_value": ["select", "distinct", "location", "from", "cinema"], "question": "Find the distinct locations that has a cinema.", "question_toks": ["Find", "the", "distinct", "locations", "that", "has", "a", "cinema", "."], "dataset_name": "spider", "guid": 3051}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the low and high estimates of film markets?", "sql": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation", "example": {"db_id": "film_rank", "query": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation", "query_toks": ["SELECT", "Low_Estimate", ",", "High_Estimate", "FROM", "film_market_estimation"], "query_toks_no_value": ["select", "low_estimate", ",", "high_estimate", "from", "film_market_estimation"], "question": "What are the low and high estimates of film markets?", "question_toks": ["What", "are", "the", "low", "and", "high", "estimates", "of", "film", "markets", "?"], "dataset_name": "spider", "guid": 3052}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find the name and budget of the latest movie by \" Quentin Tarantino \"", "sql": "SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;", "query_toks": ["SELECT", "t3.budget", ",", "t3.title", "FROM", "director", "AS", "t2", "JOIN", "directed_by", "AS", "t1", "ON", "t2.did", "=", "t1.did", "JOIN", "movie", "AS", "t3", "ON", "t3.mid", "=", "t1.msid", "WHERE", "t2.name", "=", "``", "Quentin", "Tarantino", "''", "ORDER", "BY", "t3.release_year", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t3", ".", "budget", ",", "t3", ".", "title", "from", "director", "as", "t2", "join", "directed_by", "as", "t1", "on", "t2", ".", "did", "=", "t1", ".", "did", "join", "movie", "as", "t3", "on", "t3", ".", "mid", "=", "t1", ".", "msid", "where", "t2", ".", "name", "=", "value", "order", "by", "t3", ".", "release_year", "desc", "limit", "value"], "question": "Find the name and budget of the latest movie by \" Quentin Tarantino \"", "question_toks": ["Find", "the", "name", "and", "budget", "of", "the", "latest", "movie", "by", "``", "Quentin", "Tarantino", "``"], "dataset_name": "spider", "guid": 3053}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all actors who were born in 1984", "sql": "SELECT name FROM actor WHERE birth_year  =  1984;", "example": {"db_id": "imdb", "query": "SELECT name FROM actor WHERE birth_year  =  1984;", "query_toks": ["SELECT", "name", "FROM", "actor", "WHERE", "birth_year", "=", "1984", ";"], "query_toks_no_value": ["select", "name", "from", "actor", "where", "birth_year", "=", "value"], "question": "Find all actors who were born in 1984", "question_toks": ["Find", "all", "actors", "who", "were", "born", "in", "1984"], "dataset_name": "spider", "guid": 3054}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the years of film market estimation for the market of Japan, ordered by year descending?", "sql": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC", "example": {"db_id": "film_rank", "query": "SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID WHERE T2.Country  =  \"Japan\" ORDER BY T1.Year DESC", "query_toks": ["SELECT", "T1.Year", "FROM", "film_market_estimation", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "WHERE", "T2.Country", "=", "``", "Japan", "''", "ORDER", "BY", "T1.Year", "DESC"], "query_toks_no_value": ["select", "t1", ".", "year", "from", "film_market_estimation", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "where", "t2", ".", "country", "=", "value", "order", "by", "t1", ".", "year", "desc"], "question": "What are the years of film market estimation for the market of Japan, ordered by year descending?", "question_toks": ["What", "are", "the", "years", "of", "film", "market", "estimation", "for", "the", "market", "of", "Japan", ",", "ordered", "by", "year", "descending", "?"], "dataset_name": "spider", "guid": 3055}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many actors were born in \" Los Angeles \" after 2000 ?", "sql": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"Los Angeles\" AND birth_year  >  2000;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"Los Angeles\" AND birth_year  >  2000;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "name", ")", "FROM", "actor", "WHERE", "birth_city", "=", "``", "Los", "Angeles", "''", "AND", "birth_year", ">", "2000", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "actor", "where", "birth_city", "=", "value", "and", "birth_year", ">", "value"], "question": "How many actors were born in \" Los Angeles \" after 2000 ?", "question_toks": ["How", "many", "actors", "were", "born", "in", "``", "Los", "Angeles", "``", "after", "2000", "?"], "dataset_name": "spider", "guid": 3056}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the id of the reviewer whose name includes the word \"Mike\"?", "sql": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Reviewer WHERE name LIKE \"%Mike%\"", "query_toks": ["SELECT", "rID", "FROM", "Reviewer", "WHERE", "name", "LIKE", "``", "%", "Mike", "%", "''"], "query_toks_no_value": ["select", "rid", "from", "reviewer", "where", "name", "like", "value"], "question": "What is the id of the reviewer whose name includes the word \"Mike\"?", "question_toks": ["What", "is", "the", "id", "of", "the", "reviewer", "whose", "name", "includes", "the", "word", "``", "Mike", "''", "?"], "dataset_name": "spider", "guid": 3057}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What is the total rating of channel for each channel owner?", "sql": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "example": {"db_id": "program_share", "query": "SELECT sum(Rating_in_percent) ,  OWNER FROM channel GROUP BY OWNER", "query_toks": ["SELECT", "sum", "(", "Rating_in_percent", ")", ",", "OWNER", "FROM", "channel", "GROUP", "BY", "OWNER"], "query_toks_no_value": ["select", "sum", "(", "rating_in_percent", ")", ",", "owner", "from", "channel", "group", "by", "owner"], "question": "What is the total rating of channel for each channel owner?", "question_toks": ["What", "is", "the", "total", "rating", "of", "channel", "for", "each", "channel", "owner", "?"], "dataset_name": "spider", "guid": 3058}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What is the total share (in percent) of all the channels owned by CCTV?", "sql": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'", "example": {"db_id": "program_share", "query": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'", "query_toks": ["SELECT", "sum", "(", "Share_in_percent", ")", "FROM", "channel", "WHERE", "OWNER", "=", "'CCTV", "'"], "query_toks_no_value": ["select", "sum", "(", "share_in_percent", ")", "from", "channel", "where", "owner", "=", "value"], "question": "What is the total share (in percent) of all the channels owned by CCTV?", "question_toks": ["What", "is", "the", "total", "share", "(", "in", "percent", ")", "of", "all", "the", "channels", "owned", "by", "CCTV", "?"], "dataset_name": "spider", "guid": 3059}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What are all the movies featuring \" Robin Wright \" ?", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Robin", "Wright", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "What are all the movies featuring \" Robin Wright \" ?", "question_toks": ["What", "are", "all", "the", "movies", "featuring", "``", "Robin", "Wright", "``", "?"], "dataset_name": "spider", "guid": 3060}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | What are the countries for each market, ordered alphabetically?", "sql": "SELECT Country FROM market ORDER BY Country ASC", "example": {"db_id": "film_rank", "query": "SELECT Country FROM market ORDER BY Country ASC", "query_toks": ["SELECT", "Country", "FROM", "market", "ORDER", "BY", "Country", "ASC"], "query_toks_no_value": ["select", "country", "from", "market", "order", "by", "country", "asc"], "question": "What are the countries for each market, ordered alphabetically?", "question_toks": ["What", "are", "the", "countries", "for", "each", "market", ",", "ordered", "alphabetically", "?"], "dataset_name": "spider", "guid": 3061}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles of all movies that have not been rated?", "sql": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE mID NOT IN (SELECT mID FROM Rating)", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "mID", "NOT", "IN", "(", "SELECT", "mID", "FROM", "Rating", ")"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "mid", "not", "in", "(", "select", "mid", "from", "rating", ")"], "question": "What are the titles of all movies that have not been rated?", "question_toks": ["What", "are", "the", "titles", "of", "all", "movies", "that", "have", "not", "been", "rated", "?"], "dataset_name": "spider", "guid": 3062}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | find the ids of reviewers who did not give 4 star.", "sql": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "example": {"db_id": "movie_1", "query": "SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars  =  4", "query_toks": ["SELECT", "rID", "FROM", "Rating", "EXCEPT", "SELECT", "rID", "FROM", "Rating", "WHERE", "stars", "=", "4"], "query_toks_no_value": ["select", "rid", "from", "rating", "except", "select", "rid", "from", "rating", "where", "stars", "=", "value"], "question": "find the ids of reviewers who did not give 4 star.", "question_toks": ["find", "the", "ids", "of", "reviewers", "who", "did", "not", "give", "4", "star", "."], "dataset_name": "spider", "guid": 3063}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all movies made before 1980 or had James Cameron as the director?", "sql": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE director  =  \"James Cameron\" OR YEAR   <  1980", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "director", "=", "``", "James", "Cameron", "''", "OR", "YEAR", "<", "1980"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "director", "=", "value", "or", "year", "<", "value"], "question": "What are the names of all movies made before 1980 or had James Cameron as the director?", "question_toks": ["What", "are", "the", "names", "of", "all", "movies", "made", "before", "1980", "or", "had", "James", "Cameron", "as", "the", "director", "?"], "dataset_name": "spider", "guid": 3064}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies featuring \" Jason Robards \" and \" Woody Strode \"", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "CAST", "AS", "t3", "ON", "t4.mid", "=", "t3.msid", "JOIN", "actor", "AS", "t2", "ON", "t3.aid", "=", "t2.aid", "WHERE", "t1.name", "=", "``", "Woody", "Strode", "''", "AND", "t2.name", "=", "``", "Jason", "Robards", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "cast", "as", "t3", "on", "t4", ".", "mid", "=", "t3", ".", "msid", "join", "actor", "as", "t2", "on", "t3", ".", "aid", "=", "t2", ".", "aid", "where", "t1", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "Find all movies featuring \" Jason Robards \" and \" Woody Strode \"", "question_toks": ["Find", "all", "movies", "featuring", "``", "Jason", "Robards", "``", "and", "``", "Woody", "Strode", "``"], "dataset_name": "spider", "guid": 3065}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all directors who have made one movie except for the director named NULL?", "sql": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1", "example": {"db_id": "movie_1", "query": "SELECT director FROM Movie WHERE director != \"null\" GROUP BY director HAVING count(*)  =  1", "query_toks": ["SELECT", "director", "FROM", "Movie", "WHERE", "director", "!", "=", "``", "null", "''", "GROUP", "BY", "director", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "director", "from", "movie", "where", "director", "!", "=", "value", "group", "by", "director", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the names of all directors who have made one movie except for the director named NULL?", "question_toks": ["What", "are", "the", "names", "of", "all", "directors", "who", "have", "made", "one", "movie", "except", "for", "the", "director", "named", "NULL", "?"], "dataset_name": "spider", "guid": 3066}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | When was \" Kevin Spacey \" born ?", "sql": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";", "example": {"db_id": "imdb", "query": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";", "query_toks": ["SELECT", "birth_year", "FROM", "actor", "WHERE", "name", "=", "``", "actor_name0", "''", ";"], "query_toks_no_value": ["select", "birth_year", "from", "actor", "where", "name", "=", "value"], "question": "When was \" Kevin Spacey \" born ?", "question_toks": ["When", "was", "``", "Kevin", "Spacey", "``", "born", "?"], "dataset_name": "spider", "guid": 3067}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | List the names of studios that have at least two films.", "sql": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2", "example": {"db_id": "film_rank", "query": "SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Studio", "FROM", "film", "GROUP", "BY", "Studio", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "studio", "from", "film", "group", "by", "studio", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List the names of studios that have at least two films.", "question_toks": ["List", "the", "names", "of", "studios", "that", "have", "at", "least", "two", "films", "."], "dataset_name": "spider", "guid": 3068}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the lowest and highest rating star?", "sql": "SELECT max(stars) ,  min(stars) FROM Rating", "example": {"db_id": "movie_1", "query": "SELECT max(stars) ,  min(stars) FROM Rating", "query_toks": ["SELECT", "max", "(", "stars", ")", ",", "min", "(", "stars", ")", "FROM", "Rating"], "query_toks_no_value": ["select", "max", "(", "stars", ")", ",", "min", "(", "stars", ")", "from", "rating"], "question": "What is the lowest and highest rating star?", "question_toks": ["What", "is", "the", "lowest", "and", "highest", "rating", "star", "?"], "dataset_name": "spider", "guid": 3069}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which channels broadcast both in the morning and at night? Give me the channel names.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'", "example": {"db_id": "program_share", "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Night'", "query_toks": ["SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Morning", "'", "INTERSECT", "SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Night", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value", "intersect", "select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Which channels broadcast both in the morning and at night? Give me the channel names.", "question_toks": ["Which", "channels", "broadcast", "both", "in", "the", "morning", "and", "at", "night", "?", "Give", "me", "the", "channel", "names", "."], "dataset_name": "spider", "guid": 3070}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?", "sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "example": {"db_id": "movie_1", "query": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "query_toks": ["SELECT", "T3.name", ",", "T2.title", ",", "T1.stars", ",", "T1.ratingDate", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "ORDER", "BY", "T3.name", ",", "T2.title", ",", "T1.stars"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t1", ".", "ratingdate", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "order", "by", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "stars"], "question": "What is the reviewer name, film title, movie rating, and rating date  for every movie ordered by reviewer name, movie title, then finally rating?", "question_toks": ["What", "is", "the", "reviewer", "name", ",", "film", "title", ",", "movie", "rating", ",", "and", "rating", "date", "for", "every", "movie", "ordered", "by", "reviewer", "name", ",", "movie", "title", ",", "then", "finally", "rating", "?"], "dataset_name": "spider", "guid": 3071}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | Find all movies featuring \" Robin Wright \"", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Robin", "Wright", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value"], "question": "Find all movies featuring \" Robin Wright \"", "question_toks": ["Find", "all", "movies", "featuring", "``", "Robin", "Wright", "``"], "dataset_name": "spider", "guid": 3072}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles of all movies that James Cameron directed after 2000?", "sql": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "example": {"db_id": "movie_1", "query": "SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR  >  2000", "query_toks": ["SELECT", "title", "FROM", "Movie", "WHERE", "director", "=", "'James", "Cameron", "'", "AND", "YEAR", ">", "2000"], "query_toks_no_value": ["select", "title", "from", "movie", "where", "director", "=", "value", "and", "year", ">", "value"], "question": "What are the titles of all movies that James Cameron directed after 2000?", "question_toks": ["What", "are", "the", "titles", "of", "all", "movies", "that", "James", "Cameron", "directed", "after", "2000", "?"], "dataset_name": "spider", "guid": 3073}}
{"text": "festival_detail: Festival_ID, Festival_Name, Chair_Name, Location, Year, Num_of_Audience; artwork: Artwork_ID, Type, Name; nomination: Artwork_ID, Festival_ID, Result | In which year are there festivals both inside the 'United States' and outside the 'United States'?", "sql": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'", "example": {"db_id": "entertainment_awards", "query": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'", "query_toks": ["SELECT", "YEAR", "FROM", "festival_detail", "WHERE", "LOCATION", "=", "'United", "States", "'", "INTERSECT", "SELECT", "YEAR", "FROM", "festival_detail", "WHERE", "LOCATION", "!", "=", "'United", "States", "'"], "query_toks_no_value": ["select", "year", "from", "festival_detail", "where", "location", "=", "value", "intersect", "select", "year", "from", "festival_detail", "where", "location", "!", "=", "value"], "question": "In which year are there festivals both inside the 'United States' and outside the 'United States'?", "question_toks": ["In", "which", "year", "are", "there", "festivals", "both", "inside", "the", "'United", "States", "'", "and", "outside", "the", "'United", "States", "'", "?"], "dataset_name": "spider", "guid": 3074}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Who are the owners of the programs that broadcast both in the morning and at night?", "sql": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"", "example": {"db_id": "program_share", "query": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"", "query_toks": ["SELECT", "t1.owner", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "WHERE", "t2.Time_of_day", "=", "``", "Morning", "''", "INTERSECT", "SELECT", "t1.owner", "FROM", "program", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.program_id", "=", "t2.program_id", "WHERE", "t2.Time_of_day", "=", "``", "Night", "''"], "query_toks_no_value": ["select", "t1", ".", "owner", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "where", "t2", ".", "time_of_day", "=", "value", "intersect", "select", "t1", ".", "owner", "from", "program", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "program_id", "=", "t2", ".", "program_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Who are the owners of the programs that broadcast both in the morning and at night?", "question_toks": ["Who", "are", "the", "owners", "of", "the", "programs", "that", "broadcast", "both", "in", "the", "morning", "and", "at", "night", "?"], "dataset_name": "spider", "guid": 3075}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | How many movies are there that are directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \" ?", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t4.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t1.name", "=", "``", "Taraneh", "Alidoosti", "''", "AND", "t3.name", "=", "``", "Asghar", "Farhadi", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "directed_by", "as", "t2", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "How many movies are there that are directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \" ?", "question_toks": ["How", "many", "movies", "are", "there", "that", "are", "directed", "by", "``", "Asghar", "Farhadi", "``", "and", "featuring", "``", "Taraneh", "Alidoosti", "``", "?"], "dataset_name": "spider", "guid": 3076}}
{"text": "film: Film_ID, Rank_in_series, Number_in_season, Title, Directed_by, Original_air_date, Production_code; cinema: Cinema_ID, Name, Openning_year, Capacity, Location; schedule: Cinema_ID, Film_ID, Date, Show_times_per_day, Price | Give me the title and highest price for each film.", "sql": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id", "example": {"db_id": "cinema", "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id", "query_toks": ["SELECT", "T2.title", ",", "max", "(", "T1.price", ")", "FROM", "schedule", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "max", "(", "t1", ".", "price", ")", "from", "schedule", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id"], "question": "Give me the title and highest price for each film.", "question_toks": ["Give", "me", "the", "title", "and", "highest", "price", "for", "each", "film", "."], "dataset_name": "spider", "guid": 3077}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | find id of the tv channels that from the countries where have more than two tv channels.", "sql": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "example": {"db_id": "tvshow", "query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2", "query_toks": ["SELECT", "id", "FROM", "tv_channel", "GROUP", "BY", "country", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "find id of the tv channels that from the countries where have more than two tv channels.", "question_toks": ["find", "id", "of", "the", "tv", "channels", "that", "from", "the", "countries", "where", "have", "more", "than", "two", "tv", "channels", "."], "dataset_name": "spider", "guid": 3078}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played", "sql": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "example": {"db_id": "imdb", "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";", "query_toks": ["SELECT", "t4.title", "FROM", "CAST", "AS", "t5", "JOIN", "actor", "AS", "t1", "ON", "t5.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t4", "ON", "t4.mid", "=", "t5.msid", "JOIN", "directed_by", "AS", "t2", "ON", "t4.mid", "=", "t2.msid", "JOIN", "director", "AS", "t3", "ON", "t3.did", "=", "t2.did", "WHERE", "t1.name", "=", "``", "Taraneh", "Alidoosti", "''", "AND", "t3.name", "=", "``", "Asghar", "Farhadi", "''", ";"], "query_toks_no_value": ["select", "t4", ".", "title", "from", "cast", "as", "t5", "join", "actor", "as", "t1", "on", "t5", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t4", "on", "t4", ".", "mid", "=", "t5", ".", "msid", "join", "directed_by", "as", "t2", "on", "t4", ".", "mid", "=", "t2", ".", "msid", "join", "director", "as", "t3", "on", "t3", ".", "did", "=", "t2", ".", "did", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played", "question_toks": ["List", "all", "the", "movies", "directed", "by", "``", "Asghar", "Farhadi", "``", "in", "which", "``", "Taraneh", "Alidoosti", "``", "played"], "dataset_name": "spider", "guid": 3079}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.", "sql": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "example": {"db_id": "movie_1", "query": "SELECT T3.name ,  T2.title ,  T1.stars ,  T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID ORDER BY T3.name ,  T2.title ,  T1.stars", "query_toks": ["SELECT", "T3.name", ",", "T2.title", ",", "T1.stars", ",", "T1.ratingDate", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "ORDER", "BY", "T3.name", ",", "T2.title", ",", "T1.stars"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "stars", ",", "t1", ".", "ratingdate", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "order", "by", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "stars"], "question": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.", "question_toks": ["Return", "reviewer", "name", ",", "movie", "title", ",", "stars", ",", "and", "ratingDate", ".", "And", "sort", "the", "data", "first", "by", "reviewer", "name", ",", "then", "by", "movie", "title", ",", "and", "lastly", "by", "number", "of", "stars", "."], "dataset_name": "spider", "guid": 3080}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | which movie has the most number of actors from China ?", "sql": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1;", "example": {"db_id": "imdb", "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1;", "query_toks": ["SELECT", "t2.title", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.nationality", "=", "``", "China", "''", "GROUP", "BY", "t2.title", "ORDER", "BY", "COUNT", "(", "DISTINCT", "t1.name", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "nationality", "=", "value", "group", "by", "t2", ".", "title", "order", "by", "count", "(", "distinct", "t1", ".", "name", ")", "desc", "limit", "value"], "question": "which movie has the most number of actors from China ?", "question_toks": ["which", "movie", "has", "the", "most", "number", "of", "actors", "from", "China", "?"], "dataset_name": "spider", "guid": 3081}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the ids of the movies that are not reviewed by Brittany Harris.", "sql": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"", "example": {"db_id": "movie_1", "query": "SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID  =  T2.rID WHERE T2.name  =  \"Brittany Harris\"", "query_toks": ["SELECT", "mID", "FROM", "Rating", "EXCEPT", "SELECT", "T1.mID", "FROM", "Rating", "AS", "T1", "JOIN", "Reviewer", "AS", "T2", "ON", "T1.rID", "=", "T2.rID", "WHERE", "T2.name", "=", "``", "Brittany", "Harris", "''"], "query_toks_no_value": ["select", "mid", "from", "rating", "except", "select", "t1", ".", "mid", "from", "rating", "as", "t1", "join", "reviewer", "as", "t2", "on", "t1", ".", "rid", "=", "t2", ".", "rid", "where", "t2", ".", "name", "=", "value"], "question": "What are the ids of the movies that are not reviewed by Brittany Harris.", "question_toks": ["What", "are", "the", "ids", "of", "the", "movies", "that", "are", "not", "reviewed", "by", "Brittany", "Harris", "."], "dataset_name": "spider", "guid": 3082}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the names of all directors whose movies have been reviewed by Sarah Martinez?", "sql": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID JOIN Reviewer AS T3 ON T1.rID  =  T3.rID WHERE T3.name  =  'Sarah Martinez'", "query_toks": ["SELECT", "DISTINCT", "T2.director", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "JOIN", "Reviewer", "AS", "T3", "ON", "T1.rID", "=", "T3.rID", "WHERE", "T3.name", "=", "'Sarah", "Martinez", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "director", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "join", "reviewer", "as", "t3", "on", "t1", ".", "rid", "=", "t3", ".", "rid", "where", "t3", ".", "name", "=", "value"], "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?", "question_toks": ["What", "are", "the", "names", "of", "all", "directors", "whose", "movies", "have", "been", "reviewed", "by", "Sarah", "Martinez", "?"], "dataset_name": "spider", "guid": 3083}}
{"text": "actor: aid, gender, name, nationality, birth_city, birth_year; copyright: id, msid, cid; cast: id, msid, aid, role; genre: gid, genre; classification: id, msid, gid; company: id, name, country_code; director: did, gender, name, nationality, birth_city, birth_year; producer: pid, gender, name, nationality, birth_city, birth_year; directed_by: id, msid, did; keyword: id, keyword | What is the number of movies that \" Brad Pitt \" acts in per year ?", "sql": "SELECT COUNT ( DISTINCT t2.title  )  ,  t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Brad Pitt\" GROUP BY t2.release_year;", "example": {"db_id": "imdb", "query": "SELECT COUNT ( DISTINCT t2.title  )  ,  t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Brad Pitt\" GROUP BY t2.release_year;", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "t2.title", ")", ",", "t2.release_year", "FROM", "CAST", "AS", "t3", "JOIN", "actor", "AS", "t1", "ON", "t3.aid", "=", "t1.aid", "JOIN", "movie", "AS", "t2", "ON", "t2.mid", "=", "t3.msid", "WHERE", "t1.name", "=", "``", "Brad", "Pitt", "''", "GROUP", "BY", "t2.release_year", ";"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "title", ")", ",", "t2", ".", "release_year", "from", "cast", "as", "t3", "join", "actor", "as", "t1", "on", "t3", ".", "aid", "=", "t1", ".", "aid", "join", "movie", "as", "t2", "on", "t2", ".", "mid", "=", "t3", ".", "msid", "where", "t1", ".", "name", "=", "value", "group", "by", "t2", ".", "release_year"], "question": "What is the number of movies that \" Brad Pitt \" acts in per year ?", "question_toks": ["What", "is", "the", "number", "of", "movies", "that", "``", "Brad", "Pitt", "``", "acts", "in", "per", "year", "?"], "dataset_name": "spider", "guid": 3084}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What are all of the episodes ordered by ratings?", "sql": "SELECT Episode FROM TV_series ORDER BY rating", "example": {"db_id": "tvshow", "query": "SELECT Episode FROM TV_series ORDER BY rating", "query_toks": ["SELECT", "Episode", "FROM", "TV_series", "ORDER", "BY", "rating"], "query_toks_no_value": ["select", "episode", "from", "tv_series", "order", "by", "rating"], "question": "What are all of the episodes ordered by ratings?", "question_toks": ["What", "are", "all", "of", "the", "episodes", "ordered", "by", "ratings", "?"], "dataset_name": "spider", "guid": 3085}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.", "sql": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "example": {"db_id": "movie_1", "query": "SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID  =  T2.mID WHERE T2.stars  >=  4 ORDER BY T1.year", "query_toks": ["SELECT", "DISTINCT", "YEAR", "FROM", "Movie", "AS", "T1", "JOIN", "Rating", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.stars", ">", "=", "4", "ORDER", "BY", "T1.year"], "query_toks_no_value": ["select", "distinct", "year", "from", "movie", "as", "t1", "join", "rating", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "stars", ">", "=", "value", "order", "by", "t1", ".", "year"], "question": "Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.", "question_toks": ["Find", "all", "years", "that", "have", "a", "movie", "that", "received", "a", "rating", "of", "4", "or", "5", ",", "and", "sort", "them", "in", "increasing", "order", "of", "year", "."], "dataset_name": "spider", "guid": 3086}}
{"text": "film: Film_ID, Title, Studio, Director, Gross_in_dollar; market: Market_ID, Country, Number_cities; film_market_estimation: Estimation_ID, Low_Estimate, High_Estimate, Film_ID, Type, Market_ID, Year | Show the distinct director of films with market estimation in the year of 1995.", "sql": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995", "example": {"db_id": "film_rank", "query": "SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID  =  T2.Film_ID WHERE T2.Year  =  1995", "query_toks": ["SELECT", "DISTINCT", "T1.Director", "FROM", "film", "AS", "T1", "JOIN", "film_market_estimation", "AS", "T2", "ON", "T1.Film_ID", "=", "T2.Film_ID", "WHERE", "T2.Year", "=", "1995"], "query_toks_no_value": ["select", "distinct", "t1", ".", "director", "from", "film", "as", "t1", "join", "film_market_estimation", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "where", "t2", ".", "year", "=", "value"], "question": "Show the distinct director of films with market estimation in the year of 1995.", "question_toks": ["Show", "the", "distinct", "director", "of", "films", "with", "market", "estimation", "in", "the", "year", "of", "1995", "."], "dataset_name": "spider", "guid": 3087}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | How many distinct programs are broadcast at \"Night\" time?", "sql": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'", "example": {"db_id": "program_share", "query": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "program_id", ")", "FROM", "broadcast", "WHERE", "time_of_day", "=", "'Night", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "program_id", ")", "from", "broadcast", "where", "time_of_day", "=", "value"], "question": "How many distinct programs are broadcast at \"Night\" time?", "question_toks": ["How", "many", "distinct", "programs", "are", "broadcast", "at", "``", "Night", "''", "time", "?"], "dataset_name": "spider", "guid": 3088}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | When did the episode \"A Love of a Lifetime\" air?", "sql": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "example": {"db_id": "tvshow", "query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "query_toks": ["SELECT", "Air_Date", "FROM", "TV_series", "WHERE", "Episode", "=", "``", "A", "Love", "of", "a", "Lifetime", "''", ";"], "query_toks_no_value": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "value"], "question": "When did the episode \"A Love of a Lifetime\" air?", "question_toks": ["When", "did", "the", "episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "air", "?"], "dataset_name": "spider", "guid": 3089}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "sql": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "example": {"db_id": "tvshow", "query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "query_toks": ["SELECT", "T1.series_name", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T2.Title", "=", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "!", "``", ";"], "query_toks_no_value": ["select", "t1", ".", "series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t2", ".", "title", "=", "value"], "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "question_toks": ["What", "is", "the", "TV", "Channel", "that", "shows", "the", "cartoon", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "!", "''", "?", "List", "the", "TV", "Channel", "'s", "series", "name", "."], "dataset_name": "spider", "guid": 3090}}
{"text": "TV_Channel: id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, Hight_definition_TV, Pay_per_view_PPV, Package_Option; TV_series: id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers_m, Weekly_Rank, Channel; Cartoon: id, Title, Directed_by, Written_by, Original_air_date, Production_code, Channel | List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "sql": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "example": {"db_id": "tvshow", "query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "query_toks": ["SELECT", "T2.Title", "FROM", "TV_Channel", "AS", "T1", "JOIN", "Cartoon", "AS", "T2", "ON", "T1.id", "=", "T2.Channel", "WHERE", "T1.series_name", "=", "``", "Sky", "Radio", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "channel", "where", "t1", ".", "series_name", "=", "value"], "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "question_toks": ["List", "the", "title", "of", "all", "Cartoons", "showed", "on", "TV", "Channel", "with", "series", "name", "``", "Sky", "Radio", "''", "."], "dataset_name": "spider", "guid": 3091}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | Which channels are broadcast in the morning? Give me the channel names.", "sql": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", "example": {"db_id": "program_share", "query": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'", "query_toks": ["SELECT", "t1.name", "FROM", "channel", "AS", "t1", "JOIN", "broadcast", "AS", "t2", "ON", "t1.channel_id", "=", "t2.channel_id", "WHERE", "t2.time_of_day", "=", "'Morning", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "channel", "as", "t1", "join", "broadcast", "as", "t2", "on", "t1", ".", "channel_id", "=", "t2", ".", "channel_id", "where", "t2", ".", "time_of_day", "=", "value"], "question": "Which channels are broadcast in the morning? Give me the channel names.", "question_toks": ["Which", "channels", "are", "broadcast", "in", "the", "morning", "?", "Give", "me", "the", "channel", "names", "."], "dataset_name": "spider", "guid": 3092}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?", "sql": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")", "example": {"db_id": "movie_1", "query": "SELECT T2.title ,  T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T1.stars  >  (SELECT avg(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID  =  T2.mID WHERE T2.director  =  \"James Cameron\")", "query_toks": ["SELECT", "T2.title", ",", "T2.director", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T1.stars", ">", "(", "SELECT", "avg", "(", "T1.stars", ")", "FROM", "Rating", "AS", "T1", "JOIN", "Movie", "AS", "T2", "ON", "T1.mID", "=", "T2.mID", "WHERE", "T2.director", "=", "``", "James", "Cameron", "''", ")"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t2", ".", "director", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t1", ".", "stars", ">", "(", "select", "avg", "(", "t1", ".", "stars", ")", "from", "rating", "as", "t1", "join", "movie", "as", "t2", "on", "t1", ".", "mid", "=", "t2", ".", "mid", "where", "t2", ".", "director", "=", "value", ")"], "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?", "question_toks": ["What", "are", "the", "titles", "and", "directors", "of", "the", "movies", "whose", "star", "is", "greater", "than", "the", "average", "stars", "of", "the", "movies", "directed", "by", "James", "Cameron", "?"], "dataset_name": "spider", "guid": 3093}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | What is the maximum and mininum number of stars a rating can receive?", "sql": "SELECT max(stars) ,  min(stars) FROM Rating", "example": {"db_id": "movie_1", "query": "SELECT max(stars) ,  min(stars) FROM Rating", "query_toks": ["SELECT", "max", "(", "stars", ")", ",", "min", "(", "stars", ")", "FROM", "Rating"], "query_toks_no_value": ["select", "max", "(", "stars", ")", ",", "min", "(", "stars", ")", "from", "rating"], "question": "What is the maximum and mininum number of stars a rating can receive?", "question_toks": ["What", "is", "the", "maximum", "and", "mininum", "number", "of", "stars", "a", "rating", "can", "receive", "?"], "dataset_name": "spider", "guid": 3094}}
{"text": "program: Program_ID, Name, Origin, Launch, Owner; channel: Channel_ID, Name, Owner, Share_in_percent, Rating_in_percent; broadcast: Channel_ID, Program_ID, Time_of_day; broadcast_share: Channel_ID, Program_ID, Date, Share_in_percent | What is the owner of the channel that has the highest rating ratio?", "sql": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "example": {"db_id": "program_share", "query": "SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1", "query_toks": ["SELECT", "OWNER", "FROM", "channel", "ORDER", "BY", "rating_in_percent", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "owner", "from", "channel", "order", "by", "rating_in_percent", "desc", "limit", "value"], "question": "What is the owner of the channel that has the highest rating ratio?", "question_toks": ["What", "is", "the", "owner", "of", "the", "channel", "that", "has", "the", "highest", "rating", "ratio", "?"], "dataset_name": "spider", "guid": 3095}}
{"text": "Movie: mID, title, year, director; Reviewer: rID, name; Rating: rID, mID, stars, ratingDate | How many reviewers listed?", "sql": "SELECT count(*) FROM Reviewer", "example": {"db_id": "movie_1", "query": "SELECT count(*) FROM Reviewer", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Reviewer"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "reviewer"], "question": "How many reviewers listed?", "question_toks": ["How", "many", "reviewers", "listed", "?"], "dataset_name": "spider", "guid": 3096}}