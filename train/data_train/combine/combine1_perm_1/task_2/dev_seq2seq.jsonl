{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the names of customers who either have an deputy policy or uniformed policy.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"", "query_toks": ["SELECT", "DISTINCT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.policy_type_code", "=", "``", "Deputy", "''", "OR", "t1.policy_type_code", "=", "``", "Uniform", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "policy_type_code", "=", "value", "or", "t1", ".", "policy_type_code", "=", "value"], "question": "Find the names of customers who either have an deputy policy or uniformed policy.", "question_toks": ["Find", "the", "names", "of", "customers", "who", "either", "have", "an", "deputy", "policy", "or", "uniformed", "policy", "."], "dataset_name": "spider", "guid": 3432}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the name and checking balance of the account which has the lowest savings balance?", "sql": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "query_toks": ["SELECT", "T2.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T3.balance", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t3", ".", "balance", "limit", "value"], "question": "What is the name and checking balance of the account which has the lowest savings balance?", "question_toks": ["What", "is", "the", "name", "and", "checking", "balance", "of", "the", "account", "which", "has", "the", "lowest", "savings", "balance", "?"], "dataset_name": "spider", "guid": 3433}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customers whose credit score is below the average credit scores of all customers.", "sql": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "WHERE", "credit_score", "<", "(", "SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", ")"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "where", "credit_score", "<", "(", "select", "avg", "(", "credit_score", ")", "from", "customer", ")"], "question": "Find the name of customers whose credit score is below the average credit scores of all customers.", "question_toks": ["Find", "the", "name", "of", "customers", "whose", "credit", "score", "is", "below", "the", "average", "credit", "scores", "of", "all", "customers", "."], "dataset_name": "spider", "guid": 3434}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the average credit score of the customers who have some loan.", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "example": {"db_id": "loan_1", "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "query_toks": ["SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", "WHERE", "cust_id", "IN", "(", "SELECT", "cust_id", "FROM", "loan", ")"], "query_toks_no_value": ["select", "avg", "(", "credit_score", ")", "from", "customer", "where", "cust_id", "in", "(", "select", "cust_id", "from", "loan", ")"], "question": "Find the average credit score of the customers who have some loan.", "question_toks": ["Find", "the", "average", "credit", "score", "of", "the", "customers", "who", "have", "some", "loan", "."], "dataset_name": "spider", "guid": 3435}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "ORDER", "BY", "sum", "(", "T2.amount", ")"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "order", "by", "sum", "(", "t2", ".", "amount", ")"], "question": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?", "question_toks": ["What", "are", "the", "names", "of", "the", "different", "customers", "who", "have", "taken", "out", "a", "loan", ",", "ordered", "by", "the", "total", "amount", "that", "they", "have", "taken", "?"], "dataset_name": "spider", "guid": 3436}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1", "query_toks": ["SELECT", "T2.bname", "FROM", "loan", "AS", "T1", "JOIN", "bank", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "customer", "AS", "T3", "ON", "T1.cust_id", "=", "T3.cust_id", "WHERE", "T3.credit_score", "<", "100", "GROUP", "BY", "T2.bname", "ORDER", "BY", "sum", "(", "T1.amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "bname", "from", "loan", "as", "t1", "join", "bank", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "customer", "as", "t3", "on", "t1", ".", "cust_id", "=", "t3", ".", "cust_id", "where", "t3", ".", "credit_score", "<", "value", "group", "by", "t2", ".", "bname", "order", "by", "sum", "(", "t1", ".", "amount", ")", "desc", "limit", "value"], "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.", "question_toks": ["Find", "the", "name", "of", "bank", "branch", "that", "provided", "the", "greatest", "total", "amount", "of", "loans", "to", "customers", "with", "credit", "score", "is", "less", "than", "100", "."], "dataset_name": "spider", "guid": 3437}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | How many services are there?", "sql": "SELECT count(*) FROM services", "example": {"db_id": "insurance_fnol", "query": "SELECT count(*) FROM services", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "services"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "services"], "question": "How many services are there?", "question_toks": ["How", "many", "services", "are", "there", "?"], "dataset_name": "spider", "guid": 3438}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are the phone numbers of customers using the policy with the code \"Life Insurance\"?", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"", "query_toks": ["SELECT", "customer_phone", "FROM", "available_policies", "WHERE", "policy_type_code", "=", "``", "Life", "Insurance", "''"], "query_toks_no_value": ["select", "customer_phone", "from", "available_policies", "where", "policy_type_code", "=", "value"], "question": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?", "question_toks": ["What", "are", "the", "phone", "numbers", "of", "customers", "using", "the", "policy", "with", "the", "code", "``", "Life", "Insurance", "''", "?"], "dataset_name": "spider", "guid": 3439}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What is the total amount of settlement made for all the settlements?", "sql": "SELECT sum(Amount_Settled) FROM Settlements", "example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Settled) FROM Settlements", "query_toks": ["SELECT", "sum", "(", "Amount_Settled", ")", "FROM", "Settlements"], "query_toks_no_value": ["select", "sum", "(", "amount_settled", ")", "from", "settlements"], "question": "What is the total amount of settlement made for all the settlements?", "question_toks": ["What", "is", "the", "total", "amount", "of", "settlement", "made", "for", "all", "the", "settlements", "?"], "dataset_name": "spider", "guid": 3440}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the number of checking accounts for each account name.", "sql": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "example": {"db_id": "small_bank_1", "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "group", "by", "t1", ".", "name"], "question": "Find the number of checking accounts for each account name.", "question_toks": ["Find", "the", "number", "of", "checking", "accounts", "for", "each", "account", "name", "."], "dataset_name": "spider", "guid": 3441}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"", "sql": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "example": {"db_id": "insurance_fnol", "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "query_toks": ["SELECT", "t2.date_opened", ",", "t2.date_closed", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.customer_name", "LIKE", "``", "%", "Diana", "%", "''"], "query_toks_no_value": ["select", "t2", ".", "date_opened", ",", "t2", ".", "date_closed", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "like", "value"], "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"", "question_toks": ["Retrieve", "the", "open", "and", "close", "dates", "of", "all", "the", "policies", "associated", "with", "the", "customer", "whose", "name", "contains", "``", "Diana", "''"], "dataset_name": "spider", "guid": 3442}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the total and average amount paid in claim headers.", "sql": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers", "query_toks": ["SELECT", "sum", "(", "amount_piad", ")", ",", "avg", "(", "amount_piad", ")", "FROM", "claim_headers"], "query_toks_no_value": ["select", "sum", "(", "amount_piad", ")", ",", "avg", "(", "amount_piad", ")", "from", "claim_headers"], "question": "Find the total and average amount paid in claim headers.", "question_toks": ["Find", "the", "total", "and", "average", "amount", "paid", "in", "claim", "headers", "."], "dataset_name": "spider", "guid": 3443}}
{"text": "Ref_Feature_Types: feature_type_code, feature_type_name; Ref_Property_Types: property_type_code, property_type_description; Other_Available_Features: feature_id, feature_type_code, feature_name, feature_description; Properties: property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price; Other_Property_Features: property_id, feature_id, property_feature_description | What is the feature type name of feature AirCon?", "sql": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "example": {"db_id": "real_estate_properties", "query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\"", "query_toks": ["SELECT", "T2.feature_type_name", "FROM", "Other_Available_Features", "AS", "T1", "JOIN", "Ref_Feature_Types", "AS", "T2", "ON", "T1.feature_type_code", "=", "T2.feature_type_code", "WHERE", "T1.feature_name", "=", "``", "AirCon", "''"], "query_toks_no_value": ["select", "t2", ".", "feature_type_name", "from", "other_available_features", "as", "t1", "join", "ref_feature_types", "as", "t2", "on", "t1", ".", "feature_type_code", "=", "t2", ".", "feature_type_code", "where", "t1", ".", "feature_name", "=", "value"], "question": "What is the feature type name of feature AirCon?", "question_toks": ["What", "is", "the", "feature", "type", "name", "of", "feature", "AirCon", "?"], "dataset_name": "spider", "guid": 3444}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What is the ordered list of customer ids?", "sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "query_toks": ["SELECT", "customer_id", ",", "customer_name", "FROM", "customers", "ORDER", "BY", "customer_id", "ASC"], "query_toks_no_value": ["select", "customer_id", ",", "customer_name", "from", "customers", "order", "by", "customer_id", "asc"], "question": "What is the ordered list of customer ids?", "question_toks": ["What", "is", "the", "ordered", "list", "of", "customer", "ids", "?"], "dataset_name": "spider", "guid": 3445}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.claim_id", ",", "T1.date_claim_made", ",", "count", "(", "*", ")", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.claim_id", "=", "T2.claim_id", "GROUP", "BY", "T1.claim_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "claim_id", ",", "t1", ".", "date_claim_made", ",", "count", "(", "*", ")", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.", "question_toks": ["Find", "the", "claim", "id", "and", "claim", "date", "of", "the", "claim", "that", "incurred", "the", "most", "settlement", "count", ".", "Also", "tell", "me", "the", "count", "."], "dataset_name": "spider", "guid": 3446}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Count the number of different account types.", "sql": "SELECT count(DISTINCT acc_type) FROM customer", "example": {"db_id": "loan_1", "query": "SELECT count(DISTINCT acc_type) FROM customer", "query_toks": ["SELECT", "count", "(", "DISTINCT", "acc_type", ")", "FROM", "customer"], "query_toks_no_value": ["select", "count", "(", "distinct", "acc_type", ")", "from", "customer"], "question": "Count the number of different account types.", "question_toks": ["Count", "the", "number", "of", "different", "account", "types", "."], "dataset_name": "spider", "guid": 3447}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the total and average amount of settlements.", "sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "example": {"db_id": "insurance_fnol", "query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "query_toks": ["SELECT", "sum", "(", "settlement_amount", ")", ",", "avg", "(", "settlement_amount", ")", "FROM", "settlements"], "query_toks_no_value": ["select", "sum", "(", "settlement_amount", ")", ",", "avg", "(", "settlement_amount", ")", "from", "settlements"], "question": "Find the total and average amount of settlements.", "question_toks": ["Find", "the", "total", "and", "average", "amount", "of", "settlements", "."], "dataset_name": "spider", "guid": 3448}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the names of products and the number of events they are in.", "sql": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name", "example": {"db_id": "solvency_ii", "query": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name", "query_toks": ["SELECT", "T1.Product_Name", ",", "COUNT", "(", "*", ")", "FROM", "Products", "AS", "T1", "JOIN", "Products_in_Events", "AS", "T2", "ON", "T1.Product_ID", "=", "T2.Product_ID", "GROUP", "BY", "T1.Product_Name"], "query_toks_no_value": ["select", "t1", ".", "product_name", ",", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "products_in_events", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_name"], "question": "Show the names of products and the number of events they are in.", "question_toks": ["Show", "the", "names", "of", "products", "and", "the", "number", "of", "events", "they", "are", "in", "."], "dataset_name": "spider", "guid": 3449}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the names of products and the number of events they are in, sorted by the number of events in descending order.", "sql": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC", "example": {"db_id": "solvency_ii", "query": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "T1.Product_Name", ",", "COUNT", "(", "*", ")", "FROM", "Products", "AS", "T1", "JOIN", "Products_in_Events", "AS", "T2", "ON", "T1.Product_ID", "=", "T2.Product_ID", "GROUP", "BY", "T1.Product_Name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "t1", ".", "product_name", ",", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "products_in_events", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_name", "order", "by", "count", "(", "*", ")", "desc"], "question": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.", "question_toks": ["Show", "the", "names", "of", "products", "and", "the", "number", "of", "events", "they", "are", "in", ",", "sorted", "by", "the", "number", "of", "events", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 3450}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the average credit score of the customers who do not have any loan.", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)", "example": {"db_id": "loan_1", "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)", "query_toks": ["SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", "WHERE", "cust_id", "NOT", "IN", "(", "SELECT", "cust_id", "FROM", "loan", ")"], "query_toks_no_value": ["select", "avg", "(", "credit_score", ")", "from", "customer", "where", "cust_id", "not", "in", "(", "select", "cust_id", "from", "loan", ")"], "question": "Find the average credit score of the customers who do not have any loan.", "question_toks": ["Find", "the", "average", "credit", "score", "of", "the", "customers", "who", "do", "not", "have", "any", "loan", "."], "dataset_name": "spider", "guid": 3451}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of customers with checking balances lower than the average checking balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", "<", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "checking", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", "<", "(", "select", "avg", "(", "balance", ")", "from", "checking", ")"], "question": "What are the names of customers with checking balances lower than the average checking balance?", "question_toks": ["What", "are", "the", "names", "of", "customers", "with", "checking", "balances", "lower", "than", "the", "average", "checking", "balance", "?"], "dataset_name": "spider", "guid": 3452}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What is the name of the customer who has made the largest amount of claim in a single claim?", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "query_toks": ["SELECT", "t3.customer_details", "FROM", "claim_headers", "AS", "t1", "JOIN", "policies", "AS", "t2", "ON", "t1.policy_id", "=", "t2.policy_id", "JOIN", "customers", "AS", "t3", "ON", "t2.customer_id", "=", "t3.customer_id", "WHERE", "t1.amount_claimed", "=", "(", "SELECT", "max", "(", "amount_claimed", ")", "FROM", "claim_headers", ")"], "query_toks_no_value": ["select", "t3", ".", "customer_details", "from", "claim_headers", "as", "t1", "join", "policies", "as", "t2", "on", "t1", ".", "policy_id", "=", "t2", ".", "policy_id", "join", "customers", "as", "t3", "on", "t2", ".", "customer_id", "=", "t3", ".", "customer_id", "where", "t1", ".", "amount_claimed", "=", "(", "select", "max", "(", "amount_claimed", ")", "from", "claim_headers", ")"], "question": "What is the name of the customer who has made the largest amount of claim in a single claim?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "made", "the", "largest", "amount", "of", "claim", "in", "a", "single", "claim", "?"], "dataset_name": "spider", "guid": 3453}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the names of users who do not have a first notification of loss record.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "EXCEPT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "except", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "Find the names of users who do not have a first notification of loss record.", "question_toks": ["Find", "the", "names", "of", "users", "who", "do", "not", "have", "a", "first", "notification", "of", "loss", "record", "."], "dataset_name": "spider", "guid": 3454}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name and checking balance of the account with the lowest savings balance.", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T3.balance", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t3", ".", "balance", "limit", "value"], "question": "Find the name and checking balance of the account with the lowest savings balance.", "question_toks": ["Find", "the", "name", "and", "checking", "balance", "of", "the", "account", "with", "the", "lowest", "savings", "balance", "."], "dataset_name": "spider", "guid": 3455}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the names of customers whose name contains \"Diana\".", "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "WHERE", "customer_details", "LIKE", "``", "%", "Diana", "%", "''"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "where", "customer_details", "like", "value"], "question": "Find the names of customers whose name contains \"Diana\".", "question_toks": ["Find", "the", "names", "of", "customers", "whose", "name", "contains", "``", "Diana", "''", "."], "dataset_name": "spider", "guid": 3456}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name of accounts whose checking balance is higher than corresponding saving balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T2.balance", ">", "T3.balance"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t2", ".", "balance", ">", "t3", ".", "balance"], "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.", "question_toks": ["Find", "the", "name", "of", "accounts", "whose", "checking", "balance", "is", "higher", "than", "corresponding", "saving", "balance", "."], "dataset_name": "spider", "guid": 3457}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are all the phone numbers?", "sql": "SELECT customer_phone FROM available_policies", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_phone FROM available_policies", "query_toks": ["SELECT", "customer_phone", "FROM", "available_policies"], "query_toks_no_value": ["select", "customer_phone", "from", "available_policies"], "question": "What are all the phone numbers?", "question_toks": ["What", "are", "all", "the", "phone", "numbers", "?"], "dataset_name": "spider", "guid": 3458}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the policy types more than 4 customers use. Show their type code.", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "example": {"db_id": "insurance_fnol", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "query_toks": ["SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "HAVING", "count", "(", "*", ")", ">", "4"], "query_toks_no_value": ["select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the policy types more than 4 customers use. Show their type code.", "question_toks": ["Find", "the", "policy", "types", "more", "than", "4", "customers", "use", ".", "Show", "their", "type", "code", "."], "dataset_name": "spider", "guid": 3459}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the name of the customer with the worst credit score?", "sql": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "ORDER", "BY", "credit_score", "LIMIT", "1"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "order", "by", "credit_score", "limit", "value"], "question": "What is the name of the customer with the worst credit score?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "with", "the", "worst", "credit", "score", "?"], "dataset_name": "spider", "guid": 3460}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | For each account type, find the average account balance of customers with credit score lower than 50.", "sql": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type", "example": {"db_id": "loan_1", "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type", "query_toks": ["SELECT", "avg", "(", "acc_bal", ")", ",", "acc_type", "FROM", "customer", "WHERE", "credit_score", "<", "50", "GROUP", "BY", "acc_type"], "query_toks_no_value": ["select", "avg", "(", "acc_bal", ")", ",", "acc_type", "from", "customer", "where", "credit_score", "<", "value", "group", "by", "acc_type"], "question": "For each account type, find the average account balance of customers with credit score lower than 50.", "question_toks": ["For", "each", "account", "type", ",", "find", "the", "average", "account", "balance", "of", "customers", "with", "credit", "score", "lower", "than", "50", "."], "dataset_name": "spider", "guid": 3461}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Sort the customer names in alphabetical order.", "sql": "SELECT customer_details FROM customers ORDER BY customer_details", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers ORDER BY customer_details", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "ORDER", "BY", "customer_details"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "order", "by", "customer_details"], "question": "Sort the customer names in alphabetical order.", "question_toks": ["Sort", "the", "customer", "names", "in", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 3462}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the name of the bank branch that has lent the greatest amount?", "sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1", "query_toks": ["SELECT", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "GROUP", "BY", "T1.bname", "ORDER", "BY", "sum", "(", "T2.amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "group", "by", "t1", ".", "bname", "order", "by", "sum", "(", "t2", ".", "amount", ")", "desc", "limit", "value"], "question": "What is the name of the bank branch that has lent the greatest amount?", "question_toks": ["What", "is", "the", "name", "of", "the", "bank", "branch", "that", "has", "lent", "the", "greatest", "amount", "?"], "dataset_name": "spider", "guid": 3463}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers who have not taken a Mortage loan?", "sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "EXCEPT", "SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "T2.loan_type", "=", "'Mortgages", "'"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "except", "select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "t2", ".", "loan_type", "=", "value"], "question": "What are the names of customers who have not taken a Mortage loan?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "not", "taken", "a", "Mortage", "loan", "?"], "dataset_name": "spider", "guid": 3464}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.", "sql": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Type_Code FROM Products WHERE Product_Price  >  4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price  <  3000", "query_toks": ["SELECT", "Product_Type_Code", "FROM", "Products", "WHERE", "Product_Price", ">", "4500", "INTERSECT", "SELECT", "Product_Type_Code", "FROM", "Products", "WHERE", "Product_Price", "<", "3000"], "query_toks_no_value": ["select", "product_type_code", "from", "products", "where", "product_price", ">", "value", "intersect", "select", "product_type_code", "from", "products", "where", "product_price", "<", "value"], "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.", "question_toks": ["Show", "the", "product", "type", "codes", "that", "have", "both", "products", "with", "price", "higher", "than", "4500", "and", "products", "with", "price", "lower", "than", "3000", "."], "dataset_name": "spider", "guid": 3465}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are all the customer phone numbers under the most popular policy type?", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "customer_phone", "FROM", "available_policies", "WHERE", "policy_type_code", "=", "(", "SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "customer_phone", "from", "available_policies", "where", "policy_type_code", "=", "(", "select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What are all the customer phone numbers under the most popular policy type?", "question_toks": ["What", "are", "all", "the", "customer", "phone", "numbers", "under", "the", "most", "popular", "policy", "type", "?"], "dataset_name": "spider", "guid": 3466}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the state which has the most number of customers.", "sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1", "query_toks": ["SELECT", "state", "FROM", "bank", "GROUP", "BY", "state", "ORDER", "BY", "sum", "(", "no_of_customers", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "state", "from", "bank", "group", "by", "state", "order", "by", "sum", "(", "no_of_customers", ")", "desc", "limit", "value"], "question": "Find the state which has the most number of customers.", "question_toks": ["Find", "the", "state", "which", "has", "the", "most", "number", "of", "customers", "."], "dataset_name": "spider", "guid": 3467}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the total amount of loans provided by bank branches in the state of New York.", "sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", "example": {"db_id": "loan_1", "query": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", "query_toks": ["SELECT", "sum", "(", "T2.amount", ")", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T1.state", "=", "'New", "York", "'"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "amount", ")", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t1", ".", "state", "=", "value"], "question": "Find the total amount of loans provided by bank branches in the state of New York.", "question_toks": ["Find", "the", "total", "amount", "of", "loans", "provided", "by", "bank", "branches", "in", "the", "state", "of", "New", "York", "."], "dataset_name": "spider", "guid": 3468}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.", "sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )", "query_toks": ["SELECT", "Date_Claim_Made", "FROM", "Claims", "WHERE", "Amount_Settled", "<", "=", "(", "SELECT", "avg", "(", "Amount_Settled", ")", "FROM", "Claims", ")"], "query_toks_no_value": ["select", "date_claim_made", "from", "claims", "where", "amount_settled", "<", "=", "(", "select", "avg", "(", "amount_settled", ")", "from", "claims", ")"], "question": "Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.", "question_toks": ["Among", "all", "the", "claims", ",", "which", "settlements", "have", "a", "claimed", "amount", "that", "is", "no", "more", "than", "the", "average", "?", "List", "the", "claim", "start", "date", "."], "dataset_name": "spider", "guid": 3469}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What city and state is the bank with the name morningside in?", "sql": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'", "example": {"db_id": "loan_1", "query": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'", "query_toks": ["SELECT", "city", ",", "state", "FROM", "bank", "WHERE", "bname", "=", "'morningside", "'"], "query_toks_no_value": ["select", "city", ",", "state", "from", "bank", "where", "bname", "=", "value"], "question": "What city and state is the bank with the name morningside in?", "question_toks": ["What", "city", "and", "state", "is", "the", "bank", "with", "the", "name", "morningside", "in", "?"], "dataset_name": "spider", "guid": 3470}}