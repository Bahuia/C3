{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the total amount of money loaned by banks in New York state?", "sql": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", "example": {"db_id": "loan_1", "query": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'", "query_toks": ["SELECT", "sum", "(", "T2.amount", ")", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T1.state", "=", "'New", "York", "'"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "amount", ")", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t1", ".", "state", "=", "value"], "question": "What is the total amount of money loaned by banks in New York state?", "question_toks": ["What", "is", "the", "total", "amount", "of", "money", "loaned", "by", "banks", "in", "New", "York", "state", "?"], "dataset_name": "spider", "guid": 3471}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of customers with a higher checking balance than savings balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T2.balance", ">", "T3.balance"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t2", ".", "balance", ">", "t3", ".", "balance"], "question": "What are the names of customers with a higher checking balance than savings balance?", "question_toks": ["What", "are", "the", "names", "of", "customers", "with", "a", "higher", "checking", "balance", "than", "savings", "balance", "?"], "dataset_name": "spider", "guid": 3472}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What is the name of the customer who has made the minimum amount of payment in one claim?", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "query_toks": ["SELECT", "t3.customer_details", "FROM", "claim_headers", "AS", "t1", "JOIN", "policies", "AS", "t2", "ON", "t1.policy_id", "=", "t2.policy_id", "JOIN", "customers", "AS", "t3", "ON", "t2.customer_id", "=", "t3.customer_id", "WHERE", "t1.amount_piad", "=", "(", "SELECT", "min", "(", "amount_piad", ")", "FROM", "claim_headers", ")"], "query_toks_no_value": ["select", "t3", ".", "customer_details", "from", "claim_headers", "as", "t1", "join", "policies", "as", "t2", "on", "t1", ".", "policy_id", "=", "t2", ".", "policy_id", "join", "customers", "as", "t3", "on", "t2", ".", "customer_id", "=", "t3", ".", "customer_id", "where", "t1", ".", "amount_piad", "=", "(", "select", "min", "(", "amount_piad", ")", "from", "claim_headers", ")"], "question": "What is the name of the customer who has made the minimum amount of payment in one claim?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "made", "the", "minimum", "amount", "of", "payment", "in", "one", "claim", "?"], "dataset_name": "spider", "guid": 3473}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T3.balance", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t3", ".", "balance", "limit", "value"], "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?", "question_toks": ["What", "are", "the", "names", "and", "balances", "of", "checking", "accounts", "belonging", "to", "the", "customer", "with", "the", "lowest", "savings", "balance", "?"], "dataset_name": "spider", "guid": 3474}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What are the type codes of the policies used by the customer \"Dayana Robel\"?", "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"", "query_toks": ["SELECT", "policy_type_code", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t2.customer_details", "=", "``", "Dayana", "Robel", "''"], "query_toks_no_value": ["select", "policy_type_code", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_details", "=", "value"], "question": "What are the type codes of the policies used by the customer \"Dayana Robel\"?", "question_toks": ["What", "are", "the", "type", "codes", "of", "the", "policies", "used", "by", "the", "customer", "``", "Dayana", "Robel", "''", "?"], "dataset_name": "spider", "guid": 3475}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the names of all the customers and staff members.", "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "UNION", "SELECT", "staff_details", "FROM", "staff"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "union", "select", "staff_details", "from", "staff"], "question": "Find the names of all the customers and staff members.", "question_toks": ["Find", "the", "names", "of", "all", "the", "customers", "and", "staff", "members", "."], "dataset_name": "spider", "guid": 3476}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customer is associated with the latest policy?", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "query_toks": ["SELECT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.start_date", "=", "(", "SELECT", "max", "(", "start_date", ")", "FROM", "policies", ")"], "query_toks_no_value": ["select", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "start_date", "=", "(", "select", "max", "(", "start_date", ")", "from", "policies", ")"], "question": "Which customer is associated with the latest policy?", "question_toks": ["Which", "customer", "is", "associated", "with", "the", "latest", "policy", "?"], "dataset_name": "spider", "guid": 3477}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of customers with accounts, and how many checking accounts do each of them have?", "sql": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "example": {"db_id": "small_bank_1", "query": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "group", "by", "t1", ".", "name"], "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?", "question_toks": ["What", "are", "the", "names", "of", "customers", "with", "accounts", ",", "and", "how", "many", "checking", "accounts", "do", "each", "of", "them", "have", "?"], "dataset_name": "spider", "guid": 3478}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.claim_id", ",", "T1.date_claim_made", ",", "count", "(", "*", ")", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.claim_id", "=", "T2.claim_id", "GROUP", "BY", "T1.claim_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "claim_id", ",", "t1", ".", "date_claim_made", ",", "count", "(", "*", ")", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.", "question_toks": ["Which", "claim", "incurred", "the", "most", "number", "of", "settlements", "?", "List", "the", "claim", "id", ",", "the", "date", "the", "claim", "was", "made", ",", "and", "the", "number", "."], "dataset_name": "spider", "guid": 3479}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?", "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000", "query_toks": ["SELECT", "T1.cust_name", ",", "T1.acc_type", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "HAVING", "sum", "(", "T2.amount", ")", ">", "5000"], "query_toks_no_value": ["select", "t1", ".", "cust_name", ",", "t1", ".", "acc_type", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "having", "sum", "(", "t2", ".", "amount", ")", ">", "value"], "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?", "question_toks": ["What", "are", "the", "names", "and", "account", "balances", "for", "customers", "who", "have", "taken", "a", "total", "amount", "of", "more", "than", "5000", "in", "loans", "?"], "dataset_name": "spider", "guid": 3480}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "services", "AS", "t3", "ON", "t2.service_id", "=", "t3.service_id", "WHERE", "t3.service_name", "=", "``", "Close", "a", "policy", "''", "OR", "t3.service_name", "=", "``", "Upgrade", "a", "policy", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "services", "as", "t3", "on", "t2", ".", "service_id", "=", "t3", ".", "service_id", "where", "t3", ".", "service_name", "=", "value", "or", "t3", ".", "service_name", "=", "value"], "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.", "question_toks": ["Which", "customers", "have", "used", "the", "service", "named", "``", "Close", "a", "policy", "''", "or", "``", "Upgrade", "a", "policy", "''", "?", "Give", "me", "the", "customer", "names", "."], "dataset_name": "spider", "guid": 3481}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the total balance of savings accounts not belonging to someone with the name Brown?", "sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "example": {"db_id": "small_bank_1", "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "query_toks": ["SELECT", "sum", "(", "T2.balance", ")", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T1.name", "!", "=", "'Brown", "'"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "balance", ")", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t1", ".", "name", "!", "=", "value"], "question": "What is the total balance of savings accounts not belonging to someone with the name Brown?", "question_toks": ["What", "is", "the", "total", "balance", "of", "savings", "accounts", "not", "belonging", "to", "someone", "with", "the", "name", "Brown", "?"], "dataset_name": "spider", "guid": 3482}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "query_toks": ["SELECT", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T1.name", "LIKE", "'", "%", "ee", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t1", ".", "name", "like", "value"], "question": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?", "question_toks": ["What", "is", "the", "checking", "balance", "of", "the", "account", "whose", "owner\u2019s", "name", "contains", "the", "substring", "\u2018ee\u2019", "?"], "dataset_name": "spider", "guid": 3483}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of all the customers in alphabetical order?", "sql": "SELECT name FROM accounts ORDER BY name", "example": {"db_id": "small_bank_1", "query": "SELECT name FROM accounts ORDER BY name", "query_toks": ["SELECT", "name", "FROM", "accounts", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "name", "from", "accounts", "order", "by", "name"], "question": "What are the names of all the customers in alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "customers", "in", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 3484}}
{"text": "Ref_Feature_Types: feature_type_code, feature_type_name; Ref_Property_Types: property_type_code, property_type_description; Other_Available_Features: feature_id, feature_type_code, feature_name, feature_description; Properties: property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price; Other_Property_Features: property_id, feature_id, property_feature_description | Show the property type descriptions of properties belonging to that code.", "sql": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "example": {"db_id": "real_estate_properties", "query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code", "query_toks": ["SELECT", "T2.property_type_description", "FROM", "Properties", "AS", "T1", "JOIN", "Ref_Property_Types", "AS", "T2", "ON", "T1.property_type_code", "=", "T2.property_type_code", "GROUP", "BY", "T1.property_type_code"], "query_toks_no_value": ["select", "t2", ".", "property_type_description", "from", "properties", "as", "t1", "join", "ref_property_types", "as", "t2", "on", "t1", ".", "property_type_code", "=", "t2", ".", "property_type_code", "group", "by", "t1", ".", "property_type_code"], "question": "Show the property type descriptions of properties belonging to that code.", "question_toks": ["Show", "the", "property", "type", "descriptions", "of", "properties", "belonging", "to", "that", "code", "."], "dataset_name": "spider", "guid": 3485}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the type code of the most frequently used policy.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "policy_type_code", "FROM", "policies", "GROUP", "BY", "policy_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "policy_type_code", "from", "policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the type code of the most frequently used policy.", "question_toks": ["Find", "the", "type", "code", "of", "the", "most", "frequently", "used", "policy", "."], "dataset_name": "spider", "guid": 3486}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are the maximum and minimum settlement amount on record?", "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "example": {"db_id": "insurance_fnol", "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "query_toks": ["SELECT", "max", "(", "settlement_amount", ")", ",", "min", "(", "settlement_amount", ")", "FROM", "settlements"], "query_toks_no_value": ["select", "max", "(", "settlement_amount", ")", ",", "min", "(", "settlement_amount", ")", "from", "settlements"], "question": "What are the maximum and minimum settlement amount on record?", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "settlement", "amount", "on", "record", "?"], "dataset_name": "spider", "guid": 3487}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | List all customers\u2019 names in the alphabetical order.", "sql": "SELECT name FROM accounts ORDER BY name", "example": {"db_id": "small_bank_1", "query": "SELECT name FROM accounts ORDER BY name", "query_toks": ["SELECT", "name", "FROM", "accounts", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "name", "from", "accounts", "order", "by", "name"], "question": "List all customers\u2019 names in the alphabetical order.", "question_toks": ["List", "all", "customers\u2019", "names", "in", "the", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 3488}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Count the total number of available services.", "sql": "SELECT count(*) FROM services", "example": {"db_id": "insurance_fnol", "query": "SELECT count(*) FROM services", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "services"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "services"], "question": "Count the total number of available services.", "question_toks": ["Count", "the", "total", "number", "of", "available", "services", "."], "dataset_name": "spider", "guid": 3489}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name and account balance of the customers who have loans with a total amount of more than 5000.", "sql": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000", "query_toks": ["SELECT", "T1.cust_name", ",", "T1.acc_type", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "HAVING", "sum", "(", "T2.amount", ")", ">", "5000"], "query_toks_no_value": ["select", "t1", ".", "cust_name", ",", "t1", ".", "acc_type", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "having", "sum", "(", "t2", ".", "amount", ")", ">", "value"], "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.", "question_toks": ["Find", "the", "name", "and", "account", "balance", "of", "the", "customers", "who", "have", "loans", "with", "a", "total", "amount", "of", "more", "than", "5000", "."], "dataset_name": "spider", "guid": 3490}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the number of accounts with a savings balance that is higher than the average savings balance.", "sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "example": {"db_id": "small_bank_1", "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "savings", "WHERE", "balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "savings", "where", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")"], "question": "Find the number of accounts with a savings balance that is higher than the average savings balance.", "question_toks": ["Find", "the", "number", "of", "accounts", "with", "a", "savings", "balance", "that", "is", "higher", "than", "the", "average", "savings", "balance", "."], "dataset_name": "spider", "guid": 3491}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customer have the most policies? Give me the customer details.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t2.customer_details", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_details", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which customer have the most policies? Give me the customer details.", "question_toks": ["Which", "customer", "have", "the", "most", "policies", "?", "Give", "me", "the", "customer", "details", "."], "dataset_name": "spider", "guid": 3492}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the customer who started a policy most recently.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)", "query_toks": ["SELECT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.start_date", "=", "(", "SELECT", "max", "(", "start_date", ")", "FROM", "policies", ")"], "query_toks_no_value": ["select", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "start_date", "=", "(", "select", "max", "(", "start_date", ")", "from", "policies", ")"], "question": "Find the customer who started a policy most recently.", "question_toks": ["Find", "the", "customer", "who", "started", "a", "policy", "most", "recently", "."], "dataset_name": "spider", "guid": 3493}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers with credit score less than the average credit score across customers?", "sql": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "WHERE", "credit_score", "<", "(", "SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", ")"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "where", "credit_score", "<", "(", "select", "avg", "(", "credit_score", ")", "from", "customer", ")"], "question": "What are the names of customers with credit score less than the average credit score across customers?", "question_toks": ["What", "are", "the", "names", "of", "customers", "with", "credit", "score", "less", "than", "the", "average", "credit", "score", "across", "customers", "?"], "dataset_name": "spider", "guid": 3494}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1", "query_toks": ["SELECT", "Amount_Settled", ",", "Amount_Claimed", "FROM", "Claims", "ORDER", "BY", "Amount_Claimed", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "amount_settled", ",", "amount_claimed", "from", "claims", "order", "by", "amount_claimed", "desc", "limit", "value"], "question": "Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.", "question_toks": ["Among", "all", "the", "claims", ",", "what", "is", "the", "settlement", "amount", "of", "the", "claim", "with", "the", "largest", "claim", "amount", "?", "List", "both", "the", "settlement", "amount", "and", "claim", "amount", "."], "dataset_name": "spider", "guid": 3495}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?", "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "query_toks": ["SELECT", "T1.name", ",", "T3.balance", "+", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T3.balance", "<", "T2.balance"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t3", ".", "balance", "+", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t3", ".", "balance", "<", "t2", ".", "balance"], "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "a", "savings", "balance", "lower", "than", "their", "checking", "balance", ",", "and", "what", "is", "the", "total", "of", "their", "checking", "and", "savings", "balances", "?"], "dataset_name": "spider", "guid": 3496}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of the different bank branches, and what are their total loan amounts?", "sql": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname", "example": {"db_id": "loan_1", "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname", "query_toks": ["SELECT", "sum", "(", "amount", ")", ",", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "GROUP", "BY", "T1.bname"], "query_toks_no_value": ["select", "sum", "(", "amount", ")", ",", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "group", "by", "t1", ".", "bname"], "question": "What are the names of the different bank branches, and what are their total loan amounts?", "question_toks": ["What", "are", "the", "names", "of", "the", "different", "bank", "branches", ",", "and", "what", "are", "their", "total", "loan", "amounts", "?"], "dataset_name": "spider", "guid": 3497}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Return the claim start date for the claims whose claimed amount is no more than the average", "sql": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled  <=  ( SELECT avg(Amount_Settled) FROM Claims )", "query_toks": ["SELECT", "Date_Claim_Made", "FROM", "Claims", "WHERE", "Amount_Settled", "<", "=", "(", "SELECT", "avg", "(", "Amount_Settled", ")", "FROM", "Claims", ")"], "query_toks_no_value": ["select", "date_claim_made", "from", "claims", "where", "amount_settled", "<", "=", "(", "select", "avg", "(", "amount_settled", ")", "from", "claims", ")"], "question": "Return the claim start date for the claims whose claimed amount is no more than the average", "question_toks": ["Return", "the", "claim", "start", "date", "for", "the", "claims", "whose", "claimed", "amount", "is", "no", "more", "than", "the", "average"], "dataset_name": "spider", "guid": 3498}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the checking balance and saving balance in the Brown\u2019s account.", "sql": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T1.name", "=", "'Brown", "'"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t1", ".", "name", "=", "value"], "question": "Find the checking balance and saving balance in the Brown\u2019s account.", "question_toks": ["Find", "the", "checking", "balance", "and", "saving", "balance", "in", "the", "Brown\u2019s", "account", "."], "dataset_name": "spider", "guid": 3499}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | How many products are there?", "sql": "SELECT count(*) FROM Products", "example": {"db_id": "solvency_ii", "query": "SELECT count(*) FROM Products", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Products"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products"], "question": "How many products are there?", "question_toks": ["How", "many", "products", "are", "there", "?"], "dataset_name": "spider", "guid": 3500}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the claim that has the largest total settlement amount. Return the effective date of the claim.", "sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "query_toks": ["SELECT", "t1.Effective_Date", "FROM", "claims", "AS", "t1", "JOIN", "settlements", "AS", "t2", "ON", "t1.claim_id", "=", "t2.claim_id", "GROUP", "BY", "t1.claim_id", "ORDER", "BY", "sum", "(", "t2.settlement_amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "effective_date", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "order", "by", "sum", "(", "t2", ".", "settlement_amount", ")", "desc", "limit", "value"], "question": "Find the claim that has the largest total settlement amount. Return the effective date of the claim.", "question_toks": ["Find", "the", "claim", "that", "has", "the", "largest", "total", "settlement", "amount", ".", "Return", "the", "effective", "date", "of", "the", "claim", "."], "dataset_name": "spider", "guid": 3501}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Give me the the customer details and id for the customers who had two or more policies but did not file any claims.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id", "example": {"db_id": "insurance_policies", "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id", "query_toks": ["SELECT", "T1.customer_details", ",", "T1.customer_id", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.Customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2", "EXCEPT", "SELECT", "T1.customer_details", ",", "T1.customer_id", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.Customer_id", "=", "T2.customer_id", "JOIN", "Claims", "AS", "T3", "ON", "T2.policy_id", "=", "T3.policy_id"], "query_toks_no_value": ["select", "t1", ".", "customer_details", ",", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value", "except", "select", "t1", ".", "customer_details", ",", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "claims", "as", "t3", "on", "t2", ".", "policy_id", "=", "t3", ".", "policy_id"], "question": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims.", "question_toks": ["Give", "me", "the", "the", "customer", "details", "and", "id", "for", "the", "customers", "who", "had", "two", "or", "more", "policies", "but", "did", "not", "file", "any", "claims", "."], "dataset_name": "spider", "guid": 3502}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the number of different states which banks are located at.", "sql": "SELECT count(DISTINCT state) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT count(DISTINCT state) FROM bank", "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "bank"], "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "bank"], "question": "Find the number of different states which banks are located at.", "question_toks": ["Find", "the", "number", "of", "different", "states", "which", "banks", "are", "located", "at", "."], "dataset_name": "spider", "guid": 3503}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customer who has the highest amount of loans.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "ORDER", "BY", "sum", "(", "T2.amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "order", "by", "sum", "(", "t2", ".", "amount", ")", "desc", "limit", "value"], "question": "Find the name of customer who has the highest amount of loans.", "question_toks": ["Find", "the", "name", "of", "customer", "who", "has", "the", "highest", "amount", "of", "loans", "."], "dataset_name": "spider", "guid": 3504}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of bank branch that provided the greatest total amount of loans.", "sql": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1", "query_toks": ["SELECT", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "GROUP", "BY", "T1.bname", "ORDER", "BY", "sum", "(", "T2.amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "group", "by", "t1", ".", "bname", "order", "by", "sum", "(", "t2", ".", "amount", ")", "desc", "limit", "value"], "question": "Find the name of bank branch that provided the greatest total amount of loans.", "question_toks": ["Find", "the", "name", "of", "bank", "branch", "that", "provided", "the", "greatest", "total", "amount", "of", "loans", "."], "dataset_name": "spider", "guid": 3505}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which customer had at least 2 policies but did not file any claims? List the customer details and id.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id", "example": {"db_id": "insurance_policies", "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2 EXCEPT SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.customer_id JOIN Claims AS T3 ON T2.policy_id  =  T3.policy_id", "query_toks": ["SELECT", "T1.customer_details", ",", "T1.customer_id", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.Customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2", "EXCEPT", "SELECT", "T1.customer_details", ",", "T1.customer_id", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.Customer_id", "=", "T2.customer_id", "JOIN", "Claims", "AS", "T3", "ON", "T2.policy_id", "=", "T3.policy_id"], "query_toks_no_value": ["select", "t1", ".", "customer_details", ",", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value", "except", "select", "t1", ".", "customer_details", ",", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "claims", "as", "t3", "on", "t2", ".", "policy_id", "=", "t3", ".", "policy_id"], "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.", "question_toks": ["Which", "customer", "had", "at", "least", "2", "policies", "but", "did", "not", "file", "any", "claims", "?", "List", "the", "customer", "details", "and", "id", "."], "dataset_name": "spider", "guid": 3506}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1", "query_toks": ["SELECT", "Amount_Settled", ",", "Amount_Claimed", "FROM", "Claims", "ORDER", "BY", "Amount_Settled", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "amount_settled", ",", "amount_claimed", "from", "claims", "order", "by", "amount_settled", "asc", "limit", "value"], "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.", "question_toks": ["Among", "all", "the", "claims", ",", "what", "is", "the", "amount", "claimed", "in", "the", "claim", "with", "the", "least", "amount", "settled", "?", "List", "both", "the", "settlement", "amount", "and", "claim", "amount", "."], "dataset_name": "spider", "guid": 3507}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the average number of customers in all banks of Utah state.", "sql": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'", "example": {"db_id": "loan_1", "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'", "query_toks": ["SELECT", "avg", "(", "no_of_customers", ")", "FROM", "bank", "WHERE", "state", "=", "'Utah", "'"], "query_toks_no_value": ["select", "avg", "(", "no_of_customers", ")", "from", "bank", "where", "state", "=", "value"], "question": "Find the average number of customers in all banks of Utah state.", "question_toks": ["Find", "the", "average", "number", "of", "customers", "in", "all", "banks", "of", "Utah", "state", "."], "dataset_name": "spider", "guid": 3508}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Count the number of accounts.", "sql": "SELECT count(*) FROM accounts", "example": {"db_id": "small_bank_1", "query": "SELECT count(*) FROM accounts", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "accounts"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "accounts"], "question": "Count the number of accounts.", "question_toks": ["Count", "the", "number", "of", "accounts", "."], "dataset_name": "spider", "guid": 3509}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Count the total number of settlements made.", "sql": "SELECT count(*) FROM Settlements", "example": {"db_id": "insurance_policies", "query": "SELECT count(*) FROM Settlements", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Settlements"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "settlements"], "question": "Count the total number of settlements made.", "question_toks": ["Count", "the", "total", "number", "of", "settlements", "made", "."], "dataset_name": "spider", "guid": 3510}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.", "sql": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )", "example": {"db_id": "insurance_policies", "query": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )", "query_toks": ["SELECT", "T1.Date_Claim_Made", ",", "T1.Claim_id", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.Claim_id", "=", "T2.Claim_id", "GROUP", "BY", "T1.Claim_id", "HAVING", "count", "(", "*", ")", ">", "2", "UNION", "SELECT", "T1.Date_Claim_Made", ",", "T1.Claim_id", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.Claim_id", "=", "T2.Claim_id", "WHERE", "T1.Amount_Claimed", "=", "(", "SELECT", "max", "(", "Amount_Claimed", ")", "FROM", "Claims", ")"], "query_toks_no_value": ["select", "t1", ".", "date_claim_made", ",", "t1", ".", "claim_id", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "date_claim_made", ",", "t1", ".", "claim_id", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "where", "t1", ".", "amount_claimed", "=", "(", "select", "max", "(", "amount_claimed", ")", "from", "claims", ")"], "question": "Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.", "question_toks": ["Which", "claims", "caused", "more", "than", "2", "settlements", "or", "have", "the", "maximum", "claim", "value", "?", "List", "the", "date", "the", "claim", "was", "made", "and", "the", "claim", "id", "."], "dataset_name": "spider", "guid": 3511}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What is total amount claimed summed across all the claims?", "sql": "SELECT sum(Amount_Claimed) FROM Claims", "example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Claimed) FROM Claims", "query_toks": ["SELECT", "sum", "(", "Amount_Claimed", ")", "FROM", "Claims"], "query_toks_no_value": ["select", "sum", "(", "amount_claimed", ")", "from", "claims"], "question": "What is total amount claimed summed across all the claims?", "question_toks": ["What", "is", "total", "amount", "claimed", "summed", "across", "all", "the", "claims", "?"], "dataset_name": "spider", "guid": 3512}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the description of the claim status \"Open\".", "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"", "query_toks": ["SELECT", "claim_status_description", "FROM", "claims_processing_stages", "WHERE", "claim_status_name", "=", "``", "Open", "''"], "query_toks_no_value": ["select", "claim_status_description", "from", "claims_processing_stages", "where", "claim_status_name", "=", "value"], "question": "Find the description of the claim status \"Open\".", "question_toks": ["Find", "the", "description", "of", "the", "claim", "status", "``", "Open", "''", "."], "dataset_name": "spider", "guid": 3513}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1", "query_toks": ["SELECT", "T2.bname", "FROM", "loan", "AS", "T1", "JOIN", "bank", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "customer", "AS", "T3", "ON", "T1.cust_id", "=", "T3.cust_id", "WHERE", "T3.credit_score", "<", "100", "GROUP", "BY", "T2.bname", "ORDER", "BY", "sum", "(", "T1.amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "bname", "from", "loan", "as", "t1", "join", "bank", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "customer", "as", "t3", "on", "t1", ".", "cust_id", "=", "t3", ".", "cust_id", "where", "t3", ".", "credit_score", "<", "value", "group", "by", "t2", ".", "bname", "order", "by", "sum", "(", "t1", ".", "amount", ")", "desc", "limit", "value"], "question": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?", "question_toks": ["What", "is", "the", "name", "of", "the", "bank", "branch", "that", "has", "lended", "the", "largest", "total", "amount", "in", "loans", ",", "specifically", "to", "customers", "with", "credit", "scores", "below", "100", "?"], "dataset_name": "spider", "guid": 3514}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which types of policy are chosen by more than 2 customers? Give me the policy type codes.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "query_toks": ["SELECT", "policy_type_code", "FROM", "policies", "GROUP", "BY", "policy_type_code", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "policy_type_code", "from", "policies", "group", "by", "policy_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.", "question_toks": ["Which", "types", "of", "policy", "are", "chosen", "by", "more", "than", "2", "customers", "?", "Give", "me", "the", "policy", "type", "codes", "."], "dataset_name": "spider", "guid": 3515}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.", "sql": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "example": {"db_id": "small_bank_1", "query": "SELECT sum(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T1.name != 'Brown'", "query_toks": ["SELECT", "sum", "(", "T2.balance", ")", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T1.name", "!", "=", "'Brown", "'"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "balance", ")", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t1", ".", "name", "!", "=", "value"], "question": "Find the total savings balance of all accounts except the account with name \u2018Brown\u2019.", "question_toks": ["Find", "the", "total", "savings", "balance", "of", "all", "accounts", "except", "the", "account", "with", "name", "\u2018Brown\u2019", "."], "dataset_name": "spider", "guid": 3516}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | List all the customers in increasing order of IDs.", "sql": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_id ,  customer_name FROM customers ORDER BY customer_id ASC", "query_toks": ["SELECT", "customer_id", ",", "customer_name", "FROM", "customers", "ORDER", "BY", "customer_id", "ASC"], "query_toks_no_value": ["select", "customer_id", ",", "customer_name", "from", "customers", "order", "by", "customer_id", "asc"], "question": "List all the customers in increasing order of IDs.", "question_toks": ["List", "all", "the", "customers", "in", "increasing", "order", "of", "IDs", "."], "dataset_name": "spider", "guid": 3517}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the average number of bank customers?", "sql": "SELECT avg(no_of_customers) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT avg(no_of_customers) FROM bank", "query_toks": ["SELECT", "avg", "(", "no_of_customers", ")", "FROM", "bank"], "query_toks_no_value": ["select", "avg", "(", "no_of_customers", ")", "from", "bank"], "question": "What is the average number of bank customers?", "question_toks": ["What", "is", "the", "average", "number", "of", "bank", "customers", "?"], "dataset_name": "spider", "guid": 3518}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What is the effective date of the claim that has the largest amount of total settlement?", "sql": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id  =  t2.claim_id GROUP BY t1.claim_id ORDER BY sum(t2.settlement_amount) DESC LIMIT 1", "query_toks": ["SELECT", "t1.Effective_Date", "FROM", "claims", "AS", "t1", "JOIN", "settlements", "AS", "t2", "ON", "t1.claim_id", "=", "t2.claim_id", "GROUP", "BY", "t1.claim_id", "ORDER", "BY", "sum", "(", "t2.settlement_amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "effective_date", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "order", "by", "sum", "(", "t2", ".", "settlement_amount", ")", "desc", "limit", "value"], "question": "What is the effective date of the claim that has the largest amount of total settlement?", "question_toks": ["What", "is", "the", "effective", "date", "of", "the", "claim", "that", "has", "the", "largest", "amount", "of", "total", "settlement", "?"], "dataset_name": "spider", "guid": 3519}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )", "query_toks": ["SELECT", "Date_Claim_Made", ",", "Date_Claim_Settled", "FROM", "Claims", "WHERE", "Amount_Claimed", ">", "(", "SELECT", "avg", "(", "Amount_Claimed", ")", "FROM", "Claims", ")"], "query_toks_no_value": ["select", "date_claim_made", ",", "date_claim_settled", "from", "claims", "where", "amount_claimed", ">", "(", "select", "avg", "(", "amount_claimed", ")", "from", "claims", ")"], "question": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.", "question_toks": ["Give", "me", "the", "claim", "date", ",", "settlement", "date", "for", "all", "the", "claims", "whose", "claimed", "amount", "is", "larger", "than", "the", "average", "."], "dataset_name": "spider", "guid": 3520}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | For each policy type, return its type code and its count in the record.", "sql": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code", "query_toks": ["SELECT", "policy_type_code", ",", "count", "(", "*", ")", "FROM", "policies", "GROUP", "BY", "policy_type_code"], "query_toks_no_value": ["select", "policy_type_code", ",", "count", "(", "*", ")", "from", "policies", "group", "by", "policy_type_code"], "question": "For each policy type, return its type code and its count in the record.", "question_toks": ["For", "each", "policy", "type", ",", "return", "its", "type", "code", "and", "its", "count", "in", "the", "record", "."], "dataset_name": "spider", "guid": 3521}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the names of products that are in at least two events.", "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2", "example": {"db_id": "solvency_ii", "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T1.Product_Name", "FROM", "Products", "AS", "T1", "JOIN", "Products_in_Events", "AS", "T2", "ON", "T1.Product_ID", "=", "T2.Product_ID", "GROUP", "BY", "T1.Product_Name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "products_in_events", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the names of products that are in at least two events.", "question_toks": ["Show", "the", "names", "of", "products", "that", "are", "in", "at", "least", "two", "events", "."], "dataset_name": "spider", "guid": 3522}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which kind of policy type was chosen by the most customers?", "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Policy_Type_Code", "FROM", "Customer_Policies", "GROUP", "BY", "Policy_Type_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "policy_type_code", "from", "customer_policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which kind of policy type was chosen by the most customers?", "question_toks": ["Which", "kind", "of", "policy", "type", "was", "chosen", "by", "the", "most", "customers", "?"], "dataset_name": "spider", "guid": 3523}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the state, account type, and credit score of the customer whose number of loan is 0.", "sql": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0", "example": {"db_id": "loan_1", "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0", "query_toks": ["SELECT", "state", ",", "acc_type", ",", "credit_score", "FROM", "customer", "WHERE", "no_of_loans", "=", "0"], "query_toks_no_value": ["select", "state", ",", "acc_type", ",", "credit_score", "from", "customer", "where", "no_of_loans", "=", "value"], "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.", "question_toks": ["Find", "the", "state", ",", "account", "type", ",", "and", "credit", "score", "of", "the", "customer", "whose", "number", "of", "loan", "is", "0", "."], "dataset_name": "spider", "guid": 3524}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | How many settlements does each claim correspond to? List the claim id and the number of settlements.", "sql": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id", "example": {"db_id": "insurance_policies", "query": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id", "query_toks": ["SELECT", "T1.Claim_id", ",", "count", "(", "*", ")", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.claim_id", "=", "T2.claim_id", "GROUP", "BY", "T1.claim_id"], "query_toks_no_value": ["select", "t1", ".", "claim_id", ",", "count", "(", "*", ")", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id"], "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.", "question_toks": ["How", "many", "settlements", "does", "each", "claim", "correspond", "to", "?", "List", "the", "claim", "id", "and", "the", "number", "of", "settlements", "."], "dataset_name": "spider", "guid": 3525}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the number of different cities which banks are located at.", "sql": "SELECT count(DISTINCT city) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT count(DISTINCT city) FROM bank", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "bank"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "bank"], "question": "Find the number of different cities which banks are located at.", "question_toks": ["Find", "the", "number", "of", "different", "cities", "which", "banks", "are", "located", "at", "."], "dataset_name": "spider", "guid": 3526}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the total number of customers who use banks in New York City?", "sql": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'", "example": {"db_id": "loan_1", "query": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'", "query_toks": ["SELECT", "sum", "(", "no_of_customers", ")", "FROM", "bank", "WHERE", "city", "=", "'New", "York", "City", "'"], "query_toks_no_value": ["select", "sum", "(", "no_of_customers", ")", "from", "bank", "where", "city", "=", "value"], "question": "What is the total number of customers who use banks in New York City?", "question_toks": ["What", "is", "the", "total", "number", "of", "customers", "who", "use", "banks", "in", "New", "York", "City", "?"], "dataset_name": "spider", "guid": 3527}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of bank branches that provided some loans.", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "example": {"db_id": "loan_1", "query": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "query_toks": ["SELECT", "DISTINCT", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id"], "question": "Find the name of bank branches that provided some loans.", "question_toks": ["Find", "the", "name", "of", "bank", "branches", "that", "provided", "some", "loans", "."], "dataset_name": "spider", "guid": 3528}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the total checking balance in all accounts?", "sql": "SELECT sum(balance) FROM checking", "example": {"db_id": "small_bank_1", "query": "SELECT sum(balance) FROM checking", "query_toks": ["SELECT", "sum", "(", "balance", ")", "FROM", "checking"], "query_toks_no_value": ["select", "sum", "(", "balance", ")", "from", "checking"], "question": "What is the total checking balance in all accounts?", "question_toks": ["What", "is", "the", "total", "checking", "balance", "in", "all", "accounts", "?"], "dataset_name": "spider", "guid": 3529}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the prices of the products named \"Dining\" or \"Trading Policy\".", "sql": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\"", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Price FROM Products WHERE Product_Name  =  \"Dining\" OR Product_Name  =  \"Trading Policy\"", "query_toks": ["SELECT", "Product_Price", "FROM", "Products", "WHERE", "Product_Name", "=", "``", "Dining", "''", "OR", "Product_Name", "=", "``", "Trading", "Policy", "''"], "query_toks_no_value": ["select", "product_price", "from", "products", "where", "product_name", "=", "value", "or", "product_name", "=", "value"], "question": "Show the prices of the products named \"Dining\" or \"Trading Policy\".", "question_toks": ["Show", "the", "prices", "of", "the", "products", "named", "``", "Dining", "''", "or", "``", "Trading", "Policy", "''", "."], "dataset_name": "spider", "guid": 3530}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | What is the name of the product with the highest price?", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1", "query_toks": ["SELECT", "Product_Name", "FROM", "Products", "ORDER", "BY", "Product_Price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_name", "from", "products", "order", "by", "product_price", "desc", "limit", "value"], "question": "What is the name of the product with the highest price?", "question_toks": ["What", "is", "the", "name", "of", "the", "product", "with", "the", "highest", "price", "?"], "dataset_name": "spider", "guid": 3531}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers who have both savings and checking accounts?", "sql": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'saving", "'", "INTERSECT", "SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'checking", "'"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "where", "acc_type", "=", "value", "intersect", "select", "cust_name", "from", "customer", "where", "acc_type", "=", "value"], "question": "What are the names of customers who have both savings and checking accounts?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "both", "savings", "and", "checking", "accounts", "?"], "dataset_name": "spider", "guid": 3532}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are names and savings balances of the three accounts with the highest savings balances?", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "query_toks": ["SELECT", "T1.name", ",", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "ORDER", "BY", "T2.balance", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "order", "by", "t2", ".", "balance", "desc", "limit", "value"], "question": "What are names and savings balances of the three accounts with the highest savings balances?", "question_toks": ["What", "are", "names", "and", "savings", "balances", "of", "the", "three", "accounts", "with", "the", "highest", "savings", "balances", "?"], "dataset_name": "spider", "guid": 3533}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the IDs of customers whose name contains \"Diana\".", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"", "query_toks": ["SELECT", "customer_id", "FROM", "customers", "WHERE", "customer_name", "LIKE", "``", "%", "Diana", "%", "''"], "query_toks_no_value": ["select", "customer_id", "from", "customers", "where", "customer_name", "like", "value"], "question": "Find the IDs of customers whose name contains \"Diana\".", "question_toks": ["Find", "the", "IDs", "of", "customers", "whose", "name", "contains", "``", "Diana", "''", "."], "dataset_name": "spider", "guid": 3534}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | How much amount in total were claimed in the most recently created document?", "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "query_toks": ["SELECT", "sum", "(", "t1.amount_claimed", ")", "FROM", "claim_headers", "AS", "t1", "JOIN", "claims_documents", "AS", "t2", "ON", "t1.claim_header_id", "=", "t2.claim_id", "WHERE", "t2.created_date", "=", "(", "SELECT", "created_date", "FROM", "claims_documents", "ORDER", "BY", "created_date", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "amount_claimed", ")", "from", "claim_headers", "as", "t1", "join", "claims_documents", "as", "t2", "on", "t1", ".", "claim_header_id", "=", "t2", ".", "claim_id", "where", "t2", ".", "created_date", "=", "(", "select", "created_date", "from", "claims_documents", "order", "by", "created_date", "limit", "value", ")"], "question": "How much amount in total were claimed in the most recently created document?", "question_toks": ["How", "much", "amount", "in", "total", "were", "claimed", "in", "the", "most", "recently", "created", "document", "?"], "dataset_name": "spider", "guid": 3535}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the claim id and the number of settlements made for the claim with the most recent settlement date.", "sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.claim_id", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.claim_id", "=", "T2.claim_id", "GROUP", "BY", "T1.claim_id", "ORDER", "BY", "T1.Date_Claim_Settled", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "claim_id", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "order", "by", "t1", ".", "date_claim_settled", "desc", "limit", "value"], "question": "Find the claim id and the number of settlements made for the claim with the most recent settlement date.", "question_toks": ["Find", "the", "claim", "id", "and", "the", "number", "of", "settlements", "made", "for", "the", "claim", "with", "the", "most", "recent", "settlement", "date", "."], "dataset_name": "spider", "guid": 3536}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | List all the policy types used by the customer enrolled in the most policies.", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "insurance_fnol", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "DISTINCT", "t3.policy_type_code", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "available_policies", "AS", "t3", "ON", "t2.policy_id", "=", "t3.policy_id", "WHERE", "t1.customer_name", "=", "(", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t1.customer_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "distinct", "t3", ".", "policy_type_code", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "available_policies", "as", "t3", "on", "t2", ".", "policy_id", "=", "t3", ".", "policy_id", "where", "t1", ".", "customer_name", "=", "(", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "List all the policy types used by the customer enrolled in the most policies.", "question_toks": ["List", "all", "the", "policy", "types", "used", "by", "the", "customer", "enrolled", "in", "the", "most", "policies", "."], "dataset_name": "spider", "guid": 3537}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name, account type, and account balance of the customer who has the highest credit score.", "sql": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1", "query_toks": ["SELECT", "cust_name", ",", "acc_type", ",", "acc_bal", "FROM", "customer", "ORDER", "BY", "credit_score", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "cust_name", ",", "acc_type", ",", "acc_bal", "from", "customer", "order", "by", "credit_score", "desc", "limit", "value"], "question": "Find the name, account type, and account balance of the customer who has the highest credit score.", "question_toks": ["Find", "the", "name", ",", "account", "type", ",", "and", "account", "balance", "of", "the", "customer", "who", "has", "the", "highest", "credit", "score", "."], "dataset_name": "spider", "guid": 3538}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "example": {"db_id": "insurance_policies", "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "query_toks": ["SELECT", "T1.claim_id", ",", "T1.date_claim_made", ",", "T1.Date_Claim_Settled", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.Claim_id", "=", "T2.Claim_id", "GROUP", "BY", "T1.claim_id", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "claim_id", ",", "t1", ".", "date_claim_made", ",", "t1", ".", "date_claim_settled", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "having", "count", "(", "*", ")", "=", "value"], "question": "Which claims had exactly one settlement? For each, tell me the the date the claim was made, the date it was settled and the amount settled.", "question_toks": ["Which", "claims", "had", "exactly", "one", "settlement", "?", "For", "each", ",", "tell", "me", "the", "the", "date", "the", "claim", "was", "made", ",", "the", "date", "it", "was", "settled", "and", "the", "amount", "settled", "."], "dataset_name": "spider", "guid": 3539}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the names of products that are in at least two events in ascending alphabetical order of product name.", "sql": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name", "example": {"db_id": "solvency_ii", "query": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name", "query_toks": ["SELECT", "T1.Product_Name", "FROM", "Products", "AS", "T1", "JOIN", "Products_in_Events", "AS", "T2", "ON", "T1.Product_ID", "=", "T2.Product_ID", "GROUP", "BY", "T1.Product_Name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2", "ORDER", "BY", "T1.Product_Name"], "query_toks_no_value": ["select", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "products_in_events", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_name", "having", "count", "(", "*", ")", ">", "=", "value", "order", "by", "t1", ".", "product_name"], "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.", "question_toks": ["Show", "the", "names", "of", "products", "that", "are", "in", "at", "least", "two", "events", "in", "ascending", "alphabetical", "order", "of", "product", "name", "."], "dataset_name": "spider", "guid": 3540}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What is the name of the customer who has the most policies listed?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t1.customer_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the customer who has the most policies listed?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "the", "most", "policies", "listed", "?"], "dataset_name": "spider", "guid": 3541}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the checking balance of the accounts whose savings balance is higher than the average savings balance.", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "query_toks": ["SELECT", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T1.name", "IN", "(", "SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")", ")"], "query_toks_no_value": ["select", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t1", ".", "name", "in", "(", "select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")", ")"], "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.", "question_toks": ["Find", "the", "checking", "balance", "of", "the", "accounts", "whose", "savings", "balance", "is", "higher", "than", "the", "average", "savings", "balance", "."], "dataset_name": "spider", "guid": 3542}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which customer uses the most policies? Give me the customer name.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t1.customer_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which customer uses the most policies? Give me the customer name.", "question_toks": ["Which", "customer", "uses", "the", "most", "policies", "?", "Give", "me", "the", "customer", "name", "."], "dataset_name": "spider", "guid": 3543}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the name of the customer who has greatest total loan amount?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "ORDER", "BY", "sum", "(", "T2.amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "order", "by", "sum", "(", "t2", ".", "amount", ")", "desc", "limit", "value"], "question": "What is the name of the customer who has greatest total loan amount?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "greatest", "total", "loan", "amount", "?"], "dataset_name": "spider", "guid": 3544}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What are the claim dates and settlement dates of all the settlements?", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements", "query_toks": ["SELECT", "Date_Claim_Made", ",", "Date_Claim_Settled", "FROM", "Settlements"], "query_toks_no_value": ["select", "date_claim_made", ",", "date_claim_settled", "from", "settlements"], "question": "What are the claim dates and settlement dates of all the settlements?", "question_toks": ["What", "are", "the", "claim", "dates", "and", "settlement", "dates", "of", "all", "the", "settlements", "?"], "dataset_name": "spider", "guid": 3545}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T2.balance", "+", "T3.balance", "DESC"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t2", ".", "balance", "+", "t3", ".", "balance", "desc"], "question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?", "question_toks": ["What", "are", "the", "names", ",", "checking", "balances", ",", "and", "savings", "balances", "of", "customers", ",", "ordered", "by", "the", "total", "of", "checking", "and", "savings", "balances", "descending", "?"], "dataset_name": "spider", "guid": 3546}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What is the total amount of payment?", "sql": "SELECT sum(Amount_Payment) FROM Payments", "example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Payment) FROM Payments", "query_toks": ["SELECT", "sum", "(", "Amount_Payment", ")", "FROM", "Payments"], "query_toks_no_value": ["select", "sum", "(", "amount_payment", ")", "from", "payments"], "question": "What is the total amount of payment?", "question_toks": ["What", "is", "the", "total", "amount", "of", "payment", "?"], "dataset_name": "spider", "guid": 3547}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | List the name of all different customers who have some loan sorted by their total loan amount.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "ORDER", "BY", "sum", "(", "T2.amount", ")"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "order", "by", "sum", "(", "t2", ".", "amount", ")"], "question": "List the name of all different customers who have some loan sorted by their total loan amount.", "question_toks": ["List", "the", "name", "of", "all", "different", "customers", "who", "have", "some", "loan", "sorted", "by", "their", "total", "loan", "amount", "."], "dataset_name": "spider", "guid": 3548}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customer made the smallest amount of claim in one claim? Return the customer details.", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)", "query_toks": ["SELECT", "t3.customer_details", "FROM", "claim_headers", "AS", "t1", "JOIN", "policies", "AS", "t2", "ON", "t1.policy_id", "=", "t2.policy_id", "JOIN", "customers", "AS", "t3", "ON", "t2.customer_id", "=", "t3.customer_id", "WHERE", "t1.amount_piad", "=", "(", "SELECT", "min", "(", "amount_piad", ")", "FROM", "claim_headers", ")"], "query_toks_no_value": ["select", "t3", ".", "customer_details", "from", "claim_headers", "as", "t1", "join", "policies", "as", "t2", "on", "t1", ".", "policy_id", "=", "t2", ".", "policy_id", "join", "customers", "as", "t3", "on", "t2", ".", "customer_id", "=", "t3", ".", "customer_id", "where", "t1", ".", "amount_piad", "=", "(", "select", "min", "(", "amount_piad", ")", "from", "claim_headers", ")"], "question": "Which customer made the smallest amount of claim in one claim? Return the customer details.", "question_toks": ["Which", "customer", "made", "the", "smallest", "amount", "of", "claim", "in", "one", "claim", "?", "Return", "the", "customer", "details", "."], "dataset_name": "spider", "guid": 3549}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Count the total number of policies used by the customer named \"Dayana Robel\".", "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"", "example": {"db_id": "insurance_fnol", "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.customer_name", "=", "``", "Dayana", "Robel", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Count the total number of policies used by the customer named \"Dayana Robel\".", "question_toks": ["Count", "the", "total", "number", "of", "policies", "used", "by", "the", "customer", "named", "``", "Dayana", "Robel", "''", "."], "dataset_name": "spider", "guid": 3550}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the total amount claimed in the most recently created document.", "sql": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT sum(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id  =  t2.claim_id WHERE t2.created_date  =  (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1)", "query_toks": ["SELECT", "sum", "(", "t1.amount_claimed", ")", "FROM", "claim_headers", "AS", "t1", "JOIN", "claims_documents", "AS", "t2", "ON", "t1.claim_header_id", "=", "t2.claim_id", "WHERE", "t2.created_date", "=", "(", "SELECT", "created_date", "FROM", "claims_documents", "ORDER", "BY", "created_date", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "amount_claimed", ")", "from", "claim_headers", "as", "t1", "join", "claims_documents", "as", "t2", "on", "t1", ".", "claim_header_id", "=", "t2", ".", "claim_id", "where", "t2", ".", "created_date", "=", "(", "select", "created_date", "from", "claims_documents", "order", "by", "created_date", "limit", "value", ")"], "question": "Find the total amount claimed in the most recently created document.", "question_toks": ["Find", "the", "total", "amount", "claimed", "in", "the", "most", "recently", "created", "document", "."], "dataset_name": "spider", "guid": 3551}}