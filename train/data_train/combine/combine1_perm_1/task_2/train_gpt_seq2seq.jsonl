{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which customers do not have any policies? Find the details of these customers.", "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id", "example": {"db_id": "insurance_policies", "query": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id", "query_toks": ["SELECT", "customer_details", "FROM", "Customers", "EXCEPT", "SELECT", "T1.customer_details", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "except", "select", "t1", ".", "customer_details", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "Which customers do not have any policies? Find the details of these customers.", "question_toks": ["Which", "customers", "do", "not", "have", "any", "policies", "?", "Find", "the", "details", "of", "these", "customers", "."], "dataset_name": "spider", "guid": 3273}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | For each state, find the total account balance of customers whose credit score is above 100.", "sql": "SELECT sum(acc_bal) , state FROM customer WHERE credit_score > 100 GROUP BY state", "example": {"db_id": "loan_1", "query": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state", "query_toks": ["SELECT", "sum", "(", "acc_bal", ")", ",", "state", "FROM", "customer", "WHERE", "credit_score", ">", "100", "GROUP", "BY", "state"], "query_toks_no_value": ["select", "sum", "(", "acc_bal", ")", ",", "state", "from", "customer", "where", "credit_score", ">", "value", "group", "by", "state"], "question": "For each state, find the total account balance of customers whose credit score is above 100.", "question_toks": ["For", "each", "state", ",", "find", "the", "total", "account", "balance", "of", "customers", "whose", "credit", "score", "is", "above", "100", "."], "dataset_name": "spider", "guid": 3274}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the saving balance of the account with the highest checking balance.", "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1", "query_toks": ["SELECT", "T3.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T2.balance", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t2", ".", "balance", "desc", "limit", "value"], "question": "Find the saving balance of the account with the highest checking balance.", "question_toks": ["Find", "the", "saving", "balance", "of", "the", "account", "with", "the", "highest", "checking", "balance", "."], "dataset_name": "spider", "guid": 3275}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the city and state of the bank branch named morningside.", "sql": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'", "example": {"db_id": "loan_1", "query": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'", "query_toks": ["SELECT", "city", ",", "state", "FROM", "bank", "WHERE", "bname", "=", "'morningside", "'"], "query_toks_no_value": ["select", "city", ",", "state", "from", "bank", "where", "bname", "=", "value"], "question": "Find the city and state of the bank branch named morningside.", "question_toks": ["Find", "the", "city", "and", "state", "of", "the", "bank", "branch", "named", "morningside", "."], "dataset_name": "spider", "guid": 3276}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the total account balances for each customer from Utah or Texas?", "sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'", "example": {"db_id": "loan_1", "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'", "query_toks": ["SELECT", "sum", "(", "acc_bal", ")", "FROM", "customer", "WHERE", "state", "=", "'Utah", "'", "OR", "state", "=", "'Texas", "'"], "query_toks_no_value": ["select", "sum", "(", "acc_bal", ")", "from", "customer", "where", "state", "=", "value", "or", "state", "=", "value"], "question": "What are the total account balances for each customer from Utah or Texas?", "question_toks": ["What", "are", "the", "total", "account", "balances", "for", "each", "customer", "from", "Utah", "or", "Texas", "?"], "dataset_name": "spider", "guid": 3277}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show different type codes of products and the number of products with each type code.", "sql": "SELECT Product_Type_Code, COUNT(*) FROM Products GROUP BY Product_Type_Code", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Type_Code ,  COUNT(*) FROM Products GROUP BY Product_Type_Code", "query_toks": ["SELECT", "Product_Type_Code", ",", "COUNT", "(", "*", ")", "FROM", "Products", "GROUP", "BY", "Product_Type_Code"], "query_toks_no_value": ["select", "product_type_code", ",", "count", "(", "*", ")", "from", "products", "group", "by", "product_type_code"], "question": "Show different type codes of products and the number of products with each type code.", "question_toks": ["Show", "different", "type", "codes", "of", "products", "and", "the", "number", "of", "products", "with", "each", "type", "code", "."], "dataset_name": "spider", "guid": 3278}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the name of services that have been used for more than 2 times in first notification of loss.", "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count(*) > 2", "example": {"db_id": "insurance_fnol", "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "query_toks": ["SELECT", "t2.service_name", "FROM", "first_notification_of_loss", "AS", "t1", "JOIN", "services", "AS", "t2", "ON", "t1.service_id", "=", "t2.service_id", "GROUP", "BY", "t1.service_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t2", ".", "service_name", "from", "first_notification_of_loss", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_id", "=", "t2", ".", "service_id", "group", "by", "t1", ".", "service_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of services that have been used for more than 2 times in first notification of loss.", "question_toks": ["Find", "the", "name", "of", "services", "that", "have", "been", "used", "for", "more", "than", "2", "times", "in", "first", "notification", "of", "loss", "."], "dataset_name": "spider", "guid": 3279}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name of accounts whose checking balance is below the average checking balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", "<", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "checking", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", "<", "(", "select", "avg", "(", "balance", ")", "from", "checking", ")"], "question": "Find the name of accounts whose checking balance is below the average checking balance.", "question_toks": ["Find", "the", "name", "of", "accounts", "whose", "checking", "balance", "is", "below", "the", "average", "checking", "balance", "."], "dataset_name": "spider", "guid": 3280}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which Payments were processed with Visa? List the payment Id, the date and the amount.", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "query_toks": ["SELECT", "Payment_ID", ",", "Date_Payment_Made", ",", "Amount_Payment", "FROM", "Payments", "WHERE", "Payment_Method_Code", "=", "'Visa", "'"], "query_toks_no_value": ["select", "payment_id", ",", "date_payment_made", ",", "amount_payment", "from", "payments", "where", "payment_method_code", "=", "value"], "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.", "question_toks": ["Which", "Payments", "were", "processed", "with", "Visa", "?", "List", "the", "payment", "Id", ",", "the", "date", "and", "the", "amount", "."], "dataset_name": "spider", "guid": 3281}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are the customer phone numbers under the policy \"Life Insurance\"?", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  \"Life Insurance\"", "query_toks": ["SELECT", "customer_phone", "FROM", "available_policies", "WHERE", "policy_type_code", "=", "``", "Life", "Insurance", "''"], "query_toks_no_value": ["select", "customer_phone", "from", "available_policies", "where", "policy_type_code", "=", "value"], "question": "What are the customer phone numbers under the policy \"Life Insurance\"?", "question_toks": ["What", "are", "the", "customer", "phone", "numbers", "under", "the", "policy", "``", "Life", "Insurance", "''", "?"], "dataset_name": "spider", "guid": 3282}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What are all the distinct details of the customers?", "sql": "SELECT DISTINCT customer_details FROM Customers", "example": {"db_id": "insurance_policies", "query": "SELECT DISTINCT customer_details FROM Customers", "query_toks": ["SELECT", "DISTINCT", "customer_details", "FROM", "Customers"], "query_toks_no_value": ["select", "distinct", "customer_details", "from", "customers"], "question": "What are all the distinct details of the customers?", "question_toks": ["What", "are", "all", "the", "distinct", "details", "of", "the", "customers", "?"], "dataset_name": "spider", "guid": 3283}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What is the description of the claim status \"Open\"?", "sql": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = \"Open\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"", "query_toks": ["SELECT", "claim_status_description", "FROM", "claims_processing_stages", "WHERE", "claim_status_name", "=", "``", "Open", "''"], "query_toks_no_value": ["select", "claim_status_description", "from", "claims_processing_stages", "where", "claim_status_name", "=", "value"], "question": "What is the description of the claim status \"Open\"?", "question_toks": ["What", "is", "the", "description", "of", "the", "claim", "status", "``", "Open", "''", "?"], "dataset_name": "spider", "guid": 3284}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | How many accounts have a savings balance above the average savings balance?", "sql": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "example": {"db_id": "small_bank_1", "query": "SELECT count(*) FROM savings WHERE balance  >  (SELECT avg(balance) FROM savings)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "savings", "WHERE", "balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "savings", "where", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")"], "question": "How many accounts have a savings balance above the average savings balance?", "question_toks": ["How", "many", "accounts", "have", "a", "savings", "balance", "above", "the", "average", "savings", "balance", "?"], "dataset_name": "spider", "guid": 3285}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | List the method, date and amount of all the payments, in ascending order of date.", "sql": "SELECT Payment_Method_Code , Date_Payment_Made , Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "query_toks": ["SELECT", "Payment_Method_Code", ",", "Date_Payment_Made", ",", "Amount_Payment", "FROM", "Payments", "ORDER", "BY", "Date_Payment_Made", "ASC"], "query_toks_no_value": ["select", "payment_method_code", ",", "date_payment_made", ",", "amount_payment", "from", "payments", "order", "by", "date_payment_made", "asc"], "question": "List the method, date and amount of all the payments, in ascending order of date.", "question_toks": ["List", "the", "method", ",", "date", "and", "amount", "of", "all", "the", "payments", ",", "in", "ascending", "order", "of", "date", "."], "dataset_name": "spider", "guid": 3286}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are all the policy types of the customer named \"Dayana Robel\"?", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"", "example": {"db_id": "insurance_fnol", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"", "query_toks": ["SELECT", "DISTINCT", "t3.policy_type_code", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "available_policies", "AS", "t3", "ON", "t2.policy_id", "=", "t3.policy_id", "WHERE", "t1.customer_name", "=", "``", "Dayana", "Robel", "''"], "query_toks_no_value": ["select", "distinct", "t3", ".", "policy_type_code", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "available_policies", "as", "t3", "on", "t2", ".", "policy_id", "=", "t3", ".", "policy_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "What are all the policy types of the customer named \"Dayana Robel\"?", "question_toks": ["What", "are", "all", "the", "policy", "types", "of", "the", "customer", "named", "``", "Dayana", "Robel", "''", "?"], "dataset_name": "spider", "guid": 3287}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the total claimed amount of all the claims.", "sql": "SELECT SUM(amount_claimed) FROM Claims", "example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Claimed) FROM Claims", "query_toks": ["SELECT", "sum", "(", "Amount_Claimed", ")", "FROM", "Claims"], "query_toks_no_value": ["select", "sum", "(", "amount_claimed", ")", "from", "claims"], "question": "Find the total claimed amount of all the claims.", "question_toks": ["Find", "the", "total", "claimed", "amount", "of", "all", "the", "claims", "."], "dataset_name": "spider", "guid": 3288}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the total number of customers across banks?", "sql": "SELECT sum(no_of_customers) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT sum(no_of_customers) FROM bank", "query_toks": ["SELECT", "sum", "(", "no_of_customers", ")", "FROM", "bank"], "query_toks_no_value": ["select", "sum", "(", "no_of_customers", ")", "from", "bank"], "question": "What is the total number of customers across banks?", "question_toks": ["What", "is", "the", "total", "number", "of", "customers", "across", "banks", "?"], "dataset_name": "spider", "guid": 3289}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | List the names of all the customers in alphabetical order.", "sql": "SELECT customer_details FROM customers ORDER BY customer_details", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers ORDER BY customer_details", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "ORDER", "BY", "customer_details"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "order", "by", "customer_details"], "question": "List the names of all the customers in alphabetical order.", "question_toks": ["List", "the", "names", "of", "all", "the", "customers", "in", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 3290}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find all the policy types that are used by more than 2 customers.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING count(*)  >  2", "query_toks": ["SELECT", "policy_type_code", "FROM", "policies", "GROUP", "BY", "policy_type_code", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "policy_type_code", "from", "policies", "group", "by", "policy_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find all the policy types that are used by more than 2 customers.", "question_toks": ["Find", "all", "the", "policy", "types", "that", "are", "used", "by", "more", "than", "2", "customers", "."], "dataset_name": "spider", "guid": 3291}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Count the number of bank branches.", "sql": "SELECT count(*) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT count(*) FROM bank", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "bank"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "bank"], "question": "Count the number of bank branches.", "question_toks": ["Count", "the", "number", "of", "bank", "branches", "."], "dataset_name": "spider", "guid": 3292}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of all customers, ordered by account balance?", "sql": "SELECT cust_name FROM customer ORDER BY acc_bal", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer ORDER BY acc_bal", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "ORDER", "BY", "acc_bal"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "order", "by", "acc_bal"], "question": "What are the names of all customers, ordered by account balance?", "question_toks": ["What", "are", "the", "names", "of", "all", "customers", ",", "ordered", "by", "account", "balance", "?"], "dataset_name": "spider", "guid": 3293}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Settled ASC LIMIT 1", "query_toks": ["SELECT", "Amount_Settled", ",", "Amount_Claimed", "FROM", "Claims", "ORDER", "BY", "Amount_Settled", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "amount_settled", ",", "amount_claimed", "from", "claims", "order", "by", "amount_settled", "asc", "limit", "value"], "question": "Find the claimed amount in the claim with the least amount settled. Show both the settlement amount and claim amount.", "question_toks": ["Find", "the", "claimed", "amount", "in", "the", "claim", "with", "the", "least", "amount", "settled", ".", "Show", "both", "the", "settlement", "amount", "and", "claim", "amount", "."], "dataset_name": "spider", "guid": 3294}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Tell me the the date when the first claim was made.", "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "query_toks": ["SELECT", "Date_Claim_Made", "FROM", "Claims", "ORDER", "BY", "Date_Claim_Made", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "date_claim_made", "from", "claims", "order", "by", "date_claim_made", "asc", "limit", "value"], "question": "Tell me the the date when the first claim was made.", "question_toks": ["Tell", "me", "the", "the", "date", "when", "the", "first", "claim", "was", "made", "."], "dataset_name": "spider", "guid": 3295}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of customers with accounts, and what are the total savings balances for each?", "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "example": {"db_id": "small_bank_1", "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "query_toks": ["SELECT", "sum", "(", "T2.balance", ")", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "balance", ")", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "group", "by", "t1", ".", "name"], "question": "What are the names of customers with accounts, and what are the total savings balances for each?", "question_toks": ["What", "are", "the", "names", "of", "customers", "with", "accounts", ",", "and", "what", "are", "the", "total", "savings", "balances", "for", "each", "?"], "dataset_name": "spider", "guid": 3296}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are all the policy types of the customer that has the most policies listed?", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "insurance_fnol", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_name ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "DISTINCT", "t3.policy_type_code", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "available_policies", "AS", "t3", "ON", "t2.policy_id", "=", "t3.policy_id", "WHERE", "t1.customer_name", "=", "(", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t1.customer_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "distinct", "t3", ".", "policy_type_code", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "available_policies", "as", "t3", "on", "t2", ".", "policy_id", "=", "t3", ".", "policy_id", "where", "t1", ".", "customer_name", "=", "(", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What are all the policy types of the customer that has the most policies listed?", "question_toks": ["What", "are", "all", "the", "policy", "types", "of", "the", "customer", "that", "has", "the", "most", "policies", "listed", "?"], "dataset_name": "spider", "guid": 3297}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which policy type has the most records in the database?", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_fnol", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which policy type has the most records in the database?", "question_toks": ["Which", "policy", "type", "has", "the", "most", "records", "in", "the", "database", "?"], "dataset_name": "spider", "guid": 3298}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names and account balances of customers with the letter a in their names?", "sql": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'", "example": {"db_id": "loan_1", "query": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'", "query_toks": ["SELECT", "cust_name", ",", "acc_bal", "FROM", "customer", "WHERE", "cust_name", "LIKE", "'", "%", "a", "%", "'"], "query_toks_no_value": ["select", "cust_name", ",", "acc_bal", "from", "customer", "where", "cust_name", "like", "value"], "question": "What are the names and account balances of customers with the letter a in their names?", "question_toks": ["What", "are", "the", "names", "and", "account", "balances", "of", "customers", "with", "the", "letter", "a", "in", "their", "names", "?"], "dataset_name": "spider", "guid": 3299}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the total balance across checking accounts.", "sql": "SELECT SUM(balance) FROM checking", "example": {"db_id": "small_bank_1", "query": "SELECT sum(balance) FROM checking", "query_toks": ["SELECT", "sum", "(", "balance", ")", "FROM", "checking"], "query_toks_no_value": ["select", "sum", "(", "balance", ")", "from", "checking"], "question": "Find the total balance across checking accounts.", "question_toks": ["Find", "the", "total", "balance", "across", "checking", "accounts", "."], "dataset_name": "spider", "guid": 3300}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What is the name of the claim processing stage that most of the claims are on?", "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.claim_status_name", "FROM", "claims_processing", "AS", "t1", "JOIN", "claims_processing_stages", "AS", "t2", "ON", "t1.claim_stage_id", "=", "t2.claim_stage_id", "GROUP", "BY", "t1.claim_stage_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "claim_status_name", "from", "claims_processing", "as", "t1", "join", "claims_processing_stages", "as", "t2", "on", "t1", ".", "claim_stage_id", "=", "t2", ".", "claim_stage_id", "group", "by", "t1", ".", "claim_stage_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the claim processing stage that most of the claims are on?", "question_toks": ["What", "is", "the", "name", "of", "the", "claim", "processing", "stage", "that", "most", "of", "the", "claims", "are", "on", "?"], "dataset_name": "spider", "guid": 3301}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customers who do not have an saving account.", "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "EXCEPT", "SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'saving", "'"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "except", "select", "cust_name", "from", "customer", "where", "acc_type", "=", "value"], "question": "Find the name of customers who do not have an saving account.", "question_toks": ["Find", "the", "name", "of", "customers", "who", "do", "not", "have", "an", "saving", "account", "."], "dataset_name": "spider", "guid": 3302}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the average account balance of customers with credit score below 50 for the different account types?", "sql": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type", "example": {"db_id": "loan_1", "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type", "query_toks": ["SELECT", "avg", "(", "acc_bal", ")", ",", "acc_type", "FROM", "customer", "WHERE", "credit_score", "<", "50", "GROUP", "BY", "acc_type"], "query_toks_no_value": ["select", "avg", "(", "acc_bal", ")", ",", "acc_type", "from", "customer", "where", "credit_score", "<", "value", "group", "by", "acc_type"], "question": "What is the average account balance of customers with credit score below 50 for the different account types?", "question_toks": ["What", "is", "the", "average", "account", "balance", "of", "customers", "with", "credit", "score", "below", "50", "for", "the", "different", "account", "types", "?"], "dataset_name": "spider", "guid": 3303}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customer who has the lowest credit score.", "sql": "SELECT cust_name FROM customer ORDER BY credit_score ASC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "ORDER", "BY", "credit_score", "LIMIT", "1"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "order", "by", "credit_score", "limit", "value"], "question": "Find the name of customer who has the lowest credit score.", "question_toks": ["Find", "the", "name", "of", "customer", "who", "has", "the", "lowest", "credit", "score", "."], "dataset_name": "spider", "guid": 3304}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | In how many different cities are banks located?", "sql": "SELECT count(DISTINCT city) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT count(DISTINCT city) FROM bank", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "bank"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "bank"], "question": "In how many different cities are banks located?", "question_toks": ["In", "how", "many", "different", "cities", "are", "banks", "located", "?"], "dataset_name": "spider", "guid": 3305}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | How many distinct claim outcome codes are there?", "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "query_toks": ["SELECT", "count", "(", "DISTINCT", "claim_outcome_code", ")", "FROM", "claims_processing"], "query_toks_no_value": ["select", "count", "(", "distinct", "claim_outcome_code", ")", "from", "claims_processing"], "question": "How many distinct claim outcome codes are there?", "question_toks": ["How", "many", "distinct", "claim", "outcome", "codes", "are", "there", "?"], "dataset_name": "spider", "guid": 3306}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the maximum and minimum settlement amount.", "sql": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "example": {"db_id": "insurance_fnol", "query": "SELECT max(settlement_amount) ,  min(settlement_amount) FROM settlements", "query_toks": ["SELECT", "max", "(", "settlement_amount", ")", ",", "min", "(", "settlement_amount", ")", "FROM", "settlements"], "query_toks_no_value": ["select", "max", "(", "settlement_amount", ")", ",", "min", "(", "settlement_amount", ")", "from", "settlements"], "question": "Find the maximum and minimum settlement amount.", "question_toks": ["Find", "the", "maximum", "and", "minimum", "settlement", "amount", "."], "dataset_name": "spider", "guid": 3307}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Claims WHERE Amount_Claimed  >  ( SELECT avg(Amount_Claimed) FROM Claims )", "query_toks": ["SELECT", "Date_Claim_Made", ",", "Date_Claim_Settled", "FROM", "Claims", "WHERE", "Amount_Claimed", ">", "(", "SELECT", "avg", "(", "Amount_Claimed", ")", "FROM", "Claims", ")"], "query_toks_no_value": ["select", "date_claim_made", ",", "date_claim_settled", "from", "claims", "where", "amount_claimed", ">", "(", "select", "avg", "(", "amount_claimed", ")", "from", "claims", ")"], "question": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.", "question_toks": ["Among", "all", "the", "claims", ",", "which", "claims", "have", "a", "claimed", "amount", "larger", "than", "the", "average", "?", "List", "the", "date", "the", "claim", "was", "made", "and", "the", "date", "it", "was", "settled", "."], "dataset_name": "spider", "guid": 3308}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.", "sql": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance", "query_toks": ["SELECT", "T1.name", ",", "T3.balance", "+", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T3.balance", "<", "T2.balance"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t3", ".", "balance", "+", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t3", ".", "balance", "<", "t2", ".", "balance"], "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.", "question_toks": ["Find", "the", "name", "and", "total", "checking", "and", "savings", "balance", "of", "the", "accounts", "whose", "savings", "balance", "is", "lower", "than", "corresponding", "checking", "balance", "."], "dataset_name": "spider", "guid": 3309}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Compute the total amount of payment processed.", "sql": "SELECT sum(Amount_Payment) FROM Payments", "example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Payment) FROM Payments", "query_toks": ["SELECT", "sum", "(", "Amount_Payment", ")", "FROM", "Payments"], "query_toks_no_value": ["select", "sum", "(", "amount_payment", ")", "from", "payments"], "question": "Compute the total amount of payment processed.", "question_toks": ["Compute", "the", "total", "amount", "of", "payment", "processed", "."], "dataset_name": "spider", "guid": 3310}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name and credit score of the customers who have some loans.", "sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "example": {"db_id": "loan_1", "query": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "query_toks": ["SELECT", "DISTINCT", "T1.cust_name", ",", "T1.credit_score", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "cust_name", ",", "t1", ".", "credit_score", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id"], "question": "Find the name and credit score of the customers who have some loans.", "question_toks": ["Find", "the", "name", "and", "credit", "score", "of", "the", "customers", "who", "have", "some", "loans", "."], "dataset_name": "spider", "guid": 3311}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.", "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T1.balance + T2.balance ASC", "example": {"db_id": "small_bank_1", "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance", "query_toks": ["SELECT", "T1.balance", "+", "T2.balance", "FROM", "checking", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "ORDER", "BY", "T1.balance", "+", "T2.balance"], "query_toks_no_value": ["select", "t1", ".", "balance", "+", "t2", ".", "balance", "from", "checking", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "order", "by", "t1", ".", "balance", "+", "t2", ".", "balance"], "question": "Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.", "question_toks": ["Find", "the", "total", "checking", "and", "saving", "balance", "of", "all", "accounts", "sorted", "by", "the", "total", "balance", "in", "ascending", "order", "."], "dataset_name": "spider", "guid": 3312}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customers who do not have a loan with a type of Mortgages.", "sql": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "EXCEPT", "SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "T2.loan_type", "=", "'Mortgages", "'"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "except", "select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "t2", ".", "loan_type", "=", "value"], "question": "Find the name of customers who do not have a loan with a type of Mortgages.", "question_toks": ["Find", "the", "name", "of", "customers", "who", "do", "not", "have", "a", "loan", "with", "a", "type", "of", "Mortgages", "."], "dataset_name": "spider", "guid": 3313}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the name of the customer that has been involved in the most policies.", "sql": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t2.customer_details", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_details", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the customer that has been involved in the most policies.", "question_toks": ["Find", "the", "name", "of", "the", "customer", "that", "has", "been", "involved", "in", "the", "most", "policies", "."], "dataset_name": "spider", "guid": 3314}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names, checking balances, and savings balances for all customers?", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid"], "question": "What are the names, checking balances, and savings balances for all customers?", "question_toks": ["What", "are", "the", "names", ",", "checking", "balances", ",", "and", "savings", "balances", "for", "all", "customers", "?"], "dataset_name": "spider", "guid": 3315}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" OR t3.service_name = \"Upgrade a policy\"", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" OR t3.service_name  =  \"Upgrade a policy\"", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "services", "AS", "t3", "ON", "t2.service_id", "=", "t3.service_id", "WHERE", "t3.service_name", "=", "``", "Close", "a", "policy", "''", "OR", "t3.service_name", "=", "``", "Upgrade", "a", "policy", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "services", "as", "t3", "on", "t2", ".", "service_id", "=", "t3", ".", "service_id", "where", "t3", ".", "service_name", "=", "value", "or", "t3", ".", "service_name", "=", "value"], "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".", "question_toks": ["Find", "the", "names", "of", "customers", "who", "have", "used", "either", "the", "service", "``", "Close", "a", "policy", "''", "or", "the", "service", "``", "Upgrade", "a", "policy", "''", "."], "dataset_name": "spider", "guid": 3316}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the total account balance of each customer from Utah or Texas.", "sql": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'", "example": {"db_id": "loan_1", "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'", "query_toks": ["SELECT", "sum", "(", "acc_bal", ")", "FROM", "customer", "WHERE", "state", "=", "'Utah", "'", "OR", "state", "=", "'Texas", "'"], "query_toks_no_value": ["select", "sum", "(", "acc_bal", ")", "from", "customer", "where", "state", "=", "value", "or", "state", "=", "value"], "question": "Find the total account balance of each customer from Utah or Texas.", "question_toks": ["Find", "the", "total", "account", "balance", "of", "each", "customer", "from", "Utah", "or", "Texas", "."], "dataset_name": "spider", "guid": 3317}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the checking and savings balances in accounts belonging to Brown?", "sql": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T1.name", "=", "'Brown", "'"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t1", ".", "name", "=", "value"], "question": "What are the checking and savings balances in accounts belonging to Brown?", "question_toks": ["What", "are", "the", "checking", "and", "savings", "balances", "in", "accounts", "belonging", "to", "Brown", "?"], "dataset_name": "spider", "guid": 3318}}
{"text": "Ref_Feature_Types: feature_type_code, feature_type_name; Ref_Property_Types: property_type_code, property_type_description; Other_Available_Features: feature_id, feature_type_code, feature_name, feature_description; Properties: property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price; Other_Property_Features: property_id, feature_id, property_feature_description | How many available features are there in total?", "sql": "SELECT count(*) FROM Other_Available_Features", "example": {"db_id": "real_estate_properties", "query": "SELECT count(*) FROM Other_Available_Features", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Other_Available_Features"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "other_available_features"], "question": "How many available features are there in total?", "question_toks": ["How", "many", "available", "features", "are", "there", "in", "total", "?"], "dataset_name": "spider", "guid": 3319}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | With which kind of payment method were the least number of payments processed?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "Payment_Method_Code", "FROM", "Payments", "GROUP", "BY", "Payment_Method_Code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method_code", "from", "payments", "group", "by", "payment_method_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "With which kind of payment method were the least number of payments processed?", "question_toks": ["With", "which", "kind", "of", "payment", "method", "were", "the", "least", "number", "of", "payments", "processed", "?"], "dataset_name": "spider", "guid": 3320}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the the name of the customers who have a loan with amount more than 3000.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "amount", ">", "3000"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "amount", ">", "value"], "question": "Find the the name of the customers who have a loan with amount more than 3000.", "question_toks": ["Find", "the", "the", "name", "of", "the", "customers", "who", "have", "a", "loan", "with", "amount", "more", "than", "3000", "."], "dataset_name": "spider", "guid": 3321}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customer made the largest amount of claim in a single claim? Return the customer details.", "sql": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT max(amount_claimed) FROM claim_headers)", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)", "query_toks": ["SELECT", "t3.customer_details", "FROM", "claim_headers", "AS", "t1", "JOIN", "policies", "AS", "t2", "ON", "t1.policy_id", "=", "t2.policy_id", "JOIN", "customers", "AS", "t3", "ON", "t2.customer_id", "=", "t3.customer_id", "WHERE", "t1.amount_claimed", "=", "(", "SELECT", "max", "(", "amount_claimed", ")", "FROM", "claim_headers", ")"], "query_toks_no_value": ["select", "t3", ".", "customer_details", "from", "claim_headers", "as", "t1", "join", "policies", "as", "t2", "on", "t1", ".", "policy_id", "=", "t2", ".", "policy_id", "join", "customers", "as", "t3", "on", "t2", ".", "customer_id", "=", "t3", ".", "customer_id", "where", "t1", ".", "amount_claimed", "=", "(", "select", "max", "(", "amount_claimed", ")", "from", "claim_headers", ")"], "question": "Which customer made the largest amount of claim in a single claim? Return the customer details.", "question_toks": ["Which", "customer", "made", "the", "largest", "amount", "of", "claim", "in", "a", "single", "claim", "?", "Return", "the", "customer", "details", "."], "dataset_name": "spider", "guid": 3322}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name of account that has the lowest total checking and saving balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T2.balance", "+", "T3.balance", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t2", ".", "balance", "+", "t3", ".", "balance", "limit", "value"], "question": "Find the name of account that has the lowest total checking and saving balance.", "question_toks": ["Find", "the", "name", "of", "account", "that", "has", "the", "lowest", "total", "checking", "and", "saving", "balance", "."], "dataset_name": "spider", "guid": 3323}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the total account balance for customers with a credit score of above 100 for the different states?", "sql": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state", "example": {"db_id": "loan_1", "query": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state", "query_toks": ["SELECT", "sum", "(", "acc_bal", ")", ",", "state", "FROM", "customer", "WHERE", "credit_score", ">", "100", "GROUP", "BY", "state"], "query_toks_no_value": ["select", "sum", "(", "acc_bal", ")", ",", "state", "from", "customer", "where", "credit_score", ">", "value", "group", "by", "state"], "question": "What is the total account balance for customers with a credit score of above 100 for the different states?", "question_toks": ["What", "is", "the", "total", "account", "balance", "for", "customers", "with", "a", "credit", "score", "of", "above", "100", "for", "the", "different", "states", "?"], "dataset_name": "spider", "guid": 3324}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customers have the substring \"Diana\" in their names? Return the customer details.", "sql": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers WHERE customer_details LIKE \"%Diana%\"", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "WHERE", "customer_details", "LIKE", "``", "%", "Diana", "%", "''"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "where", "customer_details", "like", "value"], "question": "Which customers have the substring \"Diana\" in their names? Return the customer details.", "question_toks": ["Which", "customers", "have", "the", "substring", "``", "Diana", "''", "in", "their", "names", "?", "Return", "the", "customer", "details", "."], "dataset_name": "spider", "guid": 3325}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | List the details of the customers who do not have any policies.", "sql": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id", "example": {"db_id": "insurance_policies", "query": "SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id  =  T2.customer_id", "query_toks": ["SELECT", "customer_details", "FROM", "Customers", "EXCEPT", "SELECT", "T1.customer_details", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "except", "select", "t1", ".", "customer_details", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "List the details of the customers who do not have any policies.", "question_toks": ["List", "the", "details", "of", "the", "customers", "who", "do", "not", "have", "any", "policies", "."], "dataset_name": "spider", "guid": 3326}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the average credit score for customers who have taken a loan?", "sql": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "example": {"db_id": "loan_1", "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)", "query_toks": ["SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", "WHERE", "cust_id", "IN", "(", "SELECT", "cust_id", "FROM", "loan", ")"], "query_toks_no_value": ["select", "avg", "(", "credit_score", ")", "from", "customer", "where", "cust_id", "in", "(", "select", "cust_id", "from", "loan", ")"], "question": "What is the average credit score for customers who have taken a loan?", "question_toks": ["What", "is", "the", "average", "credit", "score", "for", "customers", "who", "have", "taken", "a", "loan", "?"], "dataset_name": "spider", "guid": 3327}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))", "query_toks": ["SELECT", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T1.name", "IN", "(", "SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")", ")"], "query_toks_no_value": ["select", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t1", ".", "name", "in", "(", "select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")", ")"], "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?", "question_toks": ["What", "are", "the", "balances", "of", "checking", "accounts", "belonging", "to", "people", "with", "savings", "balances", "greater", "than", "the", "average", "savings", "balance", "?"], "dataset_name": "spider", "guid": 3328}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Give me the payment Id, the date and the amount for all the payments processed with Visa.", "sql": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_ID ,  Date_Payment_Made ,  Amount_Payment FROM Payments WHERE Payment_Method_Code  =  'Visa'", "query_toks": ["SELECT", "Payment_ID", ",", "Date_Payment_Made", ",", "Amount_Payment", "FROM", "Payments", "WHERE", "Payment_Method_Code", "=", "'Visa", "'"], "query_toks_no_value": ["select", "payment_id", ",", "date_payment_made", ",", "amount_payment", "from", "payments", "where", "payment_method_code", "=", "value"], "question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.", "question_toks": ["Give", "me", "the", "payment", "Id", ",", "the", "date", "and", "the", "amount", "for", "all", "the", "payments", "processed", "with", "Visa", "."], "dataset_name": "spider", "guid": 3329}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the savings balance of the account belonging to the customer with the highest checking balance?", "sql": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1", "query_toks": ["SELECT", "T3.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T2.balance", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t2", ".", "balance", "desc", "limit", "value"], "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?", "question_toks": ["What", "is", "the", "savings", "balance", "of", "the", "account", "belonging", "to", "the", "customer", "with", "the", "highest", "checking", "balance", "?"], "dataset_name": "spider", "guid": 3330}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"", "query_toks": ["SELECT", "DISTINCT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.policy_type_code", "=", "``", "Deputy", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "policy_type_code", "=", "value"], "question": "Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.", "question_toks": ["Which", "customers", "have", "an", "insurance", "policy", "with", "the", "type", "code", "``", "Deputy", "''", "?", "Give", "me", "the", "customer", "details", "."], "dataset_name": "spider", "guid": 3331}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the city and name of bank branches that provide business loans.", "sql": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "example": {"db_id": "loan_1", "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "query_toks": ["SELECT", "T1.bname", ",", "T1.city", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T2.loan_type", "=", "'Business", "'"], "query_toks_no_value": ["select", "t1", ".", "bname", ",", "t1", ".", "city", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t2", ".", "loan_type", "=", "value"], "question": "Find the city and name of bank branches that provide business loans.", "question_toks": ["Find", "the", "city", "and", "name", "of", "bank", "branches", "that", "provide", "business", "loans", "."], "dataset_name": "spider", "guid": 3332}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the name corresponding to the accoung with the lowest sum of checking and savings balances?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T2.balance", "+", "T3.balance", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t2", ".", "balance", "+", "t3", ".", "balance", "limit", "value"], "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?", "question_toks": ["What", "is", "the", "name", "corresponding", "to", "the", "accoung", "with", "the", "lowest", "sum", "of", "checking", "and", "savings", "balances", "?"], "dataset_name": "spider", "guid": 3333}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\" OR t1.policy_type_code = \"Uniform\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"", "query_toks": ["SELECT", "DISTINCT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.policy_type_code", "=", "``", "Deputy", "''", "OR", "t1.policy_type_code", "=", "``", "Uniform", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "policy_type_code", "=", "value", "or", "t1", ".", "policy_type_code", "=", "value"], "question": "Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.", "question_toks": ["Which", "customers", "have", "an", "insurance", "policy", "with", "the", "type", "code", "``", "Deputy", "''", "or", "``", "Uniform", "''", "?", "Return", "the", "customer", "details", "."], "dataset_name": "spider", "guid": 3334}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Which state has the greatest total number of bank customers?", "sql": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1", "query_toks": ["SELECT", "state", "FROM", "bank", "GROUP", "BY", "state", "ORDER", "BY", "sum", "(", "no_of_customers", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "state", "from", "bank", "group", "by", "state", "order", "by", "sum", "(", "no_of_customers", ")", "desc", "limit", "value"], "question": "Which state has the greatest total number of bank customers?", "question_toks": ["Which", "state", "has", "the", "greatest", "total", "number", "of", "bank", "customers", "?"], "dataset_name": "spider", "guid": 3335}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.", "sql": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3", "query_toks": ["SELECT", "T1.name", ",", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "ORDER", "BY", "T2.balance", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "order", "by", "t2", ".", "balance", "desc", "limit", "value"], "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.", "question_toks": ["Find", "the", "name", "and", "savings", "balance", "of", "the", "top", "3", "accounts", "with", "the", "highest", "saving", "balance", "sorted", "by", "savings", "balance", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 3336}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the policy type the most customers choose.", "sql": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Policy_Type_Code", "FROM", "Customer_Policies", "GROUP", "BY", "Policy_Type_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "policy_type_code", "from", "customer_policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the policy type the most customers choose.", "question_toks": ["Find", "the", "policy", "type", "the", "most", "customers", "choose", "."], "dataset_name": "spider", "guid": 3337}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the branch name of the bank that has the most number of customers.", "sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "query_toks": ["SELECT", "bname", "FROM", "bank", "ORDER", "BY", "no_of_customers", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "bname", "from", "bank", "order", "by", "no_of_customers", "desc", "limit", "value"], "question": "Find the branch name of the bank that has the most number of customers.", "question_toks": ["Find", "the", "branch", "name", "of", "the", "bank", "that", "has", "the", "most", "number", "of", "customers", "."], "dataset_name": "spider", "guid": 3338}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | How many accounts are there in total?", "sql": "SELECT count(*) FROM accounts", "example": {"db_id": "small_bank_1", "query": "SELECT count(*) FROM accounts", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "accounts"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "accounts"], "question": "How many accounts are there in total?", "question_toks": ["How", "many", "accounts", "are", "there", "in", "total", "?"], "dataset_name": "spider", "guid": 3339}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customers who have more than one loan.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of customers who have more than one loan.", "question_toks": ["Find", "the", "name", "of", "customers", "who", "have", "more", "than", "one", "loan", "."], "dataset_name": "spider", "guid": 3340}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the average number of customers across banks in the state of Utah?", "sql": "SELECT AVG(no_of_customers) FROM bank WHERE state = 'Utah'", "example": {"db_id": "loan_1", "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'", "query_toks": ["SELECT", "avg", "(", "no_of_customers", ")", "FROM", "bank", "WHERE", "state", "=", "'Utah", "'"], "query_toks_no_value": ["select", "avg", "(", "no_of_customers", ")", "from", "bank", "where", "state", "=", "value"], "question": "What is the average number of customers across banks in the state of Utah?", "question_toks": ["What", "is", "the", "average", "number", "of", "customers", "across", "banks", "in", "the", "state", "of", "Utah", "?"], "dataset_name": "spider", "guid": 3341}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names and cities of bank branches that offer loans for business?", "sql": "SELECT T1.bname , T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T2.loan_type = 'Business'", "example": {"db_id": "loan_1", "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'", "query_toks": ["SELECT", "T1.bname", ",", "T1.city", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T2.loan_type", "=", "'Business", "'"], "query_toks_no_value": ["select", "t1", ".", "bname", ",", "t1", ".", "city", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t2", ".", "loan_type", "=", "value"], "question": "What are the names and cities of bank branches that offer loans for business?", "question_toks": ["What", "are", "the", "names", "and", "cities", "of", "bank", "branches", "that", "offer", "loans", "for", "business", "?"], "dataset_name": "spider", "guid": 3342}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"New policy application\"", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "services", "AS", "t3", "ON", "t2.service_id", "=", "t3.service_id", "WHERE", "t3.service_name", "=", "``", "Close", "a", "policy", "''", "INTERSECT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "services", "AS", "t3", "ON", "t2.service_id", "=", "t3.service_id", "WHERE", "t3.service_name", "=", "``", "New", "policy", "application", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "services", "as", "t3", "on", "t2", ".", "service_id", "=", "t3", ".", "service_id", "where", "t3", ".", "service_name", "=", "value", "intersect", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "services", "as", "t3", "on", "t2", ".", "service_id", "=", "t3", ".", "service_id", "where", "t3", ".", "service_name", "=", "value"], "question": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".", "question_toks": ["Find", "the", "names", "of", "customers", "who", "have", "used", "both", "the", "service", "``", "Close", "a", "policy", "''", "and", "the", "service", "``", "New", "policy", "application", "''", "."], "dataset_name": "spider", "guid": 3343}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.", "sql": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'", "example": {"db_id": "loan_1", "query": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'", "query_toks": ["SELECT", "cust_name", ",", "acc_bal", "FROM", "customer", "WHERE", "cust_name", "LIKE", "'", "%", "a", "%", "'"], "query_toks_no_value": ["select", "cust_name", ",", "acc_bal", "from", "customer", "where", "cust_name", "like", "value"], "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.", "question_toks": ["Find", "the", "name", "and", "account", "balance", "of", "the", "customer", "whose", "name", "includes", "the", "letter", "\u2018a\u2019", "."], "dataset_name": "spider", "guid": 3344}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the average balance in checking accounts?", "sql": "SELECT AVG(balance) FROM checking", "example": {"db_id": "small_bank_1", "query": "SELECT avg(balance) FROM checking", "query_toks": ["SELECT", "avg", "(", "balance", ")", "FROM", "checking"], "query_toks_no_value": ["select", "avg", "(", "balance", ")", "from", "checking"], "question": "What is the average balance in checking accounts?", "question_toks": ["What", "is", "the", "average", "balance", "in", "checking", "accounts", "?"], "dataset_name": "spider", "guid": 3345}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Tell me the the claim date and settlement date for each settlement case.", "sql": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made ,  Date_Claim_Settled FROM Settlements", "query_toks": ["SELECT", "Date_Claim_Made", ",", "Date_Claim_Settled", "FROM", "Settlements"], "query_toks_no_value": ["select", "date_claim_made", ",", "date_claim_settled", "from", "settlements"], "question": "Tell me the the claim date and settlement date for each settlement case.", "question_toks": ["Tell", "me", "the", "the", "claim", "date", "and", "settlement", "date", "for", "each", "settlement", "case", "."], "dataset_name": "spider", "guid": 3346}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of the different banks that have provided loans?", "sql": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id", "example": {"db_id": "loan_1", "query": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id", "query_toks": ["SELECT", "DISTINCT", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id"], "question": "What are the names of the different banks that have provided loans?", "question_toks": ["What", "are", "the", "names", "of", "the", "different", "banks", "that", "have", "provided", "loans", "?"], "dataset_name": "spider", "guid": 3347}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What are the names of customers who do not have any policies?", "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "EXCEPT", "SELECT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "except", "select", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "What are the names of customers who do not have any policies?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "do", "not", "have", "any", "policies", "?"], "dataset_name": "spider", "guid": 3348}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | How many customers are there?", "sql": "SELECT sum(no_of_customers) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT sum(no_of_customers) FROM bank", "query_toks": ["SELECT", "sum", "(", "no_of_customers", ")", "FROM", "bank"], "query_toks_no_value": ["select", "sum", "(", "no_of_customers", ")", "from", "bank"], "question": "How many customers are there?", "question_toks": ["How", "many", "customers", "are", "there", "?"], "dataset_name": "spider", "guid": 3349}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Compute the total amount of settlement across all the settlements.", "sql": "SELECT sum(Amount_Settled) FROM Settlements", "example": {"db_id": "insurance_policies", "query": "SELECT sum(Amount_Settled) FROM Settlements", "query_toks": ["SELECT", "sum", "(", "Amount_Settled", ")", "FROM", "Settlements"], "query_toks_no_value": ["select", "sum", "(", "amount_settled", ")", "from", "settlements"], "question": "Compute the total amount of settlement across all the settlements.", "question_toks": ["Compute", "the", "total", "amount", "of", "settlement", "across", "all", "the", "settlements", "."], "dataset_name": "spider", "guid": 3350}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find all the policy type codes associated with the customer \"Dayana Robel\"", "sql": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.customer_details  =  \"Dayana Robel\"", "query_toks": ["SELECT", "policy_type_code", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t2.customer_details", "=", "``", "Dayana", "Robel", "''"], "query_toks_no_value": ["select", "policy_type_code", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_details", "=", "value"], "question": "Find all the policy type codes associated with the customer \"Dayana Robel\"", "question_toks": ["Find", "all", "the", "policy", "type", "codes", "associated", "with", "the", "customer", "``", "Dayana", "Robel", "''"], "dataset_name": "spider", "guid": 3351}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What is the most popular payment method?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Payment_Method_Code", "FROM", "Payments", "GROUP", "BY", "Payment_Method_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method_code", "from", "payments", "group", "by", "payment_method_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most popular payment method?", "question_toks": ["What", "is", "the", "most", "popular", "payment", "method", "?"], "dataset_name": "spider", "guid": 3352}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | How many bank branches are there?", "sql": "SELECT count(*) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT count(*) FROM bank", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "bank"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "bank"], "question": "How many bank branches are there?", "question_toks": ["How", "many", "bank", "branches", "are", "there", "?"], "dataset_name": "spider", "guid": 3353}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which type of policy is most frequently used? Give me the policy type code.", "sql": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "policy_type_code", "FROM", "policies", "GROUP", "BY", "policy_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "policy_type_code", "from", "policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which type of policy is most frequently used? Give me the policy type code.", "question_toks": ["Which", "type", "of", "policy", "is", "most", "frequently", "used", "?", "Give", "me", "the", "policy", "type", "code", "."], "dataset_name": "spider", "guid": 3354}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the different names and credit scores of customers who have taken a loan?", "sql": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "example": {"db_id": "loan_1", "query": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id", "query_toks": ["SELECT", "DISTINCT", "T1.cust_name", ",", "T1.credit_score", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "cust_name", ",", "t1", ".", "credit_score", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id"], "question": "What are the different names and credit scores of customers who have taken a loan?", "question_toks": ["What", "are", "the", "different", "names", "and", "credit", "scores", "of", "customers", "who", "have", "taken", "a", "loan", "?"], "dataset_name": "spider", "guid": 3355}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | How many policies are listed for the customer named \"Dayana Robel\"?", "sql": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"", "example": {"db_id": "insurance_fnol", "query": "SELECT count(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Dayana Robel\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.customer_name", "=", "``", "Dayana", "Robel", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "How many policies are listed for the customer named \"Dayana Robel\"?", "question_toks": ["How", "many", "policies", "are", "listed", "for", "the", "customer", "named", "``", "Dayana", "Robel", "''", "?"], "dataset_name": "spider", "guid": 3356}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers who have taken out more than one loan?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of customers who have taken out more than one loan?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "taken", "out", "more", "than", "one", "loan", "?"], "dataset_name": "spider", "guid": 3357}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers who have a loan of more than 3000 in amount?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "amount", ">", "3000"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "amount", ">", "value"], "question": "What are the names of customers who have a loan of more than 3000 in amount?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "a", "loan", "of", "more", "than", "3000", "in", "amount", "?"], "dataset_name": "spider", "guid": 3358}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the phone numbers of customers using the most common policy type among the available policies.", "sql": "SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_phone FROM available_policies WHERE policy_type_code  =  (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "customer_phone", "FROM", "available_policies", "WHERE", "policy_type_code", "=", "(", "SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "customer_phone", "from", "available_policies", "where", "policy_type_code", "=", "(", "select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "Find the phone numbers of customers using the most common policy type among the available policies.", "question_toks": ["Find", "the", "phone", "numbers", "of", "customers", "using", "the", "most", "common", "policy", "type", "among", "the", "available", "policies", "."], "dataset_name": "spider", "guid": 3359}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Who are the customers that had more than 1 policy? List the customer details and id.", "sql": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1", "example": {"db_id": "insurance_policies", "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.customer_details", ",", "T1.customer_id", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.Customer_id", "=", "T2.Customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_details", ",", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Who are the customers that had more than 1 policy? List the customer details and id.", "question_toks": ["Who", "are", "the", "customers", "that", "had", "more", "than", "1", "policy", "?", "List", "the", "customer", "details", "and", "id", "."], "dataset_name": "spider", "guid": 3360}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the number of records of each policy type and its type code.", "sql": "SELECT policy_type_code, COUNT(*) FROM policies GROUP BY policy_type_code", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT policy_type_code ,  count(*) FROM policies GROUP BY policy_type_code", "query_toks": ["SELECT", "policy_type_code", ",", "count", "(", "*", ")", "FROM", "policies", "GROUP", "BY", "policy_type_code"], "query_toks_no_value": ["select", "policy_type_code", ",", "count", "(", "*", ")", "from", "policies", "group", "by", "policy_type_code"], "question": "Find the number of records of each policy type and its type code.", "question_toks": ["Find", "the", "number", "of", "records", "of", "each", "policy", "type", "and", "its", "type", "code", "."], "dataset_name": "spider", "guid": 3361}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the name, account type, and account balance corresponding to the customer with the highest credit score?", "sql": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1", "query_toks": ["SELECT", "cust_name", ",", "acc_type", ",", "acc_bal", "FROM", "customer", "ORDER", "BY", "credit_score", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "cust_name", ",", "acc_type", ",", "acc_bal", "from", "customer", "order", "by", "credit_score", "desc", "limit", "value"], "question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?", "question_toks": ["What", "is", "the", "name", ",", "account", "type", ",", "and", "account", "balance", "corresponding", "to", "the", "customer", "with", "the", "highest", "credit", "score", "?"], "dataset_name": "spider", "guid": 3362}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What is the payment method that were used the least often?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "Payment_Method_Code", "FROM", "Payments", "GROUP", "BY", "Payment_Method_Code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method_code", "from", "payments", "group", "by", "payment_method_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the payment method that were used the least often?", "question_toks": ["What", "is", "the", "payment", "method", "that", "were", "used", "the", "least", "often", "?"], "dataset_name": "spider", "guid": 3363}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are the IDs of customers who have \"Diana\" in part of their names?", "sql": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_id FROM customers WHERE customer_name LIKE \"%Diana%\"", "query_toks": ["SELECT", "customer_id", "FROM", "customers", "WHERE", "customer_name", "LIKE", "``", "%", "Diana", "%", "''"], "query_toks_no_value": ["select", "customer_id", "from", "customers", "where", "customer_name", "like", "value"], "question": "What are the IDs of customers who have \"Diana\" in part of their names?", "question_toks": ["What", "are", "the", "IDs", "of", "customers", "who", "have", "``", "Diana", "''", "in", "part", "of", "their", "names", "?"], "dataset_name": "spider", "guid": 3364}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | List all the services in the alphabetical order.", "sql": "SELECT service_name FROM services ORDER BY service_name", "example": {"db_id": "insurance_fnol", "query": "SELECT service_name FROM services ORDER BY service_name", "query_toks": ["SELECT", "service_name", "FROM", "services", "ORDER", "BY", "service_name"], "query_toks_no_value": ["select", "service_name", "from", "services", "order", "by", "service_name"], "question": "List all the services in the alphabetical order.", "question_toks": ["List", "all", "the", "services", "in", "the", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 3365}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.", "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)", "query_toks": ["SELECT", "T1.name", ",", "T2.balance", "+", "T3.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T3.balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "balance", "+", "t3", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t3", ".", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")"], "question": "Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.", "question_toks": ["Find", "the", "names", "and", "total", "checking", "and", "savings", "balances", "of", "accounts", "whose", "savings", "balance", "is", "higher", "than", "the", "average", "savings", "balance", "."], "dataset_name": "spider", "guid": 3366}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the most common type code across products.", "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Product_Type_Code", "FROM", "Products", "GROUP", "BY", "Product_Type_Code", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_type_code", "from", "products", "group", "by", "product_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common type code across products.", "question_toks": ["Show", "the", "most", "common", "type", "code", "across", "products", "."], "dataset_name": "spider", "guid": 3367}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | Show the product type codes that have at least two products.", "sql": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*) >= 2", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Product_Type_Code", "FROM", "Products", "GROUP", "BY", "Product_Type_Code", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "product_type_code", "from", "products", "group", "by", "product_type_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the product type codes that have at least two products.", "question_toks": ["Show", "the", "product", "type", "codes", "that", "have", "at", "least", "two", "products", "."], "dataset_name": "spider", "guid": 3368}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100", "example": {"db_id": "loan_1", "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100", "query_toks": ["SELECT", "T2.bname", "FROM", "loan", "AS", "T1", "JOIN", "bank", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "customer", "AS", "T3", "ON", "T1.cust_id", "=", "T3.cust_id", "WHERE", "T3.credit_score", "<", "100"], "query_toks_no_value": ["select", "t2", ".", "bname", "from", "loan", "as", "t1", "join", "bank", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "customer", "as", "t3", "on", "t1", ".", "cust_id", "=", "t3", ".", "cust_id", "where", "t3", ".", "credit_score", "<", "value"], "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.", "question_toks": ["Find", "the", "names", "of", "bank", "branches", "that", "have", "provided", "a", "loan", "to", "any", "customer", "whose", "credit", "score", "is", "below", "100", "."], "dataset_name": "spider", "guid": 3369}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | How many distinct types of accounts are there?", "sql": "SELECT count(DISTINCT acc_type) FROM customer", "example": {"db_id": "loan_1", "query": "SELECT count(DISTINCT acc_type) FROM customer", "query_toks": ["SELECT", "count", "(", "DISTINCT", "acc_type", ")", "FROM", "customer"], "query_toks_no_value": ["select", "count", "(", "distinct", "acc_type", ")", "from", "customer"], "question": "How many distinct types of accounts are there?", "question_toks": ["How", "many", "distinct", "types", "of", "accounts", "are", "there", "?"], "dataset_name": "spider", "guid": 3370}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim.", "sql": "SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.Claim_id HAVING count(*) > 2 UNION SELECT T1.Date_Claim_Made , T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id WHERE T1.Amount_Claimed = ( SELECT max(Amount_Claimed) FROM Claims )", "example": {"db_id": "insurance_policies", "query": "SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.Claim_id HAVING count(*)  >  2 UNION SELECT T1.Date_Claim_Made ,  T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id WHERE T1.Amount_Claimed  =  ( SELECT max(Amount_Claimed) FROM Claims )", "query_toks": ["SELECT", "T1.Date_Claim_Made", ",", "T1.Claim_id", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.Claim_id", "=", "T2.Claim_id", "GROUP", "BY", "T1.Claim_id", "HAVING", "count", "(", "*", ")", ">", "2", "UNION", "SELECT", "T1.Date_Claim_Made", ",", "T1.Claim_id", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.Claim_id", "=", "T2.Claim_id", "WHERE", "T1.Amount_Claimed", "=", "(", "SELECT", "max", "(", "Amount_Claimed", ")", "FROM", "Claims", ")"], "query_toks_no_value": ["select", "t1", ".", "date_claim_made", ",", "t1", ".", "claim_id", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "date_claim_made", ",", "t1", ".", "claim_id", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "where", "t1", ".", "amount_claimed", "=", "(", "select", "max", "(", "amount_claimed", ")", "from", "claims", ")"], "question": "Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim.", "question_toks": ["Find", "the", "claims", "that", "led", "to", "more", "than", "two", "settlements", "or", "have", "the", "maximum", "claim", "value", ".", "For", "each", "of", "them", ",", "return", "the", "date", "the", "claim", "was", "made", "and", "the", "id", "of", "the", "claim", "."], "dataset_name": "spider", "guid": 3371}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customers who have both saving and checking account types.", "sql": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'saving", "'", "INTERSECT", "SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'checking", "'"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "where", "acc_type", "=", "value", "intersect", "select", "cust_name", "from", "customer", "where", "acc_type", "=", "value"], "question": "Find the name of customers who have both saving and checking account types.", "question_toks": ["Find", "the", "name", "of", "customers", "who", "have", "both", "saving", "and", "checking", "account", "types", "."], "dataset_name": "spider", "guid": 3372}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the average number of customers cross all banks.", "sql": "SELECT AVG(no_of_customers) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT avg(no_of_customers) FROM bank", "query_toks": ["SELECT", "avg", "(", "no_of_customers", ")", "FROM", "bank"], "query_toks_no_value": ["select", "avg", "(", "no_of_customers", ")", "from", "bank"], "question": "Find the average number of customers cross all banks.", "question_toks": ["Find", "the", "average", "number", "of", "customers", "cross", "all", "banks", "."], "dataset_name": "spider", "guid": 3373}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the name of customers who have loans of both Mortgages and Auto.", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "loan_type", "=", "'Mortgages", "'", "INTERSECT", "SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "loan_type", "=", "'Auto", "'"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "loan_type", "=", "value", "intersect", "select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "loan_type", "=", "value"], "question": "Find the name of customers who have loans of both Mortgages and Auto.", "question_toks": ["Find", "the", "name", "of", "customers", "who", "have", "loans", "of", "both", "Mortgages", "and", "Auto", "."], "dataset_name": "spider", "guid": 3374}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the states, account types, and credit scores for customers who have 0 loans?", "sql": "SELECT state, acc_type, credit_score FROM customer WHERE no_of_loans = 0", "example": {"db_id": "loan_1", "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0", "query_toks": ["SELECT", "state", ",", "acc_type", ",", "credit_score", "FROM", "customer", "WHERE", "no_of_loans", "=", "0"], "query_toks_no_value": ["select", "state", ",", "acc_type", ",", "credit_score", "from", "customer", "where", "no_of_loans", "=", "value"], "question": "What are the states, account types, and credit scores for customers who have 0 loans?", "question_toks": ["What", "are", "the", "states", ",", "account", "types", ",", "and", "credit", "scores", "for", "customers", "who", "have", "0", "loans", "?"], "dataset_name": "spider", "guid": 3375}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find all the phone numbers.", "sql": "SELECT customer_phone FROM available_policies", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_phone FROM available_policies", "query_toks": ["SELECT", "customer_phone", "FROM", "available_policies"], "query_toks_no_value": ["select", "customer_phone", "from", "available_policies"], "question": "Find all the phone numbers.", "question_toks": ["Find", "all", "the", "phone", "numbers", "."], "dataset_name": "spider", "guid": 3376}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Return the sum and average of all settlement amounts.", "sql": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "example": {"db_id": "insurance_fnol", "query": "SELECT sum(settlement_amount) ,  avg(settlement_amount) FROM settlements", "query_toks": ["SELECT", "sum", "(", "settlement_amount", ")", ",", "avg", "(", "settlement_amount", ")", "FROM", "settlements"], "query_toks_no_value": ["select", "sum", "(", "settlement_amount", ")", ",", "avg", "(", "settlement_amount", ")", "from", "settlements"], "question": "Return the sum and average of all settlement amounts.", "question_toks": ["Return", "the", "sum", "and", "average", "of", "all", "settlement", "amounts", "."], "dataset_name": "spider", "guid": 3377}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of banks in the state of New York?", "sql": "SELECT bname FROM bank WHERE state  =  'New York'", "example": {"db_id": "loan_1", "query": "SELECT bname FROM bank WHERE state  =  'New York'", "query_toks": ["SELECT", "bname", "FROM", "bank", "WHERE", "state", "=", "'New", "York", "'"], "query_toks_no_value": ["select", "bname", "from", "bank", "where", "state", "=", "value"], "question": "What are the names of banks in the state of New York?", "question_toks": ["What", "are", "the", "names", "of", "banks", "in", "the", "state", "of", "New", "York", "?"], "dataset_name": "spider", "guid": 3378}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?", "sql": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)", "query_toks": ["SELECT", "T1.name", ",", "T2.balance", "+", "T3.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "WHERE", "T3.balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "balance", "+", "t3", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "where", "t3", ".", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")"], "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?", "question_toks": ["What", "are", "the", "names", "and", "sum", "of", "checking", "and", "savings", "balances", "for", "accounts", "with", "savings", "balances", "higher", "than", "the", "average", "savings", "balance", "?"], "dataset_name": "spider", "guid": 3379}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name and id of accounts whose checking balance is below the maximum checking balance.", "sql": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "query_toks": ["SELECT", "T1.custid", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", "<", "(", "SELECT", "max", "(", "balance", ")", "FROM", "checking", ")"], "query_toks_no_value": ["select", "t1", ".", "custid", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", "<", "(", "select", "max", "(", "balance", ")", "from", "checking", ")"], "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.", "question_toks": ["Find", "the", "name", "and", "id", "of", "accounts", "whose", "checking", "balance", "is", "below", "the", "maximum", "checking", "balance", "."], "dataset_name": "spider", "guid": 3380}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Which payment method is used the most often?", "sql": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Payment_Method_Code", "FROM", "Payments", "GROUP", "BY", "Payment_Method_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method_code", "from", "payments", "group", "by", "payment_method_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which payment method is used the most often?", "question_toks": ["Which", "payment", "method", "is", "used", "the", "most", "often", "?"], "dataset_name": "spider", "guid": 3381}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | List the names of products that are not in any event.", "sql": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Name FROM Products WHERE Product_ID NOT IN (SELECT Product_ID FROM Products_in_Events)", "query_toks": ["SELECT", "Product_Name", "FROM", "Products", "WHERE", "Product_ID", "NOT", "IN", "(", "SELECT", "Product_ID", "FROM", "Products_in_Events", ")"], "query_toks_no_value": ["select", "product_name", "from", "products", "where", "product_id", "not", "in", "(", "select", "product_id", "from", "products_in_events", ")"], "question": "List the names of products that are not in any event.", "question_toks": ["List", "the", "names", "of", "products", "that", "are", "not", "in", "any", "event", "."], "dataset_name": "spider", "guid": 3382}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = \"Upgrade a policy\"", "example": {"db_id": "insurance_fnol", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"Close a policy\" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id JOIN services AS t3 ON t2.service_id  =  t3.service_id WHERE t3.service_name  =  \"New policy application\"", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "services", "AS", "t3", "ON", "t2.service_id", "=", "t3.service_id", "WHERE", "t3.service_name", "=", "``", "Close", "a", "policy", "''", "INTERSECT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "services", "AS", "t3", "ON", "t2.service_id", "=", "t3.service_id", "WHERE", "t3.service_name", "=", "``", "New", "policy", "application", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "services", "as", "t3", "on", "t2", ".", "service_id", "=", "t3", ".", "service_id", "where", "t3", ".", "service_name", "=", "value", "intersect", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "services", "as", "t3", "on", "t2", ".", "service_id", "=", "t3", ".", "service_id", "where", "t3", ".", "service_name", "=", "value"], "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.", "question_toks": ["Which", "customers", "have", "used", "both", "the", "service", "named", "``", "Close", "a", "policy", "''", "and", "the", "service", "named", "``", "Upgrade", "a", "policy", "''", "?", "Give", "me", "the", "customer", "names", "."], "dataset_name": "spider", "guid": 3383}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What are the names of the customers and staff members?", "sql": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers UNION SELECT staff_details FROM staff", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "UNION", "SELECT", "staff_details", "FROM", "staff"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "union", "select", "staff_details", "from", "staff"], "question": "What are the names of the customers and staff members?", "question_toks": ["What", "are", "the", "names", "of", "the", "customers", "and", "staff", "members", "?"], "dataset_name": "spider", "guid": 3384}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the the customer details and id for the customers who had more than one policy.", "sql": "SELECT T1.customer_details , T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING count(*) > 1", "example": {"db_id": "insurance_policies", "query": "SELECT T1.customer_details ,  T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id  =  T2.Customer_id GROUP BY T1.customer_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.customer_details", ",", "T1.customer_id", "FROM", "Customers", "AS", "T1", "JOIN", "Customer_Policies", "AS", "T2", "ON", "T1.Customer_id", "=", "T2.Customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_details", ",", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "customer_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the the customer details and id for the customers who had more than one policy.", "question_toks": ["Find", "the", "the", "customer", "details", "and", "id", "for", "the", "customers", "who", "had", "more", "than", "one", "policy", "."], "dataset_name": "spider", "guid": 3385}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT avg(balance) FROM savings)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "checking", ")", "INTERSECT", "SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", "<", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "checking", ")", "intersect", "select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", "<", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")"], "question": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.", "question_toks": ["Find", "the", "names", "of", "accounts", "whose", "checking", "balance", "is", "above", "the", "average", "checking", "balance", ",", "but", "savings", "balance", "is", "below", "the", "average", "savings", "balance", "."], "dataset_name": "spider", "guid": 3386}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which policy type appears most frequently in the available policies?", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_fnol", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which policy type appears most frequently in the available policies?", "question_toks": ["Which", "policy", "type", "appears", "most", "frequently", "in", "the", "available", "policies", "?"], "dataset_name": "spider", "guid": 3387}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the number of distinct stages in claim processing.", "sql": "SELECT count(*) FROM claims_processing_stages", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT count(*) FROM claims_processing_stages", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "claims_processing_stages"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "claims_processing_stages"], "question": "Find the number of distinct stages in claim processing.", "question_toks": ["Find", "the", "number", "of", "distinct", "stages", "in", "claim", "processing", "."], "dataset_name": "spider", "guid": 3388}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Return the distinct customer details.", "sql": "SELECT DISTINCT customer_details FROM Customers", "example": {"db_id": "insurance_policies", "query": "SELECT DISTINCT customer_details FROM Customers", "query_toks": ["SELECT", "DISTINCT", "customer_details", "FROM", "Customers"], "query_toks_no_value": ["select", "distinct", "customer_details", "from", "customers"], "question": "Return the distinct customer details.", "question_toks": ["Return", "the", "distinct", "customer", "details", "."], "dataset_name": "spider", "guid": 3389}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Give me a list of all the service names sorted alphabetically.", "sql": "SELECT service_name FROM services ORDER BY service_name", "example": {"db_id": "insurance_fnol", "query": "SELECT service_name FROM services ORDER BY service_name", "query_toks": ["SELECT", "service_name", "FROM", "services", "ORDER", "BY", "service_name"], "query_toks_no_value": ["select", "service_name", "from", "services", "order", "by", "service_name"], "question": "Give me a list of all the service names sorted alphabetically.", "question_toks": ["Give", "me", "a", "list", "of", "all", "the", "service", "names", "sorted", "alphabetically", "."], "dataset_name": "spider", "guid": 3390}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the total saving balance for each account name.", "sql": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "example": {"db_id": "small_bank_1", "query": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name", "query_toks": ["SELECT", "sum", "(", "T2.balance", ")", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "GROUP", "BY", "T1.name"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "balance", ")", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "group", "by", "t1", ".", "name"], "question": "Find the total saving balance for each account name.", "question_toks": ["Find", "the", "total", "saving", "balance", "for", "each", "account", "name", "."], "dataset_name": "spider", "guid": 3391}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the names of the customers who have an deputy policy.", "sql": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = \"Deputy\"", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"", "query_toks": ["SELECT", "DISTINCT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.policy_type_code", "=", "``", "Deputy", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "policy_type_code", "=", "value"], "question": "Find the names of the customers who have an deputy policy.", "question_toks": ["Find", "the", "names", "of", "the", "customers", "who", "have", "an", "deputy", "policy", "."], "dataset_name": "spider", "guid": 3392}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Find the names of customers who have no policies associated.", "sql": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id", "query_toks": ["SELECT", "customer_details", "FROM", "customers", "EXCEPT", "SELECT", "t2.customer_details", "FROM", "policies", "AS", "t1", "JOIN", "customers", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id"], "query_toks_no_value": ["select", "customer_details", "from", "customers", "except", "select", "t2", ".", "customer_details", "from", "policies", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "Find the names of customers who have no policies associated.", "question_toks": ["Find", "the", "names", "of", "customers", "who", "have", "no", "policies", "associated", "."], "dataset_name": "spider", "guid": 3393}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers who do not have saving accounts?", "sql": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "EXCEPT", "SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'saving", "'"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "except", "select", "cust_name", "from", "customer", "where", "acc_type", "=", "value"], "question": "What are the names of customers who do not have saving accounts?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "do", "not", "have", "saving", "accounts", "?"], "dataset_name": "spider", "guid": 3394}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of banks that have loaned money to customers with credit scores below 100?", "sql": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100", "example": {"db_id": "loan_1", "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100", "query_toks": ["SELECT", "T2.bname", "FROM", "loan", "AS", "T1", "JOIN", "bank", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "customer", "AS", "T3", "ON", "T1.cust_id", "=", "T3.cust_id", "WHERE", "T3.credit_score", "<", "100"], "query_toks_no_value": ["select", "t2", ".", "bname", "from", "loan", "as", "t1", "join", "bank", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "customer", "as", "t3", "on", "t1", ".", "cust_id", "=", "t3", ".", "cust_id", "where", "t3", ".", "credit_score", "<", "value"], "question": "What are the names of banks that have loaned money to customers with credit scores below 100?", "question_toks": ["What", "are", "the", "names", "of", "banks", "that", "have", "loaned", "money", "to", "customers", "with", "credit", "scores", "below", "100", "?"], "dataset_name": "spider", "guid": 3395}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?", "sql": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)", "query_toks": ["SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", ">", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "checking", ")", "INTERSECT", "SELECT", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", "<", "(", "SELECT", "avg", "(", "balance", ")", "FROM", "savings", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", ">", "(", "select", "avg", "(", "balance", ")", "from", "checking", ")", "intersect", "select", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", "<", "(", "select", "avg", "(", "balance", ")", "from", "savings", ")"], "question": "What are the names of accounts with checking balances greater than the average checking balance and savings balances below the average savings balance?", "question_toks": ["What", "are", "the", "names", "of", "accounts", "with", "checking", "balances", "greater", "than", "the", "average", "checking", "balance", "and", "savings", "balances", "below", "the", "average", "savings", "balance", "?"], "dataset_name": "spider", "guid": 3396}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?", "sql": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "example": {"db_id": "small_bank_1", "query": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)", "query_toks": ["SELECT", "T1.custid", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T2.balance", "<", "(", "SELECT", "max", "(", "balance", ")", "FROM", "checking", ")"], "query_toks_no_value": ["select", "t1", ".", "custid", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t2", ".", "balance", "<", "(", "select", "max", "(", "balance", ")", "from", "checking", ")"], "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?", "question_toks": ["What", "are", "the", "customer", "id", "and", "name", "corresponding", "to", "accounts", "with", "a", "checking", "balance", "less", "than", "the", "largest", "checking", "balance", "?"], "dataset_name": "spider", "guid": 3397}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the average credit score for customers who have never taken a loan?", "sql": "SELECT AVG(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)", "example": {"db_id": "loan_1", "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)", "query_toks": ["SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", "WHERE", "cust_id", "NOT", "IN", "(", "SELECT", "cust_id", "FROM", "loan", ")"], "query_toks_no_value": ["select", "avg", "(", "credit_score", ")", "from", "customer", "where", "cust_id", "not", "in", "(", "select", "cust_id", "from", "loan", ")"], "question": "What is the average credit score for customers who have never taken a loan?", "question_toks": ["What", "is", "the", "average", "credit", "score", "for", "customers", "who", "have", "never", "taken", "a", "loan", "?"], "dataset_name": "spider", "guid": 3398}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Tell me the types of the policy used by the customer named \"Dayana Robel\".", "sql": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = \"Dayana Robel\"", "example": {"db_id": "insurance_fnol", "query": "SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id JOIN available_policies AS t3 ON t2.policy_id  =  t3.policy_id WHERE t1.customer_name  =  \"Dayana Robel\"", "query_toks": ["SELECT", "DISTINCT", "t3.policy_type_code", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "available_policies", "AS", "t3", "ON", "t2.policy_id", "=", "t3.policy_id", "WHERE", "t1.customer_name", "=", "``", "Dayana", "Robel", "''"], "query_toks_no_value": ["select", "distinct", "t3", ".", "policy_type_code", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "available_policies", "as", "t3", "on", "t2", ".", "policy_id", "=", "t3", ".", "policy_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Tell me the types of the policy used by the customer named \"Dayana Robel\".", "question_toks": ["Tell", "me", "the", "types", "of", "the", "policy", "used", "by", "the", "customer", "named", "``", "Dayana", "Robel", "''", "."], "dataset_name": "spider", "guid": 3399}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | What are the names and type codes of products?", "sql": "SELECT Product_Name, Product_Type_Code FROM Products", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Name ,  Product_Type_Code FROM Products", "query_toks": ["SELECT", "Product_Name", ",", "Product_Type_Code", "FROM", "Products"], "query_toks_no_value": ["select", "product_name", ",", "product_type_code", "from", "products"], "question": "What are the names and type codes of products?", "question_toks": ["What", "are", "the", "names", "and", "type", "codes", "of", "products", "?"], "dataset_name": "spider", "guid": 3400}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What is the name of the bank branch with the greatest number of customers?", "sql": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "example": {"db_id": "loan_1", "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1", "query_toks": ["SELECT", "bname", "FROM", "bank", "ORDER", "BY", "no_of_customers", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "bname", "from", "bank", "order", "by", "no_of_customers", "desc", "limit", "value"], "question": "What is the name of the bank branch with the greatest number of customers?", "question_toks": ["What", "is", "the", "name", "of", "the", "bank", "branch", "with", "the", "greatest", "number", "of", "customers", "?"], "dataset_name": "spider", "guid": 3401}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.", "sql": "SELECT Amount_Settled, Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Amount_Settled ,  Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1", "query_toks": ["SELECT", "Amount_Settled", ",", "Amount_Claimed", "FROM", "Claims", "ORDER", "BY", "Amount_Claimed", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "amount_settled", ",", "amount_claimed", "from", "claims", "order", "by", "amount_claimed", "desc", "limit", "value"], "question": "Find the settlement amount of the claim with the largest claim amount. Show both the settlement amount and claim amount.", "question_toks": ["Find", "the", "settlement", "amount", "of", "the", "claim", "with", "the", "largest", "claim", "amount", ".", "Show", "both", "the", "settlement", "amount", "and", "claim", "amount", "."], "dataset_name": "spider", "guid": 3402}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.", "sql": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT count(*) ,  T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.claim_id", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.claim_id", "=", "T2.claim_id", "GROUP", "BY", "T1.claim_id", "ORDER", "BY", "T1.Date_Claim_Settled", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "claim_id", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "order", "by", "t1", ".", "date_claim_settled", "desc", "limit", "value"], "question": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.", "question_toks": ["How", "many", "settlements", "were", "made", "on", "the", "claim", "with", "the", "most", "recent", "claim", "settlement", "date", "?", "List", "the", "number", "and", "the", "claim", "id", "."], "dataset_name": "spider", "guid": 3403}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Find the policy type used by more than 4 customers.", "sql": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "example": {"db_id": "insurance_fnol", "query": "SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING count(*)  >  4", "query_toks": ["SELECT", "policy_type_code", "FROM", "available_policies", "GROUP", "BY", "policy_type_code", "HAVING", "count", "(", "*", ")", ">", "4"], "query_toks_no_value": ["select", "policy_type_code", "from", "available_policies", "group", "by", "policy_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the policy type used by more than 4 customers.", "question_toks": ["Find", "the", "policy", "type", "used", "by", "more", "than", "4", "customers", "."], "dataset_name": "spider", "guid": 3404}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | In how many different states are banks located?", "sql": "SELECT count(DISTINCT state) FROM bank", "example": {"db_id": "loan_1", "query": "SELECT count(DISTINCT state) FROM bank", "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "bank"], "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "bank"], "question": "In how many different states are banks located?", "question_toks": ["In", "how", "many", "different", "states", "are", "banks", "located", "?"], "dataset_name": "spider", "guid": 3405}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Find the number of settlements each claim corresponds to. Show the number together with the claim id.", "sql": "SELECT T1.Claim_id , count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id", "example": {"db_id": "insurance_policies", "query": "SELECT T1.Claim_id ,  count(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id  =  T2.claim_id GROUP BY T1.claim_id", "query_toks": ["SELECT", "T1.Claim_id", ",", "count", "(", "*", ")", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.claim_id", "=", "T2.claim_id", "GROUP", "BY", "T1.claim_id"], "query_toks_no_value": ["select", "t1", ".", "claim_id", ",", "count", "(", "*", ")", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id"], "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.", "question_toks": ["Find", "the", "number", "of", "settlements", "each", "claim", "corresponds", "to", ".", "Show", "the", "number", "together", "with", "the", "claim", "id", "."], "dataset_name": "spider", "guid": 3406}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | What are the names of customers who have taken both Mortgage and Auto loans?", "sql": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'", "example": {"db_id": "loan_1", "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'", "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "loan_type", "=", "'Mortgages", "'", "INTERSECT", "SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "loan_type", "=", "'Auto", "'"], "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "loan_type", "=", "value", "intersect", "select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "loan_type", "=", "value"], "question": "What are the names of customers who have taken both Mortgage and Auto loans?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "taken", "both", "Mortgage", "and", "Auto", "loans", "?"], "dataset_name": "spider", "guid": 3407}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | How many claim processing stages are there in total?", "sql": "SELECT count(*) FROM claims_processing_stages", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT count(*) FROM claims_processing_stages", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "claims_processing_stages"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "claims_processing_stages"], "question": "How many claim processing stages are there in total?", "question_toks": ["How", "many", "claim", "processing", "stages", "are", "there", "in", "total", "?"], "dataset_name": "spider", "guid": 3408}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?", "sql": "SELECT t2.date_opened, t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "example": {"db_id": "insurance_fnol", "query": "SELECT t2.date_opened ,  t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"", "query_toks": ["SELECT", "t2.date_opened", ",", "t2.date_closed", "FROM", "customers", "AS", "t1", "JOIN", "customers_policies", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.customer_name", "LIKE", "``", "%", "Diana", "%", "''"], "query_toks_no_value": ["select", "t2", ".", "date_opened", ",", "t2", ".", "date_closed", "from", "customers", "as", "t1", "join", "customers_policies", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "like", "value"], "question": "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?", "question_toks": ["What", "are", "the", "open", "and", "close", "dates", "of", "all", "the", "policies", "used", "by", "the", "customer", "who", "have", "``", "Diana", "''", "in", "part", "of", "their", "names", "?"], "dataset_name": "spider", "guid": 3409}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | What are the total amount and average amount paid in claim headers?", "sql": "SELECT sum(amount_piad) , avg(amount_piad) FROM claim_headers", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT sum(amount_piad) ,  avg(amount_piad) FROM claim_headers", "query_toks": ["SELECT", "sum", "(", "amount_piad", ")", ",", "avg", "(", "amount_piad", ")", "FROM", "claim_headers"], "query_toks_no_value": ["select", "sum", "(", "amount_piad", ")", ",", "avg", "(", "amount_piad", ")", "from", "claim_headers"], "question": "What are the total amount and average amount paid in claim headers?", "question_toks": ["What", "are", "the", "total", "amount", "and", "average", "amount", "paid", "in", "claim", "headers", "?"], "dataset_name": "spider", "guid": 3410}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | What is the sum of checking and savings balances for all customers, ordered by the total balance?", "sql": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance", "example": {"db_id": "small_bank_1", "query": "SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T1.balance + T2.balance", "query_toks": ["SELECT", "T1.balance", "+", "T2.balance", "FROM", "checking", "AS", "T1", "JOIN", "savings", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "ORDER", "BY", "T1.balance", "+", "T2.balance"], "query_toks_no_value": ["select", "t1", ".", "balance", "+", "t2", ".", "balance", "from", "checking", "as", "t1", "join", "savings", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "order", "by", "t1", ".", "balance", "+", "t2", ".", "balance"], "question": "What is the sum of checking and savings balances for all customers, ordered by the total balance?", "question_toks": ["What", "is", "the", "sum", "of", "checking", "and", "savings", "balances", "for", "all", "customers", ",", "ordered", "by", "the", "total", "balance", "?"], "dataset_name": "spider", "guid": 3411}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name, checking balance and saving balance of all accounts in the bank.", "sql": "SELECT T2.balance , T3.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid"], "question": "Find the name, checking balance and saving balance of all accounts in the bank.", "question_toks": ["Find", "the", "name", ",", "checking", "balance", "and", "saving", "balance", "of", "all", "accounts", "in", "the", "bank", "."], "dataset_name": "spider", "guid": 3412}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Which claim processing stage has the most claims? Show the claim status name.", "sql": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.claim_status_name", "FROM", "claims_processing", "AS", "t1", "JOIN", "claims_processing_stages", "AS", "t2", "ON", "t1.claim_stage_id", "=", "t2.claim_stage_id", "GROUP", "BY", "t1.claim_stage_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "claim_status_name", "from", "claims_processing", "as", "t1", "join", "claims_processing_stages", "as", "t2", "on", "t1", ".", "claim_stage_id", "=", "t2", ".", "claim_stage_id", "group", "by", "t1", ".", "claim_stage_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which claim processing stage has the most claims? Show the claim status name.", "question_toks": ["Which", "claim", "processing", "stage", "has", "the", "most", "claims", "?", "Show", "the", "claim", "status", "name", "."], "dataset_name": "spider", "guid": 3413}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | List the name of products in ascending order of price.", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "example": {"db_id": "solvency_ii", "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "query_toks": ["SELECT", "Product_Name", "FROM", "Products", "ORDER", "BY", "Product_Price", "ASC"], "query_toks_no_value": ["select", "product_name", "from", "products", "order", "by", "product_price", "asc"], "question": "List the name of products in ascending order of price.", "question_toks": ["List", "the", "name", "of", "products", "in", "ascending", "order", "of", "price", "."], "dataset_name": "spider", "guid": 3414}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the total amount of loans offered by each bank branch.", "sql": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname", "example": {"db_id": "loan_1", "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname", "query_toks": ["SELECT", "sum", "(", "amount", ")", ",", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "GROUP", "BY", "T1.bname"], "query_toks_no_value": ["select", "sum", "(", "amount", ")", ",", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "group", "by", "t1", ".", "bname"], "question": "Find the total amount of loans offered by each bank branch.", "question_toks": ["Find", "the", "total", "amount", "of", "loans", "offered", "by", "each", "bank", "branch", "."], "dataset_name": "spider", "guid": 3415}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the balance of the checking account belonging to an owner whose name contains 'ee'.", "sql": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'", "query_toks": ["SELECT", "T2.balance", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "WHERE", "T1.name", "LIKE", "'", "%", "ee", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "balance", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "where", "t1", ".", "name", "like", "value"], "question": "Find the balance of the checking account belonging to an owner whose name contains 'ee'.", "question_toks": ["Find", "the", "balance", "of", "the", "checking", "account", "belonging", "to", "an", "owner", "whose", "name", "contains", "'ee", "'", "."], "dataset_name": "spider", "guid": 3416}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the branch names of banks in the New York state.", "sql": "SELECT bname FROM bank WHERE state  =  'New York'", "example": {"db_id": "loan_1", "query": "SELECT bname FROM bank WHERE state  =  'New York'", "query_toks": ["SELECT", "bname", "FROM", "bank", "WHERE", "state", "=", "'New", "York", "'"], "query_toks_no_value": ["select", "bname", "from", "bank", "where", "state", "=", "value"], "question": "Find the branch names of banks in the New York state.", "question_toks": ["Find", "the", "branch", "names", "of", "banks", "in", "the", "New", "York", "state", "."], "dataset_name": "spider", "guid": 3417}}
{"text": "Ref_Feature_Types: feature_type_code, feature_type_name; Ref_Property_Types: property_type_code, property_type_description; Other_Available_Features: feature_id, feature_type_code, feature_name, feature_description; Properties: property_id, property_type_code, date_on_market, date_sold, property_name, property_address, room_count, vendor_requested_price, buyer_offered_price, agreed_selling_price; Other_Property_Features: property_id, feature_id, property_feature_description | What are the names of properties that are either houses or apartments with more than 1 room?", "sql": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "example": {"db_id": "real_estate_properties", "query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1", "query_toks": ["SELECT", "property_name", "FROM", "Properties", "WHERE", "property_type_code", "=", "``", "House", "''", "UNION", "SELECT", "property_name", "FROM", "Properties", "WHERE", "property_type_code", "=", "``", "Apartment", "''", "AND", "room_count", ">", "1"], "query_toks_no_value": ["select", "property_name", "from", "properties", "where", "property_type_code", "=", "value", "union", "select", "property_name", "from", "properties", "where", "property_type_code", "=", "value", "and", "room_count", ">", "value"], "question": "What are the names of properties that are either houses or apartments with more than 1 room?", "question_toks": ["What", "are", "the", "names", "of", "properties", "that", "are", "either", "houses", "or", "apartments", "with", "more", "than", "1", "room", "?"], "dataset_name": "spider", "guid": 3418}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | What are the method, date and amount of each payment? Sort the list in ascending order of date.", "sql": "SELECT Payment_Method_Code , Date_Payment_Made , Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "example": {"db_id": "insurance_policies", "query": "SELECT Payment_Method_Code ,  Date_Payment_Made ,  Amount_Payment FROM Payments ORDER BY Date_Payment_Made ASC", "query_toks": ["SELECT", "Payment_Method_Code", ",", "Date_Payment_Made", ",", "Amount_Payment", "FROM", "Payments", "ORDER", "BY", "Date_Payment_Made", "ASC"], "query_toks_no_value": ["select", "payment_method_code", ",", "date_payment_made", ",", "amount_payment", "from", "payments", "order", "by", "date_payment_made", "asc"], "question": "What are the method, date and amount of each payment? Sort the list in ascending order of date.", "question_toks": ["What", "are", "the", "method", ",", "date", "and", "amount", "of", "each", "payment", "?", "Sort", "the", "list", "in", "ascending", "order", "of", "date", "."], "dataset_name": "spider", "guid": 3419}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name and checking balance of the account with the lowest saving balance.", "sql": "SELECT T2.balance , T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1", "query_toks": ["SELECT", "T2.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T3.balance", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t3", ".", "balance", "limit", "value"], "question": "Find the name and checking balance of the account with the lowest saving balance.", "question_toks": ["Find", "the", "name", "and", "checking", "balance", "of", "the", "account", "with", "the", "lowest", "saving", "balance", "."], "dataset_name": "spider", "guid": 3420}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | Find the number of customers in the banks at New York City.", "sql": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'", "example": {"db_id": "loan_1", "query": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'", "query_toks": ["SELECT", "sum", "(", "no_of_customers", ")", "FROM", "bank", "WHERE", "city", "=", "'New", "York", "City", "'"], "query_toks_no_value": ["select", "sum", "(", "no_of_customers", ")", "from", "bank", "where", "city", "=", "value"], "question": "Find the number of customers in the banks at New York City.", "question_toks": ["Find", "the", "number", "of", "customers", "in", "the", "banks", "at", "New", "York", "City", "."], "dataset_name": "spider", "guid": 3421}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.", "sql": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "example": {"db_id": "small_bank_1", "query": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC", "query_toks": ["SELECT", "T2.balance", ",", "T3.balance", ",", "T1.name", "FROM", "accounts", "AS", "T1", "JOIN", "checking", "AS", "T2", "ON", "T1.custid", "=", "T2.custid", "JOIN", "savings", "AS", "T3", "ON", "T1.custid", "=", "T3.custid", "ORDER", "BY", "T2.balance", "+", "T3.balance", "DESC"], "query_toks_no_value": ["select", "t2", ".", "balance", ",", "t3", ".", "balance", ",", "t1", ".", "name", "from", "accounts", "as", "t1", "join", "checking", "as", "t2", "on", "t1", ".", "custid", "=", "t2", ".", "custid", "join", "savings", "as", "t3", "on", "t1", ".", "custid", "=", "t3", ".", "custid", "order", "by", "t2", ".", "balance", "+", "t3", ".", "balance", "desc"], "question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.", "question_toks": ["Find", "the", "name", ",", "checking", "balance", "and", "savings", "balance", "of", "all", "accounts", "in", "the", "bank", "sorted", "by", "their", "total", "checking", "and", "savings", "balance", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 3422}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which customers do not have a first notification of loss record? Give me the customer names.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id", "example": {"db_id": "insurance_fnol", "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id  =  t2.customer_id", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "EXCEPT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "first_notification_of_loss", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "except", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "first_notification_of_loss", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "Which customers do not have a first notification of loss record? Give me the customer names.", "question_toks": ["Which", "customers", "do", "not", "have", "a", "first", "notification", "of", "loss", "record", "?", "Give", "me", "the", "customer", "names", "."], "dataset_name": "spider", "guid": 3423}}
{"text": "ACCOUNTS: custid, name; SAVINGS: custid, balance; CHECKING: custid, balance | Find the average checking balance.", "sql": "SELECT AVG(balance) FROM checking", "example": {"db_id": "small_bank_1", "query": "SELECT avg(balance) FROM checking", "query_toks": ["SELECT", "avg", "(", "balance", ")", "FROM", "checking"], "query_toks_no_value": ["select", "avg", "(", "balance", ")", "from", "checking"], "question": "Find the average checking balance.", "question_toks": ["Find", "the", "average", "checking", "balance", "."], "dataset_name": "spider", "guid": 3424}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.", "sql": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "example": {"db_id": "insurance_policies", "query": "SELECT T1.claim_id ,  T1.date_claim_made ,  T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id  =  T2.Claim_id GROUP BY T1.claim_id HAVING count(*)  =  1", "query_toks": ["SELECT", "T1.claim_id", ",", "T1.date_claim_made", ",", "T1.Date_Claim_Settled", "FROM", "Claims", "AS", "T1", "JOIN", "Settlements", "AS", "T2", "ON", "T1.Claim_id", "=", "T2.Claim_id", "GROUP", "BY", "T1.claim_id", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "claim_id", ",", "t1", ".", "date_claim_made", ",", "t1", ".", "date_claim_settled", "from", "claims", "as", "t1", "join", "settlements", "as", "t2", "on", "t1", ".", "claim_id", "=", "t2", ".", "claim_id", "group", "by", "t1", ".", "claim_id", "having", "count", "(", "*", ")", "=", "value"], "question": "List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.", "question_toks": ["List", "the", "date", "the", "claim", "was", "made", ",", "the", "date", "it", "was", "settled", "and", "the", "amount", "settled", "for", "all", "the", "claims", "which", "had", "exactly", "one", "settlement", "."], "dataset_name": "spider", "guid": 3425}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | Of all the claims, what was the earliest date when any claim was made?", "sql": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "example": {"db_id": "insurance_policies", "query": "SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made ASC LIMIT 1", "query_toks": ["SELECT", "Date_Claim_Made", "FROM", "Claims", "ORDER", "BY", "Date_Claim_Made", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "date_claim_made", "from", "claims", "order", "by", "date_claim_made", "asc", "limit", "value"], "question": "Of all the claims, what was the earliest date when any claim was made?", "question_toks": ["Of", "all", "the", "claims", ",", "what", "was", "the", "earliest", "date", "when", "any", "claim", "was", "made", "?"], "dataset_name": "spider", "guid": 3426}}
{"text": "Customers: Customer_ID, Customer_Details; Customer_Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claims: Claim_ID, Policy_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled; Settlements: Settlement_ID, Claim_ID, Date_Claim_Made, Date_Claim_Settled, Amount_Claimed, Amount_Settled, Customer_Policy_ID; Payments: Payment_ID, Settlement_ID, Payment_Method_Code, Date_Payment_Made, Amount_Payment | How many settlements are there in total?", "sql": "SELECT COUNT(*) FROM Settlements", "example": {"db_id": "insurance_policies", "query": "SELECT count(*) FROM Settlements", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Settlements"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "settlements"], "question": "How many settlements are there in total?", "question_toks": ["How", "many", "settlements", "are", "there", "in", "total", "?"], "dataset_name": "spider", "guid": 3427}}
{"text": "Addresses: Address_ID, address_details; Locations: Location_ID, Other_Details; Products: Product_ID, Product_Type_Code, Product_Name, Product_Price; Parties: Party_ID, Party_Details; Assets: Asset_ID, Other_Details; Channels: Channel_ID, Other_Details; Finances: Finance_ID, Other_Details; Events: Event_ID, Address_ID, Channel_ID, Event_Type_Code, Finance_ID, Location_ID; Products_in_Events: Product_in_Event_ID, Event_ID, Product_ID; Parties_in_Events: Party_ID, Event_ID, Role_Code | What is the average price for products?", "sql": "SELECT AVG(Product_Price) FROM Products", "example": {"db_id": "solvency_ii", "query": "SELECT avg(Product_Price) FROM Products", "query_toks": ["SELECT", "avg", "(", "Product_Price", ")", "FROM", "Products"], "query_toks_no_value": ["select", "avg", "(", "product_price", ")", "from", "products"], "question": "What is the average price for products?", "question_toks": ["What", "is", "the", "average", "price", "for", "products", "?"], "dataset_name": "spider", "guid": 3428}}
{"text": "Customers: Customer_ID, Customer_Details; Staff: Staff_ID, Staff_Details; Policies: Policy_ID, Customer_ID, Policy_Type_Code, Start_Date, End_Date; Claim_Headers: Claim_Header_ID, Claim_Status_Code, Claim_Type_Code, Policy_ID, Date_of_Claim, Date_of_Settlement, Amount_Claimed, Amount_Piad; Claims_Documents: Claim_ID, Document_Type_Code, Created_by_Staff_ID, Created_Date; Claims_Processing_Stages: Claim_Stage_ID, Next_Claim_Stage_ID, Claim_Status_Name, Claim_Status_Description; Claims_Processing: Claim_Processing_ID, Claim_ID, Claim_Outcome_Code, Claim_Stage_ID, Staff_ID | Count the number of distinct claim outcome codes.", "sql": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "example": {"db_id": "insurance_and_eClaims", "query": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing", "query_toks": ["SELECT", "count", "(", "DISTINCT", "claim_outcome_code", ")", "FROM", "claims_processing"], "query_toks_no_value": ["select", "count", "(", "distinct", "claim_outcome_code", ")", "from", "claims_processing"], "question": "Count the number of distinct claim outcome codes.", "question_toks": ["Count", "the", "number", "of", "distinct", "claim", "outcome", "codes", "."], "dataset_name": "spider", "guid": 3429}}
{"text": "bank: branch_ID, bname, no_of_customers, city, state; customer: cust_ID, cust_name, acc_type, acc_bal, no_of_loans, credit_score, branch_ID, state; loan: loan_ID, loan_type, cust_ID, branch_ID, amount | List the name of all customers sorted by their account balance in ascending order.", "sql": "SELECT cust_name FROM customer ORDER BY acc_bal", "example": {"db_id": "loan_1", "query": "SELECT cust_name FROM customer ORDER BY acc_bal", "query_toks": ["SELECT", "cust_name", "FROM", "customer", "ORDER", "BY", "acc_bal"], "query_toks_no_value": ["select", "cust_name", "from", "customer", "order", "by", "acc_bal"], "question": "List the name of all customers sorted by their account balance in ascending order.", "question_toks": ["List", "the", "name", "of", "all", "customers", "sorted", "by", "their", "account", "balance", "in", "ascending", "order", "."], "dataset_name": "spider", "guid": 3430}}
{"text": "Customers: Customer_ID, Customer_name; Services: Service_ID, Service_name; Available_Policies: Policy_ID, policy_type_code, Customer_Phone; Customers_Policies: Customer_ID, Policy_ID, Date_Opened, Date_Closed; First_Notification_of_Loss: FNOL_ID, Customer_ID, Policy_ID, Service_ID; Claims: Claim_ID, FNOL_ID, Effective_Date; Settlements: Settlement_ID, Claim_ID, Effective_Date, Settlement_Amount | Which services have been used more than twice in first notification of loss? Return the service name.", "sql": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING count(*) > 2", "example": {"db_id": "insurance_fnol", "query": "SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id  =  t2.service_id GROUP BY t1.service_id HAVING count(*)  >  2", "query_toks": ["SELECT", "t2.service_name", "FROM", "first_notification_of_loss", "AS", "t1", "JOIN", "services", "AS", "t2", "ON", "t1.service_id", "=", "t2.service_id", "GROUP", "BY", "t1.service_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t2", ".", "service_name", "from", "first_notification_of_loss", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_id", "=", "t2", ".", "service_id", "group", "by", "t1", ".", "service_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which services have been used more than twice in first notification of loss? Return the service name.", "question_toks": ["Which", "services", "have", "been", "used", "more", "than", "twice", "in", "first", "notification", "of", "loss", "?", "Return", "the", "service", "name", "."], "dataset_name": "spider", "guid": 3431}}