{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the codes of countries with more than 50 players?", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "example": {"db_id": "wta_1", "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "query_toks": ["SELECT", "country_code", "FROM", "players", "GROUP", "BY", "country_code", "HAVING", "count", "(", "*", ")", ">", "50"], "query_toks_no_value": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the codes of countries with more than 50 players?", "question_toks": ["What", "are", "the", "codes", "of", "countries", "with", "more", "than", "50", "players", "?"], "dataset_name": "spider", "guid": 1038}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.", "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"", "query_toks": ["SELECT", "College", "FROM", "match_season", "WHERE", "POSITION", "=", "``", "Midfielder", "''", "INTERSECT", "SELECT", "College", "FROM", "match_season", "WHERE", "POSITION", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "college", "from", "match_season", "where", "position", "=", "value", "intersect", "select", "college", "from", "match_season", "where", "position", "=", "value"], "question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.", "question_toks": ["Return", "the", "colleges", "that", "have", "players", "who", "play", "the", "Midfielder", "position", ",", "as", "well", "as", "players", "who", "play", "the", "Defender", "position", "."], "dataset_name": "spider", "guid": 1039}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the distinct position of players from college UCLA or Duke.", "sql": "SELECT DISTINCT POSITION FROM match_season WHERE College = \"UCLA\" OR College = \"Duke\"", "example": {"db_id": "match_season", "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"", "query_toks": ["SELECT", "DISTINCT", "POSITION", "FROM", "match_season", "WHERE", "College", "=", "``", "UCLA", "''", "OR", "College", "=", "``", "Duke", "''"], "query_toks_no_value": ["select", "distinct", "position", "from", "match_season", "where", "college", "=", "value", "or", "college", "=", "value"], "question": "Show the distinct position of players from college UCLA or Duke.", "question_toks": ["Show", "the", "distinct", "position", "of", "players", "from", "college", "UCLA", "or", "Duke", "."], "dataset_name": "spider", "guid": 1040}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Show the times of elimination by \"Punk\" or \"Orton\".", "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"", "example": {"db_id": "wrestler", "query": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"", "query_toks": ["SELECT", "TIME", "FROM", "elimination", "WHERE", "Eliminated_By", "=", "``", "Punk", "''", "OR", "Eliminated_By", "=", "``", "Orton", "''"], "query_toks_no_value": ["select", "time", "from", "elimination", "where", "eliminated_by", "=", "value", "or", "eliminated_by", "=", "value"], "question": "Show the times of elimination by \"Punk\" or \"Orton\".", "question_toks": ["Show", "the", "times", "of", "elimination", "by", "``", "Punk", "''", "or", "``", "Orton", "''", "."], "dataset_name": "spider", "guid": 1041}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Give the hometowns from which two or more gymnasts are from.", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2", "example": {"db_id": "gymnast", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "GROUP", "BY", "T2.Hometown", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "hometown", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Give the hometowns from which two or more gymnasts are from.", "question_toks": ["Give", "the", "hometowns", "from", "which", "two", "or", "more", "gymnasts", "are", "from", "."], "dataset_name": "spider", "guid": 1042}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | List the time of elimination of the wrestlers with largest days held.", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "example": {"db_id": "wrestler", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "query_toks": ["SELECT", "T1.Time", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "ORDER", "BY", "T2.Days_held", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "time", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "order", "by", "t2", ".", "days_held", "desc", "limit", "value"], "question": "List the time of elimination of the wrestlers with largest days held.", "question_toks": ["List", "the", "time", "of", "elimination", "of", "the", "wrestlers", "with", "largest", "days", "held", "."], "dataset_name": "spider", "guid": 1043}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the dates that have the 5 highest cloud cover rates and what are the rates?", "sql": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "example": {"db_id": "bike_1", "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "query_toks": ["SELECT", "date", ",", "cloud_cover", "FROM", "weather", "ORDER", "BY", "cloud_cover", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "date", ",", "cloud_cover", "from", "weather", "order", "by", "cloud_cover", "desc", "limit", "value"], "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?", "question_toks": ["What", "are", "the", "dates", "that", "have", "the", "5", "highest", "cloud", "cover", "rates", "and", "what", "are", "the", "rates", "?"], "dataset_name": "spider", "guid": 1044}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | List the names and origins of people who are not body builders.", "sql": "SELECT Name , birth_place FROM people EXCEPT SELECT T1.Name , T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id", "example": {"db_id": "body_builder", "query": "SELECT Name ,  birth_place FROM people EXCEPT SELECT T1.Name ,  T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id  =  T2.people_id", "query_toks": ["SELECT", "Name", ",", "birth_place", "FROM", "people", "EXCEPT", "SELECT", "T1.Name", ",", "T1.birth_place", "FROM", "people", "AS", "T1", "JOIN", "body_builder", "AS", "T2", "ON", "T1.people_id", "=", "T2.people_id"], "query_toks_no_value": ["select", "name", ",", "birth_place", "from", "people", "except", "select", "t1", ".", "name", ",", "t1", ".", "birth_place", "from", "people", "as", "t1", "join", "body_builder", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"], "question": "List the names and origins of people who are not body builders.", "question_toks": ["List", "the", "names", "and", "origins", "of", "people", "who", "are", "not", "body", "builders", "."], "dataset_name": "spider", "guid": 1045}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the official languages of the countries of players from Maryland or Duke college?", "sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = \"Maryland\" OR T2.College = \"Duke\"", "example": {"db_id": "match_season", "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"", "query_toks": ["SELECT", "T1.Official_native_language", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.College", "=", "``", "Maryland", "''", "OR", "T2.College", "=", "``", "Duke", "''"], "query_toks_no_value": ["select", "t1", ".", "official_native_language", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "college", "=", "value", "or", "t2", ".", "college", "=", "value"], "question": "What are the official languages of the countries of players from Maryland or Duke college?", "question_toks": ["What", "are", "the", "official", "languages", "of", "the", "countries", "of", "players", "from", "Maryland", "or", "Duke", "college", "?"], "dataset_name": "spider", "guid": 1046}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the total and maximum duration of trips with bike id 636?", "sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "example": {"db_id": "bike_1", "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "query_toks": ["SELECT", "sum", "(", "duration", ")", ",", "max", "(", "duration", ")", "FROM", "trip", "WHERE", "bike_id", "=", "636"], "query_toks_no_value": ["select", "sum", "(", "duration", ")", ",", "max", "(", "duration", ")", "from", "trip", "where", "bike_id", "=", "value"], "question": "What is the total and maximum duration of trips with bike id 636?", "question_toks": ["What", "is", "the", "total", "and", "maximum", "duration", "of", "trips", "with", "bike", "id", "636", "?"], "dataset_name": "spider", "guid": 1047}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show name, class, and date for all races.", "sql": "SELECT name ,  CLASS ,  date FROM race", "example": {"db_id": "race_track", "query": "SELECT name ,  CLASS ,  date FROM race", "query_toks": ["SELECT", "name", ",", "CLASS", ",", "date", "FROM", "race"], "query_toks_no_value": ["select", "name", ",", "class", ",", "date", "from", "race"], "question": "Show name, class, and date for all races.", "question_toks": ["Show", "name", ",", "class", ",", "and", "date", "for", "all", "races", "."], "dataset_name": "spider", "guid": 1048}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of all the Japanese constructors that have earned more than 5 points?", "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5", "example": {"db_id": "formula_1", "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5", "query_toks": ["SELECT", "T1.name", "FROM", "constructors", "AS", "T1", "JOIN", "constructorstandings", "AS", "T2", "ON", "T1.constructorid", "=", "T2.constructorid", "WHERE", "T1.nationality", "=", "``", "Japanese", "''", "AND", "T2.points", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "constructors", "as", "t1", "join", "constructorstandings", "as", "t2", "on", "t1", ".", "constructorid", "=", "t2", ".", "constructorid", "where", "t1", ".", "nationality", "=", "value", "and", "t2", ".", "points", ">", "value"], "question": "What are the names of all the Japanese constructors that have earned more than 5 points?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "Japanese", "constructors", "that", "have", "earned", "more", "than", "5", "points", "?"], "dataset_name": "spider", "guid": 1049}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the countries that have never participated in any friendly-type competitions?", "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", "example": {"db_id": "sports_competition", "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", "query_toks": ["SELECT", "country", "FROM", "competition", "EXCEPT", "SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Friendly", "'"], "query_toks_no_value": ["select", "country", "from", "competition", "except", "select", "country", "from", "competition", "where", "competition_type", "=", "value"], "question": "What are the countries that have never participated in any friendly-type competitions?", "question_toks": ["What", "are", "the", "countries", "that", "have", "never", "participated", "in", "any", "friendly-type", "competitions", "?"], "dataset_name": "spider", "guid": 1050}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | List the first name and birth date of all players from the country with code USA.", "sql": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "query_toks": ["SELECT", "first_name", ",", "birth_date", "FROM", "players", "WHERE", "country_code", "=", "'USA", "'"], "query_toks_no_value": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "value"], "question": "List the first name and birth date of all players from the country with code USA.", "question_toks": ["List", "the", "first", "name", "and", "birth", "date", "of", "all", "players", "from", "the", "country", "with", "code", "USA", "."], "dataset_name": "spider", "guid": 1051}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.", "sql": "SELECT DISTINCT T1.state , T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "DISTINCT", "T1.state", ",", "T1.enr", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "state", ",", "t1", ".", "enr", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "decision", "=", "value"], "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.", "question_toks": ["What", "is", "the", "state", "and", "enrollment", "of", "the", "colleges", "where", "have", "any", "students", "who", "got", "accepted", "in", "the", "tryout", "decision", "."], "dataset_name": "spider", "guid": 1052}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Show teams that have suffered more than three eliminations.", "sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3", "example": {"db_id": "wrestler", "query": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3", "query_toks": ["SELECT", "Team", "FROM", "elimination", "GROUP", "BY", "Team", "HAVING", "COUNT", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "team", "from", "elimination", "group", "by", "team", "having", "count", "(", "*", ")", ">", "value"], "question": "Show teams that have suffered more than three eliminations.", "question_toks": ["Show", "teams", "that", "have", "suffered", "more", "than", "three", "eliminations", "."], "dataset_name": "spider", "guid": 1053}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?", "sql": "SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename , T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "query_toks": ["SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Australian", "Grand", "Prix", "''", "EXCEPT", "SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Chinese", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "t3", ".", "forename", ",", "t3", ".", "surname", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value", "except", "select", "t3", ".", "forename", ",", "t3", ".", "surname", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value"], "question": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "all", "drivers", "who", "participated", "in", "the", "Australian", "Grand", "Prix", "but", "not", "the", "Chinese", "Grand", "Prix", "?"], "dataset_name": "spider", "guid": 1054}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?", "sql": "SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid , T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "query_toks": ["SELECT", "T2.driverid", ",", "T3.forename", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Australian", "Grand", "Prix", "''", "INTERSECT", "SELECT", "T2.driverid", ",", "T3.forename", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Chinese", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "t2", ".", "driverid", ",", "t3", ".", "forename", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value", "intersect", "select", "t2", ".", "driverid", ",", "t3", ".", "forename", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value"], "question": "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?", "question_toks": ["What", "is", "the", "id", "and", "first", "name", "of", "all", "the", "drivers", "who", "participated", "in", "the", "Australian", "Grand", "Prix", "and", "the", "Chinese", "Grand", "Prix", "?"], "dataset_name": "spider", "guid": 1055}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each zip code, return how many times max wind speed reached 25?", "sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "example": {"db_id": "bike_1", "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "query_toks": ["SELECT", "zip_code", ",", "count", "(", "*", ")", "FROM", "weather", "WHERE", "max_wind_Speed_mph", ">", "=", "25", "GROUP", "BY", "zip_code"], "query_toks_no_value": ["select", "zip_code", ",", "count", "(", "*", ")", "from", "weather", "where", "max_wind_speed_mph", ">", "=", "value", "group", "by", "zip_code"], "question": "For each zip code, return how many times max wind speed reached 25?", "question_toks": ["For", "each", "zip", "code", ",", "return", "how", "many", "times", "max", "wind", "speed", "reached", "25", "?"], "dataset_name": "spider", "guid": 1056}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the name of the stadium that has the maximum capacity.", "sql": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1", "example": {"db_id": "swimming", "query": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "stadium", "ORDER", "BY", "capacity", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "stadium", "order", "by", "capacity", "desc", "limit", "value"], "question": "Find the name of the stadium that has the maximum capacity.", "question_toks": ["Find", "the", "name", "of", "the", "stadium", "that", "has", "the", "maximum", "capacity", "."], "dataset_name": "spider", "guid": 1057}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the names of all the clubs ordered in descending alphabetical order?", "sql": "SELECT name FROM club ORDER BY name DESC", "example": {"db_id": "sports_competition", "query": "SELECT name FROM club ORDER BY name DESC", "query_toks": ["SELECT", "name", "FROM", "club", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "name", "from", "club", "order", "by", "name", "desc"], "question": "What are the names of all the clubs ordered in descending alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "clubs", "ordered", "in", "descending", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1058}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | For each position, what is the average number of points for players in that position?", "sql": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION", "example": {"db_id": "sports_competition", "query": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION", "query_toks": ["SELECT", "POSITION", ",", "avg", "(", "Points", ")", "FROM", "player", "GROUP", "BY", "POSITION"], "query_toks_no_value": ["select", "position", ",", "avg", "(", "points", ")", "from", "player", "group", "by", "position"], "question": "For each position, what is the average number of points for players in that position?", "question_toks": ["For", "each", "position", ",", "what", "is", "the", "average", "number", "of", "points", "for", "players", "in", "that", "position", "?"], "dataset_name": "spider", "guid": 1059}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the name, location, open year for all tracks with a seating higher than the average.", "sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "example": {"db_id": "race_track", "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "year_opened", "FROM", "track", "WHERE", "seating", ">", "(", "SELECT", "avg", "(", "seating", ")", "FROM", "track", ")"], "query_toks_no_value": ["select", "name", ",", "location", ",", "year_opened", "from", "track", "where", "seating", ">", "(", "select", "avg", "(", "seating", ")", "from", "track", ")"], "question": "Show the name, location, open year for all tracks with a seating higher than the average.", "question_toks": ["Show", "the", "name", ",", "location", ",", "open", "year", "for", "all", "tracks", "with", "a", "seating", "higher", "than", "the", "average", "."], "dataset_name": "spider", "guid": 1060}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the nationalities for which there are two or more people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "example": {"db_id": "poker_player", "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Nationality", "FROM", "people", "GROUP", "BY", "Nationality", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Return the nationalities for which there are two or more people.", "question_toks": ["Return", "the", "nationalities", "for", "which", "there", "are", "two", "or", "more", "people", "."], "dataset_name": "spider", "guid": 1061}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.", "sql": "SELECT DISTINCT driverid , STOP FROM pitstops WHERE duration < (SELECT max(duration) FROM pitstops WHERE raceid = 841)", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "query_toks": ["SELECT", "DISTINCT", "driverid", ",", "STOP", "FROM", "pitstops", "WHERE", "duration", "<", "(", "SELECT", "max", "(", "duration", ")", "FROM", "pitstops", "WHERE", "raceid", "=", "841", ")"], "query_toks_no_value": ["select", "distinct", "driverid", ",", "stop", "from", "pitstops", "where", "duration", "<", "(", "select", "max", "(", "duration", ")", "from", "pitstops", "where", "raceid", "=", "value", ")"], "question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.", "question_toks": ["Find", "the", "distinct", "driver", "id", "and", "the", "stop", "number", "of", "all", "drivers", "that", "have", "a", "shorter", "pit", "stop", "duration", "than", "some", "drivers", "in", "the", "race", "with", "id", "841", "."], "dataset_name": "spider", "guid": 1062}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each city, what is the highest latitude for its stations?", "sql": "SELECT city ,  max(lat) FROM station GROUP BY city", "example": {"db_id": "bike_1", "query": "SELECT city ,  max(lat) FROM station GROUP BY city", "query_toks": ["SELECT", "city", ",", "max", "(", "lat", ")", "FROM", "station", "GROUP", "BY", "city"], "query_toks_no_value": ["select", "city", ",", "max", "(", "lat", ")", "from", "station", "group", "by", "city"], "question": "For each city, what is the highest latitude for its stations?", "question_toks": ["For", "each", "city", ",", "what", "is", "the", "highest", "latitude", "for", "its", "stations", "?"], "dataset_name": "spider", "guid": 1063}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students, on average, does each college have enrolled?", "sql": "SELECT avg(enr) FROM College", "example": {"db_id": "soccer_2", "query": "SELECT avg(enr) FROM College", "query_toks": ["SELECT", "avg", "(", "enr", ")", "FROM", "College"], "query_toks_no_value": ["select", "avg", "(", "enr", ")", "from", "college"], "question": "How many students, on average, does each college have enrolled?", "question_toks": ["How", "many", "students", ",", "on", "average", ",", "does", "each", "college", "have", "enrolled", "?"], "dataset_name": "spider", "guid": 1064}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names and birth dates of people, ordered by their names in alphabetical order?", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "example": {"db_id": "poker_player", "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "query_toks": ["SELECT", "Name", ",", "Birth_Date", "FROM", "people", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc"], "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "question_toks": ["What", "are", "the", "names", "and", "birth", "dates", "of", "people", ",", "ordered", "by", "their", "names", "in", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1065}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | How many different position for players are listed?", "sql": "SELECT COUNT(DISTINCT position) FROM player", "example": {"db_id": "sports_competition", "query": "SELECT count(DISTINCT POSITION) FROM player", "query_toks": ["SELECT", "count", "(", "DISTINCT", "POSITION", ")", "FROM", "player"], "query_toks_no_value": ["select", "count", "(", "distinct", "position", ")", "from", "player"], "question": "How many different position for players are listed?", "question_toks": ["How", "many", "different", "position", "for", "players", "are", "listed", "?"], "dataset_name": "spider", "guid": 1066}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | List the names of members who did not participate in any round.", "sql": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)", "example": {"db_id": "decoration_competition", "query": "SELECT Name FROM member WHERE Member_ID NOT IN (SELECT Member_ID FROM round)", "query_toks": ["SELECT", "Name", "FROM", "member", "WHERE", "Member_ID", "NOT", "IN", "(", "SELECT", "Member_ID", "FROM", "round", ")"], "query_toks_no_value": ["select", "name", "from", "member", "where", "member_id", "not", "in", "(", "select", "member_id", "from", "round", ")"], "question": "List the names of members who did not participate in any round.", "question_toks": ["List", "the", "names", "of", "members", "who", "did", "not", "participate", "in", "any", "round", "."], "dataset_name": "spider", "guid": 1067}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What is the name of the body builder with the greatest body weight?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "example": {"db_id": "body_builder", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "query_toks": ["SELECT", "T2.Name", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Weight", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "weight", "desc", "limit", "value"], "question": "What is the name of the body builder with the greatest body weight?", "question_toks": ["What", "is", "the", "name", "of", "the", "body", "builder", "with", "the", "greatest", "body", "weight", "?"], "dataset_name": "spider", "guid": 1068}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the dates with a maximum temperature higher than 85?", "sql": "SELECT date FROM weather WHERE max_temperature_f  >  85", "example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE max_temperature_f  >  85", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "max_temperature_f", ">", "85"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "max_temperature_f", ">", "value"], "question": "What are the dates with a maximum temperature higher than 85?", "question_toks": ["What", "are", "the", "dates", "with", "a", "maximum", "temperature", "higher", "than", "85", "?"], "dataset_name": "spider", "guid": 1069}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?", "sql": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"", "example": {"db_id": "wrestler", "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"", "query_toks": ["SELECT", "Team", "FROM", "Elimination", "WHERE", "Eliminated_By", "=", "``", "Orton", "''", "INTERSECT", "SELECT", "Team", "FROM", "Elimination", "WHERE", "Eliminated_By", "=", "``", "Benjamin", "''"], "query_toks_no_value": ["select", "team", "from", "elimination", "where", "eliminated_by", "=", "value", "intersect", "select", "team", "from", "elimination", "where", "eliminated_by", "=", "value"], "question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?", "question_toks": ["What", "are", "the", "teams", "that", "have", "both", "wrestlers", "eliminated", "by", "Orton", "and", "wrestlers", "eliminated", "by", "Benjamin", "?"], "dataset_name": "spider", "guid": 1070}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | What is the name of the stadium which held the most events?", "sql": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "swimming", "query": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "stadium", "AS", "t1", "JOIN", "event", "AS", "t2", "ON", "t1.id", "=", "t2.stadium_id", "GROUP", "BY", "t2.stadium_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "stadium", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "group", "by", "t2", ".", "stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the stadium which held the most events?", "question_toks": ["What", "is", "the", "name", "of", "the", "stadium", "which", "held", "the", "most", "events", "?"], "dataset_name": "spider", "guid": 1071}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the types of every competition and in which countries are they located?", "sql": "SELECT Competition_type ,  Country FROM competition", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type ,  Country FROM competition", "query_toks": ["SELECT", "Competition_type", ",", "Country", "FROM", "competition"], "query_toks_no_value": ["select", "competition_type", ",", "country", "from", "competition"], "question": "What are the types of every competition and in which countries are they located?", "question_toks": ["What", "are", "the", "types", "of", "every", "competition", "and", "in", "which", "countries", "are", "they", "located", "?"], "dataset_name": "spider", "guid": 1072}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the positions of players whose average number of points scored by that position is larger than 20?", "sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20", "example": {"db_id": "sports_competition", "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20", "query_toks": ["SELECT", "POSITION", "FROM", "player", "GROUP", "BY", "name", "HAVING", "avg", "(", "Points", ")", ">", "=", "20"], "query_toks_no_value": ["select", "position", "from", "player", "group", "by", "name", "having", "avg", "(", "points", ")", ">", "=", "value"], "question": "What are the positions of players whose average number of points scored by that position is larger than 20?", "question_toks": ["What", "are", "the", "positions", "of", "players", "whose", "average", "number", "of", "points", "scored", "by", "that", "position", "is", "larger", "than", "20", "?"], "dataset_name": "spider", "guid": 1073}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the total number of clubs?", "sql": "SELECT count(*) FROM club", "example": {"db_id": "sports_competition", "query": "SELECT count(*) FROM club", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club"], "question": "What is the total number of clubs?", "question_toks": ["What", "is", "the", "total", "number", "of", "clubs", "?"], "dataset_name": "spider", "guid": 1074}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | List the earnings of poker players in descending order.", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "example": {"db_id": "poker_player", "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "query_toks": ["SELECT", "Earnings", "FROM", "poker_player", "ORDER", "BY", "Earnings", "DESC"], "query_toks_no_value": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc"], "question": "List the earnings of poker players in descending order.", "question_toks": ["List", "the", "earnings", "of", "poker", "players", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 1075}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of climbers and the corresponding heights of the mountains that they climb?", "sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "example": {"db_id": "climbing", "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Height", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "height", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id"], "question": "What are the names of climbers and the corresponding heights of the mountains that they climb?", "question_toks": ["What", "are", "the", "names", "of", "climbers", "and", "the", "corresponding", "heights", "of", "the", "mountains", "that", "they", "climb", "?"], "dataset_name": "spider", "guid": 1076}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the classes of races that have two or more corresponding races?", "sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "example": {"db_id": "race_track", "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "query_toks": ["SELECT", "CLASS", "FROM", "race", "GROUP", "BY", "CLASS", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "class", "from", "race", "group", "by", "class", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the classes of races that have two or more corresponding races?", "question_toks": ["What", "are", "the", "classes", "of", "races", "that", "have", "two", "or", "more", "corresponding", "races", "?"], "dataset_name": "spider", "guid": 1077}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of all races held between 2009 and 2011?", "sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "example": {"db_id": "formula_1", "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "YEAR", "BETWEEN", "2009", "AND", "2011"], "query_toks_no_value": ["select", "name", "from", "races", "where", "year", "between", "value", "and", "value"], "question": "What are the names of all races held between 2009 and 2011?", "question_toks": ["What", "are", "the", "names", "of", "all", "races", "held", "between", "2009", "and", "2011", "?"], "dataset_name": "spider", "guid": 1078}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many people have membership in the club \"Pen and Paper Gaming\"?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Pen", "and", "Paper", "Gaming", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "How many people have membership in the club \"Pen and Paper Gaming\"?", "question_toks": ["How", "many", "people", "have", "membership", "in", "the", "club", "``", "Pen", "and", "Paper", "Gaming", "''", "?"], "dataset_name": "spider", "guid": 1079}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Return the positions of players on the team Ryley Goldner.", "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Ryley Goldner\"", "example": {"db_id": "match_season", "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"", "query_toks": ["SELECT", "T1.Position", "FROM", "match_season", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id", "WHERE", "T2.Name", "=", "``", "Ryley", "Goldner", "''"], "query_toks_no_value": ["select", "t1", ".", "position", "from", "match_season", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id", "where", "t2", ".", "name", "=", "value"], "question": "Return the positions of players on the team Ryley Goldner.", "question_toks": ["Return", "the", "positions", "of", "players", "on", "the", "team", "Ryley", "Goldner", "."], "dataset_name": "spider", "guid": 1080}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | From the trip record, find the number of unique bikes.", "sql": "SELECT COUNT(DISTINCT bike_id) FROM trip", "example": {"db_id": "bike_1", "query": "SELECT count(DISTINCT bike_id) FROM trip", "query_toks": ["SELECT", "count", "(", "DISTINCT", "bike_id", ")", "FROM", "trip"], "query_toks_no_value": ["select", "count", "(", "distinct", "bike_id", ")", "from", "trip"], "question": "From the trip record, find the number of unique bikes.", "question_toks": ["From", "the", "trip", "record", ",", "find", "the", "number", "of", "unique", "bikes", "."], "dataset_name": "spider", "guid": 1081}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Which teams had more than 3 eliminations?", "sql": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3", "example": {"db_id": "wrestler", "query": "SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*)  >  3", "query_toks": ["SELECT", "Team", "FROM", "elimination", "GROUP", "BY", "Team", "HAVING", "COUNT", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "team", "from", "elimination", "group", "by", "team", "having", "count", "(", "*", ")", ">", "value"], "question": "Which teams had more than 3 eliminations?", "question_toks": ["Which", "teams", "had", "more", "than", "3", "eliminations", "?"], "dataset_name": "spider", "guid": 1082}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | List the locations that are shared by more than two wrestlers.", "sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "example": {"db_id": "wrestler", "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "LOCATION", "FROM", "wrestler", "GROUP", "BY", "LOCATION", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "location", "from", "wrestler", "group", "by", "location", "having", "count", "(", "*", ")", ">", "value"], "question": "List the locations that are shared by more than two wrestlers.", "question_toks": ["List", "the", "locations", "that", "are", "shared", "by", "more", "than", "two", "wrestlers", "."], "dataset_name": "spider", "guid": 1083}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the country names and the corresponding number of players.", "sql": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name", "example": {"db_id": "match_season", "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name", "query_toks": ["SELECT", "Country_name", ",", "COUNT", "(", "*", ")", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "GROUP", "BY", "T1.Country_name"], "query_toks_no_value": ["select", "country_name", ",", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "group", "by", "t1", ".", "country_name"], "question": "Show the country names and the corresponding number of players.", "question_toks": ["Show", "the", "country", "names", "and", "the", "corresponding", "number", "of", "players", "."], "dataset_name": "spider", "guid": 1084}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "example": {"db_id": "bike_1", "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "query_toks": ["SELECT", "id", "FROM", "trip", "WHERE", "duration", ">", "=", "(", "SELECT", "avg", "(", "duration", ")", "FROM", "trip", "WHERE", "zip_code", "=", "94103", ")"], "query_toks_no_value": ["select", "id", "from", "trip", "where", "duration", ">", "=", "(", "select", "avg", "(", "duration", ")", "from", "trip", "where", "zip_code", "=", "value", ")"], "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?", "question_toks": ["What", "are", "the", "ids", "of", "all", "trips", "that", "had", "a", "duration", "as", "long", "as", "the", "average", "trip", "duration", "in", "the", "zip", "code", "94103", "?"], "dataset_name": "spider", "guid": 1085}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | List each birth place along with the number of people from there.", "sql": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place", "example": {"db_id": "body_builder", "query": "SELECT Birth_Place ,  COUNT(*) FROM people GROUP BY Birth_Place", "query_toks": ["SELECT", "Birth_Place", ",", "COUNT", "(", "*", ")", "FROM", "people", "GROUP", "BY", "Birth_Place"], "query_toks_no_value": ["select", "birth_place", ",", "count", "(", "*", ")", "from", "people", "group", "by", "birth_place"], "question": "List each birth place along with the number of people from there.", "question_toks": ["List", "each", "birth", "place", "along", "with", "the", "number", "of", "people", "from", "there", "."], "dataset_name": "spider", "guid": 1086}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List all club names in ascending order of start year.", "sql": "SELECT name FROM club ORDER BY start_year ASC", "example": {"db_id": "sports_competition", "query": "SELECT name FROM club ORDER BY Start_year ASC", "query_toks": ["SELECT", "name", "FROM", "club", "ORDER", "BY", "Start_year", "ASC"], "query_toks_no_value": ["select", "name", "from", "club", "order", "by", "start_year", "asc"], "question": "List all club names in ascending order of start year.", "question_toks": ["List", "all", "club", "names", "in", "ascending", "order", "of", "start", "year", "."], "dataset_name": "spider", "guid": 1087}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | What are the gender and occupation of players?", "sql": "SELECT Gender ,  Occupation FROM player", "example": {"db_id": "riding_club", "query": "SELECT Gender ,  Occupation FROM player", "query_toks": ["SELECT", "Gender", ",", "Occupation", "FROM", "player"], "query_toks_no_value": ["select", "gender", ",", "occupation", "from", "player"], "question": "What are the gender and occupation of players?", "question_toks": ["What", "are", "the", "gender", "and", "occupation", "of", "players", "?"], "dataset_name": "spider", "guid": 1088}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of the climbers, ordered by points descending?", "sql": "SELECT Name FROM climber ORDER BY Points DESC", "example": {"db_id": "climbing", "query": "SELECT Name FROM climber ORDER BY Points DESC", "query_toks": ["SELECT", "Name", "FROM", "climber", "ORDER", "BY", "Points", "DESC"], "query_toks_no_value": ["select", "name", "from", "climber", "order", "by", "points", "desc"], "question": "What are the names of the climbers, ordered by points descending?", "question_toks": ["What", "are", "the", "names", "of", "the", "climbers", ",", "ordered", "by", "points", "descending", "?"], "dataset_name": "spider", "guid": 1089}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the name of the race that occurred most recently?", "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "races", "ORDER", "BY", "date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "races", "order", "by", "date", "desc", "limit", "value"], "question": "What is the name of the race that occurred most recently?", "question_toks": ["What", "is", "the", "name", "of", "the", "race", "that", "occurred", "most", "recently", "?"], "dataset_name": "spider", "guid": 1090}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the location of the club \"Pen and Paper Gaming\".", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "example": {"db_id": "club_1", "query": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "query_toks": ["SELECT", "clublocation", "FROM", "club", "WHERE", "clubname", "=", "``", "Pen", "and", "Paper", "Gaming", "''"], "query_toks_no_value": ["select", "clublocation", "from", "club", "where", "clubname", "=", "value"], "question": "Find the location of the club \"Pen and Paper Gaming\".", "question_toks": ["Find", "the", "location", "of", "the", "club", "``", "Pen", "and", "Paper", "Gaming", "''", "."], "dataset_name": "spider", "guid": 1091}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name and hours of the students whose tryout decision is yes.", "sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "T1.pName", ",", "T1.HS", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "t1", ".", "pname", ",", "t1", ".", "hs", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "Find the name and hours of the students whose tryout decision is yes.", "question_toks": ["Find", "the", "name", "and", "hours", "of", "the", "students", "whose", "tryout", "decision", "is", "yes", "."], "dataset_name": "spider", "guid": 1092}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the names of all races held in 2017.", "sql": "SELECT name FROM races WHERE YEAR = 2017", "example": {"db_id": "formula_1", "query": "SELECT name FROM races WHERE YEAR = 2017", "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "YEAR", "=", "2017"], "query_toks_no_value": ["select", "name", "from", "races", "where", "year", "=", "value"], "question": "Find the names of all races held in 2017.", "question_toks": ["Find", "the", "names", "of", "all", "races", "held", "in", "2017", "."], "dataset_name": "spider", "guid": 1093}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the names of mountains with height more than 5000 or prominence more than 1000.", "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "query_toks": ["SELECT", "Name", "FROM", "mountain", "WHERE", "Height", ">", "5000", "OR", "Prominence", ">", "1000"], "query_toks_no_value": ["select", "name", "from", "mountain", "where", "height", ">", "value", "or", "prominence", ">", "value"], "question": "Show the names of mountains with height more than 5000 or prominence more than 1000.", "question_toks": ["Show", "the", "names", "of", "mountains", "with", "height", "more", "than", "5000", "or", "prominence", "more", "than", "1000", "."], "dataset_name": "spider", "guid": 1094}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "query_toks": ["SELECT", "max", "(", "T2.fastestlapspeed", ")", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", "=", "2008", "AND", "T1.name", "=", "``", "Monaco", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "fastestlapspeed", ")", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "question_toks": ["What", "is", "the", "maximum", "fastest", "lap", "speed", "in", "race", "named", "'Monaco", "Grand", "Prix", "'", "in", "2008", "?"], "dataset_name": "spider", "guid": 1095}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips", "sql": "SELECT name FROM station WHERE city = \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*) > 100", "example": {"db_id": "bike_1", "query": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "query_toks": ["SELECT", "name", "FROM", "station", "WHERE", "city", "=", "``", "Palo", "Alto", "''", "EXCEPT", "SELECT", "end_station_name", "FROM", "trip", "GROUP", "BY", "end_station_name", "HAVING", "count", "(", "*", ")", ">", "100"], "query_toks_no_value": ["select", "name", "from", "station", "where", "city", "=", "value", "except", "select", "end_station_name", "from", "trip", "group", "by", "end_station_name", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips", "question_toks": ["What", "are", "the", "names", "of", "the", "stations", "that", "are", "located", "in", "Palo", "Alto", "but", "have", "never", "been", "the", "ending", "point", "of", "the", "trips"], "dataset_name": "spider", "guid": 1096}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Return the maximum number of points for climbers from the United Kingdom.", "sql": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"", "example": {"db_id": "climbing", "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"", "query_toks": ["SELECT", "max", "(", "Points", ")", "FROM", "climber", "WHERE", "Country", "=", "``", "United", "Kingdom", "''"], "query_toks_no_value": ["select", "max", "(", "points", ")", "from", "climber", "where", "country", "=", "value"], "question": "Return the maximum number of points for climbers from the United Kingdom.", "question_toks": ["Return", "the", "maximum", "number", "of", "points", "for", "climbers", "from", "the", "United", "Kingdom", "."], "dataset_name": "spider", "guid": 1097}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | How many eliminations did each team have?", "sql": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team", "example": {"db_id": "wrestler", "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team", "query_toks": ["SELECT", "Team", ",", "COUNT", "(", "*", ")", "FROM", "elimination", "GROUP", "BY", "Team"], "query_toks_no_value": ["select", "team", ",", "count", "(", "*", ")", "from", "elimination", "group", "by", "team"], "question": "How many eliminations did each team have?", "question_toks": ["How", "many", "eliminations", "did", "each", "team", "have", "?"], "dataset_name": "spider", "guid": 1098}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many clubs does \"Linda Smith\" have membership for?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = \"Linda\" AND t3.lname = \"Smith\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Linda", "''", "AND", "t3.lname", "=", "``", "Smith", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "How many clubs does \"Linda Smith\" have membership for?", "question_toks": ["How", "many", "clubs", "does", "``", "Linda", "Smith", "''", "have", "membership", "for", "?"], "dataset_name": "spider", "guid": 1099}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the state of the college which player Charles is attending.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "JOIN", "player", "AS", "T3", "ON", "T2.pID", "=", "T3.pID", "WHERE", "T3.pName", "=", "'Charles", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "join", "player", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t3", ".", "pname", "=", "value"], "question": "Find the state of the college which player Charles is attending.", "question_toks": ["Find", "the", "state", "of", "the", "college", "which", "player", "Charles", "is", "attending", "."], "dataset_name": "spider", "guid": 1100}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of the schools with the top 3 largest class sizes?", "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "query_toks": ["SELECT", "cName", "FROM", "college", "ORDER", "BY", "enr", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "cname", "from", "college", "order", "by", "enr", "desc", "limit", "value"], "question": "What are the names of the schools with the top 3 largest class sizes?", "question_toks": ["What", "are", "the", "names", "of", "the", "schools", "with", "the", "top", "3", "largest", "class", "sizes", "?"], "dataset_name": "spider", "guid": 1101}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the names of gymnasts, ordered by their heights ascending?", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height ASC", "example": {"db_id": "gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "query_toks": ["SELECT", "T2.Name", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Height", "ASC"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "height", "asc"], "question": "What are the names of gymnasts, ordered by their heights ascending?", "question_toks": ["What", "are", "the", "names", "of", "gymnasts", ",", "ordered", "by", "their", "heights", "ascending", "?"], "dataset_name": "spider", "guid": 1102}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Please show the countries and the number of climbers from each country.", "sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "example": {"db_id": "climbing", "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "query_toks": ["SELECT", "Country", ",", "COUNT", "(", "*", ")", "FROM", "climber", "GROUP", "BY", "Country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "climber", "group", "by", "country"], "question": "Please show the countries and the number of climbers from each country.", "question_toks": ["Please", "show", "the", "countries", "and", "the", "number", "of", "climbers", "from", "each", "country", "."], "dataset_name": "spider", "guid": 1103}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.", "sql": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "example": {"db_id": "bike_1", "query": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5", "query_toks": ["SELECT", "date", ",", "cloud_cover", "FROM", "weather", "ORDER", "BY", "cloud_cover", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "date", ",", "cloud_cover", "from", "weather", "order", "by", "cloud_cover", "desc", "limit", "value"], "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.", "question_toks": ["What", "are", "the", "dates", "that", "had", "the", "top", "5", "cloud", "cover", "rates", "?", "Also", "tell", "me", "the", "cloud", "cover", "rate", "."], "dataset_name": "spider", "guid": 1104}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Who are the different players and how many years has each played?", "sql": "SELECT Player ,  Years_Played FROM player", "example": {"db_id": "match_season", "query": "SELECT Player ,  Years_Played FROM player", "query_toks": ["SELECT", "Player", ",", "Years_Played", "FROM", "player"], "query_toks_no_value": ["select", "player", ",", "years_played", "from", "player"], "question": "Who are the different players and how many years has each played?", "question_toks": ["Who", "are", "the", "different", "players", "and", "how", "many", "years", "has", "each", "played", "?"], "dataset_name": "spider", "guid": 1105}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | How many clubs have total medals less than 10?", "sql": "SELECT count(*) FROM club_rank WHERE Total < 10", "example": {"db_id": "sports_competition", "query": "SELECT count(*) FROM club_rank WHERE Total  <  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club_rank", "WHERE", "Total", "<", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club_rank", "where", "total", "<", "value"], "question": "How many clubs have total medals less than 10?", "question_toks": ["How", "many", "clubs", "have", "total", "medals", "less", "than", "10", "?"], "dataset_name": "spider", "guid": 1106}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the names of the clubs that have at least a member from the city with city code \"HOU\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = \"HOU\"", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.city_code", "=", "``", "HOU", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "city_code", "=", "value"], "question": "Find the names of the clubs that have at least a member from the city with city code \"HOU\".", "question_toks": ["Find", "the", "names", "of", "the", "clubs", "that", "have", "at", "least", "a", "member", "from", "the", "city", "with", "city", "code", "``", "HOU", "''", "."], "dataset_name": "spider", "guid": 1107}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the names of all clubs that do not have any players?", "sql": "SELECT name FROM club WHERE club_id NOT IN (SELECT club_id FROM player)", "example": {"db_id": "sports_competition", "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)", "query_toks": ["SELECT", "name", "FROM", "CLub", "WHERE", "Club_ID", "NOT", "IN", "(", "SELECT", "Club_ID", "FROM", "player", ")"], "query_toks_no_value": ["select", "name", "from", "club", "where", "club_id", "not", "in", "(", "select", "club_id", "from", "player", ")"], "question": "What are the names of all clubs that do not have any players?", "question_toks": ["What", "are", "the", "names", "of", "all", "clubs", "that", "do", "not", "have", "any", "players", "?"], "dataset_name": "spider", "guid": 1108}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the last names of the members of the club \"Bootup Baltimore\".", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "example": {"db_id": "club_1", "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "query_toks": ["SELECT", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''"], "query_toks_no_value": ["select", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Find the last names of the members of the club \"Bootup Baltimore\".", "question_toks": ["Find", "the", "last", "names", "of", "the", "members", "of", "the", "club", "``", "Bootup", "Baltimore", "''", "."], "dataset_name": "spider", "guid": 1109}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the best rank of losers across all matches?", "sql": "SELECT MIN(loser_rank) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT min(loser_rank) FROM matches", "query_toks": ["SELECT", "min", "(", "loser_rank", ")", "FROM", "matches"], "query_toks_no_value": ["select", "min", "(", "loser_rank", ")", "from", "matches"], "question": "What is the best rank of losers across all matches?", "question_toks": ["What", "is", "the", "best", "rank", "of", "losers", "across", "all", "matches", "?"], "dataset_name": "spider", "guid": 1110}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the name and date of the race that occurred most recently?", "sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "date", "FROM", "races", "ORDER", "BY", "date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "date", "from", "races", "order", "by", "date", "desc", "limit", "value"], "question": "What is the name and date of the race that occurred most recently?", "question_toks": ["What", "is", "the", "name", "and", "date", "of", "the", "race", "that", "occurred", "most", "recently", "?"], "dataset_name": "spider", "guid": 1111}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Where is the club \"Pen and Paper Gaming\" located?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "example": {"db_id": "club_1", "query": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "query_toks": ["SELECT", "clublocation", "FROM", "club", "WHERE", "clubname", "=", "``", "Pen", "and", "Paper", "Gaming", "''"], "query_toks_no_value": ["select", "clublocation", "from", "club", "where", "clubname", "=", "value"], "question": "Where is the club \"Pen and Paper Gaming\" located?", "question_toks": ["Where", "is", "the", "club", "``", "Pen", "and", "Paper", "Gaming", "''", "located", "?"], "dataset_name": "spider", "guid": 1112}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the names of colleges that have two or more players, listed in descending alphabetical order?", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*) >= 2 ORDER BY College DESC", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "query_toks": ["SELECT", "College", "FROM", "match_season", "GROUP", "BY", "College", "HAVING", "count", "(", "*", ")", ">", "=", "2", "ORDER", "BY", "College", "DESC"], "query_toks_no_value": ["select", "college", "from", "match_season", "group", "by", "college", "having", "count", "(", "*", ")", ">", "=", "value", "order", "by", "college", "desc"], "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "colleges", "that", "have", "two", "or", "more", "players", ",", "listed", "in", "descending", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1113}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show names and seatings, ordered by seating for all tracks opened after 2000.", "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "example": {"db_id": "race_track", "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "query_toks": ["SELECT", "name", ",", "seating", "FROM", "track", "WHERE", "year_opened", ">", "2000", "ORDER", "BY", "seating"], "query_toks_no_value": ["select", "name", ",", "seating", "from", "track", "where", "year_opened", ">", "value", "order", "by", "seating"], "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.", "question_toks": ["Show", "names", "and", "seatings", ",", "ordered", "by", "seating", "for", "all", "tracks", "opened", "after", "2000", "."], "dataset_name": "spider", "guid": 1114}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many clubs are there?", "sql": "SELECT count(*) FROM club", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club"], "question": "How many clubs are there?", "question_toks": ["How", "many", "clubs", "are", "there", "?"], "dataset_name": "spider", "guid": 1115}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the names of all the poker players.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"], "question": "Return the names of all the poker players.", "question_toks": ["Return", "the", "names", "of", "all", "the", "poker", "players", "."], "dataset_name": "spider", "guid": 1116}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many members of \"Bootup Baltimore\" are older than 18?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.age", ">", "18"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "age", ">", "value"], "question": "How many members of \"Bootup Baltimore\" are older than 18?", "question_toks": ["How", "many", "members", "of", "``", "Bootup", "Baltimore", "''", "are", "older", "than", "18", "?"], "dataset_name": "spider", "guid": 1117}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the most common nationality of people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Nationality", "FROM", "people", "GROUP", "BY", "Nationality", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common nationality of people?", "question_toks": ["What", "is", "the", "most", "common", "nationality", "of", "people", "?"], "dataset_name": "spider", "guid": 1118}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | From which hometowns did both people older than 23 and younger than 20 come from?", "sql": "SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20", "example": {"db_id": "gymnast", "query": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "query_toks": ["SELECT", "Hometown", "FROM", "people", "WHERE", "Age", ">", "23", "INTERSECT", "SELECT", "Hometown", "FROM", "people", "WHERE", "Age", "<", "20"], "query_toks_no_value": ["select", "hometown", "from", "people", "where", "age", ">", "value", "intersect", "select", "hometown", "from", "people", "where", "age", "<", "value"], "question": "From which hometowns did both people older than 23 and younger than 20 come from?", "question_toks": ["From", "which", "hometowns", "did", "both", "people", "older", "than", "23", "and", "younger", "than", "20", "come", "from", "?"], "dataset_name": "spider", "guid": 1119}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all students who tried out in alphabetical order?", "sql": "SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID ORDER BY T2.pName ASC", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName", "query_toks": ["SELECT", "T1.pName", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "ORDER", "BY", "T1.pName"], "query_toks_no_value": ["select", "t1", ".", "pname", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "order", "by", "t1", ".", "pname"], "question": "What are the names of all students who tried out in alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "all", "students", "who", "tried", "out", "in", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1120}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1", "AND", "T2.points", ">", "20"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value", "and", "t2", ".", "points", ">", "value"], "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?", "question_toks": ["What", "are", "the", "first", "names", "of", "the", "different", "drivers", "who", "won", "in", "position", "1", "as", "driver", "standing", "and", "had", "more", "than", "20", "points", "?"], "dataset_name": "spider", "guid": 1121}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?", "sql": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "example": {"db_id": "bike_1", "query": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100", "query_toks": ["SELECT", "name", "FROM", "station", "WHERE", "city", "=", "``", "Palo", "Alto", "''", "EXCEPT", "SELECT", "end_station_name", "FROM", "trip", "GROUP", "BY", "end_station_name", "HAVING", "count", "(", "*", ")", ">", "100"], "query_toks_no_value": ["select", "name", "from", "station", "where", "city", "=", "value", "except", "select", "end_station_name", "from", "trip", "group", "by", "end_station_name", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?", "question_toks": ["What", "are", "the", "names", "of", "stations", "that", "are", "located", "in", "Palo", "Alto", "city", "but", "have", "never", "been", "the", "ending", "point", "of", "trips", "more", "than", "100", "times", "?"], "dataset_name": "spider", "guid": 1122}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "sql": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "example": {"db_id": "bike_1", "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "query_toks": ["SELECT", "date", ",", "zip_code", "FROM", "weather", "WHERE", "min_dew_point_f", "<", "(", "SELECT", "min", "(", "min_dew_point_f", ")", "FROM", "weather", "WHERE", "zip_code", "=", "94107", ")"], "query_toks_no_value": ["select", "date", ",", "zip_code", "from", "weather", "where", "min_dew_point_f", "<", "(", "select", "min", "(", "min_dew_point_f", ")", "from", "weather", "where", "zip_code", "=", "value", ")"], "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?", "question_toks": ["On", "which", "day", "and", "in", "which", "zip", "code", "was", "the", "min", "dew", "point", "lower", "than", "any", "day", "in", "zip", "code", "94107", "?"], "dataset_name": "spider", "guid": 1123}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many states have a college with more students than average?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)", "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "college", "WHERE", "enr", ">", "(", "SELECT", "avg", "(", "enr", ")", "FROM", "college", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "college", "where", "enr", ">", "(", "select", "avg", "(", "enr", ")", "from", "college", ")"], "question": "How many states have a college with more students than average?", "question_toks": ["How", "many", "states", "have", "a", "college", "with", "more", "students", "than", "average", "?"], "dataset_name": "spider", "guid": 1124}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the total number of students enrolled in schools without any goalies?", "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")", "example": {"db_id": "soccer_2", "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")", "query_toks": ["SELECT", "sum", "(", "enr", ")", "FROM", "college", "WHERE", "cName", "NOT", "IN", "(", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "``", "goalie", "''", ")"], "query_toks_no_value": ["select", "sum", "(", "enr", ")", "from", "college", "where", "cname", "not", "in", "(", "select", "cname", "from", "tryout", "where", "ppos", "=", "value", ")"], "question": "What is the total number of students enrolled in schools without any goalies?", "question_toks": ["What", "is", "the", "total", "number", "of", "students", "enrolled", "in", "schools", "without", "any", "goalies", "?"], "dataset_name": "spider", "guid": 1125}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of the states that have some college students playing in the positions of goalie and mid-field?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'goalie", "'", "INTERSECT", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'mid", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", "intersect", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value"], "question": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?", "question_toks": ["What", "are", "the", "names", "of", "the", "states", "that", "have", "some", "college", "students", "playing", "in", "the", "positions", "of", "goalie", "and", "mid-field", "?"], "dataset_name": "spider", "guid": 1126}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the birth date and birth place of the body builder with the highest total points?", "sql": "SELECT T2.Birth_Date, T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1", "example": {"db_id": "body_builder", "query": "SELECT T2.Birth_Date ,  T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC LIMIT 1", "query_toks": ["SELECT", "T2.Birth_Date", ",", "T2.Birth_Place", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Total", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "birth_date", ",", "t2", ".", "birth_place", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "total", "desc", "limit", "value"], "question": "What are the birth date and birth place of the body builder with the highest total points?", "question_toks": ["What", "are", "the", "birth", "date", "and", "birth", "place", "of", "the", "body", "builder", "with", "the", "highest", "total", "points", "?"], "dataset_name": "spider", "guid": 1127}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the all games score and location of the school called Clemson?", "sql": "SELECT t2.All_Games , t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'", "example": {"db_id": "university_basketball", "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "query_toks": ["SELECT", "t2.All_Games", ",", "t1.location", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "WHERE", "team_name", "=", "'Clemson", "'"], "query_toks_no_value": ["select", "t2", ".", "all_games", ",", "t1", ".", "location", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "team_name", "=", "value"], "question": "What are the all games score and location of the school called Clemson?", "question_toks": ["What", "are", "the", "all", "games", "score", "and", "location", "of", "the", "school", "called", "Clemson", "?"], "dataset_name": "spider", "guid": 1128}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Which trip started from the station with the largest dock count? Give me the trip id.", "sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", "FROM", "trip", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.start_station_id", "=", "T2.id", "ORDER", "BY", "T2.dock_count", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", "from", "trip", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "start_station_id", "=", "t2", ".", "id", "order", "by", "t2", ".", "dock_count", "desc", "limit", "value"], "question": "Which trip started from the station with the largest dock count? Give me the trip id.", "question_toks": ["Which", "trip", "started", "from", "the", "station", "with", "the", "largest", "dock", "count", "?", "Give", "me", "the", "trip", "id", "."], "dataset_name": "spider", "guid": 1129}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name and training hours of players whose hours are below 1500.", "sql": "SELECT pName ,  HS FROM Player WHERE HS  <  1500", "example": {"db_id": "soccer_2", "query": "SELECT pName ,  HS FROM Player WHERE HS  <  1500", "query_toks": ["SELECT", "pName", ",", "HS", "FROM", "Player", "WHERE", "HS", "<", "1500"], "query_toks_no_value": ["select", "pname", ",", "hs", "from", "player", "where", "hs", "<", "value"], "question": "Find the name and training hours of players whose hours are below 1500.", "question_toks": ["Find", "the", "name", "and", "training", "hours", "of", "players", "whose", "hours", "are", "below", "1500", "."], "dataset_name": "spider", "guid": 1130}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the name of colleges that have at least two players in descending alphabetical order.", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC", "query_toks": ["SELECT", "College", "FROM", "match_season", "GROUP", "BY", "College", "HAVING", "count", "(", "*", ")", ">", "=", "2", "ORDER", "BY", "College", "DESC"], "query_toks_no_value": ["select", "college", "from", "match_season", "group", "by", "college", "having", "count", "(", "*", ")", ">", "=", "value", "order", "by", "college", "desc"], "question": "Show the name of colleges that have at least two players in descending alphabetical order.", "question_toks": ["Show", "the", "name", "of", "colleges", "that", "have", "at", "least", "two", "players", "in", "descending", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 1131}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many schools have some students playing in goalie and mid positions.", "sql": "SELECT COUNT(*) FROM (SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid')", "example": {"db_id": "soccer_2", "query": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "(", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'", "INTERSECT", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'mid", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "(", "select", "cname", "from", "tryout", "where", "ppos", "=", "value", "intersect", "select", "cname", "from", "tryout", "where", "ppos", "=", "value", ")"], "question": "How many schools have some students playing in goalie and mid positions.", "question_toks": ["How", "many", "schools", "have", "some", "students", "playing", "in", "goalie", "and", "mid", "positions", "."], "dataset_name": "spider", "guid": 1132}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Where is the club \"Hopkins Student Enterprises\" located?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"", "example": {"db_id": "club_1", "query": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"", "query_toks": ["SELECT", "clublocation", "FROM", "club", "WHERE", "clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''"], "query_toks_no_value": ["select", "clublocation", "from", "club", "where", "clubname", "=", "value"], "question": "Where is the club \"Hopkins Student Enterprises\" located?", "question_toks": ["Where", "is", "the", "club", "``", "Hopkins", "Student", "Enterprises", "''", "located", "?"], "dataset_name": "spider", "guid": 1133}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the average rank of winners in all matches.", "sql": "SELECT AVG(winner_rank) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT avg(winner_rank) FROM matches", "query_toks": ["SELECT", "avg", "(", "winner_rank", ")", "FROM", "matches"], "query_toks_no_value": ["select", "avg", "(", "winner_rank", ")", "from", "matches"], "question": "Find the average rank of winners in all matches.", "question_toks": ["Find", "the", "average", "rank", "of", "winners", "in", "all", "matches", "."], "dataset_name": "spider", "guid": 1134}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Return the names of teams that have no match season record.", "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "example": {"db_id": "match_season", "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "query_toks": ["SELECT", "Name", "FROM", "team", "WHERE", "Team_id", "NOT", "IN", "(", "SELECT", "Team", "FROM", "match_season", ")"], "query_toks_no_value": ["select", "name", "from", "team", "where", "team_id", "not", "in", "(", "select", "team", "from", "match_season", ")"], "question": "Return the names of teams that have no match season record.", "question_toks": ["Return", "the", "names", "of", "teams", "that", "have", "no", "match", "season", "record", "."], "dataset_name": "spider", "guid": 1135}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | How many schools are in the basketball match?", "sql": "SELECT count(DISTINCT school_id) FROM basketball_match", "example": {"db_id": "university_basketball", "query": "SELECT count(DISTINCT school_id) FROM basketball_match", "query_toks": ["SELECT", "count", "(", "DISTINCT", "school_id", ")", "FROM", "basketball_match"], "query_toks_no_value": ["select", "count", "(", "distinct", "school_id", ")", "from", "basketball_match"], "question": "How many schools are in the basketball match?", "question_toks": ["How", "many", "schools", "are", "in", "the", "basketball", "match", "?"], "dataset_name": "spider", "guid": 1136}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Give the names of wrestlers and their elimination moves.", "sql": "SELECT T2.Name , T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID", "example": {"db_id": "wrestler", "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID", "query_toks": ["SELECT", "T2.Name", ",", "T1.Elimination_Move", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "elimination_move", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id"], "question": "Give the names of wrestlers and their elimination moves.", "question_toks": ["Give", "the", "names", "of", "wrestlers", "and", "their", "elimination", "moves", "."], "dataset_name": "spider", "guid": 1137}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the number of different positions in the club \"Bootup Baltimore\".", "sql": "SELECT COUNT(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = \"Bootup Baltimore\"", "example": {"db_id": "club_1", "query": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t2.position", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "position", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "where", "t1", ".", "clubname", "=", "value"], "question": "Count the number of different positions in the club \"Bootup Baltimore\".", "question_toks": ["Count", "the", "number", "of", "different", "positions", "in", "the", "club", "``", "Bootup", "Baltimore", "''", "."], "dataset_name": "spider", "guid": 1138}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Which countries have more than two members?", "sql": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*) > 2", "example": {"db_id": "decoration_competition", "query": "SELECT Country FROM member GROUP BY Country HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "Country", "FROM", "member", "GROUP", "BY", "Country", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "country", "from", "member", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "Which countries have more than two members?", "question_toks": ["Which", "countries", "have", "more", "than", "two", "members", "?"], "dataset_name": "spider", "guid": 1139}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many clubs does the student named \"Eric Tai\" belong to?", "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"", "example": {"db_id": "club_1", "query": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t1.clubname", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Eric", "''", "AND", "t3.lname", "=", "``", "Tai", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "clubname", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "How many clubs does the student named \"Eric Tai\" belong to?", "question_toks": ["How", "many", "clubs", "does", "the", "student", "named", "``", "Eric", "Tai", "''", "belong", "to", "?"], "dataset_name": "spider", "guid": 1140}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the year that has the most number of matches.", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "matches", "GROUP", "BY", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the year that has the most number of matches.", "question_toks": ["Find", "the", "year", "that", "has", "the", "most", "number", "of", "matches", "."], "dataset_name": "spider", "guid": 1141}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of races that were held after 2017 and the circuits were in the country of Spain?", "sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017", "example": {"db_id": "formula_1", "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017", "query_toks": ["SELECT", "T1.name", "FROM", "races", "AS", "T1", "JOIN", "circuits", "AS", "T2", "ON", "T1.circuitid", "=", "T2.circuitid", "WHERE", "T2.country", "=", "``", "Spain", "''", "AND", "T1.year", ">", "2017"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "races", "as", "t1", "join", "circuits", "as", "t2", "on", "t1", ".", "circuitid", "=", "t2", ".", "circuitid", "where", "t2", ".", "country", "=", "value", "and", "t1", ".", "year", ">", "value"], "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?", "question_toks": ["What", "are", "the", "names", "of", "races", "that", "were", "held", "after", "2017", "and", "the", "circuits", "were", "in", "the", "country", "of", "Spain", "?"], "dataset_name": "spider", "guid": 1142}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of races held between 2009 and 2011?", "sql": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "example": {"db_id": "formula_1", "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011", "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "YEAR", "BETWEEN", "2009", "AND", "2011"], "query_toks_no_value": ["select", "name", "from", "races", "where", "year", "between", "value", "and", "value"], "question": "What are the names of races held between 2009 and 2011?", "question_toks": ["What", "are", "the", "names", "of", "races", "held", "between", "2009", "and", "2011", "?"], "dataset_name": "spider", "guid": 1143}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Count the number of different hometowns of these people.", "sql": "SELECT COUNT(DISTINCT Hometown) FROM people", "example": {"db_id": "gymnast", "query": "SELECT count(DISTINCT Hometown) FROM people", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Hometown", ")", "FROM", "people"], "query_toks_no_value": ["select", "count", "(", "distinct", "hometown", ")", "from", "people"], "question": "Count the number of different hometowns of these people.", "question_toks": ["Count", "the", "number", "of", "different", "hometowns", "of", "these", "people", "."], "dataset_name": "spider", "guid": 1144}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the names and location of the wrestlers?", "sql": "SELECT Name ,  LOCATION FROM wrestler", "example": {"db_id": "wrestler", "query": "SELECT Name ,  LOCATION FROM wrestler", "query_toks": ["SELECT", "Name", ",", "LOCATION", "FROM", "wrestler"], "query_toks_no_value": ["select", "name", ",", "location", "from", "wrestler"], "question": "What are the names and location of the wrestlers?", "question_toks": ["What", "are", "the", "names", "and", "location", "of", "the", "wrestlers", "?"], "dataset_name": "spider", "guid": 1145}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "sql": "SELECT T1.first_name , T1.country_code , T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.country_code", ",", "T1.birth_date", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "ORDER", "BY", "T2.winner_rank_points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "country_code", ",", "t1", ".", "birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "order", "by", "t2", ".", "winner_rank_points", "desc", "limit", "value"], "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "question_toks": ["What", "is", "the", "first", "name", ",", "country", "code", ",", "and", "birth", "date", "of", "the", "player", "with", "the", "most", "winner", "rank", "points", "across", "all", "matches", "?"], "dataset_name": "spider", "guid": 1146}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Count the number of gymnasts.", "sql": "SELECT COUNT(*) FROM gymnast", "example": {"db_id": "gymnast", "query": "SELECT count(*) FROM gymnast", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "gymnast"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "gymnast"], "question": "Count the number of gymnasts.", "question_toks": ["Count", "the", "number", "of", "gymnasts", "."], "dataset_name": "spider", "guid": 1147}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?", "sql": "SELECT T1.pName, T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "T1.pName", ",", "T2.cName", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "t1", ".", "pname", ",", "t2", ".", "cname", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "players", "who", "received", "a", "yes", "during", "tryouts", ",", "and", "also", "what", "are", "the", "names", "of", "their", "colleges", "?"], "dataset_name": "spider", "guid": 1148}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the players whose names contain letter 'a'.", "sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", "query_toks": ["SELECT", "DISTINCT", "pName", "FROM", "Player", "WHERE", "pName", "LIKE", "'", "%", "a", "%", "'"], "query_toks_no_value": ["select", "distinct", "pname", "from", "player", "where", "pname", "like", "value"], "question": "Find the players whose names contain letter 'a'.", "question_toks": ["Find", "the", "players", "whose", "names", "contain", "letter", "'a", "'", "."], "dataset_name": "spider", "guid": 1149}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the total number of points for all players?", "sql": "SELECT sum(Points) FROM player", "example": {"db_id": "sports_competition", "query": "SELECT sum(Points) FROM player", "query_toks": ["SELECT", "sum", "(", "Points", ")", "FROM", "player"], "query_toks_no_value": ["select", "sum", "(", "points", ")", "from", "player"], "question": "What is the total number of points for all players?", "question_toks": ["What", "is", "the", "total", "number", "of", "points", "for", "all", "players", "?"], "dataset_name": "spider", "guid": 1150}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the highest acc percent across all basketball matches.", "sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "query_toks": ["SELECT", "acc_percent", "FROM", "basketball_match", "ORDER", "BY", "acc_percent", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "acc_percent", "from", "basketball_match", "order", "by", "acc_percent", "desc", "limit", "value"], "question": "Return the highest acc percent across all basketball matches.", "question_toks": ["Return", "the", "highest", "acc", "percent", "across", "all", "basketball", "matches", "."], "dataset_name": "spider", "guid": 1151}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the founded year for the school with the largest enrollment.", "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "query_toks": ["SELECT", "founded", "FROM", "university", "ORDER", "BY", "enrollment", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "founded", "from", "university", "order", "by", "enrollment", "desc", "limit", "value"], "question": "Return the founded year for the school with the largest enrollment.", "question_toks": ["Return", "the", "founded", "year", "for", "the", "school", "with", "the", "largest", "enrollment", "."], "dataset_name": "spider", "guid": 1152}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Which college has any student who is a goalie and succeeded in the tryout.", "sql": "SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'", "query_toks": ["SELECT", "cName", "FROM", "tryout", "WHERE", "decision", "=", "'yes", "'", "AND", "pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "cname", "from", "tryout", "where", "decision", "=", "value", "and", "ppos", "=", "value"], "question": "Which college has any student who is a goalie and succeeded in the tryout.", "question_toks": ["Which", "college", "has", "any", "student", "who", "is", "a", "goalie", "and", "succeeded", "in", "the", "tryout", "."], "dataset_name": "spider", "guid": 1153}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the names of people, ordered alphabetically.", "sql": "SELECT Name FROM people ORDER BY Name ASC", "example": {"db_id": "gymnast", "query": "SELECT Name FROM People ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "name", "asc"], "question": "Return the names of people, ordered alphabetically.", "question_toks": ["Return", "the", "names", "of", "people", ",", "ordered", "alphabetically", "."], "dataset_name": "spider", "guid": 1154}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the driver id and number of races of all drivers who have at most participated in 30 races?", "sql": "SELECT T1.driverid , count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*) <= 30", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "query_toks": ["SELECT", "T1.driverid", ",", "count", "(", "*", ")", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", "<", "=", "30"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "count", "(", "*", ")", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?", "question_toks": ["Find", "the", "driver", "id", "and", "number", "of", "races", "of", "all", "drivers", "who", "have", "at", "most", "participated", "in", "30", "races", "?"], "dataset_name": "spider", "guid": 1155}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the dates that have an average sea level pressure between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "mean_sea_level_pressure_inches", "BETWEEN", "30.3", "AND", "31"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "mean_sea_level_pressure_inches", "between", "value", "and", "value"], "question": "What are the dates that have an average sea level pressure between 30.3 and 31?", "question_toks": ["What", "are", "the", "dates", "that", "have", "an", "average", "sea", "level", "pressure", "between", "30.3", "and", "31", "?"], "dataset_name": "spider", "guid": 1156}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What is the most common hometown of gymnasts?", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "gymnast", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "GROUP", "BY", "T2.Hometown", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common hometown of gymnasts?", "question_toks": ["What", "is", "the", "most", "common", "hometown", "of", "gymnasts", "?"], "dataset_name": "spider", "guid": 1157}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many different bike ids are there?", "sql": "SELECT count(DISTINCT bike_id) FROM trip", "example": {"db_id": "bike_1", "query": "SELECT count(DISTINCT bike_id) FROM trip", "query_toks": ["SELECT", "count", "(", "DISTINCT", "bike_id", ")", "FROM", "trip"], "query_toks_no_value": ["select", "count", "(", "distinct", "bike_id", ")", "from", "trip"], "question": "How many different bike ids are there?", "question_toks": ["How", "many", "different", "bike", "ids", "are", "there", "?"], "dataset_name": "spider", "guid": 1158}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the different schools and their nicknames, ordered by their founding years?", "sql": "SELECT school, nickname FROM university ORDER BY founded", "example": {"db_id": "university_basketball", "query": "SELECT school ,  nickname FROM university ORDER BY founded", "query_toks": ["SELECT", "school", ",", "nickname", "FROM", "university", "ORDER", "BY", "founded"], "query_toks_no_value": ["select", "school", ",", "nickname", "from", "university", "order", "by", "founded"], "question": "What are the different schools and their nicknames, ordered by their founding years?", "question_toks": ["What", "are", "the", "different", "schools", "and", "their", "nicknames", ",", "ordered", "by", "their", "founding", "years", "?"], "dataset_name": "spider", "guid": 1159}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names, locations, and years of opening for tracks with seating higher than average?", "sql": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "example": {"db_id": "race_track", "query": "SELECT name ,  LOCATION ,  year_opened FROM track WHERE seating  >  (SELECT avg(seating) FROM track)", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "year_opened", "FROM", "track", "WHERE", "seating", ">", "(", "SELECT", "avg", "(", "seating", ")", "FROM", "track", ")"], "query_toks_no_value": ["select", "name", ",", "location", ",", "year_opened", "from", "track", "where", "seating", ">", "(", "select", "avg", "(", "seating", ")", "from", "track", ")"], "question": "What are the names, locations, and years of opening for tracks with seating higher than average?", "question_toks": ["What", "are", "the", "names", ",", "locations", ",", "and", "years", "of", "opening", "for", "tracks", "with", "seating", "higher", "than", "average", "?"], "dataset_name": "spider", "guid": 1160}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the states of the colleges where students who tried out for the striker position attend?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'striker", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value"], "question": "What are the states of the colleges where students who tried out for the striker position attend?", "question_toks": ["What", "are", "the", "states", "of", "the", "colleges", "where", "students", "who", "tried", "out", "for", "the", "striker", "position", "attend", "?"], "dataset_name": "spider", "guid": 1161}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Show times of elimination of wrestlers with days held more than 50.", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50", "example": {"db_id": "wrestler", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "query_toks": ["SELECT", "T1.Time", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "WHERE", "T2.Days_held", ">", "50"], "query_toks_no_value": ["select", "t1", ".", "time", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "where", "t2", ".", "days_held", ">", "value"], "question": "Show times of elimination of wrestlers with days held more than 50.", "question_toks": ["Show", "times", "of", "elimination", "of", "wrestlers", "with", "days", "held", "more", "than", "50", "."], "dataset_name": "spider", "guid": 1162}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the draft pick numbers and draft classes of players whose positions are defenders.", "sql": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"", "query_toks": ["SELECT", "Draft_Pick_Number", ",", "Draft_Class", "FROM", "match_season", "WHERE", "POSITION", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "draft_pick_number", ",", "draft_class", "from", "match_season", "where", "position", "=", "value"], "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.", "question_toks": ["Show", "the", "draft", "pick", "numbers", "and", "draft", "classes", "of", "players", "whose", "positions", "are", "defenders", "."], "dataset_name": "spider", "guid": 1163}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | How many body builders are there?", "sql": "SELECT count(*) FROM body_builder", "example": {"db_id": "body_builder", "query": "SELECT count(*) FROM body_builder", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "body_builder"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "body_builder"], "question": "How many body builders are there?", "question_toks": ["How", "many", "body", "builders", "are", "there", "?"], "dataset_name": "spider", "guid": 1164}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names and years of all races that had a driver with the last name Lewis?", "sql": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"", "example": {"db_id": "formula_1", "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"", "query_toks": ["SELECT", "T2.name", ",", "T2.year", "FROM", "results", "AS", "T1", "JOIN", "races", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T1.driverid", "=", "T3.driverid", "WHERE", "T3.forename", "=", "``", "Lewis", "''"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "year", "from", "results", "as", "t1", "join", "races", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t1", ".", "driverid", "=", "t3", ".", "driverid", "where", "t3", ".", "forename", "=", "value"], "question": "What are the names and years of all races that had a driver with the last name Lewis?", "question_toks": ["What", "are", "the", "names", "and", "years", "of", "all", "races", "that", "had", "a", "driver", "with", "the", "last", "name", "Lewis", "?"], "dataset_name": "spider", "guid": 1165}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the total number of players.", "sql": "SELECT count(*) FROM players", "example": {"db_id": "wta_1", "query": "SELECT count(*) FROM players", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "players"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "players"], "question": "Find the total number of players.", "question_toks": ["Find", "the", "total", "number", "of", "players", "."], "dataset_name": "spider", "guid": 1166}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the names of gymnasts who did not grow up in Santo Domingo.", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"", "example": {"db_id": "gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"", "query_toks": ["SELECT", "T2.Name", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "WHERE", "T2.Hometown", "!", "=", "``", "Santo", "Domingo", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "where", "t2", ".", "hometown", "!", "=", "value"], "question": "Return the names of gymnasts who did not grow up in Santo Domingo.", "question_toks": ["Return", "the", "names", "of", "gymnasts", "who", "did", "not", "grow", "up", "in", "Santo", "Domingo", "."], "dataset_name": "spider", "guid": 1167}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names of people who are not from Russia?", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "example": {"db_id": "poker_player", "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "Nationality", "!", "=", "``", "Russia", "''"], "query_toks_no_value": ["select", "name", "from", "people", "where", "nationality", "!", "=", "value"], "question": "What are the names of people who are not from Russia?", "question_toks": ["What", "are", "the", "names", "of", "people", "who", "are", "not", "from", "Russia", "?"], "dataset_name": "spider", "guid": 1168}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many schools have students playing in goalie and mid-field positions?", "sql": "SELECT COUNT(*) FROM (SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid')", "example": {"db_id": "soccer_2", "query": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "(", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'", "INTERSECT", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'mid", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "(", "select", "cname", "from", "tryout", "where", "ppos", "=", "value", "intersect", "select", "cname", "from", "tryout", "where", "ppos", "=", "value", ")"], "question": "How many schools have students playing in goalie and mid-field positions?", "question_toks": ["How", "many", "schools", "have", "students", "playing", "in", "goalie", "and", "mid-field", "positions", "?"], "dataset_name": "spider", "guid": 1169}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average latitude and longitude of the starting points of all trips?", "sql": "SELECT avg(T1.lat) , avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id", "example": {"db_id": "bike_1", "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "query_toks": ["SELECT", "avg", "(", "T1.lat", ")", ",", "avg", "(", "T1.long", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "lat", ")", ",", "avg", "(", "t1", ".", "long", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id"], "question": "What is the average latitude and longitude of the starting points of all trips?", "question_toks": ["What", "is", "the", "average", "latitude", "and", "longitude", "of", "the", "starting", "points", "of", "all", "trips", "?"], "dataset_name": "spider", "guid": 1170}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "sql": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'", "example": {"db_id": "wta_1", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "query_toks": ["SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'WTA", "Championships", "'", "INTERSECT", "SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'Australian", "Open", "'"], "query_toks_no_value": ["select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value", "intersect", "select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value"], "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "question_toks": ["What", "are", "the", "first", "names", "and", "country", "codes", "for", "players", "who", "won", "both", "the", "WTA", "Championships", "and", "the", "Australian", "Open", "?"], "dataset_name": "spider", "guid": 1171}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | How many distinct colleges are associated with players from the team with name \"Columbus Crew\".", "sql": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"", "example": {"db_id": "match_season", "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.College", ")", "FROM", "match_season", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id", "WHERE", "T2.Name", "=", "``", "Columbus", "Crew", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "college", ")", "from", "match_season", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id", "where", "t2", ".", "name", "=", "value"], "question": "How many distinct colleges are associated with players from the team with name \"Columbus Crew\".", "question_toks": ["How", "many", "distinct", "colleges", "are", "associated", "with", "players", "from", "the", "team", "with", "name", "``", "Columbus", "Crew", "''", "."], "dataset_name": "spider", "guid": 1172}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Show the enrollment and primary_conference of the oldest college.", "sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "query_toks": ["SELECT", "enrollment", ",", "primary_conference", "FROM", "university", "ORDER", "BY", "founded", "LIMIT", "1"], "query_toks_no_value": ["select", "enrollment", ",", "primary_conference", "from", "university", "order", "by", "founded", "limit", "value"], "question": "Show the enrollment and primary_conference of the oldest college.", "question_toks": ["Show", "the", "enrollment", "and", "primary_conference", "of", "the", "oldest", "college", "."], "dataset_name": "spider", "guid": 1173}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the names and genders of players with a coach starting after 2011.", "sql": "SELECT T3.Player_name , T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011", "example": {"db_id": "riding_club", "query": "SELECT T3.Player_name ,  T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T1.Starting_year  >  2011", "query_toks": ["SELECT", "T3.Player_name", ",", "T3.gender", "FROM", "player_coach", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.Coach_ID", "=", "T2.Coach_ID", "JOIN", "player", "AS", "T3", "ON", "T1.Player_ID", "=", "T3.Player_ID", "WHERE", "T1.Starting_year", ">", "2011"], "query_toks_no_value": ["select", "t3", ".", "player_name", ",", "t3", ".", "gender", "from", "player_coach", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "coach_id", "=", "t2", ".", "coach_id", "join", "player", "as", "t3", "on", "t1", ".", "player_id", "=", "t3", ".", "player_id", "where", "t1", ".", "starting_year", ">", "value"], "question": "Show the names and genders of players with a coach starting after 2011.", "question_toks": ["Show", "the", "names", "and", "genders", "of", "players", "with", "a", "coach", "starting", "after", "2011", "."], "dataset_name": "spider", "guid": 1174}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id and last name of the driver with the longest laptime?", "sql": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "ORDER", "BY", "T2.milliseconds", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "order", "by", "t2", ".", "milliseconds", "desc", "limit", "value"], "question": "What is the id and last name of the driver with the longest laptime?", "question_toks": ["What", "is", "the", "id", "and", "last", "name", "of", "the", "driver", "with", "the", "longest", "laptime", "?"], "dataset_name": "spider", "guid": 1175}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the schools that were either founded before 1850 or are public?", "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "example": {"db_id": "university_basketball", "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "query_toks": ["SELECT", "school", "FROM", "university", "WHERE", "founded", ">", "1850", "OR", "affiliation", "=", "'Public", "'"], "query_toks_no_value": ["select", "school", "from", "university", "where", "founded", ">", "value", "or", "affiliation", "=", "value"], "question": "What are the schools that were either founded before 1850 or are public?", "question_toks": ["What", "are", "the", "schools", "that", "were", "either", "founded", "before", "1850", "or", "are", "public", "?"], "dataset_name": "spider", "guid": 1176}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the total scores of the body builders whose birthday contains the string \"January\" ?", "sql": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";", "example": {"db_id": "body_builder", "query": "SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T2.Birth_Date LIKE \"%January%\";", "query_toks": ["SELECT", "T1.total", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.people_id", "=", "T2.people_id", "WHERE", "T2.Birth_Date", "LIKE", "``", "%", "January", "%", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "total", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "birth_date", "like", "value"], "question": "What are the total scores of the body builders whose birthday contains the string \"January\" ?", "question_toks": ["What", "are", "the", "total", "scores", "of", "the", "body", "builders", "whose", "birthday", "contains", "the", "string", "``", "January", "''", "?"], "dataset_name": "spider", "guid": 1177}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is the founded year of the non public school that was founded most recently?", "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "query_toks": ["SELECT", "founded", "FROM", "university", "WHERE", "affiliation", "!", "=", "'Public", "'", "ORDER", "BY", "founded", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "founded", "from", "university", "where", "affiliation", "!", "=", "value", "order", "by", "founded", "desc", "limit", "value"], "question": "What is the founded year of the non public school that was founded most recently?", "question_toks": ["What", "is", "the", "founded", "year", "of", "the", "non", "public", "school", "that", "was", "founded", "most", "recently", "?"], "dataset_name": "spider", "guid": 1178}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | How many distinct birth places are there?", "sql": "SELECT count(DISTINCT Birth_Place) FROM people", "example": {"db_id": "body_builder", "query": "SELECT count(DISTINCT Birth_Place) FROM people", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Birth_Place", ")", "FROM", "people"], "query_toks_no_value": ["select", "count", "(", "distinct", "birth_place", ")", "from", "people"], "question": "How many distinct birth places are there?", "question_toks": ["How", "many", "distinct", "birth", "places", "are", "there", "?"], "dataset_name": "spider", "guid": 1179}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the reigns and days held of all wrestlers?", "sql": "SELECT Reign ,  Days_held FROM wrestler", "example": {"db_id": "wrestler", "query": "SELECT Reign ,  Days_held FROM wrestler", "query_toks": ["SELECT", "Reign", ",", "Days_held", "FROM", "wrestler"], "query_toks_no_value": ["select", "reign", ",", "days_held", "from", "wrestler"], "question": "What are the reigns and days held of all wrestlers?", "question_toks": ["What", "are", "the", "reigns", "and", "days", "held", "of", "all", "wrestlers", "?"], "dataset_name": "spider", "guid": 1180}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names of all stations that have more than 10 bikes available and are not located in San Jose?", "sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"", "example": {"db_id": "bike_1", "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"", "query_toks": ["SELECT", "T1.name", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "GROUP", "BY", "T2.station_id", "HAVING", "avg", "(", "bikes_available", ")", ">", "10", "EXCEPT", "SELECT", "name", "FROM", "station", "WHERE", "city", "=", "``", "San", "Jose", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "group", "by", "t2", ".", "station_id", "having", "avg", "(", "bikes_available", ")", ">", "value", "except", "select", "name", "from", "station", "where", "city", "=", "value"], "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?", "question_toks": ["What", "are", "the", "names", "of", "all", "stations", "that", "have", "more", "than", "10", "bikes", "available", "and", "are", "not", "located", "in", "San", "Jose", "?"], "dataset_name": "spider", "guid": 1181}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the names of Japanese constructors that have once earned more than 5 points?", "sql": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5", "example": {"db_id": "formula_1", "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5", "query_toks": ["SELECT", "T1.name", "FROM", "constructors", "AS", "T1", "JOIN", "constructorstandings", "AS", "T2", "ON", "T1.constructorid", "=", "T2.constructorid", "WHERE", "T1.nationality", "=", "``", "Japanese", "''", "AND", "T2.points", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "constructors", "as", "t1", "join", "constructorstandings", "as", "t2", "on", "t1", ".", "constructorid", "=", "t2", ".", "constructorid", "where", "t1", ".", "nationality", "=", "value", "and", "t2", ".", "points", ">", "value"], "question": "Find the names of Japanese constructors that have once earned more than 5 points?", "question_toks": ["Find", "the", "names", "of", "Japanese", "constructors", "that", "have", "once", "earned", "more", "than", "5", "points", "?"], "dataset_name": "spider", "guid": 1182}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the name of the club that has the most female students.", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "club_1", "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.sex", "=", "``", "F", "''", "GROUP", "BY", "t1.clubname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "sex", "=", "value", "group", "by", "t1", ".", "clubname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the club that has the most female students.", "question_toks": ["Find", "the", "name", "of", "the", "club", "that", "has", "the", "most", "female", "students", "."], "dataset_name": "spider", "guid": 1183}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of stadiums which have never had any event.", "sql": "SELECT t1.name FROM stadium AS t1 WHERE t1.id NOT IN (SELECT t2.stadium_id FROM event AS t2)", "example": {"db_id": "swimming", "query": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)", "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "id", "NOT", "IN", "(", "SELECT", "stadium_id", "FROM", "event", ")"], "query_toks_no_value": ["select", "name", "from", "stadium", "where", "id", "not", "in", "(", "select", "stadium_id", "from", "event", ")"], "question": "Find the names of stadiums which have never had any event.", "question_toks": ["Find", "the", "names", "of", "stadiums", "which", "have", "never", "had", "any", "event", "."], "dataset_name": "spider", "guid": 1184}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many trips did not end in San Francisco?", "sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"", "example": {"db_id": "bike_1", "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "trip", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.end_station_id", "=", "T2.id", "WHERE", "T2.city", "!", "=", "``", "San", "Francisco", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "trip", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "end_station_id", "=", "t2", ".", "id", "where", "t2", ".", "city", "!", "=", "value"], "question": "How many trips did not end in San Francisco?", "question_toks": ["How", "many", "trips", "did", "not", "end", "in", "San", "Francisco", "?"], "dataset_name": "spider", "guid": 1185}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the numbers of races for each constructor id?", "sql": "SELECT count(*) , constructorid FROM constructorStandings GROUP BY constructorid", "example": {"db_id": "formula_1", "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "constructorid", "FROM", "constructorStandings", "GROUP", "BY", "constructorid"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "constructorid", "from", "constructorstandings", "group", "by", "constructorid"], "question": "What are the numbers of races for each constructor id?", "question_toks": ["What", "are", "the", "numbers", "of", "races", "for", "each", "constructor", "id", "?"], "dataset_name": "spider", "guid": 1186}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Which start station had the most trips starting from August? Give me the name and id of the station.", "sql": "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "start_station_name", ",", "start_station_id", "FROM", "trip", "WHERE", "start_date", "LIKE", "``", "8/", "%", "''", "GROUP", "BY", "start_station_name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "start_station_name", ",", "start_station_id", "from", "trip", "where", "start_date", "like", "value", "group", "by", "start_station_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which start station had the most trips starting from August? Give me the name and id of the station.", "question_toks": ["Which", "start", "station", "had", "the", "most", "trips", "starting", "from", "August", "?", "Give", "me", "the", "name", "and", "id", "of", "the", "station", "."], "dataset_name": "spider", "guid": 1187}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the id and name of the stations that have ever had more than 12 bikes available?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "query_toks": ["SELECT", "DISTINCT", "T1.id", ",", "T1.name", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "WHERE", "T2.bikes_available", ">", "12"], "query_toks_no_value": ["select", "distinct", "t1", ".", "id", ",", "t1", ".", "name", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "where", "t2", ".", "bikes_available", ">", "value"], "question": "What are the id and name of the stations that have ever had more than 12 bikes available?", "question_toks": ["What", "are", "the", "id", "and", "name", "of", "the", "stations", "that", "have", "ever", "had", "more", "than", "12", "bikes", "available", "?"], "dataset_name": "spider", "guid": 1188}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | List the names of members in ascending alphabetical order.", "sql": "SELECT Name FROM member ORDER BY Name ASC", "example": {"db_id": "decoration_competition", "query": "SELECT Name FROM member ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "member", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "member", "order", "by", "name", "asc"], "question": "List the names of members in ascending alphabetical order.", "question_toks": ["List", "the", "names", "of", "members", "in", "ascending", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 1189}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | Show all information about each body builder.", "sql": "SELECT * FROM body_builder", "example": {"db_id": "body_builder", "query": "SELECT * FROM body_builder", "query_toks": ["SELECT", "*", "FROM", "body_builder"], "query_toks_no_value": ["select", "*", "from", "body_builder"], "question": "Show all information about each body builder.", "question_toks": ["Show", "all", "information", "about", "each", "body", "builder", "."], "dataset_name": "spider", "guid": 1190}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the enrollment and primary conference for the university which was founded the earliest?", "sql": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1", "query_toks": ["SELECT", "enrollment", ",", "primary_conference", "FROM", "university", "ORDER", "BY", "founded", "LIMIT", "1"], "query_toks_no_value": ["select", "enrollment", ",", "primary_conference", "from", "university", "order", "by", "founded", "limit", "value"], "question": "What are the enrollment and primary conference for the university which was founded the earliest?", "question_toks": ["What", "are", "the", "enrollment", "and", "primary", "conference", "for", "the", "university", "which", "was", "founded", "the", "earliest", "?"], "dataset_name": "spider", "guid": 1191}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | List all public schools and their locations.", "sql": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "example": {"db_id": "university_basketball", "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "query_toks": ["SELECT", "school", ",", "LOCATION", "FROM", "university", "WHERE", "affiliation", "=", "'Public", "'"], "query_toks_no_value": ["select", "school", ",", "location", "from", "university", "where", "affiliation", "=", "value"], "question": "List all public schools and their locations.", "question_toks": ["List", "all", "public", "schools", "and", "their", "locations", "."], "dataset_name": "spider", "guid": 1192}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many members does the club \"Tennis Club\" has?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "How many members does the club \"Tennis Club\" has?", "question_toks": ["How", "many", "members", "does", "the", "club", "``", "Tennis", "Club", "''", "has", "?"], "dataset_name": "spider", "guid": 1193}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What is the total point count of the youngest gymnast?", "sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "example": {"db_id": "gymnast", "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "query_toks": ["SELECT", "T1.Total_Points", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Age", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "total_points", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "age", "asc", "limit", "value"], "question": "What is the total point count of the youngest gymnast?", "question_toks": ["What", "is", "the", "total", "point", "count", "of", "the", "youngest", "gymnast", "?"], "dataset_name": "spider", "guid": 1194}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many different players trained for more than 1000 hours?", "sql": "SELECT count(*) FROM Player WHERE HS  >  1000", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM Player WHERE HS  >  1000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Player", "WHERE", "HS", ">", "1000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "player", "where", "hs", ">", "value"], "question": "How many different players trained for more than 1000 hours?", "question_toks": ["How", "many", "different", "players", "trained", "for", "more", "than", "1000", "hours", "?"], "dataset_name": "spider", "guid": 1195}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the first names of all players, and their average rankings?", "sql": "SELECT avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name", "example": {"db_id": "wta_1", "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "query_toks": ["SELECT", "avg", "(", "ranking", ")", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "GROUP", "BY", "T1.first_name"], "query_toks_no_value": ["select", "avg", "(", "ranking", ")", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "group", "by", "t1", ".", "first_name"], "question": "What are the first names of all players, and their average rankings?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "players", ",", "and", "their", "average", "rankings", "?"], "dataset_name": "spider", "guid": 1196}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | When and in what zip code did max temperature reach 80?", "sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "example": {"db_id": "bike_1", "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "query_toks": ["SELECT", "date", ",", "zip_code", "FROM", "weather", "WHERE", "max_temperature_f", ">", "=", "80"], "query_toks_no_value": ["select", "date", ",", "zip_code", "from", "weather", "where", "max_temperature_f", ">", "=", "value"], "question": "When and in what zip code did max temperature reach 80?", "question_toks": ["When", "and", "in", "what", "zip", "code", "did", "max", "temperature", "reach", "80", "?"], "dataset_name": "spider", "guid": 1197}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the distinct positions of the players from a country whose capital is Dublin?", "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = \"Dublin\"", "example": {"db_id": "match_season", "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"", "query_toks": ["SELECT", "DISTINCT", "T2.Position", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T1.Capital", "=", "``", "Dublin", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "position", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t1", ".", "capital", "=", "value"], "question": "What are the distinct positions of the players from a country whose capital is Dublin?", "question_toks": ["What", "are", "the", "distinct", "positions", "of", "the", "players", "from", "a", "country", "whose", "capital", "is", "Dublin", "?"], "dataset_name": "spider", "guid": 1198}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the maximum number of final tables made among poker players with earnings less than 200000?", "sql": "SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000", "example": {"db_id": "poker_player", "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "query_toks": ["SELECT", "max", "(", "Final_Table_Made", ")", "FROM", "poker_player", "WHERE", "Earnings", "<", "200000"], "query_toks_no_value": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "value"], "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "question_toks": ["What", "is", "the", "maximum", "number", "of", "final", "tables", "made", "among", "poker", "players", "with", "earnings", "less", "than", "200000", "?"], "dataset_name": "spider", "guid": 1199}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of all swimmers, sorted by their 100 meter scores in ascending order.", "sql": "SELECT name FROM swimmer ORDER BY meter_100", "example": {"db_id": "swimming", "query": "SELECT name FROM swimmer ORDER BY meter_100", "query_toks": ["SELECT", "name", "FROM", "swimmer", "ORDER", "BY", "meter_100"], "query_toks_no_value": ["select", "name", "from", "swimmer", "order", "by", "meter_100"], "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.", "question_toks": ["Find", "the", "names", "of", "all", "swimmers", ",", "sorted", "by", "their", "100", "meter", "scores", "in", "ascending", "order", "."], "dataset_name": "spider", "guid": 1200}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What is the name, location and seating for the most recently opened track?", "sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "example": {"db_id": "race_track", "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "seating", "FROM", "track", "ORDER", "BY", "year_opened", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "location", ",", "seating", "from", "track", "order", "by", "year_opened", "desc", "limit", "value"], "question": "What is the name, location and seating for the most recently opened track?", "question_toks": ["What", "is", "the", "name", ",", "location", "and", "seating", "for", "the", "most", "recently", "opened", "track", "?"], "dataset_name": "spider", "guid": 1201}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''", "AND", "t2.position", "=", "``", "CTO", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t2", ".", "position", "=", "value"], "question": "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?", "question_toks": ["Find", "the", "first", "name", "and", "last", "name", "for", "the", "``", "CTO", "''", "of", "the", "club", "``", "Hopkins", "Student", "Enterprises", "''", "?"], "dataset_name": "spider", "guid": 1202}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many days had both mean humidity above 50 and mean visibility above 8?", "sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "example": {"db_id": "bike_1", "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "weather", "WHERE", "mean_humidity", ">", "50", "AND", "mean_visibility_miles", ">", "8"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "weather", "where", "mean_humidity", ">", "value", "and", "mean_visibility_miles", ">", "value"], "question": "How many days had both mean humidity above 50 and mean visibility above 8?", "question_toks": ["How", "many", "days", "had", "both", "mean", "humidity", "above", "50", "and", "mean", "visibility", "above", "8", "?"], "dataset_name": "spider", "guid": 1203}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the name of the swimmer who has at least 2 records.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id HAVING COUNT(*) >= 2", "example": {"db_id": "swimming", "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "GROUP", "BY", "t2.swimmer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "group", "by", "t2", ".", "swimmer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the name of the swimmer who has at least 2 records.", "question_toks": ["Find", "the", "name", "of", "the", "swimmer", "who", "has", "at", "least", "2", "records", "."], "dataset_name": "spider", "guid": 1204}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the description of the club \"Pen and Paper Gaming\".", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "example": {"db_id": "club_1", "query": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "query_toks": ["SELECT", "clubdesc", "FROM", "club", "WHERE", "clubname", "=", "``", "Pen", "and", "Paper", "Gaming", "''"], "query_toks_no_value": ["select", "clubdesc", "from", "club", "where", "clubname", "=", "value"], "question": "Find the description of the club \"Pen and Paper Gaming\".", "question_toks": ["Find", "the", "description", "of", "the", "club", "``", "Pen", "and", "Paper", "Gaming", "''", "."], "dataset_name": "spider", "guid": 1205}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name of players whose card is yes in the descending order of training hours.", "sql": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC", "example": {"db_id": "soccer_2", "query": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC", "query_toks": ["SELECT", "pName", "FROM", "Player", "WHERE", "yCard", "=", "'yes", "'", "ORDER", "BY", "HS", "DESC"], "query_toks_no_value": ["select", "pname", "from", "player", "where", "ycard", "=", "value", "order", "by", "hs", "desc"], "question": "Find the name of players whose card is yes in the descending order of training hours.", "question_toks": ["Find", "the", "name", "of", "players", "whose", "card", "is", "yes", "in", "the", "descending", "order", "of", "training", "hours", "."], "dataset_name": "spider", "guid": 1206}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the total number of enrollment of schools that do not have any goalie player?", "sql": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")", "example": {"db_id": "soccer_2", "query": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")", "query_toks": ["SELECT", "sum", "(", "enr", ")", "FROM", "college", "WHERE", "cName", "NOT", "IN", "(", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "``", "goalie", "''", ")"], "query_toks_no_value": ["select", "sum", "(", "enr", ")", "from", "college", "where", "cname", "not", "in", "(", "select", "cname", "from", "tryout", "where", "ppos", "=", "value", ")"], "question": "What is the total number of enrollment of schools that do not have any goalie player?", "question_toks": ["What", "is", "the", "total", "number", "of", "enrollment", "of", "schools", "that", "do", "not", "have", "any", "goalie", "player", "?"], "dataset_name": "spider", "guid": 1207}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?", "sql": "SELECT DISTINCT T1.driverid , T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "query_toks": ["SELECT", "DISTINCT", "T1.driverid", ",", "T1.nationality", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.milliseconds", ">", "100000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "driverid", ",", "t1", ".", "nationality", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "milliseconds", ">", "value"], "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?", "question_toks": ["What", "are", "the", "different", "driver", "ids", "and", "nationalities", "of", "all", "drivers", "who", "had", "a", "laptime", "of", "more", "than", "100000", "milliseconds", "?"], "dataset_name": "spider", "guid": 1208}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | How many different countries are all the swimmers from?", "sql": "SELECT count(DISTINCT nationality) FROM swimmer", "example": {"db_id": "swimming", "query": "SELECT count(DISTINCT nationality) FROM swimmer", "query_toks": ["SELECT", "count", "(", "DISTINCT", "nationality", ")", "FROM", "swimmer"], "query_toks_no_value": ["select", "count", "(", "distinct", "nationality", ")", "from", "swimmer"], "question": "How many different countries are all the swimmers from?", "question_toks": ["How", "many", "different", "countries", "are", "all", "the", "swimmers", "from", "?"], "dataset_name": "spider", "guid": 1209}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | find the number of distinct country codes of all players.", "sql": "SELECT COUNT(DISTINCT country_code) FROM players", "example": {"db_id": "wta_1", "query": "SELECT count(DISTINCT country_code) FROM players", "query_toks": ["SELECT", "count", "(", "DISTINCT", "country_code", ")", "FROM", "players"], "query_toks_no_value": ["select", "count", "(", "distinct", "country_code", ")", "from", "players"], "question": "find the number of distinct country codes of all players.", "question_toks": ["find", "the", "number", "of", "distinct", "country", "codes", "of", "all", "players", "."], "dataset_name": "spider", "guid": 1210}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Give me a list of names and years of races that had any driver whose forename is Lewis?", "sql": "SELECT T2.name, T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"", "example": {"db_id": "formula_1", "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"", "query_toks": ["SELECT", "T2.name", ",", "T2.year", "FROM", "results", "AS", "T1", "JOIN", "races", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T1.driverid", "=", "T3.driverid", "WHERE", "T3.forename", "=", "``", "Lewis", "''"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "year", "from", "results", "as", "t1", "join", "races", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t1", ".", "driverid", "=", "t3", ".", "driverid", "where", "t3", ".", "forename", "=", "value"], "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?", "question_toks": ["Give", "me", "a", "list", "of", "names", "and", "years", "of", "races", "that", "had", "any", "driver", "whose", "forename", "is", "Lewis", "?"], "dataset_name": "spider", "guid": 1211}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the unique types of player positions in the tryout?", "sql": "SELECT count(DISTINCT pPos) FROM tryout", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT pPos) FROM tryout", "query_toks": ["SELECT", "count", "(", "DISTINCT", "pPos", ")", "FROM", "tryout"], "query_toks_no_value": ["select", "count", "(", "distinct", "ppos", ")", "from", "tryout"], "question": "What are the unique types of player positions in the tryout?", "question_toks": ["What", "are", "the", "unique", "types", "of", "player", "positions", "in", "the", "tryout", "?"], "dataset_name": "spider", "guid": 1212}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss'", "example": {"db_id": "swimming", "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'", "query_toks": ["SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "WHERE", "RESULT", "=", "'Win", "'", "INTERSECT", "SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "WHERE", "RESULT", "=", "'Loss", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "where", "result", "=", "value", "intersect", "select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "where", "result", "=", "value"], "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.", "question_toks": ["Find", "the", "names", "of", "the", "swimmers", "who", "have", "both", "``", "win", "''", "and", "``", "loss", "''", "results", "in", "the", "record", "."], "dataset_name": "spider", "guid": 1213}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the start station's name and id for the one that had the most start trips in August?", "sql": "SELECT start_station_name , start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "start_station_name", ",", "start_station_id", "FROM", "trip", "WHERE", "start_date", "LIKE", "``", "8/", "%", "''", "GROUP", "BY", "start_station_name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "start_station_name", ",", "start_station_id", "from", "trip", "where", "start_date", "like", "value", "group", "by", "start_station_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the start station's name and id for the one that had the most start trips in August?", "question_toks": ["What", "are", "the", "start", "station", "'s", "name", "and", "id", "for", "the", "one", "that", "had", "the", "most", "start", "trips", "in", "August", "?"], "dataset_name": "spider", "guid": 1214}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the latitude, longitude, city of the station from which the shortest trip started?", "sql": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "query_toks": ["SELECT", "T1.lat", ",", "T1.long", ",", "T1.city", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id", "ORDER", "BY", "T2.duration", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "lat", ",", "t1", ".", "long", ",", "t1", ".", "city", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id", "order", "by", "t2", ".", "duration", "limit", "value"], "question": "What is the latitude, longitude, city of the station from which the shortest trip started?", "question_toks": ["What", "is", "the", "latitude", ",", "longitude", ",", "city", "of", "the", "station", "from", "which", "the", "shortest", "trip", "started", "?"], "dataset_name": "spider", "guid": 1215}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the distinct years in which the competitions type is not \"Tournament\"?", "sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"", "example": {"db_id": "sports_competition", "query": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"", "query_toks": ["SELECT", "DISTINCT", "YEAR", "FROM", "competition", "WHERE", "Competition_type", "!", "=", "``", "Tournament", "''"], "query_toks_no_value": ["select", "distinct", "year", "from", "competition", "where", "competition_type", "!", "=", "value"], "question": "What are the distinct years in which the competitions type is not \"Tournament\"?", "question_toks": ["What", "are", "the", "distinct", "years", "in", "which", "the", "competitions", "type", "is", "not", "``", "Tournament", "''", "?"], "dataset_name": "spider", "guid": 1216}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the name and rank of the 3 youngest winners across all matches.", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "example": {"db_id": "wta_1", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "query_toks": ["SELECT", "DISTINCT", "winner_name", ",", "winner_rank", "FROM", "matches", "ORDER", "BY", "winner_age", "LIMIT", "3"], "query_toks_no_value": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "value"], "question": "Find the name and rank of the 3 youngest winners across all matches.", "question_toks": ["Find", "the", "name", "and", "rank", "of", "the", "3", "youngest", "winners", "across", "all", "matches", "."], "dataset_name": "spider", "guid": 1217}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the ids and last names of all drivers who participated in the most races?", "sql": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the ids and last names of all drivers who participated in the most races?", "question_toks": ["What", "are", "the", "ids", "and", "last", "names", "of", "all", "drivers", "who", "participated", "in", "the", "most", "races", "?"], "dataset_name": "spider", "guid": 1218}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the times used by climbers who climbed mountains in the country of Uganda?", "sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"", "example": {"db_id": "climbing", "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"", "query_toks": ["SELECT", "T1.Time", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID", "WHERE", "T2.Country", "=", "``", "Uganda", "''"], "query_toks_no_value": ["select", "t1", ".", "time", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id", "where", "t2", ".", "country", "=", "value"], "question": "What are the times used by climbers who climbed mountains in the country of Uganda?", "question_toks": ["What", "are", "the", "times", "used", "by", "climbers", "who", "climbed", "mountains", "in", "the", "country", "of", "Uganda", "?"], "dataset_name": "spider", "guid": 1219}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the distinct names of all races held between 2014 and 2017?", "sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "races", "WHERE", "YEAR", "BETWEEN", "2014", "AND", "2017"], "query_toks_no_value": ["select", "distinct", "name", "from", "races", "where", "year", "between", "value", "and", "value"], "question": "Find the distinct names of all races held between 2014 and 2017?", "question_toks": ["Find", "the", "distinct", "names", "of", "all", "races", "held", "between", "2014", "and", "2017", "?"], "dataset_name": "spider", "guid": 1220}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?", "sql": "SELECT DISTINCT T1.driverid , T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000", "query_toks": ["SELECT", "DISTINCT", "T1.driverid", ",", "T1.nationality", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.milliseconds", ">", "100000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "driverid", ",", "t1", ".", "nationality", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "milliseconds", ">", "value"], "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?", "question_toks": ["Find", "all", "the", "distinct", "id", "and", "nationality", "of", "drivers", "who", "have", "had", "laptime", "more", "than", "100000", "milliseconds", "?"], "dataset_name": "spider", "guid": 1221}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the zip code in which the average mean sea level pressure is the lowest?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "ORDER", "BY", "avg", "(", "mean_sea_level_pressure_inches", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "order", "by", "avg", "(", "mean_sea_level_pressure_inches", ")", "limit", "value"], "question": "What is the zip code in which the average mean sea level pressure is the lowest?", "question_toks": ["What", "is", "the", "zip", "code", "in", "which", "the", "average", "mean", "sea", "level", "pressure", "is", "the", "lowest", "?"], "dataset_name": "spider", "guid": 1222}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.", "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "query_toks": ["SELECT", "date", ",", "max_temperature_f", "-", "min_temperature_f", "FROM", "weather", "ORDER", "BY", "max_temperature_f", "-", "min_temperature_f", "LIMIT", "1"], "query_toks_no_value": ["select", "date", ",", "max_temperature_f", "-", "min_temperature_f", "from", "weather", "order", "by", "max_temperature_f", "-", "min_temperature_f", "limit", "value"], "question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.", "question_toks": ["Find", "the", "day", "in", "which", "the", "difference", "between", "the", "max", "temperature", "and", "min", "temperature", "was", "the", "smallest", ".", "Also", "report", "the", "difference", "."], "dataset_name": "spider", "guid": 1223}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the names of schools that have some players in the mid position but not in the goalie position.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "query_toks": ["SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'mid", "'", "EXCEPT", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "cname", "from", "tryout", "where", "ppos", "=", "value", "except", "select", "cname", "from", "tryout", "where", "ppos", "=", "value"], "question": "Find the names of schools that have some players in the mid position but not in the goalie position.", "question_toks": ["Find", "the", "names", "of", "schools", "that", "have", "some", "players", "in", "the", "mid", "position", "but", "not", "in", "the", "goalie", "position", "."], "dataset_name": "spider", "guid": 1224}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the names of all the clubs that have at least a member from the city with city code \"BAL\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.city_code", "=", "``", "BAL", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "city_code", "=", "value"], "question": "Find the names of all the clubs that have at least a member from the city with city code \"BAL\".", "question_toks": ["Find", "the", "names", "of", "all", "the", "clubs", "that", "have", "at", "least", "a", "member", "from", "the", "city", "with", "city", "code", "``", "BAL", "''", "."], "dataset_name": "spider", "guid": 1225}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | How many clubs are there?", "sql": "SELECT count(*) FROM club", "example": {"db_id": "sports_competition", "query": "SELECT count(*) FROM club", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club"], "question": "How many clubs are there?", "question_toks": ["How", "many", "clubs", "are", "there", "?"], "dataset_name": "spider", "guid": 1226}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"BAL\"", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.city_code", "=", "``", "BAL", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "city_code", "=", "value"], "question": "Which clubs have one or more members from the city with code \"BAL\"? Give me the names of the clubs.", "question_toks": ["Which", "clubs", "have", "one", "or", "more", "members", "from", "the", "city", "with", "code", "``", "BAL", "''", "?", "Give", "me", "the", "names", "of", "the", "clubs", "."], "dataset_name": "spider", "guid": 1227}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is average enrollment of colleges in the state FL?", "sql": "SELECT avg(enr) FROM College WHERE state  =  'FL'", "example": {"db_id": "soccer_2", "query": "SELECT avg(enr) FROM College WHERE state  =  'FL'", "query_toks": ["SELECT", "avg", "(", "enr", ")", "FROM", "College", "WHERE", "state", "=", "'FL", "'"], "query_toks_no_value": ["select", "avg", "(", "enr", ")", "from", "college", "where", "state", "=", "value"], "question": "What is average enrollment of colleges in the state FL?", "question_toks": ["What", "is", "average", "enrollment", "of", "colleges", "in", "the", "state", "FL", "?"], "dataset_name": "spider", "guid": 1228}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | In which state is the college that Charles attends?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "JOIN", "player", "AS", "T3", "ON", "T2.pID", "=", "T3.pID", "WHERE", "T3.pName", "=", "'Charles", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "join", "player", "as", "t3", "on", "t2", ".", "pid", "=", "t3", ".", "pid", "where", "t3", ".", "pname", "=", "value"], "question": "In which state is the college that Charles attends?", "question_toks": ["In", "which", "state", "is", "the", "college", "that", "Charles", "attends", "?"], "dataset_name": "spider", "guid": 1229}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What is the average age of all gymnasts?", "sql": "SELECT AVG(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID", "example": {"db_id": "gymnast", "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "query_toks": ["SELECT", "avg", "(", "T2.Age", ")", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "age", ")", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id"], "question": "What is the average age of all gymnasts?", "question_toks": ["What", "is", "the", "average", "age", "of", "all", "gymnasts", "?"], "dataset_name": "spider", "guid": 1230}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Give me the dates when the max temperature was higher than 85.", "sql": "SELECT date FROM weather WHERE max_temperature_f  >  85", "example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE max_temperature_f  >  85", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "max_temperature_f", ">", "85"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "max_temperature_f", ">", "value"], "question": "Give me the dates when the max temperature was higher than 85.", "question_toks": ["Give", "me", "the", "dates", "when", "the", "max", "temperature", "was", "higher", "than", "85", "."], "dataset_name": "spider", "guid": 1231}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show all official native languages that contain the word \"English\".", "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"", "example": {"db_id": "match_season", "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"", "query_toks": ["SELECT", "Official_native_language", "FROM", "country", "WHERE", "Official_native_language", "LIKE", "``", "%", "English", "%", "''"], "query_toks_no_value": ["select", "official_native_language", "from", "country", "where", "official_native_language", "like", "value"], "question": "Show all official native languages that contain the word \"English\".", "question_toks": ["Show", "all", "official", "native", "languages", "that", "contain", "the", "word", "``", "English", "''", "."], "dataset_name": "spider", "guid": 1232}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the total and maximum duration for all trips with the bike id 636?", "sql": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "example": {"db_id": "bike_1", "query": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636", "query_toks": ["SELECT", "sum", "(", "duration", ")", ",", "max", "(", "duration", ")", "FROM", "trip", "WHERE", "bike_id", "=", "636"], "query_toks_no_value": ["select", "sum", "(", "duration", ")", ",", "max", "(", "duration", ")", "from", "trip", "where", "bike_id", "=", "value"], "question": "What is the total and maximum duration for all trips with the bike id 636?", "question_toks": ["What", "is", "the", "total", "and", "maximum", "duration", "for", "all", "trips", "with", "the", "bike", "id", "636", "?"], "dataset_name": "spider", "guid": 1233}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What is the maximum point for climbers whose country is United Kingdom?", "sql": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"", "example": {"db_id": "climbing", "query": "SELECT max(Points) FROM climber WHERE Country  =  \"United Kingdom\"", "query_toks": ["SELECT", "max", "(", "Points", ")", "FROM", "climber", "WHERE", "Country", "=", "``", "United", "Kingdom", "''"], "query_toks_no_value": ["select", "max", "(", "points", ")", "from", "climber", "where", "country", "=", "value"], "question": "What is the maximum point for climbers whose country is United Kingdom?", "question_toks": ["What", "is", "the", "maximum", "point", "for", "climbers", "whose", "country", "is", "United", "Kingdom", "?"], "dataset_name": "spider", "guid": 1234}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names and locations of all tracks?", "sql": "SELECT name ,  LOCATION FROM track", "example": {"db_id": "race_track", "query": "SELECT name ,  LOCATION FROM track", "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "track"], "query_toks_no_value": ["select", "name", ",", "location", "from", "track"], "question": "What are the names and locations of all tracks?", "question_toks": ["What", "are", "the", "names", "and", "locations", "of", "all", "tracks", "?"], "dataset_name": "spider", "guid": 1235}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the names and capitals of each country?", "sql": "SELECT Country_name ,  Capital FROM country", "example": {"db_id": "match_season", "query": "SELECT Country_name ,  Capital FROM country", "query_toks": ["SELECT", "Country_name", ",", "Capital", "FROM", "country"], "query_toks_no_value": ["select", "country_name", ",", "capital", "from", "country"], "question": "What are the names and capitals of each country?", "question_toks": ["What", "are", "the", "names", "and", "capitals", "of", "each", "country", "?"], "dataset_name": "spider", "guid": 1236}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the names of schools that have some students playing in goalie and mid positions.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'", "query_toks": ["SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'", "INTERSECT", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'mid", "'"], "query_toks_no_value": ["select", "cname", "from", "tryout", "where", "ppos", "=", "value", "intersect", "select", "cname", "from", "tryout", "where", "ppos", "=", "value"], "question": "Find the names of schools that have some students playing in goalie and mid positions.", "question_toks": ["Find", "the", "names", "of", "schools", "that", "have", "some", "students", "playing", "in", "goalie", "and", "mid", "positions", "."], "dataset_name": "spider", "guid": 1237}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many players are there for each hand type?", "sql": "SELECT COUNT(*) , hand FROM players GROUP BY hand", "example": {"db_id": "wta_1", "query": "SELECT count(*) ,  hand FROM players GROUP BY hand", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "hand", "FROM", "players", "GROUP", "BY", "hand"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand"], "question": "How many players are there for each hand type?", "question_toks": ["How", "many", "players", "are", "there", "for", "each", "hand", "type", "?"], "dataset_name": "spider", "guid": 1238}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | How many climbers are there?", "sql": "SELECT count(*) FROM climber", "example": {"db_id": "climbing", "query": "SELECT count(*) FROM climber", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "climber"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "climber"], "question": "How many climbers are there?", "question_toks": ["How", "many", "climbers", "are", "there", "?"], "dataset_name": "spider", "guid": 1239}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the total enrollments of universities of each affiliation type?", "sql": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "example": {"db_id": "university_basketball", "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "query_toks": ["SELECT", "sum", "(", "enrollment", ")", ",", "affiliation", "FROM", "university", "GROUP", "BY", "affiliation"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "affiliation", "from", "university", "group", "by", "affiliation"], "question": "What are the total enrollments of universities of each affiliation type?", "question_toks": ["What", "are", "the", "total", "enrollments", "of", "universities", "of", "each", "affiliation", "type", "?"], "dataset_name": "spider", "guid": 1240}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the birth places that are shared by at least two people?", "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2", "example": {"db_id": "body_builder", "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Birth_Place", "FROM", "people", "GROUP", "BY", "Birth_Place", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "birth_place", "from", "people", "group", "by", "birth_place", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the birth places that are shared by at least two people?", "question_toks": ["What", "are", "the", "birth", "places", "that", "are", "shared", "by", "at", "least", "two", "people", "?"], "dataset_name": "spider", "guid": 1241}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the most common country across members.", "sql": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "decoration_competition", "query": "SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Country", "FROM", "member", "GROUP", "BY", "Country", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "member", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common country across members.", "question_toks": ["Show", "the", "most", "common", "country", "across", "members", "."], "dataset_name": "spider", "guid": 1242}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many distinct countries do players come from?", "sql": "SELECT COUNT(DISTINCT country_code) FROM players", "example": {"db_id": "wta_1", "query": "SELECT count(DISTINCT country_code) FROM players", "query_toks": ["SELECT", "count", "(", "DISTINCT", "country_code", ")", "FROM", "players"], "query_toks_no_value": ["select", "count", "(", "distinct", "country_code", ")", "from", "players"], "question": "How many distinct countries do players come from?", "question_toks": ["How", "many", "distinct", "countries", "do", "players", "come", "from", "?"], "dataset_name": "spider", "guid": 1243}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names for tracks without a race in class 'GT'.", "sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", "example": {"db_id": "race_track", "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", "query_toks": ["SELECT", "name", "FROM", "track", "EXCEPT", "SELECT", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "WHERE", "T1.class", "=", "'GT", "'"], "query_toks_no_value": ["select", "name", "from", "track", "except", "select", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "where", "t1", ".", "class", "=", "value"], "question": "What are the names for tracks without a race in class 'GT'.", "question_toks": ["What", "are", "the", "names", "for", "tracks", "without", "a", "race", "in", "class", "'GT", "'", "."], "dataset_name": "spider", "guid": 1244}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | What is the average capacity of the stadiums that were opened in year 2005?", "sql": "SELECT AVG(capacity) FROM stadium WHERE opening_year = 2005", "example": {"db_id": "swimming", "query": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005", "query_toks": ["SELECT", "avg", "(", "capacity", ")", "FROM", "stadium", "WHERE", "opening_year", "=", "2005"], "query_toks_no_value": ["select", "avg", "(", "capacity", ")", "from", "stadium", "where", "opening_year", "=", "value"], "question": "What is the average capacity of the stadiums that were opened in year 2005?", "question_toks": ["What", "is", "the", "average", "capacity", "of", "the", "stadiums", "that", "were", "opened", "in", "year", "2005", "?"], "dataset_name": "spider", "guid": 1245}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students participated in tryouts for each college by descennding count?", "sql": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC", "example": {"db_id": "soccer_2", "query": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "cName", "FROM", "tryout", "GROUP", "BY", "cName", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "cname", "from", "tryout", "group", "by", "cname", "order", "by", "count", "(", "*", ")", "desc"], "question": "How many students participated in tryouts for each college by descennding count?", "question_toks": ["How", "many", "students", "participated", "in", "tryouts", "for", "each", "college", "by", "descennding", "count", "?"], "dataset_name": "spider", "guid": 1246}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | List the snatch score and clean jerk score of body builders in ascending order of snatch score.", "sql": "SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch ASC", "example": {"db_id": "body_builder", "query": "SELECT Snatch ,  Clean_Jerk FROM body_builder ORDER BY Snatch ASC", "query_toks": ["SELECT", "Snatch", ",", "Clean_Jerk", "FROM", "body_builder", "ORDER", "BY", "Snatch", "ASC"], "query_toks_no_value": ["select", "snatch", ",", "clean_jerk", "from", "body_builder", "order", "by", "snatch", "asc"], "question": "List the snatch score and clean jerk score of body builders in ascending order of snatch score.", "question_toks": ["List", "the", "snatch", "score", "and", "clean", "jerk", "score", "of", "body", "builders", "in", "ascending", "order", "of", "snatch", "score", "."], "dataset_name": "spider", "guid": 1247}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | What is the name of the player with the largest number of votes?", "sql": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1", "example": {"db_id": "riding_club", "query": "SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1", "query_toks": ["SELECT", "Player_name", "FROM", "player", "ORDER", "BY", "Votes", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "player_name", "from", "player", "order", "by", "votes", "desc", "limit", "value"], "question": "What is the name of the player with the largest number of votes?", "question_toks": ["What", "is", "the", "name", "of", "the", "player", "with", "the", "largest", "number", "of", "votes", "?"], "dataset_name": "spider", "guid": 1248}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | Please show the names and the players of clubs.", "sql": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID", "example": {"db_id": "sports_competition", "query": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID", "query_toks": ["SELECT", "T1.name", ",", "T2.Player_id", "FROM", "club", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.Club_ID", "=", "T2.Club_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "player_id", "from", "club", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id"], "question": "Please show the names and the players of clubs.", "question_toks": ["Please", "show", "the", "names", "and", "the", "players", "of", "clubs", "."], "dataset_name": "spider", "guid": 1249}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Which colleges do the tryout players whose name starts with letter D go to?", "sql": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'", "example": {"db_id": "soccer_2", "query": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'", "query_toks": ["SELECT", "T1.cName", "FROM", "tryout", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.pName", "LIKE", "'D", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "cname", "from", "tryout", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "pname", "like", "value"], "question": "Which colleges do the tryout players whose name starts with letter D go to?", "question_toks": ["Which", "colleges", "do", "the", "tryout", "players", "whose", "name", "starts", "with", "letter", "D", "go", "to", "?"], "dataset_name": "spider", "guid": 1250}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the positions of both players that have more than 20 20 points and less than 10 points?", "sql": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10", "example": {"db_id": "sports_competition", "query": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10", "query_toks": ["SELECT", "POSITION", "FROM", "player", "WHERE", "Points", ">", "20", "INTERSECT", "SELECT", "POSITION", "FROM", "player", "WHERE", "Points", "<", "10"], "query_toks_no_value": ["select", "position", "from", "player", "where", "points", ">", "value", "intersect", "select", "position", "from", "player", "where", "points", "<", "value"], "question": "What are the positions of both players that have more than 20 20 points and less than 10 points?", "question_toks": ["What", "are", "the", "positions", "of", "both", "players", "that", "have", "more", "than", "20", "20", "points", "and", "less", "than", "10", "points", "?"], "dataset_name": "spider", "guid": 1251}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the average horizontal bar points across all gymnasts.", "sql": "SELECT AVG(Horizontal_Bar_Points) FROM gymnast", "example": {"db_id": "gymnast", "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast", "query_toks": ["SELECT", "avg", "(", "Horizontal_Bar_Points", ")", "FROM", "gymnast"], "query_toks_no_value": ["select", "avg", "(", "horizontal_bar_points", ")", "from", "gymnast"], "question": "Return the average horizontal bar points across all gymnasts.", "question_toks": ["Return", "the", "average", "horizontal", "bar", "points", "across", "all", "gymnasts", "."], "dataset_name": "spider", "guid": 1252}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the first name and country code of the player with the most tours?", "sql": "SELECT T1.first_name, T1.country_code FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "query_toks": ["SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "ORDER", "BY", "T2.tours", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "order", "by", "t2", ".", "tours", "desc", "limit", "value"], "question": "What is the first name and country code of the player with the most tours?", "question_toks": ["What", "is", "the", "first", "name", "and", "country", "code", "of", "the", "player", "with", "the", "most", "tours", "?"], "dataset_name": "spider", "guid": 1253}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Give the names of mountains in alphabetical order.", "sql": "SELECT Name FROM mountain ORDER BY Name ASC", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "mountain", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "mountain", "order", "by", "name", "asc"], "question": "Give the names of mountains in alphabetical order.", "question_toks": ["Give", "the", "names", "of", "mountains", "in", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 1254}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are different nationalities of people and the corresponding number of people from each nation?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "example": {"db_id": "poker_player", "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "query_toks": ["SELECT", "Nationality", ",", "COUNT", "(", "*", ")", "FROM", "people", "GROUP", "BY", "Nationality"], "query_toks_no_value": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality"], "question": "What are different nationalities of people and the corresponding number of people from each nation?", "question_toks": ["What", "are", "different", "nationalities", "of", "people", "and", "the", "corresponding", "number", "of", "people", "from", "each", "nation", "?"], "dataset_name": "spider", "guid": 1255}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the forename and surname of drivers whose nationality is German?", "sql": "SELECT forename, surname FROM drivers WHERE nationality = 'German'", "example": {"db_id": "formula_1", "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"", "query_toks": ["SELECT", "forename", ",", "surname", "FROM", "drivers", "WHERE", "nationality", "=", "``", "German", "''"], "query_toks_no_value": ["select", "forename", ",", "surname", "from", "drivers", "where", "nationality", "=", "value"], "question": "Find the forename and surname of drivers whose nationality is German?", "question_toks": ["Find", "the", "forename", "and", "surname", "of", "drivers", "whose", "nationality", "is", "German", "?"], "dataset_name": "spider", "guid": 1256}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find each student's first name.", "sql": "SELECT DISTINCT fname FROM student", "example": {"db_id": "club_1", "query": "SELECT DISTINCT fname FROM student", "query_toks": ["SELECT", "DISTINCT", "fname", "FROM", "student"], "query_toks_no_value": ["select", "distinct", "fname", "from", "student"], "question": "Find each student's first name.", "question_toks": ["Find", "each", "student", "'s", "first", "name", "."], "dataset_name": "spider", "guid": 1257}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the codes of countries that have more than 50 players.", "sql": "SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50", "example": {"db_id": "wta_1", "query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50", "query_toks": ["SELECT", "country_code", "FROM", "players", "GROUP", "BY", "country_code", "HAVING", "count", "(", "*", ")", ">", "50"], "query_toks_no_value": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the codes of countries that have more than 50 players.", "question_toks": ["Find", "the", "codes", "of", "countries", "that", "have", "more", "than", "50", "players", "."], "dataset_name": "spider", "guid": 1258}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Count the number of poker players.", "sql": "SELECT count(*) FROM poker_player", "example": {"db_id": "poker_player", "query": "SELECT count(*) FROM poker_player", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "poker_player"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "poker_player"], "question": "Count the number of poker players.", "question_toks": ["Count", "the", "number", "of", "poker", "players", "."], "dataset_name": "spider", "guid": 1259}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What is the minimum, maximum, and average seating for all tracks.", "sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "example": {"db_id": "race_track", "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "query_toks": ["SELECT", "min", "(", "seating", ")", ",", "max", "(", "seating", ")", ",", "avg", "(", "seating", ")", "FROM", "track"], "query_toks_no_value": ["select", "min", "(", "seating", ")", ",", "max", "(", "seating", ")", ",", "avg", "(", "seating", ")", "from", "track"], "question": "What is the minimum, maximum, and average seating for all tracks.", "question_toks": ["What", "is", "the", "minimum", ",", "maximum", ",", "and", "average", "seating", "for", "all", "tracks", "."], "dataset_name": "spider", "guid": 1260}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find all the forenames of distinct drivers who was in position 1 as standing and won?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value"], "question": "Find all the forenames of distinct drivers who was in position 1 as standing and won?", "question_toks": ["Find", "all", "the", "forenames", "of", "distinct", "drivers", "who", "was", "in", "position", "1", "as", "standing", "and", "won", "?"], "dataset_name": "spider", "guid": 1261}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Which colleges does each player with a name that starts with the letter D  who tried out go to?", "sql": "SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%'", "example": {"db_id": "soccer_2", "query": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'", "query_toks": ["SELECT", "T1.cName", "FROM", "tryout", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.pName", "LIKE", "'D", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "cname", "from", "tryout", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "pname", "like", "value"], "question": "Which colleges does each player with a name that starts with the letter D  who tried out go to?", "question_toks": ["Which", "colleges", "does", "each", "player", "with", "a", "name", "that", "starts", "with", "the", "letter", "D", "who", "tried", "out", "go", "to", "?"], "dataset_name": "spider", "guid": 1262}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "college", "WHERE", "enr", "<", "(", "SELECT", "avg", "(", "enr", ")", "FROM", "college", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "college", "where", "enr", "<", "(", "select", "avg", "(", "enr", ")", "from", "college", ")"], "question": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?", "question_toks": ["What", "is", "the", "number", "of", "states", "that", "has", "some", "colleges", "whose", "enrollment", "is", "smaller", "than", "the", "average", "enrollment", "?"], "dataset_name": "spider", "guid": 1263}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show all track names that have had no races.", "sql": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "example": {"db_id": "race_track", "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "query_toks": ["SELECT", "name", "FROM", "track", "WHERE", "track_id", "NOT", "IN", "(", "SELECT", "track_id", "FROM", "race", ")"], "query_toks_no_value": ["select", "name", "from", "track", "where", "track_id", "not", "in", "(", "select", "track_id", "from", "race", ")"], "question": "Show all track names that have had no races.", "question_toks": ["Show", "all", "track", "names", "that", "have", "had", "no", "races", "."], "dataset_name": "spider", "guid": 1264}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names of poker players in descending order of earnings?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Earnings", "DESC"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "earnings", "desc"], "question": "What are the names of poker players in descending order of earnings?", "question_toks": ["What", "are", "the", "names", "of", "poker", "players", "in", "descending", "order", "of", "earnings", "?"], "dataset_name": "spider", "guid": 1265}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the average age of members of the club \"Hopkins Student Enterprises\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "example": {"db_id": "club_1", "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "query_toks": ["SELECT", "avg", "(", "t3.age", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "age", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Find the average age of members of the club \"Hopkins Student Enterprises\".", "question_toks": ["Find", "the", "average", "age", "of", "members", "of", "the", "club", "``", "Hopkins", "Student", "Enterprises", "''", "."], "dataset_name": "spider", "guid": 1266}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Which countries do not have a stadium that was opened after 2006?", "sql": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year > 2006", "example": {"db_id": "swimming", "query": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006", "query_toks": ["SELECT", "country", "FROM", "stadium", "EXCEPT", "SELECT", "country", "FROM", "stadium", "WHERE", "opening_year", ">", "2006"], "query_toks_no_value": ["select", "country", "from", "stadium", "except", "select", "country", "from", "stadium", "where", "opening_year", ">", "value"], "question": "Which countries do not have a stadium that was opened after 2006?", "question_toks": ["Which", "countries", "do", "not", "have", "a", "stadium", "that", "was", "opened", "after", "2006", "?"], "dataset_name": "spider", "guid": 1267}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Give the different reigns of wrestlers who are not located in Tokyo, Japan.", "sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"", "example": {"db_id": "wrestler", "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"", "query_toks": ["SELECT", "DISTINCT", "Reign", "FROM", "wrestler", "WHERE", "LOCATION", "!", "=", "``", "Tokyo", ",", "Japan", "''"], "query_toks_no_value": ["select", "distinct", "reign", "from", "wrestler", "where", "location", "!", "=", "value"], "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.", "question_toks": ["Give", "the", "different", "reigns", "of", "wrestlers", "who", "are", "not", "located", "in", "Tokyo", ",", "Japan", "."], "dataset_name": "spider", "guid": 1268}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students got accepted after the tryout?", "sql": "SELECT COUNT(*) FROM tryout WHERE decision = 'yes'", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM tryout WHERE decision  =  'yes'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "tryout", "WHERE", "decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tryout", "where", "decision", "=", "value"], "question": "How many students got accepted after the tryout?", "question_toks": ["How", "many", "students", "got", "accepted", "after", "the", "tryout", "?"], "dataset_name": "spider", "guid": 1269}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the average and maximum number of hours students who made the team practiced?", "sql": "SELECT avg(T1.HS) , max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'", "example": {"db_id": "soccer_2", "query": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "avg", "(", "T1.HS", ")", ",", "max", "(", "T1.HS", ")", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "hs", ")", ",", "max", "(", "t1", ".", "hs", ")", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "What is the average and maximum number of hours students who made the team practiced?", "question_toks": ["What", "is", "the", "average", "and", "maximum", "number", "of", "hours", "students", "who", "made", "the", "team", "practiced", "?"], "dataset_name": "spider", "guid": 1270}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the names of members that have a rank in round higher than 3.", "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3", "example": {"db_id": "decoration_competition", "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID WHERE T2.Rank_in_Round  >  3", "query_toks": ["SELECT", "T1.Name", "FROM", "member", "AS", "T1", "JOIN", "round", "AS", "T2", "ON", "T1.Member_ID", "=", "T2.Member_ID", "WHERE", "T2.Rank_in_Round", ">", "3"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "member", "as", "t1", "join", "round", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "where", "t2", ".", "rank_in_round", ">", "value"], "question": "Show the names of members that have a rank in round higher than 3.", "question_toks": ["Show", "the", "names", "of", "members", "that", "have", "a", "rank", "in", "round", "higher", "than", "3", "."], "dataset_name": "spider", "guid": 1271}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Which year had the most matches?", "sql": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "YEAR", "FROM", "matches", "GROUP", "BY", "YEAR", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which year had the most matches?", "question_toks": ["Which", "year", "had", "the", "most", "matches", "?"], "dataset_name": "spider", "guid": 1272}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the name of tourney that has more than 10 matches.", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "example": {"db_id": "wta_1", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "query_toks": ["SELECT", "tourney_name", "FROM", "matches", "GROUP", "BY", "tourney_name", "HAVING", "count", "(", "*", ")", ">", "10"], "query_toks_no_value": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of tourney that has more than 10 matches.", "question_toks": ["Find", "the", "name", "of", "tourney", "that", "has", "more", "than", "10", "matches", "."], "dataset_name": "spider", "guid": 1273}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | find the code of the country where has the greatest number of players.", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country_code", "FROM", "players", "GROUP", "BY", "country_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "find the code of the country where has the greatest number of players.", "question_toks": ["find", "the", "code", "of", "the", "country", "where", "has", "the", "greatest", "number", "of", "players", "."], "dataset_name": "spider", "guid": 1274}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | List the names of climbers whose country is not Switzerland.", "sql": "SELECT Name FROM climber WHERE Country != \"Switzerland\"", "example": {"db_id": "climbing", "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\"", "query_toks": ["SELECT", "Name", "FROM", "climber", "WHERE", "Country", "!", "=", "``", "Switzerland", "''"], "query_toks_no_value": ["select", "name", "from", "climber", "where", "country", "!", "=", "value"], "question": "List the names of climbers whose country is not Switzerland.", "question_toks": ["List", "the", "names", "of", "climbers", "whose", "country", "is", "not", "Switzerland", "."], "dataset_name": "spider", "guid": 1275}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names and dates of races, and the names of the tracks where they are held?", "sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "example": {"db_id": "race_track", "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "query_toks": ["SELECT", "T1.name", ",", "T1.date", ",", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "date", ",", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id"], "question": "What are the names and dates of races, and the names of the tracks where they are held?", "question_toks": ["What", "are", "the", "names", "and", "dates", "of", "races", ",", "and", "the", "names", "of", "the", "tracks", "where", "they", "are", "held", "?"], "dataset_name": "spider", "guid": 1276}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the average enrollment of universities founded before 1850.", "sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "example": {"db_id": "university_basketball", "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "query_toks": ["SELECT", "avg", "(", "enrollment", ")", "FROM", "university", "WHERE", "founded", "<", "1850"], "query_toks_no_value": ["select", "avg", "(", "enrollment", ")", "from", "university", "where", "founded", "<", "value"], "question": "Return the average enrollment of universities founded before 1850.", "question_toks": ["Return", "the", "average", "enrollment", "of", "universities", "founded", "before", "1850", "."], "dataset_name": "spider", "guid": 1277}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | From which hometowns did no gymnasts come from?", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID", "example": {"db_id": "gymnast", "query": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "query_toks": ["SELECT", "DISTINCT", "Hometown", "FROM", "people", "EXCEPT", "SELECT", "DISTINCT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "distinct", "hometown", "from", "people", "except", "select", "distinct", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id"], "question": "From which hometowns did no gymnasts come from?", "question_toks": ["From", "which", "hometowns", "did", "no", "gymnasts", "come", "from", "?"], "dataset_name": "spider", "guid": 1278}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?", "sql": "SELECT DISTINCT driverid , STOP FROM pitstops WHERE duration < (SELECT max(duration) FROM pitstops WHERE raceid = 841)", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)", "query_toks": ["SELECT", "DISTINCT", "driverid", ",", "STOP", "FROM", "pitstops", "WHERE", "duration", "<", "(", "SELECT", "max", "(", "duration", ")", "FROM", "pitstops", "WHERE", "raceid", "=", "841", ")"], "query_toks_no_value": ["select", "distinct", "driverid", ",", "stop", "from", "pitstops", "where", "duration", "<", "(", "select", "max", "(", "duration", ")", "from", "pitstops", "where", "raceid", "=", "value", ")"], "question": "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?", "question_toks": ["What", "is", "the", "id", "and", "stop", "number", "for", "each", "driver", "that", "has", "a", "shorter", "pit", "stop", "than", "the", "driver", "in", "the", "race", "with", "id", "841", "?"], "dataset_name": "spider", "guid": 1279}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | How many races are there?", "sql": "SELECT count(*) FROM race", "example": {"db_id": "race_track", "query": "SELECT count(*) FROM race", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "race"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "race"], "question": "How many races are there?", "question_toks": ["How", "many", "races", "are", "there", "?"], "dataset_name": "spider", "guid": 1280}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Count the number of races.", "sql": "SELECT count(*) FROM race", "example": {"db_id": "race_track", "query": "SELECT count(*) FROM race", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "race"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "race"], "question": "Count the number of races.", "question_toks": ["Count", "the", "number", "of", "races", "."], "dataset_name": "spider", "guid": 1281}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | How many cities have a stadium that was opened before the year of 2006?", "sql": "SELECT COUNT(DISTINCT city) FROM stadium WHERE opening_year < 2006", "example": {"db_id": "swimming", "query": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "stadium", "WHERE", "opening_year", "<", "2006"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "stadium", "where", "opening_year", "<", "value"], "question": "How many cities have a stadium that was opened before the year of 2006?", "question_toks": ["How", "many", "cities", "have", "a", "stadium", "that", "was", "opened", "before", "the", "year", "of", "2006", "?"], "dataset_name": "spider", "guid": 1282}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the name of every city that has at least 15 stations and how many stations does it have?", "sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "example": {"db_id": "bike_1", "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "query_toks": ["SELECT", "city", ",", "COUNT", "(", "*", ")", "FROM", "station", "GROUP", "BY", "city", "HAVING", "COUNT", "(", "*", ")", ">", "=", "15"], "query_toks_no_value": ["select", "city", ",", "count", "(", "*", ")", "from", "station", "group", "by", "city", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the name of every city that has at least 15 stations and how many stations does it have?", "question_toks": ["What", "is", "the", "name", "of", "every", "city", "that", "has", "at", "least", "15", "stations", "and", "how", "many", "stations", "does", "it", "have", "?"], "dataset_name": "spider", "guid": 1283}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Show different teams in eliminations and the number of eliminations from each team.", "sql": "SELECT Team, COUNT(*) FROM elimination GROUP BY Team", "example": {"db_id": "wrestler", "query": "SELECT Team ,  COUNT(*) FROM elimination GROUP BY Team", "query_toks": ["SELECT", "Team", ",", "COUNT", "(", "*", ")", "FROM", "elimination", "GROUP", "BY", "Team"], "query_toks_no_value": ["select", "team", ",", "count", "(", "*", ")", "from", "elimination", "group", "by", "team"], "question": "Show different teams in eliminations and the number of eliminations from each team.", "question_toks": ["Show", "different", "teams", "in", "eliminations", "and", "the", "number", "of", "eliminations", "from", "each", "team", "."], "dataset_name": "spider", "guid": 1284}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of schools with the top 3 largest size?", "sql": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3", "query_toks": ["SELECT", "cName", "FROM", "college", "ORDER", "BY", "enr", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "cname", "from", "college", "order", "by", "enr", "desc", "limit", "value"], "question": "What are the names of schools with the top 3 largest size?", "question_toks": ["What", "are", "the", "names", "of", "schools", "with", "the", "top", "3", "largest", "size", "?"], "dataset_name": "spider", "guid": 1285}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the name and date for each race and its track name.", "sql": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "example": {"db_id": "race_track", "query": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id", "query_toks": ["SELECT", "T1.name", ",", "T1.date", ",", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "date", ",", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id"], "question": "Show the name and date for each race and its track name.", "question_toks": ["Show", "the", "name", "and", "date", "for", "each", "race", "and", "its", "track", "name", "."], "dataset_name": "spider", "guid": 1286}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the season, the player, and the name of the team that players belong to.", "sql": "SELECT T1.Season , T1.Player , T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id", "example": {"db_id": "match_season", "query": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "query_toks": ["SELECT", "T1.Season", ",", "T1.Player", ",", "T2.Name", "FROM", "match_season", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id"], "query_toks_no_value": ["select", "t1", ".", "season", ",", "t1", ".", "player", ",", "t2", ".", "name", "from", "match_season", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id"], "question": "Show the season, the player, and the name of the team that players belong to.", "question_toks": ["Show", "the", "season", ",", "the", "player", ",", "and", "the", "name", "of", "the", "team", "that", "players", "belong", "to", "."], "dataset_name": "spider", "guid": 1287}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Count the number of different nationalities.", "sql": "SELECT count(DISTINCT Nationality) FROM people", "example": {"db_id": "poker_player", "query": "SELECT count(DISTINCT Nationality) FROM people", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Nationality", ")", "FROM", "people"], "query_toks_no_value": ["select", "count", "(", "distinct", "nationality", ")", "from", "people"], "question": "Count the number of different nationalities.", "question_toks": ["Count", "the", "number", "of", "different", "nationalities", "."], "dataset_name": "spider", "guid": 1288}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What is the name of the highest mountain?", "sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "mountain", "ORDER", "BY", "Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "mountain", "order", "by", "height", "desc", "limit", "value"], "question": "What is the name of the highest mountain?", "question_toks": ["What", "is", "the", "name", "of", "the", "highest", "mountain", "?"], "dataset_name": "spider", "guid": 1289}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | List the clubs that have at least a member with advisor \"1121\".", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.advisor", "=", "1121"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "advisor", "=", "value"], "question": "List the clubs that have at least a member with advisor \"1121\".", "question_toks": ["List", "the", "clubs", "that", "have", "at", "least", "a", "member", "with", "advisor", "``", "1121", "''", "."], "dataset_name": "spider", "guid": 1290}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "example": {"db_id": "university_basketball", "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "query_toks": ["SELECT", "team_name", "FROM", "basketball_match", "ORDER", "BY", "All_Home", "DESC"], "query_toks_no_value": ["select", "team_name", "from", "basketball_match", "order", "by", "all_home", "desc"], "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "teams", "in", "the", "basketball", "competition", ",", "sorted", "by", "all", "home", "scores", "in", "descending", "order", "?"], "dataset_name": "spider", "guid": 1291}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all tryout participants who are from the largest college?", "sql": "SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)", "example": {"db_id": "soccer_2", "query": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)", "query_toks": ["SELECT", "T2.pName", "FROM", "tryout", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T1.cName", "=", "(", "SELECT", "cName", "FROM", "college", "ORDER", "BY", "enr", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t2", ".", "pname", "from", "tryout", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t1", ".", "cname", "=", "(", "select", "cname", "from", "college", "order", "by", "enr", "desc", "limit", "value", ")"], "question": "What are the names of all tryout participants who are from the largest college?", "question_toks": ["What", "are", "the", "names", "of", "all", "tryout", "participants", "who", "are", "from", "the", "largest", "college", "?"], "dataset_name": "spider", "guid": 1292}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | How many drivers did not participate in the races held in 2009?", "sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "example": {"db_id": "formula_1", "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "query_toks": ["SELECT", "count", "(", "DISTINCT", "driverId", ")", "FROM", "results", "WHERE", "raceId", "NOT", "IN", "(", "SELECT", "raceId", "FROM", "races", "WHERE", "YEAR", "!", "=", "2009", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "driverid", ")", "from", "results", "where", "raceid", "not", "in", "(", "select", "raceid", "from", "races", "where", "year", "!", "=", "value", ")"], "question": "How many drivers did not participate in the races held in 2009?", "question_toks": ["How", "many", "drivers", "did", "not", "participate", "in", "the", "races", "held", "in", "2009", "?"], "dataset_name": "spider", "guid": 1293}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Give average earnings of poker players who are taller than 200.", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "example": {"db_id": "poker_player", "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "query_toks": ["SELECT", "avg", "(", "T2.Earnings", ")", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Height", ">", "200"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "height", ">", "value"], "question": "Give average earnings of poker players who are taller than 200.", "question_toks": ["Give", "average", "earnings", "of", "poker", "players", "who", "are", "taller", "than", "200", "."], "dataset_name": "spider", "guid": 1294}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many clubs are located at \"HHH\"?", "sql": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "WHERE", "clublocation", "=", "``", "HHH", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "where", "clublocation", "=", "value"], "question": "How many clubs are located at \"HHH\"?", "question_toks": ["How", "many", "clubs", "are", "located", "at", "``", "HHH", "''", "?"], "dataset_name": "spider", "guid": 1295}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the different years for all competitions that are not of type equal to tournament?", "sql": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"", "example": {"db_id": "sports_competition", "query": "SELECT DISTINCT YEAR FROM competition WHERE Competition_type != \"Tournament\"", "query_toks": ["SELECT", "DISTINCT", "YEAR", "FROM", "competition", "WHERE", "Competition_type", "!", "=", "``", "Tournament", "''"], "query_toks_no_value": ["select", "distinct", "year", "from", "competition", "where", "competition_type", "!", "=", "value"], "question": "What are the different years for all competitions that are not of type equal to tournament?", "question_toks": ["What", "are", "the", "different", "years", "for", "all", "competitions", "that", "are", "not", "of", "type", "equal", "to", "tournament", "?"], "dataset_name": "spider", "guid": 1296}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | List the first and last name of all players who are left / L hand in the order of birth date.", "sql": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "players", "WHERE", "hand", "=", "'L", "'", "ORDER", "BY", "birth_date"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "value", "order", "by", "birth_date"], "question": "List the first and last name of all players who are left / L hand in the order of birth date.", "question_toks": ["List", "the", "first", "and", "last", "name", "of", "all", "players", "who", "are", "left", "/", "L", "hand", "in", "the", "order", "of", "birth", "date", "."], "dataset_name": "spider", "guid": 1297}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?", "sql": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "query_toks": ["SELECT", "max", "(", "T2.fastestlapspeed", ")", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", "=", "2008", "AND", "T1.name", "=", "``", "Monaco", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "fastestlapspeed", ")", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?", "question_toks": ["What", "is", "the", "maximum", "fastest", "lap", "speed", "in", "the", "Monaco", "Grand", "Prix", "in", "2008", "?"], "dataset_name": "spider", "guid": 1298}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.", "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", "query_toks": ["SELECT", "DISTINCT", "cName", "FROM", "college", "WHERE", "enr", ">", "(", "SELECT", "min", "(", "enr", ")", "FROM", "college", "WHERE", "state", "=", "'FL", "'", ")"], "query_toks_no_value": ["select", "distinct", "cname", "from", "college", "where", "enr", ">", "(", "select", "min", "(", "enr", ")", "from", "college", "where", "state", "=", "value", ")"], "question": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.", "question_toks": ["Find", "names", "of", "colleges", "with", "enrollment", "greater", "than", "that", "of", "some", "(", "at", "least", "one", ")", "college", "in", "the", "FL", "state", "."], "dataset_name": "spider", "guid": 1299}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the different positions for match season?", "sql": "SELECT DISTINCT position FROM match_season", "example": {"db_id": "match_season", "query": "SELECT DISTINCT POSITION FROM match_season", "query_toks": ["SELECT", "DISTINCT", "POSITION", "FROM", "match_season"], "query_toks_no_value": ["select", "distinct", "position", "from", "match_season"], "question": "What are the different positions for match season?", "question_toks": ["What", "are", "the", "different", "positions", "for", "match", "season", "?"], "dataset_name": "spider", "guid": 1300}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | which country did participated in the most number of Tournament competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sports_competition", "query": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Tournament", "'", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "competition", "where", "competition_type", "=", "value", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "which country did participated in the most number of Tournament competitions?", "question_toks": ["which", "country", "did", "participated", "in", "the", "most", "number", "of", "Tournament", "competitions", "?"], "dataset_name": "spider", "guid": 1301}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the number of matches happened in each year.", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "example": {"db_id": "wta_1", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "YEAR", "FROM", "matches", "GROUP", "BY", "YEAR"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year"], "question": "Find the number of matches happened in each year.", "question_toks": ["Find", "the", "number", "of", "matches", "happened", "in", "each", "year", "."], "dataset_name": "spider", "guid": 1302}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the types of competition that have most 5 competitions for that type?", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5", "query_toks": ["SELECT", "Competition_type", "FROM", "competition", "GROUP", "BY", "Competition_type", "HAVING", "COUNT", "(", "*", ")", "<", "=", "5"], "query_toks_no_value": ["select", "competition_type", "from", "competition", "group", "by", "competition_type", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "What are the types of competition that have most 5 competitions for that type?", "question_toks": ["What", "are", "the", "types", "of", "competition", "that", "have", "most", "5", "competitions", "for", "that", "type", "?"], "dataset_name": "spider", "guid": 1303}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are all the different zip codes that have a maximum dew point that was always below 70?", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "query_toks": ["SELECT", "DISTINCT", "zip_code", "FROM", "weather", "EXCEPT", "SELECT", "DISTINCT", "zip_code", "FROM", "weather", "WHERE", "max_dew_point_f", ">", "=", "70"], "query_toks_no_value": ["select", "distinct", "zip_code", "from", "weather", "except", "select", "distinct", "zip_code", "from", "weather", "where", "max_dew_point_f", ">", "=", "value"], "question": "What are all the different zip codes that have a maximum dew point that was always below 70?", "question_toks": ["What", "are", "all", "the", "different", "zip", "codes", "that", "have", "a", "maximum", "dew", "point", "that", "was", "always", "below", "70", "?"], "dataset_name": "spider", "guid": 1304}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the number of members of club \"Pen and Paper Gaming\".", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Pen", "and", "Paper", "Gaming", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Find the number of members of club \"Pen and Paper Gaming\".", "question_toks": ["Find", "the", "number", "of", "members", "of", "club", "``", "Pen", "and", "Paper", "Gaming", "''", "."], "dataset_name": "spider", "guid": 1305}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the maximum and minimum number of silver medals for clubs.", "sql": "SELECT MAX(silver) , MIN(silver) FROM club_rank", "example": {"db_id": "sports_competition", "query": "SELECT max(Silver) ,  min(Silver) FROM club_rank", "query_toks": ["SELECT", "max", "(", "Silver", ")", ",", "min", "(", "Silver", ")", "FROM", "club_rank"], "query_toks_no_value": ["select", "max", "(", "silver", ")", ",", "min", "(", "silver", ")", "from", "club_rank"], "question": "What are the maximum and minimum number of silver medals for clubs.", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "number", "of", "silver", "medals", "for", "clubs", "."], "dataset_name": "spider", "guid": 1306}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | How many different teams have had eliminated wrestlers?", "sql": "SELECT COUNT(DISTINCT team) FROM elimination", "example": {"db_id": "wrestler", "query": "SELECT COUNT (DISTINCT team) FROM elimination", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "team", ")", "FROM", "elimination"], "query_toks_no_value": ["select", "count", "(", "distinct", "team", ")", "from", "elimination"], "question": "How many different teams have had eliminated wrestlers?", "question_toks": ["How", "many", "different", "teams", "have", "had", "eliminated", "wrestlers", "?"], "dataset_name": "spider", "guid": 1307}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What is the average age of the members of the club \"Bootup Baltimore\"?", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "example": {"db_id": "club_1", "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "query_toks": ["SELECT", "avg", "(", "t3.age", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "age", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "What is the average age of the members of the club \"Bootup Baltimore\"?", "question_toks": ["What", "is", "the", "average", "age", "of", "the", "members", "of", "the", "club", "``", "Bootup", "Baltimore", "''", "?"], "dataset_name": "spider", "guid": 1308}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | find the number of players for each country.", "sql": "SELECT COUNT(*) , country_code FROM players GROUP BY country_code", "example": {"db_id": "wta_1", "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "country_code", "FROM", "players", "GROUP", "BY", "country_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code"], "question": "find the number of players for each country.", "question_toks": ["find", "the", "number", "of", "players", "for", "each", "country", "."], "dataset_name": "spider", "guid": 1309}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?", "sql": "SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) = 11 INTERSECT SELECT T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 5", "example": {"db_id": "formula_1", "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "query_toks": ["SELECT", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "pitstops", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", "=", "11", "INTERSECT", "SELECT", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "pitstops", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", "=", "value", "intersect", "select", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?", "question_toks": ["What", "are", "the", "last", "names", "and", "ids", "of", "all", "drivers", "who", "had", "11", "pit", "stops", "and", "participated", "in", "more", "than", "5", "races", "?"], "dataset_name": "spider", "guid": 1310}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | How many players are there?", "sql": "SELECT count(*) FROM player", "example": {"db_id": "riding_club", "query": "SELECT count(*) FROM player", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "player"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "player"], "question": "How many players are there?", "question_toks": ["How", "many", "players", "are", "there", "?"], "dataset_name": "spider", "guid": 1311}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.", "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", "query_toks": ["SELECT", "cName", "FROM", "college", "WHERE", "enr", ">", "(", "SELECT", "max", "(", "enr", ")", "FROM", "college", "WHERE", "state", "=", "'FL", "'", ")"], "query_toks_no_value": ["select", "cname", "from", "college", "where", "enr", ">", "(", "select", "max", "(", "enr", ")", "from", "college", "where", "state", "=", "value", ")"], "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.", "question_toks": ["Find", "names", "of", "all", "colleges", "whose", "enrollment", "is", "greater", "than", "that", "of", "all", "colleges", "in", "the", "FL", "state", "."], "dataset_name": "spider", "guid": 1312}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the birth date of the poker player with the lowest earnings?", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "query_toks": ["SELECT", "T1.Birth_Date", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Earnings", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "earnings", "asc", "limit", "value"], "question": "What is the birth date of the poker player with the lowest earnings?", "question_toks": ["What", "is", "the", "birth", "date", "of", "the", "poker", "player", "with", "the", "lowest", "earnings", "?"], "dataset_name": "spider", "guid": 1313}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".", "sql": "SELECT Team FROM Elimination WHERE Eliminated_By = \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = \"Benjamin\"", "example": {"db_id": "wrestler", "query": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"", "query_toks": ["SELECT", "Team", "FROM", "Elimination", "WHERE", "Eliminated_By", "=", "``", "Orton", "''", "INTERSECT", "SELECT", "Team", "FROM", "Elimination", "WHERE", "Eliminated_By", "=", "``", "Benjamin", "''"], "query_toks_no_value": ["select", "team", "from", "elimination", "where", "eliminated_by", "=", "value", "intersect", "select", "team", "from", "elimination", "where", "eliminated_by", "=", "value"], "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".", "question_toks": ["Show", "the", "teams", "that", "have", "both", "wrestlers", "eliminated", "by", "``", "Orton", "''", "and", "wrestlers", "eliminated", "by", "``", "Benjamin", "''", "."], "dataset_name": "spider", "guid": 1314}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | How many distinct hometowns did these people have?", "sql": "SELECT count(DISTINCT Hometown) FROM people", "example": {"db_id": "gymnast", "query": "SELECT count(DISTINCT Hometown) FROM people", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Hometown", ")", "FROM", "people"], "query_toks_no_value": ["select", "count", "(", "distinct", "hometown", ")", "from", "people"], "question": "How many distinct hometowns did these people have?", "question_toks": ["How", "many", "distinct", "hometowns", "did", "these", "people", "have", "?"], "dataset_name": "spider", "guid": 1315}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What is the age of the tallest person?", "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "example": {"db_id": "gymnast", "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "query_toks": ["SELECT", "Age", "FROM", "people", "ORDER", "BY", "Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "age", "from", "people", "order", "by", "height", "desc", "limit", "value"], "question": "What is the age of the tallest person?", "question_toks": ["What", "is", "the", "age", "of", "the", "tallest", "person", "?"], "dataset_name": "spider", "guid": 1316}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the different states that had students successfully try out?", "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "DISTINCT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "decision", "=", "value"], "question": "What are the different states that had students successfully try out?", "question_toks": ["What", "are", "the", "different", "states", "that", "had", "students", "successfully", "try", "out", "?"], "dataset_name": "spider", "guid": 1317}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the name, latitude, and city of the station that is located the furthest South?", "sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "query_toks": ["SELECT", "name", ",", "lat", ",", "city", "FROM", "station", "ORDER", "BY", "lat", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "lat", ",", "city", "from", "station", "order", "by", "lat", "limit", "value"], "question": "What is the name, latitude, and city of the station that is located the furthest South?", "question_toks": ["What", "is", "the", "name", ",", "latitude", ",", "and", "city", "of", "the", "station", "that", "is", "located", "the", "furthest", "South", "?"], "dataset_name": "spider", "guid": 1318}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the name and date of the most recent race?", "sql": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "date", "FROM", "races", "ORDER", "BY", "date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "date", "from", "races", "order", "by", "date", "desc", "limit", "value"], "question": "What is the name and date of the most recent race?", "question_toks": ["What", "is", "the", "name", "and", "date", "of", "the", "most", "recent", "race", "?"], "dataset_name": "spider", "guid": 1319}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | List the names of the top 5 oldest people.", "sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "example": {"db_id": "gymnast", "query": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Age", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "age", "desc", "limit", "value"], "question": "List the names of the top 5 oldest people.", "question_toks": ["List", "the", "names", "of", "the", "top", "5", "oldest", "people", "."], "dataset_name": "spider", "guid": 1320}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many different winners both participated in the WTA Championships and were left handed?", "sql": "SELECT COUNT(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L'", "example": {"db_id": "wta_1", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "winner_name", ")", "FROM", "matches", "WHERE", "tourney_name", "=", "'WTA", "Championships", "'", "AND", "winner_hand", "=", "'L", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "value", "and", "winner_hand", "=", "value"], "question": "How many different winners both participated in the WTA Championships and were left handed?", "question_toks": ["How", "many", "different", "winners", "both", "participated", "in", "the", "WTA", "Championships", "and", "were", "left", "handed", "?"], "dataset_name": "spider", "guid": 1321}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many trips started from Mountain View city and ended at Palo Alto city?", "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"", "example": {"db_id": "bike_1", "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "JOIN", "station", "AS", "T3", "JOIN", "trip", "AS", "T4", "ON", "T1.id", "=", "T2.start_station_id", "AND", "T2.id", "=", "T4.id", "AND", "T3.id", "=", "T4.end_station_id", "WHERE", "T1.city", "=", "``", "Mountain", "View", "''", "AND", "T3.city", "=", "``", "Palo", "Alto", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "join", "station", "as", "t3", "join", "trip", "as", "t4", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id", "and", "t2", ".", "id", "=", "t4", ".", "id", "and", "t3", ".", "id", "=", "t4", ".", "end_station_id", "where", "t1", ".", "city", "=", "value", "and", "t3", ".", "city", "=", "value"], "question": "How many trips started from Mountain View city and ended at Palo Alto city?", "question_toks": ["How", "many", "trips", "started", "from", "Mountain", "View", "city", "and", "ended", "at", "Palo", "Alto", "city", "?"], "dataset_name": "spider", "guid": 1322}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | List all the distinct stations from which a trip of duration below 100 started.", "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration < 100", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "query_toks": ["SELECT", "DISTINCT", "start_station_name", "FROM", "trip", "WHERE", "duration", "<", "100"], "query_toks_no_value": ["select", "distinct", "start_station_name", "from", "trip", "where", "duration", "<", "value"], "question": "List all the distinct stations from which a trip of duration below 100 started.", "question_toks": ["List", "all", "the", "distinct", "stations", "from", "which", "a", "trip", "of", "duration", "below", "100", "started", "."], "dataset_name": "spider", "guid": 1323}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many matches were played in 2013 or 2016?", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "example": {"db_id": "wta_1", "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "matches", "WHERE", "YEAR", "=", "2013", "OR", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "How many matches were played in 2013 or 2016?", "question_toks": ["How", "many", "matches", "were", "played", "in", "2013", "or", "2016", "?"], "dataset_name": "spider", "guid": 1324}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | For each id of a driver who participated in at most 30 races, how many races did they participate in?", "sql": "SELECT T1.driverid , count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*) <= 30", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30", "query_toks": ["SELECT", "T1.driverid", ",", "count", "(", "*", ")", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", "<", "=", "30"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "count", "(", "*", ")", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "For each id of a driver who participated in at most 30 races, how many races did they participate in?", "question_toks": ["For", "each", "id", "of", "a", "driver", "who", "participated", "in", "at", "most", "30", "races", ",", "how", "many", "races", "did", "they", "participate", "in", "?"], "dataset_name": "spider", "guid": 1325}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of the colleges that are larger than at least one college in Florida?", "sql": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')", "query_toks": ["SELECT", "DISTINCT", "cName", "FROM", "college", "WHERE", "enr", ">", "(", "SELECT", "min", "(", "enr", ")", "FROM", "college", "WHERE", "state", "=", "'FL", "'", ")"], "query_toks_no_value": ["select", "distinct", "cname", "from", "college", "where", "enr", ">", "(", "select", "min", "(", "enr", ")", "from", "college", "where", "state", "=", "value", ")"], "question": "What are the names of the colleges that are larger than at least one college in Florida?", "question_toks": ["What", "are", "the", "names", "of", "the", "colleges", "that", "are", "larger", "than", "at", "least", "one", "college", "in", "Florida", "?"], "dataset_name": "spider", "guid": 1326}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | How many universities have a location that contains NY?", "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"", "example": {"db_id": "university_basketball", "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "university", "WHERE", "LOCATION", "LIKE", "``", "%", "NY", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "university", "where", "location", "like", "value"], "question": "How many universities have a location that contains NY?", "question_toks": ["How", "many", "universities", "have", "a", "location", "that", "contains", "NY", "?"], "dataset_name": "spider", "guid": 1327}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Give me the name of each club.", "sql": "SELECT clubname FROM club", "example": {"db_id": "club_1", "query": "SELECT clubname FROM club", "query_toks": ["SELECT", "clubname", "FROM", "club"], "query_toks_no_value": ["select", "clubname", "from", "club"], "question": "Give me the name of each club.", "question_toks": ["Give", "me", "the", "name", "of", "each", "club", "."], "dataset_name": "spider", "guid": 1328}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Return the countries of the mountains that have a height larger than 5000.", "sql": "SELECT Country FROM mountain WHERE Height  >  5000", "example": {"db_id": "climbing", "query": "SELECT Country FROM mountain WHERE Height  >  5000", "query_toks": ["SELECT", "Country", "FROM", "mountain", "WHERE", "Height", ">", "5000"], "query_toks_no_value": ["select", "country", "from", "mountain", "where", "height", ">", "value"], "question": "Return the countries of the mountains that have a height larger than 5000.", "question_toks": ["Return", "the", "countries", "of", "the", "mountains", "that", "have", "a", "height", "larger", "than", "5000", "."], "dataset_name": "spider", "guid": 1329}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the full names of all players, sorted by birth date?", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "players", "ORDER", "BY", "birth_date"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date"], "question": "What are the full names of all players, sorted by birth date?", "question_toks": ["What", "are", "the", "full", "names", "of", "all", "players", ",", "sorted", "by", "birth", "date", "?"], "dataset_name": "spider", "guid": 1330}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the schools that were either founded after 1850 or public.", "sql": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "example": {"db_id": "university_basketball", "query": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'", "query_toks": ["SELECT", "school", "FROM", "university", "WHERE", "founded", ">", "1850", "OR", "affiliation", "=", "'Public", "'"], "query_toks_no_value": ["select", "school", "from", "university", "where", "founded", ">", "value", "or", "affiliation", "=", "value"], "question": "Find the schools that were either founded after 1850 or public.", "question_toks": ["Find", "the", "schools", "that", "were", "either", "founded", "after", "1850", "or", "public", "."], "dataset_name": "spider", "guid": 1331}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "example": {"db_id": "university_basketball", "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "query_toks": ["SELECT", "sum", "(", "Enrollment", ")", ",", "affiliation", "FROM", "university", "WHERE", "founded", ">", "1850", "GROUP", "BY", "affiliation"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "affiliation", "from", "university", "where", "founded", ">", "value", "group", "by", "affiliation"], "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.", "question_toks": ["Find", "the", "total", "number", "of", "students", "enrolled", "in", "the", "colleges", "that", "were", "founded", "after", "the", "year", "of", "1850", "for", "each", "affiliation", "type", "."], "dataset_name": "spider", "guid": 1332}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the first names of all players, and their total ranking points?", "sql": "SELECT sum(ranking_points) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name", "example": {"db_id": "wta_1", "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "query_toks": ["SELECT", "sum", "(", "ranking_points", ")", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "GROUP", "BY", "T1.first_name"], "query_toks_no_value": ["select", "sum", "(", "ranking_points", ")", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "group", "by", "t1", ".", "first_name"], "question": "What are the first names of all players, and their total ranking points?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "players", ",", "and", "their", "total", "ranking", "points", "?"], "dataset_name": "spider", "guid": 1333}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average latitude and longitude of stations located in San Jose city?", "sql": "SELECT avg(lat) , avg(long) FROM station WHERE city = \"San Jose\"", "example": {"db_id": "bike_1", "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"", "query_toks": ["SELECT", "avg", "(", "lat", ")", ",", "avg", "(", "long", ")", "FROM", "station", "WHERE", "city", "=", "``", "San", "Jose", "''"], "query_toks_no_value": ["select", "avg", "(", "lat", ")", ",", "avg", "(", "long", ")", "from", "station", "where", "city", "=", "value"], "question": "What is the average latitude and longitude of stations located in San Jose city?", "question_toks": ["What", "is", "the", "average", "latitude", "and", "longitude", "of", "stations", "located", "in", "San", "Jose", "city", "?"], "dataset_name": "spider", "guid": 1334}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "example": {"db_id": "formula_1", "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "query_toks": ["SELECT", "avg", "(", "T2.fastestlapspeed", ")", ",", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", ">", "2014", "GROUP", "BY", "T1.name", "ORDER", "BY", "T1.year"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "fastestlapspeed", ")", ",", "t1", ".", "name", ",", "t1", ".", "year", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", ">", "value", "group", "by", "t1", ".", "name", "order", "by", "t1", ".", "year"], "question": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "question_toks": ["What", "are", "the", "average", "fastest", "lap", "speed", "in", "races", "held", "after", "2004", "grouped", "by", "race", "name", "and", "ordered", "by", "year", "?"], "dataset_name": "spider", "guid": 1335}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | List all information about college sorted by enrollment number in the ascending order.", "sql": "SELECT * FROM College ORDER BY enr", "example": {"db_id": "soccer_2", "query": "SELECT * FROM College ORDER BY enr", "query_toks": ["SELECT", "*", "FROM", "College", "ORDER", "BY", "enr"], "query_toks_no_value": ["select", "*", "from", "college", "order", "by", "enr"], "question": "List all information about college sorted by enrollment number in the ascending order.", "question_toks": ["List", "all", "information", "about", "college", "sorted", "by", "enrollment", "number", "in", "the", "ascending", "order", "."], "dataset_name": "spider", "guid": 1336}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of climbers who are not from the country of Switzerland?", "sql": "SELECT Name FROM climber WHERE Country != \"Switzerland\"", "example": {"db_id": "climbing", "query": "SELECT Name FROM climber WHERE Country != \"Switzerland\"", "query_toks": ["SELECT", "Name", "FROM", "climber", "WHERE", "Country", "!", "=", "``", "Switzerland", "''"], "query_toks_no_value": ["select", "name", "from", "climber", "where", "country", "!", "=", "value"], "question": "What are the names of climbers who are not from the country of Switzerland?", "question_toks": ["What", "are", "the", "names", "of", "climbers", "who", "are", "not", "from", "the", "country", "of", "Switzerland", "?"], "dataset_name": "spider", "guid": 1337}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | Show the names of clubs that have players with position \"Right Wing\".", "sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = \"Right Wing\"", "example": {"db_id": "sports_competition", "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"", "query_toks": ["SELECT", "T1.name", "FROM", "club", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.Club_ID", "=", "T2.Club_ID", "WHERE", "T2.Position", "=", "``", "Right", "Wing", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "club", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id", "where", "t2", ".", "position", "=", "value"], "question": "Show the names of clubs that have players with position \"Right Wing\".", "question_toks": ["Show", "the", "names", "of", "clubs", "that", "have", "players", "with", "position", "``", "Right", "Wing", "''", "."], "dataset_name": "spider", "guid": 1338}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the average and maximum hours for the students whose tryout decision is yes.", "sql": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "avg", "(", "T1.HS", ")", ",", "max", "(", "T1.HS", ")", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "hs", ")", ",", "max", "(", "t1", ".", "hs", ")", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "Find the average and maximum hours for the students whose tryout decision is yes.", "question_toks": ["Find", "the", "average", "and", "maximum", "hours", "for", "the", "students", "whose", "tryout", "decision", "is", "yes", "."], "dataset_name": "spider", "guid": 1339}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many different loser names are there?", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT count(DISTINCT loser_name) FROM matches", "query_toks": ["SELECT", "count", "(", "DISTINCT", "loser_name", ")", "FROM", "matches"], "query_toks_no_value": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches"], "question": "How many different loser names are there?", "question_toks": ["How", "many", "different", "loser", "names", "are", "there", "?"], "dataset_name": "spider", "guid": 1340}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the forename and surname of the driver with the shortest laptime?", "sql": "SELECT T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "query_toks": ["SELECT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "ORDER", "BY", "T2.milliseconds", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "order", "by", "t2", ".", "milliseconds", "limit", "value"], "question": "What is the forename and surname of the driver with the shortest laptime?", "question_toks": ["What", "is", "the", "forename", "and", "surname", "of", "the", "driver", "with", "the", "shortest", "laptime", "?"], "dataset_name": "spider", "guid": 1341}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.city_code  =  \"HOU\"", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.city_code", "=", "``", "HOU", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "city_code", "=", "value"], "question": "Which clubs have one or more members from the city with code \"HOU\"? Give me the names of the clubs.", "question_toks": ["Which", "clubs", "have", "one", "or", "more", "members", "from", "the", "city", "with", "code", "``", "HOU", "''", "?", "Give", "me", "the", "names", "of", "the", "clubs", "."], "dataset_name": "spider", "guid": 1342}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Return the names of tracks that have no had any races.", "sql": "SELECT T2.name FROM track AS T2 WHERE T2.track_id NOT IN (SELECT T1.track_id FROM race AS T1)", "example": {"db_id": "race_track", "query": "SELECT name FROM track WHERE track_id NOT IN (SELECT track_id FROM race)", "query_toks": ["SELECT", "name", "FROM", "track", "WHERE", "track_id", "NOT", "IN", "(", "SELECT", "track_id", "FROM", "race", ")"], "query_toks_no_value": ["select", "name", "from", "track", "where", "track_id", "not", "in", "(", "select", "track_id", "from", "race", ")"], "question": "Return the names of tracks that have no had any races.", "question_toks": ["Return", "the", "names", "of", "tracks", "that", "have", "no", "had", "any", "races", "."], "dataset_name": "spider", "guid": 1343}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the top 3 most common colleges of players in match seasons.", "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "College", "FROM", "match_season", "GROUP", "BY", "College", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "college", "from", "match_season", "group", "by", "college", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the top 3 most common colleges of players in match seasons.", "question_toks": ["Show", "the", "top", "3", "most", "common", "colleges", "of", "players", "in", "match", "seasons", "."], "dataset_name": "spider", "guid": 1344}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the total number of students.", "sql": "SELECT count(*) FROM student", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM student", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student"], "question": "Count the total number of students.", "question_toks": ["Count", "the", "total", "number", "of", "students", "."], "dataset_name": "spider", "guid": 1345}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Find the ids and names of stations from which at least 200 trips started.", "sql": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200", "example": {"db_id": "bike_1", "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "query_toks": ["SELECT", "start_station_id", ",", "start_station_name", "FROM", "trip", "GROUP", "BY", "start_station_name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "200"], "query_toks_no_value": ["select", "start_station_id", ",", "start_station_name", "from", "trip", "group", "by", "start_station_name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the ids and names of stations from which at least 200 trips started.", "question_toks": ["Find", "the", "ids", "and", "names", "of", "stations", "from", "which", "at", "least", "200", "trips", "started", "."], "dataset_name": "spider", "guid": 1346}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | How many schools do not participate in the basketball match?", "sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "example": {"db_id": "university_basketball", "query": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "university", "WHERE", "school_id", "NOT", "IN", "(", "SELECT", "school_id", "FROM", "basketball_match", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "university", "where", "school_id", "not", "in", "(", "select", "school_id", "from", "basketball_match", ")"], "question": "How many schools do not participate in the basketball match?", "question_toks": ["How", "many", "schools", "do", "not", "participate", "in", "the", "basketball", "match", "?"], "dataset_name": "spider", "guid": 1347}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | How many drivers were in the Australian Grand Prix held in 2009?", "sql": "SELECT COUNT(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009", "example": {"db_id": "formula_1", "query": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "results", "AS", "T1", "JOIN", "races", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T2.name", "=", "``", "Australian", "Grand", "Prix", "''", "AND", "YEAR", "=", "2009"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "results", "as", "t1", "join", "races", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t2", ".", "name", "=", "value", "and", "year", "=", "value"], "question": "How many drivers were in the Australian Grand Prix held in 2009?", "question_toks": ["How", "many", "drivers", "were", "in", "the", "Australian", "Grand", "Prix", "held", "in", "2009", "?"], "dataset_name": "spider", "guid": 1348}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the draft pick numbers and draft classes for players who play the Defender position?", "sql": "SELECT Draft_Pick_Number , Draft_Class FROM match_season WHERE POSITION = \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"", "query_toks": ["SELECT", "Draft_Pick_Number", ",", "Draft_Class", "FROM", "match_season", "WHERE", "POSITION", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "draft_pick_number", ",", "draft_class", "from", "match_season", "where", "position", "=", "value"], "question": "What are the draft pick numbers and draft classes for players who play the Defender position?", "question_toks": ["What", "are", "the", "draft", "pick", "numbers", "and", "draft", "classes", "for", "players", "who", "play", "the", "Defender", "position", "?"], "dataset_name": "spider", "guid": 1349}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names of poker players whose earnings is higher than 300000?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Earnings", ">", "300000"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "earnings", ">", "value"], "question": "What are the names of poker players whose earnings is higher than 300000?", "question_toks": ["What", "are", "the", "names", "of", "poker", "players", "whose", "earnings", "is", "higher", "than", "300000", "?"], "dataset_name": "spider", "guid": 1350}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?", "sql": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "DISTINCT", "T1.state", ",", "T1.enr", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "state", ",", "t1", ".", "enr", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "decision", "=", "value"], "question": "How many students are enrolled in colleges that have student accepted during tryouts, and in which states are those colleges?", "question_toks": ["How", "many", "students", "are", "enrolled", "in", "colleges", "that", "have", "student", "accepted", "during", "tryouts", ",", "and", "in", "which", "states", "are", "those", "colleges", "?"], "dataset_name": "spider", "guid": 1351}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the primary conference of the school with the lowest acc percentage score.", "sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "query_toks": ["SELECT", "t1.Primary_conference", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "ORDER", "BY", "t2.acc_percent", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "primary_conference", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "order", "by", "t2", ".", "acc_percent", "limit", "value"], "question": "Return the primary conference of the school with the lowest acc percentage score.", "question_toks": ["Return", "the", "primary", "conference", "of", "the", "school", "with", "the", "lowest", "acc", "percentage", "score", "."], "dataset_name": "spider", "guid": 1352}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the number of days that had an average humity above 50 and an average visibility above 8?", "sql": "SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8", "example": {"db_id": "bike_1", "query": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "weather", "WHERE", "mean_humidity", ">", "50", "AND", "mean_visibility_miles", ">", "8"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "weather", "where", "mean_humidity", ">", "value", "and", "mean_visibility_miles", ">", "value"], "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?", "question_toks": ["What", "is", "the", "number", "of", "days", "that", "had", "an", "average", "humity", "above", "50", "and", "an", "average", "visibility", "above", "8", "?"], "dataset_name": "spider", "guid": 1353}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Please show the most common reigns of wrestlers.", "sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "wrestler", "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Reign", "FROM", "wrestler", "GROUP", "BY", "Reign", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "reign", "from", "wrestler", "group", "by", "reign", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the most common reigns of wrestlers.", "question_toks": ["Please", "show", "the", "most", "common", "reigns", "of", "wrestlers", "."], "dataset_name": "spider", "guid": 1354}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of climbers and the corresponding names of mountains that they climb?", "sql": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "example": {"db_id": "climbing", "query": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Name", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "name", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id"], "question": "What are the names of climbers and the corresponding names of mountains that they climb?", "question_toks": ["What", "are", "the", "names", "of", "climbers", "and", "the", "corresponding", "names", "of", "mountains", "that", "they", "climb", "?"], "dataset_name": "spider", "guid": 1355}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find how many school locations have the word 'NY'.", "sql": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"", "example": {"db_id": "university_basketball", "query": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "university", "WHERE", "LOCATION", "LIKE", "``", "%", "NY", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "university", "where", "location", "like", "value"], "question": "Find how many school locations have the word 'NY'.", "question_toks": ["Find", "how", "many", "school", "locations", "have", "the", "word", "'NY", "'", "."], "dataset_name": "spider", "guid": 1356}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the average age of the members in the club \"Bootup Baltimore\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "example": {"db_id": "club_1", "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "query_toks": ["SELECT", "avg", "(", "t3.age", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "age", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Find the average age of the members in the club \"Bootup Baltimore\".", "question_toks": ["Find", "the", "average", "age", "of", "the", "members", "in", "the", "club", "``", "Bootup", "Baltimore", "''", "."], "dataset_name": "spider", "guid": 1357}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the names of all colleges that have two or more players?", "sql": "SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "query_toks": ["SELECT", "College", "FROM", "match_season", "GROUP", "BY", "College", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "college", "from", "match_season", "group", "by", "college", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of all colleges that have two or more players?", "question_toks": ["What", "are", "the", "names", "of", "all", "colleges", "that", "have", "two", "or", "more", "players", "?"], "dataset_name": "spider", "guid": 1358}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the nationalities that are shared by at least two people?", "sql": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "example": {"db_id": "poker_player", "query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Nationality", "FROM", "people", "GROUP", "BY", "Nationality", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the nationalities that are shared by at least two people?", "question_toks": ["What", "are", "the", "nationalities", "that", "are", "shared", "by", "at", "least", "two", "people", "?"], "dataset_name": "spider", "guid": 1359}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names of different tracks, and how many races has each had?", "sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "example": {"db_id": "race_track", "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "GROUP", "BY", "T1.track_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "group", "by", "t1", ".", "track_id"], "question": "What are the names of different tracks, and how many races has each had?", "question_toks": ["What", "are", "the", "names", "of", "different", "tracks", ",", "and", "how", "many", "races", "has", "each", "had", "?"], "dataset_name": "spider", "guid": 1360}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "sql": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "example": {"db_id": "university_basketball", "query": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation", "query_toks": ["SELECT", "sum", "(", "Enrollment", ")", ",", "affiliation", "FROM", "university", "WHERE", "founded", ">", "1850", "GROUP", "BY", "affiliation"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "affiliation", "from", "university", "where", "founded", ">", "value", "group", "by", "affiliation"], "question": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?", "question_toks": ["What", "are", "the", "different", "affiliations", ",", "and", "what", "is", "the", "total", "enrollment", "of", "schools", "founded", "after", "1850", "for", "each", "enrollment", "type", "?"], "dataset_name": "spider", "guid": 1361}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | For each player, what are their name, season, and country that they belong to?", "sql": "SELECT T2.Season , T2.Player , T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country", "example": {"db_id": "match_season", "query": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "query_toks": ["SELECT", "T2.Season", ",", "T2.Player", ",", "T1.Country_name", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country"], "query_toks_no_value": ["select", "t2", ".", "season", ",", "t2", ".", "player", ",", "t1", ".", "country_name", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country"], "question": "For each player, what are their name, season, and country that they belong to?", "question_toks": ["For", "each", "player", ",", "what", "are", "their", "name", ",", "season", ",", "and", "country", "that", "they", "belong", "to", "?"], "dataset_name": "spider", "guid": 1362}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Which countries have more than one mountain?", "sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "example": {"db_id": "climbing", "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "Country", "FROM", "mountain", "GROUP", "BY", "Country", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "country", "from", "mountain", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "Which countries have more than one mountain?", "question_toks": ["Which", "countries", "have", "more", "than", "one", "mountain", "?"], "dataset_name": "spider", "guid": 1363}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the names of the gymnasts.", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "example": {"db_id": "gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "query_toks": ["SELECT", "T2.Name", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id"], "question": "Return the names of the gymnasts.", "question_toks": ["Return", "the", "names", "of", "the", "gymnasts", "."], "dataset_name": "spider", "guid": 1364}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the names of the five oldest people?", "sql": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "example": {"db_id": "gymnast", "query": "SELECT Name FROM People ORDER BY Age DESC LIMIT 5", "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Age", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "age", "desc", "limit", "value"], "question": "What are the names of the five oldest people?", "question_toks": ["What", "are", "the", "names", "of", "the", "five", "oldest", "people", "?"], "dataset_name": "spider", "guid": 1365}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is all the information about the basketball match?", "sql": "SELECT * FROM basketball_match", "example": {"db_id": "university_basketball", "query": "SELECT * FROM basketball_match", "query_toks": ["SELECT", "*", "FROM", "basketball_match"], "query_toks_no_value": ["select", "*", "from", "basketball_match"], "question": "What is all the information about the basketball match?", "question_toks": ["What", "is", "all", "the", "information", "about", "the", "basketball", "match", "?"], "dataset_name": "spider", "guid": 1366}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each zip code, find the ids of all trips that have a higher average mean temperature above 60?", "sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f) > 60", "example": {"db_id": "bike_1", "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "query_toks": ["SELECT", "T1.id", "FROM", "trip", "AS", "T1", "JOIN", "weather", "AS", "T2", "ON", "T1.zip_code", "=", "T2.zip_code", "GROUP", "BY", "T2.zip_code", "HAVING", "avg", "(", "T2.mean_temperature_f", ")", ">", "60"], "query_toks_no_value": ["select", "t1", ".", "id", "from", "trip", "as", "t1", "join", "weather", "as", "t2", "on", "t1", ".", "zip_code", "=", "t2", ".", "zip_code", "group", "by", "t2", ".", "zip_code", "having", "avg", "(", "t2", ".", "mean_temperature_f", ")", ">", "value"], "question": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?", "question_toks": ["For", "each", "zip", "code", ",", "find", "the", "ids", "of", "all", "trips", "that", "have", "a", "higher", "average", "mean", "temperature", "above", "60", "?"], "dataset_name": "spider", "guid": 1367}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | How many players are from each country?", "sql": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name", "example": {"db_id": "match_season", "query": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name", "query_toks": ["SELECT", "Country_name", ",", "COUNT", "(", "*", ")", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "GROUP", "BY", "T1.Country_name"], "query_toks_no_value": ["select", "country_name", ",", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "group", "by", "t1", ".", "country_name"], "question": "How many players are from each country?", "question_toks": ["How", "many", "players", "are", "from", "each", "country", "?"], "dataset_name": "spider", "guid": 1368}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names and locations of tracks that have had exactly 1 race?", "sql": "SELECT T2.name , T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING count(*) = 1", "example": {"db_id": "race_track", "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "query_toks": ["SELECT", "T2.name", ",", "T2.location", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "GROUP", "BY", "T1.track_id", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "location", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "group", "by", "t1", ".", "track_id", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the names and locations of tracks that have had exactly 1 race?", "question_toks": ["What", "are", "the", "names", "and", "locations", "of", "tracks", "that", "have", "had", "exactly", "1", "race", "?"], "dataset_name": "spider", "guid": 1369}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the code of the country with the most players?", "sql": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country_code", "FROM", "players", "GROUP", "BY", "country_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the code of the country with the most players?", "question_toks": ["What", "is", "the", "code", "of", "the", "country", "with", "the", "most", "players", "?"], "dataset_name": "spider", "guid": 1370}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".", "sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.sex = \"F\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.sex", "=", "``", "F", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "sex", "=", "value"], "question": "Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".", "question_toks": ["Give", "me", "the", "first", "name", "and", "last", "name", "for", "all", "the", "female", "members", "of", "the", "club", "``", "Bootup", "Baltimore", "''", "."], "dataset_name": "spider", "guid": 1371}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the types and countries of competitions?", "sql": "SELECT Competition_type ,  Country FROM competition", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type ,  Country FROM competition", "query_toks": ["SELECT", "Competition_type", ",", "Country", "FROM", "competition"], "query_toks_no_value": ["select", "competition_type", ",", "country", "from", "competition"], "question": "What are the types and countries of competitions?", "question_toks": ["What", "are", "the", "types", "and", "countries", "of", "competitions", "?"], "dataset_name": "spider", "guid": 1372}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?", "sql": "SELECT T1.driverid , T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION = '1' GROUP BY T1.driverid HAVING count(*) >= 2", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.driverid", ",", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "POSITION", "=", "'1", "'", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "position", "=", "value", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?", "question_toks": ["What", "is", "the", "id", ",", "forname", "and", "surname", "of", "the", "driver", "who", "had", "the", "first", "position", "in", "terms", "of", "laptime", "at", "least", "twice", "?"], "dataset_name": "spider", "guid": 1373}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Please show the most common occupation of players.", "sql": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "riding_club", "query": "SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Occupation", "FROM", "player", "GROUP", "BY", "Occupation", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "occupation", "from", "player", "group", "by", "occupation", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Please show the most common occupation of players.", "question_toks": ["Please", "show", "the", "most", "common", "occupation", "of", "players", "."], "dataset_name": "spider", "guid": 1374}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the members of the club \"Tennis Club\".", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Count the members of the club \"Tennis Club\".", "question_toks": ["Count", "the", "members", "of", "the", "club", "``", "Tennis", "Club", "''", "."], "dataset_name": "spider", "guid": 1375}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each zip code, how many times has the maximum wind speed reached 25 mph?", "sql": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "example": {"db_id": "bike_1", "query": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code", "query_toks": ["SELECT", "zip_code", ",", "count", "(", "*", ")", "FROM", "weather", "WHERE", "max_wind_Speed_mph", ">", "=", "25", "GROUP", "BY", "zip_code"], "query_toks_no_value": ["select", "zip_code", ",", "count", "(", "*", ")", "from", "weather", "where", "max_wind_speed_mph", ">", "=", "value", "group", "by", "zip_code"], "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?", "question_toks": ["For", "each", "zip", "code", ",", "how", "many", "times", "has", "the", "maximum", "wind", "speed", "reached", "25", "mph", "?"], "dataset_name": "spider", "guid": 1376}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | List the names of poker players ordered by the final tables made in ascending order.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Final_Table_Made"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "final_table_made"], "question": "List the names of poker players ordered by the final tables made in ascending order.", "question_toks": ["List", "the", "names", "of", "poker", "players", "ordered", "by", "the", "final", "tables", "made", "in", "ascending", "order", "."], "dataset_name": "spider", "guid": 1377}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Find the zip code in which the average mean visibility is lower than 10.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "HAVING", "avg", "(", "mean_visibility_miles", ")", "<", "10"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "having", "avg", "(", "mean_visibility_miles", ")", "<", "value"], "question": "Find the zip code in which the average mean visibility is lower than 10.", "question_toks": ["Find", "the", "zip", "code", "in", "which", "the", "average", "mean", "visibility", "is", "lower", "than", "10", "."], "dataset_name": "spider", "guid": 1378}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | List the total points of gymnasts in descending order.", "sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "example": {"db_id": "gymnast", "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "query_toks": ["SELECT", "Total_Points", "FROM", "gymnast", "ORDER", "BY", "Total_Points", "DESC"], "query_toks_no_value": ["select", "total_points", "from", "gymnast", "order", "by", "total_points", "desc"], "question": "List the total points of gymnasts in descending order.", "question_toks": ["List", "the", "total", "points", "of", "gymnasts", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 1379}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | List all schools and their nicknames in the order of founded year.", "sql": "SELECT school ,  nickname FROM university ORDER BY founded", "example": {"db_id": "university_basketball", "query": "SELECT school ,  nickname FROM university ORDER BY founded", "query_toks": ["SELECT", "school", ",", "nickname", "FROM", "university", "ORDER", "BY", "founded"], "query_toks_no_value": ["select", "school", ",", "nickname", "from", "university", "order", "by", "founded"], "question": "List all schools and their nicknames in the order of founded year.", "question_toks": ["List", "all", "schools", "and", "their", "nicknames", "in", "the", "order", "of", "founded", "year", "."], "dataset_name": "spider", "guid": 1380}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the names of wrestlers days held less than 100?", "sql": "SELECT Name FROM wrestler WHERE Days_held  <  100", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler WHERE Days_held  <  100", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "WHERE", "Days_held", "<", "100"], "query_toks_no_value": ["select", "name", "from", "wrestler", "where", "days_held", "<", "value"], "question": "What are the names of wrestlers days held less than 100?", "question_toks": ["What", "are", "the", "names", "of", "wrestlers", "days", "held", "less", "than", "100", "?"], "dataset_name": "spider", "guid": 1381}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What are the names of all clubs?", "sql": "SELECT clubname FROM club", "example": {"db_id": "club_1", "query": "SELECT clubname FROM club", "query_toks": ["SELECT", "clubname", "FROM", "club"], "query_toks_no_value": ["select", "clubname", "from", "club"], "question": "What are the names of all clubs?", "question_toks": ["What", "are", "the", "names", "of", "all", "clubs", "?"], "dataset_name": "spider", "guid": 1382}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Give the names and locations of all wrestlers.", "sql": "SELECT Name ,  LOCATION FROM wrestler", "example": {"db_id": "wrestler", "query": "SELECT Name ,  LOCATION FROM wrestler", "query_toks": ["SELECT", "Name", ",", "LOCATION", "FROM", "wrestler"], "query_toks_no_value": ["select", "name", ",", "location", "from", "wrestler"], "question": "Give the names and locations of all wrestlers.", "question_toks": ["Give", "the", "names", "and", "locations", "of", "all", "wrestlers", "."], "dataset_name": "spider", "guid": 1383}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the distinct classes that races can have?", "sql": "SELECT DISTINCT CLASS FROM race", "example": {"db_id": "race_track", "query": "SELECT DISTINCT CLASS FROM race", "query_toks": ["SELECT", "DISTINCT", "CLASS", "FROM", "race"], "query_toks_no_value": ["select", "distinct", "class", "from", "race"], "question": "What are the distinct classes that races can have?", "question_toks": ["What", "are", "the", "distinct", "classes", "that", "races", "can", "have", "?"], "dataset_name": "spider", "guid": 1384}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Count the number of schools that have had basketball matches.", "sql": "SELECT count(DISTINCT school_id) FROM basketball_match", "example": {"db_id": "university_basketball", "query": "SELECT count(DISTINCT school_id) FROM basketball_match", "query_toks": ["SELECT", "count", "(", "DISTINCT", "school_id", ")", "FROM", "basketball_match"], "query_toks_no_value": ["select", "count", "(", "distinct", "school_id", ")", "from", "basketball_match"], "question": "Count the number of schools that have had basketball matches.", "question_toks": ["Count", "the", "number", "of", "schools", "that", "have", "had", "basketball", "matches", "."], "dataset_name": "spider", "guid": 1385}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the installation date for each ending station on all the trips?", "sql": "SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id", "example": {"db_id": "bike_1", "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id", "query_toks": ["SELECT", "T1.id", ",", "T2.installation_date", "FROM", "trip", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.end_station_id", "=", "T2.id"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t2", ".", "installation_date", "from", "trip", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "end_station_id", "=", "t2", ".", "id"], "question": "What is the installation date for each ending station on all the trips?", "question_toks": ["What", "is", "the", "installation", "date", "for", "each", "ending", "station", "on", "all", "the", "trips", "?"], "dataset_name": "spider", "guid": 1386}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of the races held after 2017 in Spain?", "sql": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017", "example": {"db_id": "formula_1", "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017", "query_toks": ["SELECT", "T1.name", "FROM", "races", "AS", "T1", "JOIN", "circuits", "AS", "T2", "ON", "T1.circuitid", "=", "T2.circuitid", "WHERE", "T2.country", "=", "``", "Spain", "''", "AND", "T1.year", ">", "2017"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "races", "as", "t1", "join", "circuits", "as", "t2", "on", "t1", ".", "circuitid", "=", "t2", ".", "circuitid", "where", "t2", ".", "country", "=", "value", "and", "t1", ".", "year", ">", "value"], "question": "What are the names of the races held after 2017 in Spain?", "question_toks": ["What", "are", "the", "names", "of", "the", "races", "held", "after", "2017", "in", "Spain", "?"], "dataset_name": "spider", "guid": 1387}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the first name and country code of the player who did the most number of tours.", "sql": "SELECT T1.country_code , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1", "query_toks": ["SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "ORDER", "BY", "T2.tours", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "order", "by", "t2", ".", "tours", "desc", "limit", "value"], "question": "Find the first name and country code of the player who did the most number of tours.", "question_toks": ["Find", "the", "first", "name", "and", "country", "code", "of", "the", "player", "who", "did", "the", "most", "number", "of", "tours", "."], "dataset_name": "spider", "guid": 1388}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of races held after 12:00:00 or before 09:00:00?", "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"", "example": {"db_id": "formula_1", "query": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"", "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "TIME", ">", "``", "12:00:00", "''", "OR", "TIME", "<", "``", "09:00:00", "''"], "query_toks_no_value": ["select", "name", "from", "races", "where", "time", ">", "value", "or", "time", "<", "value"], "question": "What are the names of races held after 12:00:00 or before 09:00:00?", "question_toks": ["What", "are", "the", "names", "of", "races", "held", "after", "12:00:00", "or", "before", "09:00:00", "?"], "dataset_name": "spider", "guid": 1389}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the first and last name of all the German drivers?", "sql": "SELECT forename , surname FROM drivers WHERE nationality = \"German\"", "example": {"db_id": "formula_1", "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"", "query_toks": ["SELECT", "forename", ",", "surname", "FROM", "drivers", "WHERE", "nationality", "=", "``", "German", "''"], "query_toks_no_value": ["select", "forename", ",", "surname", "from", "drivers", "where", "nationality", "=", "value"], "question": "What is the first and last name of all the German drivers?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "all", "the", "German", "drivers", "?"], "dataset_name": "spider", "guid": 1390}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | List names of all teams in the basketball competition, ordered by all home scores in descending order.", "sql": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "example": {"db_id": "university_basketball", "query": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC", "query_toks": ["SELECT", "team_name", "FROM", "basketball_match", "ORDER", "BY", "All_Home", "DESC"], "query_toks_no_value": ["select", "team_name", "from", "basketball_match", "order", "by", "all_home", "desc"], "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.", "question_toks": ["List", "names", "of", "all", "teams", "in", "the", "basketball", "competition", ",", "ordered", "by", "all", "home", "scores", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 1391}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the different names of mountains ascended by climbers from the country of West Germany?", "sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\"", "example": {"db_id": "climbing", "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID", "WHERE", "T1.Country", "=", "``", "West", "Germany", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id", "where", "t1", ".", "country", "=", "value"], "question": "What are the different names of mountains ascended by climbers from the country of West Germany?", "question_toks": ["What", "are", "the", "different", "names", "of", "mountains", "ascended", "by", "climbers", "from", "the", "country", "of", "West", "Germany", "?"], "dataset_name": "spider", "guid": 1392}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the names of the winner and loser who played in the longest match?", "sql": "SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", ",", "loser_name", "FROM", "matches", "ORDER", "BY", "minutes", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "value"], "question": "What are the names of the winner and loser who played in the longest match?", "question_toks": ["What", "are", "the", "names", "of", "the", "winner", "and", "loser", "who", "played", "in", "the", "longest", "match", "?"], "dataset_name": "spider", "guid": 1393}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the hometowns of gymnasts and the corresponding number of gymnasts?", "sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown", "example": {"db_id": "gymnast", "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown", "query_toks": ["SELECT", "T2.Hometown", ",", "COUNT", "(", "*", ")", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "GROUP", "BY", "T2.Hometown"], "query_toks_no_value": ["select", "t2", ".", "hometown", ",", "count", "(", "*", ")", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "hometown"], "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?", "question_toks": ["What", "are", "the", "hometowns", "of", "gymnasts", "and", "the", "corresponding", "number", "of", "gymnasts", "?"], "dataset_name": "spider", "guid": 1394}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?", "sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "query_toks": ["SELECT", "date", ",", "mean_temperature_f", ",", "mean_humidity", "FROM", "weather", "ORDER", "BY", "max_gust_speed_mph", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "date", ",", "mean_temperature_f", ",", "mean_humidity", "from", "weather", "order", "by", "max_gust_speed_mph", "desc", "limit", "value"], "question": "What is the date, average temperature and mean humidity for the days with the 3 largest maximum gust speeds?", "question_toks": ["What", "is", "the", "date", ",", "average", "temperature", "and", "mean", "humidity", "for", "the", "days", "with", "the", "3", "largest", "maximum", "gust", "speeds", "?"], "dataset_name": "spider", "guid": 1395}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of swimmers who has a result of \"win\".", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'", "example": {"db_id": "swimming", "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'", "query_toks": ["SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "WHERE", "RESULT", "=", "'Win", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "where", "result", "=", "value"], "question": "Find the names of swimmers who has a result of \"win\".", "question_toks": ["Find", "the", "names", "of", "swimmers", "who", "has", "a", "result", "of", "``", "win", "''", "."], "dataset_name": "spider", "guid": 1396}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the names and players of all the clubs?", "sql": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID", "example": {"db_id": "sports_competition", "query": "SELECT T1.name ,  T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID", "query_toks": ["SELECT", "T1.name", ",", "T2.Player_id", "FROM", "club", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.Club_ID", "=", "T2.Club_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "player_id", "from", "club", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id"], "question": "What are the names and players of all the clubs?", "question_toks": ["What", "are", "the", "names", "and", "players", "of", "all", "the", "clubs", "?"], "dataset_name": "spider", "guid": 1397}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is the maximum enrollment across all schools?", "sql": "SELECT max(Enrollment) FROM university", "example": {"db_id": "university_basketball", "query": "SELECT max(Enrollment) FROM university", "query_toks": ["SELECT", "max", "(", "Enrollment", ")", "FROM", "university"], "query_toks_no_value": ["select", "max", "(", "enrollment", ")", "from", "university"], "question": "What is the maximum enrollment across all schools?", "question_toks": ["What", "is", "the", "maximum", "enrollment", "across", "all", "schools", "?"], "dataset_name": "spider", "guid": 1398}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of players who train between 500 and 1500 hours?", "sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500", "example": {"db_id": "soccer_2", "query": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500", "query_toks": ["SELECT", "pName", "FROM", "Player", "WHERE", "HS", "BETWEEN", "500", "AND", "1500"], "query_toks_no_value": ["select", "pname", "from", "player", "where", "hs", "between", "value", "and", "value"], "question": "What are the names of players who train between 500 and 1500 hours?", "question_toks": ["What", "are", "the", "names", "of", "players", "who", "train", "between", "500", "and", "1500", "hours", "?"], "dataset_name": "spider", "guid": 1399}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?", "sql": "SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 8 UNION SELECT T1.forename , T1.surname , T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING count(*) > 5", "example": {"db_id": "formula_1", "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "query_toks": ["SELECT", "T1.forename", ",", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "pitstops", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "8", "UNION", "SELECT", "T1.forename", ",", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "forename", ",", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "pitstops", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "forename", ",", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?", "question_toks": ["What", "are", "the", "drivers", "'", "first", ",", "last", "names", "and", "id", "who", "had", "more", "than", "8", "pit", "stops", "or", "participated", "in", "more", "than", "5", "race", "results", "?"], "dataset_name": "spider", "guid": 1400}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.", "sql": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f) > 60", "example": {"db_id": "bike_1", "query": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60", "query_toks": ["SELECT", "T1.id", "FROM", "trip", "AS", "T1", "JOIN", "weather", "AS", "T2", "ON", "T1.zip_code", "=", "T2.zip_code", "GROUP", "BY", "T2.zip_code", "HAVING", "avg", "(", "T2.mean_temperature_f", ")", ">", "60"], "query_toks_no_value": ["select", "t1", ".", "id", "from", "trip", "as", "t1", "join", "weather", "as", "t2", "on", "t1", ".", "zip_code", "=", "t2", ".", "zip_code", "group", "by", "t2", ".", "zip_code", "having", "avg", "(", "t2", ".", "mean_temperature_f", ")", ">", "value"], "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.", "question_toks": ["Give", "me", "ids", "for", "all", "the", "trip", "that", "took", "place", "in", "a", "zip", "code", "area", "with", "average", "mean", "temperature", "above", "60", "."], "dataset_name": "spider", "guid": 1401}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the total points of gymnasts, ordered by their floor exercise points descending?", "sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "example": {"db_id": "gymnast", "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "query_toks": ["SELECT", "Total_Points", "FROM", "gymnast", "ORDER", "BY", "Floor_Exercise_Points", "DESC"], "query_toks_no_value": ["select", "total_points", "from", "gymnast", "order", "by", "floor_exercise_points", "desc"], "question": "What are the total points of gymnasts, ordered by their floor exercise points descending?", "question_toks": ["What", "are", "the", "total", "points", "of", "gymnasts", ",", "ordered", "by", "their", "floor", "exercise", "points", "descending", "?"], "dataset_name": "spider", "guid": 1402}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many colleges has more than 15000 students?", "sql": "SELECT count(*) FROM College WHERE enr  >  15000", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM College WHERE enr  >  15000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "College", "WHERE", "enr", ">", "15000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "college", "where", "enr", ">", "value"], "question": "How many colleges has more than 15000 students?", "question_toks": ["How", "many", "colleges", "has", "more", "than", "15000", "students", "?"], "dataset_name": "spider", "guid": 1403}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Count the number of different colleges that players who play for Columbus Crew are from.", "sql": "SELECT COUNT(DISTINCT college) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = \"Columbus Crew\"", "example": {"db_id": "match_season", "query": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.College", ")", "FROM", "match_season", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id", "WHERE", "T2.Name", "=", "``", "Columbus", "Crew", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "college", ")", "from", "match_season", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id", "where", "t2", ".", "name", "=", "value"], "question": "Count the number of different colleges that players who play for Columbus Crew are from.", "question_toks": ["Count", "the", "number", "of", "different", "colleges", "that", "players", "who", "play", "for", "Columbus", "Crew", "are", "from", "."], "dataset_name": "spider", "guid": 1404}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the first name and country code of the oldest player.", "sql": "SELECT first_name, country_code FROM players ORDER BY birth_date ASC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "country_code", "FROM", "players", "ORDER", "BY", "birth_date", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "value"], "question": "Find the first name and country code of the oldest player.", "question_toks": ["Find", "the", "first", "name", "and", "country", "code", "of", "the", "oldest", "player", "."], "dataset_name": "spider", "guid": 1405}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What are the first names of all the students?", "sql": "SELECT DISTINCT fname FROM student", "example": {"db_id": "club_1", "query": "SELECT DISTINCT fname FROM student", "query_toks": ["SELECT", "DISTINCT", "fname", "FROM", "student"], "query_toks_no_value": ["select", "distinct", "fname", "from", "student"], "question": "What are the first names of all the students?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "the", "students", "?"], "dataset_name": "spider", "guid": 1406}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the number of states that has some college whose enrollment is larger than the average enrollment?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr > (SELECT avg(enr) FROM college)", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT state) FROM college WHERE enr  >  (SELECT avg(enr) FROM college)", "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "college", "WHERE", "enr", ">", "(", "SELECT", "avg", "(", "enr", ")", "FROM", "college", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "college", "where", "enr", ">", "(", "select", "avg", "(", "enr", ")", "from", "college", ")"], "question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?", "question_toks": ["What", "is", "the", "number", "of", "states", "that", "has", "some", "college", "whose", "enrollment", "is", "larger", "than", "the", "average", "enrollment", "?"], "dataset_name": "spider", "guid": 1407}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many different roles are there in the club \"Bootup Baltimore\"?", "sql": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"", "example": {"db_id": "club_1", "query": "SELECT count(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid WHERE t1.clubname  =  \"Bootup Baltimore\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t2.position", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "position", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "where", "t1", ".", "clubname", "=", "value"], "question": "How many different roles are there in the club \"Bootup Baltimore\"?", "question_toks": ["How", "many", "different", "roles", "are", "there", "in", "the", "club", "``", "Bootup", "Baltimore", "''", "?"], "dataset_name": "spider", "guid": 1408}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | How many coaches does each club has? List the club id, name and the number of coaches.", "sql": "SELECT T1.club_id , T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id", "example": {"db_id": "riding_club", "query": "SELECT T1.club_id ,  T1.club_name, count(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id", "query_toks": ["SELECT", "T1.club_id", ",", "T1.club_name", ",", "count", "(", "*", ")", "FROM", "club", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.club_id", "=", "T2.club_id", "GROUP", "BY", "T1.club_id"], "query_toks_no_value": ["select", "t1", ".", "club_id", ",", "t1", ".", "club_name", ",", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id", "group", "by", "t1", ".", "club_id"], "question": "How many coaches does each club has? List the club id, name and the number of coaches.", "question_toks": ["How", "many", "coaches", "does", "each", "club", "has", "?", "List", "the", "club", "id", ",", "name", "and", "the", "number", "of", "coaches", "."], "dataset_name": "spider", "guid": 1409}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | which countries did participated in both Friendly and Tournament type competitions.", "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "example": {"db_id": "sports_competition", "query": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "query_toks": ["SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Friendly", "'", "INTERSECT", "SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Tournament", "'"], "query_toks_no_value": ["select", "country", "from", "competition", "where", "competition_type", "=", "value", "intersect", "select", "country", "from", "competition", "where", "competition_type", "=", "value"], "question": "which countries did participated in both Friendly and Tournament type competitions.", "question_toks": ["which", "countries", "did", "participated", "in", "both", "Friendly", "and", "Tournament", "type", "competitions", "."], "dataset_name": "spider", "guid": 1410}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names of people who do not play poker?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "example": {"db_id": "poker_player", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_ID", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "poker_player", ")"], "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")"], "question": "What are the names of people who do not play poker?", "question_toks": ["What", "are", "the", "names", "of", "people", "who", "do", "not", "play", "poker", "?"], "dataset_name": "spider", "guid": 1411}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the position of players and the average number of points of players of each position.", "sql": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION", "example": {"db_id": "sports_competition", "query": "SELECT POSITION ,  avg(Points) FROM player GROUP BY POSITION", "query_toks": ["SELECT", "POSITION", ",", "avg", "(", "Points", ")", "FROM", "player", "GROUP", "BY", "POSITION"], "query_toks_no_value": ["select", "position", ",", "avg", "(", "points", ")", "from", "player", "group", "by", "position"], "question": "List the position of players and the average number of points of players of each position.", "question_toks": ["List", "the", "position", "of", "players", "and", "the", "average", "number", "of", "points", "of", "players", "of", "each", "position", "."], "dataset_name": "spider", "guid": 1412}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | Show total points of all players.", "sql": "SELECT sum(Points) FROM player", "example": {"db_id": "sports_competition", "query": "SELECT sum(Points) FROM player", "query_toks": ["SELECT", "sum", "(", "Points", ")", "FROM", "player"], "query_toks_no_value": ["select", "sum", "(", "points", ")", "from", "player"], "question": "Show total points of all players.", "question_toks": ["Show", "total", "points", "of", "all", "players", "."], "dataset_name": "spider", "guid": 1413}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Find all the zip codes in which the max dew point have never reached 70.", "sql": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70", "query_toks": ["SELECT", "DISTINCT", "zip_code", "FROM", "weather", "EXCEPT", "SELECT", "DISTINCT", "zip_code", "FROM", "weather", "WHERE", "max_dew_point_f", ">", "=", "70"], "query_toks_no_value": ["select", "distinct", "zip_code", "from", "weather", "except", "select", "distinct", "zip_code", "from", "weather", "where", "max_dew_point_f", ">", "=", "value"], "question": "Find all the zip codes in which the max dew point have never reached 70.", "question_toks": ["Find", "all", "the", "zip", "codes", "in", "which", "the", "max", "dew", "point", "have", "never", "reached", "70", "."], "dataset_name": "spider", "guid": 1414}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names of poker players, ordered ascending by the number of final tables they have made?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made ASC", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Final_Table_Made"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "final_table_made"], "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "question_toks": ["What", "are", "the", "names", "of", "poker", "players", ",", "ordered", "ascending", "by", "the", "number", "of", "final", "tables", "they", "have", "made", "?"], "dataset_name": "spider", "guid": 1415}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is the primary conference of the school that has the lowest acc percent score in the competition?", "sql": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1", "query_toks": ["SELECT", "t1.Primary_conference", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "ORDER", "BY", "t2.acc_percent", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "primary_conference", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "order", "by", "t2", ".", "acc_percent", "limit", "value"], "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?", "question_toks": ["What", "is", "the", "primary", "conference", "of", "the", "school", "that", "has", "the", "lowest", "acc", "percent", "score", "in", "the", "competition", "?"], "dataset_name": "spider", "guid": 1416}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?", "sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "example": {"db_id": "bike_1", "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "query_toks": ["SELECT", "id", "FROM", "station", "WHERE", "lat", ">", "37.4", "EXCEPT", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "min", "(", "bikes_available", ")", "<", "7"], "query_toks_no_value": ["select", "id", "from", "station", "where", "lat", ">", "value", "except", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "min", "(", "bikes_available", ")", "<", "value"], "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?", "question_toks": ["What", "are", "the", "ids", "of", "stations", "that", "have", "latitude", "above", "37.4", "and", "never", "had", "bike", "availability", "below", "7", "?"], "dataset_name": "spider", "guid": 1417}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | List the names and birth dates of people in ascending alphabetical order of name.", "sql": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "example": {"db_id": "poker_player", "query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC", "query_toks": ["SELECT", "Name", ",", "Birth_Date", "FROM", "people", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc"], "question": "List the names and birth dates of people in ascending alphabetical order of name.", "question_toks": ["List", "the", "names", "and", "birth", "dates", "of", "people", "in", "ascending", "alphabetical", "order", "of", "name", "."], "dataset_name": "spider", "guid": 1418}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the money rank of the tallest poker player?", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "query_toks": ["SELECT", "T2.Money_Rank", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "height", "desc", "limit", "value"], "question": "What is the money rank of the tallest poker player?", "question_toks": ["What", "is", "the", "money", "rank", "of", "the", "tallest", "poker", "player", "?"], "dataset_name": "spider", "guid": 1419}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the station station and end station for the trips with the three smallest ids?", "sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "query_toks": ["SELECT", "start_station_name", ",", "end_station_name", "FROM", "trip", "ORDER", "BY", "id", "LIMIT", "3"], "query_toks_no_value": ["select", "start_station_name", ",", "end_station_name", "from", "trip", "order", "by", "id", "limit", "value"], "question": "What is the station station and end station for the trips with the three smallest ids?", "question_toks": ["What", "is", "the", "station", "station", "and", "end", "station", "for", "the", "trips", "with", "the", "three", "smallest", "ids", "?"], "dataset_name": "spider", "guid": 1420}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the age of the person with the greatest height.", "sql": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "example": {"db_id": "gymnast", "query": "SELECT Age FROM people ORDER BY Height DESC LIMIT 1", "query_toks": ["SELECT", "Age", "FROM", "people", "ORDER", "BY", "Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "age", "from", "people", "order", "by", "height", "desc", "limit", "value"], "question": "Return the age of the person with the greatest height.", "question_toks": ["Return", "the", "age", "of", "the", "person", "with", "the", "greatest", "height", "."], "dataset_name": "spider", "guid": 1421}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many members of club \"Bootup Baltimore\" are younger than 18?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.age", "<", "18"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "age", "<", "value"], "question": "How many members of club \"Bootup Baltimore\" are younger than 18?", "question_toks": ["How", "many", "members", "of", "club", "``", "Bootup", "Baltimore", "''", "are", "younger", "than", "18", "?"], "dataset_name": "spider", "guid": 1422}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t2.position", "=", "``", "President", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t2", ".", "position", "=", "value"], "question": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.", "question_toks": ["Who", "is", "the", "president", "of", "the", "club", "``", "Bootup", "Baltimore", "''", "?", "Give", "me", "the", "first", "and", "last", "name", "."], "dataset_name": "spider", "guid": 1423}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the full names of all left handed players, in order of birth date?", "sql": "SELECT first_name , last_name FROM players WHERE hand = 'L' ORDER BY birth_date", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "players", "WHERE", "hand", "=", "'L", "'", "ORDER", "BY", "birth_date"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "value", "order", "by", "birth_date"], "question": "What are the full names of all left handed players, in order of birth date?", "question_toks": ["What", "are", "the", "full", "names", "of", "all", "left", "handed", "players", ",", "in", "order", "of", "birth", "date", "?"], "dataset_name": "spider", "guid": 1424}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the id and location of circuits that belong to France or Belgium?", "sql": "SELECT circuitid, location FROM circuits WHERE country = 'France' OR country = 'Belgium';", "example": {"db_id": "formula_1", "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"", "query_toks": ["SELECT", "circuitid", ",", "LOCATION", "FROM", "circuits", "WHERE", "country", "=", "``", "France", "''", "OR", "country", "=", "``", "Belgium", "''"], "query_toks_no_value": ["select", "circuitid", ",", "location", "from", "circuits", "where", "country", "=", "value", "or", "country", "=", "value"], "question": "Find the id and location of circuits that belong to France or Belgium?", "question_toks": ["Find", "the", "id", "and", "location", "of", "circuits", "that", "belong", "to", "France", "or", "Belgium", "?"], "dataset_name": "spider", "guid": 1425}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?", "sql": "SELECT DISTINCT T1.forename , T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "query_toks": ["SELECT", "DISTINCT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.milliseconds", "<", "93000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "milliseconds", "<", "value"], "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?", "question_toks": ["List", "the", "forename", "and", "surname", "of", "all", "distinct", "drivers", "who", "once", "had", "laptime", "less", "than", "93000", "milliseconds", "?"], "dataset_name": "spider", "guid": 1426}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which clubs have one or more members whose advisor is \"1121\"?", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.advisor  =  1121", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.advisor", "=", "1121"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "advisor", "=", "value"], "question": "Which clubs have one or more members whose advisor is \"1121\"?", "question_toks": ["Which", "clubs", "have", "one", "or", "more", "members", "whose", "advisor", "is", "``", "1121", "''", "?"], "dataset_name": "spider", "guid": 1427}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the average training hours of all players?", "sql": "SELECT AVG(HS) FROM Player", "example": {"db_id": "soccer_2", "query": "SELECT avg(HS) FROM Player", "query_toks": ["SELECT", "avg", "(", "HS", ")", "FROM", "Player"], "query_toks_no_value": ["select", "avg", "(", "hs", ")", "from", "player"], "question": "What is the average training hours of all players?", "question_toks": ["What", "is", "the", "average", "training", "hours", "of", "all", "players", "?"], "dataset_name": "spider", "guid": 1428}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of stadiums that some Australian swimmers have been to.", "sql": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia'", "example": {"db_id": "swimming", "query": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'", "query_toks": ["SELECT", "t4.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "JOIN", "event", "AS", "t3", "ON", "t2.event_id", "=", "t3.id", "JOIN", "stadium", "AS", "t4", "ON", "t4.id", "=", "t3.stadium_id", "WHERE", "t1.nationality", "=", "'Australia", "'"], "query_toks_no_value": ["select", "t4", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "join", "event", "as", "t3", "on", "t2", ".", "event_id", "=", "t3", ".", "id", "join", "stadium", "as", "t4", "on", "t4", ".", "id", "=", "t3", ".", "stadium_id", "where", "t1", ".", "nationality", "=", "value"], "question": "Find the names of stadiums that some Australian swimmers have been to.", "question_toks": ["Find", "the", "names", "of", "stadiums", "that", "some", "Australian", "swimmers", "have", "been", "to", "."], "dataset_name": "spider", "guid": 1429}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What college has a student who successfully made the team in the role of a goalie?", "sql": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'", "query_toks": ["SELECT", "cName", "FROM", "tryout", "WHERE", "decision", "=", "'yes", "'", "AND", "pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "cname", "from", "tryout", "where", "decision", "=", "value", "and", "ppos", "=", "value"], "question": "What college has a student who successfully made the team in the role of a goalie?", "question_toks": ["What", "college", "has", "a", "student", "who", "successfully", "made", "the", "team", "in", "the", "role", "of", "a", "goalie", "?"], "dataset_name": "spider", "guid": 1430}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What is the position that is most common among players in match seasons?", "sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "match_season", "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "POSITION", "FROM", "match_season", "GROUP", "BY", "POSITION", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "position", "from", "match_season", "group", "by", "position", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the position that is most common among players in match seasons?", "question_toks": ["What", "is", "the", "position", "that", "is", "most", "common", "among", "players", "in", "match", "seasons", "?"], "dataset_name": "spider", "guid": 1431}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.", "sql": "SELECT t3.fname , t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\" AND t3.sex = \"F\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.sex", "=", "``", "F", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "sex", "=", "value"], "question": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.", "question_toks": ["Find", "all", "the", "female", "members", "of", "club", "``", "Bootup", "Baltimore", "''", ".", "Show", "the", "first", "name", "and", "last", "name", "."], "dataset_name": "spider", "guid": 1432}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | How many gold medals has the club with the most coaches won?", "sql": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "riding_club", "query": "SELECT T1.club_id ,  T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id  =  T2.club_id GROUP BY T1.club_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.club_id", ",", "T1.gold", "FROM", "match_result", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.club_id", "=", "T2.club_id", "GROUP", "BY", "T1.club_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "club_id", ",", "t1", ".", "gold", "from", "match_result", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id", "group", "by", "t1", ".", "club_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "How many gold medals has the club with the most coaches won?", "question_toks": ["How", "many", "gold", "medals", "has", "the", "club", "with", "the", "most", "coaches", "won", "?"], "dataset_name": "spider", "guid": 1433}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?", "sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "example": {"db_id": "race_track", "query": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "query_toks": ["SELECT", "LOCATION", "FROM", "track", "WHERE", "seating", ">", "90000", "INTERSECT", "SELECT", "LOCATION", "FROM", "track", "WHERE", "seating", "<", "70000"], "query_toks_no_value": ["select", "location", "from", "track", "where", "seating", ">", "value", "intersect", "select", "location", "from", "track", "where", "seating", "<", "value"], "question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?", "question_toks": ["What", "are", "the", "locations", "that", "have", "both", "tracks", "with", "more", "than", "90000", "seats", ",", "and", "tracks", "with", "fewer", "than", "70000", "seats", "?"], "dataset_name": "spider", "guid": 1434}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the average ages of losers and winners across matches?", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "query_toks": ["SELECT", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "FROM", "matches"], "query_toks_no_value": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches"], "question": "What are the average ages of losers and winners across matches?", "question_toks": ["What", "are", "the", "average", "ages", "of", "losers", "and", "winners", "across", "matches", "?"], "dataset_name": "spider", "guid": 1435}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Who are the players from Indonesia?", "sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"", "example": {"db_id": "match_season", "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"", "query_toks": ["SELECT", "T2.Player", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T1.Country_name", "=", "``", "Indonesia", "''"], "query_toks_no_value": ["select", "t2", ".", "player", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t1", ".", "country_name", "=", "value"], "question": "Who are the players from Indonesia?", "question_toks": ["Who", "are", "the", "players", "from", "Indonesia", "?"], "dataset_name": "spider", "guid": 1436}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | What is the name of the event that happened in the most recent year?", "sql": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1", "example": {"db_id": "swimming", "query": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "event", "ORDER", "BY", "YEAR", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "event", "order", "by", "year", "desc", "limit", "value"], "question": "What is the name of the event that happened in the most recent year?", "question_toks": ["What", "is", "the", "name", "of", "the", "event", "that", "happened", "in", "the", "most", "recent", "year", "?"], "dataset_name": "spider", "guid": 1437}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?", "sql": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "example": {"db_id": "bike_1", "query": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80", "query_toks": ["SELECT", "date", ",", "zip_code", "FROM", "weather", "WHERE", "max_temperature_f", ">", "=", "80"], "query_toks_no_value": ["select", "date", ",", "zip_code", "from", "weather", "where", "max_temperature_f", ">", "=", "value"], "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?", "question_toks": ["What", "zip", "codes", "have", "a", "station", "with", "a", "max", "temperature", "greater", "than", "or", "equal", "to", "80", "and", "when", "did", "it", "reach", "that", "temperature", "?"], "dataset_name": "spider", "guid": 1438}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the most common type of competition.", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Competition_type", "FROM", "competition", "GROUP", "BY", "Competition_type", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "competition_type", "from", "competition", "group", "by", "competition_type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the most common type of competition.", "question_toks": ["List", "the", "most", "common", "type", "of", "competition", "."], "dataset_name": "spider", "guid": 1439}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the max, average and min training hours of all players.", "sql": "SELECT avg(HS) , max(HS) , min(HS) FROM Player", "example": {"db_id": "soccer_2", "query": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player", "query_toks": ["SELECT", "avg", "(", "HS", ")", ",", "max", "(", "HS", ")", ",", "min", "(", "HS", ")", "FROM", "Player"], "query_toks_no_value": ["select", "avg", "(", "hs", ")", ",", "max", "(", "hs", ")", ",", "min", "(", "hs", ")", "from", "player"], "question": "Find the max, average and min training hours of all players.", "question_toks": ["Find", "the", "max", ",", "average", "and", "min", "training", "hours", "of", "all", "players", "."], "dataset_name": "spider", "guid": 1440}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | find the number of players whose points are lower than 30 in each position.", "sql": "SELECT count(*) , POSITION FROM player WHERE points < 30 GROUP BY POSITION", "example": {"db_id": "sports_competition", "query": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "POSITION", "FROM", "player", "WHERE", "points", "<", "30", "GROUP", "BY", "POSITION"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "position", "from", "player", "where", "points", "<", "value", "group", "by", "position"], "question": "find the number of players whose points are lower than 30 in each position.", "question_toks": ["find", "the", "number", "of", "players", "whose", "points", "are", "lower", "than", "30", "in", "each", "position", "."], "dataset_name": "spider", "guid": 1441}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | How many distinct official languages are there among countries of players whose positions are defenders.", "sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.Official_native_language", ")", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.Position", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "official_native_language", ")", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "position", "=", "value"], "question": "How many distinct official languages are there among countries of players whose positions are defenders.", "question_toks": ["How", "many", "distinct", "official", "languages", "are", "there", "among", "countries", "of", "players", "whose", "positions", "are", "defenders", "."], "dataset_name": "spider", "guid": 1442}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the total number of tours for each ranking date.", "sql": "SELECT sum(tours) , ranking_date FROM rankings GROUP BY ranking_date", "example": {"db_id": "wta_1", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "query_toks": ["SELECT", "sum", "(", "tours", ")", ",", "ranking_date", "FROM", "rankings", "GROUP", "BY", "ranking_date"], "query_toks_no_value": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date"], "question": "Find the total number of tours for each ranking date.", "question_toks": ["Find", "the", "total", "number", "of", "tours", "for", "each", "ranking", "date", "."], "dataset_name": "spider", "guid": 1443}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average latitude and longitude in San Jose?", "sql": "SELECT avg(lat) , avg(long) FROM station WHERE city = \"San Jose\"", "example": {"db_id": "bike_1", "query": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"", "query_toks": ["SELECT", "avg", "(", "lat", ")", ",", "avg", "(", "long", ")", "FROM", "station", "WHERE", "city", "=", "``", "San", "Jose", "''"], "query_toks_no_value": ["select", "avg", "(", "lat", ")", ",", "avg", "(", "long", ")", "from", "station", "where", "city", "=", "value"], "question": "What is the average latitude and longitude in San Jose?", "question_toks": ["What", "is", "the", "average", "latitude", "and", "longitude", "in", "San", "Jose", "?"], "dataset_name": "spider", "guid": 1444}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all colleges with a larger enrollment than the largest college in Florida?", "sql": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM college WHERE enr  >  (SELECT max(enr) FROM college WHERE state  =  'FL')", "query_toks": ["SELECT", "cName", "FROM", "college", "WHERE", "enr", ">", "(", "SELECT", "max", "(", "enr", ")", "FROM", "college", "WHERE", "state", "=", "'FL", "'", ")"], "query_toks_no_value": ["select", "cname", "from", "college", "where", "enr", ">", "(", "select", "max", "(", "enr", ")", "from", "college", "where", "state", "=", "value", ")"], "question": "What are the names of all colleges with a larger enrollment than the largest college in Florida?", "question_toks": ["What", "are", "the", "names", "of", "all", "colleges", "with", "a", "larger", "enrollment", "than", "the", "largest", "college", "in", "Florida", "?"], "dataset_name": "spider", "guid": 1445}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the mean longitude for all stations that have never had more than 10 bikes available?", "sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "example": {"db_id": "bike_1", "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "query_toks": ["SELECT", "avg", "(", "long", ")", "FROM", "station", "WHERE", "id", "NOT", "IN", "(", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "max", "(", "bikes_available", ")", ">", "10", ")"], "query_toks_no_value": ["select", "avg", "(", "long", ")", "from", "station", "where", "id", "not", "in", "(", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "max", "(", "bikes_available", ")", ">", "value", ")"], "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?", "question_toks": ["What", "is", "the", "mean", "longitude", "for", "all", "stations", "that", "have", "never", "had", "more", "than", "10", "bikes", "available", "?"], "dataset_name": "spider", "guid": 1446}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the unique names of races that held after 2000 and the circuits were in Spain?", "sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "races", "AS", "T1", "JOIN", "circuits", "AS", "T2", "ON", "T1.circuitid", "=", "T2.circuitid", "WHERE", "T2.country", "=", "``", "Spain", "''", "AND", "T1.year", ">", "2000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "races", "as", "t1", "join", "circuits", "as", "t2", "on", "t1", ".", "circuitid", "=", "t2", ".", "circuitid", "where", "t2", ".", "country", "=", "value", "and", "t1", ".", "year", ">", "value"], "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?", "question_toks": ["What", "are", "the", "unique", "names", "of", "races", "that", "held", "after", "2000", "and", "the", "circuits", "were", "in", "Spain", "?"], "dataset_name": "spider", "guid": 1447}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of mountains in ascending alphabetical order?", "sql": "SELECT Name FROM mountain ORDER BY Name ASC", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "mountain", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "mountain", "order", "by", "name", "asc"], "question": "What are the names of mountains in ascending alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "mountains", "in", "ascending", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1448}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the names of the wrestlers, ordered descending by days held?", "sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "ORDER", "BY", "Days_held", "DESC"], "query_toks_no_value": ["select", "name", "from", "wrestler", "order", "by", "days_held", "desc"], "question": "What are the names of the wrestlers, ordered descending by days held?", "question_toks": ["What", "are", "the", "names", "of", "the", "wrestlers", ",", "ordered", "descending", "by", "days", "held", "?"], "dataset_name": "spider", "guid": 1449}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the three colleges from which the most players are from?", "sql": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "College", "FROM", "match_season", "GROUP", "BY", "College", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "college", "from", "match_season", "group", "by", "college", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the three colleges from which the most players are from?", "question_toks": ["What", "are", "the", "three", "colleges", "from", "which", "the", "most", "players", "are", "from", "?"], "dataset_name": "spider", "guid": 1450}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of countains that no climber has climbed?", "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "query_toks": ["SELECT", "Name", "FROM", "mountain", "WHERE", "Mountain_ID", "NOT", "IN", "(", "SELECT", "Mountain_ID", "FROM", "climber", ")"], "query_toks_no_value": ["select", "name", "from", "mountain", "where", "mountain_id", "not", "in", "(", "select", "mountain_id", "from", "climber", ")"], "question": "What are the names of countains that no climber has climbed?", "question_toks": ["What", "are", "the", "names", "of", "countains", "that", "no", "climber", "has", "climbed", "?"], "dataset_name": "spider", "guid": 1451}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the name of track and the number of races in each track.", "sql": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "example": {"db_id": "race_track", "query": "SELECT T2.name ,  count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "GROUP", "BY", "T1.track_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "group", "by", "t1", ".", "track_id"], "question": "Show the name of track and the number of races in each track.", "question_toks": ["Show", "the", "name", "of", "track", "and", "the", "number", "of", "races", "in", "each", "track", "."], "dataset_name": "spider", "guid": 1452}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the names of wrestlers and the elimination moves?", "sql": "SELECT T2.Name , T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID", "example": {"db_id": "wrestler", "query": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID", "query_toks": ["SELECT", "T2.Name", ",", "T1.Elimination_Move", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "elimination_move", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id"], "question": "What are the names of wrestlers and the elimination moves?", "question_toks": ["What", "are", "the", "names", "of", "wrestlers", "and", "the", "elimination", "moves", "?"], "dataset_name": "spider", "guid": 1453}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What is the number of distinct teams that suffer elimination?", "sql": "SELECT COUNT(DISTINCT team) FROM elimination", "example": {"db_id": "wrestler", "query": "SELECT COUNT (DISTINCT team) FROM elimination", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "team", ")", "FROM", "elimination"], "query_toks_no_value": ["select", "count", "(", "distinct", "team", ")", "from", "elimination"], "question": "What is the number of distinct teams that suffer elimination?", "question_toks": ["What", "is", "the", "number", "of", "distinct", "teams", "that", "suffer", "elimination", "?"], "dataset_name": "spider", "guid": 1454}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the name of all the clubs at \"AKW\".", "sql": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"", "example": {"db_id": "club_1", "query": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"", "query_toks": ["SELECT", "clubname", "FROM", "club", "WHERE", "clublocation", "=", "``", "AKW", "''"], "query_toks_no_value": ["select", "clubname", "from", "club", "where", "clublocation", "=", "value"], "question": "Find the name of all the clubs at \"AKW\".", "question_toks": ["Find", "the", "name", "of", "all", "the", "clubs", "at", "``", "AKW", "''", "."], "dataset_name": "spider", "guid": 1455}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the number of players who have points less than 30 for each position?", "sql": "SELECT count(*) , POSITION FROM player WHERE points < 30 GROUP BY POSITION", "example": {"db_id": "sports_competition", "query": "SELECT count(*) ,  POSITION FROM player WHERE points  <  30 GROUP BY POSITION", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "POSITION", "FROM", "player", "WHERE", "points", "<", "30", "GROUP", "BY", "POSITION"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "position", "from", "player", "where", "points", "<", "value", "group", "by", "position"], "question": "What is the number of players who have points less than 30 for each position?", "question_toks": ["What", "is", "the", "number", "of", "players", "who", "have", "points", "less", "than", "30", "for", "each", "position", "?"], "dataset_name": "spider", "guid": 1456}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | List the distinct ranges of the mountains with the top 3 prominence.", "sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "example": {"db_id": "climbing", "query": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "query_toks": ["SELECT", "DISTINCT", "Range", "FROM", "mountain", "ORDER", "BY", "Prominence", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "distinct", "range", "from", "mountain", "order", "by", "prominence", "desc", "limit", "value"], "question": "List the distinct ranges of the mountains with the top 3 prominence.", "question_toks": ["List", "the", "distinct", "ranges", "of", "the", "mountains", "with", "the", "top", "3", "prominence", "."], "dataset_name": "spider", "guid": 1457}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Return the different classes of races.", "sql": "SELECT DISTINCT CLASS FROM race", "example": {"db_id": "race_track", "query": "SELECT DISTINCT CLASS FROM race", "query_toks": ["SELECT", "DISTINCT", "CLASS", "FROM", "race"], "query_toks_no_value": ["select", "distinct", "class", "from", "race"], "question": "Return the different classes of races.", "question_toks": ["Return", "the", "different", "classes", "of", "races", "."], "dataset_name": "spider", "guid": 1458}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the states where have some college students in tryout.", "sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName", "query_toks": ["SELECT", "DISTINCT", "state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName"], "query_toks_no_value": ["select", "distinct", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname"], "question": "Find the states where have some college students in tryout.", "question_toks": ["Find", "the", "states", "where", "have", "some", "college", "students", "in", "tryout", "."], "dataset_name": "spider", "guid": 1459}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all schools that have students trying out for the position of goal and 'mid'-field.", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'", "query_toks": ["SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'", "INTERSECT", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'mid", "'"], "query_toks_no_value": ["select", "cname", "from", "tryout", "where", "ppos", "=", "value", "intersect", "select", "cname", "from", "tryout", "where", "ppos", "=", "value"], "question": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.", "question_toks": ["What", "are", "the", "names", "of", "all", "schools", "that", "have", "students", "trying", "out", "for", "the", "position", "of", "goal", "and", "'mid'-field", "."], "dataset_name": "spider", "guid": 1460}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the total points of the gymnast with the lowest age.", "sql": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "example": {"db_id": "gymnast", "query": "SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Age ASC LIMIT 1", "query_toks": ["SELECT", "T1.Total_Points", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Age", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "total_points", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "age", "asc", "limit", "value"], "question": "Return the total points of the gymnast with the lowest age.", "question_toks": ["Return", "the", "total", "points", "of", "the", "gymnast", "with", "the", "lowest", "age", "."], "dataset_name": "spider", "guid": 1461}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?", "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"", "query_toks": ["SELECT", "cName", "FROM", "College", "WHERE", "enr", "<", "13000", "AND", "state", "=", "``", "AZ", "''", "UNION", "SELECT", "cName", "FROM", "College", "WHERE", "enr", ">", "15000", "AND", "state", "=", "``", "LA", "''"], "query_toks_no_value": ["select", "cname", "from", "college", "where", "enr", "<", "value", "and", "state", "=", "value", "union", "select", "cname", "from", "college", "where", "enr", ">", "value", "and", "state", "=", "value"], "question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?", "question_toks": ["What", "are", "the", "names", "of", "colleges", "in", "LA", "that", "have", "more", "than", "15,000", "students", "and", "of", "colleges", "in", "AZ", "with", "less", "than", "13,000", "students", "?"], "dataset_name": "spider", "guid": 1462}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many different colleges do attend the tryout test?", "sql": "SELECT COUNT(DISTINCT cName) FROM tryout", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT cName) FROM tryout", "query_toks": ["SELECT", "count", "(", "DISTINCT", "cName", ")", "FROM", "tryout"], "query_toks_no_value": ["select", "count", "(", "distinct", "cname", ")", "from", "tryout"], "question": "How many different colleges do attend the tryout test?", "question_toks": ["How", "many", "different", "colleges", "do", "attend", "the", "tryout", "test", "?"], "dataset_name": "spider", "guid": 1463}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the players and the years played.", "sql": "SELECT Player , Years_Played FROM player", "example": {"db_id": "match_season", "query": "SELECT Player ,  Years_Played FROM player", "query_toks": ["SELECT", "Player", ",", "Years_Played", "FROM", "player"], "query_toks_no_value": ["select", "player", ",", "years_played", "from", "player"], "question": "Show the players and the years played.", "question_toks": ["Show", "the", "players", "and", "the", "years", "played", "."], "dataset_name": "spider", "guid": 1464}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100", "example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "HAVING", "avg", "(", "mean_humidity", ")", "<", "70", "INTERSECT", "SELECT", "zip_code", "FROM", "trip", "GROUP", "BY", "zip_code", "HAVING", "count", "(", "*", ")", ">", "=", "100"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "having", "avg", "(", "mean_humidity", ")", "<", "value", "intersect", "select", "zip_code", "from", "trip", "group", "by", "zip_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?", "question_toks": ["What", "are", "the", "zip", "codes", "that", "have", "an", "average", "mean", "humidity", "below", "70", "and", "had", "at", "least", "100", "trips", "come", "through", "there", "?"], "dataset_name": "spider", "guid": 1465}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | How many gymnasts are there?", "sql": "SELECT COUNT(*) FROM gymnast", "example": {"db_id": "gymnast", "query": "SELECT count(*) FROM gymnast", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "gymnast"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "gymnast"], "question": "How many gymnasts are there?", "question_toks": ["How", "many", "gymnasts", "are", "there", "?"], "dataset_name": "spider", "guid": 1466}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the latitude, longitude, and city of the station from which the trip with smallest duration started?", "sql": "SELECT T1.lat , T1.long , T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1", "query_toks": ["SELECT", "T1.lat", ",", "T1.long", ",", "T1.city", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id", "ORDER", "BY", "T2.duration", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "lat", ",", "t1", ".", "long", ",", "t1", ".", "city", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id", "order", "by", "t2", ".", "duration", "limit", "value"], "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?", "question_toks": ["What", "is", "the", "latitude", ",", "longitude", ",", "and", "city", "of", "the", "station", "from", "which", "the", "trip", "with", "smallest", "duration", "started", "?"], "dataset_name": "spider", "guid": 1467}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are distinct locations where tracks are located?", "sql": "SELECT DISTINCT location FROM track", "example": {"db_id": "race_track", "query": "SELECT DISTINCT LOCATION FROM track", "query_toks": ["SELECT", "DISTINCT", "LOCATION", "FROM", "track"], "query_toks_no_value": ["select", "distinct", "location", "from", "track"], "question": "What are distinct locations where tracks are located?", "question_toks": ["What", "are", "distinct", "locations", "where", "tracks", "are", "located", "?"], "dataset_name": "spider", "guid": 1468}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Count the number of countries.", "sql": "SELECT count(*) FROM country", "example": {"db_id": "match_season", "query": "SELECT count(*) FROM country", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "country"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country"], "question": "Count the number of countries.", "question_toks": ["Count", "the", "number", "of", "countries", "."], "dataset_name": "spider", "guid": 1469}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the names of members and names of colleges they go to.", "sql": "SELECT T2.Name, T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID", "example": {"db_id": "decoration_competition", "query": "SELECT T2.Name ,  T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID", "query_toks": ["SELECT", "T2.Name", ",", "T1.Name", "FROM", "college", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.College_ID", "=", "T2.College_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "name", "from", "college", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "college_id", "=", "t2", ".", "college_id"], "question": "Show the names of members and names of colleges they go to.", "question_toks": ["Show", "the", "names", "of", "members", "and", "names", "of", "colleges", "they", "go", "to", "."], "dataset_name": "spider", "guid": 1470}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | List the height and weight of people in descending order of height.", "sql": "SELECT Height ,  Weight FROM people ORDER BY Height DESC", "example": {"db_id": "body_builder", "query": "SELECT Height ,  Weight FROM people ORDER BY Height DESC", "query_toks": ["SELECT", "Height", ",", "Weight", "FROM", "people", "ORDER", "BY", "Height", "DESC"], "query_toks_no_value": ["select", "height", ",", "weight", "from", "people", "order", "by", "height", "desc"], "question": "List the height and weight of people in descending order of height.", "question_toks": ["List", "the", "height", "and", "weight", "of", "people", "in", "descending", "order", "of", "height", "."], "dataset_name": "spider", "guid": 1471}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids and names of all start stations that were the beginning of at least 200 trips?", "sql": "SELECT start_station_id , start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200", "example": {"db_id": "bike_1", "query": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200", "query_toks": ["SELECT", "start_station_id", ",", "start_station_name", "FROM", "trip", "GROUP", "BY", "start_station_name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "200"], "query_toks_no_value": ["select", "start_station_id", ",", "start_station_name", "from", "trip", "group", "by", "start_station_name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "all", "start", "stations", "that", "were", "the", "beginning", "of", "at", "least", "200", "trips", "?"], "dataset_name": "spider", "guid": 1472}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the names of all players that got more than the average number of points?", "sql": "SELECT name FROM player WHERE points > (SELECT AVG(points) FROM player)", "example": {"db_id": "sports_competition", "query": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "query_toks": ["SELECT", "name", "FROM", "player", "WHERE", "points", ">", "(", "SELECT", "avg", "(", "points", ")", "FROM", "player", ")"], "query_toks_no_value": ["select", "name", "from", "player", "where", "points", ">", "(", "select", "avg", "(", "points", ")", "from", "player", ")"], "question": "What are the names of all players that got more than the average number of points?", "question_toks": ["What", "are", "the", "names", "of", "all", "players", "that", "got", "more", "than", "the", "average", "number", "of", "points", "?"], "dataset_name": "spider", "guid": 1473}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the name of every college in alphabetical order that has more than 18000 students enrolled?", "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName", "query_toks": ["SELECT", "cName", "FROM", "College", "WHERE", "enr", ">", "18000", "ORDER", "BY", "cName"], "query_toks_no_value": ["select", "cname", "from", "college", "where", "enr", ">", "value", "order", "by", "cname"], "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?", "question_toks": ["What", "is", "the", "name", "of", "every", "college", "in", "alphabetical", "order", "that", "has", "more", "than", "18000", "students", "enrolled", "?"], "dataset_name": "spider", "guid": 1474}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Show names of people whose nationality is not \"Russia\".", "sql": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "example": {"db_id": "poker_player", "query": "SELECT Name FROM people WHERE Nationality != \"Russia\"", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "Nationality", "!", "=", "``", "Russia", "''"], "query_toks_no_value": ["select", "name", "from", "people", "where", "nationality", "!", "=", "value"], "question": "Show names of people whose nationality is not \"Russia\".", "question_toks": ["Show", "names", "of", "people", "whose", "nationality", "is", "not", "``", "Russia", "''", "."], "dataset_name": "spider", "guid": 1475}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | List the name and residence for players whose occupation is not \"Researcher\".", "sql": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"", "example": {"db_id": "riding_club", "query": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"", "query_toks": ["SELECT", "Player_name", ",", "residence", "FROM", "player", "WHERE", "Occupation", "!", "=", "``", "Researcher", "''"], "query_toks_no_value": ["select", "player_name", ",", "residence", "from", "player", "where", "occupation", "!", "=", "value"], "question": "List the name and residence for players whose occupation is not \"Researcher\".", "question_toks": ["List", "the", "name", "and", "residence", "for", "players", "whose", "occupation", "is", "not", "``", "Researcher", "''", "."], "dataset_name": "spider", "guid": 1476}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the states where have the colleges whose enrollments are less than the largest size.", "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "query_toks": ["SELECT", "DISTINCT", "state", "FROM", "college", "WHERE", "enr", "<", "(", "SELECT", "max", "(", "enr", ")", "FROM", "college", ")"], "query_toks_no_value": ["select", "distinct", "state", "from", "college", "where", "enr", "<", "(", "select", "max", "(", "enr", ")", "from", "college", ")"], "question": "Find the states where have the colleges whose enrollments are less than the largest size.", "question_toks": ["Find", "the", "states", "where", "have", "the", "colleges", "whose", "enrollments", "are", "less", "than", "the", "largest", "size", "."], "dataset_name": "spider", "guid": 1477}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many stations does Mountain View city has?", "sql": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "example": {"db_id": "bike_1", "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "station", "WHERE", "city", "=", "``", "Mountain", "View", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "station", "where", "city", "=", "value"], "question": "How many stations does Mountain View city has?", "question_toks": ["How", "many", "stations", "does", "Mountain", "View", "city", "has", "?"], "dataset_name": "spider", "guid": 1478}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the states where have some college students in tryout and their decisions are yes.", "sql": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "DISTINCT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "decision", "=", "value"], "question": "Find the states where have some college students in tryout and their decisions are yes.", "question_toks": ["Find", "the", "states", "where", "have", "some", "college", "students", "in", "tryout", "and", "their", "decisions", "are", "yes", "."], "dataset_name": "spider", "guid": 1479}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many different colleges are there?", "sql": "SELECT count(*) FROM College", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM College", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "College"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "college"], "question": "How many different colleges are there?", "question_toks": ["How", "many", "different", "colleges", "are", "there", "?"], "dataset_name": "spider", "guid": 1480}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the positions with both players having more than 20 points and less than 10 points.", "sql": "SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10", "example": {"db_id": "sports_competition", "query": "SELECT POSITION FROM player WHERE Points  >  20 INTERSECT SELECT POSITION FROM player WHERE Points  <  10", "query_toks": ["SELECT", "POSITION", "FROM", "player", "WHERE", "Points", ">", "20", "INTERSECT", "SELECT", "POSITION", "FROM", "player", "WHERE", "Points", "<", "10"], "query_toks_no_value": ["select", "position", "from", "player", "where", "points", ">", "value", "intersect", "select", "position", "from", "player", "where", "points", "<", "value"], "question": "What are the positions with both players having more than 20 points and less than 10 points.", "question_toks": ["What", "are", "the", "positions", "with", "both", "players", "having", "more", "than", "20", "points", "and", "less", "than", "10", "points", "."], "dataset_name": "spider", "guid": 1481}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | how many different positions are there?", "sql": "SELECT COUNT(DISTINCT position) FROM player", "example": {"db_id": "sports_competition", "query": "SELECT count(DISTINCT POSITION) FROM player", "query_toks": ["SELECT", "count", "(", "DISTINCT", "POSITION", ")", "FROM", "player"], "query_toks_no_value": ["select", "count", "(", "distinct", "position", ")", "from", "player"], "question": "how many different positions are there?", "question_toks": ["how", "many", "different", "positions", "are", "there", "?"], "dataset_name": "spider", "guid": 1482}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the maximum final tables made across all poker players who have earnings below 200000.", "sql": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "example": {"db_id": "poker_player", "query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000", "query_toks": ["SELECT", "max", "(", "Final_Table_Made", ")", "FROM", "poker_player", "WHERE", "Earnings", "<", "200000"], "query_toks_no_value": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "value"], "question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "question_toks": ["Return", "the", "maximum", "final", "tables", "made", "across", "all", "poker", "players", "who", "have", "earnings", "below", "200000", "."], "dataset_name": "spider", "guid": 1483}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Which position is most popular among players in the tryout?", "sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "soccer_2", "query": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "pPos", "FROM", "tryout", "GROUP", "BY", "pPos", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "ppos", "from", "tryout", "group", "by", "ppos", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which position is most popular among players in the tryout?", "question_toks": ["Which", "position", "is", "most", "popular", "among", "players", "in", "the", "tryout", "?"], "dataset_name": "spider", "guid": 1484}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name of the tryout players who are from the college with largest size.", "sql": "SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)", "example": {"db_id": "soccer_2", "query": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)", "query_toks": ["SELECT", "T2.pName", "FROM", "tryout", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T1.cName", "=", "(", "SELECT", "cName", "FROM", "college", "ORDER", "BY", "enr", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t2", ".", "pname", "from", "tryout", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t1", ".", "cname", "=", "(", "select", "cname", "from", "college", "order", "by", "enr", "desc", "limit", "value", ")"], "question": "Find the name of the tryout players who are from the college with largest size.", "question_toks": ["Find", "the", "name", "of", "the", "tryout", "players", "who", "are", "from", "the", "college", "with", "largest", "size", "."], "dataset_name": "spider", "guid": 1485}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = \"Bootup Baltimore\"", "example": {"db_id": "club_1", "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\"", "query_toks": ["SELECT", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''"], "query_toks_no_value": ["select", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Who are the members of the club named \"Bootup Baltimore\"? Give me their last names.", "question_toks": ["Who", "are", "the", "members", "of", "the", "club", "named", "``", "Bootup", "Baltimore", "''", "?", "Give", "me", "their", "last", "names", "."], "dataset_name": "spider", "guid": 1486}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the number of universities that have over a 20000 enrollment size for each affiliation type.", "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "example": {"db_id": "university_basketball", "query": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "affiliation", "FROM", "university", "WHERE", "enrollment", ">", "20000", "GROUP", "BY", "affiliation"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "affiliation", "from", "university", "where", "enrollment", ">", "value", "group", "by", "affiliation"], "question": "Find the number of universities that have over a 20000 enrollment size for each affiliation type.", "question_toks": ["Find", "the", "number", "of", "universities", "that", "have", "over", "a", "20000", "enrollment", "size", "for", "each", "affiliation", "type", "."], "dataset_name": "spider", "guid": 1487}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | List the number of all matches who played in years of 2013 or 2016.", "sql": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "example": {"db_id": "wta_1", "query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "matches", "WHERE", "YEAR", "=", "2013", "OR", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "value", "or", "year", "=", "value"], "question": "List the number of all matches who played in years of 2013 or 2016.", "question_toks": ["List", "the", "number", "of", "all", "matches", "who", "played", "in", "years", "of", "2013", "or", "2016", "."], "dataset_name": "spider", "guid": 1488}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | How many events are there?", "sql": "SELECT count(*) FROM event", "example": {"db_id": "swimming", "query": "SELECT count(*) FROM event", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "event"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "event"], "question": "How many events are there?", "question_toks": ["How", "many", "events", "are", "there", "?"], "dataset_name": "spider", "guid": 1489}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | List the names of players in ascending order of votes.", "sql": "SELECT Player_name FROM player ORDER BY Votes ASC", "example": {"db_id": "riding_club", "query": "SELECT Player_name FROM player ORDER BY Votes ASC", "query_toks": ["SELECT", "Player_name", "FROM", "player", "ORDER", "BY", "Votes", "ASC"], "query_toks_no_value": ["select", "player_name", "from", "player", "order", "by", "votes", "asc"], "question": "List the names of players in ascending order of votes.", "question_toks": ["List", "the", "names", "of", "players", "in", "ascending", "order", "of", "votes", "."], "dataset_name": "spider", "guid": 1490}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the names of gymnasts whose hometown is not \"Santo Domingo\"?", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"", "example": {"db_id": "gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T2.Hometown != \"Santo Domingo\"", "query_toks": ["SELECT", "T2.Name", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "WHERE", "T2.Hometown", "!", "=", "``", "Santo", "Domingo", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "where", "t2", ".", "hometown", "!", "=", "value"], "question": "What are the names of gymnasts whose hometown is not \"Santo Domingo\"?", "question_toks": ["What", "are", "the", "names", "of", "gymnasts", "whose", "hometown", "is", "not", "``", "Santo", "Domingo", "''", "?"], "dataset_name": "spider", "guid": 1491}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the names of body builders in descending order of total scores?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC", "example": {"db_id": "body_builder", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Total DESC", "query_toks": ["SELECT", "T2.Name", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Total", "DESC"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "total", "desc"], "question": "What are the names of body builders in descending order of total scores?", "question_toks": ["What", "are", "the", "names", "of", "body", "builders", "in", "descending", "order", "of", "total", "scores", "?"], "dataset_name": "spider", "guid": 1492}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the first names and birth dates of players from the USA?", "sql": "SELECT first_name , birth_date FROM players WHERE country_code = 'USA'", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'", "query_toks": ["SELECT", "first_name", ",", "birth_date", "FROM", "players", "WHERE", "country_code", "=", "'USA", "'"], "query_toks_no_value": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "value"], "question": "What are the first names and birth dates of players from the USA?", "question_toks": ["What", "are", "the", "first", "names", "and", "birth", "dates", "of", "players", "from", "the", "USA", "?"], "dataset_name": "spider", "guid": 1493}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the country name and capital of all countries.", "sql": "SELECT Country_name, Capital FROM country", "example": {"db_id": "match_season", "query": "SELECT Country_name ,  Capital FROM country", "query_toks": ["SELECT", "Country_name", ",", "Capital", "FROM", "country"], "query_toks_no_value": ["select", "country_name", ",", "capital", "from", "country"], "question": "Show the country name and capital of all countries.", "question_toks": ["Show", "the", "country", "name", "and", "capital", "of", "all", "countries", "."], "dataset_name": "spider", "guid": 1494}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Give the different hometowns of gymnasts that have a total point score of above 57.5.", "sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5", "example": {"db_id": "gymnast", "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "query_toks": ["SELECT", "DISTINCT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "WHERE", "T1.Total_Points", ">", "57.5"], "query_toks_no_value": ["select", "distinct", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "where", "t1", ".", "total_points", ">", "value"], "question": "Give the different hometowns of gymnasts that have a total point score of above 57.5.", "question_toks": ["Give", "the", "different", "hometowns", "of", "gymnasts", "that", "have", "a", "total", "point", "score", "of", "above", "57.5", "."], "dataset_name": "spider", "guid": 1495}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the average enrollment size of the universities that are founded before 1850?", "sql": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "example": {"db_id": "university_basketball", "query": "SELECT avg(enrollment) FROM university WHERE founded  <  1850", "query_toks": ["SELECT", "avg", "(", "enrollment", ")", "FROM", "university", "WHERE", "founded", "<", "1850"], "query_toks_no_value": ["select", "avg", "(", "enrollment", ")", "from", "university", "where", "founded", "<", "value"], "question": "What are the average enrollment size of the universities that are founded before 1850?", "question_toks": ["What", "are", "the", "average", "enrollment", "size", "of", "the", "universities", "that", "are", "founded", "before", "1850", "?"], "dataset_name": "spider", "guid": 1496}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the name and rank points of the winner who won the most times.", "sql": "SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", ",", "winner_rank_points", "FROM", "matches", "GROUP", "BY", "winner_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name and rank points of the winner who won the most times.", "question_toks": ["Find", "the", "name", "and", "rank", "points", "of", "the", "winner", "who", "won", "the", "most", "times", "."], "dataset_name": "spider", "guid": 1497}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*) >= 100", "example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "HAVING", "avg", "(", "mean_humidity", ")", "<", "70", "INTERSECT", "SELECT", "zip_code", "FROM", "trip", "GROUP", "BY", "zip_code", "HAVING", "count", "(", "*", ")", ">", "=", "100"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "having", "avg", "(", "mean_humidity", ")", "<", "value", "intersect", "select", "zip_code", "from", "trip", "group", "by", "zip_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.", "question_toks": ["Give", "me", "the", "zip", "code", "where", "the", "average", "mean", "humidity", "is", "below", "70", "and", "at", "least", "100", "trips", "took", "place", "."], "dataset_name": "spider", "guid": 1498}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What is the minimum snatch score?", "sql": "SELECT min(snatch) FROM body_builder", "example": {"db_id": "body_builder", "query": "SELECT min(snatch) FROM body_builder", "query_toks": ["SELECT", "min", "(", "snatch", ")", "FROM", "body_builder"], "query_toks_no_value": ["select", "min", "(", "snatch", ")", "from", "body_builder"], "question": "What is the minimum snatch score?", "question_toks": ["What", "is", "the", "minimum", "snatch", "score", "?"], "dataset_name": "spider", "guid": 1499}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the average fastest lap speed for the Monaco Grand Prix in 2008?", "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "query_toks": ["SELECT", "avg", "(", "T2.fastestlapspeed", ")", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", "=", "2008", "AND", "T1.name", "=", "``", "Monaco", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "fastestlapspeed", ")", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?", "question_toks": ["What", "is", "the", "average", "fastest", "lap", "speed", "for", "the", "Monaco", "Grand", "Prix", "in", "2008", "?"], "dataset_name": "spider", "guid": 1500}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the years of opening for tracks with seating between 4000 and 5000?", "sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "example": {"db_id": "race_track", "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "query_toks": ["SELECT", "year_opened", "FROM", "track", "WHERE", "seating", "BETWEEN", "4000", "AND", "5000"], "query_toks_no_value": ["select", "year_opened", "from", "track", "where", "seating", "between", "value", "and", "value"], "question": "What are the years of opening for tracks with seating between 4000 and 5000?", "question_toks": ["What", "are", "the", "years", "of", "opening", "for", "tracks", "with", "seating", "between", "4000", "and", "5000", "?"], "dataset_name": "spider", "guid": 1501}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each trip, return its ending station's installation date.", "sql": "SELECT T1.id , T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id", "example": {"db_id": "bike_1", "query": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id", "query_toks": ["SELECT", "T1.id", ",", "T2.installation_date", "FROM", "trip", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.end_station_id", "=", "T2.id"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t2", ".", "installation_date", "from", "trip", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "end_station_id", "=", "t2", ".", "id"], "question": "For each trip, return its ending station's installation date.", "question_toks": ["For", "each", "trip", ",", "return", "its", "ending", "station", "'s", "installation", "date", "."], "dataset_name": "spider", "guid": 1502}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the hometown that is most common among gymnasts.", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "gymnast", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "GROUP", "BY", "T2.Hometown", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the hometown that is most common among gymnasts.", "question_toks": ["Return", "the", "hometown", "that", "is", "most", "common", "among", "gymnasts", "."], "dataset_name": "spider", "guid": 1503}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?", "sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"", "example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"", "query_toks": ["SELECT", "T1.name", ",", "T1.id", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "GROUP", "BY", "T2.station_id", "HAVING", "avg", "(", "T2.bikes_available", ")", ">", "14", "UNION", "SELECT", "name", ",", "id", "FROM", "station", "WHERE", "installation_date", "LIKE", "``", "12/", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "id", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "group", "by", "t2", ".", "station_id", "having", "avg", "(", "t2", ".", "bikes_available", ")", ">", "value", "union", "select", "name", ",", "id", "from", "station", "where", "installation_date", "like", "value"], "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "stations", "that", "had", "more", "than", "14", "bikes", "available", "on", "average", "or", "were", "installed", "in", "December", "?"], "dataset_name": "spider", "guid": 1504}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20", "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1", "AND", "T2.points", ">", "20"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value", "and", "t2", ".", "points", ">", "value"], "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?", "question_toks": ["Find", "all", "the", "forenames", "of", "distinct", "drivers", "who", "won", "in", "position", "1", "as", "driver", "standing", "and", "had", "more", "than", "20", "points", "?"], "dataset_name": "spider", "guid": 1505}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Give the names of poker players who have earnings above 300000.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Earnings", ">", "300000"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "earnings", ">", "value"], "question": "Give the names of poker players who have earnings above 300000.", "question_toks": ["Give", "the", "names", "of", "poker", "players", "who", "have", "earnings", "above", "300000", "."], "dataset_name": "spider", "guid": 1506}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What is the name of the wrestler with the fewest days held?", "sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "ORDER", "BY", "Days_held", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "wrestler", "order", "by", "days_held", "asc", "limit", "value"], "question": "What is the name of the wrestler with the fewest days held?", "question_toks": ["What", "is", "the", "name", "of", "the", "wrestler", "with", "the", "fewest", "days", "held", "?"], "dataset_name": "spider", "guid": 1507}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the total number of matches.", "sql": "SELECT count(*) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT count(*) FROM matches", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "matches"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "matches"], "question": "Find the total number of matches.", "question_toks": ["Find", "the", "total", "number", "of", "matches", "."], "dataset_name": "spider", "guid": 1508}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each city, list their names in decreasing order by their highest station latitude.", "sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "example": {"db_id": "bike_1", "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "query_toks": ["SELECT", "city", "FROM", "station", "GROUP", "BY", "city", "ORDER", "BY", "max", "(", "lat", ")", "DESC"], "query_toks_no_value": ["select", "city", "from", "station", "group", "by", "city", "order", "by", "max", "(", "lat", ")", "desc"], "question": "For each city, list their names in decreasing order by their highest station latitude.", "question_toks": ["For", "each", "city", ",", "list", "their", "names", "in", "decreasing", "order", "by", "their", "highest", "station", "latitude", "."], "dataset_name": "spider", "guid": 1509}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | List the names of wrestlers in descending order of days held.", "sql": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler ORDER BY Days_held DESC", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "ORDER", "BY", "Days_held", "DESC"], "query_toks_no_value": ["select", "name", "from", "wrestler", "order", "by", "days_held", "desc"], "question": "List the names of wrestlers in descending order of days held.", "question_toks": ["List", "the", "names", "of", "wrestlers", "in", "descending", "order", "of", "days", "held", "."], "dataset_name": "spider", "guid": 1510}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the id of the trip that has the shortest duration?", "sql": "SELECT id FROM trip ORDER BY duration LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT id FROM trip ORDER BY duration LIMIT 1", "query_toks": ["SELECT", "id", "FROM", "trip", "ORDER", "BY", "duration", "LIMIT", "1"], "query_toks_no_value": ["select", "id", "from", "trip", "order", "by", "duration", "limit", "value"], "question": "What is the id of the trip that has the shortest duration?", "question_toks": ["What", "is", "the", "id", "of", "the", "trip", "that", "has", "the", "shortest", "duration", "?"], "dataset_name": "spider", "guid": 1511}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | How many drivers participated in the race Australian Grand Prix held in 2009?", "sql": "SELECT COUNT(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009", "example": {"db_id": "formula_1", "query": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "results", "AS", "T1", "JOIN", "races", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T2.name", "=", "``", "Australian", "Grand", "Prix", "''", "AND", "YEAR", "=", "2009"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "results", "as", "t1", "join", "races", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t2", ".", "name", "=", "value", "and", "year", "=", "value"], "question": "How many drivers participated in the race Australian Grand Prix held in 2009?", "question_toks": ["How", "many", "drivers", "participated", "in", "the", "race", "Australian", "Grand", "Prix", "held", "in", "2009", "?"], "dataset_name": "spider", "guid": 1512}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?", "sql": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "example": {"db_id": "bike_1", "query": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)", "query_toks": ["SELECT", "date", ",", "zip_code", "FROM", "weather", "WHERE", "min_dew_point_f", "<", "(", "SELECT", "min", "(", "min_dew_point_f", ")", "FROM", "weather", "WHERE", "zip_code", "=", "94107", ")"], "query_toks_no_value": ["select", "date", ",", "zip_code", "from", "weather", "where", "min_dew_point_f", "<", "(", "select", "min", "(", "min_dew_point_f", ")", "from", "weather", "where", "zip_code", "=", "value", ")"], "question": "Which days had a minimum dew point smaller than any day in zip code 94107, and in which zip codes were those measurements taken?", "question_toks": ["Which", "days", "had", "a", "minimum", "dew", "point", "smaller", "than", "any", "day", "in", "zip", "code", "94107", ",", "and", "in", "which", "zip", "codes", "were", "those", "measurements", "taken", "?"], "dataset_name": "spider", "guid": 1513}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Tell me the location of the club \"Hopkins Student Enterprises\".", "sql": "SELECT clublocation FROM club WHERE clubname = \"Hopkins Student Enterprises\"", "example": {"db_id": "club_1", "query": "SELECT clublocation FROM club WHERE clubname  =  \"Hopkins Student Enterprises\"", "query_toks": ["SELECT", "clublocation", "FROM", "club", "WHERE", "clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''"], "query_toks_no_value": ["select", "clublocation", "from", "club", "where", "clubname", "=", "value"], "question": "Tell me the location of the club \"Hopkins Student Enterprises\".", "question_toks": ["Tell", "me", "the", "location", "of", "the", "club", "``", "Hopkins", "Student", "Enterprises", "''", "."], "dataset_name": "spider", "guid": 1514}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) , T1.name , T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2004 GROUP BY T1.name ORDER BY T1.year", "example": {"db_id": "formula_1", "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "query_toks": ["SELECT", "max", "(", "T2.fastestlapspeed", ")", ",", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", ">", "2014", "GROUP", "BY", "T1.name", "ORDER", "BY", "T1.year"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "fastestlapspeed", ")", ",", "t1", ".", "name", ",", "t1", ".", "year", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", ">", "value", "group", "by", "t1", ".", "name", "order", "by", "t1", ".", "year"], "question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?", "question_toks": ["What", "are", "the", "maximum", "fastest", "lap", "speed", "in", "races", "held", "after", "2004", "grouped", "by", "race", "name", "and", "ordered", "by", "year", "?"], "dataset_name": "spider", "guid": 1515}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average latitude and longitude of all starting stations for the trips?", "sql": "SELECT avg(T1.lat) , avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id", "example": {"db_id": "bike_1", "query": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id", "query_toks": ["SELECT", "avg", "(", "T1.lat", ")", ",", "avg", "(", "T1.long", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "lat", ")", ",", "avg", "(", "t1", ".", "long", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id"], "question": "What is the average latitude and longitude of all starting stations for the trips?", "question_toks": ["What", "is", "the", "average", "latitude", "and", "longitude", "of", "all", "starting", "stations", "for", "the", "trips", "?"], "dataset_name": "spider", "guid": 1516}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | How many people are there of each nationality?", "sql": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "example": {"db_id": "poker_player", "query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality", "query_toks": ["SELECT", "Nationality", ",", "COUNT", "(", "*", ")", "FROM", "people", "GROUP", "BY", "Nationality"], "query_toks_no_value": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality"], "question": "How many people are there of each nationality?", "question_toks": ["How", "many", "people", "are", "there", "of", "each", "nationality", "?"], "dataset_name": "spider", "guid": 1517}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each zip code, select all those that have an average mean visiblity below 10.", "sql": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "HAVING", "avg", "(", "mean_visibility_miles", ")", "<", "10"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "having", "avg", "(", "mean_visibility_miles", ")", "<", "value"], "question": "For each zip code, select all those that have an average mean visiblity below 10.", "question_toks": ["For", "each", "zip", "code", ",", "select", "all", "those", "that", "have", "an", "average", "mean", "visiblity", "below", "10", "."], "dataset_name": "spider", "guid": 1518}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | On which day has it neither been foggy nor rained in the zip code of 94107?", "sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "zip_code", "=", "94107", "AND", "EVENTS", "!", "=", "``", "Fog", "''", "AND", "EVENTS", "!", "=", "``", "Rain", "''"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "zip_code", "=", "value", "and", "events", "!", "=", "value", "and", "events", "!", "=", "value"], "question": "On which day has it neither been foggy nor rained in the zip code of 94107?", "question_toks": ["On", "which", "day", "has", "it", "neither", "been", "foggy", "nor", "rained", "in", "the", "zip", "code", "of", "94107", "?"], "dataset_name": "spider", "guid": 1519}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the names of clubs that do not have any players.", "sql": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)", "example": {"db_id": "sports_competition", "query": "SELECT name FROM CLub WHERE Club_ID NOT IN (SELECT Club_ID FROM player)", "query_toks": ["SELECT", "name", "FROM", "CLub", "WHERE", "Club_ID", "NOT", "IN", "(", "SELECT", "Club_ID", "FROM", "player", ")"], "query_toks_no_value": ["select", "name", "from", "club", "where", "club_id", "not", "in", "(", "select", "club_id", "from", "player", ")"], "question": "List the names of clubs that do not have any players.", "question_toks": ["List", "the", "names", "of", "clubs", "that", "do", "not", "have", "any", "players", "."], "dataset_name": "spider", "guid": 1520}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the race class and number of races in each class.", "sql": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "example": {"db_id": "race_track", "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "query_toks": ["SELECT", "CLASS", ",", "count", "(", "*", ")", "FROM", "race", "GROUP", "BY", "CLASS"], "query_toks_no_value": ["select", "class", ",", "count", "(", "*", ")", "from", "race", "group", "by", "class"], "question": "Show the race class and number of races in each class.", "question_toks": ["Show", "the", "race", "class", "and", "number", "of", "races", "in", "each", "class", "."], "dataset_name": "spider", "guid": 1521}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the average ranking for each player and their first name.", "sql": "SELECT avg(ranking) , T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name", "example": {"db_id": "wta_1", "query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "query_toks": ["SELECT", "avg", "(", "ranking", ")", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "GROUP", "BY", "T1.first_name"], "query_toks_no_value": ["select", "avg", "(", "ranking", ")", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "group", "by", "t1", ".", "first_name"], "question": "Find the average ranking for each player and their first name.", "question_toks": ["Find", "the", "average", "ranking", "for", "each", "player", "and", "their", "first", "name", "."], "dataset_name": "spider", "guid": 1522}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | How many tracks do we have?", "sql": "SELECT count(*) FROM track", "example": {"db_id": "race_track", "query": "SELECT count(*) FROM track", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "track"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "track"], "question": "How many tracks do we have?", "question_toks": ["How", "many", "tracks", "do", "we", "have", "?"], "dataset_name": "spider", "guid": 1523}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names and seatings for all tracks opened after 2000, ordered by seating?", "sql": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "example": {"db_id": "race_track", "query": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating", "query_toks": ["SELECT", "name", ",", "seating", "FROM", "track", "WHERE", "year_opened", ">", "2000", "ORDER", "BY", "seating"], "query_toks_no_value": ["select", "name", ",", "seating", "from", "track", "where", "year_opened", ">", "value", "order", "by", "seating"], "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?", "question_toks": ["What", "are", "the", "names", "and", "seatings", "for", "all", "tracks", "opened", "after", "2000", ",", "ordered", "by", "seating", "?"], "dataset_name": "spider", "guid": 1524}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the clean and jerk score of the body builder with the highest total score?", "sql": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1", "example": {"db_id": "body_builder", "query": "SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1", "query_toks": ["SELECT", "Clean_Jerk", "FROM", "body_builder", "ORDER", "BY", "Total", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "clean_jerk", "from", "body_builder", "order", "by", "total", "desc", "limit", "value"], "question": "What are the clean and jerk score of the body builder with the highest total score?", "question_toks": ["What", "are", "the", "clean", "and", "jerk", "score", "of", "the", "body", "builder", "with", "the", "highest", "total", "score", "?"], "dataset_name": "spider", "guid": 1525}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the name of the race held most recently?", "sql": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "races", "ORDER", "BY", "date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "races", "order", "by", "date", "desc", "limit", "value"], "question": "What is the name of the race held most recently?", "question_toks": ["What", "is", "the", "name", "of", "the", "race", "held", "most", "recently", "?"], "dataset_name": "spider", "guid": 1526}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id and last name of the driver who participated in the most races after 2010?", "sql": "SELECT T1.driverid , T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "WHERE", "T3.year", ">", "2010", "GROUP", "BY", "T1.driverid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "where", "t3", ".", "year", ">", "value", "group", "by", "t1", ".", "driverid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id and last name of the driver who participated in the most races after 2010?", "question_toks": ["What", "is", "the", "id", "and", "last", "name", "of", "the", "driver", "who", "participated", "in", "the", "most", "races", "after", "2010", "?"], "dataset_name": "spider", "guid": 1527}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is the team name and acc regular season score of the school that was founded for the longest time?", "sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "query_toks": ["SELECT", "t2.team_name", ",", "t2.ACC_Regular_Season", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "ORDER", "BY", "t1.founded", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "team_name", ",", "t2", ".", "acc_regular_season", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "order", "by", "t1", ".", "founded", "limit", "value"], "question": "What is the team name and acc regular season score of the school that was founded for the longest time?", "question_toks": ["What", "is", "the", "team", "name", "and", "acc", "regular", "season", "score", "of", "the", "school", "that", "was", "founded", "for", "the", "longest", "time", "?"], "dataset_name": "spider", "guid": 1528}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the distinct names of mountains climbed by climbers from country \"West Germany\".", "sql": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = \"West Germany\"", "example": {"db_id": "climbing", "query": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"", "query_toks": ["SELECT", "DISTINCT", "T2.Name", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID", "WHERE", "T1.Country", "=", "``", "West", "Germany", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id", "where", "t1", ".", "country", "=", "value"], "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".", "question_toks": ["Show", "the", "distinct", "names", "of", "mountains", "climbed", "by", "climbers", "from", "country", "``", "West", "Germany", "''", "."], "dataset_name": "spider", "guid": 1529}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | How many stadiums does each country have?", "sql": "SELECT country, COUNT(*) FROM stadium GROUP BY country", "example": {"db_id": "swimming", "query": "SELECT country ,  count(*) FROM stadium GROUP BY country", "query_toks": ["SELECT", "country", ",", "count", "(", "*", ")", "FROM", "stadium", "GROUP", "BY", "country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "stadium", "group", "by", "country"], "question": "How many stadiums does each country have?", "question_toks": ["How", "many", "stadiums", "does", "each", "country", "have", "?"], "dataset_name": "spider", "guid": 1530}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the names of players coached by the rank 1 coach.", "sql": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1", "example": {"db_id": "riding_club", "query": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1", "query_toks": ["SELECT", "T3.Player_name", "FROM", "player_coach", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.Coach_ID", "=", "T2.Coach_ID", "JOIN", "player", "AS", "T3", "ON", "T1.Player_ID", "=", "T3.Player_ID", "WHERE", "T2.Rank", "=", "1"], "query_toks_no_value": ["select", "t3", ".", "player_name", "from", "player_coach", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "coach_id", "=", "t2", ".", "coach_id", "join", "player", "as", "t3", "on", "t1", ".", "player_id", "=", "t3", ".", "player_id", "where", "t2", ".", "rank", "=", "value"], "question": "Show the names of players coached by the rank 1 coach.", "question_toks": ["Show", "the", "names", "of", "players", "coached", "by", "the", "rank", "1", "coach", "."], "dataset_name": "spider", "guid": 1531}}