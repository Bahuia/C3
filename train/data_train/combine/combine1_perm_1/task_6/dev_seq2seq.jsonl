{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Return the names of wrestlers with fewer than 100 days held.", "sql": "SELECT Name FROM wrestler WHERE Days_held  <  100", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler WHERE Days_held  <  100", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "WHERE", "Days_held", "<", "100"], "query_toks_no_value": ["select", "name", "from", "wrestler", "where", "days_held", "<", "value"], "question": "Return the names of wrestlers with fewer than 100 days held.", "question_toks": ["Return", "the", "names", "of", "wrestlers", "with", "fewer", "than", "100", "days", "held", "."], "dataset_name": "spider", "guid": 1532}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | For each position, what is the minimum time students spent practicing?", "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos", "example": {"db_id": "soccer_2", "query": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos", "query_toks": ["SELECT", "min", "(", "T2.HS", ")", ",", "T1.pPos", "FROM", "tryout", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "GROUP", "BY", "T1.pPos"], "query_toks_no_value": ["select", "min", "(", "t2", ".", "hs", ")", ",", "t1", ".", "ppos", "from", "tryout", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "group", "by", "t1", ".", "ppos"], "question": "For each position, what is the minimum time students spent practicing?", "question_toks": ["For", "each", "position", ",", "what", "is", "the", "minimum", "time", "students", "spent", "practicing", "?"], "dataset_name": "spider", "guid": 1533}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the states with colleges that have enrollments less than the some other college?", "sql": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)", "query_toks": ["SELECT", "DISTINCT", "state", "FROM", "college", "WHERE", "enr", "<", "(", "SELECT", "max", "(", "enr", ")", "FROM", "college", ")"], "query_toks_no_value": ["select", "distinct", "state", "from", "college", "where", "enr", "<", "(", "select", "max", "(", "enr", ")", "from", "college", ")"], "question": "What are the states with colleges that have enrollments less than the some other college?", "question_toks": ["What", "are", "the", "states", "with", "colleges", "that", "have", "enrollments", "less", "than", "the", "some", "other", "college", "?"], "dataset_name": "spider", "guid": 1534}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the name of the swimmer who has the most records.", "sql": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "swimming", "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "GROUP", "BY", "t2.swimmer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "group", "by", "t2", ".", "swimmer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the swimmer who has the most records.", "question_toks": ["Find", "the", "name", "of", "the", "swimmer", "who", "has", "the", "most", "records", "."], "dataset_name": "spider", "guid": 1535}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many hours do the players train on average?", "sql": "SELECT avg(HS) FROM Player", "example": {"db_id": "soccer_2", "query": "SELECT avg(HS) FROM Player", "query_toks": ["SELECT", "avg", "(", "HS", ")", "FROM", "Player"], "query_toks_no_value": ["select", "avg", "(", "hs", ")", "from", "player"], "question": "How many hours do the players train on average?", "question_toks": ["How", "many", "hours", "do", "the", "players", "train", "on", "average", "?"], "dataset_name": "spider", "guid": 1536}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the distinct leader names of colleges associated with members from country \"Canada\".", "sql": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\"", "example": {"db_id": "decoration_competition", "query": "SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID WHERE T2.Country  =  \"Canada\"", "query_toks": ["SELECT", "DISTINCT", "T1.Leader_Name", "FROM", "college", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.College_ID", "=", "T2.College_ID", "WHERE", "T2.Country", "=", "``", "Canada", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "leader_name", "from", "college", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "college_id", "=", "t2", ".", "college_id", "where", "t2", ".", "country", "=", "value"], "question": "Show the distinct leader names of colleges associated with members from country \"Canada\".", "question_toks": ["Show", "the", "distinct", "leader", "names", "of", "colleges", "associated", "with", "members", "from", "country", "``", "Canada", "''", "."], "dataset_name": "spider", "guid": 1537}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Count the number of different teams involved in match season.", "sql": "SELECT count(DISTINCT Team) FROM match_season", "example": {"db_id": "match_season", "query": "SELECT count(DISTINCT Team) FROM match_season", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Team", ")", "FROM", "match_season"], "query_toks_no_value": ["select", "count", "(", "distinct", "team", ")", "from", "match_season"], "question": "Count the number of different teams involved in match season.", "question_toks": ["Count", "the", "number", "of", "different", "teams", "involved", "in", "match", "season", "."], "dataset_name": "spider", "guid": 1538}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of the schools with some players in the mid position but no goalies?", "sql": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'", "query_toks": ["SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'mid", "'", "EXCEPT", "SELECT", "cName", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "cname", "from", "tryout", "where", "ppos", "=", "value", "except", "select", "cname", "from", "tryout", "where", "ppos", "=", "value"], "question": "What are the names of the schools with some players in the mid position but no goalies?", "question_toks": ["What", "are", "the", "names", "of", "the", "schools", "with", "some", "players", "in", "the", "mid", "position", "but", "no", "goalies", "?"], "dataset_name": "spider", "guid": 1539}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the id of the shortest trip?", "sql": "SELECT id FROM trip ORDER BY duration LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT id FROM trip ORDER BY duration LIMIT 1", "query_toks": ["SELECT", "id", "FROM", "trip", "ORDER", "BY", "duration", "LIMIT", "1"], "query_toks_no_value": ["select", "id", "from", "trip", "order", "by", "duration", "limit", "value"], "question": "What is the id of the shortest trip?", "question_toks": ["What", "is", "the", "id", "of", "the", "shortest", "trip", "?"], "dataset_name": "spider", "guid": 1540}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the names of people in ascending alphabetical order?", "sql": "SELECT Name FROM People ORDER BY Name ASC", "example": {"db_id": "gymnast", "query": "SELECT Name FROM People ORDER BY Name ASC", "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Name", "ASC"], "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "name", "asc"], "question": "What are the names of people in ascending alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "people", "in", "ascending", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1541}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the highest rank of losers in all matches.", "sql": "SELECT min(loser_rank) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT min(loser_rank) FROM matches", "query_toks": ["SELECT", "min", "(", "loser_rank", ")", "FROM", "matches"], "query_toks_no_value": ["select", "min", "(", "loser_rank", ")", "from", "matches"], "question": "Find the highest rank of losers in all matches.", "question_toks": ["Find", "the", "highest", "rank", "of", "losers", "in", "all", "matches", "."], "dataset_name": "spider", "guid": 1542}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | List the names of all winners who played in both 2013 and 2016.", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "example": {"db_id": "wta_1", "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "query_toks": ["SELECT", "winner_name", "FROM", "matches", "WHERE", "YEAR", "=", "2013", "INTERSECT", "SELECT", "winner_name", "FROM", "matches", "WHERE", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "winner_name", "from", "matches", "where", "year", "=", "value", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "value"], "question": "List the names of all winners who played in both 2013 and 2016.", "question_toks": ["List", "the", "names", "of", "all", "winners", "who", "played", "in", "both", "2013", "and", "2016", "."], "dataset_name": "spider", "guid": 1543}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of players whose training hours is between 500 and 1500?", "sql": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500", "example": {"db_id": "soccer_2", "query": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500", "query_toks": ["SELECT", "pName", "FROM", "Player", "WHERE", "HS", "BETWEEN", "500", "AND", "1500"], "query_toks_no_value": ["select", "pname", "from", "player", "where", "hs", "between", "value", "and", "value"], "question": "What are the names of players whose training hours is between 500 and 1500?", "question_toks": ["What", "are", "the", "names", "of", "players", "whose", "training", "hours", "is", "between", "500", "and", "1500", "?"], "dataset_name": "spider", "guid": 1544}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is the highest acc percent score in the competition?", "sql": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1", "query_toks": ["SELECT", "acc_percent", "FROM", "basketball_match", "ORDER", "BY", "acc_percent", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "acc_percent", "from", "basketball_match", "order", "by", "acc_percent", "desc", "limit", "value"], "question": "What is the highest acc percent score in the competition?", "question_toks": ["What", "is", "the", "highest", "acc", "percent", "score", "in", "the", "competition", "?"], "dataset_name": "spider", "guid": 1545}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average longitude of stations that never had bike availability more than 10?", "sql": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "example": {"db_id": "bike_1", "query": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)", "query_toks": ["SELECT", "avg", "(", "long", ")", "FROM", "station", "WHERE", "id", "NOT", "IN", "(", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "max", "(", "bikes_available", ")", ">", "10", ")"], "query_toks_no_value": ["select", "avg", "(", "long", ")", "from", "station", "where", "id", "not", "in", "(", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "max", "(", "bikes_available", ")", ">", "value", ")"], "question": "What is the average longitude of stations that never had bike availability more than 10?", "question_toks": ["What", "is", "the", "average", "longitude", "of", "stations", "that", "never", "had", "bike", "availability", "more", "than", "10", "?"], "dataset_name": "spider", "guid": 1546}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | In zip code 94107, on which day neither Fog nor Rain was not observed?", "sql": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "zip_code", "=", "94107", "AND", "EVENTS", "!", "=", "``", "Fog", "''", "AND", "EVENTS", "!", "=", "``", "Rain", "''"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "zip_code", "=", "value", "and", "events", "!", "=", "value", "and", "events", "!", "=", "value"], "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?", "question_toks": ["In", "zip", "code", "94107", ",", "on", "which", "day", "neither", "Fog", "nor", "Rain", "was", "not", "observed", "?"], "dataset_name": "spider", "guid": 1547}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the location and all games score of the school that has Clemson as its team name.", "sql": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "example": {"db_id": "university_basketball", "query": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'", "query_toks": ["SELECT", "t2.All_Games", ",", "t1.location", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "WHERE", "team_name", "=", "'Clemson", "'"], "query_toks_no_value": ["select", "t2", ".", "all_games", ",", "t1", ".", "location", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "team_name", "=", "value"], "question": "Find the location and all games score of the school that has Clemson as its team name.", "question_toks": ["Find", "the", "location", "and", "all", "games", "score", "of", "the", "school", "that", "has", "Clemson", "as", "its", "team", "name", "."], "dataset_name": "spider", "guid": 1548}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the names of gymnasts?", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "example": {"db_id": "gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "query_toks": ["SELECT", "T2.Name", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id"], "question": "What are the names of gymnasts?", "question_toks": ["What", "are", "the", "names", "of", "gymnasts", "?"], "dataset_name": "spider", "guid": 1549}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the 3 most common cloud cover rates in the region of zip code 94107?", "sql": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "query_toks": ["SELECT", "cloud_cover", "FROM", "weather", "WHERE", "zip_code", "=", "94107", "GROUP", "BY", "cloud_cover", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "cloud_cover", "from", "weather", "where", "zip_code", "=", "value", "group", "by", "cloud_cover", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?", "question_toks": ["What", "is", "the", "3", "most", "common", "cloud", "cover", "rates", "in", "the", "region", "of", "zip", "code", "94107", "?"], "dataset_name": "spider", "guid": 1550}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the country that has the most stadiums.", "sql": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "swimming", "query": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country", "FROM", "stadium", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "stadium", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the country that has the most stadiums.", "question_toks": ["Find", "the", "country", "that", "has", "the", "most", "stadiums", "."], "dataset_name": "spider", "guid": 1551}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | How many poker players are there?", "sql": "SELECT count(*) FROM poker_player", "example": {"db_id": "poker_player", "query": "SELECT count(*) FROM poker_player", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "poker_player"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "poker_player"], "question": "How many poker players are there?", "question_toks": ["How", "many", "poker", "players", "are", "there", "?"], "dataset_name": "spider", "guid": 1552}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the names of the students who are in the position of striker and got a yes tryout decision.", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'", "query_toks": ["SELECT", "T1.pName", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'", "AND", "T2.pPos", "=", "'striker", "'"], "query_toks_no_value": ["select", "t1", ".", "pname", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value", "and", "t2", ".", "ppos", "=", "value"], "question": "Find the names of the students who are in the position of striker and got a yes tryout decision.", "question_toks": ["Find", "the", "names", "of", "the", "students", "who", "are", "in", "the", "position", "of", "striker", "and", "got", "a", "yes", "tryout", "decision", "."], "dataset_name": "spider", "guid": 1553}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | List the names of mountains that do not have any climber.", "sql": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)", "query_toks": ["SELECT", "Name", "FROM", "mountain", "WHERE", "Mountain_ID", "NOT", "IN", "(", "SELECT", "Mountain_ID", "FROM", "climber", ")"], "query_toks_no_value": ["select", "name", "from", "mountain", "where", "mountain_id", "not", "in", "(", "select", "mountain_id", "from", "climber", ")"], "question": "List the names of mountains that do not have any climber.", "question_toks": ["List", "the", "names", "of", "mountains", "that", "do", "not", "have", "any", "climber", "."], "dataset_name": "spider", "guid": 1554}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of all the circuits that are in the UK or Malaysia?", "sql": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"", "example": {"db_id": "formula_1", "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"", "query_toks": ["SELECT", "name", "FROM", "circuits", "WHERE", "country", "=", "``", "UK", "''", "OR", "country", "=", "``", "Malaysia", "''"], "query_toks_no_value": ["select", "name", "from", "circuits", "where", "country", "=", "value", "or", "country", "=", "value"], "question": "What are the names of all the circuits that are in the UK or Malaysia?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "circuits", "that", "are", "in", "the", "UK", "or", "Malaysia", "?"], "dataset_name": "spider", "guid": 1555}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | On average, how old are the members in the club \"Hopkins Student Enterprises\"?", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "example": {"db_id": "club_1", "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "query_toks": ["SELECT", "avg", "(", "t3.age", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "age", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "On average, how old are the members in the club \"Hopkins Student Enterprises\"?", "question_toks": ["On", "average", ",", "how", "old", "are", "the", "members", "in", "the", "club", "``", "Hopkins", "Student", "Enterprises", "''", "?"], "dataset_name": "spider", "guid": 1556}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Give me the start station and end station for the trips with the three oldest id.", "sql": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3", "query_toks": ["SELECT", "start_station_name", ",", "end_station_name", "FROM", "trip", "ORDER", "BY", "id", "LIMIT", "3"], "query_toks_no_value": ["select", "start_station_name", ",", "end_station_name", "from", "trip", "order", "by", "id", "limit", "value"], "question": "Give me the start station and end station for the trips with the three oldest id.", "question_toks": ["Give", "me", "the", "start", "station", "and", "end", "station", "for", "the", "trips", "with", "the", "three", "oldest", "id", "."], "dataset_name": "spider", "guid": 1557}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What is the average snatch score of body builders?", "sql": "SELECT avg(Snatch) FROM body_builder", "example": {"db_id": "body_builder", "query": "SELECT avg(Snatch) FROM body_builder", "query_toks": ["SELECT", "avg", "(", "Snatch", ")", "FROM", "body_builder"], "query_toks_no_value": ["select", "avg", "(", "snatch", ")", "from", "body_builder"], "question": "What is the average snatch score of body builders?", "question_toks": ["What", "is", "the", "average", "snatch", "score", "of", "body", "builders", "?"], "dataset_name": "spider", "guid": 1558}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average bike availablility for stations not in Palo Alto?", "sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")", "example": {"db_id": "bike_1", "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")", "query_toks": ["SELECT", "avg", "(", "bikes_available", ")", "FROM", "status", "WHERE", "station_id", "NOT", "IN", "(", "SELECT", "id", "FROM", "station", "WHERE", "city", "=", "``", "Palo", "Alto", "''", ")"], "query_toks_no_value": ["select", "avg", "(", "bikes_available", ")", "from", "status", "where", "station_id", "not", "in", "(", "select", "id", "from", "station", "where", "city", "=", "value", ")"], "question": "What is the average bike availablility for stations not in Palo Alto?", "question_toks": ["What", "is", "the", "average", "bike", "availablility", "for", "stations", "not", "in", "Palo", "Alto", "?"], "dataset_name": "spider", "guid": 1559}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the birthdays of people in ascending order of height?", "sql": "SELECT Birth_Date FROM People ORDER BY Height ASC", "example": {"db_id": "body_builder", "query": "SELECT Birth_Date FROM People ORDER BY Height ASC", "query_toks": ["SELECT", "Birth_Date", "FROM", "People", "ORDER", "BY", "Height", "ASC"], "query_toks_no_value": ["select", "birth_date", "from", "people", "order", "by", "height", "asc"], "question": "What are the birthdays of people in ascending order of height?", "question_toks": ["What", "are", "the", "birthdays", "of", "people", "in", "ascending", "order", "of", "height", "?"], "dataset_name": "spider", "guid": 1560}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.", "sql": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"", "query_toks": ["SELECT", "cName", "FROM", "College", "WHERE", "enr", "<", "13000", "AND", "state", "=", "``", "AZ", "''", "UNION", "SELECT", "cName", "FROM", "College", "WHERE", "enr", ">", "15000", "AND", "state", "=", "``", "LA", "''"], "query_toks_no_value": ["select", "cname", "from", "college", "where", "enr", "<", "value", "and", "state", "=", "value", "union", "select", "cname", "from", "college", "where", "enr", ">", "value", "and", "state", "=", "value"], "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.", "question_toks": ["Find", "the", "names", "of", "either", "colleges", "in", "LA", "with", "greater", "than", "15000", "size", "or", "in", "state", "AZ", "with", "less", "than", "13000", "enrollment", "."], "dataset_name": "spider", "guid": 1561}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which clubs are located at \"AKW\"? Return the club names.", "sql": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"", "example": {"db_id": "club_1", "query": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"", "query_toks": ["SELECT", "clubname", "FROM", "club", "WHERE", "clublocation", "=", "``", "AKW", "''"], "query_toks_no_value": ["select", "clubname", "from", "club", "where", "clublocation", "=", "value"], "question": "Which clubs are located at \"AKW\"? Return the club names.", "question_toks": ["Which", "clubs", "are", "located", "at", "``", "AKW", "''", "?", "Return", "the", "club", "names", "."], "dataset_name": "spider", "guid": 1562}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the times of elimination for any instances in which the elimination was done by Punk or Orton?", "sql": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"", "example": {"db_id": "wrestler", "query": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"", "query_toks": ["SELECT", "TIME", "FROM", "elimination", "WHERE", "Eliminated_By", "=", "``", "Punk", "''", "OR", "Eliminated_By", "=", "``", "Orton", "''"], "query_toks_no_value": ["select", "time", "from", "elimination", "where", "eliminated_by", "=", "value", "or", "eliminated_by", "=", "value"], "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?", "question_toks": ["What", "are", "the", "times", "of", "elimination", "for", "any", "instances", "in", "which", "the", "elimination", "was", "done", "by", "Punk", "or", "Orton", "?"], "dataset_name": "spider", "guid": 1563}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", "FROM", "matches", "WHERE", "tourney_name", "=", "'Australian", "Open", "'", "ORDER", "BY", "winner_rank_points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "value", "order", "by", "winner_rank_points", "desc", "limit", "value"], "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "question_toks": ["Find", "the", "name", "of", "the", "winner", "who", "has", "the", "highest", "rank", "points", "and", "participated", "in", "the", "Australian", "Open", "tourney", "."], "dataset_name": "spider", "guid": 1564}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the birth date of the poker player with the lowest earnings.", "sql": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1", "query_toks": ["SELECT", "T1.Birth_Date", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Earnings", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "earnings", "asc", "limit", "value"], "question": "Return the birth date of the poker player with the lowest earnings.", "question_toks": ["Return", "the", "birth", "date", "of", "the", "poker", "player", "with", "the", "lowest", "earnings", "."], "dataset_name": "spider", "guid": 1565}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the average earnings across all poker players.", "sql": "SELECT avg(Earnings) FROM poker_player", "example": {"db_id": "poker_player", "query": "SELECT avg(Earnings) FROM poker_player", "query_toks": ["SELECT", "avg", "(", "Earnings", ")", "FROM", "poker_player"], "query_toks_no_value": ["select", "avg", "(", "earnings", ")", "from", "poker_player"], "question": "Return the average earnings across all poker players.", "question_toks": ["Return", "the", "average", "earnings", "across", "all", "poker", "players", "."], "dataset_name": "spider", "guid": 1566}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the names of players who won in both 2013 and 2016?", "sql": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "example": {"db_id": "wta_1", "query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016", "query_toks": ["SELECT", "winner_name", "FROM", "matches", "WHERE", "YEAR", "=", "2013", "INTERSECT", "SELECT", "winner_name", "FROM", "matches", "WHERE", "YEAR", "=", "2016"], "query_toks_no_value": ["select", "winner_name", "from", "matches", "where", "year", "=", "value", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "value"], "question": "What are the names of players who won in both 2013 and 2016?", "question_toks": ["What", "are", "the", "names", "of", "players", "who", "won", "in", "both", "2013", "and", "2016", "?"], "dataset_name": "spider", "guid": 1567}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the 3 most common cloud covers in the zip code of 94107?", "sql": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3", "query_toks": ["SELECT", "cloud_cover", "FROM", "weather", "WHERE", "zip_code", "=", "94107", "GROUP", "BY", "cloud_cover", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "cloud_cover", "from", "weather", "where", "zip_code", "=", "value", "group", "by", "cloud_cover", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the 3 most common cloud covers in the zip code of 94107?", "question_toks": ["What", "are", "the", "3", "most", "common", "cloud", "covers", "in", "the", "zip", "code", "of", "94107", "?"], "dataset_name": "spider", "guid": 1568}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the positions of the players from the team with name \"Ryley Goldner\".", "sql": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"", "example": {"db_id": "match_season", "query": "SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Ryley Goldner\"", "query_toks": ["SELECT", "T1.Position", "FROM", "match_season", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id", "WHERE", "T2.Name", "=", "``", "Ryley", "Goldner", "''"], "query_toks_no_value": ["select", "t1", ".", "position", "from", "match_season", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id", "where", "t2", ".", "name", "=", "value"], "question": "Show the positions of the players from the team with name \"Ryley Goldner\".", "question_toks": ["Show", "the", "positions", "of", "the", "players", "from", "the", "team", "with", "name", "``", "Ryley", "Goldner", "''", "."], "dataset_name": "spider", "guid": 1569}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the different positions of players from UCLA or Duke colleges?", "sql": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"", "example": {"db_id": "match_season", "query": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"", "query_toks": ["SELECT", "DISTINCT", "POSITION", "FROM", "match_season", "WHERE", "College", "=", "``", "UCLA", "''", "OR", "College", "=", "``", "Duke", "''"], "query_toks_no_value": ["select", "distinct", "position", "from", "match_season", "where", "college", "=", "value", "or", "college", "=", "value"], "question": "What are the different positions of players from UCLA or Duke colleges?", "question_toks": ["What", "are", "the", "different", "positions", "of", "players", "from", "UCLA", "or", "Duke", "colleges", "?"], "dataset_name": "spider", "guid": 1570}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the name of the winner who has won the most matches, and how many rank points does this player have?", "sql": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", ",", "winner_rank_points", "FROM", "matches", "GROUP", "BY", "winner_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "question_toks": ["What", "is", "the", "name", "of", "the", "winner", "who", "has", "won", "the", "most", "matches", ",", "and", "how", "many", "rank", "points", "does", "this", "player", "have", "?"], "dataset_name": "spider", "guid": 1571}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?", "sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos", "example": {"db_id": "soccer_2", "query": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos", "query_toks": ["SELECT", "max", "(", "T1.HS", ")", ",", "pPos", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T1.HS", ">", "1000", "GROUP", "BY", "T2.pPos"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "hs", ")", ",", "ppos", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t1", ".", "hs", ">", "value", "group", "by", "t2", ".", "ppos"], "question": "What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?", "question_toks": ["What", "is", "the", "maximum", "training", "hours", "for", "the", "students", "whose", "training", "hours", "is", "greater", "than", "1000", "in", "different", "positions", "?"], "dataset_name": "spider", "guid": 1572}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Show the reign and days held of wrestlers.", "sql": "SELECT Reign ,  Days_held FROM wrestler", "example": {"db_id": "wrestler", "query": "SELECT Reign ,  Days_held FROM wrestler", "query_toks": ["SELECT", "Reign", ",", "Days_held", "FROM", "wrestler"], "query_toks_no_value": ["select", "reign", ",", "days_held", "from", "wrestler"], "question": "Show the reign and days held of wrestlers.", "question_toks": ["Show", "the", "reign", "and", "days", "held", "of", "wrestlers", "."], "dataset_name": "spider", "guid": 1573}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the names of body builders?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "example": {"db_id": "body_builder", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "query_toks": ["SELECT", "T2.Name", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"], "question": "What are the names of body builders?", "question_toks": ["What", "are", "the", "names", "of", "body", "builders", "?"], "dataset_name": "spider", "guid": 1574}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | How many stadiums are not in country \"Russia\"?", "sql": "SELECT count(*) FROM stadium WHERE country != 'Russia'", "example": {"db_id": "swimming", "query": "SELECT count(*) FROM stadium WHERE country != 'Russia'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "stadium", "WHERE", "country", "!", "=", "'Russia", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "stadium", "where", "country", "!", "=", "value"], "question": "How many stadiums are not in country \"Russia\"?", "question_toks": ["How", "many", "stadiums", "are", "not", "in", "country", "``", "Russia", "''", "?"], "dataset_name": "spider", "guid": 1575}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Give the different positions of players who play for the country with the capital Dublin.", "sql": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"", "example": {"db_id": "match_season", "query": "SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Capital  =  \"Dublin\"", "query_toks": ["SELECT", "DISTINCT", "T2.Position", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T1.Capital", "=", "``", "Dublin", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "position", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t1", ".", "capital", "=", "value"], "question": "Give the different positions of players who play for the country with the capital Dublin.", "question_toks": ["Give", "the", "different", "positions", "of", "players", "who", "play", "for", "the", "country", "with", "the", "capital", "Dublin", "."], "dataset_name": "spider", "guid": 1576}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the zip code that has the lowest average mean sea level pressure?", "sql": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1", "query_toks": ["SELECT", "zip_code", "FROM", "weather", "GROUP", "BY", "zip_code", "ORDER", "BY", "avg", "(", "mean_sea_level_pressure_inches", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "zip_code", "from", "weather", "group", "by", "zip_code", "order", "by", "avg", "(", "mean_sea_level_pressure_inches", ")", "limit", "value"], "question": "What is the zip code that has the lowest average mean sea level pressure?", "question_toks": ["What", "is", "the", "zip", "code", "that", "has", "the", "lowest", "average", "mean", "sea", "level", "pressure", "?"], "dataset_name": "spider", "guid": 1577}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | List the total points of gymnasts in descending order of floor exercise points.", "sql": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "example": {"db_id": "gymnast", "query": "SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC", "query_toks": ["SELECT", "Total_Points", "FROM", "gymnast", "ORDER", "BY", "Floor_Exercise_Points", "DESC"], "query_toks_no_value": ["select", "total_points", "from", "gymnast", "order", "by", "floor_exercise_points", "desc"], "question": "List the total points of gymnasts in descending order of floor exercise points.", "question_toks": ["List", "the", "total", "points", "of", "gymnasts", "in", "descending", "order", "of", "floor", "exercise", "points", "."], "dataset_name": "spider", "guid": 1578}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Which locations are shared by more than two wrestlers?", "sql": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "example": {"db_id": "wrestler", "query": "SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "LOCATION", "FROM", "wrestler", "GROUP", "BY", "LOCATION", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "location", "from", "wrestler", "group", "by", "location", "having", "count", "(", "*", ")", ">", "value"], "question": "Which locations are shared by more than two wrestlers?", "question_toks": ["Which", "locations", "are", "shared", "by", "more", "than", "two", "wrestlers", "?"], "dataset_name": "spider", "guid": 1579}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "sql": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.country_code", ",", "T1.birth_date", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "ORDER", "BY", "T2.winner_rank_points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "country_code", ",", "t1", ".", "birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "order", "by", "t2", ".", "winner_rank_points", "desc", "limit", "value"], "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "question_toks": ["Find", "the", "first", "name", ",", "country", "code", "and", "birth", "date", "of", "the", "winner", "who", "has", "the", "highest", "rank", "points", "in", "all", "matches", "."], "dataset_name": "spider", "guid": 1580}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".", "sql": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'", "example": {"db_id": "swimming", "query": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'", "query_toks": ["SELECT", "meter_200", ",", "meter_300", "FROM", "swimmer", "WHERE", "nationality", "=", "'Australia", "'"], "query_toks_no_value": ["select", "meter_200", ",", "meter_300", "from", "swimmer", "where", "nationality", "=", "value"], "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".", "question_toks": ["Find", "all", "200", "meter", "and", "300", "meter", "results", "of", "swimmers", "with", "nationality", "``", "Australia", "''", "."], "dataset_name": "spider", "guid": 1581}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "sql": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"", "example": {"db_id": "bike_1", "query": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "JOIN", "station", "AS", "T3", "JOIN", "trip", "AS", "T4", "ON", "T1.id", "=", "T2.start_station_id", "AND", "T2.id", "=", "T4.id", "AND", "T3.id", "=", "T4.end_station_id", "WHERE", "T1.city", "=", "``", "Mountain", "View", "''", "AND", "T3.city", "=", "``", "Palo", "Alto", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "join", "station", "as", "t3", "join", "trip", "as", "t4", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id", "and", "t2", ".", "id", "=", "t4", ".", "id", "and", "t3", ".", "id", "=", "t4", ".", "end_station_id", "where", "t1", ".", "city", "=", "value", "and", "t3", ".", "city", "=", "value"], "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?", "question_toks": ["How", "many", "trips", "stated", "from", "a", "station", "in", "Mountain", "View", "and", "ended", "at", "one", "in", "Palo", "Alto", "?"], "dataset_name": "spider", "guid": 1582}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the ages of the gymnasts, ordered descending by their total points?", "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "example": {"db_id": "gymnast", "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "query_toks": ["SELECT", "T2.Age", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Total_Points", "DESC"], "query_toks_no_value": ["select", "t2", ".", "age", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "total_points", "desc"], "question": "What are the ages of the gymnasts, ordered descending by their total points?", "question_toks": ["What", "are", "the", "ages", "of", "the", "gymnasts", ",", "ordered", "descending", "by", "their", "total", "points", "?"], "dataset_name": "spider", "guid": 1583}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?", "sql": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.driverid", ",", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "POSITION", "=", "'1", "'", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "position", "=", "value", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?", "question_toks": ["What", "is", "the", "id", ",", "first", "name", ",", "and", "last", "name", "of", "the", "driver", "who", "was", "in", "the", "first", "position", "for", "laptime", "at", "least", "twice", "?"], "dataset_name": "spider", "guid": 1584}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Return the unique name for stations that have ever had 7 bikes available.", "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "WHERE", "T2.bikes_available", "=", "7"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "where", "t2", ".", "bikes_available", "=", "value"], "question": "Return the unique name for stations that have ever had 7 bikes available.", "question_toks": ["Return", "the", "unique", "name", "for", "stations", "that", "have", "ever", "had", "7", "bikes", "available", "."], "dataset_name": "spider", "guid": 1585}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the name and capacity of the stadium where the event named \"World Junior\" happened.", "sql": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'", "example": {"db_id": "swimming", "query": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'", "query_toks": ["SELECT", "t1.name", ",", "t1.capacity", "FROM", "stadium", "AS", "t1", "JOIN", "event", "AS", "t2", "ON", "t1.id", "=", "t2.stadium_id", "WHERE", "t2.name", "=", "'World", "Junior", "'"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "capacity", "from", "stadium", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "where", "t2", ".", "name", "=", "value"], "question": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.", "question_toks": ["Find", "the", "name", "and", "capacity", "of", "the", "stadium", "where", "the", "event", "named", "``", "World", "Junior", "''", "happened", "."], "dataset_name": "spider", "guid": 1586}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many students are there?", "sql": "SELECT count(*) FROM student", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM student", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student"], "question": "How many students are there?", "question_toks": ["How", "many", "students", "are", "there", "?"], "dataset_name": "spider", "guid": 1587}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id, forename, and number of races for all drivers that have participated in at least 2 races?", "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.driverid", ",", "T1.forename", ",", "count", "(", "*", ")", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "forename", ",", "count", "(", "*", ")", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?", "question_toks": ["What", "is", "the", "id", ",", "forename", ",", "and", "number", "of", "races", "for", "all", "drivers", "that", "have", "participated", "in", "at", "least", "2", "races", "?"], "dataset_name": "spider", "guid": 1588}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many colleges in total?", "sql": "SELECT count(*) FROM College", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM College", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "College"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "college"], "question": "How many colleges in total?", "question_toks": ["How", "many", "colleges", "in", "total", "?"], "dataset_name": "spider", "guid": 1589}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List all club names in descending alphabetical order.", "sql": "SELECT name FROM club ORDER BY name DESC", "example": {"db_id": "sports_competition", "query": "SELECT name FROM club ORDER BY name DESC", "query_toks": ["SELECT", "name", "FROM", "club", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "name", "from", "club", "order", "by", "name", "desc"], "question": "List all club names in descending alphabetical order.", "question_toks": ["List", "all", "club", "names", "in", "descending", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 1590}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the different classes of races, and how many races correspond to each?", "sql": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "example": {"db_id": "race_track", "query": "SELECT CLASS ,  count(*) FROM race GROUP BY CLASS", "query_toks": ["SELECT", "CLASS", ",", "count", "(", "*", ")", "FROM", "race", "GROUP", "BY", "CLASS"], "query_toks_no_value": ["select", "class", ",", "count", "(", "*", ")", "from", "race", "group", "by", "class"], "question": "What are the different classes of races, and how many races correspond to each?", "question_toks": ["What", "are", "the", "different", "classes", "of", "races", ",", "and", "how", "many", "races", "correspond", "to", "each", "?"], "dataset_name": "spider", "guid": 1591}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of circuits that belong to UK or Malaysia?", "sql": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"", "example": {"db_id": "formula_1", "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"", "query_toks": ["SELECT", "name", "FROM", "circuits", "WHERE", "country", "=", "``", "UK", "''", "OR", "country", "=", "``", "Malaysia", "''"], "query_toks_no_value": ["select", "name", "from", "circuits", "where", "country", "=", "value", "or", "country", "=", "value"], "question": "What are the names of circuits that belong to UK or Malaysia?", "question_toks": ["What", "are", "the", "names", "of", "circuits", "that", "belong", "to", "UK", "or", "Malaysia", "?"], "dataset_name": "spider", "guid": 1592}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Count the number of matches.", "sql": "SELECT count(*) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT count(*) FROM matches", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "matches"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "matches"], "question": "Count the number of matches.", "question_toks": ["Count", "the", "number", "of", "matches", "."], "dataset_name": "spider", "guid": 1593}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Who are the different players, what season do they play in, and what is the name of the team they are on?", "sql": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "example": {"db_id": "match_season", "query": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id", "query_toks": ["SELECT", "T1.Season", ",", "T1.Player", ",", "T2.Name", "FROM", "match_season", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id"], "query_toks_no_value": ["select", "t1", ".", "season", ",", "t1", ".", "player", ",", "t2", ".", "name", "from", "match_season", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id"], "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?", "question_toks": ["Who", "are", "the", "different", "players", ",", "what", "season", "do", "they", "play", "in", ",", "and", "what", "is", "the", "name", "of", "the", "team", "they", "are", "on", "?"], "dataset_name": "spider", "guid": 1594}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".", "sql": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"", "example": {"db_id": "riding_club", "query": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"", "query_toks": ["SELECT", "Sponsor_name", "FROM", "player", "WHERE", "Residence", "=", "``", "Brandon", "''", "OR", "Residence", "=", "``", "Birtle", "''"], "query_toks_no_value": ["select", "sponsor_name", "from", "player", "where", "residence", "=", "value", "or", "residence", "=", "value"], "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".", "question_toks": ["Show", "the", "names", "of", "sponsors", "of", "players", "whose", "residence", "is", "either", "``", "Brandon", "''", "or", "``", "Birtle", "''", "."], "dataset_name": "spider", "guid": 1595}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show names of climbers and the names of mountains they climb.", "sql": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "example": {"db_id": "climbing", "query": "SELECT T1.Name ,  T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Name", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "name", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id"], "question": "Show names of climbers and the names of mountains they climb.", "question_toks": ["Show", "names", "of", "climbers", "and", "the", "names", "of", "mountains", "they", "climb", "."], "dataset_name": "spider", "guid": 1596}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What is the description of the club \"Pen and Paper Gaming\"?", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "example": {"db_id": "club_1", "query": "SELECT clubdesc FROM club WHERE clubname  =  \"Pen and Paper Gaming\"", "query_toks": ["SELECT", "clubdesc", "FROM", "club", "WHERE", "clubname", "=", "``", "Pen", "and", "Paper", "Gaming", "''"], "query_toks_no_value": ["select", "clubdesc", "from", "club", "where", "clubname", "=", "value"], "question": "What is the description of the club \"Pen and Paper Gaming\"?", "question_toks": ["What", "is", "the", "description", "of", "the", "club", "``", "Pen", "and", "Paper", "Gaming", "''", "?"], "dataset_name": "spider", "guid": 1597}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many different colleges were represented at tryouts?", "sql": "SELECT count(DISTINCT cName) FROM tryout", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT cName) FROM tryout", "query_toks": ["SELECT", "count", "(", "DISTINCT", "cName", ")", "FROM", "tryout"], "query_toks_no_value": ["select", "count", "(", "distinct", "cname", ")", "from", "tryout"], "question": "How many different colleges were represented at tryouts?", "question_toks": ["How", "many", "different", "colleges", "were", "represented", "at", "tryouts", "?"], "dataset_name": "spider", "guid": 1598}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | List all the event names by year from the most recent to the oldest.", "sql": "SELECT name FROM event ORDER BY YEAR DESC", "example": {"db_id": "swimming", "query": "SELECT name FROM event ORDER BY YEAR DESC", "query_toks": ["SELECT", "name", "FROM", "event", "ORDER", "BY", "YEAR", "DESC"], "query_toks_no_value": ["select", "name", "from", "event", "order", "by", "year", "desc"], "question": "List all the event names by year from the most recent to the oldest.", "question_toks": ["List", "all", "the", "event", "names", "by", "year", "from", "the", "most", "recent", "to", "the", "oldest", "."], "dataset_name": "spider", "guid": 1599}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the average enrollment number?", "sql": "SELECT avg(enr) FROM College", "example": {"db_id": "soccer_2", "query": "SELECT avg(enr) FROM College", "query_toks": ["SELECT", "avg", "(", "enr", ")", "FROM", "College"], "query_toks_no_value": ["select", "avg", "(", "enr", ")", "from", "college"], "question": "What is the average enrollment number?", "question_toks": ["What", "is", "the", "average", "enrollment", "number", "?"], "dataset_name": "spider", "guid": 1600}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the forename and surname of the driver who has the smallest laptime?", "sql": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1", "query_toks": ["SELECT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "ORDER", "BY", "T2.milliseconds", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "order", "by", "t2", ".", "milliseconds", "limit", "value"], "question": "What are the forename and surname of the driver who has the smallest laptime?", "question_toks": ["What", "are", "the", "forename", "and", "surname", "of", "the", "driver", "who", "has", "the", "smallest", "laptime", "?"], "dataset_name": "spider", "guid": 1601}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "query_toks": ["SELECT", "DISTINCT", "driverid", ",", "STOP", "FROM", "pitstops", "WHERE", "duration", ">", "(", "SELECT", "min", "(", "duration", ")", "FROM", "pitstops", "WHERE", "raceid", "=", "841", ")"], "query_toks_no_value": ["select", "distinct", "driverid", ",", "stop", "from", "pitstops", "where", "duration", ">", "(", "select", "min", "(", "duration", ")", "from", "pitstops", "where", "raceid", "=", "value", ")"], "question": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?", "question_toks": ["What", "are", "the", "different", "ids", "and", "stop", "durations", "of", "all", "the", "drivers", "whose", "stop", "lasted", "longer", "than", "the", "driver", "in", "the", "race", "with", "the", "id", "841", "?"], "dataset_name": "spider", "guid": 1602}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | List the forenames of all distinct drivers in alphabetical order?", "sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "query_toks": ["SELECT", "DISTINCT", "forename", "FROM", "drivers", "ORDER", "BY", "forename", "ASC"], "query_toks_no_value": ["select", "distinct", "forename", "from", "drivers", "order", "by", "forename", "asc"], "question": "List the forenames of all distinct drivers in alphabetical order?", "question_toks": ["List", "the", "forenames", "of", "all", "distinct", "drivers", "in", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1603}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?", "sql": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"", "example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"", "query_toks": ["SELECT", "T1.name", ",", "T1.id", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "GROUP", "BY", "T2.station_id", "HAVING", "avg", "(", "T2.bikes_available", ")", ">", "14", "UNION", "SELECT", "name", ",", "id", "FROM", "station", "WHERE", "installation_date", "LIKE", "``", "12/", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "id", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "group", "by", "t2", ".", "station_id", "having", "avg", "(", "t2", ".", "bikes_available", ")", ">", "value", "union", "select", "name", ",", "id", "from", "station", "where", "installation_date", "like", "value"], "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "all", "stations", "that", "have", "more", "than", "14", "bikes", "available", "on", "average", "or", "had", "bikes", "installed", "in", "December", "?"], "dataset_name": "spider", "guid": 1604}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the countries of mountains with height bigger than 5000?", "sql": "SELECT Country FROM mountain WHERE Height  >  5000", "example": {"db_id": "climbing", "query": "SELECT Country FROM mountain WHERE Height  >  5000", "query_toks": ["SELECT", "Country", "FROM", "mountain", "WHERE", "Height", ">", "5000"], "query_toks_no_value": ["select", "country", "from", "mountain", "where", "height", ">", "value"], "question": "What are the countries of mountains with height bigger than 5000?", "question_toks": ["What", "are", "the", "countries", "of", "mountains", "with", "height", "bigger", "than", "5000", "?"], "dataset_name": "spider", "guid": 1605}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?", "sql": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "example": {"db_id": "formula_1", "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "query_toks": ["SELECT", "T1.forename", ",", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "pitstops", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "8", "UNION", "SELECT", "T1.forename", ",", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "forename", ",", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "pitstops", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "forename", ",", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?", "question_toks": ["What", "are", "the", "drivers", "'", "first", "names", ",", "last", "names", ",", "and", "ids", "for", "all", "those", "that", "had", "more", "than", "8", "stops", "or", "participated", "in", "more", "than", "5", "races", "?"], "dataset_name": "spider", "guid": 1606}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Return the last name for the members of the club named \"Hopkins Student Enterprises\".", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "example": {"db_id": "club_1", "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "query_toks": ["SELECT", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''"], "query_toks_no_value": ["select", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Return the last name for the members of the club named \"Hopkins Student Enterprises\".", "question_toks": ["Return", "the", "last", "name", "for", "the", "members", "of", "the", "club", "named", "``", "Hopkins", "Student", "Enterprises", "''", "."], "dataset_name": "spider", "guid": 1607}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the position of players with average number of points scored by players of that position bigger than 20.", "sql": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20", "example": {"db_id": "sports_competition", "query": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20", "query_toks": ["SELECT", "POSITION", "FROM", "player", "GROUP", "BY", "name", "HAVING", "avg", "(", "Points", ")", ">", "=", "20"], "query_toks_no_value": ["select", "position", "from", "player", "group", "by", "name", "having", "avg", "(", "points", ")", ">", "=", "value"], "question": "List the position of players with average number of points scored by players of that position bigger than 20.", "question_toks": ["List", "the", "position", "of", "players", "with", "average", "number", "of", "points", "scored", "by", "players", "of", "that", "position", "bigger", "than", "20", "."], "dataset_name": "spider", "guid": 1608}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the names of climbers and the heights of mountains they climb.", "sql": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "example": {"db_id": "climbing", "query": "SELECT T1.Name ,  T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Height", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "height", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id"], "question": "Show the names of climbers and the heights of mountains they climb.", "question_toks": ["Show", "the", "names", "of", "climbers", "and", "the", "heights", "of", "mountains", "they", "climb", "."], "dataset_name": "spider", "guid": 1609}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students whose are playing the role of goalie?", "sql": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tryout", "where", "ppos", "=", "value"], "question": "How many students whose are playing the role of goalie?", "question_toks": ["How", "many", "students", "whose", "are", "playing", "the", "role", "of", "goalie", "?"], "dataset_name": "spider", "guid": 1610}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all the states with college students playing in the mid position but no goalies?", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'mid", "'", "EXCEPT", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", "except", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value"], "question": "What are the names of all the states with college students playing in the mid position but no goalies?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "states", "with", "college", "students", "playing", "in", "the", "mid", "position", "but", "no", "goalies", "?"], "dataset_name": "spider", "guid": 1611}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the names of all teams?", "sql": "SELECT Name FROM Team", "example": {"db_id": "match_season", "query": "SELECT Name FROM Team", "query_toks": ["SELECT", "Name", "FROM", "Team"], "query_toks_no_value": ["select", "name", "from", "team"], "question": "What are the names of all teams?", "question_toks": ["What", "are", "the", "names", "of", "all", "teams", "?"], "dataset_name": "spider", "guid": 1612}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What are the names of the clubs that have \"Davis Steven\" as a member?", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Davis", "''", "AND", "t3.lname", "=", "``", "Steven", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "What are the names of the clubs that have \"Davis Steven\" as a member?", "question_toks": ["What", "are", "the", "names", "of", "the", "clubs", "that", "have", "``", "Davis", "Steven", "''", "as", "a", "member", "?"], "dataset_name": "spider", "guid": 1613}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the different names of all the races in reverse alphabetical order?", "sql": "SELECT DISTINCT name FROM races ORDER BY name DESC", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT name FROM races ORDER BY name DESC", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "races", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "distinct", "name", "from", "races", "order", "by", "name", "desc"], "question": "What are the different names of all the races in reverse alphabetical order?", "question_toks": ["What", "are", "the", "different", "names", "of", "all", "the", "races", "in", "reverse", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1614}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the position of players and the corresponding number of players.", "sql": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "example": {"db_id": "match_season", "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "query_toks": ["SELECT", "POSITION", ",", "COUNT", "(", "*", ")", "FROM", "match_season", "GROUP", "BY", "POSITION"], "query_toks_no_value": ["select", "position", ",", "count", "(", "*", ")", "from", "match_season", "group", "by", "position"], "question": "Show the position of players and the corresponding number of players.", "question_toks": ["Show", "the", "position", "of", "players", "and", "the", "corresponding", "number", "of", "players", "."], "dataset_name": "spider", "guid": 1615}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the average number of gold medals for a club?", "sql": "SELECT avg(Gold) FROM club_rank", "example": {"db_id": "sports_competition", "query": "SELECT avg(Gold) FROM club_rank", "query_toks": ["SELECT", "avg", "(", "Gold", ")", "FROM", "club_rank"], "query_toks_no_value": ["select", "avg", "(", "gold", ")", "from", "club_rank"], "question": "What is the average number of gold medals for a club?", "question_toks": ["What", "is", "the", "average", "number", "of", "gold", "medals", "for", "a", "club", "?"], "dataset_name": "spider", "guid": 1616}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is minimum hours of the students playing in different position?", "sql": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos", "example": {"db_id": "soccer_2", "query": "SELECT min(T2.HS) ,   T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID GROUP BY T1.pPos", "query_toks": ["SELECT", "min", "(", "T2.HS", ")", ",", "T1.pPos", "FROM", "tryout", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "GROUP", "BY", "T1.pPos"], "query_toks_no_value": ["select", "min", "(", "t2", ".", "hs", ")", ",", "t1", ".", "ppos", "from", "tryout", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "group", "by", "t1", ".", "ppos"], "question": "What is minimum hours of the students playing in different position?", "question_toks": ["What", "is", "minimum", "hours", "of", "the", "students", "playing", "in", "different", "position", "?"], "dataset_name": "spider", "guid": 1617}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.", "sql": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "example": {"db_id": "race_track", "query": "SELECT LOCATION FROM track WHERE seating  >  90000 INTERSECT SELECT LOCATION FROM track WHERE seating  <  70000", "query_toks": ["SELECT", "LOCATION", "FROM", "track", "WHERE", "seating", ">", "90000", "INTERSECT", "SELECT", "LOCATION", "FROM", "track", "WHERE", "seating", "<", "70000"], "query_toks_no_value": ["select", "location", "from", "track", "where", "seating", ">", "value", "intersect", "select", "location", "from", "track", "where", "seating", "<", "value"], "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.", "question_toks": ["Find", "the", "locations", "where", "have", "both", "tracks", "with", "more", "than", "90000", "seats", "and", "tracks", "with", "less", "than", "70000", "seats", "."], "dataset_name": "spider", "guid": 1618}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | For each constructor id, how many races are there?", "sql": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "example": {"db_id": "formula_1", "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "constructorid", "FROM", "constructorStandings", "GROUP", "BY", "constructorid"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "constructorid", "from", "constructorstandings", "group", "by", "constructorid"], "question": "For each constructor id, how many races are there?", "question_toks": ["For", "each", "constructor", "id", ",", "how", "many", "races", "are", "there", "?"], "dataset_name": "spider", "guid": 1619}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Show the ages of gymnasts in descending order of total points.", "sql": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "example": {"db_id": "gymnast", "query": "SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T1.Total_Points DESC", "query_toks": ["SELECT", "T2.Age", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Total_Points", "DESC"], "query_toks_no_value": ["select", "t2", ".", "age", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "total_points", "desc"], "question": "Show the ages of gymnasts in descending order of total points.", "question_toks": ["Show", "the", "ages", "of", "gymnasts", "in", "descending", "order", "of", "total", "points", "."], "dataset_name": "spider", "guid": 1620}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each zip code, what is the average mean temperature for all dates that start with '8'?", "sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code", "example": {"db_id": "bike_1", "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code", "query_toks": ["SELECT", "zip_code", ",", "avg", "(", "mean_temperature_f", ")", "FROM", "weather", "WHERE", "date", "LIKE", "``", "8/", "%", "''", "GROUP", "BY", "zip_code"], "query_toks_no_value": ["select", "zip_code", ",", "avg", "(", "mean_temperature_f", ")", "from", "weather", "where", "date", "like", "value", "group", "by", "zip_code"], "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?", "question_toks": ["For", "each", "zip", "code", ",", "what", "is", "the", "average", "mean", "temperature", "for", "all", "dates", "that", "start", "with", "'8", "'", "?"], "dataset_name": "spider", "guid": 1621}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are all the different start station names for a trip that lasted less than 100?", "sql": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100", "query_toks": ["SELECT", "DISTINCT", "start_station_name", "FROM", "trip", "WHERE", "duration", "<", "100"], "query_toks_no_value": ["select", "distinct", "start_station_name", "from", "trip", "where", "duration", "<", "value"], "question": "What are all the different start station names for a trip that lasted less than 100?", "question_toks": ["What", "are", "all", "the", "different", "start", "station", "names", "for", "a", "trip", "that", "lasted", "less", "than", "100", "?"], "dataset_name": "spider", "guid": 1622}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | List the names of wrestlers that have not been eliminated.", "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "WHERE", "Wrestler_ID", "NOT", "IN", "(", "SELECT", "Wrestler_ID", "FROM", "elimination", ")"], "query_toks_no_value": ["select", "name", "from", "wrestler", "where", "wrestler_id", "not", "in", "(", "select", "wrestler_id", "from", "elimination", ")"], "question": "List the names of wrestlers that have not been eliminated.", "question_toks": ["List", "the", "names", "of", "wrestlers", "that", "have", "not", "been", "eliminated", "."], "dataset_name": "spider", "guid": 1623}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?", "sql": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "example": {"db_id": "bike_1", "query": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7", "query_toks": ["SELECT", "id", "FROM", "station", "WHERE", "lat", ">", "37.4", "EXCEPT", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "min", "(", "bikes_available", ")", "<", "7"], "query_toks_no_value": ["select", "id", "from", "station", "where", "lat", ">", "value", "except", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "min", "(", "bikes_available", ")", "<", "value"], "question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?", "question_toks": ["What", "are", "the", "ids", "of", "all", "stations", "that", "have", "a", "latitude", "above", "37.4", "and", "have", "never", "had", "less", "than", "7", "bikes", "available", "?"], "dataset_name": "spider", "guid": 1624}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?", "sql": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"", "example": {"db_id": "soccer_2", "query": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"", "query_toks": ["SELECT", "cName", ",", "enr", "FROM", "College", "WHERE", "enr", ">", "10000", "AND", "state", "=", "``", "LA", "''"], "query_toks_no_value": ["select", "cname", ",", "enr", "from", "college", "where", "enr", ">", "value", "and", "state", "=", "value"], "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?", "question_toks": ["What", "are", "the", "names", "and", "enrollment", "numbers", "for", "colleges", "that", "have", "more", "than", "10000", "enrolled", "and", "are", "located", "in", "Louisiana", "?"], "dataset_name": "spider", "guid": 1625}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What is the name of the track that has had the greatest number of races?", "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "race_track", "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "GROUP", "BY", "T1.track_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "group", "by", "t1", ".", "track_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the track that has had the greatest number of races?", "question_toks": ["What", "is", "the", "name", "of", "the", "track", "that", "has", "had", "the", "greatest", "number", "of", "races", "?"], "dataset_name": "spider", "guid": 1626}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | For how many clubs is \"Tracy Kim\" a member?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Tracy", "''", "AND", "t3.lname", "=", "``", "Kim", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "For how many clubs is \"Tracy Kim\" a member?", "question_toks": ["For", "how", "many", "clubs", "is", "``", "Tracy", "Kim", "''", "a", "member", "?"], "dataset_name": "spider", "guid": 1627}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.", "sql": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "example": {"db_id": "race_track", "query": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000", "query_toks": ["SELECT", "year_opened", "FROM", "track", "WHERE", "seating", "BETWEEN", "4000", "AND", "5000"], "query_toks_no_value": ["select", "year_opened", "from", "track", "where", "seating", "between", "value", "and", "value"], "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.", "question_toks": ["Show", "year", "where", "a", "track", "with", "a", "seating", "at", "least", "5000", "opened", "and", "a", "track", "with", "seating", "no", "more", "than", "4000", "opened", "."], "dataset_name": "spider", "guid": 1628}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find all details for each swimmer.", "sql": "SELECT * FROM swimmer", "example": {"db_id": "swimming", "query": "SELECT * FROM swimmer", "query_toks": ["SELECT", "*", "FROM", "swimmer"], "query_toks_no_value": ["select", "*", "from", "swimmer"], "question": "Find all details for each swimmer.", "question_toks": ["Find", "all", "details", "for", "each", "swimmer", "."], "dataset_name": "spider", "guid": 1629}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name and college of students whose decisions are yes in the tryout.", "sql": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "T1.pName", ",", "T2.cName", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "t1", ".", "pname", ",", "t2", ".", "cname", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "Find the name and college of students whose decisions are yes in the tryout.", "question_toks": ["Find", "the", "name", "and", "college", "of", "students", "whose", "decisions", "are", "yes", "in", "the", "tryout", "."], "dataset_name": "spider", "guid": 1630}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the name and location for all tracks.", "sql": "SELECT name ,  LOCATION FROM track", "example": {"db_id": "race_track", "query": "SELECT name ,  LOCATION FROM track", "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "track"], "query_toks_no_value": ["select", "name", ",", "location", "from", "track"], "question": "Show the name and location for all tracks.", "question_toks": ["Show", "the", "name", "and", "location", "for", "all", "tracks", "."], "dataset_name": "spider", "guid": 1631}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the hometowns that are shared by at least two gymnasts?", "sql": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "example": {"db_id": "gymnast", "query": "SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "GROUP", "BY", "T2.Hometown", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "hometown", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the hometowns that are shared by at least two gymnasts?", "question_toks": ["What", "are", "the", "hometowns", "that", "are", "shared", "by", "at", "least", "two", "gymnasts", "?"], "dataset_name": "spider", "guid": 1632}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many matches were played in each year?", "sql": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "example": {"db_id": "wta_1", "query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "YEAR", "FROM", "matches", "GROUP", "BY", "YEAR"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year"], "question": "How many matches were played in each year?", "question_toks": ["How", "many", "matches", "were", "played", "in", "each", "year", "?"], "dataset_name": "spider", "guid": 1633}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Count the number of wrestlers.", "sql": "SELECT count(*) FROM wrestler", "example": {"db_id": "wrestler", "query": "SELECT count(*) FROM wrestler", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "wrestler"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "wrestler"], "question": "Count the number of wrestlers.", "question_toks": ["Count", "the", "number", "of", "wrestlers", "."], "dataset_name": "spider", "guid": 1634}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many stations are in Mountain View?", "sql": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "example": {"db_id": "bike_1", "query": "SELECT COUNT(*) FROM station WHERE city  =  \"Mountain View\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "station", "WHERE", "city", "=", "``", "Mountain", "View", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "station", "where", "city", "=", "value"], "question": "How many stations are in Mountain View?", "question_toks": ["How", "many", "stations", "are", "in", "Mountain", "View", "?"], "dataset_name": "spider", "guid": 1635}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the names of countries that have both players with position forward and players with position defender?", "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "query_toks": ["SELECT", "T1.Country_name", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.Position", "=", "``", "Forward", "''", "INTERSECT", "SELECT", "T1.Country_name", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.Position", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "t1", ".", "country_name", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "position", "=", "value", "intersect", "select", "t1", ".", "country_name", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "position", "=", "value"], "question": "What are the names of countries that have both players with position forward and players with position defender?", "question_toks": ["What", "are", "the", "names", "of", "countries", "that", "have", "both", "players", "with", "position", "forward", "and", "players", "with", "position", "defender", "?"], "dataset_name": "spider", "guid": 1636}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?", "sql": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "example": {"db_id": "formula_1", "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "query_toks": ["SELECT", "max", "(", "T2.fastestlapspeed", ")", ",", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", ">", "2014", "GROUP", "BY", "T1.name", "ORDER", "BY", "T1.year"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "fastestlapspeed", ")", ",", "t1", ".", "name", ",", "t1", ".", "year", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", ">", "value", "group", "by", "t1", ".", "name", "order", "by", "t1", ".", "year"], "question": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?", "question_toks": ["For", "each", "race", "name", ",", "What", "is", "the", "maximum", "fastest", "lap", "speed", "for", "races", "after", "2004", "ordered", "by", "year", "?"], "dataset_name": "spider", "guid": 1637}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the average rank for winners in all matches?", "sql": "SELECT avg(winner_rank) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT avg(winner_rank) FROM matches", "query_toks": ["SELECT", "avg", "(", "winner_rank", ")", "FROM", "matches"], "query_toks_no_value": ["select", "avg", "(", "winner_rank", ")", "from", "matches"], "question": "What is the average rank for winners in all matches?", "question_toks": ["What", "is", "the", "average", "rank", "for", "winners", "in", "all", "matches", "?"], "dataset_name": "spider", "guid": 1638}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names and number of hours spent training for each player who trains for less than 1500 hours?", "sql": "SELECT pName ,  HS FROM Player WHERE HS  <  1500", "example": {"db_id": "soccer_2", "query": "SELECT pName ,  HS FROM Player WHERE HS  <  1500", "query_toks": ["SELECT", "pName", ",", "HS", "FROM", "Player", "WHERE", "HS", "<", "1500"], "query_toks_no_value": ["select", "pname", ",", "hs", "from", "player", "where", "hs", "<", "value"], "question": "What are the names and number of hours spent training for each player who trains for less than 1500 hours?", "question_toks": ["What", "are", "the", "names", "and", "number", "of", "hours", "spent", "training", "for", "each", "player", "who", "trains", "for", "less", "than", "1500", "hours", "?"], "dataset_name": "spider", "guid": 1639}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What are the first and last name of the president of the club \"Bootup Baltimore\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t2.position", "=", "``", "President", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t2", ".", "position", "=", "value"], "question": "What are the first and last name of the president of the club \"Bootup Baltimore\"?", "question_toks": ["What", "are", "the", "first", "and", "last", "name", "of", "the", "president", "of", "the", "club", "``", "Bootup", "Baltimore", "''", "?"], "dataset_name": "spider", "guid": 1640}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?", "sql": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "query_toks": ["SELECT", "T2.driverid", ",", "T3.forename", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Australian", "Grand", "Prix", "''", "INTERSECT", "SELECT", "T2.driverid", ",", "T3.forename", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Chinese", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "t2", ".", "driverid", ",", "t3", ".", "forename", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value", "intersect", "select", "t2", ".", "driverid", ",", "t3", ".", "forename", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value"], "question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?", "question_toks": ["Find", "the", "id", "and", "forenames", "of", "drivers", "who", "participated", "both", "the", "races", "with", "name", "Australian", "Grand", "Prix", "and", "the", "races", "with", "name", "Chinese", "Grand", "Prix", "?"], "dataset_name": "spider", "guid": 1641}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the names of states that have some college students playing in goalie and mid positions.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'goalie", "'", "INTERSECT", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'mid", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", "intersect", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value"], "question": "Find the names of states that have some college students playing in goalie and mid positions.", "question_toks": ["Find", "the", "names", "of", "states", "that", "have", "some", "college", "students", "playing", "in", "goalie", "and", "mid", "positions", "."], "dataset_name": "spider", "guid": 1642}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many players have more than 1000 hours of training?", "sql": "SELECT count(*) FROM Player WHERE HS  >  1000", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM Player WHERE HS  >  1000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Player", "WHERE", "HS", ">", "1000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "player", "where", "hs", ">", "value"], "question": "How many players have more than 1000 hours of training?", "question_toks": ["How", "many", "players", "have", "more", "than", "1000", "hours", "of", "training", "?"], "dataset_name": "spider", "guid": 1643}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Which college have both players with position midfielder and players with position defender?", "sql": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"", "query_toks": ["SELECT", "College", "FROM", "match_season", "WHERE", "POSITION", "=", "``", "Midfielder", "''", "INTERSECT", "SELECT", "College", "FROM", "match_season", "WHERE", "POSITION", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "college", "from", "match_season", "where", "position", "=", "value", "intersect", "select", "college", "from", "match_season", "where", "position", "=", "value"], "question": "Which college have both players with position midfielder and players with position defender?", "question_toks": ["Which", "college", "have", "both", "players", "with", "position", "midfielder", "and", "players", "with", "position", "defender", "?"], "dataset_name": "spider", "guid": 1644}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the names of mountains that have a height of over 5000 or a prominence of over 1000?", "sql": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain WHERE Height  >  5000 OR Prominence  >  1000", "query_toks": ["SELECT", "Name", "FROM", "mountain", "WHERE", "Height", ">", "5000", "OR", "Prominence", ">", "1000"], "query_toks_no_value": ["select", "name", "from", "mountain", "where", "height", ">", "value", "or", "prominence", ">", "value"], "question": "What are the names of mountains that have a height of over 5000 or a prominence of over 1000?", "question_toks": ["What", "are", "the", "names", "of", "mountains", "that", "have", "a", "height", "of", "over", "5000", "or", "a", "prominence", "of", "over", "1000", "?"], "dataset_name": "spider", "guid": 1645}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the official native languages that contain the string \"English\".", "sql": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"", "example": {"db_id": "match_season", "query": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"", "query_toks": ["SELECT", "Official_native_language", "FROM", "country", "WHERE", "Official_native_language", "LIKE", "``", "%", "English", "%", "''"], "query_toks_no_value": ["select", "official_native_language", "from", "country", "where", "official_native_language", "like", "value"], "question": "What are the official native languages that contain the string \"English\".", "question_toks": ["What", "are", "the", "official", "native", "languages", "that", "contain", "the", "string", "``", "English", "''", "."], "dataset_name": "spider", "guid": 1646}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.", "sql": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "query_toks": ["SELECT", "T1.Country_name", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.Position", "=", "``", "Forward", "''", "INTERSECT", "SELECT", "T1.Country_name", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.Position", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "t1", ".", "country_name", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "position", "=", "value", "intersect", "select", "t1", ".", "country_name", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "position", "=", "value"], "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.", "question_toks": ["Return", "the", "names", "of", "countries", "that", "have", "players", "that", "play", "the", "Forward", "position", ",", "as", "well", "as", "players", "who", "play", "the", "Defender", "position", "."], "dataset_name": "spider", "guid": 1647}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the players from college UCLA.", "sql": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"", "example": {"db_id": "match_season", "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"", "query_toks": ["SELECT", "Player", "FROM", "match_season", "WHERE", "College", "=", "``", "UCLA", "''"], "query_toks_no_value": ["select", "player", "from", "match_season", "where", "college", "=", "value"], "question": "Show the players from college UCLA.", "question_toks": ["Show", "the", "players", "from", "college", "UCLA", "."], "dataset_name": "spider", "guid": 1648}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the average hours for the students whose tryout decision is no.", "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", "example": {"db_id": "soccer_2", "query": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", "query_toks": ["SELECT", "avg", "(", "T1.HS", ")", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'no", "'"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "hs", ")", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "Find the average hours for the students whose tryout decision is no.", "question_toks": ["Find", "the", "average", "hours", "for", "the", "students", "whose", "tryout", "decision", "is", "no", "."], "dataset_name": "spider", "guid": 1649}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the club which has the largest number of members majoring in \"600\".", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "club_1", "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.major", "=", "``", "600", "''", "GROUP", "BY", "t1.clubname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "major", "=", "value", "group", "by", "t1", ".", "clubname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the club which has the largest number of members majoring in \"600\".", "question_toks": ["Find", "the", "club", "which", "has", "the", "largest", "number", "of", "members", "majoring", "in", "``", "600", "''", "."], "dataset_name": "spider", "guid": 1650}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?", "sql": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3", "query_toks": ["SELECT", "date", ",", "mean_temperature_f", ",", "mean_humidity", "FROM", "weather", "ORDER", "BY", "max_gust_speed_mph", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "date", ",", "mean_temperature_f", ",", "mean_humidity", "from", "weather", "order", "by", "max_gust_speed_mph", "desc", "limit", "value"], "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?", "question_toks": ["What", "are", "the", "date", ",", "mean", "temperature", "and", "mean", "humidity", "for", "the", "top", "3", "days", "with", "the", "largest", "max", "gust", "speeds", "?"], "dataset_name": "spider", "guid": 1651}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the count of states with college students playing in the mid position but not as goalies?", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "example": {"db_id": "soccer_2", "query": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "(", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'mid", "'", "EXCEPT", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'goalie", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "(", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", "except", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", ")"], "question": "What is the count of states with college students playing in the mid position but not as goalies?", "question_toks": ["What", "is", "the", "count", "of", "states", "with", "college", "students", "playing", "in", "the", "mid", "position", "but", "not", "as", "goalies", "?"], "dataset_name": "spider", "guid": 1652}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id and family name of the driver who has the longest laptime?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1", "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "ORDER", "BY", "T2.milliseconds", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "order", "by", "t2", ".", "milliseconds", "desc", "limit", "value"], "question": "What is the id and family name of the driver who has the longest laptime?", "question_toks": ["What", "is", "the", "id", "and", "family", "name", "of", "the", "driver", "who", "has", "the", "longest", "laptime", "?"], "dataset_name": "spider", "guid": 1653}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find how many different affiliation types there are.", "sql": "SELECT count(DISTINCT affiliation) FROM university", "example": {"db_id": "university_basketball", "query": "SELECT count(DISTINCT affiliation) FROM university", "query_toks": ["SELECT", "count", "(", "DISTINCT", "affiliation", ")", "FROM", "university"], "query_toks_no_value": ["select", "count", "(", "distinct", "affiliation", ")", "from", "university"], "question": "Find how many different affiliation types there are.", "question_toks": ["Find", "how", "many", "different", "affiliation", "types", "there", "are", "."], "dataset_name": "spider", "guid": 1654}}