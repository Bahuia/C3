{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the states of the colleges that have students in the tryout who played in striker position.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'striker", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value"], "question": "Find the states of the colleges that have students in the tryout who played in striker position.", "question_toks": ["Find", "the", "states", "of", "the", "colleges", "that", "have", "students", "in", "the", "tryout", "who", "played", "in", "striker", "position", "."], "dataset_name": "spider", "guid": 1655}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the first names of all the different drivers in alphabetical order?", "sql": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC", "query_toks": ["SELECT", "DISTINCT", "forename", "FROM", "drivers", "ORDER", "BY", "forename", "ASC"], "query_toks_no_value": ["select", "distinct", "forename", "from", "drivers", "order", "by", "forename", "asc"], "question": "What are the first names of all the different drivers in alphabetical order?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "the", "different", "drivers", "in", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1656}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the names of states that have some college students playing in the mid position but not in the goalie position.", "sql": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'", "query_toks": ["SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'mid", "'", "EXCEPT", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", "except", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value"], "question": "Find the names of states that have some college students playing in the mid position but not in the goalie position.", "question_toks": ["Find", "the", "names", "of", "states", "that", "have", "some", "college", "students", "playing", "in", "the", "mid", "position", "but", "not", "in", "the", "goalie", "position", "."], "dataset_name": "spider", "guid": 1657}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the number of members in club \"Bootup Baltimore\" whose age is above 18.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.age", ">", "18"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "age", ">", "value"], "question": "Count the number of members in club \"Bootup Baltimore\" whose age is above 18.", "question_toks": ["Count", "the", "number", "of", "members", "in", "club", "``", "Bootup", "Baltimore", "''", "whose", "age", "is", "above", "18", "."], "dataset_name": "spider", "guid": 1658}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the name, latitude, and city of the station with the lowest latitude?", "sql": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1", "query_toks": ["SELECT", "name", ",", "lat", ",", "city", "FROM", "station", "ORDER", "BY", "lat", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "lat", ",", "city", "from", "station", "order", "by", "lat", "limit", "value"], "question": "What are the name, latitude, and city of the station with the lowest latitude?", "question_toks": ["What", "are", "the", "name", ",", "latitude", ",", "and", "city", "of", "the", "station", "with", "the", "lowest", "latitude", "?"], "dataset_name": "spider", "guid": 1659}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | How many distinct nationalities are there?", "sql": "SELECT count(DISTINCT Nationality) FROM people", "example": {"db_id": "poker_player", "query": "SELECT count(DISTINCT Nationality) FROM people", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Nationality", ")", "FROM", "people"], "query_toks_no_value": ["select", "count", "(", "distinct", "nationality", ")", "from", "people"], "question": "How many distinct nationalities are there?", "question_toks": ["How", "many", "distinct", "nationalities", "are", "there", "?"], "dataset_name": "spider", "guid": 1660}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the money rank of the player with the greatest earnings.", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "query_toks": ["SELECT", "Money_Rank", "FROM", "poker_player", "ORDER", "BY", "Earnings", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "value"], "question": "Return the money rank of the player with the greatest earnings.", "question_toks": ["Return", "the", "money", "rank", "of", "the", "player", "with", "the", "greatest", "earnings", "."], "dataset_name": "spider", "guid": 1661}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the names of players and names of their coaches.", "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID", "example": {"db_id": "riding_club", "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID", "query_toks": ["SELECT", "T3.Player_name", ",", "T2.coach_name", "FROM", "player_coach", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.Coach_ID", "=", "T2.Coach_ID", "JOIN", "player", "AS", "T3", "ON", "T1.Player_ID", "=", "T3.Player_ID"], "query_toks_no_value": ["select", "t3", ".", "player_name", ",", "t2", ".", "coach_name", "from", "player_coach", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "coach_id", "=", "t2", ".", "coach_id", "join", "player", "as", "t3", "on", "t1", ".", "player_id", "=", "t3", ".", "player_id"], "question": "Show the names of players and names of their coaches.", "question_toks": ["Show", "the", "names", "of", "players", "and", "names", "of", "their", "coaches", "."], "dataset_name": "spider", "guid": 1662}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Which players are from Indonesia?", "sql": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"", "example": {"db_id": "match_season", "query": "SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T1.Country_name  =  \"Indonesia\"", "query_toks": ["SELECT", "T2.Player", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T1.Country_name", "=", "``", "Indonesia", "''"], "query_toks_no_value": ["select", "t2", ".", "player", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t1", ".", "country_name", "=", "value"], "question": "Which players are from Indonesia?", "question_toks": ["Which", "players", "are", "from", "Indonesia", "?"], "dataset_name": "spider", "guid": 1663}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?", "sql": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "example": {"db_id": "formula_1", "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5", "query_toks": ["SELECT", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "pitstops", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", "=", "11", "INTERSECT", "SELECT", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "pitstops", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", "=", "value", "intersect", "select", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?", "question_toks": ["What", "are", "the", "drivers", "'", "last", "names", "and", "id", "who", "had", "11", "pit", "stops", "and", "participated", "in", "more", "than", "5", "race", "results", "?"], "dataset_name": "spider", "guid": 1664}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Which bike traveled the most often in zip code 94002?", "sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "bike_id", "FROM", "trip", "WHERE", "zip_code", "=", "94002", "GROUP", "BY", "bike_id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "bike_id", "from", "trip", "where", "zip_code", "=", "value", "group", "by", "bike_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which bike traveled the most often in zip code 94002?", "question_toks": ["Which", "bike", "traveled", "the", "most", "often", "in", "zip", "code", "94002", "?"], "dataset_name": "spider", "guid": 1665}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the names of wrestlers and their teams in elimination, ordered descending by days held?", "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "example": {"db_id": "wrestler", "query": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "query_toks": ["SELECT", "T2.Name", ",", "T1.Team", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "ORDER", "BY", "T2.Days_held", "DESC"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "team", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "order", "by", "t2", ".", "days_held", "desc"], "question": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?", "question_toks": ["What", "are", "the", "names", "of", "wrestlers", "and", "their", "teams", "in", "elimination", ",", "ordered", "descending", "by", "days", "held", "?"], "dataset_name": "spider", "guid": 1666}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the different states that have students trying out?", "sql": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName", "query_toks": ["SELECT", "DISTINCT", "state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName"], "query_toks_no_value": ["select", "distinct", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname"], "question": "What are the different states that have students trying out?", "question_toks": ["What", "are", "the", "different", "states", "that", "have", "students", "trying", "out", "?"], "dataset_name": "spider", "guid": 1667}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the average, maximum, and minimum for the number of hours spent training?", "sql": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player", "example": {"db_id": "soccer_2", "query": "SELECT avg(HS) ,  max(HS) ,  min(HS) FROM Player", "query_toks": ["SELECT", "avg", "(", "HS", ")", ",", "max", "(", "HS", ")", ",", "min", "(", "HS", ")", "FROM", "Player"], "query_toks_no_value": ["select", "avg", "(", "hs", ")", ",", "max", "(", "hs", ")", ",", "min", "(", "hs", ")", "from", "player"], "question": "What is the average, maximum, and minimum for the number of hours spent training?", "question_toks": ["What", "is", "the", "average", ",", "maximum", ",", "and", "minimum", "for", "the", "number", "of", "hours", "spent", "training", "?"], "dataset_name": "spider", "guid": 1668}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the name and location of track with 1 race.", "sql": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "example": {"db_id": "race_track", "query": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1", "query_toks": ["SELECT", "T2.name", ",", "T2.location", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "GROUP", "BY", "T1.track_id", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "location", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "group", "by", "t1", ".", "track_id", "having", "count", "(", "*", ")", "=", "value"], "question": "Show the name and location of track with 1 race.", "question_toks": ["Show", "the", "name", "and", "location", "of", "track", "with", "1", "race", "."], "dataset_name": "spider", "guid": 1669}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each city, return the highest latitude among its stations.", "sql": "SELECT city ,  max(lat) FROM station GROUP BY city", "example": {"db_id": "bike_1", "query": "SELECT city ,  max(lat) FROM station GROUP BY city", "query_toks": ["SELECT", "city", ",", "max", "(", "lat", ")", "FROM", "station", "GROUP", "BY", "city"], "query_toks_no_value": ["select", "city", ",", "max", "(", "lat", ")", "from", "station", "group", "by", "city"], "question": "For each city, return the highest latitude among its stations.", "question_toks": ["For", "each", "city", ",", "return", "the", "highest", "latitude", "among", "its", "stations", "."], "dataset_name": "spider", "guid": 1670}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the names of members whose country is \"United States\" or \"Canada\".", "sql": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"", "example": {"db_id": "decoration_competition", "query": "SELECT Name FROM member WHERE Country  =  \"United States\" OR Country  =  \"Canada\"", "query_toks": ["SELECT", "Name", "FROM", "member", "WHERE", "Country", "=", "``", "United", "States", "''", "OR", "Country", "=", "``", "Canada", "''"], "query_toks_no_value": ["select", "name", "from", "member", "where", "country", "=", "value", "or", "country", "=", "value"], "question": "Show the names of members whose country is \"United States\" or \"Canada\".", "question_toks": ["Show", "the", "names", "of", "members", "whose", "country", "is", "``", "United", "States", "''", "or", "``", "Canada", "''", "."], "dataset_name": "spider", "guid": 1671}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.", "sql": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC", "example": {"db_id": "decoration_competition", "query": "SELECT T2.Name ,  T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID  =  T2.College_ID ORDER BY T2.Name ASC", "query_toks": ["SELECT", "T2.Name", ",", "T1.College_Location", "FROM", "college", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.College_ID", "=", "T2.College_ID", "ORDER", "BY", "T2.Name", "ASC"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "college_location", "from", "college", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "college_id", "=", "t2", ".", "college_id", "order", "by", "t2", ".", "name", "asc"], "question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.", "question_toks": ["Show", "the", "names", "of", "members", "and", "the", "locations", "of", "colleges", "they", "go", "to", "in", "ascending", "alphabetical", "order", "of", "member", "names", "."], "dataset_name": "spider", "guid": 1672}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the number of distinct name of losers.", "sql": "SELECT count(DISTINCT loser_name) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT count(DISTINCT loser_name) FROM matches", "query_toks": ["SELECT", "count", "(", "DISTINCT", "loser_name", ")", "FROM", "matches"], "query_toks_no_value": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches"], "question": "Find the number of distinct name of losers.", "question_toks": ["Find", "the", "number", "of", "distinct", "name", "of", "losers", "."], "dataset_name": "spider", "guid": 1673}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students received a yes from tryouts?", "sql": "SELECT count(*) FROM tryout WHERE decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM tryout WHERE decision  =  'yes'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "tryout", "WHERE", "decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tryout", "where", "decision", "=", "value"], "question": "How many students received a yes from tryouts?", "question_toks": ["How", "many", "students", "received", "a", "yes", "from", "tryouts", "?"], "dataset_name": "spider", "guid": 1674}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the number of distinct cities the stations are located at?", "sql": "SELECT count(DISTINCT city) FROM station", "example": {"db_id": "bike_1", "query": "SELECT count(DISTINCT city) FROM station", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "station"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "station"], "question": "What is the number of distinct cities the stations are located at?", "question_toks": ["What", "is", "the", "number", "of", "distinct", "cities", "the", "stations", "are", "located", "at", "?"], "dataset_name": "spider", "guid": 1675}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | How many gymnasts are from each hometown?", "sql": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown", "example": {"db_id": "gymnast", "query": "SELECT T2.Hometown ,  COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID GROUP BY T2.Hometown", "query_toks": ["SELECT", "T2.Hometown", ",", "COUNT", "(", "*", ")", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "GROUP", "BY", "T2.Hometown"], "query_toks_no_value": ["select", "t2", ".", "hometown", ",", "count", "(", "*", ")", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "hometown"], "question": "How many gymnasts are from each hometown?", "question_toks": ["How", "many", "gymnasts", "are", "from", "each", "hometown", "?"], "dataset_name": "spider", "guid": 1676}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Return all players sorted by college in ascending alphabetical order.", "sql": "SELECT player FROM match_season ORDER BY College ASC", "example": {"db_id": "match_season", "query": "SELECT player FROM match_season ORDER BY College ASC", "query_toks": ["SELECT", "player", "FROM", "match_season", "ORDER", "BY", "College", "ASC"], "query_toks_no_value": ["select", "player", "from", "match_season", "order", "by", "college", "asc"], "question": "Return all players sorted by college in ascending alphabetical order.", "question_toks": ["Return", "all", "players", "sorted", "by", "college", "in", "ascending", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 1677}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of all races that occurred after 12:00:00 or before 09:00:00?", "sql": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"", "example": {"db_id": "formula_1", "query": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"", "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "TIME", ">", "``", "12:00:00", "''", "OR", "TIME", "<", "``", "09:00:00", "''"], "query_toks_no_value": ["select", "name", "from", "races", "where", "time", ">", "value", "or", "time", "<", "value"], "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?", "question_toks": ["What", "are", "the", "names", "of", "all", "races", "that", "occurred", "after", "12:00:00", "or", "before", "09:00:00", "?"], "dataset_name": "spider", "guid": 1678}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show all distinct positions of matches.", "sql": "SELECT DISTINCT POSITION FROM match_season", "example": {"db_id": "match_season", "query": "SELECT DISTINCT POSITION FROM match_season", "query_toks": ["SELECT", "DISTINCT", "POSITION", "FROM", "match_season"], "query_toks_no_value": ["select", "distinct", "position", "from", "match_season"], "question": "Show all distinct positions of matches.", "question_toks": ["Show", "all", "distinct", "positions", "of", "matches", "."], "dataset_name": "spider", "guid": 1679}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the names of all the clubs starting with the oldest?", "sql": "SELECT name FROM club ORDER BY Start_year ASC", "example": {"db_id": "sports_competition", "query": "SELECT name FROM club ORDER BY Start_year ASC", "query_toks": ["SELECT", "name", "FROM", "club", "ORDER", "BY", "Start_year", "ASC"], "query_toks_no_value": ["select", "name", "from", "club", "order", "by", "start_year", "asc"], "question": "What are the names of all the clubs starting with the oldest?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "clubs", "starting", "with", "the", "oldest", "?"], "dataset_name": "spider", "guid": 1680}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.", "sql": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"", "example": {"db_id": "soccer_2", "query": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"", "query_toks": ["SELECT", "cName", ",", "enr", "FROM", "College", "WHERE", "enr", ">", "10000", "AND", "state", "=", "``", "LA", "''"], "query_toks_no_value": ["select", "cname", ",", "enr", "from", "college", "where", "enr", ">", "value", "and", "state", "=", "value"], "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.", "question_toks": ["Find", "the", "name", ",", "enrollment", "of", "the", "colleges", "whose", "size", "is", "bigger", "than", "10000", "and", "location", "is", "in", "state", "LA", "."], "dataset_name": "spider", "guid": 1681}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids of stations that are located in San Francisco and have average bike availability above 10.", "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "example": {"db_id": "bike_1", "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "query_toks": ["SELECT", "id", "FROM", "station", "WHERE", "city", "=", "``", "San", "Francisco", "''", "INTERSECT", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "avg", "(", "bikes_available", ")", ">", "10"], "query_toks_no_value": ["select", "id", "from", "station", "where", "city", "=", "value", "intersect", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "avg", "(", "bikes_available", ")", ">", "value"], "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.", "question_toks": ["What", "are", "the", "ids", "of", "stations", "that", "are", "located", "in", "San", "Francisco", "and", "have", "average", "bike", "availability", "above", "10", "."], "dataset_name": "spider", "guid": 1682}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | List the clubs having \"Davis Steven\" as a member.", "sql": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"", "example": {"db_id": "club_1", "query": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"", "query_toks": ["SELECT", "DISTINCT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Davis", "''", "AND", "t3.lname", "=", "``", "Steven", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "List the clubs having \"Davis Steven\" as a member.", "question_toks": ["List", "the", "clubs", "having", "``", "Davis", "Steven", "''", "as", "a", "member", "."], "dataset_name": "spider", "guid": 1683}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the average number of gold medals for clubs?", "sql": "SELECT avg(Gold) FROM club_rank", "example": {"db_id": "sports_competition", "query": "SELECT avg(Gold) FROM club_rank", "query_toks": ["SELECT", "avg", "(", "Gold", ")", "FROM", "club_rank"], "query_toks_no_value": ["select", "avg", "(", "gold", ")", "from", "club_rank"], "question": "What is the average number of gold medals for clubs?", "question_toks": ["What", "is", "the", "average", "number", "of", "gold", "medals", "for", "clubs", "?"], "dataset_name": "spider", "guid": 1684}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show different occupations along with the number of players in each occupation.", "sql": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation", "example": {"db_id": "riding_club", "query": "SELECT Occupation ,  COUNT(*) FROM player GROUP BY Occupation", "query_toks": ["SELECT", "Occupation", ",", "COUNT", "(", "*", ")", "FROM", "player", "GROUP", "BY", "Occupation"], "query_toks_no_value": ["select", "occupation", ",", "count", "(", "*", ")", "from", "player", "group", "by", "occupation"], "question": "Show different occupations along with the number of players in each occupation.", "question_toks": ["Show", "different", "occupations", "along", "with", "the", "number", "of", "players", "in", "each", "occupation", "."], "dataset_name": "spider", "guid": 1685}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are all the players who played in match season, sorted by college in ascending alphabetical order?", "sql": "SELECT player FROM match_season ORDER BY College ASC", "example": {"db_id": "match_season", "query": "SELECT player FROM match_season ORDER BY College ASC", "query_toks": ["SELECT", "player", "FROM", "match_season", "ORDER", "BY", "College", "ASC"], "query_toks_no_value": ["select", "player", "from", "match_season", "order", "by", "college", "asc"], "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?", "question_toks": ["What", "are", "all", "the", "players", "who", "played", "in", "match", "season", ",", "sorted", "by", "college", "in", "ascending", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1686}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the name of the players who received a card in descending order of the hours of training?", "sql": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC", "example": {"db_id": "soccer_2", "query": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC", "query_toks": ["SELECT", "pName", "FROM", "Player", "WHERE", "yCard", "=", "'yes", "'", "ORDER", "BY", "HS", "DESC"], "query_toks_no_value": ["select", "pname", "from", "player", "where", "ycard", "=", "value", "order", "by", "hs", "desc"], "question": "What are the name of the players who received a card in descending order of the hours of training?", "question_toks": ["What", "are", "the", "name", "of", "the", "players", "who", "received", "a", "card", "in", "descending", "order", "of", "the", "hours", "of", "training", "?"], "dataset_name": "spider", "guid": 1687}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the average number of hours spent practicing for students who got rejected?", "sql": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", "example": {"db_id": "soccer_2", "query": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'", "query_toks": ["SELECT", "avg", "(", "T1.HS", ")", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'no", "'"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "hs", ")", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "What is the average number of hours spent practicing for students who got rejected?", "question_toks": ["What", "is", "the", "average", "number", "of", "hours", "spent", "practicing", "for", "students", "who", "got", "rejected", "?"], "dataset_name": "spider", "guid": 1688}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the names of body builders whose total score is higher than 300?", "sql": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300", "example": {"db_id": "body_builder", "query": "SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  >  300", "query_toks": ["SELECT", "T2.Name", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Total", ">", "300"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "total", ">", "value"], "question": "What are the names of body builders whose total score is higher than 300?", "question_toks": ["What", "are", "the", "names", "of", "body", "builders", "whose", "total", "score", "is", "higher", "than", "300", "?"], "dataset_name": "spider", "guid": 1689}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What is the description of the club named \"Tennis Club\"?", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "clubdesc", "FROM", "club", "WHERE", "clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "clubdesc", "from", "club", "where", "clubname", "=", "value"], "question": "What is the description of the club named \"Tennis Club\"?", "question_toks": ["What", "is", "the", "description", "of", "the", "club", "named", "``", "Tennis", "Club", "''", "?"], "dataset_name": "spider", "guid": 1690}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the players who played for Columbus Crew, and how many years did each play for?", "sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "example": {"db_id": "match_season", "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "query_toks": ["SELECT", "T1.Player", ",", "T1.Years_Played", "FROM", "player", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id", "WHERE", "T2.Name", "=", "``", "Columbus", "Crew", "''"], "query_toks_no_value": ["select", "t1", ".", "player", ",", "t1", ".", "years_played", "from", "player", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id", "where", "t2", ".", "name", "=", "value"], "question": "What are the players who played for Columbus Crew, and how many years did each play for?", "question_toks": ["What", "are", "the", "players", "who", "played", "for", "Columbus", "Crew", ",", "and", "how", "many", "years", "did", "each", "play", "for", "?"], "dataset_name": "spider", "guid": 1691}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What is the average horizontal bar points for all gymnasts?", "sql": "SELECT avg(Horizontal_Bar_Points) FROM gymnast", "example": {"db_id": "gymnast", "query": "SELECT avg(Horizontal_Bar_Points) FROM gymnast", "query_toks": ["SELECT", "avg", "(", "Horizontal_Bar_Points", ")", "FROM", "gymnast"], "query_toks_no_value": ["select", "avg", "(", "horizontal_bar_points", ")", "from", "gymnast"], "question": "What is the average horizontal bar points for all gymnasts?", "question_toks": ["What", "is", "the", "average", "horizontal", "bar", "points", "for", "all", "gymnasts", "?"], "dataset_name": "spider", "guid": 1692}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each start station id, what is its name, longitude and average duration of trips started there?", "sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "query_toks": ["SELECT", "T1.name", ",", "T1.long", ",", "avg", "(", "T2.duration", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id", "GROUP", "BY", "T2.start_station_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "long", ",", "avg", "(", "t2", ".", "duration", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id", "group", "by", "t2", ".", "start_station_id"], "question": "For each start station id, what is its name, longitude and average duration of trips started there?", "question_toks": ["For", "each", "start", "station", "id", ",", "what", "is", "its", "name", ",", "longitude", "and", "average", "duration", "of", "trips", "started", "there", "?"], "dataset_name": "spider", "guid": 1693}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the names of tournaments that have more than 10 matches?", "sql": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "example": {"db_id": "wta_1", "query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10", "query_toks": ["SELECT", "tourney_name", "FROM", "matches", "GROUP", "BY", "tourney_name", "HAVING", "count", "(", "*", ")", ">", "10"], "query_toks_no_value": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of tournaments that have more than 10 matches?", "question_toks": ["What", "are", "the", "names", "of", "tournaments", "that", "have", "more", "than", "10", "matches", "?"], "dataset_name": "spider", "guid": 1694}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the total number of clubs.", "sql": "SELECT count(*) FROM club", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club"], "question": "Count the total number of clubs.", "question_toks": ["Count", "the", "total", "number", "of", "clubs", "."], "dataset_name": "spider", "guid": 1695}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each station, find its latitude and the minimum duration of trips that ended at the station.", "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "query_toks": ["SELECT", "T1.name", ",", "T1.lat", ",", "min", "(", "T2.duration", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.end_station_id", "GROUP", "BY", "T2.end_station_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "lat", ",", "min", "(", "t2", ".", "duration", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "end_station_id", "group", "by", "t2", ".", "end_station_id"], "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.", "question_toks": ["For", "each", "station", ",", "find", "its", "latitude", "and", "the", "minimum", "duration", "of", "trips", "that", "ended", "at", "the", "station", "."], "dataset_name": "spider", "guid": 1696}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | what is the name of the country that participated in the most tournament competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sports_competition", "query": "SELECT country FROM competition WHERE competition_type  =  'Tournament' GROUP BY country ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Tournament", "'", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "country", "from", "competition", "where", "competition_type", "=", "value", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "what is the name of the country that participated in the most tournament competitions?", "question_toks": ["what", "is", "the", "name", "of", "the", "country", "that", "participated", "in", "the", "most", "tournament", "competitions", "?"], "dataset_name": "spider", "guid": 1697}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | List the names of players that do not have coaches.", "sql": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)", "example": {"db_id": "riding_club", "query": "SELECT Player_name FROM player WHERE Player_ID NOT IN (SELECT Player_ID FROM player_coach)", "query_toks": ["SELECT", "Player_name", "FROM", "player", "WHERE", "Player_ID", "NOT", "IN", "(", "SELECT", "Player_ID", "FROM", "player_coach", ")"], "query_toks_no_value": ["select", "player_name", "from", "player", "where", "player_id", "not", "in", "(", "select", "player_id", "from", "player_coach", ")"], "question": "List the names of players that do not have coaches.", "question_toks": ["List", "the", "names", "of", "players", "that", "do", "not", "have", "coaches", "."], "dataset_name": "spider", "guid": 1698}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are all the different first names of the drivers who are in position as standing and won?", "sql": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1", "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value"], "question": "What are all the different first names of the drivers who are in position as standing and won?", "question_toks": ["What", "are", "all", "the", "different", "first", "names", "of", "the", "drivers", "who", "are", "in", "position", "as", "standing", "and", "won", "?"], "dataset_name": "spider", "guid": 1699}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the different names for each station that has ever had 7 bikes available?", "sql": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "WHERE", "T2.bikes_available", "=", "7"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "where", "t2", ".", "bikes_available", "=", "value"], "question": "What are the different names for each station that has ever had 7 bikes available?", "question_toks": ["What", "are", "the", "different", "names", "for", "each", "station", "that", "has", "ever", "had", "7", "bikes", "available", "?"], "dataset_name": "spider", "guid": 1700}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | what are the name of players who get more than the average points.", "sql": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "example": {"db_id": "sports_competition", "query": "SELECT name FROM player WHERE points  >  (SELECT avg(points) FROM player)", "query_toks": ["SELECT", "name", "FROM", "player", "WHERE", "points", ">", "(", "SELECT", "avg", "(", "points", ")", "FROM", "player", ")"], "query_toks_no_value": ["select", "name", "from", "player", "where", "points", ">", "(", "select", "avg", "(", "points", ")", "from", "player", ")"], "question": "what are the name of players who get more than the average points.", "question_toks": ["what", "are", "the", "name", "of", "players", "who", "get", "more", "than", "the", "average", "points", "."], "dataset_name": "spider", "guid": 1701}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"?", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''", "AND", "t3.sex", "=", "``", "M", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "sex", "=", "value"], "question": "What are the first name and last name of each male member in club \"Hopkins Student Enterprises\"?", "question_toks": ["What", "are", "the", "first", "name", "and", "last", "name", "of", "each", "male", "member", "in", "club", "``", "Hopkins", "Student", "Enterprises", "''", "?"], "dataset_name": "spider", "guid": 1702}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many players are there?", "sql": "SELECT count(*) FROM players", "example": {"db_id": "wta_1", "query": "SELECT count(*) FROM players", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "players"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "players"], "question": "How many players are there?", "question_toks": ["How", "many", "players", "are", "there", "?"], "dataset_name": "spider", "guid": 1703}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the most common competition type?", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Competition_type", "FROM", "competition", "GROUP", "BY", "Competition_type", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "competition_type", "from", "competition", "group", "by", "competition_type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common competition type?", "question_toks": ["What", "is", "the", "most", "common", "competition", "type", "?"], "dataset_name": "spider", "guid": 1704}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.", "sql": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1", "example": {"db_id": "swimming", "query": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1", "query_toks": ["SELECT", "t1.name", ",", "t1.nationality", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "WHERE", "RESULT", "=", "'Win", "'", "GROUP", "BY", "t2.swimmer_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "nationality", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "where", "result", "=", "value", "group", "by", "t2", ".", "swimmer_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.", "question_toks": ["Find", "the", "name", "and", "nationality", "of", "the", "swimmer", "who", "has", "won", "(", "i.e.", ",", "has", "a", "result", "of", "``", "win", "''", ")", "more", "than", "1", "time", "."], "dataset_name": "spider", "guid": 1705}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "sql": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"", "query_toks": ["SELECT", "avg", "(", "T2.fastestlapspeed", ")", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", "=", "2008", "AND", "T1.name", "=", "``", "Monaco", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "fastestlapspeed", ")", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", "=", "value", "and", "t1", ".", "name", "=", "value"], "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?", "question_toks": ["What", "is", "the", "average", "fastest", "lap", "speed", "in", "race", "named", "'Monaco", "Grand", "Prix", "'", "in", "2008", "?"], "dataset_name": "spider", "guid": 1706}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids of the stations in San Francisco that normally have more than 10 bikes available?", "sql": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "example": {"db_id": "bike_1", "query": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10", "query_toks": ["SELECT", "id", "FROM", "station", "WHERE", "city", "=", "``", "San", "Francisco", "''", "INTERSECT", "SELECT", "station_id", "FROM", "status", "GROUP", "BY", "station_id", "HAVING", "avg", "(", "bikes_available", ")", ">", "10"], "query_toks_no_value": ["select", "id", "from", "station", "where", "city", "=", "value", "intersect", "select", "station_id", "from", "status", "group", "by", "station_id", "having", "avg", "(", "bikes_available", ")", ">", "value"], "question": "What are the ids of the stations in San Francisco that normally have more than 10 bikes available?", "question_toks": ["What", "are", "the", "ids", "of", "the", "stations", "in", "San", "Francisco", "that", "normally", "have", "more", "than", "10", "bikes", "available", "?"], "dataset_name": "spider", "guid": 1707}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.", "sql": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;", "example": {"db_id": "body_builder", "query": "SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.snatch  >  140 OR T2.height  >  200;", "query_toks": ["SELECT", "T2.weight", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.people_id", "=", "T2.people_id", "WHERE", "T1.snatch", ">", "140", "OR", "T2.height", ">", "200", ";"], "query_toks_no_value": ["select", "t2", ".", "weight", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "snatch", ">", "value", "or", "t2", ".", "height", ">", "value"], "question": "List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.", "question_toks": ["List", "the", "weight", "of", "the", "body", "builders", "who", "have", "snatch", "score", "higher", "than", "140", "or", "have", "the", "height", "greater", "than", "200", "."], "dataset_name": "spider", "guid": 1708}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What information do you have on colleges sorted by increasing enrollment numbers?", "sql": "SELECT * FROM College ORDER BY enr", "example": {"db_id": "soccer_2", "query": "SELECT * FROM College ORDER BY enr", "query_toks": ["SELECT", "*", "FROM", "College", "ORDER", "BY", "enr"], "query_toks_no_value": ["select", "*", "from", "college", "order", "by", "enr"], "question": "What information do you have on colleges sorted by increasing enrollment numbers?", "question_toks": ["What", "information", "do", "you", "have", "on", "colleges", "sorted", "by", "increasing", "enrollment", "numbers", "?"], "dataset_name": "spider", "guid": 1709}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the different countries and the number of members from each.", "sql": "SELECT Country ,  COUNT(*) FROM member GROUP BY Country", "example": {"db_id": "decoration_competition", "query": "SELECT Country ,  COUNT(*) FROM member GROUP BY Country", "query_toks": ["SELECT", "Country", ",", "COUNT", "(", "*", ")", "FROM", "member", "GROUP", "BY", "Country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "member", "group", "by", "country"], "question": "Show the different countries and the number of members from each.", "question_toks": ["Show", "the", "different", "countries", "and", "the", "number", "of", "members", "from", "each", "."], "dataset_name": "spider", "guid": 1710}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the total number of clubs that have less than 10 medals in total?", "sql": "SELECT count(*) FROM club_rank WHERE Total  <  10", "example": {"db_id": "sports_competition", "query": "SELECT count(*) FROM club_rank WHERE Total  <  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club_rank", "WHERE", "Total", "<", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club_rank", "where", "total", "<", "value"], "question": "What is the total number of clubs that have less than 10 medals in total?", "question_toks": ["What", "is", "the", "total", "number", "of", "clubs", "that", "have", "less", "than", "10", "medals", "in", "total", "?"], "dataset_name": "spider", "guid": 1711}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of all the races that occurred in the year 2017?", "sql": "SELECT name FROM races WHERE YEAR = 2017", "example": {"db_id": "formula_1", "query": "SELECT name FROM races WHERE YEAR = 2017", "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "YEAR", "=", "2017"], "query_toks_no_value": ["select", "name", "from", "races", "where", "year", "=", "value"], "question": "What are the names of all the races that occurred in the year 2017?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "races", "that", "occurred", "in", "the", "year", "2017", "?"], "dataset_name": "spider", "guid": 1712}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the average age of losers and winners of all matches.", "sql": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "example": {"db_id": "wta_1", "query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches", "query_toks": ["SELECT", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "FROM", "matches"], "query_toks_no_value": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches"], "question": "Find the average age of losers and winners of all matches.", "question_toks": ["Find", "the", "average", "age", "of", "losers", "and", "winners", "of", "all", "matches", "."], "dataset_name": "spider", "guid": 1713}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the types of competition that have at most five competitions of that type.", "sql": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*)  <=  5", "query_toks": ["SELECT", "Competition_type", "FROM", "competition", "GROUP", "BY", "Competition_type", "HAVING", "COUNT", "(", "*", ")", "<", "=", "5"], "query_toks_no_value": ["select", "competition_type", "from", "competition", "group", "by", "competition_type", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "List the types of competition that have at most five competitions of that type.", "question_toks": ["List", "the", "types", "of", "competition", "that", "have", "at", "most", "five", "competitions", "of", "that", "type", "."], "dataset_name": "spider", "guid": 1714}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the names and ranks of the three youngest winners across all matches?", "sql": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "example": {"db_id": "wta_1", "query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3", "query_toks": ["SELECT", "DISTINCT", "winner_name", ",", "winner_rank", "FROM", "matches", "ORDER", "BY", "winner_age", "LIMIT", "3"], "query_toks_no_value": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "value"], "question": "What are the names and ranks of the three youngest winners across all matches?", "question_toks": ["What", "are", "the", "names", "and", "ranks", "of", "the", "three", "youngest", "winners", "across", "all", "matches", "?"], "dataset_name": "spider", "guid": 1715}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the earnings of poker players, ordered descending by value?", "sql": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "example": {"db_id": "poker_player", "query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC", "query_toks": ["SELECT", "Earnings", "FROM", "poker_player", "ORDER", "BY", "Earnings", "DESC"], "query_toks_no_value": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc"], "question": "What are the earnings of poker players, ordered descending by value?", "question_toks": ["What", "are", "the", "earnings", "of", "poker", "players", ",", "ordered", "descending", "by", "value", "?"], "dataset_name": "spider", "guid": 1716}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the times of elimination for wrestlers with over 50 days held?", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "example": {"db_id": "wrestler", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50", "query_toks": ["SELECT", "T1.Time", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "WHERE", "T2.Days_held", ">", "50"], "query_toks_no_value": ["select", "t1", ".", "time", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "where", "t2", ".", "days_held", ">", "value"], "question": "What are the times of elimination for wrestlers with over 50 days held?", "question_toks": ["What", "are", "the", "times", "of", "elimination", "for", "wrestlers", "with", "over", "50", "days", "held", "?"], "dataset_name": "spider", "guid": 1717}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What are the names, classes, and dates for all races?", "sql": "SELECT name ,  CLASS ,  date FROM race", "example": {"db_id": "race_track", "query": "SELECT name ,  CLASS ,  date FROM race", "query_toks": ["SELECT", "name", ",", "CLASS", ",", "date", "FROM", "race"], "query_toks_no_value": ["select", "name", ",", "class", ",", "date", "from", "race"], "question": "What are the names, classes, and dates for all races?", "question_toks": ["What", "are", "the", "names", ",", "classes", ",", "and", "dates", "for", "all", "races", "?"], "dataset_name": "spider", "guid": 1718}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the name of colleges that have at least two players.", "sql": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "example": {"db_id": "match_season", "query": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2", "query_toks": ["SELECT", "College", "FROM", "match_season", "GROUP", "BY", "College", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "college", "from", "match_season", "group", "by", "college", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the name of colleges that have at least two players.", "question_toks": ["Show", "the", "name", "of", "colleges", "that", "have", "at", "least", "two", "players", "."], "dataset_name": "spider", "guid": 1719}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the number of players for each hand type.", "sql": "SELECT count(*) ,  hand FROM players GROUP BY hand", "example": {"db_id": "wta_1", "query": "SELECT count(*) ,  hand FROM players GROUP BY hand", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "hand", "FROM", "players", "GROUP", "BY", "hand"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand"], "question": "Find the number of players for each hand type.", "question_toks": ["Find", "the", "number", "of", "players", "for", "each", "hand", "type", "."], "dataset_name": "spider", "guid": 1720}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | List the name and the number of stations for all the cities that have at least 15 stations.", "sql": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "example": {"db_id": "bike_1", "query": "SELECT city ,  COUNT(*) FROM station GROUP BY city HAVING COUNT(*)  >=  15", "query_toks": ["SELECT", "city", ",", "COUNT", "(", "*", ")", "FROM", "station", "GROUP", "BY", "city", "HAVING", "COUNT", "(", "*", ")", ">", "=", "15"], "query_toks_no_value": ["select", "city", ",", "count", "(", "*", ")", "from", "station", "group", "by", "city", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List the name and the number of stations for all the cities that have at least 15 stations.", "question_toks": ["List", "the", "name", "and", "the", "number", "of", "stations", "for", "all", "the", "cities", "that", "have", "at", "least", "15", "stations", "."], "dataset_name": "spider", "guid": 1721}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the money rank of the poker player with the greatest height.", "sql": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1", "query_toks": ["SELECT", "T2.Money_Rank", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "height", "desc", "limit", "value"], "question": "Return the money rank of the poker player with the greatest height.", "question_toks": ["Return", "the", "money", "rank", "of", "the", "poker", "player", "with", "the", "greatest", "height", "."], "dataset_name": "spider", "guid": 1722}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | How many members are there?", "sql": "SELECT count(*) FROM member", "example": {"db_id": "decoration_competition", "query": "SELECT count(*) FROM member", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "member"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "member"], "question": "How many members are there?", "question_toks": ["How", "many", "members", "are", "there", "?"], "dataset_name": "spider", "guid": 1723}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Which range contains the most mountains?", "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "climbing", "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Range", "FROM", "mountain", "GROUP", "BY", "Range", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "range", "from", "mountain", "group", "by", "range", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which range contains the most mountains?", "question_toks": ["Which", "range", "contains", "the", "most", "mountains", "?"], "dataset_name": "spider", "guid": 1724}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the total enrollment number of all colleges?", "sql": "SELECT sum(enr) FROM College", "example": {"db_id": "soccer_2", "query": "SELECT sum(enr) FROM College", "query_toks": ["SELECT", "sum", "(", "enr", ")", "FROM", "College"], "query_toks_no_value": ["select", "sum", "(", "enr", ")", "from", "college"], "question": "What is the total enrollment number of all colleges?", "question_toks": ["What", "is", "the", "total", "enrollment", "number", "of", "all", "colleges", "?"], "dataset_name": "spider", "guid": 1725}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the names of poker players?", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"], "question": "What are the names of poker players?", "question_toks": ["What", "are", "the", "names", "of", "poker", "players", "?"], "dataset_name": "spider", "guid": 1726}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the residences that have both a player of gender \"M\" and a player of gender \"F\".", "sql": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"", "example": {"db_id": "riding_club", "query": "SELECT Residence FROM player WHERE gender  =  \"M\" INTERSECT SELECT Residence FROM player WHERE gender  =  \"F\"", "query_toks": ["SELECT", "Residence", "FROM", "player", "WHERE", "gender", "=", "``", "M", "''", "INTERSECT", "SELECT", "Residence", "FROM", "player", "WHERE", "gender", "=", "``", "F", "''"], "query_toks_no_value": ["select", "residence", "from", "player", "where", "gender", "=", "value", "intersect", "select", "residence", "from", "player", "where", "gender", "=", "value"], "question": "Show the residences that have both a player of gender \"M\" and a player of gender \"F\".", "question_toks": ["Show", "the", "residences", "that", "have", "both", "a", "player", "of", "gender", "``", "M", "''", "and", "a", "player", "of", "gender", "``", "F", "''", "."], "dataset_name": "spider", "guid": 1727}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Where us the club named \"Tennis Club\" located?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "clublocation", "FROM", "club", "WHERE", "clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "clublocation", "from", "club", "where", "clubname", "=", "value"], "question": "Where us the club named \"Tennis Club\" located?", "question_toks": ["Where", "us", "the", "club", "named", "``", "Tennis", "Club", "''", "located", "?"], "dataset_name": "spider", "guid": 1728}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the types of competition and the number of competitions of each type.", "sql": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type", "query_toks": ["SELECT", "Competition_type", ",", "COUNT", "(", "*", ")", "FROM", "competition", "GROUP", "BY", "Competition_type"], "query_toks_no_value": ["select", "competition_type", ",", "count", "(", "*", ")", "from", "competition", "group", "by", "competition_type"], "question": "List the types of competition and the number of competitions of each type.", "question_toks": ["List", "the", "types", "of", "competition", "and", "the", "number", "of", "competitions", "of", "each", "type", "."], "dataset_name": "spider", "guid": 1729}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which club has the most members majoring in \"600\"?", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "club_1", "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.major  =  \"600\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.major", "=", "``", "600", "''", "GROUP", "BY", "t1.clubname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "major", "=", "value", "group", "by", "t1", ".", "clubname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which club has the most members majoring in \"600\"?", "question_toks": ["Which", "club", "has", "the", "most", "members", "majoring", "in", "``", "600", "''", "?"], "dataset_name": "spider", "guid": 1730}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the elimination moves of wrestlers whose team is \"Team Orton\"?", "sql": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"", "example": {"db_id": "wrestler", "query": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"", "query_toks": ["SELECT", "Elimination_Move", "FROM", "Elimination", "WHERE", "Team", "=", "``", "Team", "Orton", "''"], "query_toks_no_value": ["select", "elimination_move", "from", "elimination", "where", "team", "=", "value"], "question": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?", "question_toks": ["What", "are", "the", "elimination", "moves", "of", "wrestlers", "whose", "team", "is", "``", "Team", "Orton", "''", "?"], "dataset_name": "spider", "guid": 1731}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Show the hometowns shared by people older than 23 and younger than 20.", "sql": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "example": {"db_id": "gymnast", "query": "SELECT Hometown FROM people WHERE Age  >  23 INTERSECT SELECT Hometown FROM people WHERE Age  <  20", "query_toks": ["SELECT", "Hometown", "FROM", "people", "WHERE", "Age", ">", "23", "INTERSECT", "SELECT", "Hometown", "FROM", "people", "WHERE", "Age", "<", "20"], "query_toks_no_value": ["select", "hometown", "from", "people", "where", "age", ">", "value", "intersect", "select", "hometown", "from", "people", "where", "age", "<", "value"], "question": "Show the hometowns shared by people older than 23 and younger than 20.", "question_toks": ["Show", "the", "hometowns", "shared", "by", "people", "older", "than", "23", "and", "younger", "than", "20", "."], "dataset_name": "spider", "guid": 1732}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the countries that participated in both friendly and tournament type competitions?", "sql": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "example": {"db_id": "sports_competition", "query": "SELECT country FROM competition WHERE competition_type  =  'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type  =  'Tournament'", "query_toks": ["SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Friendly", "'", "INTERSECT", "SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Tournament", "'"], "query_toks_no_value": ["select", "country", "from", "competition", "where", "competition_type", "=", "value", "intersect", "select", "country", "from", "competition", "where", "competition_type", "=", "value"], "question": "What are the countries that participated in both friendly and tournament type competitions?", "question_toks": ["What", "are", "the", "countries", "that", "participated", "in", "both", "friendly", "and", "tournament", "type", "competitions", "?"], "dataset_name": "spider", "guid": 1733}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each end station id, what is its name, latitude, and minimum duration for trips ended there?", "sql": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id", "query_toks": ["SELECT", "T1.name", ",", "T1.lat", ",", "min", "(", "T2.duration", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.end_station_id", "GROUP", "BY", "T2.end_station_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "lat", ",", "min", "(", "t2", ".", "duration", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "end_station_id", "group", "by", "t2", ".", "end_station_id"], "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?", "question_toks": ["For", "each", "end", "station", "id", ",", "what", "is", "its", "name", ",", "latitude", ",", "and", "minimum", "duration", "for", "trips", "ended", "there", "?"], "dataset_name": "spider", "guid": 1734}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What is the total and minimum enrollment of all schools?", "sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "example": {"db_id": "university_basketball", "query": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "query_toks": ["SELECT", "sum", "(", "enrollment", ")", ",", "min", "(", "enrollment", ")", "FROM", "university"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "min", "(", "enrollment", ")", "from", "university"], "question": "What is the total and minimum enrollment of all schools?", "question_toks": ["What", "is", "the", "total", "and", "minimum", "enrollment", "of", "all", "schools", "?"], "dataset_name": "spider", "guid": 1735}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the number of members in club \"Bootup Baltimore\" whose age is below 18.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  <  18", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.age", "<", "18"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "age", "<", "value"], "question": "Count the number of members in club \"Bootup Baltimore\" whose age is below 18.", "question_toks": ["Count", "the", "number", "of", "members", "in", "club", "``", "Bootup", "Baltimore", "''", "whose", "age", "is", "below", "18", "."], "dataset_name": "spider", "guid": 1736}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | What is the race class with most number of races.", "sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "race_track", "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "CLASS", "FROM", "race", "GROUP", "BY", "CLASS", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "class", "from", "race", "group", "by", "class", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the race class with most number of races.", "question_toks": ["What", "is", "the", "race", "class", "with", "most", "number", "of", "races", "."], "dataset_name": "spider", "guid": 1737}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?", "sql": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000", "example": {"db_id": "swimming", "query": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000", "query_toks": ["SELECT", "country", "FROM", "stadium", "WHERE", "capacity", ">", "60000", "INTERSECT", "SELECT", "country", "FROM", "stadium", "WHERE", "capacity", "<", "50000"], "query_toks_no_value": ["select", "country", "from", "stadium", "where", "capacity", ">", "value", "intersect", "select", "country", "from", "stadium", "where", "capacity", "<", "value"], "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?", "question_toks": ["Which", "country", "has", "both", "stadiums", "with", "capacity", "greater", "than", "60000", "and", "stadiums", "with", "capacity", "less", "than", "50000", "?"], "dataset_name": "spider", "guid": 1738}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | find the names of loser and winner who played in the match with greatest number of minutes.", "sql": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", ",", "loser_name", "FROM", "matches", "ORDER", "BY", "minutes", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "value"], "question": "find the names of loser and winner who played in the match with greatest number of minutes.", "question_toks": ["find", "the", "names", "of", "loser", "and", "winner", "who", "played", "in", "the", "match", "with", "greatest", "number", "of", "minutes", "."], "dataset_name": "spider", "guid": 1739}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of stadiums whose capacity is smaller than the average capacity.", "sql": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)", "example": {"db_id": "swimming", "query": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)", "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "capacity", "<", "(", "SELECT", "avg", "(", "capacity", ")", "FROM", "stadium", ")"], "query_toks_no_value": ["select", "name", "from", "stadium", "where", "capacity", "<", "(", "select", "avg", "(", "capacity", ")", "from", "stadium", ")"], "question": "Find the names of stadiums whose capacity is smaller than the average capacity.", "question_toks": ["Find", "the", "names", "of", "stadiums", "whose", "capacity", "is", "smaller", "than", "the", "average", "capacity", "."], "dataset_name": "spider", "guid": 1740}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the different types of player positions?", "sql": "SELECT count(DISTINCT pPos) FROM tryout", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT pPos) FROM tryout", "query_toks": ["SELECT", "count", "(", "DISTINCT", "pPos", ")", "FROM", "tryout"], "query_toks_no_value": ["select", "count", "(", "distinct", "ppos", ")", "from", "tryout"], "question": "What are the different types of player positions?", "question_toks": ["What", "are", "the", "different", "types", "of", "player", "positions", "?"], "dataset_name": "spider", "guid": 1741}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which club has the most female students as their members? Give me the name of the club.", "sql": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "club_1", "query": "SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.sex  =  \"F\" GROUP BY t1.clubname ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.clubname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.sex", "=", "``", "F", "''", "GROUP", "BY", "t1.clubname", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "clubname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "sex", "=", "value", "group", "by", "t1", ".", "clubname", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which club has the most female students as their members? Give me the name of the club.", "question_toks": ["Which", "club", "has", "the", "most", "female", "students", "as", "their", "members", "?", "Give", "me", "the", "name", "of", "the", "club", "."], "dataset_name": "spider", "guid": 1742}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Return the elimination movies of wrestlers on Team Orton.", "sql": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"", "example": {"db_id": "wrestler", "query": "SELECT Elimination_Move FROM Elimination WHERE Team  =  \"Team Orton\"", "query_toks": ["SELECT", "Elimination_Move", "FROM", "Elimination", "WHERE", "Team", "=", "``", "Team", "Orton", "''"], "query_toks_no_value": ["select", "elimination_move", "from", "elimination", "where", "team", "=", "value"], "question": "Return the elimination movies of wrestlers on Team Orton.", "question_toks": ["Return", "the", "elimination", "movies", "of", "wrestlers", "on", "Team", "Orton", "."], "dataset_name": "spider", "guid": 1743}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the total and minimum enrollments across all schools.", "sql": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "example": {"db_id": "university_basketball", "query": "SELECT sum(enrollment) ,  min(enrollment) FROM university", "query_toks": ["SELECT", "sum", "(", "enrollment", ")", ",", "min", "(", "enrollment", ")", "FROM", "university"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "min", "(", "enrollment", ")", "from", "university"], "question": "Return the total and minimum enrollments across all schools.", "question_toks": ["Return", "the", "total", "and", "minimum", "enrollments", "across", "all", "schools", "."], "dataset_name": "spider", "guid": 1744}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the first name and country code of the oldest player?", "sql": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "country_code", "FROM", "players", "ORDER", "BY", "birth_date", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "value"], "question": "What is the first name and country code of the oldest player?", "question_toks": ["What", "is", "the", "first", "name", "and", "country", "code", "of", "the", "oldest", "player", "?"], "dataset_name": "spider", "guid": 1745}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Count the number of climbers.", "sql": "SELECT count(*) FROM climber", "example": {"db_id": "climbing", "query": "SELECT count(*) FROM climber", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "climber"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "climber"], "question": "Count the number of climbers.", "question_toks": ["Count", "the", "number", "of", "climbers", "."], "dataset_name": "spider", "guid": 1746}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Give the names of tracks that do not have a race in the class 'GT'.", "sql": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", "example": {"db_id": "race_track", "query": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'", "query_toks": ["SELECT", "name", "FROM", "track", "EXCEPT", "SELECT", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "WHERE", "T1.class", "=", "'GT", "'"], "query_toks_no_value": ["select", "name", "from", "track", "except", "select", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "where", "t1", ".", "class", "=", "value"], "question": "Give the names of tracks that do not have a race in the class 'GT'.", "question_toks": ["Give", "the", "names", "of", "tracks", "that", "do", "not", "have", "a", "race", "in", "the", "class", "'GT", "'", "."], "dataset_name": "spider", "guid": 1747}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Count the number of different affiliation types.", "sql": "SELECT count(DISTINCT affiliation) FROM university", "example": {"db_id": "university_basketball", "query": "SELECT count(DISTINCT affiliation) FROM university", "query_toks": ["SELECT", "count", "(", "DISTINCT", "affiliation", ")", "FROM", "university"], "query_toks_no_value": ["select", "count", "(", "distinct", "affiliation", ")", "from", "university"], "question": "Count the number of different affiliation types.", "question_toks": ["Count", "the", "number", "of", "different", "affiliation", "types", "."], "dataset_name": "spider", "guid": 1748}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the names of members in ascending order of their rank in rounds.", "sql": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC", "example": {"db_id": "decoration_competition", "query": "SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID ORDER BY Rank_in_Round ASC", "query_toks": ["SELECT", "T1.Name", "FROM", "member", "AS", "T1", "JOIN", "round", "AS", "T2", "ON", "T1.Member_ID", "=", "T2.Member_ID", "ORDER", "BY", "Rank_in_Round", "ASC"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "member", "as", "t1", "join", "round", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "order", "by", "rank_in_round", "asc"], "question": "Show the names of members in ascending order of their rank in rounds.", "question_toks": ["Show", "the", "names", "of", "members", "in", "ascending", "order", "of", "their", "rank", "in", "rounds", "."], "dataset_name": "spider", "guid": 1749}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the names of wrestlers who have never been eliminated?", "sql": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler WHERE Wrestler_ID NOT IN (SELECT Wrestler_ID FROM elimination)", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "WHERE", "Wrestler_ID", "NOT", "IN", "(", "SELECT", "Wrestler_ID", "FROM", "elimination", ")"], "query_toks_no_value": ["select", "name", "from", "wrestler", "where", "wrestler_id", "not", "in", "(", "select", "wrestler_id", "from", "elimination", ")"], "question": "What are the names of wrestlers who have never been eliminated?", "question_toks": ["What", "are", "the", "names", "of", "wrestlers", "who", "have", "never", "been", "eliminated", "?"], "dataset_name": "spider", "guid": 1750}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Count the number of tracks.", "sql": "SELECT count(*) FROM track", "example": {"db_id": "race_track", "query": "SELECT count(*) FROM track", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "track"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "track"], "question": "Count the number of tracks.", "question_toks": ["Count", "the", "number", "of", "tracks", "."], "dataset_name": "spider", "guid": 1751}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the most common position of players in match seasons.", "sql": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "match_season", "query": "SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "POSITION", "FROM", "match_season", "GROUP", "BY", "POSITION", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "position", "from", "match_season", "group", "by", "position", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the most common position of players in match seasons.", "question_toks": ["Show", "the", "most", "common", "position", "of", "players", "in", "match", "seasons", "."], "dataset_name": "spider", "guid": 1752}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the number of clubs located at \"HHH\".", "sql": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club WHERE clublocation  =  \"HHH\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "WHERE", "clublocation", "=", "``", "HHH", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "where", "clublocation", "=", "value"], "question": "Count the number of clubs located at \"HHH\".", "question_toks": ["Count", "the", "number", "of", "clubs", "located", "at", "``", "HHH", "''", "."], "dataset_name": "spider", "guid": 1753}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the players and years played for players from team \"Columbus Crew\".", "sql": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "example": {"db_id": "match_season", "query": "SELECT T1.Player , T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"", "query_toks": ["SELECT", "T1.Player", ",", "T1.Years_Played", "FROM", "player", "AS", "T1", "JOIN", "team", "AS", "T2", "ON", "T1.Team", "=", "T2.Team_id", "WHERE", "T2.Name", "=", "``", "Columbus", "Crew", "''"], "query_toks_no_value": ["select", "t1", ".", "player", ",", "t1", ".", "years_played", "from", "player", "as", "t1", "join", "team", "as", "t2", "on", "t1", ".", "team", "=", "t2", ".", "team_id", "where", "t2", ".", "name", "=", "value"], "question": "Show the players and years played for players from team \"Columbus Crew\".", "question_toks": ["Show", "the", "players", "and", "years", "played", "for", "players", "from", "team", "``", "Columbus", "Crew", "''", "."], "dataset_name": "spider", "guid": 1754}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Count the number of universities that do not participate in the baketball match.", "sql": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "example": {"db_id": "university_basketball", "query": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "university", "WHERE", "school_id", "NOT", "IN", "(", "SELECT", "school_id", "FROM", "basketball_match", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "university", "where", "school_id", "not", "in", "(", "select", "school_id", "from", "basketball_match", ")"], "question": "Count the number of universities that do not participate in the baketball match.", "question_toks": ["Count", "the", "number", "of", "universities", "that", "do", "not", "participate", "in", "the", "baketball", "match", "."], "dataset_name": "spider", "guid": 1755}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What is the time of elimination for the wrestler with the most days held?", "sql": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "example": {"db_id": "wrestler", "query": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1", "query_toks": ["SELECT", "T1.Time", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "ORDER", "BY", "T2.Days_held", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "time", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "order", "by", "t2", ".", "days_held", "desc", "limit", "value"], "question": "What is the time of elimination for the wrestler with the most days held?", "question_toks": ["What", "is", "the", "time", "of", "elimination", "for", "the", "wrestler", "with", "the", "most", "days", "held", "?"], "dataset_name": "spider", "guid": 1756}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the number of students who participate in the tryout for each college ordered by descending count.", "sql": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC", "example": {"db_id": "soccer_2", "query": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "cName", "FROM", "tryout", "GROUP", "BY", "cName", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "cname", "from", "tryout", "group", "by", "cname", "order", "by", "count", "(", "*", ")", "desc"], "question": "Find the number of students who participate in the tryout for each college ordered by descending count.", "question_toks": ["Find", "the", "number", "of", "students", "who", "participate", "in", "the", "tryout", "for", "each", "college", "ordered", "by", "descending", "count", "."], "dataset_name": "spider", "guid": 1757}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "example": {"db_id": "climbing", "query": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "query_toks": ["SELECT", "Country", "FROM", "mountain", "WHERE", "Height", ">", "5600", "INTERSECT", "SELECT", "Country", "FROM", "mountain", "WHERE", "Height", "<", "5200"], "query_toks_no_value": ["select", "country", "from", "mountain", "where", "height", ">", "value", "intersect", "select", "country", "from", "mountain", "where", "height", "<", "value"], "question": "Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.", "question_toks": ["Show", "the", "countries", "that", "have", "mountains", "with", "height", "more", "than", "5600", "stories", "and", "mountains", "with", "height", "less", "than", "5200", "."], "dataset_name": "spider", "guid": 1758}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the average bike availability in stations that are not located in Palo Alto?", "sql": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")", "example": {"db_id": "bike_1", "query": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")", "query_toks": ["SELECT", "avg", "(", "bikes_available", ")", "FROM", "status", "WHERE", "station_id", "NOT", "IN", "(", "SELECT", "id", "FROM", "station", "WHERE", "city", "=", "``", "Palo", "Alto", "''", ")"], "query_toks_no_value": ["select", "avg", "(", "bikes_available", ")", "from", "status", "where", "station_id", "not", "in", "(", "select", "id", "from", "station", "where", "city", "=", "value", ")"], "question": "What is the average bike availability in stations that are not located in Palo Alto?", "question_toks": ["What", "is", "the", "average", "bike", "availability", "in", "stations", "that", "are", "not", "located", "in", "Palo", "Alto", "?"], "dataset_name": "spider", "guid": 1759}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.major", "=", "``", "600", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "major", "=", "value"], "question": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.", "question_toks": ["Which", "members", "of", "``", "Bootup", "Baltimore", "''", "major", "in", "``", "600", "''", "?", "Give", "me", "their", "first", "names", "and", "last", "names", "."], "dataset_name": "spider", "guid": 1760}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many students are enrolled in college?", "sql": "SELECT sum(enr) FROM College", "example": {"db_id": "soccer_2", "query": "SELECT sum(enr) FROM College", "query_toks": ["SELECT", "sum", "(", "enr", ")", "FROM", "College"], "query_toks_no_value": ["select", "sum", "(", "enr", ")", "from", "college"], "question": "How many students are enrolled in college?", "question_toks": ["How", "many", "students", "are", "enrolled", "in", "college", "?"], "dataset_name": "spider", "guid": 1761}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Bootup", "Baltimore", "''", "AND", "t3.major", "=", "``", "600", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "major", "=", "value"], "question": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.", "question_toks": ["Find", "all", "members", "of", "``", "Bootup", "Baltimore", "''", "whose", "major", "is", "``", "600", "''", ".", "Show", "the", "first", "name", "and", "last", "name", "."], "dataset_name": "spider", "guid": 1762}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | How many persons are not body builders?", "sql": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)", "example": {"db_id": "body_builder", "query": "SELECT count(*) FROM people WHERE people_id NOT IN (SELECT People_ID FROM body_builder)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "people", "WHERE", "people_id", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "body_builder", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "body_builder", ")"], "question": "How many persons are not body builders?", "question_toks": ["How", "many", "persons", "are", "not", "body", "builders", "?"], "dataset_name": "spider", "guid": 1763}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the different affiliations, and how many schools with each have an enrollment size of above 20000?", "sql": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "example": {"db_id": "university_basketball", "query": "SELECT count(*) ,  affiliation FROM university WHERE enrollment  >  20000 GROUP BY affiliation", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "affiliation", "FROM", "university", "WHERE", "enrollment", ">", "20000", "GROUP", "BY", "affiliation"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "affiliation", "from", "university", "where", "enrollment", ">", "value", "group", "by", "affiliation"], "question": "What are the different affiliations, and how many schools with each have an enrollment size of above 20000?", "question_toks": ["What", "are", "the", "different", "affiliations", ",", "and", "how", "many", "schools", "with", "each", "have", "an", "enrollment", "size", "of", "above", "20000", "?"], "dataset_name": "spider", "guid": 1764}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | How many drivers did not race in 2009?", "sql": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "example": {"db_id": "formula_1", "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )", "query_toks": ["SELECT", "count", "(", "DISTINCT", "driverId", ")", "FROM", "results", "WHERE", "raceId", "NOT", "IN", "(", "SELECT", "raceId", "FROM", "races", "WHERE", "YEAR", "!", "=", "2009", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "driverid", ")", "from", "results", "where", "raceid", "not", "in", "(", "select", "raceid", "from", "races", "where", "year", "!", "=", "value", ")"], "question": "How many drivers did not race in 2009?", "question_toks": ["How", "many", "drivers", "did", "not", "race", "in", "2009", "?"], "dataset_name": "spider", "guid": 1765}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the id of the trip that started from the station with the highest dock count?", "sql": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", "FROM", "trip", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.start_station_id", "=", "T2.id", "ORDER", "BY", "T2.dock_count", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", "from", "trip", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "start_station_id", "=", "t2", ".", "id", "order", "by", "t2", ".", "dock_count", "desc", "limit", "value"], "question": "What is the id of the trip that started from the station with the highest dock count?", "question_toks": ["What", "is", "the", "id", "of", "the", "trip", "that", "started", "from", "the", "station", "with", "the", "highest", "dock", "count", "?"], "dataset_name": "spider", "guid": 1766}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Which country has at most 3 stadiums listed?", "sql": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3", "example": {"db_id": "swimming", "query": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3", "query_toks": ["SELECT", "country", "FROM", "stadium", "GROUP", "BY", "country", "HAVING", "count", "(", "*", ")", "<", "=", "3"], "query_toks_no_value": ["select", "country", "from", "stadium", "group", "by", "country", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "Which country has at most 3 stadiums listed?", "question_toks": ["Which", "country", "has", "at", "most", "3", "stadiums", "listed", "?"], "dataset_name": "spider", "guid": 1767}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the average points of players from club with name \"AIB\".", "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"", "example": {"db_id": "sports_competition", "query": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"", "query_toks": ["SELECT", "avg", "(", "T2.Points", ")", "FROM", "club", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.Club_ID", "=", "T2.Club_ID", "WHERE", "T1.name", "=", "``", "AIB", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "points", ")", "from", "club", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id", "where", "t1", ".", "name", "=", "value"], "question": "What is the average points of players from club with name \"AIB\".", "question_toks": ["What", "is", "the", "average", "points", "of", "players", "from", "club", "with", "name", "``", "AIB", "''", "."], "dataset_name": "spider", "guid": 1768}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | List all information regarding the basketball match.", "sql": "SELECT * FROM basketball_match", "example": {"db_id": "university_basketball", "query": "SELECT * FROM basketball_match", "query_toks": ["SELECT", "*", "FROM", "basketball_match"], "query_toks_no_value": ["select", "*", "from", "basketball_match"], "question": "List all information regarding the basketball match.", "question_toks": ["List", "all", "information", "regarding", "the", "basketball", "match", "."], "dataset_name": "spider", "guid": 1769}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Retrieve the average age of members of the club \"Tennis Club\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "avg", "(", "t3.age", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "age", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Retrieve the average age of members of the club \"Tennis Club\".", "question_toks": ["Retrieve", "the", "average", "age", "of", "members", "of", "the", "club", "``", "Tennis", "Club", "''", "."], "dataset_name": "spider", "guid": 1770}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the types of competition and number of competitions for that type?", "sql": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type", "example": {"db_id": "sports_competition", "query": "SELECT Competition_type ,  COUNT(*) FROM competition GROUP BY Competition_type", "query_toks": ["SELECT", "Competition_type", ",", "COUNT", "(", "*", ")", "FROM", "competition", "GROUP", "BY", "Competition_type"], "query_toks_no_value": ["select", "competition_type", ",", "count", "(", "*", ")", "from", "competition", "group", "by", "competition_type"], "question": "What are the types of competition and number of competitions for that type?", "question_toks": ["What", "are", "the", "types", "of", "competition", "and", "number", "of", "competitions", "for", "that", "type", "?"], "dataset_name": "spider", "guid": 1771}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?", "sql": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "example": {"db_id": "formula_1", "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"", "query_toks": ["SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Australian", "Grand", "Prix", "''", "EXCEPT", "SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Chinese", "Grand", "Prix", "''"], "query_toks_no_value": ["select", "t3", ".", "forename", ",", "t3", ".", "surname", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value", "except", "select", "t3", ".", "forename", ",", "t3", ".", "surname", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value"], "question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?", "question_toks": ["What", "are", "the", "forenames", "and", "surnames", "of", "drivers", "who", "participated", "in", "the", "races", "named", "Australian", "Grand", "Prix", "but", "not", "the", "races", "named", "Chinese", "Grand", "Prix", "?"], "dataset_name": "spider", "guid": 1772}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?", "sql": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"", "example": {"db_id": "wrestler", "query": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"", "query_toks": ["SELECT", "DISTINCT", "Reign", "FROM", "wrestler", "WHERE", "LOCATION", "!", "=", "``", "Tokyo", ",", "Japan", "''"], "query_toks_no_value": ["select", "distinct", "reign", "from", "wrestler", "where", "location", "!", "=", "value"], "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?", "question_toks": ["What", "are", "the", "distinct", "reigns", "of", "wrestlers", "whose", "location", "is", "not", "``", "Tokyo", ",", "Japan", "''", "?"], "dataset_name": "spider", "guid": 1773}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names of stations that have latitude lower than 37.5?", "sql": "SELECT name FROM station WHERE lat  <  37.5", "example": {"db_id": "bike_1", "query": "SELECT name FROM station WHERE lat  <  37.5", "query_toks": ["SELECT", "name", "FROM", "station", "WHERE", "lat", "<", "37.5"], "query_toks_no_value": ["select", "name", "from", "station", "where", "lat", "<", "value"], "question": "What are the names of stations that have latitude lower than 37.5?", "question_toks": ["What", "are", "the", "names", "of", "stations", "that", "have", "latitude", "lower", "than", "37.5", "?"], "dataset_name": "spider", "guid": 1774}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | List the names of people that are not poker players.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "example": {"db_id": "poker_player", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_ID", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "poker_player", ")"], "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")"], "question": "List the names of people that are not poker players.", "question_toks": ["List", "the", "names", "of", "people", "that", "are", "not", "poker", "players", "."], "dataset_name": "spider", "guid": 1775}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | How many countries are there in total?", "sql": "SELECT count(*) FROM country", "example": {"db_id": "match_season", "query": "SELECT count(*) FROM country", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "country"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "country"], "question": "How many countries are there in total?", "question_toks": ["How", "many", "countries", "are", "there", "in", "total", "?"], "dataset_name": "spider", "guid": 1776}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | List all the cities in a decreasing order of each city's stations' highest latitude.", "sql": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "example": {"db_id": "bike_1", "query": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC", "query_toks": ["SELECT", "city", "FROM", "station", "GROUP", "BY", "city", "ORDER", "BY", "max", "(", "lat", ")", "DESC"], "query_toks_no_value": ["select", "city", "from", "station", "group", "by", "city", "order", "by", "max", "(", "lat", ")", "desc"], "question": "List all the cities in a decreasing order of each city's stations' highest latitude.", "question_toks": ["List", "all", "the", "cities", "in", "a", "decreasing", "order", "of", "each", "city", "'s", "stations", "'", "highest", "latitude", "."], "dataset_name": "spider", "guid": 1777}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many total tours were there for each ranking date?", "sql": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "example": {"db_id": "wta_1", "query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date", "query_toks": ["SELECT", "sum", "(", "tours", ")", ",", "ranking_date", "FROM", "rankings", "GROUP", "BY", "ranking_date"], "query_toks_no_value": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date"], "question": "How many total tours were there for each ranking date?", "question_toks": ["How", "many", "total", "tours", "were", "there", "for", "each", "ranking", "date", "?"], "dataset_name": "spider", "guid": 1778}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the number of left handed winners who participated in the WTA Championships.", "sql": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "example": {"db_id": "wta_1", "query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'", "query_toks": ["SELECT", "count", "(", "DISTINCT", "winner_name", ")", "FROM", "matches", "WHERE", "tourney_name", "=", "'WTA", "Championships", "'", "AND", "winner_hand", "=", "'L", "'"], "query_toks_no_value": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "value", "and", "winner_hand", "=", "value"], "question": "Find the number of left handed winners who participated in the WTA Championships.", "question_toks": ["Find", "the", "number", "of", "left", "handed", "winners", "who", "participated", "in", "the", "WTA", "Championships", "."], "dataset_name": "spider", "guid": 1779}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the different ids and names of the stations that have had more than 12 bikes available?", "sql": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "example": {"db_id": "bike_1", "query": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12", "query_toks": ["SELECT", "DISTINCT", "T1.id", ",", "T1.name", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "WHERE", "T2.bikes_available", ">", "12"], "query_toks_no_value": ["select", "distinct", "t1", ".", "id", ",", "t1", ".", "name", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "where", "t2", ".", "bikes_available", ">", "value"], "question": "What are the different ids and names of the stations that have had more than 12 bikes available?", "question_toks": ["What", "are", "the", "different", "ids", "and", "names", "of", "the", "stations", "that", "have", "had", "more", "than", "12", "bikes", "available", "?"], "dataset_name": "spider", "guid": 1780}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | List the countries that have more than one mountain.", "sql": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "example": {"db_id": "climbing", "query": "SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "Country", "FROM", "mountain", "GROUP", "BY", "Country", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "country", "from", "mountain", "group", "by", "country", "having", "count", "(", "*", ")", ">", "value"], "question": "List the countries that have more than one mountain.", "question_toks": ["List", "the", "countries", "that", "have", "more", "than", "one", "mountain", "."], "dataset_name": "spider", "guid": 1781}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Give the class of races that is most common.", "sql": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "race_track", "query": "SELECT CLASS FROM race GROUP BY CLASS ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "CLASS", "FROM", "race", "GROUP", "BY", "CLASS", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "class", "from", "race", "group", "by", "class", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give the class of races that is most common.", "question_toks": ["Give", "the", "class", "of", "races", "that", "is", "most", "common", "."], "dataset_name": "spider", "guid": 1782}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''", "AND", "t2.position", "=", "``", "CTO", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t2", ".", "position", "=", "value"], "question": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.", "question_toks": ["Who", "is", "the", "``", "CTO", "''", "of", "club", "``", "Hopkins", "Student", "Enterprises", "''", "?", "Show", "the", "first", "name", "and", "last", "name", "."], "dataset_name": "spider", "guid": 1783}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the id and last name of the driver who participated in the most races after 2010?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "WHERE", "T3.year", ">", "2010", "GROUP", "BY", "T1.driverid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "where", "t3", ".", "year", ">", "value", "group", "by", "t1", ".", "driverid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id and last name of the driver who participated in the most races after 2010?", "question_toks": ["What", "is", "the", "id", "and", "last", "name", "of", "the", "driver", "who", "participated", "in", "the", "most", "races", "after", "2010", "?"], "dataset_name": "spider", "guid": 1784}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | List the distinct region of clubs in ascending alphabetical order.", "sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "example": {"db_id": "sports_competition", "query": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "query_toks": ["SELECT", "DISTINCT", "Region", "FROM", "club", "ORDER", "BY", "Region", "ASC"], "query_toks_no_value": ["select", "distinct", "region", "from", "club", "order", "by", "region", "asc"], "question": "List the distinct region of clubs in ascending alphabetical order.", "question_toks": ["List", "the", "distinct", "region", "of", "clubs", "in", "ascending", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 1785}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the total points for all gymnasts, ordered by total points descending?", "sql": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "example": {"db_id": "gymnast", "query": "SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC", "query_toks": ["SELECT", "Total_Points", "FROM", "gymnast", "ORDER", "BY", "Total_Points", "DESC"], "query_toks_no_value": ["select", "total_points", "from", "gymnast", "order", "by", "total_points", "desc"], "question": "What are the total points for all gymnasts, ordered by total points descending?", "question_toks": ["What", "are", "the", "total", "points", "for", "all", "gymnasts", ",", "ordered", "by", "total", "points", "descending", "?"], "dataset_name": "spider", "guid": 1786}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | When was the school with the largest enrollment founded?", "sql": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1", "query_toks": ["SELECT", "founded", "FROM", "university", "ORDER", "BY", "enrollment", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "founded", "from", "university", "order", "by", "enrollment", "desc", "limit", "value"], "question": "When was the school with the largest enrollment founded?", "question_toks": ["When", "was", "the", "school", "with", "the", "largest", "enrollment", "founded", "?"], "dataset_name": "spider", "guid": 1787}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | Find the total ranking points for each player and their first name.", "sql": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "example": {"db_id": "wta_1", "query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name", "query_toks": ["SELECT", "sum", "(", "ranking_points", ")", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "rankings", "AS", "T2", "ON", "T1.player_id", "=", "T2.player_id", "GROUP", "BY", "T1.first_name"], "query_toks_no_value": ["select", "sum", "(", "ranking_points", ")", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "player_id", "group", "by", "t1", ".", "first_name"], "question": "Find the total ranking points for each player and their first name.", "question_toks": ["Find", "the", "total", "ranking", "points", "for", "each", "player", "and", "their", "first", "name", "."], "dataset_name": "spider", "guid": 1788}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids of the trips that lasted the longest and how long did they last?", "sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "query_toks": ["SELECT", "id", ",", "duration", "FROM", "trip", "ORDER", "BY", "duration", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "id", ",", "duration", "from", "trip", "order", "by", "duration", "desc", "limit", "value"], "question": "What are the ids of the trips that lasted the longest and how long did they last?", "question_toks": ["What", "are", "the", "ids", "of", "the", "trips", "that", "lasted", "the", "longest", "and", "how", "long", "did", "they", "last", "?"], "dataset_name": "spider", "guid": 1789}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of the swimmers who have no record.", "sql": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)", "example": {"db_id": "swimming", "query": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)", "query_toks": ["SELECT", "name", "FROM", "swimmer", "WHERE", "id", "NOT", "IN", "(", "SELECT", "swimmer_id", "FROM", "record", ")"], "query_toks_no_value": ["select", "name", "from", "swimmer", "where", "id", "not", "in", "(", "select", "swimmer_id", "from", "record", ")"], "question": "Find the names of the swimmers who have no record.", "question_toks": ["Find", "the", "names", "of", "the", "swimmers", "who", "have", "no", "record", "."], "dataset_name": "spider", "guid": 1790}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each zip code, return the average mean temperature of August there.", "sql": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code", "example": {"db_id": "bike_1", "query": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code", "query_toks": ["SELECT", "zip_code", ",", "avg", "(", "mean_temperature_f", ")", "FROM", "weather", "WHERE", "date", "LIKE", "``", "8/", "%", "''", "GROUP", "BY", "zip_code"], "query_toks_no_value": ["select", "zip_code", ",", "avg", "(", "mean_temperature_f", ")", "from", "weather", "where", "date", "like", "value", "group", "by", "zip_code"], "question": "For each zip code, return the average mean temperature of August there.", "question_toks": ["For", "each", "zip", "code", ",", "return", "the", "average", "mean", "temperature", "of", "August", "there", "."], "dataset_name": "spider", "guid": 1791}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | For each station, return its longitude and the average duration of trips that started from the station.", "sql": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "example": {"db_id": "bike_1", "query": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id", "query_toks": ["SELECT", "T1.name", ",", "T1.long", ",", "avg", "(", "T2.duration", ")", "FROM", "station", "AS", "T1", "JOIN", "trip", "AS", "T2", "ON", "T1.id", "=", "T2.start_station_id", "GROUP", "BY", "T2.start_station_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "long", ",", "avg", "(", "t2", ".", "duration", ")", "from", "station", "as", "t1", "join", "trip", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "start_station_id", "group", "by", "t2", ".", "start_station_id"], "question": "For each station, return its longitude and the average duration of trips that started from the station.", "question_toks": ["For", "each", "station", ",", "return", "its", "longitude", "and", "the", "average", "duration", "of", "trips", "that", "started", "from", "the", "station", "."], "dataset_name": "spider", "guid": 1792}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is average number of students enrolled in Florida colleges?", "sql": "SELECT avg(enr) FROM College WHERE state  =  'FL'", "example": {"db_id": "soccer_2", "query": "SELECT avg(enr) FROM College WHERE state  =  'FL'", "query_toks": ["SELECT", "avg", "(", "enr", ")", "FROM", "College", "WHERE", "state", "=", "'FL", "'"], "query_toks_no_value": ["select", "avg", "(", "enr", ")", "from", "college", "where", "state", "=", "value"], "question": "What is average number of students enrolled in Florida colleges?", "question_toks": ["What", "is", "average", "number", "of", "students", "enrolled", "in", "Florida", "colleges", "?"], "dataset_name": "spider", "guid": 1793}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the description of the club called \"Tennis Club\".", "sql": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT clubdesc FROM club WHERE clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "clubdesc", "FROM", "club", "WHERE", "clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "clubdesc", "from", "club", "where", "clubname", "=", "value"], "question": "Find the description of the club called \"Tennis Club\".", "question_toks": ["Find", "the", "description", "of", "the", "club", "called", "``", "Tennis", "Club", "''", "."], "dataset_name": "spider", "guid": 1794}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name of different colleges involved in the tryout in alphabetical order.", "sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "query_toks": ["SELECT", "DISTINCT", "cName", "FROM", "tryout", "ORDER", "BY", "cName"], "query_toks_no_value": ["select", "distinct", "cname", "from", "tryout", "order", "by", "cname"], "question": "Find the name of different colleges involved in the tryout in alphabetical order.", "question_toks": ["Find", "the", "name", "of", "different", "colleges", "involved", "in", "the", "tryout", "in", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 1795}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the names of all races held after 2000 in Spain?", "sql": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "races", "AS", "T1", "JOIN", "circuits", "AS", "T2", "ON", "T1.circuitid", "=", "T2.circuitid", "WHERE", "T2.country", "=", "``", "Spain", "''", "AND", "T1.year", ">", "2000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "races", "as", "t1", "join", "circuits", "as", "t2", "on", "t1", ".", "circuitid", "=", "t2", ".", "circuitid", "where", "t2", ".", "country", "=", "value", "and", "t1", ".", "year", ">", "value"], "question": "What are the names of all races held after 2000 in Spain?", "question_toks": ["What", "are", "the", "names", "of", "all", "races", "held", "after", "2000", "in", "Spain", "?"], "dataset_name": "spider", "guid": 1796}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | List the first and last name of all players in the order of birth date.", "sql": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "example": {"db_id": "wta_1", "query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "players", "ORDER", "BY", "birth_date"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date"], "question": "List the first and last name of all players in the order of birth date.", "question_toks": ["List", "the", "first", "and", "last", "name", "of", "all", "players", "in", "the", "order", "of", "birth", "date", "."], "dataset_name": "spider", "guid": 1797}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | How many players are from each country?", "sql": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "example": {"db_id": "wta_1", "query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "country_code", "FROM", "players", "GROUP", "BY", "country_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code"], "question": "How many players are from each country?", "question_toks": ["How", "many", "players", "are", "from", "each", "country", "?"], "dataset_name": "spider", "guid": 1798}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the range that has the most number of mountains.", "sql": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "climbing", "query": "SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Range", "FROM", "mountain", "GROUP", "BY", "Range", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "range", "from", "mountain", "group", "by", "range", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the range that has the most number of mountains.", "question_toks": ["Show", "the", "range", "that", "has", "the", "most", "number", "of", "mountains", "."], "dataset_name": "spider", "guid": 1799}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.", "sql": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "example": {"db_id": "club_1", "query": "SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\"", "query_toks": ["SELECT", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''"], "query_toks_no_value": ["select", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Who are the members of the club named \"Hopkins Student Enterprises\"? Show the last name.", "question_toks": ["Who", "are", "the", "members", "of", "the", "club", "named", "``", "Hopkins", "Student", "Enterprises", "''", "?", "Show", "the", "last", "name", "."], "dataset_name": "spider", "guid": 1800}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.", "sql": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"", "example": {"db_id": "club_1", "query": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"", "query_toks": ["SELECT", "t3.fname", ",", "t3.lname", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Hopkins", "Student", "Enterprises", "''", "AND", "t3.sex", "=", "``", "M", "''"], "query_toks_no_value": ["select", "t3", ".", "fname", ",", "t3", ".", "lname", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value", "and", "t3", ".", "sex", "=", "value"], "question": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.", "question_toks": ["Find", "all", "the", "male", "members", "of", "club", "``", "Hopkins", "Student", "Enterprises", "''", ".", "Show", "the", "first", "name", "and", "last", "name", "."], "dataset_name": "spider", "guid": 1801}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the id, forename and number of races of all drivers who have at least participated in two races?", "sql": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.driverid", ",", "T1.forename", ",", "count", "(", "*", ")", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "forename", ",", "count", "(", "*", ")", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the id, forename and number of races of all drivers who have at least participated in two races?", "question_toks": ["Find", "the", "id", ",", "forename", "and", "number", "of", "races", "of", "all", "drivers", "who", "have", "at", "least", "participated", "in", "two", "races", "?"], "dataset_name": "spider", "guid": 1802}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the average earnings of poker players with height higher than 200?", "sql": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "example": {"db_id": "poker_player", "query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200", "query_toks": ["SELECT", "avg", "(", "T2.Earnings", ")", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Height", ">", "200"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "height", ">", "value"], "question": "What is the average earnings of poker players with height higher than 200?", "question_toks": ["What", "is", "the", "average", "earnings", "of", "poker", "players", "with", "height", "higher", "than", "200", "?"], "dataset_name": "spider", "guid": 1803}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the money rank of the poker player with the highest earnings?", "sql": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1", "query_toks": ["SELECT", "Money_Rank", "FROM", "poker_player", "ORDER", "BY", "Earnings", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "value"], "question": "What is the money rank of the poker player with the highest earnings?", "question_toks": ["What", "is", "the", "money", "rank", "of", "the", "poker", "player", "with", "the", "highest", "earnings", "?"], "dataset_name": "spider", "guid": 1804}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the public schools and what are their locations?", "sql": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "example": {"db_id": "university_basketball", "query": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'", "query_toks": ["SELECT", "school", ",", "LOCATION", "FROM", "university", "WHERE", "affiliation", "=", "'Public", "'"], "query_toks_no_value": ["select", "school", ",", "location", "from", "university", "where", "affiliation", "=", "value"], "question": "What are the public schools and what are their locations?", "question_toks": ["What", "are", "the", "public", "schools", "and", "what", "are", "their", "locations", "?"], "dataset_name": "spider", "guid": 1805}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show all team names.", "sql": "SELECT Name FROM Team", "example": {"db_id": "match_season", "query": "SELECT Name FROM Team", "query_toks": ["SELECT", "Name", "FROM", "Team"], "query_toks_no_value": ["select", "name", "from", "team"], "question": "Show all team names.", "question_toks": ["Show", "all", "team", "names", "."], "dataset_name": "spider", "guid": 1806}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many states that have some college students playing in the mid position but not in the goalie position.", "sql": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "example": {"db_id": "soccer_2", "query": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "(", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'mid", "'", "EXCEPT", "SELECT", "T1.state", "FROM", "college", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.cName", "=", "T2.cName", "WHERE", "T2.pPos", "=", "'goalie", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "(", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", "except", "select", "t1", ".", "state", "from", "college", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "cname", "=", "t2", ".", "cname", "where", "t2", ".", "ppos", "=", "value", ")"], "question": "How many states that have some college students playing in the mid position but not in the goalie position.", "question_toks": ["How", "many", "states", "that", "have", "some", "college", "students", "playing", "in", "the", "mid", "position", "but", "not", "in", "the", "goalie", "position", "."], "dataset_name": "spider", "guid": 1807}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | What are the distinct hometowns of gymnasts with total points more than 57.5?", "sql": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "example": {"db_id": "gymnast", "query": "SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID WHERE T1.Total_Points  >  57.5", "query_toks": ["SELECT", "DISTINCT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "WHERE", "T1.Total_Points", ">", "57.5"], "query_toks_no_value": ["select", "distinct", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "where", "t1", ".", "total_points", ">", "value"], "question": "What are the distinct hometowns of gymnasts with total points more than 57.5?", "question_toks": ["What", "are", "the", "distinct", "hometowns", "of", "gymnasts", "with", "total", "points", "more", "than", "57.5", "?"], "dataset_name": "spider", "guid": 1808}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the height of the mountain climbed by the climber with the maximum points.", "sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "example": {"db_id": "climbing", "query": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "query_toks": ["SELECT", "T2.Height", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID", "ORDER", "BY", "T1.Points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "height", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id", "order", "by", "t1", ".", "points", "desc", "limit", "value"], "question": "Show the height of the mountain climbed by the climber with the maximum points.", "question_toks": ["Show", "the", "height", "of", "the", "mountain", "climbed", "by", "the", "climber", "with", "the", "maximum", "points", "."], "dataset_name": "spider", "guid": 1809}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the ids and durations of the trips with the top 3 durations?", "sql": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "example": {"db_id": "bike_1", "query": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3", "query_toks": ["SELECT", "id", ",", "duration", "FROM", "trip", "ORDER", "BY", "duration", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "id", ",", "duration", "from", "trip", "order", "by", "duration", "desc", "limit", "value"], "question": "What are the ids and durations of the trips with the top 3 durations?", "question_toks": ["What", "are", "the", "ids", "and", "durations", "of", "the", "trips", "with", "the", "top", "3", "durations", "?"], "dataset_name": "spider", "guid": 1810}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Return the name, location, and seating of the track that was opened in the most recent year.", "sql": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "example": {"db_id": "race_track", "query": "SELECT name ,  LOCATION ,  seating FROM track ORDER BY year_opened DESC LIMIT 1", "query_toks": ["SELECT", "name", ",", "LOCATION", ",", "seating", "FROM", "track", "ORDER", "BY", "year_opened", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "location", ",", "seating", "from", "track", "order", "by", "year_opened", "desc", "limit", "value"], "question": "Return the name, location, and seating of the track that was opened in the most recent year.", "question_toks": ["Return", "the", "name", ",", "location", ",", "and", "seating", "of", "the", "track", "that", "was", "opened", "in", "the", "most", "recent", "year", "."], "dataset_name": "spider", "guid": 1811}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Who are the players that have names containing the letter a?", "sql": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%'", "query_toks": ["SELECT", "DISTINCT", "pName", "FROM", "Player", "WHERE", "pName", "LIKE", "'", "%", "a", "%", "'"], "query_toks_no_value": ["select", "distinct", "pname", "from", "player", "where", "pname", "like", "value"], "question": "Who are the players that have names containing the letter a?", "question_toks": ["Who", "are", "the", "players", "that", "have", "names", "containing", "the", "letter", "a", "?"], "dataset_name": "spider", "guid": 1812}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.", "sql": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName", "example": {"db_id": "soccer_2", "query": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName", "query_toks": ["SELECT", "cName", "FROM", "College", "WHERE", "enr", ">", "18000", "ORDER", "BY", "cName"], "query_toks_no_value": ["select", "cname", "from", "college", "where", "enr", ">", "value", "order", "by", "cname"], "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.", "question_toks": ["List", "the", "name", "of", "the", "colleges", "whose", "enrollment", "is", "greater", "18000", "sorted", "by", "the", "college", "'s", "name", "."], "dataset_name": "spider", "guid": 1813}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | List countries that have more than one swimmer.", "sql": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1", "example": {"db_id": "swimming", "query": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1", "query_toks": ["SELECT", "nationality", ",", "count", "(", "*", ")", "FROM", "swimmer", "GROUP", "BY", "nationality", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "nationality", ",", "count", "(", "*", ")", "from", "swimmer", "group", "by", "nationality", "having", "count", "(", "*", ")", ">", "value"], "question": "List countries that have more than one swimmer.", "question_toks": ["List", "countries", "that", "have", "more", "than", "one", "swimmer", "."], "dataset_name": "spider", "guid": 1814}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Return the name of the mountain with the greatest height.", "sql": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "example": {"db_id": "climbing", "query": "SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "mountain", "ORDER", "BY", "Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "mountain", "order", "by", "height", "desc", "limit", "value"], "question": "Return the name of the mountain with the greatest height.", "question_toks": ["Return", "the", "name", "of", "the", "mountain", "with", "the", "greatest", "height", "."], "dataset_name": "spider", "guid": 1815}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the names of players and names of their coaches in descending order of the votes of players.", "sql": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC", "example": {"db_id": "riding_club", "query": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC", "query_toks": ["SELECT", "T3.Player_name", ",", "T2.coach_name", "FROM", "player_coach", "AS", "T1", "JOIN", "coach", "AS", "T2", "ON", "T1.Coach_ID", "=", "T2.Coach_ID", "JOIN", "player", "AS", "T3", "ON", "T1.Player_ID", "=", "T3.Player_ID", "ORDER", "BY", "T3.Votes", "DESC"], "query_toks_no_value": ["select", "t3", ".", "player_name", ",", "t2", ".", "coach_name", "from", "player_coach", "as", "t1", "join", "coach", "as", "t2", "on", "t1", ".", "coach_id", "=", "t2", ".", "coach_id", "join", "player", "as", "t3", "on", "t1", ".", "player_id", "=", "t3", ".", "player_id", "order", "by", "t3", ".", "votes", "desc"], "question": "Show the names of players and names of their coaches in descending order of the votes of players.", "question_toks": ["Show", "the", "names", "of", "players", "and", "names", "of", "their", "coaches", "in", "descending", "order", "of", "the", "votes", "of", "players", "."], "dataset_name": "spider", "guid": 1816}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What is the average total score of body builders with height bigger than 200?", "sql": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200", "example": {"db_id": "body_builder", "query": "SELECT avg(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  200", "query_toks": ["SELECT", "avg", "(", "T1.Total", ")", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Height", ">", "200"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "total", ")", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "height", ">", "value"], "question": "What is the average total score of body builders with height bigger than 200?", "question_toks": ["What", "is", "the", "average", "total", "score", "of", "body", "builders", "with", "height", "bigger", "than", "200", "?"], "dataset_name": "spider", "guid": 1817}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Count the number of clubs for which the student named \"Eric Tai\" is a member.", "sql": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"", "example": {"db_id": "club_1", "query": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t1.clubname", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Eric", "''", "AND", "t3.lname", "=", "``", "Tai", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "clubname", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.", "question_toks": ["Count", "the", "number", "of", "clubs", "for", "which", "the", "student", "named", "``", "Eric", "Tai", "''", "is", "a", "member", "."], "dataset_name": "spider", "guid": 1818}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Show the season, the player, and the name of the country that player belongs to.", "sql": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "example": {"db_id": "match_season", "query": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country", "query_toks": ["SELECT", "T2.Season", ",", "T2.Player", ",", "T1.Country_name", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country"], "query_toks_no_value": ["select", "t2", ".", "season", ",", "t2", ".", "player", ",", "t1", ".", "country_name", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country"], "question": "Show the season, the player, and the name of the country that player belongs to.", "question_toks": ["Show", "the", "season", ",", "the", "player", ",", "and", "the", "name", "of", "the", "country", "that", "player", "belongs", "to", "."], "dataset_name": "spider", "guid": 1819}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | Return the average age across all gymnasts.", "sql": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "example": {"db_id": "gymnast", "query": "SELECT avg(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "query_toks": ["SELECT", "avg", "(", "T2.Age", ")", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "age", ")", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id"], "question": "Return the average age across all gymnasts.", "question_toks": ["Return", "the", "average", "age", "across", "all", "gymnasts", "."], "dataset_name": "spider", "guid": 1820}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | How many distinct countries are the climbers from?", "sql": "SELECT COUNT(DISTINCT Country) FROM climber", "example": {"db_id": "climbing", "query": "SELECT COUNT(DISTINCT Country) FROM climber", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "Country", ")", "FROM", "climber"], "query_toks_no_value": ["select", "count", "(", "distinct", "country", ")", "from", "climber"], "question": "How many distinct countries are the climbers from?", "question_toks": ["How", "many", "distinct", "countries", "are", "the", "climbers", "from", "?"], "dataset_name": "spider", "guid": 1821}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?", "sql": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos", "example": {"db_id": "soccer_2", "query": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos", "query_toks": ["SELECT", "max", "(", "T1.HS", ")", ",", "pPos", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T1.HS", ">", "1000", "GROUP", "BY", "T2.pPos"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "hs", ")", ",", "ppos", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t1", ".", "hs", ">", "value", "group", "by", "t2", ".", "ppos"], "question": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?", "question_toks": ["For", "each", "position", ",", "what", "is", "the", "maximum", "number", "of", "hours", "for", "students", "who", "spent", "more", "than", "1000", "hours", "training", "?"], "dataset_name": "spider", "guid": 1822}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "sql": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "example": {"db_id": "wta_1", "query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1", "query_toks": ["SELECT", "winner_name", "FROM", "matches", "WHERE", "tourney_name", "=", "'Australian", "Open", "'", "ORDER", "BY", "winner_rank_points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "value", "order", "by", "winner_rank_points", "desc", "limit", "value"], "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "question_toks": ["What", "is", "the", "name", "of", "the", "winner", "with", "the", "most", "rank", "points", "who", "participated", "in", "the", "Australian", "Open", "tournament", "?"], "dataset_name": "spider", "guid": 1823}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?", "sql": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)", "query_toks": ["SELECT", "DISTINCT", "driverid", ",", "STOP", "FROM", "pitstops", "WHERE", "duration", ">", "(", "SELECT", "min", "(", "duration", ")", "FROM", "pitstops", "WHERE", "raceid", "=", "841", ")"], "query_toks_no_value": ["select", "distinct", "driverid", ",", "stop", "from", "pitstops", "where", "duration", ">", "(", "select", "min", "(", "duration", ")", "from", "pitstops", "where", "raceid", "=", "value", ")"], "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?", "question_toks": ["Find", "the", "distinct", "driver", "id", "of", "all", "drivers", "that", "have", "a", "longer", "stop", "duration", "than", "some", "drivers", "in", "the", "race", "whose", "id", "is", "841", "?"], "dataset_name": "spider", "guid": 1824}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the days that had the smallest temperature range, and what was that range?", "sql": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1", "query_toks": ["SELECT", "date", ",", "max_temperature_f", "-", "min_temperature_f", "FROM", "weather", "ORDER", "BY", "max_temperature_f", "-", "min_temperature_f", "LIMIT", "1"], "query_toks_no_value": ["select", "date", ",", "max_temperature_f", "-", "min_temperature_f", "from", "weather", "order", "by", "max_temperature_f", "-", "min_temperature_f", "limit", "value"], "question": "What are the days that had the smallest temperature range, and what was that range?", "question_toks": ["What", "are", "the", "days", "that", "had", "the", "smallest", "temperature", "range", ",", "and", "what", "was", "that", "range", "?"], "dataset_name": "spider", "guid": 1825}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the countries that have both mountains that are higher than 5600 and lower than 5200?", "sql": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "example": {"db_id": "climbing", "query": "SELECT Country FROM mountain WHERE Height  >  5600 INTERSECT SELECT Country FROM mountain WHERE Height  <  5200", "query_toks": ["SELECT", "Country", "FROM", "mountain", "WHERE", "Height", ">", "5600", "INTERSECT", "SELECT", "Country", "FROM", "mountain", "WHERE", "Height", "<", "5200"], "query_toks_no_value": ["select", "country", "from", "mountain", "where", "height", ">", "value", "intersect", "select", "country", "from", "mountain", "where", "height", "<", "value"], "question": "What are the countries that have both mountains that are higher than 5600 and lower than 5200?", "question_toks": ["What", "are", "the", "countries", "that", "have", "both", "mountains", "that", "are", "higher", "than", "5600", "and", "lower", "than", "5200", "?"], "dataset_name": "spider", "guid": 1826}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Return the official native languages of countries who have players from Maryland or Duke colleges.", "sql": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"", "example": {"db_id": "match_season", "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"", "query_toks": ["SELECT", "T1.Official_native_language", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.College", "=", "``", "Maryland", "''", "OR", "T2.College", "=", "``", "Duke", "''"], "query_toks_no_value": ["select", "t1", ".", "official_native_language", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "college", "=", "value", "or", "t2", ".", "college", "=", "value"], "question": "Return the official native languages of countries who have players from Maryland or Duke colleges.", "question_toks": ["Return", "the", "official", "native", "languages", "of", "countries", "who", "have", "players", "from", "Maryland", "or", "Duke", "colleges", "."], "dataset_name": "spider", "guid": 1827}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Count the number of trips that did not end in San Francisco city.", "sql": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"", "example": {"db_id": "bike_1", "query": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "trip", "AS", "T1", "JOIN", "station", "AS", "T2", "ON", "T1.end_station_id", "=", "T2.id", "WHERE", "T2.city", "!", "=", "``", "San", "Francisco", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "trip", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "end_station_id", "=", "t2", ".", "id", "where", "t2", ".", "city", "!", "=", "value"], "question": "Count the number of trips that did not end in San Francisco city.", "question_toks": ["Count", "the", "number", "of", "trips", "that", "did", "not", "end", "in", "San", "Francisco", "city", "."], "dataset_name": "spider", "guid": 1828}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?", "sql": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000", "query_toks": ["SELECT", "DISTINCT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.milliseconds", "<", "93000"], "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "milliseconds", "<", "value"], "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?", "question_toks": ["What", "are", "the", "forenames", "and", "surnames", "of", "all", "unique", "drivers", "who", "had", "a", "lap", "time", "of", "less", "than", "93000", "milliseconds", "?"], "dataset_name": "spider", "guid": 1829}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the team names of the universities whose enrollments are smaller than the average enrollment size.", "sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "example": {"db_id": "university_basketball", "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "query_toks": ["SELECT", "t2.team_name", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "WHERE", "enrollment", "<", "(", "SELECT", "avg", "(", "enrollment", ")", "FROM", "university", ")"], "query_toks_no_value": ["select", "t2", ".", "team_name", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "enrollment", "<", "(", "select", "avg", "(", "enrollment", ")", "from", "university", ")"], "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.", "question_toks": ["Find", "the", "team", "names", "of", "the", "universities", "whose", "enrollments", "are", "smaller", "than", "the", "average", "enrollment", "size", "."], "dataset_name": "spider", "guid": 1830}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the maximum enrollment across all schools.", "sql": "SELECT max(Enrollment) FROM university", "example": {"db_id": "university_basketball", "query": "SELECT max(Enrollment) FROM university", "query_toks": ["SELECT", "max", "(", "Enrollment", ")", "FROM", "university"], "query_toks_no_value": ["select", "max", "(", "enrollment", ")", "from", "university"], "question": "Return the maximum enrollment across all schools.", "question_toks": ["Return", "the", "maximum", "enrollment", "across", "all", "schools", "."], "dataset_name": "spider", "guid": 1831}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Who are the players from UCLA?", "sql": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"", "example": {"db_id": "match_season", "query": "SELECT Player FROM match_season WHERE College  =  \"UCLA\"", "query_toks": ["SELECT", "Player", "FROM", "match_season", "WHERE", "College", "=", "``", "UCLA", "''"], "query_toks_no_value": ["select", "player", "from", "match_season", "where", "college", "=", "value"], "question": "Who are the players from UCLA?", "question_toks": ["Who", "are", "the", "players", "from", "UCLA", "?"], "dataset_name": "spider", "guid": 1832}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | Find the countries that have never participated in any competition with Friendly type.", "sql": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", "example": {"db_id": "sports_competition", "query": "SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type  =  'Friendly'", "query_toks": ["SELECT", "country", "FROM", "competition", "EXCEPT", "SELECT", "country", "FROM", "competition", "WHERE", "competition_type", "=", "'Friendly", "'"], "query_toks_no_value": ["select", "country", "from", "competition", "except", "select", "country", "from", "competition", "where", "competition_type", "=", "value"], "question": "Find the countries that have never participated in any competition with Friendly type.", "question_toks": ["Find", "the", "countries", "that", "have", "never", "participated", "in", "any", "competition", "with", "Friendly", "type", "."], "dataset_name": "spider", "guid": 1833}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the total student enrollment for different affiliation type schools.", "sql": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "example": {"db_id": "university_basketball", "query": "SELECT sum(enrollment) ,  affiliation FROM university GROUP BY affiliation", "query_toks": ["SELECT", "sum", "(", "enrollment", ")", ",", "affiliation", "FROM", "university", "GROUP", "BY", "affiliation"], "query_toks_no_value": ["select", "sum", "(", "enrollment", ")", ",", "affiliation", "from", "university", "group", "by", "affiliation"], "question": "Find the total student enrollment for different affiliation type schools.", "question_toks": ["Find", "the", "total", "student", "enrollment", "for", "different", "affiliation", "type", "schools", "."], "dataset_name": "spider", "guid": 1834}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What are the final tables made and best finishes for all poker players?", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "example": {"db_id": "poker_player", "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "query_toks": ["SELECT", "Final_Table_Made", ",", "Best_Finish", "FROM", "poker_player"], "query_toks_no_value": ["select", "final_table_made", ",", "best_finish", "from", "poker_player"], "question": "What are the final tables made and best finishes for all poker players?", "question_toks": ["What", "are", "the", "final", "tables", "made", "and", "best", "finishes", "for", "all", "poker", "players", "?"], "dataset_name": "spider", "guid": 1835}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | How many different cities have these stations?", "sql": "SELECT count(DISTINCT city) FROM station", "example": {"db_id": "bike_1", "query": "SELECT count(DISTINCT city) FROM station", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "station"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "station"], "question": "How many different cities have these stations?", "question_toks": ["How", "many", "different", "cities", "have", "these", "stations", "?"], "dataset_name": "spider", "guid": 1836}}
{"text": "player: Player_ID, Sponsor_name, Player_name, Gender, Residence, Occupation, Votes, Rank; club: Club_ID, Club_name, Region, Start_year; coach: Coach_ID, Coach_name, Gender, Club_ID, Rank; player_coach: Player_ID, Coach_ID, Starting_year; match_result: Rank, Club_ID, Gold, Big_Silver, Small_Silver, Bronze, Points | Show the residences that have at least two players.", "sql": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2", "example": {"db_id": "riding_club", "query": "SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Residence", "FROM", "player", "GROUP", "BY", "Residence", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "residence", "from", "player", "group", "by", "residence", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the residences that have at least two players.", "question_toks": ["Show", "the", "residences", "that", "have", "at", "least", "two", "players", "."], "dataset_name": "spider", "guid": 1837}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What is the average number of points for players from the \"AIB\" club?", "sql": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"", "example": {"db_id": "sports_competition", "query": "SELECT avg(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T1.name  =  \"AIB\"", "query_toks": ["SELECT", "avg", "(", "T2.Points", ")", "FROM", "club", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.Club_ID", "=", "T2.Club_ID", "WHERE", "T1.name", "=", "``", "AIB", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "points", ")", "from", "club", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id", "where", "t1", ".", "name", "=", "value"], "question": "What is the average number of points for players from the \"AIB\" club?", "question_toks": ["What", "is", "the", "average", "number", "of", "points", "for", "players", "from", "the", "``", "AIB", "''", "club", "?"], "dataset_name": "spider", "guid": 1838}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | How many distinct teams are involved in match seasons?", "sql": "SELECT count(DISTINCT Team) FROM match_season", "example": {"db_id": "match_season", "query": "SELECT count(DISTINCT Team) FROM match_season", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Team", ")", "FROM", "match_season"], "query_toks_no_value": ["select", "count", "(", "distinct", "team", ")", "from", "match_season"], "question": "How many distinct teams are involved in match seasons?", "question_toks": ["How", "many", "distinct", "teams", "are", "involved", "in", "match", "seasons", "?"], "dataset_name": "spider", "guid": 1839}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Return the name of the team and the acc during the regular season for the school that was founded the earliest.", "sql": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1", "query_toks": ["SELECT", "t2.team_name", ",", "t2.ACC_Regular_Season", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "ORDER", "BY", "t1.founded", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "team_name", ",", "t2", ".", "acc_regular_season", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "order", "by", "t1", ".", "founded", "limit", "value"], "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.", "question_toks": ["Return", "the", "name", "of", "the", "team", "and", "the", "acc", "during", "the", "regular", "season", "for", "the", "school", "that", "was", "founded", "the", "earliest", "."], "dataset_name": "spider", "guid": 1840}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | List the names of all distinct races in reversed  lexicographic order?", "sql": "SELECT DISTINCT name FROM races ORDER BY name DESC", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT name FROM races ORDER BY name DESC", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "races", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "distinct", "name", "from", "races", "order", "by", "name", "desc"], "question": "List the names of all distinct races in reversed  lexicographic order?", "question_toks": ["List", "the", "names", "of", "all", "distinct", "races", "in", "reversed", "lexicographic", "order", "?"], "dataset_name": "spider", "guid": 1841}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the names of members and the decoration themes they have.", "sql": "SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID", "example": {"db_id": "decoration_competition", "query": "SELECT T1.Name ,  T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID  =  T2.Member_ID", "query_toks": ["SELECT", "T1.Name", ",", "T2.Decoration_Theme", "FROM", "member", "AS", "T1", "JOIN", "round", "AS", "T2", "ON", "T1.Member_ID", "=", "T2.Member_ID"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "decoration_theme", "from", "member", "as", "t1", "join", "round", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id"], "question": "Show the names of members and the decoration themes they have.", "question_toks": ["Show", "the", "names", "of", "members", "and", "the", "decoration", "themes", "they", "have", "."], "dataset_name": "spider", "guid": 1842}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "sql": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "example": {"db_id": "bike_1", "query": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)", "query_toks": ["SELECT", "id", "FROM", "trip", "WHERE", "duration", ">", "=", "(", "SELECT", "avg", "(", "duration", ")", "FROM", "trip", "WHERE", "zip_code", "=", "94103", ")"], "query_toks_no_value": ["select", "id", "from", "trip", "where", "duration", ">", "=", "(", "select", "avg", "(", "duration", ")", "from", "trip", "where", "zip_code", "=", "value", ")"], "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.", "question_toks": ["Find", "the", "id", "for", "the", "trips", "that", "lasted", "at", "least", "as", "long", "as", "the", "average", "duration", "of", "trips", "in", "zip", "code", "94103", "."], "dataset_name": "spider", "guid": 1843}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | Count the number of different official languages corresponding to countries that players who play Defender are from.", "sql": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "example": {"db_id": "match_season", "query": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.Official_native_language", ")", "FROM", "country", "AS", "T1", "JOIN", "match_season", "AS", "T2", "ON", "T1.Country_id", "=", "T2.Country", "WHERE", "T2.Position", "=", "``", "Defender", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "official_native_language", ")", "from", "country", "as", "t1", "join", "match_season", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country", "where", "t2", ".", "position", "=", "value"], "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.", "question_toks": ["Count", "the", "number", "of", "different", "official", "languages", "corresponding", "to", "countries", "that", "players", "who", "play", "Defender", "are", "from", "."], "dataset_name": "spider", "guid": 1844}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | How many clubs does \"Linda Smith\" belong to?", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Linda", "''", "AND", "t3.lname", "=", "``", "Smith", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "How many clubs does \"Linda Smith\" belong to?", "question_toks": ["How", "many", "clubs", "does", "``", "Linda", "Smith", "''", "belong", "to", "?"], "dataset_name": "spider", "guid": 1845}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the name of school that has the smallest enrollment in each state?", "sql": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state", "example": {"db_id": "soccer_2", "query": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state", "query_toks": ["SELECT", "cName", ",", "state", ",", "min", "(", "enr", ")", "FROM", "college", "GROUP", "BY", "state"], "query_toks_no_value": ["select", "cname", ",", "state", ",", "min", "(", "enr", ")", "from", "college", "group", "by", "state"], "question": "What is the name of school that has the smallest enrollment in each state?", "question_toks": ["What", "is", "the", "name", "of", "school", "that", "has", "the", "smallest", "enrollment", "in", "each", "state", "?"], "dataset_name": "spider", "guid": 1846}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | List the names of wrestlers and the teams in elimination in descending order of days held.", "sql": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "example": {"db_id": "wrestler", "query": "SELECT T2.Name ,  T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC", "query_toks": ["SELECT", "T2.Name", ",", "T1.Team", "FROM", "elimination", "AS", "T1", "JOIN", "wrestler", "AS", "T2", "ON", "T1.Wrestler_ID", "=", "T2.Wrestler_ID", "ORDER", "BY", "T2.Days_held", "DESC"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "team", "from", "elimination", "as", "t1", "join", "wrestler", "as", "t2", "on", "t1", ".", "wrestler_id", "=", "t2", ".", "wrestler_id", "order", "by", "t2", ".", "days_held", "desc"], "question": "List the names of wrestlers and the teams in elimination in descending order of days held.", "question_toks": ["List", "the", "names", "of", "wrestlers", "and", "the", "teams", "in", "elimination", "in", "descending", "order", "of", "days", "held", "."], "dataset_name": "spider", "guid": 1847}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | What are the names of teams from universities that have a below average enrollment?", "sql": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "example": {"db_id": "university_basketball", "query": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)", "query_toks": ["SELECT", "t2.team_name", "FROM", "university", "AS", "t1", "JOIN", "basketball_match", "AS", "t2", "ON", "t1.school_id", "=", "t2.school_id", "WHERE", "enrollment", "<", "(", "SELECT", "avg", "(", "enrollment", ")", "FROM", "university", ")"], "query_toks_no_value": ["select", "t2", ".", "team_name", "from", "university", "as", "t1", "join", "basketball_match", "as", "t2", "on", "t1", ".", "school_id", "=", "t2", ".", "school_id", "where", "enrollment", "<", "(", "select", "avg", "(", "enrollment", ")", "from", "university", ")"], "question": "What are the names of teams from universities that have a below average enrollment?", "question_toks": ["What", "are", "the", "names", "of", "teams", "from", "universities", "that", "have", "a", "below", "average", "enrollment", "?"], "dataset_name": "spider", "guid": 1848}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What are the heights of body builders with total score smaller than 315?", "sql": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315", "example": {"db_id": "body_builder", "query": "SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Total  <  315", "query_toks": ["SELECT", "T2.Height", "FROM", "body_builder", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Total", "<", "315"], "query_toks_no_value": ["select", "t2", ".", "height", "from", "body_builder", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "total", "<", "value"], "question": "What are the heights of body builders with total score smaller than 315?", "question_toks": ["What", "are", "the", "heights", "of", "body", "builders", "with", "total", "score", "smaller", "than", "315", "?"], "dataset_name": "spider", "guid": 1849}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the unique names of all race held between 2014 and 2017?", "sql": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "example": {"db_id": "formula_1", "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "races", "WHERE", "YEAR", "BETWEEN", "2014", "AND", "2017"], "query_toks_no_value": ["select", "distinct", "name", "from", "races", "where", "year", "between", "value", "and", "value"], "question": "What are the unique names of all race held between 2014 and 2017?", "question_toks": ["What", "are", "the", "unique", "names", "of", "all", "race", "held", "between", "2014", "and", "2017", "?"], "dataset_name": "spider", "guid": 1850}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | List the race class with at least two races.", "sql": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "example": {"db_id": "race_track", "query": "SELECT CLASS FROM race GROUP BY CLASS HAVING count(*)  >=  2", "query_toks": ["SELECT", "CLASS", "FROM", "race", "GROUP", "BY", "CLASS", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "class", "from", "race", "group", "by", "class", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List the race class with at least two races.", "question_toks": ["List", "the", "race", "class", "with", "at", "least", "two", "races", "."], "dataset_name": "spider", "guid": 1851}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | List the final tables made and the best finishes of poker players.", "sql": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "example": {"db_id": "poker_player", "query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player", "query_toks": ["SELECT", "Final_Table_Made", ",", "Best_Finish", "FROM", "poker_player"], "query_toks_no_value": ["select", "final_table_made", ",", "best_finish", "from", "poker_player"], "question": "List the final tables made and the best finishes of poker players.", "question_toks": ["List", "the", "final", "tables", "made", "and", "the", "best", "finishes", "of", "poker", "players", "."], "dataset_name": "spider", "guid": 1852}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What are the different ranges of the 3 mountains with the highest prominence?", "sql": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "example": {"db_id": "climbing", "query": "SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3", "query_toks": ["SELECT", "DISTINCT", "Range", "FROM", "mountain", "ORDER", "BY", "Prominence", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "distinct", "range", "from", "mountain", "order", "by", "prominence", "desc", "limit", "value"], "question": "What are the different ranges of the 3 mountains with the highest prominence?", "question_toks": ["What", "are", "the", "different", "ranges", "of", "the", "3", "mountains", "with", "the", "highest", "prominence", "?"], "dataset_name": "spider", "guid": 1853}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the maximum and minimum number of silver medals for all the clubs?", "sql": "SELECT max(Silver) ,  min(Silver) FROM club_rank", "example": {"db_id": "sports_competition", "query": "SELECT max(Silver) ,  min(Silver) FROM club_rank", "query_toks": ["SELECT", "max", "(", "Silver", ")", ",", "min", "(", "Silver", ")", "FROM", "club_rank"], "query_toks_no_value": ["select", "max", "(", "silver", ")", ",", "min", "(", "silver", ")", "from", "club_rank"], "question": "What are the maximum and minimum number of silver medals for all the clubs?", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "number", "of", "silver", "medals", "for", "all", "the", "clubs", "?"], "dataset_name": "spider", "guid": 1854}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | Find the id and surname of the driver who participated the most number of races?", "sql": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "formula_1", "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the id and surname of the driver who participated the most number of races?", "question_toks": ["Find", "the", "id", "and", "surname", "of", "the", "driver", "who", "participated", "the", "most", "number", "of", "races", "?"], "dataset_name": "spider", "guid": 1855}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Compute the average age of the members in the club \"Tennis Club\".", "sql": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT avg(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "avg", "(", "t3.age", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t1.clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "avg", "(", "t3", ".", "age", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t1", ".", "clubname", "=", "value"], "question": "Compute the average age of the members in the club \"Tennis Club\".", "question_toks": ["Compute", "the", "average", "age", "of", "the", "members", "in", "the", "club", "``", "Tennis", "Club", "''", "."], "dataset_name": "spider", "guid": 1856}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Return the name of the wrestler who had the lowest number of days held.", "sql": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "example": {"db_id": "wrestler", "query": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1", "query_toks": ["SELECT", "Name", "FROM", "wrestler", "ORDER", "BY", "Days_held", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "wrestler", "order", "by", "days_held", "asc", "limit", "value"], "question": "Return the name of the wrestler who had the lowest number of days held.", "question_toks": ["Return", "the", "name", "of", "the", "wrestler", "who", "had", "the", "lowest", "number", "of", "days", "held", "."], "dataset_name": "spider", "guid": 1857}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | List the total scores of body builders in ascending order.", "sql": "SELECT Total FROM body_builder ORDER BY Total ASC", "example": {"db_id": "body_builder", "query": "SELECT Total FROM body_builder ORDER BY Total ASC", "query_toks": ["SELECT", "Total", "FROM", "body_builder", "ORDER", "BY", "Total", "ASC"], "query_toks_no_value": ["select", "total", "from", "body_builder", "order", "by", "total", "asc"], "question": "List the total scores of body builders in ascending order.", "question_toks": ["List", "the", "total", "scores", "of", "body", "builders", "in", "ascending", "order", "."], "dataset_name": "spider", "guid": 1858}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Give the different locations of tracks.", "sql": "SELECT DISTINCT LOCATION FROM track", "example": {"db_id": "race_track", "query": "SELECT DISTINCT LOCATION FROM track", "query_toks": ["SELECT", "DISTINCT", "LOCATION", "FROM", "track"], "query_toks_no_value": ["select", "distinct", "location", "from", "track"], "question": "Give the different locations of tracks.", "question_toks": ["Give", "the", "different", "locations", "of", "tracks", "."], "dataset_name": "spider", "guid": 1859}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | What is the location of the club named \"Tennis Club\"?", "sql": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"", "example": {"db_id": "club_1", "query": "SELECT clublocation FROM club WHERE clubname  =  \"Tennis Club\"", "query_toks": ["SELECT", "clublocation", "FROM", "club", "WHERE", "clubname", "=", "``", "Tennis", "Club", "''"], "query_toks_no_value": ["select", "clublocation", "from", "club", "where", "clubname", "=", "value"], "question": "What is the location of the club named \"Tennis Club\"?", "question_toks": ["What", "is", "the", "location", "of", "the", "club", "named", "``", "Tennis", "Club", "''", "?"], "dataset_name": "spider", "guid": 1860}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | How many wrestlers are there?", "sql": "SELECT count(*) FROM wrestler", "example": {"db_id": "wrestler", "query": "SELECT count(*) FROM wrestler", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "wrestler"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "wrestler"], "question": "How many wrestlers are there?", "question_toks": ["How", "many", "wrestlers", "are", "there", "?"], "dataset_name": "spider", "guid": 1861}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | Show the leader names and locations of colleges.", "sql": "SELECT Leader_Name ,  College_Location FROM college", "example": {"db_id": "decoration_competition", "query": "SELECT Leader_Name ,  College_Location FROM college", "query_toks": ["SELECT", "Leader_Name", ",", "College_Location", "FROM", "college"], "query_toks_no_value": ["select", "leader_name", ",", "college_location", "from", "college"], "question": "Show the leader names and locations of colleges.", "question_toks": ["Show", "the", "leader", "names", "and", "locations", "of", "colleges", "."], "dataset_name": "spider", "guid": 1862}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | Find the names of stadiums that the most swimmers have been to.", "sql": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "swimming", "query": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t3.name", "FROM", "record", "AS", "t1", "JOIN", "event", "AS", "t2", "ON", "t1.event_id", "=", "t2.id", "JOIN", "stadium", "AS", "t3", "ON", "t3.id", "=", "t2.stadium_id", "GROUP", "BY", "t2.stadium_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "record", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "event_id", "=", "t2", ".", "id", "join", "stadium", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "stadium_id", "group", "by", "t2", ".", "stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the names of stadiums that the most swimmers have been to.", "question_toks": ["Find", "the", "names", "of", "stadiums", "that", "the", "most", "swimmers", "have", "been", "to", "."], "dataset_name": "spider", "guid": 1863}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | Find the name of all students who were in the tryout sorted in alphabetic order.", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName", "query_toks": ["SELECT", "T1.pName", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "ORDER", "BY", "T1.pName"], "query_toks_no_value": ["select", "t1", ".", "pname", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "order", "by", "t1", ".", "pname"], "question": "Find the name of all students who were in the tryout sorted in alphabetic order.", "question_toks": ["Find", "the", "name", "of", "all", "students", "who", "were", "in", "the", "tryout", "sorted", "in", "alphabetic", "order", "."], "dataset_name": "spider", "guid": 1864}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Return the minimum, maximum, and average seating across all tracks.", "sql": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "example": {"db_id": "race_track", "query": "SELECT min(seating) ,  max(seating) ,  avg(seating) FROM track", "query_toks": ["SELECT", "min", "(", "seating", ")", ",", "max", "(", "seating", ")", ",", "avg", "(", "seating", ")", "FROM", "track"], "query_toks_no_value": ["select", "min", "(", "seating", ")", ",", "max", "(", "seating", ")", ",", "avg", "(", "seating", ")", "from", "track"], "question": "Return the minimum, maximum, and average seating across all tracks.", "question_toks": ["Return", "the", "minimum", ",", "maximum", ",", "and", "average", "seating", "across", "all", "tracks", "."], "dataset_name": "spider", "guid": 1865}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are names of stations that have average bike availability above 10 and are not located in San Jose city?", "sql": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"", "example": {"db_id": "bike_1", "query": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"", "query_toks": ["SELECT", "T1.name", "FROM", "station", "AS", "T1", "JOIN", "status", "AS", "T2", "ON", "T1.id", "=", "T2.station_id", "GROUP", "BY", "T2.station_id", "HAVING", "avg", "(", "bikes_available", ")", ">", "10", "EXCEPT", "SELECT", "name", "FROM", "station", "WHERE", "city", "=", "``", "San", "Jose", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "station", "as", "t1", "join", "status", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "group", "by", "t2", ".", "station_id", "having", "avg", "(", "bikes_available", ")", ">", "value", "except", "select", "name", "from", "station", "where", "city", "=", "value"], "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?", "question_toks": ["What", "are", "names", "of", "stations", "that", "have", "average", "bike", "availability", "above", "10", "and", "are", "not", "located", "in", "San", "Jose", "city", "?"], "dataset_name": "spider", "guid": 1866}}
{"text": "basketball_match: Team_ID, School_ID, Team_Name, ACC_Regular_Season, ACC_Percent, ACC_Home, ACC_Road, All_Games, All_Games_Percent, All_Home; university: School_ID, School, Location, Founded, Affiliation, Enrollment, Nickname, Primary_conference | Find the founded year of the newest non public school.", "sql": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "example": {"db_id": "university_basketball", "query": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1", "query_toks": ["SELECT", "founded", "FROM", "university", "WHERE", "affiliation", "!", "=", "'Public", "'", "ORDER", "BY", "founded", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "founded", "from", "university", "where", "affiliation", "!", "=", "value", "order", "by", "founded", "desc", "limit", "value"], "question": "Find the founded year of the newest non public school.", "question_toks": ["Find", "the", "founded", "year", "of", "the", "newest", "non", "public", "school", "."], "dataset_name": "spider", "guid": 1867}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | How many players played each position?", "sql": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "example": {"db_id": "match_season", "query": "SELECT POSITION ,  COUNT(*) FROM match_season GROUP BY POSITION", "query_toks": ["SELECT", "POSITION", ",", "COUNT", "(", "*", ")", "FROM", "match_season", "GROUP", "BY", "POSITION"], "query_toks_no_value": ["select", "position", ",", "count", "(", "*", ")", "from", "match_season", "group", "by", "position"], "question": "How many players played each position?", "question_toks": ["How", "many", "players", "played", "each", "position", "?"], "dataset_name": "spider", "guid": 1868}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names of all students who successfully tried out for the position of striker?", "sql": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'", "query_toks": ["SELECT", "T1.pName", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'", "AND", "T2.pPos", "=", "'striker", "'"], "query_toks_no_value": ["select", "t1", ".", "pname", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value", "and", "t2", ".", "ppos", "=", "value"], "question": "What are the names of all students who successfully tried out for the position of striker?", "question_toks": ["What", "are", "the", "names", "of", "all", "students", "who", "successfully", "tried", "out", "for", "the", "position", "of", "striker", "?"], "dataset_name": "spider", "guid": 1869}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | List the distinct hometowns that are not associated with any gymnast.", "sql": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "example": {"db_id": "gymnast", "query": "SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID", "query_toks": ["SELECT", "DISTINCT", "Hometown", "FROM", "people", "EXCEPT", "SELECT", "DISTINCT", "T2.Hometown", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "distinct", "hometown", "from", "people", "except", "select", "distinct", "t2", ".", "hometown", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id"], "question": "List the distinct hometowns that are not associated with any gymnast.", "question_toks": ["List", "the", "distinct", "hometowns", "that", "are", "not", "associated", "with", "any", "gymnast", "."], "dataset_name": "spider", "guid": 1870}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Return the names of poker players sorted by their earnings descending.", "sql": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "example": {"db_id": "poker_player", "query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC", "query_toks": ["SELECT", "T1.Name", "FROM", "people", "AS", "T1", "JOIN", "poker_player", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Earnings", "DESC"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "earnings", "desc"], "question": "Return the names of poker players sorted by their earnings descending.", "question_toks": ["Return", "the", "names", "of", "poker", "players", "sorted", "by", "their", "earnings", "descending", "."], "dataset_name": "spider", "guid": 1871}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the name of the school with smallest enrollment size per state?", "sql": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state", "example": {"db_id": "soccer_2", "query": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state", "query_toks": ["SELECT", "cName", ",", "state", ",", "min", "(", "enr", ")", "FROM", "college", "GROUP", "BY", "state"], "query_toks_no_value": ["select", "cname", ",", "state", ",", "min", "(", "enr", ")", "from", "college", "group", "by", "state"], "question": "What is the name of the school with smallest enrollment size per state?", "question_toks": ["What", "is", "the", "name", "of", "the", "school", "with", "smallest", "enrollment", "size", "per", "state", "?"], "dataset_name": "spider", "guid": 1872}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | List the names of climbers in descending order of points.", "sql": "SELECT Name FROM climber ORDER BY Points DESC", "example": {"db_id": "climbing", "query": "SELECT Name FROM climber ORDER BY Points DESC", "query_toks": ["SELECT", "Name", "FROM", "climber", "ORDER", "BY", "Points", "DESC"], "query_toks_no_value": ["select", "name", "from", "climber", "order", "by", "points", "desc"], "question": "List the names of climbers in descending order of points.", "question_toks": ["List", "the", "names", "of", "climbers", "in", "descending", "order", "of", "points", "."], "dataset_name": "spider", "guid": 1873}}
{"text": "college: College_ID, Name, Leader_Name, College_Location; member: Member_ID, Name, Country, College_ID; round: Round_ID, Member_ID, Decoration_Theme, Rank_in_Round | What are the names and countries of members?", "sql": "SELECT Name ,  Country FROM member", "example": {"db_id": "decoration_competition", "query": "SELECT Name ,  Country FROM member", "query_toks": ["SELECT", "Name", ",", "Country", "FROM", "member"], "query_toks_no_value": ["select", "name", ",", "country", "from", "member"], "question": "What are the names and countries of members?", "question_toks": ["What", "are", "the", "names", "and", "countries", "of", "members", "?"], "dataset_name": "spider", "guid": 1874}}
{"text": "wrestler: Wrestler_ID, Name, Reign, Days_held, Location, Event; Elimination: Elimination_ID, Wrestler_ID, Team, Eliminated_By, Elimination_Move, Time | Which reign is the most common among wrestlers?", "sql": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "wrestler", "query": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Reign", "FROM", "wrestler", "GROUP", "BY", "Reign", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "reign", "from", "wrestler", "group", "by", "reign", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which reign is the most common among wrestlers?", "question_toks": ["Which", "reign", "is", "the", "most", "common", "among", "wrestlers", "?"], "dataset_name": "spider", "guid": 1875}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | How many states have smaller colleges than average?", "sql": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "example": {"db_id": "soccer_2", "query": "SELECT count(DISTINCT state) FROM college WHERE enr  <  (SELECT avg(enr) FROM college)", "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "college", "WHERE", "enr", "<", "(", "SELECT", "avg", "(", "enr", ")", "FROM", "college", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "college", "where", "enr", "<", "(", "select", "avg", "(", "enr", ")", "from", "college", ")"], "question": "How many states have smaller colleges than average?", "question_toks": ["How", "many", "states", "have", "smaller", "colleges", "than", "average", "?"], "dataset_name": "spider", "guid": 1876}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What is the id of the bike that traveled the most in 94002?", "sql": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "bike_1", "query": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "bike_id", "FROM", "trip", "WHERE", "zip_code", "=", "94002", "GROUP", "BY", "bike_id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "bike_id", "from", "trip", "where", "zip_code", "=", "value", "group", "by", "bike_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id of the bike that traveled the most in 94002?", "question_toks": ["What", "is", "the", "id", "of", "the", "bike", "that", "traveled", "the", "most", "in", "94002", "?"], "dataset_name": "spider", "guid": 1877}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the names of all stations with a latitude smaller than 37.5?", "sql": "SELECT name FROM station WHERE lat  <  37.5", "example": {"db_id": "bike_1", "query": "SELECT name FROM station WHERE lat  <  37.5", "query_toks": ["SELECT", "name", "FROM", "station", "WHERE", "lat", "<", "37.5"], "query_toks_no_value": ["select", "name", "from", "station", "where", "lat", "<", "value"], "question": "What are the names of all stations with a latitude smaller than 37.5?", "question_toks": ["What", "are", "the", "names", "of", "all", "stations", "with", "a", "latitude", "smaller", "than", "37.5", "?"], "dataset_name": "spider", "guid": 1878}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | For each nationality, how many different constructors are there?", "sql": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "example": {"db_id": "formula_1", "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "nationality", "FROM", "constructors", "GROUP", "BY", "nationality"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "nationality", "from", "constructors", "group", "by", "nationality"], "question": "For each nationality, how many different constructors are there?", "question_toks": ["For", "each", "nationality", ",", "how", "many", "different", "constructors", "are", "there", "?"], "dataset_name": "spider", "guid": 1879}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the different names of the colleges involved in the tryout in alphabetical order?", "sql": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "example": {"db_id": "soccer_2", "query": "SELECT DISTINCT cName FROM tryout ORDER BY cName", "query_toks": ["SELECT", "DISTINCT", "cName", "FROM", "tryout", "ORDER", "BY", "cName"], "query_toks_no_value": ["select", "distinct", "cname", "from", "tryout", "order", "by", "cname"], "question": "What are the different names of the colleges involved in the tryout in alphabetical order?", "question_toks": ["What", "are", "the", "different", "names", "of", "the", "colleges", "involved", "in", "the", "tryout", "in", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1880}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | What is the average earnings of poker players?", "sql": "SELECT avg(Earnings) FROM poker_player", "example": {"db_id": "poker_player", "query": "SELECT avg(Earnings) FROM poker_player", "query_toks": ["SELECT", "avg", "(", "Earnings", ")", "FROM", "poker_player"], "query_toks_no_value": ["select", "avg", "(", "earnings", ")", "from", "poker_player"], "question": "What is the average earnings of poker players?", "question_toks": ["What", "is", "the", "average", "earnings", "of", "poker", "players", "?"], "dataset_name": "spider", "guid": 1881}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the numbers of constructors for different nationalities?", "sql": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "example": {"db_id": "formula_1", "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "nationality", "FROM", "constructors", "GROUP", "BY", "nationality"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "nationality", "from", "constructors", "group", "by", "nationality"], "question": "What are the numbers of constructors for different nationalities?", "question_toks": ["What", "are", "the", "numbers", "of", "constructors", "for", "different", "nationalities", "?"], "dataset_name": "spider", "guid": 1882}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | How many climbers are from each country?", "sql": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "example": {"db_id": "climbing", "query": "SELECT Country ,  COUNT(*) FROM climber GROUP BY Country", "query_toks": ["SELECT", "Country", ",", "COUNT", "(", "*", ")", "FROM", "climber", "GROUP", "BY", "Country"], "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "climber", "group", "by", "country"], "question": "How many climbers are from each country?", "question_toks": ["How", "many", "climbers", "are", "from", "each", "country", "?"], "dataset_name": "spider", "guid": 1883}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the names of the clubs that have players in the position of \"Right Wing\"?", "sql": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"", "example": {"db_id": "sports_competition", "query": "SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID  =  T2.Club_ID WHERE T2.Position  =  \"Right Wing\"", "query_toks": ["SELECT", "T1.name", "FROM", "club", "AS", "T1", "JOIN", "player", "AS", "T2", "ON", "T1.Club_ID", "=", "T2.Club_ID", "WHERE", "T2.Position", "=", "``", "Right", "Wing", "''"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "club", "as", "t1", "join", "player", "as", "t2", "on", "t1", ".", "club_id", "=", "t2", ".", "club_id", "where", "t2", ".", "position", "=", "value"], "question": "What are the names of the clubs that have players in the position of \"Right Wing\"?", "question_toks": ["What", "are", "the", "names", "of", "the", "clubs", "that", "have", "players", "in", "the", "position", "of", "``", "Right", "Wing", "''", "?"], "dataset_name": "spider", "guid": 1884}}
{"text": "station: id, name, lat, long, dock_count, city, installation_date; status: station_id, bikes_available, docks_available, time; trip: id, duration, start_date, start_station_name, start_station_id, end_date, end_station_name, end_station_id, bike_id, subscription_type; weather: date, max_temperature_f, mean_temperature_f, min_temperature_f, max_dew_point_f, mean_dew_point_f, min_dew_point_f, max_humidity, mean_humidity, min_humidity | What are the dates in which the mean sea level pressure was between 30.3 and 31?", "sql": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "example": {"db_id": "bike_1", "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31", "query_toks": ["SELECT", "date", "FROM", "weather", "WHERE", "mean_sea_level_pressure_inches", "BETWEEN", "30.3", "AND", "31"], "query_toks_no_value": ["select", "date", "from", "weather", "where", "mean_sea_level_pressure_inches", "between", "value", "and", "value"], "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?", "question_toks": ["What", "are", "the", "dates", "in", "which", "the", "mean", "sea", "level", "pressure", "was", "between", "30.3", "and", "31", "?"], "dataset_name": "spider", "guid": 1885}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the number of colleges with a student population greater than 15000?", "sql": "SELECT count(*) FROM College WHERE enr  >  15000", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM College WHERE enr  >  15000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "College", "WHERE", "enr", ">", "15000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "college", "where", "enr", ">", "value"], "question": "What is the number of colleges with a student population greater than 15000?", "question_toks": ["What", "is", "the", "number", "of", "colleges", "with", "a", "student", "population", "greater", "than", "15000", "?"], "dataset_name": "spider", "guid": 1886}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | What is the height of the mountain climbined by the climbing who had the most points?", "sql": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "example": {"db_id": "climbing", "query": "SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1", "query_toks": ["SELECT", "T2.Height", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID", "ORDER", "BY", "T1.Points", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "height", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id", "order", "by", "t1", ".", "points", "desc", "limit", "value"], "question": "What is the height of the mountain climbined by the climbing who had the most points?", "question_toks": ["What", "is", "the", "height", "of", "the", "mountain", "climbined", "by", "the", "climbing", "who", "had", "the", "most", "points", "?"], "dataset_name": "spider", "guid": 1887}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What is the number of students playing as a goalie?", "sql": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'", "example": {"db_id": "soccer_2", "query": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "tryout", "WHERE", "pPos", "=", "'goalie", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tryout", "where", "ppos", "=", "value"], "question": "What is the number of students playing as a goalie?", "question_toks": ["What", "is", "the", "number", "of", "students", "playing", "as", "a", "goalie", "?"], "dataset_name": "spider", "guid": 1888}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What was the most popular position at tryouts?", "sql": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "soccer_2", "query": "SELECT pPos FROM tryout GROUP BY pPos ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "pPos", "FROM", "tryout", "GROUP", "BY", "pPos", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "ppos", "from", "tryout", "group", "by", "ppos", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What was the most popular position at tryouts?", "question_toks": ["What", "was", "the", "most", "popular", "position", "at", "tryouts", "?"], "dataset_name": "spider", "guid": 1889}}
{"text": "gymnast: Gymnast_ID, Floor_Exercise_Points, Pommel_Horse_Points, Rings_Points, Vault_Points, Parallel_Bars_Points, Horizontal_Bar_Points, Total_Points; people: People_ID, Name, Age, Height, Hometown | List the names of gymnasts in ascending order by their heights.", "sql": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "example": {"db_id": "gymnast", "query": "SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID  =  T2.People_ID ORDER BY T2.Height ASC", "query_toks": ["SELECT", "T2.Name", "FROM", "gymnast", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Gymnast_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Height", "ASC"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "gymnast", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "gymnast_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "height", "asc"], "question": "List the names of gymnasts in ascending order by their heights.", "question_toks": ["List", "the", "names", "of", "gymnasts", "in", "ascending", "order", "by", "their", "heights", "."], "dataset_name": "spider", "guid": 1890}}
{"text": "country: Country_id, Country_name, Capital, Official_native_language; team: Team_id, Name; match_season: Season, Player, Position, Country, Team, Draft_Pick_Number, Draft_Class, College; player: Player_ID, Player, Years_Played, Total_WL, Singles_WL, Doubles_WL, Team | What are the names of teams that do no have match season record?", "sql": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "example": {"db_id": "match_season", "query": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)", "query_toks": ["SELECT", "Name", "FROM", "team", "WHERE", "Team_id", "NOT", "IN", "(", "SELECT", "Team", "FROM", "match_season", ")"], "query_toks_no_value": ["select", "name", "from", "team", "where", "team_id", "not", "in", "(", "select", "team", "from", "match_season", ")"], "question": "What are the names of teams that do no have match season record?", "question_toks": ["What", "are", "the", "names", "of", "teams", "that", "do", "no", "have", "match", "season", "record", "?"], "dataset_name": "spider", "guid": 1891}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What is the average fastest lap speed for races held after 2004, for each race, ordered by year?", "sql": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "example": {"db_id": "formula_1", "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year", "query_toks": ["SELECT", "avg", "(", "T2.fastestlapspeed", ")", ",", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", ">", "2014", "GROUP", "BY", "T1.name", "ORDER", "BY", "T1.year"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "fastestlapspeed", ")", ",", "t1", ".", "name", ",", "t1", ".", "year", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", ">", "value", "group", "by", "t1", ".", "name", "order", "by", "t1", ".", "year"], "question": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?", "question_toks": ["What", "is", "the", "average", "fastest", "lap", "speed", "for", "races", "held", "after", "2004", ",", "for", "each", "race", ",", "ordered", "by", "year", "?"], "dataset_name": "spider", "guid": 1892}}
{"text": "body_builder: Body_Builder_ID, People_ID, Snatch, Clean_Jerk, Total; people: People_ID, Name, Height, Weight, Birth_Date, Birth_Place | What is the most common birth place of people?", "sql": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "body_builder", "query": "SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Birth_Place", "FROM", "people", "GROUP", "BY", "Birth_Place", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "birth_place", "from", "people", "group", "by", "birth_place", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common birth place of people?", "question_toks": ["What", "is", "the", "most", "common", "birth", "place", "of", "people", "?"], "dataset_name": "spider", "guid": 1893}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Count the number of different countries that climbers are from.", "sql": "SELECT COUNT(DISTINCT Country) FROM climber", "example": {"db_id": "climbing", "query": "SELECT COUNT(DISTINCT Country) FROM climber", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "Country", ")", "FROM", "climber"], "query_toks_no_value": ["select", "count", "(", "distinct", "country", ")", "from", "climber"], "question": "Count the number of different countries that climbers are from.", "question_toks": ["Count", "the", "number", "of", "different", "countries", "that", "climbers", "are", "from", "."], "dataset_name": "spider", "guid": 1894}}
{"text": "College: cName, state, enr; Player: pID, pName, yCard, HS; Tryout: pID, cName, pPos, decision | What are the names and hours spent practicing of every student who received a yes at tryouts?", "sql": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "example": {"db_id": "soccer_2", "query": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'", "query_toks": ["SELECT", "T1.pName", ",", "T1.HS", "FROM", "player", "AS", "T1", "JOIN", "tryout", "AS", "T2", "ON", "T1.pID", "=", "T2.pID", "WHERE", "T2.decision", "=", "'yes", "'"], "query_toks_no_value": ["select", "t1", ".", "pname", ",", "t1", ".", "hs", "from", "player", "as", "t1", "join", "tryout", "as", "t2", "on", "t1", ".", "pid", "=", "t2", ".", "pid", "where", "t2", ".", "decision", "=", "value"], "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?", "question_toks": ["What", "are", "the", "names", "and", "hours", "spent", "practicing", "of", "every", "student", "who", "received", "a", "yes", "at", "tryouts", "?"], "dataset_name": "spider", "guid": 1895}}
{"text": "players: player_id, first_name, last_name, hand, birth_date, country_code; matches: best_of, draw_size, loser_age, loser_entry, loser_hand, loser_ht, loser_id, loser_ioc, loser_name, loser_rank; rankings: ranking_date, ranking, player_id, ranking_points, tours | What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "sql": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "example": {"db_id": "wta_1", "query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'", "query_toks": ["SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'WTA", "Championships", "'", "INTERSECT", "SELECT", "T1.country_code", ",", "T1.first_name", "FROM", "players", "AS", "T1", "JOIN", "matches", "AS", "T2", "ON", "T1.player_id", "=", "T2.winner_id", "WHERE", "T2.tourney_name", "=", "'Australian", "Open", "'"], "query_toks_no_value": ["select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value", "intersect", "select", "t1", ".", "country_code", ",", "t1", ".", "first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1", ".", "player_id", "=", "t2", ".", "winner_id", "where", "t2", ".", "tourney_name", "=", "value"], "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "question_toks": ["What", "are", "the", "country", "code", "and", "first", "name", "of", "the", "players", "who", "won", "in", "both", "tourney", "WTA", "Championships", "and", "Australian", "Open", "?"], "dataset_name": "spider", "guid": 1896}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Club: ClubID, ClubName, ClubDesc, ClubLocation; Member_of_club: StuID, ClubID, Position | Find the number of clubs where \"Tracy Kim\" is a member.", "sql": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"", "example": {"db_id": "club_1", "query": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "club", "AS", "t1", "JOIN", "member_of_club", "AS", "t2", "ON", "t1.clubid", "=", "t2.clubid", "JOIN", "student", "AS", "t3", "ON", "t2.stuid", "=", "t3.stuid", "WHERE", "t3.fname", "=", "``", "Tracy", "''", "AND", "t3.lname", "=", "``", "Kim", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "club", "as", "t1", "join", "member_of_club", "as", "t2", "on", "t1", ".", "clubid", "=", "t2", ".", "clubid", "join", "student", "as", "t3", "on", "t2", ".", "stuid", "=", "t3", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "and", "t3", ".", "lname", "=", "value"], "question": "Find the number of clubs where \"Tracy Kim\" is a member.", "question_toks": ["Find", "the", "number", "of", "clubs", "where", "``", "Tracy", "Kim", "''", "is", "a", "member", "."], "dataset_name": "spider", "guid": 1897}}
{"text": "club: Club_ID, name, Region, Start_year; club_rank: Rank, Club_ID, Gold, Silver, Bronze, Total; player: Player_ID, name, Position, Club_ID, Apps, Tries, Goals, Points; competition: Competition_ID, Year, Competition_type, Country; competition_result: Competition_ID, Club_ID_1, Club_ID_2, Score | What are the different regions of clubs in ascending alphabetical order?", "sql": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "example": {"db_id": "sports_competition", "query": "SELECT DISTINCT Region FROM club ORDER BY Region ASC", "query_toks": ["SELECT", "DISTINCT", "Region", "FROM", "club", "ORDER", "BY", "Region", "ASC"], "query_toks_no_value": ["select", "distinct", "region", "from", "club", "order", "by", "region", "asc"], "question": "What are the different regions of clubs in ascending alphabetical order?", "question_toks": ["What", "are", "the", "different", "regions", "of", "clubs", "in", "ascending", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 1898}}
{"text": "poker_player: Poker_Player_ID, People_ID, Final_Table_Made, Best_Finish, Money_Rank, Earnings; people: People_ID, Nationality, Name, Birth_Date, Height | Give the nationality that is most common across all people.", "sql": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "poker_player", "query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Nationality", "FROM", "people", "GROUP", "BY", "Nationality", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give the nationality that is most common across all people.", "question_toks": ["Give", "the", "nationality", "that", "is", "most", "common", "across", "all", "people", "."], "dataset_name": "spider", "guid": 1899}}
{"text": "circuits: circuitId, circuitRef, name, location, country, lat, lng, alt, url; races: raceId, year, round, circuitId, name, date, time, url; drivers: driverId, driverRef, number, code, forename, surname, dob, nationality, url; status: statusId, status; seasons: year, url; constructors: constructorId, constructorRef, name, nationality, url; constructorStandings: constructorStandingsId, raceId, constructorId, points, position, positionText, wins; results: resultId, raceId, driverId, constructorId, number, grid, position, positionText, positionOrder, points; driverStandings: driverStandingsId, raceId, driverId, points, position, positionText, wins; constructorResults: constructorResultsId, raceId, constructorId, points, status | What are the ids and locations of all circuits in France or Belgium?", "sql": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"", "example": {"db_id": "formula_1", "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"", "query_toks": ["SELECT", "circuitid", ",", "LOCATION", "FROM", "circuits", "WHERE", "country", "=", "``", "France", "''", "OR", "country", "=", "``", "Belgium", "''"], "query_toks_no_value": ["select", "circuitid", ",", "location", "from", "circuits", "where", "country", "=", "value", "or", "country", "=", "value"], "question": "What are the ids and locations of all circuits in France or Belgium?", "question_toks": ["What", "are", "the", "ids", "and", "locations", "of", "all", "circuits", "in", "France", "or", "Belgium", "?"], "dataset_name": "spider", "guid": 1900}}
{"text": "swimmer: ID, name, Nationality, meter_100, meter_200, meter_300, meter_400, meter_500, meter_600, meter_700; stadium: ID, name, Capacity, City, Country, Opening_year; event: ID, Name, Stadium_ID, Year; record: ID, Result, Swimmer_ID, Event_ID | How many stadiums are there?", "sql": "SELECT count(*) FROM stadium", "example": {"db_id": "swimming", "query": "SELECT count(*) FROM stadium", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "stadium"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "stadium"], "question": "How many stadiums are there?", "question_toks": ["How", "many", "stadiums", "are", "there", "?"], "dataset_name": "spider", "guid": 1901}}
{"text": "race: Race_ID, Name, Class, Date, Track_ID; track: Track_ID, Name, Location, Seating, Year_Opened | Show the name of track with most number of races.", "sql": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "race_track", "query": "SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "race", "AS", "T1", "JOIN", "track", "AS", "T2", "ON", "T1.track_id", "=", "T2.track_id", "GROUP", "BY", "T1.track_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "race", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "track_id", "=", "t2", ".", "track_id", "group", "by", "t1", ".", "track_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the name of track with most number of races.", "question_toks": ["Show", "the", "name", "of", "track", "with", "most", "number", "of", "races", "."], "dataset_name": "spider", "guid": 1902}}
{"text": "mountain: Mountain_ID, Name, Height, Prominence, Range, Country; climber: Climber_ID, Name, Country, Time, Points, Mountain_ID | Show the times used by climbers to climb mountains in Country Uganda.", "sql": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"", "example": {"db_id": "climbing", "query": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"", "query_toks": ["SELECT", "T1.Time", "FROM", "climber", "AS", "T1", "JOIN", "mountain", "AS", "T2", "ON", "T1.Mountain_ID", "=", "T2.Mountain_ID", "WHERE", "T2.Country", "=", "``", "Uganda", "''"], "query_toks_no_value": ["select", "t1", ".", "time", "from", "climber", "as", "t1", "join", "mountain", "as", "t2", "on", "t1", ".", "mountain_id", "=", "t2", ".", "mountain_id", "where", "t2", ".", "country", "=", "value"], "question": "Show the times used by climbers to climb mountains in Country Uganda.", "question_toks": ["Show", "the", "times", "used", "by", "climbers", "to", "climb", "mountains", "in", "Country", "Uganda", "."], "dataset_name": "spider", "guid": 1903}}