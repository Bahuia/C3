{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | List the name of the shop with the latest open year.", "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1", "example": {"db_id": "device", "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1", "query_toks": ["SELECT", "Shop_Name", "FROM", "shop", "ORDER", "BY", "Open_Year", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "shop_name", "from", "shop", "order", "by", "open_year", "desc", "limit", "value"], "question": "List the name of the shop with the latest open year.", "question_toks": ["List", "the", "name", "of", "the", "shop", "with", "the", "latest", "open", "year", "."], "dataset_name": "spider", "guid": 3994}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | How many medicines are offered by each trade name?", "sql": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name", "query_toks": ["SELECT", "trade_name", ",", "count", "(", "*", ")", "FROM", "medicine", "GROUP", "BY", "trade_name"], "query_toks_no_value": ["select", "trade_name", ",", "count", "(", "*", ")", "from", "medicine", "group", "by", "trade_name"], "question": "How many medicines are offered by each trade name?", "question_toks": ["How", "many", "medicines", "are", "offered", "by", "each", "trade", "name", "?"], "dataset_name": "spider", "guid": 3995}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "example": {"db_id": "dog_kennels", "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "query_toks": ["SELECT", "professional_id", ",", "role_code", ",", "email_address", "FROM", "Professionals", "EXCEPT", "SELECT", "T1.professional_id", ",", "T1.role_code", ",", "T1.email_address", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id"], "query_toks_no_value": ["select", "professional_id", ",", "role_code", ",", "email_address", "from", "professionals", "except", "select", "t1", ".", "professional_id", ",", "t1", ".", "role_code", ",", "t1", ".", "email_address", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id"], "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "question_toks": ["Which", "professional", "did", "not", "operate", "any", "treatment", "on", "dogs", "?", "List", "the", "professional", "'s", "id", ",", "role", "and", "email", "."], "dataset_name": "spider", "guid": 3996}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names of all people who are friends with Alice for the shortest amount of time?", "sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "example": {"db_id": "network_2", "query": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "query_toks": ["SELECT", "name", "FROM", "PersonFriend", "WHERE", "friend", "=", "'Alice", "'", "AND", "YEAR", "=", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "PersonFriend", "WHERE", "friend", "=", "'Alice", "'", ")"], "query_toks_no_value": ["select", "name", "from", "personfriend", "where", "friend", "=", "value", "and", "year", "=", "(", "select", "min", "(", "year", ")", "from", "personfriend", "where", "friend", "=", "value", ")"], "question": "What are the names of all people who are friends with Alice for the shortest amount of time?", "question_toks": ["What", "are", "the", "names", "of", "all", "people", "who", "are", "friends", "with", "Alice", "for", "the", "shortest", "amount", "of", "time", "?"], "dataset_name": "spider", "guid": 3997}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which dogs are of the rarest breed? Show their names and treatment dates.", "sql": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "example": {"db_id": "dog_kennels", "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "query_toks": ["SELECT", "T1.name", ",", "T2.date_of_treatment", "FROM", "Dogs", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.dog_id", "=", "T2.dog_id", "WHERE", "T1.breed_code", "=", "(", "SELECT", "breed_code", "FROM", "Dogs", "GROUP", "BY", "breed_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "dog_id", "=", "t2", ".", "dog_id", "where", "t1", ".", "breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value", ")"], "question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "question_toks": ["Which", "dogs", "are", "of", "the", "rarest", "breed", "?", "Show", "their", "names", "and", "treatment", "dates", "."], "dataset_name": "spider", "guid": 3998}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", "query_toks": ["SELECT", "T1.interaction_type", "FROM", "medicine_enzyme_interaction", "AS", "T1", "JOIN", "medicine", "AS", "T2", "ON", "T1.medicine_id", "=", "T2.id", "JOIN", "enzyme", "AS", "T3", "ON", "T1.enzyme_id", "=", "T3.id", "WHERE", "T3.name", "=", "'ALA", "synthase", "'", "AND", "T2.name", "=", "'Aripiprazole", "'"], "query_toks_no_value": ["select", "t1", ".", "interaction_type", "from", "medicine_enzyme_interaction", "as", "t1", "join", "medicine", "as", "t2", "on", "t1", ".", "medicine_id", "=", "t2", ".", "id", "join", "enzyme", "as", "t3", "on", "t1", ".", "enzyme_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "question_toks": ["What", "is", "the", "type", "of", "interaction", "for", "the", "enzyme", "named", "'ALA", "synthase", "'", "and", "the", "medicine", "named", "'Aripiprazole", "'", "?"], "dataset_name": "spider", "guid": 3999}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names of the people who have no friends who are students?", "sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'", "example": {"db_id": "network_2", "query": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'", "query_toks": ["SELECT", "name", "FROM", "person", "EXCEPT", "SELECT", "T2.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T1.job", "=", "'student", "'"], "query_toks_no_value": ["select", "name", "from", "person", "except", "select", "t2", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t1", ".", "job", "=", "value"], "question": "What are the names of the people who have no friends who are students?", "question_toks": ["What", "are", "the", "names", "of", "the", "people", "who", "have", "no", "friends", "who", "are", "students", "?"], "dataset_name": "spider", "guid": 4000}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Who advises student 1004?", "sql": "SELECT Advisor FROM Student WHERE StuID  =  1004", "example": {"db_id": "allergy_1", "query": "SELECT Advisor FROM Student WHERE StuID  =  1004", "query_toks": ["SELECT", "Advisor", "FROM", "Student", "WHERE", "StuID", "=", "1004"], "query_toks_no_value": ["select", "advisor", "from", "student", "where", "stuid", "=", "value"], "question": "Who advises student 1004?", "question_toks": ["Who", "advises", "student", "1004", "?"], "dataset_name": "spider", "guid": 4001}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How old is each student and how many students are each age?", "sql": "SELECT age ,  count(*) FROM Student GROUP BY age", "example": {"db_id": "allergy_1", "query": "SELECT age ,  count(*) FROM Student GROUP BY age", "query_toks": ["SELECT", "age", ",", "count", "(", "*", ")", "FROM", "Student", "GROUP", "BY", "age"], "query_toks_no_value": ["select", "age", ",", "count", "(", "*", ")", "from", "student", "group", "by", "age"], "question": "How old is each student and how many students are each age?", "question_toks": ["How", "old", "is", "each", "student", "and", "how", "many", "students", "are", "each", "age", "?"], "dataset_name": "spider", "guid": 4002}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Which allergy type is the least common?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "allergy_1", "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "allergytype", "FROM", "Allergy_type", "GROUP", "BY", "allergytype", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "allergytype", "from", "allergy_type", "group", "by", "allergytype", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Which allergy type is the least common?", "question_toks": ["Which", "allergy", "type", "is", "the", "least", "common", "?"], "dataset_name": "spider", "guid": 4003}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | Show the name, street address, and number of floors for all buildings ordered by the number of floors.", "sql": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors", "example": {"db_id": "protein_institute", "query": "SELECT name ,  street_address ,  floors FROM building ORDER BY floors", "query_toks": ["SELECT", "name", ",", "street_address", ",", "floors", "FROM", "building", "ORDER", "BY", "floors"], "query_toks_no_value": ["select", "name", ",", "street_address", ",", "floors", "from", "building", "order", "by", "floors"], "question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.", "question_toks": ["Show", "the", "name", ",", "street", "address", ",", "and", "number", "of", "floors", "for", "all", "buildings", "ordered", "by", "the", "number", "of", "floors", "."], "dataset_name": "spider", "guid": 4004}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all student ids who are older than 20.", "sql": "SELECT StuID FROM Student WHERE age  >  20", "example": {"db_id": "allergy_1", "query": "SELECT StuID FROM Student WHERE age  >  20", "query_toks": ["SELECT", "StuID", "FROM", "Student", "WHERE", "age", ">", "20"], "query_toks_no_value": ["select", "stuid", "from", "student", "where", "age", ">", "value"], "question": "Show all student ids who are older than 20.", "question_toks": ["Show", "all", "student", "ids", "who", "are", "older", "than", "20", "."], "dataset_name": "spider", "guid": 4005}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?", "sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "query_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.location", ",", "T1.product", "FROM", "enzyme", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.enzyme_id", "=", "T1.id", "WHERE", "T2.interaction_type", "=", "'inhibitor", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", ",", "t1", ".", "location", ",", "t1", ".", "product", "from", "enzyme", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "enzyme_id", "=", "t1", ".", "id", "where", "t2", ".", "interaction_type", "=", "value"], "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?", "question_toks": ["What", "are", "the", "different", "names", ",", "locations", ",", "and", "products", "of", "the", "enzymes", "that", "are", "capable", "inhibitor", "interactions", "?"], "dataset_name": "spider", "guid": 4006}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the distinct breed type and size type combinations for dogs.", "sql": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "example": {"db_id": "dog_kennels", "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "query_toks": ["SELECT", "DISTINCT", "breed_code", ",", "size_code", "FROM", "dogs"], "query_toks_no_value": ["select", "distinct", "breed_code", ",", "size_code", "from", "dogs"], "question": "Find the distinct breed type and size type combinations for dogs.", "question_toks": ["Find", "the", "distinct", "breed", "type", "and", "size", "type", "combinations", "for", "dogs", "."], "dataset_name": "spider", "guid": 4007}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the number of owners who do not own any dogs at this moment.", "sql": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "example": {"db_id": "dog_kennels", "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Owners", "WHERE", "owner_id", "NOT", "IN", "(", "SELECT", "owner_id", "FROM", "Dogs", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "owners", "where", "owner_id", "not", "in", "(", "select", "owner_id", "from", "dogs", ")"], "question": "Find the number of owners who do not own any dogs at this moment.", "question_toks": ["Find", "the", "number", "of", "owners", "who", "do", "not", "own", "any", "dogs", "at", "this", "moment", "."], "dataset_name": "spider", "guid": 4008}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Find the different first names and cities of the students who have allergy to milk or cat.", "sql": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"", "example": {"db_id": "allergy_1", "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"", "query_toks": ["SELECT", "DISTINCT", "T1.fname", ",", "T1.city_code", "FROM", "Student", "AS", "T1", "JOIN", "Has_Allergy", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T2.Allergy", "=", "``", "Milk", "''", "OR", "T2.Allergy", "=", "``", "Cat", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "city_code", "from", "student", "as", "t1", "join", "has_allergy", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t2", ".", "allergy", "=", "value", "or", "t2", ".", "allergy", "=", "value"], "question": "Find the different first names and cities of the students who have allergy to milk or cat.", "question_toks": ["Find", "the", "different", "first", "names", "and", "cities", "of", "the", "students", "who", "have", "allergy", "to", "milk", "or", "cat", "."], "dataset_name": "spider", "guid": 4009}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Show storm name with at least two regions and 10 cities affected.", "sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10", "example": {"db_id": "storm_record", "query": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10", "query_toks": ["SELECT", "T1.name", "FROM", "storm", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.storm_id", "=", "T2.storm_id", "GROUP", "BY", "T1.storm_id", "HAVING", "count", "(", "*", ")", ">", "=", "2", "INTERSECT", "SELECT", "T1.name", "FROM", "storm", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.storm_id", "=", "T2.storm_id", "GROUP", "BY", "T1.storm_id", "HAVING", "sum", "(", "T2.number_city_affected", ")", ">", "=", "10"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "storm", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "storm_id", "=", "t2", ".", "storm_id", "group", "by", "t1", ".", "storm_id", "having", "count", "(", "*", ")", ">", "=", "value", "intersect", "select", "t1", ".", "name", "from", "storm", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "storm_id", "=", "t2", ".", "storm_id", "group", "by", "t1", ".", "storm_id", "having", "sum", "(", "t2", ".", "number_city_affected", ")", ">", "=", "value"], "question": "Show storm name with at least two regions and 10 cities affected.", "question_toks": ["Show", "storm", "name", "with", "at", "least", "two", "regions", "and", "10", "cities", "affected", "."], "dataset_name": "spider", "guid": 4010}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "sql": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "example": {"db_id": "dog_kennels", "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "query_toks": ["SELECT", "professional_id", ",", "last_name", ",", "cell_number", "FROM", "Professionals", "WHERE", "state", "=", "'Indiana", "'", "UNION", "SELECT", "T1.professional_id", ",", "T1.last_name", ",", "T1.cell_number", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "value", "union", "select", "t1", ".", "professional_id", ",", "t1", ".", "last_name", ",", "t1", ".", "cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "question_toks": ["Find", "the", "id", ",", "last", "name", "and", "cell", "phone", "of", "the", "professionals", "who", "live", "in", "the", "state", "of", "Indiana", "or", "have", "performed", "more", "than", "two", "treatments", "."], "dataset_name": "spider", "guid": 4011}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | How many problems does the product with the most problems have? List the number of the problems and product name.", "sql": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_software_problems", "query": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.product_name", "FROM", "product", "AS", "T1", "JOIN", "problems", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "GROUP", "BY", "T1.product_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "product_name", "from", "product", "as", "t1", "join", "problems", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "How many problems does the product with the most problems have? List the number of the problems and product name.", "question_toks": ["How", "many", "problems", "does", "the", "product", "with", "the", "most", "problems", "have", "?", "List", "the", "number", "of", "the", "problems", "and", "product", "name", "."], "dataset_name": "spider", "guid": 4012}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.", "sql": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'", "example": {"db_id": "twitter_1", "query": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'", "query_toks": ["SELECT", "name", "FROM", "user_profiles", "WHERE", "email", "LIKE", "'", "%", "superstar", "%", "'", "OR", "email", "LIKE", "'", "%", "edu", "%", "'"], "query_toks_no_value": ["select", "name", "from", "user_profiles", "where", "email", "like", "value", "or", "email", "like", "value"], "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.", "question_toks": ["Find", "the", "names", "of", "users", "whose", "emails", "contain", "\u2018superstar\u2019", "or", "\u2018edu\u2019", "."], "dataset_name": "spider", "guid": 4013}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names of all of Bob's friends?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'", "example": {"db_id": "network_2", "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'", "query_toks": ["SELECT", "T1.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "=", "'Bob", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "=", "value"], "question": "What are the names of all of Bob's friends?", "question_toks": ["What", "are", "the", "names", "of", "all", "of", "Bob", "'s", "friends", "?"], "dataset_name": "spider", "guid": 4014}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the names, dates active, and number of deaths for storms that had 1 or more death?", "sql": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1", "example": {"db_id": "storm_record", "query": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1", "query_toks": ["SELECT", "name", ",", "dates_active", ",", "number_deaths", "FROM", "storm", "WHERE", "number_deaths", ">", "=", "1"], "query_toks_no_value": ["select", "name", ",", "dates_active", ",", "number_deaths", "from", "storm", "where", "number_deaths", ">", "=", "value"], "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?", "question_toks": ["What", "are", "the", "names", ",", "dates", "active", ",", "and", "number", "of", "deaths", "for", "storms", "that", "had", "1", "or", "more", "death", "?"], "dataset_name": "spider", "guid": 4015}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | Give me the maximum low temperature and average precipitation at the Amersham station.", "sql": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\"", "example": {"db_id": "station_weather", "query": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\"", "query_toks": ["SELECT", "max", "(", "t1.low_temperature", ")", ",", "avg", "(", "t1.precipitation", ")", "FROM", "weekly_weather", "AS", "t1", "JOIN", "station", "AS", "t2", "ON", "t1.station_id", "=", "t2.id", "WHERE", "t2.network_name", "=", "``", "Amersham", "''"], "query_toks_no_value": ["select", "max", "(", "t1", ".", "low_temperature", ")", ",", "avg", "(", "t1", ".", "precipitation", ")", "from", "weekly_weather", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "station_id", "=", "t2", ".", "id", "where", "t2", ".", "network_name", "=", "value"], "question": "Give me the maximum low temperature and average precipitation at the Amersham station.", "question_toks": ["Give", "me", "the", "maximum", "low", "temperature", "and", "average", "precipitation", "at", "the", "Amersham", "station", "."], "dataset_name": "spider", "guid": 4016}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What is the name of the shop that has the greatest quantity of devices in stock?", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1", "example": {"db_id": "device", "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Shop_Name", "FROM", "stock", "AS", "T1", "JOIN", "shop", "AS", "T2", "ON", "T1.Shop_ID", "=", "T2.Shop_ID", "GROUP", "BY", "T1.Shop_ID", "ORDER", "BY", "SUM", "(", "T1.quantity", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "shop_name", "from", "stock", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t1", ".", "shop_id", "order", "by", "sum", "(", "t1", ".", "quantity", ")", "desc", "limit", "value"], "question": "What is the name of the shop that has the greatest quantity of devices in stock?", "question_toks": ["What", "is", "the", "name", "of", "the", "shop", "that", "has", "the", "greatest", "quantity", "of", "devices", "in", "stock", "?"], "dataset_name": "spider", "guid": 4017}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?", "sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'", "query_toks": ["SELECT", "T1.name", "FROM", "enzyme", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T1.id", "=", "T2.enzyme_id", "JOIN", "medicine", "AS", "T3", "ON", "T2.medicine_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Amisulpride", "'", "AND", "T2.interaction_type", "=", "'inhibitor", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "enzyme", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "enzyme_id", "join", "medicine", "as", "t3", "on", "t2", ".", "medicine_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "interaction_type", "=", "value"], "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?", "question_toks": ["What", "are", "the", "names", "of", "the", "enzymes", "used", "in", "the", "medicine", "Amisulpride", "that", "acts", "as", "inhibitors", "?"], "dataset_name": "spider", "guid": 4018}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | How many friends does each student have?", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "example": {"db_id": "network_1", "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "query_toks": ["SELECT", "student_id", ",", "count", "(", "*", ")", "FROM", "Friend", "GROUP", "BY", "student_id"], "query_toks_no_value": ["select", "student_id", ",", "count", "(", "*", ")", "from", "friend", "group", "by", "student_id"], "question": "How many friends does each student have?", "question_toks": ["How", "many", "friends", "does", "each", "student", "have", "?"], "dataset_name": "spider", "guid": 4019}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the average weight for each pet type.", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "example": {"db_id": "pets_1", "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "query_toks": ["SELECT", "avg", "(", "weight", ")", ",", "pettype", "FROM", "pets", "GROUP", "BY", "pettype"], "query_toks_no_value": ["select", "avg", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype"], "question": "Find the average weight for each pet type.", "question_toks": ["Find", "the", "average", "weight", "for", "each", "pet", "type", "."], "dataset_name": "spider", "guid": 4020}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show ids of all students who do not have any friends.", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "example": {"db_id": "network_1", "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "query_toks": ["SELECT", "id", "FROM", "Highschooler", "EXCEPT", "SELECT", "student_id", "FROM", "Friend"], "query_toks_no_value": ["select", "id", "from", "highschooler", "except", "select", "student_id", "from", "friend"], "question": "Show ids of all students who do not have any friends.", "question_toks": ["Show", "ids", "of", "all", "students", "who", "do", "not", "have", "any", "friends", "."], "dataset_name": "spider", "guid": 4021}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Return the names of shops, ordered by year of opening ascending.", "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC", "example": {"db_id": "device", "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC", "query_toks": ["SELECT", "Shop_Name", "FROM", "shop", "ORDER", "BY", "Open_Year", "ASC"], "query_toks_no_value": ["select", "shop_name", "from", "shop", "order", "by", "open_year", "asc"], "question": "Return the names of shops, ordered by year of opening ascending.", "question_toks": ["Return", "the", "names", "of", "shops", ",", "ordered", "by", "year", "of", "opening", "ascending", "."], "dataset_name": "spider", "guid": 4022}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Which students are unaffected by allergies?", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy", "example": {"db_id": "allergy_1", "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy", "query_toks": ["SELECT", "StuID", "FROM", "Student", "EXCEPT", "SELECT", "StuID", "FROM", "Has_allergy"], "query_toks_no_value": ["select", "stuid", "from", "student", "except", "select", "stuid", "from", "has_allergy"], "question": "Which students are unaffected by allergies?", "question_toks": ["Which", "students", "are", "unaffected", "by", "allergies", "?"], "dataset_name": "spider", "guid": 4023}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | What distinct accelerator names are compatible with the browswers that have market share higher than 15?", "sql": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;", "example": {"db_id": "browser_web", "query": "SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.market_share  >  15;", "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "web_client_accelerator", "AS", "T1", "JOIN", "accelerator_compatible_browser", "AS", "T2", "ON", "T2.accelerator_id", "=", "T1.id", "JOIN", "browser", "AS", "T3", "ON", "T2.browser_id", "=", "T3.id", "WHERE", "T3.market_share", ">", "15", ";"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "web_client_accelerator", "as", "t1", "join", "accelerator_compatible_browser", "as", "t2", "on", "t2", ".", "accelerator_id", "=", "t1", ".", "id", "join", "browser", "as", "t3", "on", "t2", ".", "browser_id", "=", "t3", ".", "id", "where", "t3", ".", "market_share", ">", "value"], "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?", "question_toks": ["What", "distinct", "accelerator", "names", "are", "compatible", "with", "the", "browswers", "that", "have", "market", "share", "higher", "than", "15", "?"], "dataset_name": "spider", "guid": 4024}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students live in each city?", "sql": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code", "example": {"db_id": "allergy_1", "query": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code", "query_toks": ["SELECT", "city_code", ",", "count", "(", "*", ")", "FROM", "Student", "GROUP", "BY", "city_code"], "query_toks_no_value": ["select", "city_code", ",", "count", "(", "*", ")", "from", "student", "group", "by", "city_code"], "question": "How many students live in each city?", "question_toks": ["How", "many", "students", "live", "in", "each", "city", "?"], "dataset_name": "spider", "guid": 4025}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What are the log id and entry description of each problem?", "sql": "SELECT problem_log_id ,  log_entry_description FROM problem_log", "example": {"db_id": "tracking_software_problems", "query": "SELECT problem_log_id ,  log_entry_description FROM problem_log", "query_toks": ["SELECT", "problem_log_id", ",", "log_entry_description", "FROM", "problem_log"], "query_toks_no_value": ["select", "problem_log_id", ",", "log_entry_description", "from", "problem_log"], "question": "What are the log id and entry description of each problem?", "question_toks": ["What", "are", "the", "log", "id", "and", "entry", "description", "of", "each", "problem", "?"], "dataset_name": "spider", "guid": 4026}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Give the average quantity of stocks.", "sql": "SELECT avg(Quantity) FROM stock", "example": {"db_id": "device", "query": "SELECT avg(Quantity) FROM stock", "query_toks": ["SELECT", "avg", "(", "Quantity", ")", "FROM", "stock"], "query_toks_no_value": ["select", "avg", "(", "quantity", ")", "from", "stock"], "question": "Give the average quantity of stocks.", "question_toks": ["Give", "the", "average", "quantity", "of", "stocks", "."], "dataset_name": "spider", "guid": 4027}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What is the average and maximum damage in millions for storms that had a max speed over 1000?", "sql": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000", "example": {"db_id": "storm_record", "query": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000", "query_toks": ["SELECT", "avg", "(", "damage_millions_USD", ")", ",", "max", "(", "damage_millions_USD", ")", "FROM", "storm", "WHERE", "max_speed", ">", "1000"], "query_toks_no_value": ["select", "avg", "(", "damage_millions_usd", ")", ",", "max", "(", "damage_millions_usd", ")", "from", "storm", "where", "max_speed", ">", "value"], "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?", "question_toks": ["What", "is", "the", "average", "and", "maximum", "damage", "in", "millions", "for", "storms", "that", "had", "a", "max", "speed", "over", "1000", "?"], "dataset_name": "spider", "guid": 4028}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Count the number of friends Kyle has.", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "example": {"db_id": "network_1", "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "Count the number of friends Kyle has.", "question_toks": ["Count", "the", "number", "of", "friends", "Kyle", "has", "."], "dataset_name": "spider", "guid": 4029}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | How many devices are there?", "sql": "SELECT count(*) FROM device", "example": {"db_id": "device", "query": "SELECT count(*) FROM device", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "device"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "device"], "question": "How many devices are there?", "question_toks": ["How", "many", "devices", "are", "there", "?"], "dataset_name": "spider", "guid": 4030}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | List the date of each treatment, together with the first name of the professional who operated it.", "sql": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "example": {"db_id": "dog_kennels", "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "query_toks": ["SELECT", "T1.date_of_treatment", ",", "T2.first_name", "FROM", "Treatments", "AS", "T1", "JOIN", "Professionals", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id"], "query_toks_no_value": ["select", "t1", ".", "date_of_treatment", ",", "t2", ".", "first_name", "from", "treatments", "as", "t1", "join", "professionals", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id"], "question": "List the date of each treatment, together with the first name of the professional who operated it.", "question_toks": ["List", "the", "date", "of", "each", "treatment", ",", "together", "with", "the", "first", "name", "of", "the", "professional", "who", "operated", "it", "."], "dataset_name": "spider", "guid": 4031}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | list the local authorities and services provided by all stations.", "sql": "SELECT local_authority ,  services FROM station", "example": {"db_id": "station_weather", "query": "SELECT local_authority ,  services FROM station", "query_toks": ["SELECT", "local_authority", ",", "services", "FROM", "station"], "query_toks_no_value": ["select", "local_authority", ",", "services", "from", "station"], "question": "list the local authorities and services provided by all stations.", "question_toks": ["list", "the", "local", "authorities", "and", "services", "provided", "by", "all", "stations", "."], "dataset_name": "spider", "guid": 4032}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | List the ids of the problems from the product \"voluptatem\" that are reported after 1995?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"", "query_toks": ["SELECT", "T1.problem_id", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "WHERE", "T2.product_name", "=", "``", "voluptatem", "''", "AND", "T1.date_problem_reported", ">", "``", "1995", "''"], "query_toks_no_value": ["select", "t1", ".", "problem_id", "from", "problems", "as", "t1", "join", "product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t2", ".", "product_name", "=", "value", "and", "t1", ".", "date_problem_reported", ">", "value"], "question": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?", "question_toks": ["List", "the", "ids", "of", "the", "problems", "from", "the", "product", "``", "voluptatem", "''", "that", "are", "reported", "after", "1995", "?"], "dataset_name": "spider", "guid": 4033}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | How many dog pets are raised by female students?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "example": {"db_id": "pets_1", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T2.petid", "=", "T3.petid", "WHERE", "T1.sex", "=", "'F", "'", "AND", "T3.pettype", "=", "'dog", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t2", ".", "petid", "=", "t3", ".", "petid", "where", "t1", ".", "sex", "=", "value", "and", "t3", ".", "pettype", "=", "value"], "question": "How many dog pets are raised by female students?", "question_toks": ["How", "many", "dog", "pets", "are", "raised", "by", "female", "students", "?"], "dataset_name": "spider", "guid": 4034}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Which advisor has most number of students?", "sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "allergy_1", "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "advisor", "FROM", "Student", "GROUP", "BY", "advisor", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "advisor", "from", "student", "group", "by", "advisor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which advisor has most number of students?", "question_toks": ["Which", "advisor", "has", "most", "number", "of", "students", "?"], "dataset_name": "spider", "guid": 4035}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Who has friends that are older than the average age? Print their friends and their ages as well", "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)", "example": {"db_id": "network_2", "query": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)", "query_toks": ["SELECT", "DISTINCT", "T2.name", ",", "T2.friend", ",", "T1.age", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T1.age", ">", "(", "SELECT", "avg", "(", "age", ")", "FROM", "person", ")"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", ",", "t2", ".", "friend", ",", "t1", ".", "age", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t1", ".", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "person", ")"], "question": "Who has friends that are older than the average age? Print their friends and their ages as well", "question_toks": ["Who", "has", "friends", "that", "are", "older", "than", "the", "average", "age", "?", "Print", "their", "friends", "and", "their", "ages", "as", "well"], "dataset_name": "spider", "guid": 4036}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What are the names of students who have 2 or more likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "example": {"db_id": "network_1", "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.name", "FROM", "Likes", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of students who have 2 or more likes?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "have", "2", "or", "more", "likes", "?"], "dataset_name": "spider", "guid": 4037}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the first names that are used for professionals or owners but are not used as dog names.", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "example": {"db_id": "dog_kennels", "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "query_toks": ["SELECT", "first_name", "FROM", "Professionals", "UNION", "SELECT", "first_name", "FROM", "Owners", "EXCEPT", "SELECT", "name", "FROM", "Dogs"], "query_toks_no_value": ["select", "first_name", "from", "professionals", "union", "select", "first_name", "from", "owners", "except", "select", "name", "from", "dogs"], "question": "Find the first names that are used for professionals or owners but are not used as dog names.", "question_toks": ["Find", "the", "first", "names", "that", "are", "used", "for", "professionals", "or", "owners", "but", "are", "not", "used", "as", "dog", "names", "."], "dataset_name": "spider", "guid": 4038}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | How many dogs have an age below the average?", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "example": {"db_id": "dog_kennels", "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Dogs", "WHERE", "age", "<", "(", "SELECT", "avg", "(", "age", ")", "FROM", "Dogs", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")"], "question": "How many dogs have an age below the average?", "question_toks": ["How", "many", "dogs", "have", "an", "age", "below", "the", "average", "?"], "dataset_name": "spider", "guid": 4039}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names of everybody sorted by age in descending order?", "sql": "SELECT name FROM Person ORDER BY age DESC", "example": {"db_id": "network_2", "query": "SELECT name FROM Person ORDER BY age DESC", "query_toks": ["SELECT", "name", "FROM", "Person", "ORDER", "BY", "age", "DESC"], "query_toks_no_value": ["select", "name", "from", "person", "order", "by", "age", "desc"], "question": "What are the names of everybody sorted by age in descending order?", "question_toks": ["What", "are", "the", "names", "of", "everybody", "sorted", "by", "age", "in", "descending", "order", "?"], "dataset_name": "spider", "guid": 4040}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the number of tweets in record.", "sql": "SELECT count(*) FROM tweets", "example": {"db_id": "twitter_1", "query": "SELECT count(*) FROM tweets", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "tweets"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tweets"], "question": "Find the number of tweets in record.", "question_toks": ["Find", "the", "number", "of", "tweets", "in", "record", "."], "dataset_name": "spider", "guid": 4041}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which breed do the most dogs have? Give me the breed name.", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "dog_kennels", "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.breed_name", "FROM", "Breeds", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.breed_code", "=", "T2.breed_code", "GROUP", "BY", "T1.breed_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "breed_code", "=", "t2", ".", "breed_code", "group", "by", "t1", ".", "breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which breed do the most dogs have? Give me the breed name.", "question_toks": ["Which", "breed", "do", "the", "most", "dogs", "have", "?", "Give", "me", "the", "breed", "name", "."], "dataset_name": "spider", "guid": 4042}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many allergy entries are there?", "sql": "SELECT count(DISTINCT allergy) FROM Allergy_type", "example": {"db_id": "allergy_1", "query": "SELECT count(DISTINCT allergy) FROM Allergy_type", "query_toks": ["SELECT", "count", "(", "DISTINCT", "allergy", ")", "FROM", "Allergy_type"], "query_toks_no_value": ["select", "count", "(", "distinct", "allergy", ")", "from", "allergy_type"], "question": "How many allergy entries are there?", "question_toks": ["How", "many", "allergy", "entries", "are", "there", "?"], "dataset_name": "spider", "guid": 4043}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are the id, role, and first name of the professionals who have performed two or more treatments?", "sql": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "example": {"db_id": "dog_kennels", "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.professional_id", ",", "T1.role_code", ",", "T1.first_name", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "professional_id", ",", "t1", ".", "role_code", ",", "t1", ".", "first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "question_toks": ["What", "are", "the", "id", ",", "role", ",", "and", "first", "name", "of", "the", "professionals", "who", "have", "performed", "two", "or", "more", "treatments", "?"], "dataset_name": "spider", "guid": 4044}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | How many high schoolers are there in grade 9 or 10?", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "example": {"db_id": "network_1", "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Highschooler", "WHERE", "grade", "=", "9", "OR", "grade", "=", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "value", "or", "grade", "=", "value"], "question": "How many high schoolers are there in grade 9 or 10?", "question_toks": ["How", "many", "high", "schoolers", "are", "there", "in", "grade", "9", "or", "10", "?"], "dataset_name": "spider", "guid": 4045}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the maximum and total number of followers of all users.", "sql": "SELECT max(followers) ,  sum(followers) FROM user_profiles", "example": {"db_id": "twitter_1", "query": "SELECT max(followers) ,  sum(followers) FROM user_profiles", "query_toks": ["SELECT", "max", "(", "followers", ")", ",", "sum", "(", "followers", ")", "FROM", "user_profiles"], "query_toks_no_value": ["select", "max", "(", "followers", ")", ",", "sum", "(", "followers", ")", "from", "user_profiles"], "question": "Find the maximum and total number of followers of all users.", "question_toks": ["Find", "the", "maximum", "and", "total", "number", "of", "followers", "of", "all", "users", "."], "dataset_name": "spider", "guid": 4046}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students are over 18 and do not have allergy to food type or animal type?", "sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student", "WHERE", "age", ">", "18", "AND", "StuID", "NOT", "IN", "(", "SELECT", "StuID", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_Type", "AS", "T2", "ON", "T1.Allergy", "=", "T2.Allergy", "WHERE", "T2.allergytype", "=", "``", "food", "''", "OR", "T2.allergytype", "=", "``", "animal", "''", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "where", "age", ">", "value", "and", "stuid", "not", "in", "(", "select", "stuid", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "where", "t2", ".", "allergytype", "=", "value", "or", "t2", ".", "allergytype", "=", "value", ")"], "question": "How many students are over 18 and do not have allergy to food type or animal type?", "question_toks": ["How", "many", "students", "are", "over", "18", "and", "do", "not", "have", "allergy", "to", "food", "type", "or", "animal", "type", "?"], "dataset_name": "spider", "guid": 4047}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "example": {"db_id": "dog_kennels", "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "query_toks": ["SELECT", "role_code", ",", "street", ",", "city", ",", "state", "FROM", "professionals", "WHERE", "city", "LIKE", "'", "%", "West", "%", "'"], "query_toks_no_value": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "value"], "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "question_toks": ["Which", "professionals", "live", "in", "a", "city", "containing", "the", "substring", "'West", "'", "?", "List", "his", "or", "her", "role", ",", "street", ",", "city", "and", "state", "."], "dataset_name": "spider", "guid": 4048}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | How many likes correspond to each student id?", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "example": {"db_id": "network_1", "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "query_toks": ["SELECT", "student_id", ",", "count", "(", "*", ")", "FROM", "Likes", "GROUP", "BY", "student_id"], "query_toks_no_value": ["select", "student_id", ",", "count", "(", "*", ")", "from", "likes", "group", "by", "student_id"], "question": "How many likes correspond to each student id?", "question_toks": ["How", "many", "likes", "correspond", "to", "each", "student", "id", "?"], "dataset_name": "spider", "guid": 4049}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What type of pet is the youngest animal, and how much does it weigh?", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "example": {"db_id": "pets_1", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "query_toks": ["SELECT", "pettype", ",", "weight", "FROM", "pets", "ORDER", "BY", "pet_age", "LIMIT", "1"], "query_toks_no_value": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "value"], "question": "What type of pet is the youngest animal, and how much does it weigh?", "question_toks": ["What", "type", "of", "pet", "is", "the", "youngest", "animal", ",", "and", "how", "much", "does", "it", "weigh", "?"], "dataset_name": "spider", "guid": 4050}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?", "sql": "SELECT max(OMIM) FROM enzyme", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT max(OMIM) FROM enzyme", "query_toks": ["SELECT", "max", "(", "OMIM", ")", "FROM", "enzyme"], "query_toks_no_value": ["select", "max", "(", "omim", ")", "from", "enzyme"], "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?", "question_toks": ["What", "is", "the", "maximum", "Online", "Mendelian", "Inheritance", "in", "Man", "(", "OMIM", ")", "value", "of", "the", "enzymes", "?"], "dataset_name": "spider", "guid": 4051}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the first name and age of students who have a dog but do not have a cat as a pet.", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "example": {"db_id": "pets_1", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "query_toks": ["SELECT", "T1.fname", ",", "T1.age", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'dog", "'", "AND", "T1.stuid", "NOT", "IN", "(", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "and", "t1", ".", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", ")"], "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "question_toks": ["Find", "the", "first", "name", "and", "age", "of", "students", "who", "have", "a", "dog", "but", "do", "not", "have", "a", "cat", "as", "a", "pet", "."], "dataset_name": "spider", "guid": 4052}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How many friends does Dan have?", "sql": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'", "example": {"db_id": "network_2", "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'", "query_toks": ["SELECT", "count", "(", "T2.friend", ")", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T1.name", "=", "'Dan", "'"], "query_toks_no_value": ["select", "count", "(", "t2", ".", "friend", ")", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t1", ".", "name", "=", "value"], "question": "How many friends does Dan have?", "question_toks": ["How", "many", "friends", "does", "Dan", "have", "?"], "dataset_name": "spider", "guid": 4053}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What major is every student who does not own a cat as a pet, and also how old are they?", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "example": {"db_id": "pets_1", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "query_toks": ["SELECT", "major", ",", "age", "FROM", "student", "WHERE", "stuid", "NOT", "IN", "(", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", ")"], "query_toks_no_value": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", ")"], "question": "What major is every student who does not own a cat as a pet, and also how old are they?", "question_toks": ["What", "major", "is", "every", "student", "who", "does", "not", "own", "a", "cat", "as", "a", "pet", ",", "and", "also", "how", "old", "are", "they", "?"], "dataset_name": "spider", "guid": 4054}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the name and email of the user whose name contains the word \u2018Swift\u2019.", "sql": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'", "example": {"db_id": "twitter_1", "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'", "query_toks": ["SELECT", "name", ",", "email", "FROM", "user_profiles", "WHERE", "name", "LIKE", "'", "%", "Swift", "%", "'"], "query_toks_no_value": ["select", "name", ",", "email", "from", "user_profiles", "where", "name", "like", "value"], "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.", "question_toks": ["Find", "the", "name", "and", "email", "of", "the", "user", "whose", "name", "contains", "the", "word", "\u2018Swift\u2019", "."], "dataset_name": "spider", "guid": 4055}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | For every medicine id, what are the names of the medicines that can interact with more than one enzyme?", "sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.id", ",", "T1.Name", "FROM", "medicine", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.medicine_id", "=", "T1.id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "medicine", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "medicine_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?", "question_toks": ["For", "every", "medicine", "id", ",", "what", "are", "the", "names", "of", "the", "medicines", "that", "can", "interact", "with", "more", "than", "one", "enzyme", "?"], "dataset_name": "spider", "guid": 4056}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | List all region names in alphabetical order.", "sql": "SELECT region_name FROM region ORDER BY region_name", "example": {"db_id": "storm_record", "query": "SELECT region_name FROM region ORDER BY region_name", "query_toks": ["SELECT", "region_name", "FROM", "region", "ORDER", "BY", "region_name"], "query_toks_no_value": ["select", "region_name", "from", "region", "order", "by", "region_name"], "question": "List all region names in alphabetical order.", "question_toks": ["List", "all", "region", "names", "in", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 4057}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What are the names of shops that have more than a single kind of device in stock?", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1", "example": {"db_id": "device", "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T2.Shop_Name", "FROM", "stock", "AS", "T1", "JOIN", "shop", "AS", "T2", "ON", "T1.Shop_ID", "=", "T2.Shop_ID", "GROUP", "BY", "T1.Shop_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "shop_name", "from", "stock", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t1", ".", "shop_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of shops that have more than a single kind of device in stock?", "question_toks": ["What", "are", "the", "names", "of", "shops", "that", "have", "more", "than", "a", "single", "kind", "of", "device", "in", "stock", "?"], "dataset_name": "spider", "guid": 4058}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Find the number of students who are older than 18 and do not have allergy to either food or animal.", "sql": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student", "WHERE", "age", ">", "18", "AND", "StuID", "NOT", "IN", "(", "SELECT", "StuID", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_Type", "AS", "T2", "ON", "T1.Allergy", "=", "T2.Allergy", "WHERE", "T2.allergytype", "=", "``", "food", "''", "OR", "T2.allergytype", "=", "``", "animal", "''", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "where", "age", ">", "value", "and", "stuid", "not", "in", "(", "select", "stuid", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "where", "t2", ".", "allergytype", "=", "value", "or", "t2", ".", "allergytype", "=", "value", ")"], "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.", "question_toks": ["Find", "the", "number", "of", "students", "who", "are", "older", "than", "18", "and", "do", "not", "have", "allergy", "to", "either", "food", "or", "animal", "."], "dataset_name": "spider", "guid": 4059}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Which staff members are assigned to the problem with id 1? Give me their first and last names.", "sql": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1", "example": {"db_id": "tracking_software_problems", "query": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1", "query_toks": ["SELECT", "DISTINCT", "staff_first_name", ",", "staff_last_name", "FROM", "staff", "AS", "T1", "JOIN", "problem_log", "AS", "T2", "ON", "T1.staff_id", "=", "T2.assigned_to_staff_id", "WHERE", "T2.problem_id", "=", "1"], "query_toks_no_value": ["select", "distinct", "staff_first_name", ",", "staff_last_name", "from", "staff", "as", "t1", "join", "problem_log", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "assigned_to_staff_id", "where", "t2", ".", "problem_id", "=", "value"], "question": "Which staff members are assigned to the problem with id 1? Give me their first and last names.", "question_toks": ["Which", "staff", "members", "are", "assigned", "to", "the", "problem", "with", "id", "1", "?", "Give", "me", "their", "first", "and", "last", "names", "."], "dataset_name": "spider", "guid": 4060}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.", "sql": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008", "example": {"db_id": "device", "query": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008", "query_toks": ["SELECT", "LOCATION", "FROM", "shop", "WHERE", "Open_Year", ">", "2012", "INTERSECT", "SELECT", "LOCATION", "FROM", "shop", "WHERE", "Open_Year", "<", "2008"], "query_toks_no_value": ["select", "location", "from", "shop", "where", "open_year", ">", "value", "intersect", "select", "location", "from", "shop", "where", "open_year", "<", "value"], "question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.", "question_toks": ["Show", "the", "locations", "shared", "by", "shops", "with", "open", "year", "later", "than", "2012", "and", "shops", "with", "open", "year", "before", "2008", "."], "dataset_name": "spider", "guid": 4061}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | List the name of browsers in descending order by market share.", "sql": "SELECT name FROM browser ORDER BY market_share DESC", "example": {"db_id": "browser_web", "query": "SELECT name FROM browser ORDER BY market_share DESC", "query_toks": ["SELECT", "name", "FROM", "browser", "ORDER", "BY", "market_share", "DESC"], "query_toks_no_value": ["select", "name", "from", "browser", "order", "by", "market_share", "desc"], "question": "List the name of browsers in descending order by market share.", "question_toks": ["List", "the", "name", "of", "browsers", "in", "descending", "order", "by", "market", "share", "."], "dataset_name": "spider", "guid": 4062}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names of all females who are friends with Zach?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'", "example": {"db_id": "network_2", "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'", "query_toks": ["SELECT", "T1.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "=", "'Zach", "'", "AND", "T1.gender", "=", "'female", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "=", "value", "and", "t1", ".", "gender", "=", "value"], "question": "What are the names of all females who are friends with Zach?", "question_toks": ["What", "are", "the", "names", "of", "all", "females", "who", "are", "friends", "with", "Zach", "?"], "dataset_name": "spider", "guid": 4063}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the average age for all person?", "sql": "SELECT avg(age) FROM Person", "example": {"db_id": "network_2", "query": "SELECT avg(age) FROM Person", "query_toks": ["SELECT", "avg", "(", "age", ")", "FROM", "Person"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "person"], "question": "What is the average age for all person?", "question_toks": ["What", "is", "the", "average", "age", "for", "all", "person", "?"], "dataset_name": "spider", "guid": 4064}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all majors and corresponding number of students.", "sql": "SELECT major ,  count(*) FROM Student GROUP BY major", "example": {"db_id": "allergy_1", "query": "SELECT major ,  count(*) FROM Student GROUP BY major", "query_toks": ["SELECT", "major", ",", "count", "(", "*", ")", "FROM", "Student", "GROUP", "BY", "major"], "query_toks_no_value": ["select", "major", ",", "count", "(", "*", ")", "from", "student", "group", "by", "major"], "question": "Show all majors and corresponding number of students.", "question_toks": ["Show", "all", "majors", "and", "corresponding", "number", "of", "students", "."], "dataset_name": "spider", "guid": 4065}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the names of storms that did not affect any regions?", "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)", "example": {"db_id": "storm_record", "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)", "query_toks": ["SELECT", "name", "FROM", "storm", "WHERE", "storm_id", "NOT", "IN", "(", "SELECT", "storm_id", "FROM", "affected_region", ")"], "query_toks_no_value": ["select", "name", "from", "storm", "where", "storm_id", "not", "in", "(", "select", "storm_id", "from", "affected_region", ")"], "question": "What are the names of storms that did not affect any regions?", "question_toks": ["What", "are", "the", "names", "of", "storms", "that", "did", "not", "affect", "any", "regions", "?"], "dataset_name": "spider", "guid": 4066}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "sql": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'", "query_toks": ["SELECT", "T1.interaction_type", "FROM", "medicine_enzyme_interaction", "AS", "T1", "JOIN", "medicine", "AS", "T2", "ON", "T1.medicine_id", "=", "T2.id", "JOIN", "enzyme", "AS", "T3", "ON", "T1.enzyme_id", "=", "T3.id", "WHERE", "T3.name", "=", "'ALA", "synthase", "'", "AND", "T2.name", "=", "'Aripiprazole", "'"], "query_toks_no_value": ["select", "t1", ".", "interaction_type", "from", "medicine_enzyme_interaction", "as", "t1", "join", "medicine", "as", "t2", "on", "t1", ".", "medicine_id", "=", "t2", ".", "id", "join", "enzyme", "as", "t3", "on", "t1", ".", "enzyme_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?", "question_toks": ["What", "is", "the", "interaction", "type", "of", "the", "enzyme", "named", "'ALA", "synthase", "'", "and", "the", "medicine", "named", "'Aripiprazole", "'", "?"], "dataset_name": "spider", "guid": 4067}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.", "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "query_toks": ["SELECT", "name", ",", "trade_name", "FROM", "medicine", "EXCEPT", "SELECT", "T1.name", ",", "T1.trade_name", "FROM", "medicine", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.medicine_id", "=", "T1.id", "JOIN", "enzyme", "AS", "T3", "ON", "T3.id", "=", "T2.enzyme_id", "WHERE", "T3.product", "=", "'Protoporphyrinogen", "IX", "'"], "query_toks_no_value": ["select", "name", ",", "trade_name", "from", "medicine", "except", "select", "t1", ".", "name", ",", "t1", ".", "trade_name", "from", "medicine", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "medicine_id", "=", "t1", ".", "id", "join", "enzyme", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "enzyme_id", "where", "t3", ".", "product", "=", "value"], "question": "Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.", "question_toks": ["Show", "the", "medicine", "names", "and", "trade", "names", "that", "can", "not", "interact", "with", "the", "enzyme", "with", "product", "'Heme", "'", "."], "dataset_name": "spider", "guid": 4068}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the names of regions that were affected by the storm in which the most people died?", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "example": {"db_id": "storm_record", "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "query_toks": ["SELECT", "T2.region_name", "FROM", "affected_region", "AS", "T1", "JOIN", "region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "JOIN", "storm", "AS", "T3", "ON", "T1.storm_id", "=", "T3.storm_id", "ORDER", "BY", "T3.Number_Deaths", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "region_name", "from", "affected_region", "as", "t1", "join", "region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "join", "storm", "as", "t3", "on", "t1", ".", "storm_id", "=", "t3", ".", "storm_id", "order", "by", "t3", ".", "number_deaths", "desc", "limit", "value"], "question": "What are the names of regions that were affected by the storm in which the most people died?", "question_toks": ["What", "are", "the", "names", "of", "regions", "that", "were", "affected", "by", "the", "storm", "in", "which", "the", "most", "people", "died", "?"], "dataset_name": "spider", "guid": 4069}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the name and age of every male? Order the results by age.", "sql": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age", "example": {"db_id": "network_2", "query": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age", "query_toks": ["SELECT", "name", "FROM", "Person", "WHERE", "gender", "=", "'male", "'", "ORDER", "BY", "age"], "query_toks_no_value": ["select", "name", "from", "person", "where", "gender", "=", "value", "order", "by", "age"], "question": "What is the name and age of every male? Order the results by age.", "question_toks": ["What", "is", "the", "name", "and", "age", "of", "every", "male", "?", "Order", "the", "results", "by", "age", "."], "dataset_name": "spider", "guid": 4070}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Count the number of different software platforms.", "sql": "SELECT count(DISTINCT Software_Platform) FROM device", "example": {"db_id": "device", "query": "SELECT count(DISTINCT Software_Platform) FROM device", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Software_Platform", ")", "FROM", "device"], "query_toks_no_value": ["select", "count", "(", "distinct", "software_platform", ")", "from", "device"], "question": "Count the number of different software platforms.", "question_toks": ["Count", "the", "number", "of", "different", "software", "platforms", "."], "dataset_name": "spider", "guid": 4071}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Which grade has the most high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "network_1", "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "grade", "FROM", "Highschooler", "GROUP", "BY", "grade", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which grade has the most high schoolers?", "question_toks": ["Which", "grade", "has", "the", "most", "high", "schoolers", "?"], "dataset_name": "spider", "guid": 4072}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Which friend of Zach has the longest-lasting friendship?", "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "example": {"db_id": "network_2", "query": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "query_toks": ["SELECT", "friend", "FROM", "PersonFriend", "WHERE", "name", "=", "'Zach", "'", "AND", "YEAR", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "PersonFriend", "WHERE", "name", "=", "'Zach", "'", ")"], "query_toks_no_value": ["select", "friend", "from", "personfriend", "where", "name", "=", "value", "and", "year", "=", "(", "select", "max", "(", "year", ")", "from", "personfriend", "where", "name", "=", "value", ")"], "question": "Which friend of Zach has the longest-lasting friendship?", "question_toks": ["Which", "friend", "of", "Zach", "has", "the", "longest-lasting", "friendship", "?"], "dataset_name": "spider", "guid": 4073}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show the names of all high schoolers in grade 10.", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "example": {"db_id": "network_1", "query": "SELECT name FROM Highschooler WHERE grade  =  10", "query_toks": ["SELECT", "name", "FROM", "Highschooler", "WHERE", "grade", "=", "10"], "query_toks_no_value": ["select", "name", "from", "highschooler", "where", "grade", "=", "value"], "question": "Show the names of all high schoolers in grade 10.", "question_toks": ["Show", "the", "names", "of", "all", "high", "schoolers", "in", "grade", "10", "."], "dataset_name": "spider", "guid": 4074}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show first name and last name for all students.", "sql": "SELECT Fname ,  Lname FROM Student", "example": {"db_id": "allergy_1", "query": "SELECT Fname ,  Lname FROM Student", "query_toks": ["SELECT", "Fname", ",", "Lname", "FROM", "Student"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student"], "question": "Show first name and last name for all students.", "question_toks": ["Show", "first", "name", "and", "last", "name", "for", "all", "students", "."], "dataset_name": "spider", "guid": 4075}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Count the number of storms in which at least 1 person died.", "sql": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0", "example": {"db_id": "storm_record", "query": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "storm", "WHERE", "Number_Deaths", ">", "0"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "storm", "where", "number_deaths", ">", "value"], "question": "Count the number of storms in which at least 1 person died.", "question_toks": ["Count", "the", "number", "of", "storms", "in", "which", "at", "least", "1", "person", "died", "."], "dataset_name": "spider", "guid": 4076}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Who is the friend of Zach with longest year relationship?", "sql": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "example": {"db_id": "network_2", "query": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "query_toks": ["SELECT", "friend", "FROM", "PersonFriend", "WHERE", "name", "=", "'Zach", "'", "AND", "YEAR", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "PersonFriend", "WHERE", "name", "=", "'Zach", "'", ")"], "query_toks_no_value": ["select", "friend", "from", "personfriend", "where", "name", "=", "value", "and", "year", "=", "(", "select", "max", "(", "year", ")", "from", "personfriend", "where", "name", "=", "value", ")"], "question": "Who is the friend of Zach with longest year relationship?", "question_toks": ["Who", "is", "the", "friend", "of", "Zach", "with", "longest", "year", "relationship", "?"], "dataset_name": "spider", "guid": 4077}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What is the largest major?", "sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "allergy_1", "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "major", "FROM", "Student", "GROUP", "BY", "major", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "major", "from", "student", "group", "by", "major", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the largest major?", "question_toks": ["What", "is", "the", "largest", "major", "?"], "dataset_name": "spider", "guid": 4078}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | How many accelerators are not compatible with the browsers listed ?", "sql": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );", "example": {"db_id": "browser_web", "query": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser );", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "web_client_accelerator", "WHERE", "id", "NOT", "IN", "(", "SELECT", "accelerator_id", "FROM", "accelerator_compatible_browser", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "web_client_accelerator", "where", "id", "not", "in", "(", "select", "accelerator_id", "from", "accelerator_compatible_browser", ")"], "question": "How many accelerators are not compatible with the browsers listed ?", "question_toks": ["How", "many", "accelerators", "are", "not", "compatible", "with", "the", "browsers", "listed", "?"], "dataset_name": "spider", "guid": 4079}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Show me the cost of the most recently performed treatment.", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "example": {"db_id": "dog_kennels", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "query_toks": ["SELECT", "cost_of_treatment", "FROM", "Treatments", "ORDER", "BY", "date_of_treatment", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "value"], "question": "Show me the cost of the most recently performed treatment.", "question_toks": ["Show", "me", "the", "cost", "of", "the", "most", "recently", "performed", "treatment", "."], "dataset_name": "spider", "guid": 4080}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | List each charge type and its amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "example": {"db_id": "dog_kennels", "query": "SELECT charge_type ,  charge_amount FROM Charges", "query_toks": ["SELECT", "charge_type", ",", "charge_amount", "FROM", "Charges"], "query_toks_no_value": ["select", "charge_type", ",", "charge_amount", "from", "charges"], "question": "List each charge type and its amount.", "question_toks": ["List", "each", "charge", "type", "and", "its", "amount", "."], "dataset_name": "spider", "guid": 4081}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the first name and major of the students who are able to consume soy?", "sql": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")", "example": {"db_id": "allergy_1", "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")", "query_toks": ["SELECT", "fname", ",", "major", "FROM", "Student", "WHERE", "StuID", "NOT", "IN", "(", "SELECT", "StuID", "FROM", "Has_allergy", "WHERE", "Allergy", "=", "``", "Soy", "''", ")"], "query_toks_no_value": ["select", "fname", ",", "major", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_allergy", "where", "allergy", "=", "value", ")"], "question": "What are the first name and major of the students who are able to consume soy?", "question_toks": ["What", "are", "the", "first", "name", "and", "major", "of", "the", "students", "who", "are", "able", "to", "consume", "soy", "?"], "dataset_name": "spider", "guid": 4082}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?", "sql": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC", "query_toks": ["SELECT", "T1.id", ",", "T1.Name", ",", "T1.FDA_approved", "FROM", "medicine", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.medicine_id", "=", "T1.id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", ",", "t1", ".", "fda_approved", "from", "medicine", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "medicine_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc"], "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?", "question_toks": ["What", "are", "the", "ids", ",", "names", ",", "and", "FDA", "approval", "status", "for", "medicines", "ordered", "by", "descending", "number", "of", "possible", "enzyme", "interactions", "?"], "dataset_name": "spider", "guid": 4083}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the average number of followers for the users who do not have any tweet.", "sql": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)", "example": {"db_id": "twitter_1", "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)", "query_toks": ["SELECT", "avg", "(", "followers", ")", "FROM", "user_profiles", "WHERE", "UID", "NOT", "IN", "(", "SELECT", "UID", "FROM", "tweets", ")"], "query_toks_no_value": ["select", "avg", "(", "followers", ")", "from", "user_profiles", "where", "uid", "not", "in", "(", "select", "uid", "from", "tweets", ")"], "question": "Find the average number of followers for the users who do not have any tweet.", "question_toks": ["Find", "the", "average", "number", "of", "followers", "for", "the", "users", "who", "do", "not", "have", "any", "tweet", "."], "dataset_name": "spider", "guid": 4084}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?", "sql": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'", "example": {"db_id": "browser_web", "query": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'", "query_toks": ["SELECT", "name", ",", "operating_system", "FROM", "web_client_accelerator", "WHERE", "CONNECTION", "!", "=", "'Broadband", "'"], "query_toks_no_value": ["select", "name", ",", "operating_system", "from", "web_client_accelerator", "where", "connection", "!", "=", "value"], "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?", "question_toks": ["What", "are", "the", "name", "and", "os", "of", "web", "client", "accelerators", "that", "do", "not", "work", "with", "only", "a", "'Broadband", "'", "type", "connection", "?"], "dataset_name": "spider", "guid": 4085}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Which allergy type has least number of allergies?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "allergy_1", "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "allergytype", "FROM", "Allergy_type", "GROUP", "BY", "allergytype", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "allergytype", "from", "allergy_type", "group", "by", "allergytype", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Which allergy type has least number of allergies?", "question_toks": ["Which", "allergy", "type", "has", "least", "number", "of", "allergies", "?"], "dataset_name": "spider", "guid": 4086}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all majors.", "sql": "SELECT DISTINCT Major FROM Student", "example": {"db_id": "allergy_1", "query": "SELECT DISTINCT Major FROM Student", "query_toks": ["SELECT", "DISTINCT", "Major", "FROM", "Student"], "query_toks_no_value": ["select", "distinct", "major", "from", "student"], "question": "Show all majors.", "question_toks": ["Show", "all", "majors", "."], "dataset_name": "spider", "guid": 4087}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Give the advisor with the most students.", "sql": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "allergy_1", "query": "SELECT advisor FROM Student GROUP BY advisor ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "advisor", "FROM", "Student", "GROUP", "BY", "advisor", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "advisor", "from", "student", "group", "by", "advisor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give the advisor with the most students.", "question_toks": ["Give", "the", "advisor", "with", "the", "most", "students", "."], "dataset_name": "spider", "guid": 4088}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What is the name of the high schooler who has the greatest number of friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "network_1", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the high schooler who has the greatest number of friends?", "question_toks": ["What", "is", "the", "name", "of", "the", "high", "schooler", "who", "has", "the", "greatest", "number", "of", "friends", "?"], "dataset_name": "spider", "guid": 4089}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the arriving date and the departing date of the dogs that received a treatment.", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "example": {"db_id": "dog_kennels", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "query_toks": ["SELECT", "DISTINCT", "T1.date_arrived", ",", "T1.date_departed", "FROM", "Dogs", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.dog_id", "=", "T2.dog_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "date_arrived", ",", "t1", ".", "date_departed", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "dog_id", "=", "t2", ".", "dog_id"], "question": "Find the arriving date and the departing date of the dogs that received a treatment.", "question_toks": ["Find", "the", "arriving", "date", "and", "the", "departing", "date", "of", "the", "dogs", "that", "received", "a", "treatment", "."], "dataset_name": "spider", "guid": 4090}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names and ages of every person who is a friend of both Dan and Alice?", "sql": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'", "example": {"db_id": "network_2", "query": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'", "query_toks": ["SELECT", "T1.name", ",", "T1.age", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "=", "'Dan", "'", "INTERSECT", "SELECT", "T1.name", ",", "T1.age", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "=", "'Alice", "'"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "age", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "=", "value", "intersect", "select", "t1", ".", "name", ",", "t1", ".", "age", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "=", "value"], "question": "What are the names and ages of every person who is a friend of both Dan and Alice?", "question_toks": ["What", "are", "the", "names", "and", "ages", "of", "every", "person", "who", "is", "a", "friend", "of", "both", "Dan", "and", "Alice", "?"], "dataset_name": "spider", "guid": 4091}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How many people are under 40 for each gender?", "sql": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender", "example": {"db_id": "network_2", "query": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "gender", "FROM", "Person", "WHERE", "age", "<", "40", "GROUP", "BY", "gender"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "gender", "from", "person", "where", "age", "<", "value", "group", "by", "gender"], "question": "How many people are under 40 for each gender?", "question_toks": ["How", "many", "people", "are", "under", "40", "for", "each", "gender", "?"], "dataset_name": "spider", "guid": 4092}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What is allergy type of a cat allergy?", "sql": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"", "example": {"db_id": "allergy_1", "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"", "query_toks": ["SELECT", "allergytype", "FROM", "Allergy_type", "WHERE", "allergy", "=", "``", "Cat", "''"], "query_toks_no_value": ["select", "allergytype", "from", "allergy_type", "where", "allergy", "=", "value"], "question": "What is allergy type of a cat allergy?", "question_toks": ["What", "is", "allergy", "type", "of", "a", "cat", "allergy", "?"], "dataset_name": "spider", "guid": 4093}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are the first name and last name of the professionals who have done treatment with cost below average?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "example": {"db_id": "dog_kennels", "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T1.last_name", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "WHERE", "cost_of_treatment", "<", "(", "SELECT", "avg", "(", "cost_of_treatment", ")", "FROM", "Treatments", ")"], "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")"], "question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "question_toks": ["What", "are", "the", "first", "name", "and", "last", "name", "of", "the", "professionals", "who", "have", "done", "treatment", "with", "cost", "below", "average", "?"], "dataset_name": "spider", "guid": 4094}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | List the maximum weight and type for each type of pet.", "sql": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "example": {"db_id": "pets_1", "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "query_toks": ["SELECT", "max", "(", "weight", ")", ",", "petType", "FROM", "pets", "GROUP", "BY", "petType"], "query_toks_no_value": ["select", "max", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype"], "question": "List the maximum weight and type for each type of pet.", "question_toks": ["List", "the", "maximum", "weight", "and", "type", "for", "each", "type", "of", "pet", "."], "dataset_name": "spider", "guid": 4095}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What is the storm name and max speed which affected the greatest number of regions?", "sql": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "storm_record", "query": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T1.max_speed", "FROM", "storm", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.storm_id", "=", "T2.storm_id", "GROUP", "BY", "T1.storm_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "max_speed", "from", "storm", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "storm_id", "=", "t2", ".", "storm_id", "group", "by", "t1", ".", "storm_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the storm name and max speed which affected the greatest number of regions?", "question_toks": ["What", "is", "the", "storm", "name", "and", "max", "speed", "which", "affected", "the", "greatest", "number", "of", "regions", "?"], "dataset_name": "spider", "guid": 4096}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are all the different food allergies?", "sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"", "example": {"db_id": "allergy_1", "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"", "query_toks": ["SELECT", "DISTINCT", "allergy", "FROM", "Allergy_type", "WHERE", "allergytype", "=", "``", "food", "''"], "query_toks_no_value": ["select", "distinct", "allergy", "from", "allergy_type", "where", "allergytype", "=", "value"], "question": "What are all the different food allergies?", "question_toks": ["What", "are", "all", "the", "different", "food", "allergies", "?"], "dataset_name": "spider", "guid": 4097}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | How much does each charge type costs? List both charge type and amount.", "sql": "SELECT charge_type ,  charge_amount FROM Charges", "example": {"db_id": "dog_kennels", "query": "SELECT charge_type ,  charge_amount FROM Charges", "query_toks": ["SELECT", "charge_type", ",", "charge_amount", "FROM", "Charges"], "query_toks_no_value": ["select", "charge_type", ",", "charge_amount", "from", "charges"], "question": "How much does each charge type costs? List both charge type and amount.", "question_toks": ["How", "much", "does", "each", "charge", "type", "costs", "?", "List", "both", "charge", "type", "and", "amount", "."], "dataset_name": "spider", "guid": 4098}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is minimum age for different job title?", "sql": "SELECT min(age) ,  job FROM Person GROUP BY job", "example": {"db_id": "network_2", "query": "SELECT min(age) ,  job FROM Person GROUP BY job", "query_toks": ["SELECT", "min", "(", "age", ")", ",", "job", "FROM", "Person", "GROUP", "BY", "job"], "query_toks_no_value": ["select", "min", "(", "age", ")", ",", "job", "from", "person", "group", "by", "job"], "question": "What is minimum age for different job title?", "question_toks": ["What", "is", "minimum", "age", "for", "different", "job", "title", "?"], "dataset_name": "spider", "guid": 4099}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | List the name of enzymes in descending lexicographical order.", "sql": "SELECT name FROM enzyme ORDER BY name DESC", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT name FROM enzyme ORDER BY name DESC", "query_toks": ["SELECT", "name", "FROM", "enzyme", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "name", "from", "enzyme", "order", "by", "name", "desc"], "question": "List the name of enzymes in descending lexicographical order.", "question_toks": ["List", "the", "name", "of", "enzymes", "in", "descending", "lexicographical", "order", "."], "dataset_name": "spider", "guid": 4100}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )", "example": {"db_id": "tracking_software_problems", "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )", "query_toks": ["SELECT", "T1.problem_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "date_problem_reported", ">", "(", "SELECT", "max", "(", "date_problem_reported", ")", "FROM", "problems", "AS", "T3", "JOIN", "staff", "AS", "T4", "ON", "T3.reported_by_staff_id", "=", "T4.staff_id", "WHERE", "T4.staff_first_name", "=", "``", "Rylan", "''", "AND", "T4.staff_last_name", "=", "``", "Homenick", "''", ")"], "query_toks_no_value": ["select", "t1", ".", "problem_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "date_problem_reported", ">", "(", "select", "max", "(", "date_problem_reported", ")", "from", "problems", "as", "t3", "join", "staff", "as", "t4", "on", "t3", ".", "reported_by_staff_id", "=", "t4", ".", "staff_id", "where", "t4", ".", "staff_first_name", "=", "value", "and", "t4", ".", "staff_last_name", "=", "value", ")"], "question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?", "question_toks": ["What", "are", "the", "ids", "of", "the", "problems", "reported", "after", "the", "date", "of", "any", "problems", "reported", "by", "Rylan", "Homenick", "?"], "dataset_name": "spider", "guid": 4101}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the average age for a male in each job?", "sql": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job", "example": {"db_id": "network_2", "query": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "job", "FROM", "Person", "WHERE", "gender", "=", "'male", "'", "GROUP", "BY", "job"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "job", "from", "person", "where", "gender", "=", "value", "group", "by", "job"], "question": "What is the average age for a male in each job?", "question_toks": ["What", "is", "the", "average", "age", "for", "a", "male", "in", "each", "job", "?"], "dataset_name": "spider", "guid": 4102}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What is the first name of every student who has a dog but does not have a cat?", "sql": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "example": {"db_id": "pets_1", "query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "query_toks": ["SELECT", "T1.fname", ",", "T1.age", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'dog", "'", "AND", "T1.stuid", "NOT", "IN", "(", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "and", "t1", ".", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", ")"], "question": "What is the first name of every student who has a dog but does not have a cat?", "question_toks": ["What", "is", "the", "first", "name", "of", "every", "student", "who", "has", "a", "dog", "but", "does", "not", "have", "a", "cat", "?"], "dataset_name": "spider", "guid": 4103}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What are the names of the high schoolers and how many friends does each have?", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "example": {"db_id": "network_1", "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id"], "question": "What are the names of the high schoolers and how many friends does each have?", "question_toks": ["What", "are", "the", "names", "of", "the", "high", "schoolers", "and", "how", "many", "friends", "does", "each", "have", "?"], "dataset_name": "spider", "guid": 4104}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | What are the ids and names of the web accelerators that are compatible with two or more browsers?", "sql": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "example": {"db_id": "browser_web", "query": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.id", ",", "T1.Name", "FROM", "web_client_accelerator", "AS", "T1", "JOIN", "accelerator_compatible_browser", "AS", "T2", "ON", "T2.accelerator_id", "=", "T1.id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "web_client_accelerator", "as", "t1", "join", "accelerator_compatible_browser", "as", "t2", "on", "t2", ".", "accelerator_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "the", "web", "accelerators", "that", "are", "compatible", "with", "two", "or", "more", "browsers", "?"], "dataset_name": "spider", "guid": 4105}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "sql": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "example": {"db_id": "dog_kennels", "query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'", "query_toks": ["SELECT", "role_code", ",", "street", ",", "city", ",", "state", "FROM", "professionals", "WHERE", "city", "LIKE", "'", "%", "West", "%", "'"], "query_toks_no_value": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "value"], "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "question_toks": ["Find", "the", "role", ",", "street", ",", "city", "and", "state", "of", "the", "professionals", "living", "in", "a", "city", "that", "contains", "the", "substring", "'West", "'", "."], "dataset_name": "spider", "guid": 4106}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Give the city that the student whose family name is Kim lives in.", "sql": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"", "example": {"db_id": "allergy_1", "query": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"", "query_toks": ["SELECT", "city_code", "FROM", "Student", "WHERE", "LName", "=", "``", "Kim", "''"], "query_toks_no_value": ["select", "city_code", "from", "student", "where", "lname", "=", "value"], "question": "Give the city that the student whose family name is Kim lives in.", "question_toks": ["Give", "the", "city", "that", "the", "student", "whose", "family", "name", "is", "Kim", "lives", "in", "."], "dataset_name": "spider", "guid": 4107}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Find the ids of the problems that are reported by the staff whose last name is Bosco.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"", "query_toks": ["SELECT", "T1.problem_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_last_name", "=", "``", "Bosco", "''"], "query_toks_no_value": ["select", "t1", ".", "problem_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_last_name", "=", "value"], "question": "Find the ids of the problems that are reported by the staff whose last name is Bosco.", "question_toks": ["Find", "the", "ids", "of", "the", "problems", "that", "are", "reported", "by", "the", "staff", "whose", "last", "name", "is", "Bosco", "."], "dataset_name": "spider", "guid": 4108}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What is the name of the shop that has the most different kinds of devices in stock?", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "device", "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Shop_Name", "FROM", "stock", "AS", "T1", "JOIN", "shop", "AS", "T2", "ON", "T1.Shop_ID", "=", "T2.Shop_ID", "GROUP", "BY", "T1.Shop_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "shop_name", "from", "stock", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t1", ".", "shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the shop that has the most different kinds of devices in stock?", "question_toks": ["What", "is", "the", "name", "of", "the", "shop", "that", "has", "the", "most", "different", "kinds", "of", "devices", "in", "stock", "?"], "dataset_name": "spider", "guid": 4109}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What are the open dates and years for the shop named Apple?", "sql": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"", "example": {"db_id": "device", "query": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"", "query_toks": ["SELECT", "Open_Date", ",", "Open_Year", "FROM", "shop", "WHERE", "Shop_Name", "=", "``", "Apple", "''"], "query_toks_no_value": ["select", "open_date", ",", "open_year", "from", "shop", "where", "shop_name", "=", "value"], "question": "What are the open dates and years for the shop named Apple?", "question_toks": ["What", "are", "the", "open", "dates", "and", "years", "for", "the", "shop", "named", "Apple", "?"], "dataset_name": "spider", "guid": 4110}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the female friends of Alice.", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'", "example": {"db_id": "network_2", "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'", "query_toks": ["SELECT", "T2.friend", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T2.name", "=", "'Alice", "'", "AND", "T1.gender", "=", "'female", "'"], "query_toks_no_value": ["select", "t2", ".", "friend", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "gender", "=", "value"], "question": "Find the female friends of Alice.", "question_toks": ["Find", "the", "female", "friends", "of", "Alice", "."], "dataset_name": "spider", "guid": 4111}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show the student id of the oldest student.", "sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "example": {"db_id": "allergy_1", "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "query_toks": ["SELECT", "StuID", "FROM", "Student", "WHERE", "age", "=", "(", "SELECT", "max", "(", "age", ")", "FROM", "Student", ")"], "query_toks_no_value": ["select", "stuid", "from", "student", "where", "age", "=", "(", "select", "max", "(", "age", ")", "from", "student", ")"], "question": "Show the student id of the oldest student.", "question_toks": ["Show", "the", "student", "id", "of", "the", "oldest", "student", "."], "dataset_name": "spider", "guid": 4112}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What are the names of all high schoolers in grade 10?", "sql": "SELECT name FROM Highschooler WHERE grade  =  10", "example": {"db_id": "network_1", "query": "SELECT name FROM Highschooler WHERE grade  =  10", "query_toks": ["SELECT", "name", "FROM", "Highschooler", "WHERE", "grade", "=", "10"], "query_toks_no_value": ["select", "name", "from", "highschooler", "where", "grade", "=", "value"], "question": "What are the names of all high schoolers in grade 10?", "question_toks": ["What", "are", "the", "names", "of", "all", "high", "schoolers", "in", "grade", "10", "?"], "dataset_name": "spider", "guid": 4113}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the names of users who have more than one tweet.", "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "example": {"db_id": "twitter_1", "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", "FROM", "user_profiles", "AS", "T1", "JOIN", "tweets", "AS", "T2", "ON", "T1.uid", "=", "T2.uid", "GROUP", "BY", "T2.uid", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "user_profiles", "as", "t1", "join", "tweets", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "uid", "group", "by", "t2", ".", "uid", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the names of users who have more than one tweet.", "question_toks": ["Find", "the", "names", "of", "users", "who", "have", "more", "than", "one", "tweet", "."], "dataset_name": "spider", "guid": 4114}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the names of the storms that affected both the regions of Afghanistan and Albania?", "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'", "example": {"db_id": "storm_record", "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'", "query_toks": ["SELECT", "T3.Name", "FROM", "affected_region", "AS", "T1", "JOIN", "region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "JOIN", "storm", "AS", "T3", "ON", "T1.storm_id", "=", "T3.storm_id", "WHERE", "T2.Region_name", "=", "'Afghanistan", "'", "INTERSECT", "SELECT", "T3.Name", "FROM", "affected_region", "AS", "T1", "JOIN", "region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "JOIN", "storm", "AS", "T3", "ON", "T1.storm_id", "=", "T3.storm_id", "WHERE", "T2.Region_name", "=", "'Albania", "'"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "affected_region", "as", "t1", "join", "region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "join", "storm", "as", "t3", "on", "t1", ".", "storm_id", "=", "t3", ".", "storm_id", "where", "t2", ".", "region_name", "=", "value", "intersect", "select", "t3", ".", "name", "from", "affected_region", "as", "t1", "join", "region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "join", "storm", "as", "t3", "on", "t1", ".", "storm_id", "=", "t3", ".", "storm_id", "where", "t2", ".", "region_name", "=", "value"], "question": "What are the names of the storms that affected both the regions of Afghanistan and Albania?", "question_toks": ["What", "are", "the", "names", "of", "the", "storms", "that", "affected", "both", "the", "regions", "of", "Afghanistan", "and", "Albania", "?"], "dataset_name": "spider", "guid": 4115}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all allergy types and the number of allergies in each type.", "sql": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype", "example": {"db_id": "allergy_1", "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype", "query_toks": ["SELECT", "allergytype", ",", "count", "(", "*", ")", "FROM", "Allergy_type", "GROUP", "BY", "allergytype"], "query_toks_no_value": ["select", "allergytype", ",", "count", "(", "*", ")", "from", "allergy_type", "group", "by", "allergytype"], "question": "Show all allergy types and the number of allergies in each type.", "question_toks": ["Show", "all", "allergy", "types", "and", "the", "number", "of", "allergies", "in", "each", "type", "."], "dataset_name": "spider", "guid": 4116}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students have cat allergies?", "sql": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Has_allergy", "WHERE", "Allergy", "=", "``", "Cat", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "has_allergy", "where", "allergy", "=", "value"], "question": "How many students have cat allergies?", "question_toks": ["How", "many", "students", "have", "cat", "allergies", "?"], "dataset_name": "spider", "guid": 4117}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which states have both owners and professionals living there?", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "example": {"db_id": "dog_kennels", "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "query_toks": ["SELECT", "state", "FROM", "Owners", "INTERSECT", "SELECT", "state", "FROM", "Professionals"], "query_toks_no_value": ["select", "state", "from", "owners", "intersect", "select", "state", "from", "professionals"], "question": "Which states have both owners and professionals living there?", "question_toks": ["Which", "states", "have", "both", "owners", "and", "professionals", "living", "there", "?"], "dataset_name": "spider", "guid": 4118}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | Find the id and local authority of the station whose maximum precipitation is higher than 50.", "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50", "example": {"db_id": "station_weather", "query": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50", "query_toks": ["SELECT", "t2.id", ",", "t2.local_authority", "FROM", "weekly_weather", "AS", "t1", "JOIN", "station", "AS", "t2", "ON", "t1.station_id", "=", "t2.id", "GROUP", "BY", "t1.station_id", "HAVING", "max", "(", "t1.precipitation", ")", ">", "50"], "query_toks_no_value": ["select", "t2", ".", "id", ",", "t2", ".", "local_authority", "from", "weekly_weather", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "station_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "station_id", "having", "max", "(", "t1", ".", "precipitation", ")", ">", "value"], "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.", "question_toks": ["Find", "the", "id", "and", "local", "authority", "of", "the", "station", "whose", "maximum", "precipitation", "is", "higher", "than", "50", "."], "dataset_name": "spider", "guid": 4119}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the names and locations of all enzymes listed?", "sql": "SELECT name ,  LOCATION FROM enzyme", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT name ,  LOCATION FROM enzyme", "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "enzyme"], "query_toks_no_value": ["select", "name", ",", "location", "from", "enzyme"], "question": "What are the names and locations of all enzymes listed?", "question_toks": ["What", "are", "the", "names", "and", "locations", "of", "all", "enzymes", "listed", "?"], "dataset_name": "spider", "guid": 4120}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What are the different software platforms for devices, ordered by frequency descending?", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC", "example": {"db_id": "device", "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "Software_Platform", "FROM", "device", "GROUP", "BY", "Software_Platform", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "software_platform", "from", "device", "group", "by", "software_platform", "order", "by", "count", "(", "*", ")", "desc"], "question": "What are the different software platforms for devices, ordered by frequency descending?", "question_toks": ["What", "are", "the", "different", "software", "platforms", "for", "devices", ",", "ordered", "by", "frequency", "descending", "?"], "dataset_name": "spider", "guid": 4121}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the names of regions with two or more storms?", "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "example": {"db_id": "storm_record", "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.region_name", "FROM", "region", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "GROUP", "BY", "T1.region_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "region_name", "from", "region", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "group", "by", "t1", ".", "region_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of regions with two or more storms?", "question_toks": ["What", "are", "the", "names", "of", "regions", "with", "two", "or", "more", "storms", "?"], "dataset_name": "spider", "guid": 4122}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What is Kyle's id?", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "example": {"db_id": "network_1", "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "query_toks": ["SELECT", "ID", "FROM", "Highschooler", "WHERE", "name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "id", "from", "highschooler", "where", "name", "=", "value"], "question": "What is Kyle's id?", "question_toks": ["What", "is", "Kyle", "'s", "id", "?"], "dataset_name": "spider", "guid": 4123}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | List the names of 5 users followed by the largest number of other users.", "sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5", "example": {"db_id": "twitter_1", "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5", "query_toks": ["SELECT", "name", "FROM", "user_profiles", "ORDER", "BY", "followers", "DESC", "LIMIT", "5"], "query_toks_no_value": ["select", "name", "from", "user_profiles", "order", "by", "followers", "desc", "limit", "value"], "question": "List the names of 5 users followed by the largest number of other users.", "question_toks": ["List", "the", "names", "of", "5", "users", "followed", "by", "the", "largest", "number", "of", "other", "users", "."], "dataset_name": "spider", "guid": 4124}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Show names for all regions except for Denmark.", "sql": "SELECT region_name FROM region WHERE region_name != 'Denmark'", "example": {"db_id": "storm_record", "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'", "query_toks": ["SELECT", "region_name", "FROM", "region", "WHERE", "region_name", "!", "=", "'Denmark", "'"], "query_toks_no_value": ["select", "region_name", "from", "region", "where", "region_name", "!", "=", "value"], "question": "Show names for all regions except for Denmark.", "question_toks": ["Show", "names", "for", "all", "regions", "except", "for", "Denmark", "."], "dataset_name": "spider", "guid": 4125}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What is the id and weight of every pet who is older than 1?", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "example": {"db_id": "pets_1", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "query_toks": ["SELECT", "petid", ",", "weight", "FROM", "pets", "WHERE", "pet_age", ">", "1"], "query_toks_no_value": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "value"], "question": "What is the id and weight of every pet who is older than 1?", "question_toks": ["What", "is", "the", "id", "and", "weight", "of", "every", "pet", "who", "is", "older", "than", "1", "?"], "dataset_name": "spider", "guid": 4126}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | List the carriers of devices that have no devices in stock.", "sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)", "example": {"db_id": "device", "query": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)", "query_toks": ["SELECT", "Carrier", "FROM", "device", "WHERE", "Device_ID", "NOT", "IN", "(", "SELECT", "Device_ID", "FROM", "stock", ")"], "query_toks_no_value": ["select", "carrier", "from", "device", "where", "device_id", "not", "in", "(", "select", "device_id", "from", "stock", ")"], "question": "List the carriers of devices that have no devices in stock.", "question_toks": ["List", "the", "carriers", "of", "devices", "that", "have", "no", "devices", "in", "stock", "."], "dataset_name": "spider", "guid": 4127}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Return the name and max speed of the storm that affected the most regions.", "sql": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "storm_record", "query": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.name", ",", "T1.max_speed", "FROM", "storm", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.storm_id", "=", "T2.storm_id", "GROUP", "BY", "T1.storm_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "max_speed", "from", "storm", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "storm_id", "=", "t2", ".", "storm_id", "group", "by", "t1", ".", "storm_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the name and max speed of the storm that affected the most regions.", "question_toks": ["Return", "the", "name", "and", "max", "speed", "of", "the", "storm", "that", "affected", "the", "most", "regions", "."], "dataset_name": "spider", "guid": 4128}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the first name of students who have both cat and dog pets .", "sql": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "example": {"db_id": "pets_1", "query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'", "query_toks": ["select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", "intersect", "select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"dog\""], "query_toks_no_value": ["select", "t1", ".", "fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "intersect", "select", "t1", ".", "fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value"], "question": "Find the first name of students who have both cat and dog pets .", "question_toks": ["Find", "the", "first", "name", "of", "students", "who", "have", "both", "cat", "and", "dog", "pets", "."], "dataset_name": "spider", "guid": 4129}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | For the problem with id 10, return the ids and dates of its problem logs.", "sql": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10", "example": {"db_id": "tracking_software_problems", "query": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10", "query_toks": ["SELECT", "problem_log_id", ",", "log_entry_date", "FROM", "problem_log", "WHERE", "problem_id", "=", "10"], "query_toks_no_value": ["select", "problem_log_id", ",", "log_entry_date", "from", "problem_log", "where", "problem_id", "=", "value"], "question": "For the problem with id 10, return the ids and dates of its problem logs.", "question_toks": ["For", "the", "problem", "with", "id", "10", ",", "return", "the", "ids", "and", "dates", "of", "its", "problem", "logs", "."], "dataset_name": "spider", "guid": 4130}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Return the names and locations of shops, ordered by name in alphabetical order.", "sql": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC", "example": {"db_id": "device", "query": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC", "query_toks": ["SELECT", "Shop_Name", ",", "LOCATION", "FROM", "shop", "ORDER", "BY", "Shop_Name", "ASC"], "query_toks_no_value": ["select", "shop_name", ",", "location", "from", "shop", "order", "by", "shop_name", "asc"], "question": "Return the names and locations of shops, ordered by name in alphabetical order.", "question_toks": ["Return", "the", "names", "and", "locations", "of", "shops", ",", "ordered", "by", "name", "in", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 4131}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students have a food allergy?", "sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_type", "AS", "T2", "ON", "T1.allergy", "=", "T2.allergy", "WHERE", "T2.allergytype", "=", "``", "food", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "where", "t2", ".", "allergytype", "=", "value"], "question": "How many students have a food allergy?", "question_toks": ["How", "many", "students", "have", "a", "food", "allergy", "?"], "dataset_name": "spider", "guid": 4132}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | Show institution types, along with the number of institutions and total enrollment for each type.", "sql": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE", "example": {"db_id": "protein_institute", "query": "SELECT TYPE ,  count(*) ,  sum(enrollment) FROM institution GROUP BY TYPE", "query_toks": ["SELECT", "TYPE", ",", "count", "(", "*", ")", ",", "sum", "(", "enrollment", ")", "FROM", "institution", "GROUP", "BY", "TYPE"], "query_toks_no_value": ["select", "type", ",", "count", "(", "*", ")", ",", "sum", "(", "enrollment", ")", "from", "institution", "group", "by", "type"], "question": "Show institution types, along with the number of institutions and total enrollment for each type.", "question_toks": ["Show", "institution", "types", ",", "along", "with", "the", "number", "of", "institutions", "and", "total", "enrollment", "for", "each", "type", "."], "dataset_name": "spider", "guid": 4133}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | List the last name of the owner owning the youngest dog.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "example": {"db_id": "dog_kennels", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "query_toks": ["SELECT", "T1.last_name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "WHERE", "T2.age", "=", "(", "SELECT", "max", "(", "age", ")", "FROM", "Dogs", ")"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "where", "t2", ".", "age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")"], "question": "List the last name of the owner owning the youngest dog.", "question_toks": ["List", "the", "last", "name", "of", "the", "owner", "owning", "the", "youngest", "dog", "."], "dataset_name": "spider", "guid": 4134}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What are the different first names and ages of the students who do have pets?", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "example": {"db_id": "pets_1", "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "query_toks": ["SELECT", "DISTINCT", "T1.fname", ",", "T1.age", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid"], "question": "What are the different first names and ages of the students who do have pets?", "question_toks": ["What", "are", "the", "different", "first", "names", "and", "ages", "of", "the", "students", "who", "do", "have", "pets", "?"], "dataset_name": "spider", "guid": 4135}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students are affected by cat allergies?", "sql": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Has_allergy", "WHERE", "Allergy", "=", "``", "Cat", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "has_allergy", "where", "allergy", "=", "value"], "question": "How many students are affected by cat allergies?", "question_toks": ["How", "many", "students", "are", "affected", "by", "cat", "allergies", "?"], "dataset_name": "spider", "guid": 4136}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | What is the maximum, minimum and average market share of the listed browsers?", "sql": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser", "example": {"db_id": "browser_web", "query": "SELECT max(market_share) ,  min(market_share) ,  avg(market_share) FROM browser", "query_toks": ["SELECT", "max", "(", "market_share", ")", ",", "min", "(", "market_share", ")", ",", "avg", "(", "market_share", ")", "FROM", "browser"], "query_toks_no_value": ["select", "max", "(", "market_share", ")", ",", "min", "(", "market_share", ")", ",", "avg", "(", "market_share", ")", "from", "browser"], "question": "What is the maximum, minimum and average market share of the listed browsers?", "question_toks": ["What", "is", "the", "maximum", ",", "minimum", "and", "average", "market", "share", "of", "the", "listed", "browsers", "?"], "dataset_name": "spider", "guid": 4137}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the student ids for students over 20 years old?", "sql": "SELECT StuID FROM Student WHERE age  >  20", "example": {"db_id": "allergy_1", "query": "SELECT StuID FROM Student WHERE age  >  20", "query_toks": ["SELECT", "StuID", "FROM", "Student", "WHERE", "age", ">", "20"], "query_toks_no_value": ["select", "stuid", "from", "student", "where", "age", ">", "value"], "question": "What are the student ids for students over 20 years old?", "question_toks": ["What", "are", "the", "student", "ids", "for", "students", "over", "20", "years", "old", "?"], "dataset_name": "spider", "guid": 4138}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "example": {"db_id": "dog_kennels", "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "query_toks": ["SELECT", "email_address", "FROM", "Professionals", "WHERE", "state", "=", "'Hawaii", "'", "OR", "state", "=", "'Wisconsin", "'"], "query_toks_no_value": ["select", "email_address", "from", "professionals", "where", "state", "=", "value", "or", "state", "=", "value"], "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "question_toks": ["List", "the", "emails", "of", "the", "professionals", "who", "live", "in", "the", "state", "of", "Hawaii", "or", "the", "state", "of", "Wisconsin", "."], "dataset_name": "spider", "guid": 4139}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the number of followers for each user.", "sql": "SELECT count(*) FROM follows GROUP BY f1", "example": {"db_id": "twitter_1", "query": "SELECT count(*) FROM follows GROUP BY f1", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "follows", "GROUP", "BY", "f1"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "follows", "group", "by", "value"], "question": "Find the number of followers for each user.", "question_toks": ["Find", "the", "number", "of", "followers", "for", "each", "user", "."], "dataset_name": "spider", "guid": 4140}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show me all grades that have at least 4 students.", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "example": {"db_id": "network_1", "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "query_toks": ["SELECT", "grade", "FROM", "Highschooler", "GROUP", "BY", "grade", "HAVING", "count", "(", "*", ")", ">", "=", "4"], "query_toks_no_value": ["select", "grade", "from", "highschooler", "group", "by", "grade", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show me all grades that have at least 4 students.", "question_toks": ["Show", "me", "all", "grades", "that", "have", "at", "least", "4", "students", "."], "dataset_name": "spider", "guid": 4141}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | How many regions are affected?", "sql": "SELECT count(DISTINCT region_id) FROM affected_region", "example": {"db_id": "storm_record", "query": "SELECT count(DISTINCT region_id) FROM affected_region", "query_toks": ["SELECT", "count", "(", "DISTINCT", "region_id", ")", "FROM", "affected_region"], "query_toks_no_value": ["select", "count", "(", "distinct", "region_id", ")", "from", "affected_region"], "question": "How many regions are affected?", "question_toks": ["How", "many", "regions", "are", "affected", "?"], "dataset_name": "spider", "guid": 4142}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What is the total number of students?", "sql": "SELECT count(*) FROM Student", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Student", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student"], "question": "What is the total number of students?", "question_toks": ["What", "is", "the", "total", "number", "of", "students", "?"], "dataset_name": "spider", "guid": 4143}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | How many main stream browsers whose market share is at least 5 exist?", "sql": "SELECT count(*) FROM browser WHERE market_share  >=  5", "example": {"db_id": "browser_web", "query": "SELECT count(*) FROM browser WHERE market_share  >=  5", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "browser", "WHERE", "market_share", ">", "=", "5"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "browser", "where", "market_share", ">", "=", "value"], "question": "How many main stream browsers whose market share is at least 5 exist?", "question_toks": ["How", "many", "main", "stream", "browsers", "whose", "market", "share", "is", "at", "least", "5", "exist", "?"], "dataset_name": "spider", "guid": 4144}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all allergies and their types.", "sql": "SELECT allergy ,  allergytype FROM Allergy_type", "example": {"db_id": "allergy_1", "query": "SELECT allergy ,  allergytype FROM Allergy_type", "query_toks": ["SELECT", "allergy", ",", "allergytype", "FROM", "Allergy_type"], "query_toks_no_value": ["select", "allergy", ",", "allergytype", "from", "allergy_type"], "question": "Show all allergies and their types.", "question_toks": ["Show", "all", "allergies", "and", "their", "types", "."], "dataset_name": "spider", "guid": 4145}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What is the minimum, mean, and maximum age across all students?", "sql": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student", "example": {"db_id": "allergy_1", "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student", "query_toks": ["SELECT", "min", "(", "age", ")", ",", "avg", "(", "age", ")", ",", "max", "(", "age", ")", "FROM", "Student"], "query_toks_no_value": ["select", "min", "(", "age", ")", ",", "avg", "(", "age", ")", ",", "max", "(", "age", ")", "from", "student"], "question": "What is the minimum, mean, and maximum age across all students?", "question_toks": ["What", "is", "the", "minimum", ",", "mean", ",", "and", "maximum", "age", "across", "all", "students", "?"], "dataset_name": "spider", "guid": 4146}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What is the count of enzymes without any interactions?", "sql": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "enzyme", "WHERE", "id", "NOT", "IN", "(", "SELECT", "enzyme_id", "FROM", "medicine_enzyme_interaction", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "enzyme", "where", "id", "not", "in", "(", "select", "enzyme_id", "from", "medicine_enzyme_interaction", ")"], "question": "What is the count of enzymes without any interactions?", "question_toks": ["What", "is", "the", "count", "of", "enzymes", "without", "any", "interactions", "?"], "dataset_name": "spider", "guid": 4147}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | How many dogs have not gone through any treatment?", "sql": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "example": {"db_id": "dog_kennels", "query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Dogs", "WHERE", "dog_id", "NOT", "IN", "(", "SELECT", "dog_id", "FROM", "Treatments", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")"], "question": "How many dogs have not gone through any treatment?", "question_toks": ["How", "many", "dogs", "have", "not", "gone", "through", "any", "treatment", "?"], "dataset_name": "spider", "guid": 4148}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Show names of shops that have more than one kind of device in stock.", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1", "example": {"db_id": "device", "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T2.Shop_Name", "FROM", "stock", "AS", "T1", "JOIN", "shop", "AS", "T2", "ON", "T1.Shop_ID", "=", "T2.Shop_ID", "GROUP", "BY", "T1.Shop_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "shop_name", "from", "stock", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t1", ".", "shop_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Show names of shops that have more than one kind of device in stock.", "question_toks": ["Show", "names", "of", "shops", "that", "have", "more", "than", "one", "kind", "of", "device", "in", "stock", "."], "dataset_name": "spider", "guid": 4149}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the name and email of the users who have more than 1000 followers.", "sql": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000", "example": {"db_id": "twitter_1", "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000", "query_toks": ["SELECT", "name", ",", "email", "FROM", "user_profiles", "WHERE", "followers", ">", "1000"], "query_toks_no_value": ["select", "name", ",", "email", "from", "user_profiles", "where", "followers", ">", "value"], "question": "Find the name and email of the users who have more than 1000 followers.", "question_toks": ["Find", "the", "name", "and", "email", "of", "the", "users", "who", "have", "more", "than", "1000", "followers", "."], "dataset_name": "spider", "guid": 4150}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the different names of friends who are younger than the average age for a friend?", "sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)", "example": {"db_id": "network_2", "query": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T1.age", "<", "(", "SELECT", "avg", "(", "age", ")", "FROM", "person", ")"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t1", ".", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "person", ")"], "question": "What are the different names of friends who are younger than the average age for a friend?", "question_toks": ["What", "are", "the", "different", "names", "of", "friends", "who", "are", "younger", "than", "the", "average", "age", "for", "a", "friend", "?"], "dataset_name": "spider", "guid": 4151}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the average age of the dogs who went through treatments.", "sql": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "example": {"db_id": "dog_kennels", "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "query_toks": ["SELECT", "avg", "(", "age", ")", "FROM", "Dogs", "WHERE", "dog_id", "IN", "(", "SELECT", "dog_id", "FROM", "Treatments", ")"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")"], "question": "Find the average age of the dogs who went through treatments.", "question_toks": ["Find", "the", "average", "age", "of", "the", "dogs", "who", "went", "through", "treatments", "."], "dataset_name": "spider", "guid": 4152}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | For students who have pets , how many pets does each student have ? list their ids instead of names .", "sql": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "example": {"db_id": "pets_1", "query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid", "query_toks": ["select", "count", "(", "*", ")", ",", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "group", "by", "t1", ".", "stuid"], "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "question_toks": ["For", "students", "who", "have", "pets", ",", "how", "many", "pets", "does", "each", "student", "have", "?", "list", "their", "ids", "instead", "of", "names", "."], "dataset_name": "spider", "guid": 4153}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.", "sql": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'", "query_toks": ["SELECT", "T1.name", ",", "T1.trade_name", "FROM", "medicine", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.medicine_id", "=", "T1.id", "WHERE", "interaction_type", "=", "'inhibitor", "'", "INTERSECT", "SELECT", "T1.name", ",", "T1.trade_name", "FROM", "medicine", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.medicine_id", "=", "T1.id", "WHERE", "interaction_type", "=", "'activitor", "'"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "trade_name", "from", "medicine", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "medicine_id", "=", "t1", ".", "id", "where", "interaction_type", "=", "value", "intersect", "select", "t1", ".", "name", ",", "t1", ".", "trade_name", "from", "medicine", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "medicine_id", "=", "t1", ".", "id", "where", "interaction_type", "=", "value"], "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.", "question_toks": ["List", "the", "medicine", "name", "and", "trade", "name", "which", "can", "both", "interact", "as", "'inhibitor", "'", "and", "'activitor", "'", "with", "enzymes", "."], "dataset_name": "spider", "guid": 4154}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the names of the storms that affected Denmark?", "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "example": {"db_id": "storm_record", "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "query_toks": ["SELECT", "T3.name", "FROM", "affected_region", "AS", "T1", "JOIN", "region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "JOIN", "storm", "AS", "T3", "ON", "T1.storm_id", "=", "T3.storm_id", "WHERE", "T2.region_name", "=", "'Denmark", "'"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "affected_region", "as", "t1", "join", "region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "join", "storm", "as", "t3", "on", "t1", ".", "storm_id", "=", "t3", ".", "storm_id", "where", "t2", ".", "region_name", "=", "value"], "question": "What are the names of the storms that affected Denmark?", "question_toks": ["What", "are", "the", "names", "of", "the", "storms", "that", "affected", "Denmark", "?"], "dataset_name": "spider", "guid": 4155}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How many people whose age is greater 30 and job is engineer?", "sql": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'", "example": {"db_id": "network_2", "query": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Person", "WHERE", "age", ">", "30", "AND", "job", "=", "'engineer", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "person", "where", "age", ">", "value", "and", "job", "=", "value"], "question": "How many people whose age is greater 30 and job is engineer?", "question_toks": ["How", "many", "people", "whose", "age", "is", "greater", "30", "and", "job", "is", "engineer", "?"], "dataset_name": "spider", "guid": 4156}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Count the number of devices.", "sql": "SELECT count(*) FROM device", "example": {"db_id": "device", "query": "SELECT count(*) FROM device", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "device"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "device"], "question": "Count the number of devices.", "question_toks": ["Count", "the", "number", "of", "devices", "."], "dataset_name": "spider", "guid": 4157}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the codes and names for all regions, sorted by codes?", "sql": "SELECT region_code ,  region_name FROM region ORDER BY region_code", "example": {"db_id": "storm_record", "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code", "query_toks": ["SELECT", "region_code", ",", "region_name", "FROM", "region", "ORDER", "BY", "region_code"], "query_toks_no_value": ["select", "region_code", ",", "region_name", "from", "region", "order", "by", "region_code"], "question": "What are the codes and names for all regions, sorted by codes?", "question_toks": ["What", "are", "the", "codes", "and", "names", "for", "all", "regions", ",", "sorted", "by", "codes", "?"], "dataset_name": "spider", "guid": 4158}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | find the number of medicines offered by each trade.", "sql": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name", "query_toks": ["SELECT", "trade_name", ",", "count", "(", "*", ")", "FROM", "medicine", "GROUP", "BY", "trade_name"], "query_toks_no_value": ["select", "trade_name", ",", "count", "(", "*", ")", "from", "medicine", "group", "by", "trade_name"], "question": "find the number of medicines offered by each trade.", "question_toks": ["find", "the", "number", "of", "medicines", "offered", "by", "each", "trade", "."], "dataset_name": "spider", "guid": 4159}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Which person whose friends have the oldest average age?", "sql": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1", "example": {"db_id": "network_2", "query": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", ",", "avg", "(", "T1.age", ")", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "GROUP", "BY", "T2.name", "ORDER", "BY", "avg", "(", "T1.age", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "avg", "(", "t1", ".", "age", ")", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "group", "by", "t2", ".", "name", "order", "by", "avg", "(", "t1", ".", "age", ")", "desc", "limit", "value"], "question": "Which person whose friends have the oldest average age?", "question_toks": ["Which", "person", "whose", "friends", "have", "the", "oldest", "average", "age", "?"], "dataset_name": "spider", "guid": 4160}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | List the names of buildings with at least 200 feet of height and with at least 20 floors.", "sql": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20", "example": {"db_id": "protein_institute", "query": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20", "query_toks": ["SELECT", "name", "FROM", "building", "WHERE", "height_feet", ">", "=", "200", "AND", "floors", ">", "=", "20"], "query_toks_no_value": ["select", "name", "from", "building", "where", "height_feet", ">", "=", "value", "and", "floors", ">", "=", "value"], "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.", "question_toks": ["List", "the", "names", "of", "buildings", "with", "at", "least", "200", "feet", "of", "height", "and", "with", "at", "least", "20", "floors", "."], "dataset_name": "spider", "guid": 4161}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "example": {"db_id": "dog_kennels", "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "query_toks": ["SELECT", "name", ",", "age", ",", "weight", "FROM", "Dogs", "WHERE", "abandoned_yn", "=", "1"], "query_toks_no_value": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "value"], "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "question_toks": ["What", "are", "the", "dog", "name", ",", "age", "and", "weight", "of", "the", "dogs", "that", "were", "abandoned", "?", "Note", "that", "1", "stands", "for", "yes", ",", "and", "0", "stands", "for", "no", "in", "the", "tables", "."], "dataset_name": "spider", "guid": 4162}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Who owns the youngest dog? Give me his or her last name.", "sql": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "example": {"db_id": "dog_kennels", "query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )", "query_toks": ["SELECT", "T1.last_name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "WHERE", "T2.age", "=", "(", "SELECT", "max", "(", "age", ")", "FROM", "Dogs", ")"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "where", "t2", ".", "age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")"], "question": "Who owns the youngest dog? Give me his or her last name.", "question_toks": ["Who", "owns", "the", "youngest", "dog", "?", "Give", "me", "his", "or", "her", "last", "name", "."], "dataset_name": "spider", "guid": 4163}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | List pairs of the owner's first name and the dogs's name.", "sql": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "example": {"db_id": "dog_kennels", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "query_toks": ["SELECT", "T1.first_name", ",", "T2.name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t2", ".", "name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id"], "question": "List pairs of the owner's first name and the dogs's name.", "question_toks": ["List", "pairs", "of", "the", "owner", "'s", "first", "name", "and", "the", "dogs", "'s", "name", "."], "dataset_name": "spider", "guid": 4164}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "sql": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "example": {"db_id": "dog_kennels", "query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1", "query_toks": ["SELECT", "name", ",", "age", ",", "weight", "FROM", "Dogs", "WHERE", "abandoned_yn", "=", "1"], "query_toks_no_value": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "value"], "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "question_toks": ["List", "the", "dog", "name", ",", "age", "and", "weight", "of", "the", "dogs", "who", "have", "been", "abandoned", "?", "1", "stands", "for", "yes", ",", "and", "0", "stands", "for", "no", "."], "dataset_name": "spider", "guid": 4165}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | How many medicines have the FDA approval status 'No' ?", "sql": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "medicine", "WHERE", "FDA_approved", "=", "'No", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "medicine", "where", "fda_approved", "=", "value"], "question": "How many medicines have the FDA approval status 'No' ?", "question_toks": ["How", "many", "medicines", "have", "the", "FDA", "approval", "status", "'No", "'", "?"], "dataset_name": "spider", "guid": 4166}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What is the list of distinct product names sorted by product id?", "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_id", "example": {"db_id": "tracking_software_problems", "query": "SELECT DISTINCT product_name FROM product ORDER BY product_id", "query_toks": ["SELECT", "DISTINCT", "product_name", "FROM", "product", "ORDER", "BY", "product_id"], "query_toks_no_value": ["select", "distinct", "product_name", "from", "product", "order", "by", "product_id"], "question": "What is the list of distinct product names sorted by product id?", "question_toks": ["What", "is", "the", "list", "of", "distinct", "product", "names", "sorted", "by", "product", "id", "?"], "dataset_name": "spider", "guid": 4167}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all cities and corresponding number of students.", "sql": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code", "example": {"db_id": "allergy_1", "query": "SELECT city_code ,  count(*) FROM Student GROUP BY city_code", "query_toks": ["SELECT", "city_code", ",", "count", "(", "*", ")", "FROM", "Student", "GROUP", "BY", "city_code"], "query_toks_no_value": ["select", "city_code", ",", "count", "(", "*", ")", "from", "student", "group", "by", "city_code"], "question": "Show all cities and corresponding number of students.", "question_toks": ["Show", "all", "cities", "and", "corresponding", "number", "of", "students", "."], "dataset_name": "spider", "guid": 4168}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | Find the number of trains starting from each origin.", "sql": "SELECT origin ,  count(*) FROM train GROUP BY origin", "example": {"db_id": "station_weather", "query": "SELECT origin ,  count(*) FROM train GROUP BY origin", "query_toks": ["SELECT", "origin", ",", "count", "(", "*", ")", "FROM", "train", "GROUP", "BY", "origin"], "query_toks_no_value": ["select", "origin", ",", "count", "(", "*", ")", "from", "train", "group", "by", "origin"], "question": "Find the number of trains starting from each origin.", "question_toks": ["Find", "the", "number", "of", "trains", "starting", "from", "each", "origin", "."], "dataset_name": "spider", "guid": 4169}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | How many users are there?", "sql": "SELECT count(*) FROM user_profiles", "example": {"db_id": "twitter_1", "query": "SELECT count(*) FROM user_profiles", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "user_profiles"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "user_profiles"], "question": "How many users are there?", "question_toks": ["How", "many", "users", "are", "there", "?"], "dataset_name": "spider", "guid": 4170}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What are the carriers of devices whose software platforms are not \"Android\"?", "sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'", "example": {"db_id": "device", "query": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'", "query_toks": ["SELECT", "Carrier", "FROM", "device", "WHERE", "Software_Platform", "!", "=", "'Android", "'"], "query_toks_no_value": ["select", "carrier", "from", "device", "where", "software_platform", "!", "=", "value"], "question": "What are the carriers of devices whose software platforms are not \"Android\"?", "question_toks": ["What", "are", "the", "carriers", "of", "devices", "whose", "software", "platforms", "are", "not", "``", "Android", "''", "?"], "dataset_name": "spider", "guid": 4171}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?", "sql": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT name ,  trade_name FROM medicine EXCEPT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id JOIN enzyme AS T3 ON T3.id  =  T2.enzyme_id WHERE T3.product  =  'Protoporphyrinogen IX'", "query_toks": ["SELECT", "name", ",", "trade_name", "FROM", "medicine", "EXCEPT", "SELECT", "T1.name", ",", "T1.trade_name", "FROM", "medicine", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.medicine_id", "=", "T1.id", "JOIN", "enzyme", "AS", "T3", "ON", "T3.id", "=", "T2.enzyme_id", "WHERE", "T3.product", "=", "'Protoporphyrinogen", "IX", "'"], "query_toks_no_value": ["select", "name", ",", "trade_name", "from", "medicine", "except", "select", "t1", ".", "name", ",", "t1", ".", "trade_name", "from", "medicine", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "medicine_id", "=", "t1", ".", "id", "join", "enzyme", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "enzyme_id", "where", "t3", ".", "product", "=", "value"], "question": "What are the medicine and trade names that cannot interact with the enzyme with the product 'Heme'?", "question_toks": ["What", "are", "the", "medicine", "and", "trade", "names", "that", "can", "not", "interact", "with", "the", "enzyme", "with", "the", "product", "'Heme", "'", "?"], "dataset_name": "spider", "guid": 4172}}