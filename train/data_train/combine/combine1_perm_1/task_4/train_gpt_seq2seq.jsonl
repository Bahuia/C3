{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Find the top 3 products which have the largest number of problems?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "tracking_software_problems", "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.product_name", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "GROUP", "BY", "T2.product_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "product_name", "from", "problems", "as", "t1", "join", "product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t2", ".", "product_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the top 3 products which have the largest number of problems?", "question_toks": ["Find", "the", "top", "3", "products", "which", "have", "the", "largest", "number", "of", "problems", "?"], "dataset_name": "spider", "guid": 3552}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the name and age of the person who is a friend of Dan or Alice.", "sql": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'", "example": {"db_id": "network_2", "query": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'", "query_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.age", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "=", "'Dan", "'", "OR", "T2.friend", "=", "'Alice", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", ",", "t1", ".", "age", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "=", "value", "or", "t2", ".", "friend", "=", "value"], "question": "Find the name and age of the person who is a friend of Dan or Alice.", "question_toks": ["Find", "the", "name", "and", "age", "of", "the", "person", "who", "is", "a", "friend", "of", "Dan", "or", "Alice", "."], "dataset_name": "spider", "guid": 3553}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Which allergy type has most number of allergies?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "allergy_1", "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "allergytype", "FROM", "Allergy_type", "GROUP", "BY", "allergytype", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "allergytype", "from", "allergy_type", "group", "by", "allergytype", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which allergy type has most number of allergies?", "question_toks": ["Which", "allergy", "type", "has", "most", "number", "of", "allergies", "?"], "dataset_name": "spider", "guid": 3554}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".", "sql": "SELECT institution, location FROM institution WHERE founded > 1990 AND type = 'Private'", "example": {"db_id": "protein_institute", "query": "SELECT institution ,  LOCATION FROM institution WHERE founded  >  1990 AND TYPE  =  'Private'", "query_toks": ["SELECT", "institution", ",", "LOCATION", "FROM", "institution", "WHERE", "founded", ">", "1990", "AND", "TYPE", "=", "'Private", "'"], "query_toks_no_value": ["select", "institution", ",", "location", "from", "institution", "where", "founded", ">", "value", "and", "type", "=", "value"], "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".", "question_toks": ["Show", "the", "names", "and", "locations", "of", "institutions", "that", "are", "founded", "after", "1990", "and", "have", "the", "type", "``", "Private", "''", "."], "dataset_name": "spider", "guid": 3555}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the states where both owners and professionals live.", "sql": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "example": {"db_id": "dog_kennels", "query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals", "query_toks": ["SELECT", "state", "FROM", "Owners", "INTERSECT", "SELECT", "state", "FROM", "Professionals"], "query_toks_no_value": ["select", "state", "from", "owners", "intersect", "select", "state", "from", "professionals"], "question": "Find the states where both owners and professionals live.", "question_toks": ["Find", "the", "states", "where", "both", "owners", "and", "professionals", "live", "."], "dataset_name": "spider", "guid": 3556}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show all the grades of the high schoolers.", "sql": "SELECT grade FROM Highschooler", "example": {"db_id": "network_1", "query": "SELECT grade FROM Highschooler", "query_toks": ["SELECT", "grade", "FROM", "Highschooler"], "query_toks_no_value": ["select", "grade", "from", "highschooler"], "question": "Show all the grades of the high schoolers.", "question_toks": ["Show", "all", "the", "grades", "of", "the", "high", "schoolers", "."], "dataset_name": "spider", "guid": 3557}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names.", "sql": "SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"", "query_toks": ["SELECT", "T3.staff_first_name", ",", "T3.staff_last_name", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "JOIN", "staff", "AS", "T3", "ON", "T1.product_id", "=", "T2.product_id", "AND", "T1.reported_by_staff_id", "=", "T3.staff_id", "WHERE", "T2.product_name", "=", "``", "rem", "''", "EXCEPT", "SELECT", "T3.staff_first_name", ",", "T3.staff_last_name", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "JOIN", "staff", "AS", "T3", "ON", "T1.product_id", "=", "T2.product_id", "AND", "T1.reported_by_staff_id", "=", "T3.staff_id", "WHERE", "T2.product_name", "=", "``", "aut", "''"], "query_toks_no_value": ["select", "t3", ".", "staff_first_name", ",", "t3", ".", "staff_last_name", "from", "problems", "as", "t1", "join", "product", "as", "t2", "join", "staff", "as", "t3", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "and", "t1", ".", "reported_by_staff_id", "=", "t3", ".", "staff_id", "where", "t2", ".", "product_name", "=", "value", "except", "select", "t3", ".", "staff_first_name", ",", "t3", ".", "staff_last_name", "from", "problems", "as", "t1", "join", "product", "as", "t2", "join", "staff", "as", "t3", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "and", "t1", ".", "reported_by_staff_id", "=", "t3", ".", "staff_id", "where", "t2", ".", "product_name", "=", "value"], "question": "Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names.", "question_toks": ["Which", "staff", "members", "who", "reported", "problems", "from", "the", "product", "``", "rem", "''", "but", "not", "``", "aut", "''", "?", "Give", "me", "their", "first", "and", "last", "names", "."], "dataset_name": "spider", "guid": 3558}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the names of enzymes in descending order?", "sql": "SELECT name FROM enzyme ORDER BY name DESC", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT name FROM enzyme ORDER BY name DESC", "query_toks": ["SELECT", "name", "FROM", "enzyme", "ORDER", "BY", "name", "DESC"], "query_toks_no_value": ["select", "name", "from", "enzyme", "order", "by", "name", "desc"], "question": "What are the names of enzymes in descending order?", "question_toks": ["What", "are", "the", "names", "of", "enzymes", "in", "descending", "order", "?"], "dataset_name": "spider", "guid": 3559}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Return the device carriers that do not have Android as their software platform.", "sql": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'", "example": {"db_id": "device", "query": "SELECT Carrier FROM device WHERE Software_Platform != 'Android'", "query_toks": ["SELECT", "Carrier", "FROM", "device", "WHERE", "Software_Platform", "!", "=", "'Android", "'"], "query_toks_no_value": ["select", "carrier", "from", "device", "where", "software_platform", "!", "=", "value"], "question": "Return the device carriers that do not have Android as their software platform.", "question_toks": ["Return", "the", "device", "carriers", "that", "do", "not", "have", "Android", "as", "their", "software", "platform", "."], "dataset_name": "spider", "guid": 3560}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?", "sql": "SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008", "example": {"db_id": "device", "query": "SELECT LOCATION FROM shop WHERE Open_Year  >  2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year  <  2008", "query_toks": ["SELECT", "LOCATION", "FROM", "shop", "WHERE", "Open_Year", ">", "2012", "INTERSECT", "SELECT", "LOCATION", "FROM", "shop", "WHERE", "Open_Year", "<", "2008"], "query_toks_no_value": ["select", "location", "from", "shop", "where", "open_year", ">", "value", "intersect", "select", "location", "from", "shop", "where", "open_year", "<", "value"], "question": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?", "question_toks": ["Which", "locations", "contains", "both", "shops", "that", "opened", "after", "the", "year", "2012", "and", "shops", "that", "opened", "before", "2008", "?"], "dataset_name": "spider", "guid": 3561}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What are the names of shops in ascending order of open year?", "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC", "example": {"db_id": "device", "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year ASC", "query_toks": ["SELECT", "Shop_Name", "FROM", "shop", "ORDER", "BY", "Open_Year", "ASC"], "query_toks_no_value": ["select", "shop_name", "from", "shop", "order", "by", "open_year", "asc"], "question": "What are the names of shops in ascending order of open year?", "question_toks": ["What", "are", "the", "names", "of", "shops", "in", "ascending", "order", "of", "open", "year", "?"], "dataset_name": "spider", "guid": 3562}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many male students (sex is 'M') are allergic to any type of food?", "sql": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student", "WHERE", "sex", "=", "``", "M", "''", "AND", "StuID", "IN", "(", "SELECT", "StuID", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_Type", "AS", "T2", "ON", "T1.Allergy", "=", "T2.Allergy", "WHERE", "T2.allergytype", "=", "``", "food", "''", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "where", "sex", "=", "value", "and", "stuid", "in", "(", "select", "stuid", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "where", "t2", ".", "allergytype", "=", "value", ")"], "question": "How many male students (sex is 'M') are allergic to any type of food?", "question_toks": ["How", "many", "male", "students", "(", "sex", "is", "'M", "'", ")", "are", "allergic", "to", "any", "type", "of", "food", "?"], "dataset_name": "spider", "guid": 3563}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the different majors?", "sql": "SELECT DISTINCT Major FROM Student", "example": {"db_id": "allergy_1", "query": "SELECT DISTINCT Major FROM Student", "query_toks": ["SELECT", "DISTINCT", "Major", "FROM", "Student"], "query_toks_no_value": ["select", "distinct", "major", "from", "student"], "question": "What are the different majors?", "question_toks": ["What", "are", "the", "different", "majors", "?"], "dataset_name": "spider", "guid": 3564}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many different advisors are listed?", "sql": "SELECT count(DISTINCT advisor) FROM Student", "example": {"db_id": "allergy_1", "query": "SELECT count(DISTINCT advisor) FROM Student", "query_toks": ["SELECT", "count", "(", "DISTINCT", "advisor", ")", "FROM", "Student"], "query_toks_no_value": ["select", "count", "(", "distinct", "advisor", ")", "from", "student"], "question": "How many different advisors are listed?", "question_toks": ["How", "many", "different", "advisors", "are", "listed", "?"], "dataset_name": "spider", "guid": 3565}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How old is the average person for each job?", "sql": "SELECT avg(age) ,  job FROM Person GROUP BY job", "example": {"db_id": "network_2", "query": "SELECT avg(age) ,  job FROM Person GROUP BY job", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "job", "FROM", "Person", "GROUP", "BY", "job"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "job", "from", "person", "group", "by", "job"], "question": "How old is the average person for each job?", "question_toks": ["How", "old", "is", "the", "average", "person", "for", "each", "job", "?"], "dataset_name": "spider", "guid": 3566}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the most common types of interactions between enzymes and medicine, and how many types are there?", "sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "interaction_type", ",", "count", "(", "*", ")", "FROM", "medicine_enzyme_interaction", "GROUP", "BY", "interaction_type", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "interaction_type", ",", "count", "(", "*", ")", "from", "medicine_enzyme_interaction", "group", "by", "interaction_type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?", "question_toks": ["What", "are", "the", "most", "common", "types", "of", "interactions", "between", "enzymes", "and", "medicine", ",", "and", "how", "many", "types", "are", "there", "?"], "dataset_name": "spider", "guid": 3567}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What is the maximum OMIM value in the database?", "sql": "SELECT max(OMIM) FROM enzyme", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT max(OMIM) FROM enzyme", "query_toks": ["SELECT", "max", "(", "OMIM", ")", "FROM", "enzyme"], "query_toks_no_value": ["select", "max", "(", "omim", ")", "from", "enzyme"], "question": "What is the maximum OMIM value in the database?", "question_toks": ["What", "is", "the", "maximum", "OMIM", "value", "in", "the", "database", "?"], "dataset_name": "spider", "guid": 3568}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What is the id and trade name of the medicines can interact with at least 3 enzymes?", "sql": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3", "query_toks": ["SELECT", "T1.id", ",", "T1.trade_name", "FROM", "medicine", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.medicine_id", "=", "T1.id", "GROUP", "BY", "T1.id", "HAVING", "COUNT", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "trade_name", "from", "medicine", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "medicine_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?", "question_toks": ["What", "is", "the", "id", "and", "trade", "name", "of", "the", "medicines", "can", "interact", "with", "at", "least", "3", "enzymes", "?"], "dataset_name": "spider", "guid": 3569}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | Find the name of the train whose route runs through greatest number of stations.", "sql": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "station_weather", "query": "SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id  =  t2.train_id GROUP BY t2.train_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.name", "FROM", "train", "AS", "t1", "JOIN", "route", "AS", "t2", "ON", "t1.id", "=", "t2.train_id", "GROUP", "BY", "t2.train_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "train", "as", "t1", "join", "route", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "train_id", "group", "by", "t2", ".", "train_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the train whose route runs through greatest number of stations.", "question_toks": ["Find", "the", "name", "of", "the", "train", "whose", "route", "runs", "through", "greatest", "number", "of", "stations", "."], "dataset_name": "spider", "guid": 3570}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | List the problem id and log id which are assigned to the staff named Rylan Homenick.", "sql": "SELECT DISTINCT T2.problem_id , T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"", "query_toks": ["SELECT", "DISTINCT", "T2.problem_id", ",", "T2.problem_log_id", "FROM", "staff", "AS", "T1", "JOIN", "problem_log", "AS", "T2", "ON", "T1.staff_id", "=", "T2.assigned_to_staff_id", "WHERE", "T1.staff_first_name", "=", "``", "Rylan", "''", "AND", "T1.staff_last_name", "=", "``", "Homenick", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "problem_id", ",", "t2", ".", "problem_log_id", "from", "staff", "as", "t1", "join", "problem_log", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "assigned_to_staff_id", "where", "t1", ".", "staff_first_name", "=", "value", "and", "t1", ".", "staff_last_name", "=", "value"], "question": "List the problem id and log id which are assigned to the staff named Rylan Homenick.", "question_toks": ["List", "the", "problem", "id", "and", "log", "id", "which", "are", "assigned", "to", "the", "staff", "named", "Rylan", "Homenick", "."], "dataset_name": "spider", "guid": 3571}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Show the name of the shop that have the largest quantity of devices in stock.", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1", "example": {"db_id": "device", "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Shop_Name", "FROM", "stock", "AS", "T1", "JOIN", "shop", "AS", "T2", "ON", "T1.Shop_ID", "=", "T2.Shop_ID", "GROUP", "BY", "T1.Shop_ID", "ORDER", "BY", "SUM", "(", "T1.quantity", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "shop_name", "from", "stock", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t1", ".", "shop_id", "order", "by", "sum", "(", "t1", ".", "quantity", ")", "desc", "limit", "value"], "question": "Show the name of the shop that have the largest quantity of devices in stock.", "question_toks": ["Show", "the", "name", "of", "the", "shop", "that", "have", "the", "largest", "quantity", "of", "devices", "in", "stock", "."], "dataset_name": "spider", "guid": 3572}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.", "sql": "SELECT T1.id , T1.Name , T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY count(*) DESC", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC", "query_toks": ["SELECT", "T1.id", ",", "T1.Name", ",", "T1.FDA_approved", "FROM", "medicine", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.medicine_id", "=", "T1.id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", ",", "t1", ".", "fda_approved", "from", "medicine", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "medicine_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc"], "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.", "question_toks": ["What", "are", "the", "ids", ",", "names", "and", "FDA", "approval", "status", "of", "medicines", "in", "descending", "order", "of", "the", "number", "of", "enzymes", "that", "it", "can", "interact", "with", "."], "dataset_name": "spider", "guid": 3573}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find number of pets owned by students who are older than 20.", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "example": {"db_id": "pets_1", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T1.age", ">", "20"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t1", ".", "age", ">", "value"], "question": "Find number of pets owned by students who are older than 20.", "question_toks": ["Find", "number", "of", "pets", "owned", "by", "students", "who", "are", "older", "than", "20", "."], "dataset_name": "spider", "guid": 3574}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What are the carriers of devices that are not in stock anywhere?", "sql": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)", "example": {"db_id": "device", "query": "SELECT Carrier FROM device WHERE Device_ID NOT IN (SELECT Device_ID FROM stock)", "query_toks": ["SELECT", "Carrier", "FROM", "device", "WHERE", "Device_ID", "NOT", "IN", "(", "SELECT", "Device_ID", "FROM", "stock", ")"], "query_toks_no_value": ["select", "carrier", "from", "device", "where", "device_id", "not", "in", "(", "select", "device_id", "from", "stock", ")"], "question": "What are the carriers of devices that are not in stock anywhere?", "question_toks": ["What", "are", "the", "carriers", "of", "devices", "that", "are", "not", "in", "stock", "anywhere", "?"], "dataset_name": "spider", "guid": 3575}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Who is the oldest person whose job is student?", "sql": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )", "example": {"db_id": "network_2", "query": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )", "query_toks": ["SELECT", "name", "FROM", "Person", "WHERE", "job", "=", "'student", "'", "AND", "age", "=", "(", "SELECT", "max", "(", "age", ")", "FROM", "person", "WHERE", "job", "=", "'student", "'", ")"], "query_toks_no_value": ["select", "name", "from", "person", "where", "job", "=", "value", "and", "age", "=", "(", "select", "max", "(", "age", ")", "from", "person", "where", "job", "=", "value", ")"], "question": "Who is the oldest person whose job is student?", "question_toks": ["Who", "is", "the", "oldest", "person", "whose", "job", "is", "student", "?"], "dataset_name": "spider", "guid": 3576}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the name and email of the user followed by the least number of people.", "sql": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1", "example": {"db_id": "twitter_1", "query": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1", "query_toks": ["SELECT", "name", ",", "email", "FROM", "user_profiles", "ORDER", "BY", "followers", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "email", "from", "user_profiles", "order", "by", "followers", "limit", "value"], "question": "Find the name and email of the user followed by the least number of people.", "question_toks": ["Find", "the", "name", "and", "email", "of", "the", "user", "followed", "by", "the", "least", "number", "of", "people", "."], "dataset_name": "spider", "guid": 3577}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names and job titles of every person ordered alphabetically by name?", "sql": "SELECT name ,  job FROM Person ORDER BY name", "example": {"db_id": "network_2", "query": "SELECT name ,  job FROM Person ORDER BY name", "query_toks": ["SELECT", "name", ",", "job", "FROM", "Person", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "name", ",", "job", "from", "person", "order", "by", "name"], "question": "What are the names and job titles of every person ordered alphabetically by name?", "question_toks": ["What", "are", "the", "names", "and", "job", "titles", "of", "every", "person", "ordered", "alphabetically", "by", "name", "?"], "dataset_name": "spider", "guid": 3578}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the names of regions that were not affected?", "sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)", "example": {"db_id": "storm_record", "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)", "query_toks": ["SELECT", "region_name", "FROM", "region", "WHERE", "region_id", "NOT", "IN", "(", "SELECT", "region_id", "FROM", "affected_region", ")"], "query_toks_no_value": ["select", "region_name", "from", "region", "where", "region_id", "not", "in", "(", "select", "region_id", "from", "affected_region", ")"], "question": "What are the names of regions that were not affected?", "question_toks": ["What", "are", "the", "names", "of", "regions", "that", "were", "not", "affected", "?"], "dataset_name": "spider", "guid": 3579}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.", "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"", "query_toks": ["SELECT", "T1.problem_description", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Christop", "''"], "query_toks_no_value": ["select", "t1", ".", "problem_description", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value"], "question": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.", "question_toks": ["Give", "me", "a", "list", "of", "descriptions", "of", "the", "problems", "that", "are", "reported", "by", "the", "staff", "whose", "first", "name", "is", "Christop", "."], "dataset_name": "spider", "guid": 3580}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are each owner's first name, last name, and the size of their dog?", "sql": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id", "example": {"db_id": "dog_kennels", "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T2.size_code", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t2", ".", "size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id"], "question": "What are each owner's first name, last name, and the size of their dog?", "question_toks": ["What", "are", "each", "owner", "'s", "first", "name", ",", "last", "name", ",", "and", "the", "size", "of", "their", "dog", "?"], "dataset_name": "spider", "guid": 3581}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What are the students' first names who have both cats and dogs as pets?", "sql": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "example": {"db_id": "pets_1", "query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'", "query_toks": ["SELECT", "T1.Fname", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", "INTERSECT", "SELECT", "T1.Fname", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'dog", "'"], "query_toks_no_value": ["select", "t1", ".", "fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "intersect", "select", "t1", ".", "fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value"], "question": "What are the students' first names who have both cats and dogs as pets?", "question_toks": ["What", "are", "the", "students", "'", "first", "names", "who", "have", "both", "cats", "and", "dogs", "as", "pets", "?"], "dataset_name": "spider", "guid": 3582}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Return the grade for the high schooler named Kyle.", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "example": {"db_id": "network_1", "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "query_toks": ["SELECT", "grade", "FROM", "Highschooler", "WHERE", "name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "grade", "from", "highschooler", "where", "name", "=", "value"], "question": "Return the grade for the high schooler named Kyle.", "question_toks": ["Return", "the", "grade", "for", "the", "high", "schooler", "named", "Kyle", "."], "dataset_name": "spider", "guid": 3583}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What is the name of the breed with the most dogs?", "sql": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "dog_kennels", "query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.breed_name", "FROM", "Breeds", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.breed_code", "=", "T2.breed_code", "GROUP", "BY", "T1.breed_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "breed_code", "=", "t2", ".", "breed_code", "group", "by", "t1", ".", "breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the breed with the most dogs?", "question_toks": ["What", "is", "the", "name", "of", "the", "breed", "with", "the", "most", "dogs", "?"], "dataset_name": "spider", "guid": 3584}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many female students have milk or egg allergies?", "sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "has_allergy", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.StuID", "=", "T2.StuID", "WHERE", "T2.sex", "=", "``", "F", "''", "AND", "T1.allergy", "=", "``", "Milk", "''", "OR", "T1.allergy", "=", "``", "Eggs", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "has_allergy", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t2", ".", "sex", "=", "value", "and", "t1", ".", "allergy", "=", "value", "or", "t1", ".", "allergy", "=", "value"], "question": "How many female students have milk or egg allergies?", "question_toks": ["How", "many", "female", "students", "have", "milk", "or", "egg", "allergies", "?"], "dataset_name": "spider", "guid": 3585}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What is the software platform that is most common amongst all devices?", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "device", "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Software_Platform", "FROM", "device", "GROUP", "BY", "Software_Platform", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "software_platform", "from", "device", "group", "by", "software_platform", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the software platform that is most common amongst all devices?", "question_toks": ["What", "is", "the", "software", "platform", "that", "is", "most", "common", "amongst", "all", "devices", "?"], "dataset_name": "spider", "guid": 3586}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What are the names and location of the shops in ascending alphabetical order of name.", "sql": "SELECT Shop_Name, Location FROM shop ORDER BY Shop_Name ASC", "example": {"db_id": "device", "query": "SELECT Shop_Name ,  LOCATION FROM shop ORDER BY Shop_Name ASC", "query_toks": ["SELECT", "Shop_Name", ",", "LOCATION", "FROM", "shop", "ORDER", "BY", "Shop_Name", "ASC"], "query_toks_no_value": ["select", "shop_name", ",", "location", "from", "shop", "order", "by", "shop_name", "asc"], "question": "What are the names and location of the shops in ascending alphabetical order of name.", "question_toks": ["What", "are", "the", "names", "and", "location", "of", "the", "shops", "in", "ascending", "alphabetical", "order", "of", "name", "."], "dataset_name": "spider", "guid": 3587}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | How many owners temporarily do not have any dogs?", "sql": "SELECT COUNT(*) FROM Owners WHERE owner_id NOT IN (SELECT owner_id FROM Dogs)", "example": {"db_id": "dog_kennels", "query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Owners", "WHERE", "owner_id", "NOT", "IN", "(", "SELECT", "owner_id", "FROM", "Dogs", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "owners", "where", "owner_id", "not", "in", "(", "select", "owner_id", "from", "dogs", ")"], "question": "How many owners temporarily do not have any dogs?", "question_toks": ["How", "many", "owners", "temporarily", "do", "not", "have", "any", "dogs", "?"], "dataset_name": "spider", "guid": 3588}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "sql": "SELECT name FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000 )", "example": {"db_id": "dog_kennels", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "query_toks": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")"], "query_toks_no_value": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "value", ")"], "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "question_toks": ["Which", "dogs", "have", "not", "cost", "their", "owner", "more", "than", "1000", "for", "treatment", "?", "List", "the", "dog", "names", "."], "dataset_name": "spider", "guid": 3589}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"", "query_toks": ["SELECT", "T2.product_name", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "JOIN", "staff", "AS", "T3", "ON", "T1.product_id", "=", "T2.product_id", "AND", "T1.reported_by_staff_id", "=", "T3.staff_id", "WHERE", "T3.staff_first_name", "=", "``", "Lacey", "''", "AND", "T3.staff_last_name", "=", "``", "Bosco", "''", "INTERSECT", "SELECT", "T2.product_name", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "JOIN", "staff", "AS", "T3", "ON", "T1.product_id", "=", "T2.product_id", "AND", "T1.reported_by_staff_id", "=", "T3.staff_id", "WHERE", "T3.staff_first_name", "=", "``", "Kenton", "''", "AND", "T3.staff_last_name", "=", "``", "Champlin", "''"], "query_toks_no_value": ["select", "t2", ".", "product_name", "from", "problems", "as", "t1", "join", "product", "as", "t2", "join", "staff", "as", "t3", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "and", "t1", ".", "reported_by_staff_id", "=", "t3", ".", "staff_id", "where", "t3", ".", "staff_first_name", "=", "value", "and", "t3", ".", "staff_last_name", "=", "value", "intersect", "select", "t2", ".", "product_name", "from", "problems", "as", "t1", "join", "product", "as", "t2", "join", "staff", "as", "t3", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "and", "t1", ".", "reported_by_staff_id", "=", "t3", ".", "staff_id", "where", "t3", ".", "staff_first_name", "=", "value", "and", "t3", ".", "staff_last_name", "=", "value"], "question": "Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?", "question_toks": ["Which", "products", "have", "problems", "reported", "by", "both", "the", "staff", "named", "Lacey", "Bosco", "and", "the", "staff", "named", "Kenton", "Champlin", "?"], "dataset_name": "spider", "guid": 3590}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What are the names and grades for each high schooler?", "sql": "SELECT name ,  grade FROM Highschooler", "example": {"db_id": "network_1", "query": "SELECT name ,  grade FROM Highschooler", "query_toks": ["SELECT", "name", ",", "grade", "FROM", "Highschooler"], "query_toks_no_value": ["select", "name", ",", "grade", "from", "highschooler"], "question": "What are the names and grades for each high schooler?", "question_toks": ["What", "are", "the", "names", "and", "grades", "for", "each", "high", "schooler", "?"], "dataset_name": "spider", "guid": 3591}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How many females does this network has?", "sql": "SELECT count(*) FROM Person WHERE gender  =  'female'", "example": {"db_id": "network_2", "query": "SELECT count(*) FROM Person WHERE gender  =  'female'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Person", "WHERE", "gender", "=", "'female", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "person", "where", "gender", "=", "value"], "question": "How many females does this network has?", "question_toks": ["How", "many", "females", "does", "this", "network", "has", "?"], "dataset_name": "spider", "guid": 3592}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names of all people who do not have friends?", "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend", "example": {"db_id": "network_2", "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend", "query_toks": ["SELECT", "name", "FROM", "person", "EXCEPT", "SELECT", "name", "FROM", "PersonFriend"], "query_toks_no_value": ["select", "name", "from", "person", "except", "select", "name", "from", "personfriend"], "question": "What are the names of all people who do not have friends?", "question_toks": ["What", "are", "the", "names", "of", "all", "people", "who", "do", "not", "have", "friends", "?"], "dataset_name": "spider", "guid": 3593}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the total number of people who has no friend living in the city of Austin.", "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')", "example": {"db_id": "network_2", "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')", "query_toks": ["SELECT", "count", "(", "DISTINCT", "name", ")", "FROM", "PersonFriend", "WHERE", "friend", "NOT", "IN", "(", "SELECT", "name", "FROM", "person", "WHERE", "city", "=", "'Austin", "'", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "personfriend", "where", "friend", "not", "in", "(", "select", "name", "from", "person", "where", "city", "=", "value", ")"], "question": "What is the total number of people who has no friend living in the city of Austin.", "question_toks": ["What", "is", "the", "total", "number", "of", "people", "who", "has", "no", "friend", "living", "in", "the", "city", "of", "Austin", "."], "dataset_name": "spider", "guid": 3594}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the emails of the user named \"Mary\".", "sql": "SELECT email FROM user_profiles WHERE name  =  'Mary'", "example": {"db_id": "twitter_1", "query": "SELECT email FROM user_profiles WHERE name  =  'Mary'", "query_toks": ["SELECT", "email", "FROM", "user_profiles", "WHERE", "name", "=", "'Mary", "'"], "query_toks_no_value": ["select", "email", "from", "user_profiles", "where", "name", "=", "value"], "question": "Find the emails of the user named \"Mary\".", "question_toks": ["Find", "the", "emails", "of", "the", "user", "named", "``", "Mary", "''", "."], "dataset_name": "spider", "guid": 3595}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Who is the oldest person?", "sql": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)", "example": {"db_id": "network_2", "query": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)", "query_toks": ["SELECT", "name", "FROM", "Person", "WHERE", "age", "=", "(", "SELECT", "max", "(", "age", ")", "FROM", "person", ")"], "query_toks_no_value": ["select", "name", "from", "person", "where", "age", "=", "(", "select", "max", "(", "age", ")", "from", "person", ")"], "question": "Who is the oldest person?", "question_toks": ["Who", "is", "the", "oldest", "person", "?"], "dataset_name": "spider", "guid": 3596}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Who has friends that are younger than the average age?", "sql": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)", "example": {"db_id": "network_2", "query": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)", "query_toks": ["SELECT", "DISTINCT", "T2.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T1.age", "<", "(", "SELECT", "avg", "(", "age", ")", "FROM", "person", ")"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t1", ".", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "person", ")"], "question": "Who has friends that are younger than the average age?", "question_toks": ["Who", "has", "friends", "that", "are", "younger", "than", "the", "average", "age", "?"], "dataset_name": "spider", "guid": 3597}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the name of persons who are friends with Bob.", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'", "example": {"db_id": "network_2", "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'", "query_toks": ["SELECT", "T1.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "=", "'Bob", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "=", "value"], "question": "Find the name of persons who are friends with Bob.", "question_toks": ["Find", "the", "name", "of", "persons", "who", "are", "friends", "with", "Bob", "."], "dataset_name": "spider", "guid": 3598}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the age of the doctor named Zach?", "sql": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'", "example": {"db_id": "network_2", "query": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'", "query_toks": ["SELECT", "age", "FROM", "Person", "WHERE", "job", "=", "'doctor", "'", "AND", "name", "=", "'Zach", "'"], "query_toks_no_value": ["select", "age", "from", "person", "where", "job", "=", "value", "and", "name", "=", "value"], "question": "What is the age of the doctor named Zach?", "question_toks": ["What", "is", "the", "age", "of", "the", "doctor", "named", "Zach", "?"], "dataset_name": "spider", "guid": 3599}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Show the region name with at least two storms.", "sql": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "example": {"db_id": "storm_record", "query": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.region_name", "FROM", "region", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "GROUP", "BY", "T1.region_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "region_name", "from", "region", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "group", "by", "t1", ".", "region_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the region name with at least two storms.", "question_toks": ["Show", "the", "region", "name", "with", "at", "least", "two", "storms", "."], "dataset_name": "spider", "guid": 3600}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the average age of students who do not have any pet .", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "example": {"db_id": "pets_1", "query": "select avg(age) from student where stuid not in (select stuid from has_pet)", "query_toks": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")"], "question": "Find the average age of students who do not have any pet .", "question_toks": ["Find", "the", "average", "age", "of", "students", "who", "do", "not", "have", "any", "pet", "."], "dataset_name": "spider", "guid": 3601}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | show all train numbers and names ordered by their time from early to late.", "sql": "SELECT train_number , name FROM train ORDER BY TIME", "example": {"db_id": "station_weather", "query": "SELECT train_number ,  name FROM train ORDER BY TIME", "query_toks": ["SELECT", "train_number", ",", "name", "FROM", "train", "ORDER", "BY", "TIME"], "query_toks_no_value": ["select", "train_number", ",", "name", "from", "train", "order", "by", "time"], "question": "show all train numbers and names ordered by their time from early to late.", "question_toks": ["show", "all", "train", "numbers", "and", "names", "ordered", "by", "their", "time", "from", "early", "to", "late", "."], "dataset_name": "spider", "guid": 3602}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the name of the youngest male?", "sql": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )", "example": {"db_id": "network_2", "query": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )", "query_toks": ["SELECT", "name", "FROM", "Person", "WHERE", "gender", "=", "'male", "'", "AND", "age", "=", "(", "SELECT", "min", "(", "age", ")", "FROM", "person", "WHERE", "gender", "=", "'male", "'", ")"], "query_toks_no_value": ["select", "name", "from", "person", "where", "gender", "=", "value", "and", "age", "=", "(", "select", "min", "(", "age", ")", "from", "person", "where", "gender", "=", "value", ")"], "question": "What is the name of the youngest male?", "question_toks": ["What", "is", "the", "name", "of", "the", "youngest", "male", "?"], "dataset_name": "spider", "guid": 3603}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the number of pets whose weight is heavier than 10.", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "example": {"db_id": "pets_1", "query": "SELECT count(*) FROM pets WHERE weight  >  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "pets", "WHERE", "weight", ">", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "value"], "question": "Find the number of pets whose weight is heavier than 10.", "question_toks": ["Find", "the", "number", "of", "pets", "whose", "weight", "is", "heavier", "than", "10", "."], "dataset_name": "spider", "guid": 3604}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the number of people who is under 40 for each gender.", "sql": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender", "example": {"db_id": "network_2", "query": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "gender", "FROM", "Person", "WHERE", "age", "<", "40", "GROUP", "BY", "gender"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "gender", "from", "person", "where", "age", "<", "value", "group", "by", "gender"], "question": "Find the number of people who is under 40 for each gender.", "question_toks": ["Find", "the", "number", "of", "people", "who", "is", "under", "40", "for", "each", "gender", "."], "dataset_name": "spider", "guid": 3605}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING count(*) >= 2", "example": {"db_id": "network_1", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "WHERE", "T2.grade", ">", "5", "GROUP", "BY", "T1.student_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "where", "t2", ".", "grade", ">", "value", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "question_toks": ["What", "are", "the", "names", "of", "high", "schoolers", "who", "have", "a", "grade", "of", "over", "5", "and", "have", "2", "or", "more", "friends", "?"], "dataset_name": "spider", "guid": 3606}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What is the name of the high schooler who has the greatest number of likes?", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "network_1", "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "Likes", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the high schooler who has the greatest number of likes?", "question_toks": ["What", "is", "the", "name", "of", "the", "high", "schooler", "who", "has", "the", "greatest", "number", "of", "likes", "?"], "dataset_name": "spider", "guid": 3607}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the name and email for the users who have more than one follower.", "sql": "SELECT T1.name , T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING count(*) > 1", "example": {"db_id": "twitter_1", "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", ",", "T1.email", "FROM", "user_profiles", "AS", "T1", "JOIN", "follows", "AS", "T2", "ON", "T1.uid", "=", "T2.f1", "GROUP", "BY", "T2.f1", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "email", "from", "user_profiles", "as", "t1", "join", "follows", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "f1", "group", "by", "t2", ".", "f1", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name and email for the users who have more than one follower.", "question_toks": ["Find", "the", "name", "and", "email", "for", "the", "users", "who", "have", "more", "than", "one", "follower", "."], "dataset_name": "spider", "guid": 3608}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Whare the names, friends, and ages of all people who are older than the average age of a person?", "sql": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)", "example": {"db_id": "network_2", "query": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)", "query_toks": ["SELECT", "DISTINCT", "T2.name", ",", "T2.friend", ",", "T1.age", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T1.age", ">", "(", "SELECT", "avg", "(", "age", ")", "FROM", "person", ")"], "query_toks_no_value": ["select", "distinct", "t2", ".", "name", ",", "t2", ".", "friend", ",", "t1", ".", "age", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t1", ".", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "person", ")"], "question": "Whare the names, friends, and ages of all people who are older than the average age of a person?", "question_toks": ["Whare", "the", "names", ",", "friends", ",", "and", "ages", "of", "all", "people", "who", "are", "older", "than", "the", "average", "age", "of", "a", "person", "?"], "dataset_name": "spider", "guid": 3609}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | List each owner's first name, last name, and the size of his for her dog.", "sql": "SELECT T1.first_name , T1.last_name , T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id", "example": {"db_id": "dog_kennels", "query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T2.size_code", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t2", ".", "size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id"], "question": "List each owner's first name, last name, and the size of his for her dog.", "question_toks": ["List", "each", "owner", "'s", "first", "name", ",", "last", "name", ",", "and", "the", "size", "of", "his", "for", "her", "dog", "."], "dataset_name": "spider", "guid": 3610}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names of every person who has a friend over 40 and under 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "example": {"db_id": "network_2", "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "query_toks": ["SELECT", "T1.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "IN", "(", "SELECT", "name", "FROM", "Person", "WHERE", "age", ">", "40", ")", "INTERSECT", "SELECT", "T1.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "IN", "(", "SELECT", "name", "FROM", "Person", "WHERE", "age", "<", "30", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "in", "(", "select", "name", "from", "person", "where", "age", ">", "value", ")", "intersect", "select", "t1", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "in", "(", "select", "name", "from", "person", "where", "age", "<", "value", ")"], "question": "What are the names of every person who has a friend over 40 and under 30?", "question_toks": ["What", "are", "the", "names", "of", "every", "person", "who", "has", "a", "friend", "over", "40", "and", "under", "30", "?"], "dataset_name": "spider", "guid": 3611}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | Find names and times of trains that run through stations for the local authority Chiltern.", "sql": "SELECT t3.name , t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\"", "example": {"db_id": "station_weather", "query": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"", "query_toks": ["SELECT", "t3.name", ",", "t3.time", "FROM", "station", "AS", "t1", "JOIN", "route", "AS", "t2", "ON", "t1.id", "=", "t2.station_id", "JOIN", "train", "AS", "t3", "ON", "t2.train_id", "=", "t3.id", "WHERE", "t1.local_authority", "=", "``", "Chiltern", "''"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t3", ".", "time", "from", "station", "as", "t1", "join", "route", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "join", "train", "as", "t3", "on", "t2", ".", "train_id", "=", "t3", ".", "id", "where", "t1", ".", "local_authority", "=", "value"], "question": "Find names and times of trains that run through stations for the local authority Chiltern.", "question_toks": ["Find", "names", "and", "times", "of", "trains", "that", "run", "through", "stations", "for", "the", "local", "authority", "Chiltern", "."], "dataset_name": "spider", "guid": 3612}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "sql": "SELECT T1.owner_id , T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "dog_kennels", "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.owner_id", ",", "T1.last_name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "JOIN", "Treatments", "AS", "T3", "ON", "T2.dog_id", "=", "T3.dog_id", "GROUP", "BY", "T1.owner_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "owner_id", ",", "t1", ".", "last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "join", "treatments", "as", "t3", "on", "t2", ".", "dog_id", "=", "t3", ".", "dog_id", "group", "by", "t1", ".", "owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "question_toks": ["Which", "owner", "has", "paid", "for", "the", "most", "treatments", "on", "his", "or", "her", "dogs", "?", "List", "the", "owner", "id", "and", "last", "name", "."], "dataset_name": "spider", "guid": 3613}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the name and age of all males in order of their age.", "sql": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age", "example": {"db_id": "network_2", "query": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age", "query_toks": ["SELECT", "name", "FROM", "Person", "WHERE", "gender", "=", "'male", "'", "ORDER", "BY", "age"], "query_toks_no_value": ["select", "name", "from", "person", "where", "gender", "=", "value", "order", "by", "age"], "question": "Find the name and age of all males in order of their age.", "question_toks": ["Find", "the", "name", "and", "age", "of", "all", "males", "in", "order", "of", "their", "age", "."], "dataset_name": "spider", "guid": 3614}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How many friends does Dan have?", "sql": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'", "example": {"db_id": "network_2", "query": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'", "query_toks": ["SELECT", "count", "(", "T2.friend", ")", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T1.name", "=", "'Dan", "'"], "query_toks_no_value": ["select", "count", "(", "t2", ".", "friend", ")", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t1", ".", "name", "=", "value"], "question": "How many friends does Dan have?", "question_toks": ["How", "many", "friends", "does", "Dan", "have", "?"], "dataset_name": "spider", "guid": 3615}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What is the shop name corresponding to the shop that opened in the most recent year?", "sql": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1", "example": {"db_id": "device", "query": "SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1", "query_toks": ["SELECT", "Shop_Name", "FROM", "shop", "ORDER", "BY", "Open_Year", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "shop_name", "from", "shop", "order", "by", "open_year", "desc", "limit", "value"], "question": "What is the shop name corresponding to the shop that opened in the most recent year?", "question_toks": ["What", "is", "the", "shop", "name", "corresponding", "to", "the", "shop", "that", "opened", "in", "the", "most", "recent", "year", "?"], "dataset_name": "spider", "guid": 3616}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | How many high schoolers are in each grade?", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "example": {"db_id": "network_1", "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "query_toks": ["SELECT", "grade", ",", "count", "(", "*", ")", "FROM", "Highschooler", "GROUP", "BY", "grade"], "query_toks_no_value": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade"], "question": "How many high schoolers are in each grade?", "question_toks": ["How", "many", "high", "schoolers", "are", "in", "each", "grade", "?"], "dataset_name": "spider", "guid": 3617}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | Show the names and heights of buildings with at least two institutions founded after 1880.", "sql": "SELECT T1.name, T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING COUNT(*) >= 2", "example": {"db_id": "protein_institute", "query": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.name", ",", "T1.height_feet", "FROM", "building", "AS", "T1", "JOIN", "institution", "AS", "T2", "ON", "T1.building_id", "=", "T2.building_id", "WHERE", "T2.founded", ">", "1880", "GROUP", "BY", "T1.building_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "height_feet", "from", "building", "as", "t1", "join", "institution", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "building_id", "where", "t2", ".", "founded", ">", "value", "group", "by", "t1", ".", "building_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the names and heights of buildings with at least two institutions founded after 1880.", "question_toks": ["Show", "the", "names", "and", "heights", "of", "buildings", "with", "at", "least", "two", "institutions", "founded", "after", "1880", "."], "dataset_name": "spider", "guid": 3618}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What is the average quantity of stocks?", "sql": "SELECT AVG(quantity) FROM stock", "example": {"db_id": "device", "query": "SELECT avg(Quantity) FROM stock", "query_toks": ["SELECT", "avg", "(", "Quantity", ")", "FROM", "stock"], "query_toks_no_value": ["select", "avg", "(", "quantity", ")", "from", "stock"], "question": "What is the average quantity of stocks?", "question_toks": ["What", "is", "the", "average", "quantity", "of", "stocks", "?"], "dataset_name": "spider", "guid": 3619}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | List the carriers of devices in ascending alphabetical order.", "sql": "SELECT Carrier FROM device ORDER BY Carrier ASC", "example": {"db_id": "device", "query": "SELECT Carrier FROM device ORDER BY Carrier ASC", "query_toks": ["SELECT", "Carrier", "FROM", "device", "ORDER", "BY", "Carrier", "ASC"], "query_toks_no_value": ["select", "carrier", "from", "device", "order", "by", "carrier", "asc"], "question": "List the carriers of devices in ascending alphabetical order.", "question_toks": ["List", "the", "carriers", "of", "devices", "in", "ascending", "alphabetical", "order", "."], "dataset_name": "spider", "guid": 3620}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Show the carriers of devices in stock at more than one shop.", "sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1", "example": {"db_id": "device", "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T2.Carrier", "FROM", "stock", "AS", "T1", "JOIN", "device", "AS", "T2", "ON", "T1.Device_ID", "=", "T2.Device_ID", "GROUP", "BY", "T1.Device_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "carrier", "from", "stock", "as", "t1", "join", "device", "as", "t2", "on", "t1", ".", "device_id", "=", "t2", ".", "device_id", "group", "by", "t1", ".", "device_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the carriers of devices in stock at more than one shop.", "question_toks": ["Show", "the", "carriers", "of", "devices", "in", "stock", "at", "more", "than", "one", "shop", "."], "dataset_name": "spider", "guid": 3621}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | How many different kinds of clients are supported by the web clients accelerators?", "sql": "SELECT COUNT(DISTINCT client) FROM web_client_accelerator", "example": {"db_id": "browser_web", "query": "SELECT count(DISTINCT client) FROM web_client_accelerator", "query_toks": ["SELECT", "count", "(", "DISTINCT", "client", ")", "FROM", "web_client_accelerator"], "query_toks_no_value": ["select", "count", "(", "distinct", "client", ")", "from", "web_client_accelerator"], "question": "How many different kinds of clients are supported by the web clients accelerators?", "question_toks": ["How", "many", "different", "kinds", "of", "clients", "are", "supported", "by", "the", "web", "clients", "accelerators", "?"], "dataset_name": "spider", "guid": 3622}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the number of distinct type of pets.", "sql": "SELECT count(DISTINCT pettype) FROM pets", "example": {"db_id": "pets_1", "query": "SELECT count(DISTINCT pettype) FROM pets", "query_toks": ["SELECT", "count", "(", "DISTINCT", "pettype", ")", "FROM", "pets"], "query_toks_no_value": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets"], "question": "Find the number of distinct type of pets.", "question_toks": ["Find", "the", "number", "of", "distinct", "type", "of", "pets", "."], "dataset_name": "spider", "guid": 3623}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the name and age of the person who is a friend of both Dan and Alice.", "sql": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'", "example": {"db_id": "network_2", "query": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'", "query_toks": ["SELECT", "T1.name", ",", "T1.age", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "=", "'Dan", "'", "INTERSECT", "SELECT", "T1.name", ",", "T1.age", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "=", "'Alice", "'"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "age", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "=", "value", "intersect", "select", "t1", ".", "name", ",", "t1", ".", "age", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "=", "value"], "question": "Find the name and age of the person who is a friend of both Dan and Alice.", "question_toks": ["Find", "the", "name", "and", "age", "of", "the", "person", "who", "is", "a", "friend", "of", "both", "Dan", "and", "Alice", "."], "dataset_name": "spider", "guid": 3624}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the names and trade names of the medicines which has 'Yes' value in the FDA record?", "sql": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'", "query_toks": ["SELECT", "name", ",", "trade_name", "FROM", "medicine", "WHERE", "FDA_approved", "=", "'Yes", "'"], "query_toks_no_value": ["select", "name", ",", "trade_name", "from", "medicine", "where", "fda_approved", "=", "value"], "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?", "question_toks": ["What", "are", "the", "names", "and", "trade", "names", "of", "the", "medicines", "which", "has", "'Yes", "'", "value", "in", "the", "FDA", "record", "?"], "dataset_name": "spider", "guid": 3625}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What is the id of the pet owned by the student whose last name is 'Smith'?", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "example": {"db_id": "pets_1", "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "query_toks": ["SELECT", "T2.petid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T1.Lname", "=", "'Smith", "'"], "query_toks_no_value": ["select", "t2", ".", "petid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t1", ".", "lname", "=", "value"], "question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "question_toks": ["What", "is", "the", "id", "of", "the", "pet", "owned", "by", "the", "student", "whose", "last", "name", "is", "'Smith", "'", "?"], "dataset_name": "spider", "guid": 3626}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the allergy types and how many allergies correspond to each one?", "sql": "SELECT allergytype, COUNT(*) FROM Allergy_type GROUP BY allergytype", "example": {"db_id": "allergy_1", "query": "SELECT allergytype ,  count(*) FROM Allergy_type GROUP BY allergytype", "query_toks": ["SELECT", "allergytype", ",", "count", "(", "*", ")", "FROM", "Allergy_type", "GROUP", "BY", "allergytype"], "query_toks_no_value": ["select", "allergytype", ",", "count", "(", "*", ")", "from", "allergy_type", "group", "by", "allergytype"], "question": "What are the allergy types and how many allergies correspond to each one?", "question_toks": ["What", "are", "the", "allergy", "types", "and", "how", "many", "allergies", "correspond", "to", "each", "one", "?"], "dataset_name": "spider", "guid": 3627}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Return the grade that has the greatest number of high schoolers.", "sql": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "network_1", "query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "grade", "FROM", "Highschooler", "GROUP", "BY", "grade", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the grade that has the greatest number of high schoolers.", "question_toks": ["Return", "the", "grade", "that", "has", "the", "greatest", "number", "of", "high", "schoolers", "."], "dataset_name": "spider", "guid": 3628}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | Find the number of trains for each station, as well as the station network name and services.", "sql": "SELECT count(*) , t1.network_name , t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id", "example": {"db_id": "station_weather", "query": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "t1.network_name", ",", "t1.services", "FROM", "station", "AS", "t1", "JOIN", "route", "AS", "t2", "ON", "t1.id", "=", "t2.station_id", "GROUP", "BY", "t2.station_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "network_name", ",", "t1", ".", "services", "from", "station", "as", "t1", "join", "route", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "station_id", "group", "by", "t2", ".", "station_id"], "question": "Find the number of trains for each station, as well as the station network name and services.", "question_toks": ["Find", "the", "number", "of", "trains", "for", "each", "station", ",", "as", "well", "as", "the", "station", "network", "name", "and", "services", "."], "dataset_name": "spider", "guid": 3629}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students are age 18?", "sql": "SELECT count(*) FROM Student WHERE age  =  18", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Student WHERE age  =  18", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student", "WHERE", "age", "=", "18"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "where", "age", "=", "value"], "question": "How many students are age 18?", "question_toks": ["How", "many", "students", "are", "age", "18", "?"], "dataset_name": "spider", "guid": 3630}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the different names and ages of every friend of either Dan or alice?", "sql": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'", "example": {"db_id": "network_2", "query": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'", "query_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.age", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "=", "'Dan", "'", "OR", "T2.friend", "=", "'Alice", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", ",", "t1", ".", "age", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "=", "value", "or", "t2", ".", "friend", "=", "value"], "question": "What are the different names and ages of every friend of either Dan or alice?", "question_toks": ["What", "are", "the", "different", "names", "and", "ages", "of", "every", "friend", "of", "either", "Dan", "or", "alice", "?"], "dataset_name": "spider", "guid": 3631}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the allergies and their types?", "sql": "SELECT allergy ,  allergytype FROM Allergy_type", "example": {"db_id": "allergy_1", "query": "SELECT allergy ,  allergytype FROM Allergy_type", "query_toks": ["SELECT", "allergy", ",", "allergytype", "FROM", "Allergy_type"], "query_toks_no_value": ["select", "allergy", ",", "allergytype", "from", "allergy_type"], "question": "What are the allergies and their types?", "question_toks": ["What", "are", "the", "allergies", "and", "their", "types", "?"], "dataset_name": "spider", "guid": 3632}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | Show the name of buildings that do not have any institution.", "sql": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)", "example": {"db_id": "protein_institute", "query": "SELECT name FROM building WHERE building_id NOT IN (SELECT building_id FROM institution)", "query_toks": ["SELECT", "name", "FROM", "building", "WHERE", "building_id", "NOT", "IN", "(", "SELECT", "building_id", "FROM", "institution", ")"], "query_toks_no_value": ["select", "name", "from", "building", "where", "building_id", "not", "in", "(", "select", "building_id", "from", "institution", ")"], "question": "Show the name of buildings that do not have any institution.", "question_toks": ["Show", "the", "name", "of", "buildings", "that", "do", "not", "have", "any", "institution", "."], "dataset_name": "spider", "guid": 3633}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | How many kinds of enzymes are there?", "sql": "SELECT COUNT(*) FROM enzyme", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT count(*) FROM enzyme", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "enzyme"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "enzyme"], "question": "How many kinds of enzymes are there?", "question_toks": ["How", "many", "kinds", "of", "enzymes", "are", "there", "?"], "dataset_name": "spider", "guid": 3634}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Count the number of high schoolers.", "sql": "SELECT count(*) FROM Highschooler", "example": {"db_id": "network_1", "query": "SELECT count(*) FROM Highschooler", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Highschooler"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "highschooler"], "question": "Count the number of high schoolers.", "question_toks": ["Count", "the", "number", "of", "high", "schoolers", "."], "dataset_name": "spider", "guid": 3635}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Show the name for regions not affected.", "sql": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)", "example": {"db_id": "storm_record", "query": "SELECT region_name FROM region WHERE region_id NOT IN (SELECT region_id FROM affected_region)", "query_toks": ["SELECT", "region_name", "FROM", "region", "WHERE", "region_id", "NOT", "IN", "(", "SELECT", "region_id", "FROM", "affected_region", ")"], "query_toks_no_value": ["select", "region_name", "from", "region", "where", "region_id", "not", "in", "(", "select", "region_id", "from", "affected_region", ")"], "question": "Show the name for regions not affected.", "question_toks": ["Show", "the", "name", "for", "regions", "not", "affected", "."], "dataset_name": "spider", "guid": 3636}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the first name and age of students who have a pet.", "sql": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "example": {"db_id": "pets_1", "query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid", "query_toks": ["SELECT", "DISTINCT", "T1.fname", ",", "T1.age", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid"], "question": "Find the first name and age of students who have a pet.", "question_toks": ["Find", "the", "first", "name", "and", "age", "of", "students", "who", "have", "a", "pet", "."], "dataset_name": "spider", "guid": 3637}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What are the ids of the students who do not own cats as pets?", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "example": {"db_id": "pets_1", "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "query_toks": ["SELECT", "stuid", "FROM", "student", "EXCEPT", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'"], "query_toks_no_value": ["select", "stuid", "from", "student", "except", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value"], "question": "What are the ids of the students who do not own cats as pets?", "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "do", "not", "own", "cats", "as", "pets", "?"], "dataset_name": "spider", "guid": 3638}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the names of the regions in alphabetical order?", "sql": "SELECT region_name FROM region ORDER BY region_name", "example": {"db_id": "storm_record", "query": "SELECT region_name FROM region ORDER BY region_name", "query_toks": ["SELECT", "region_name", "FROM", "region", "ORDER", "BY", "region_name"], "query_toks_no_value": ["select", "region_name", "from", "region", "order", "by", "region_name"], "question": "What are the names of the regions in alphabetical order?", "question_toks": ["What", "are", "the", "names", "of", "the", "regions", "in", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 3639}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Give the name of the student with the most likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "network_1", "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "Likes", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give the name of the student with the most likes.", "question_toks": ["Give", "the", "name", "of", "the", "student", "with", "the", "most", "likes", "."], "dataset_name": "spider", "guid": 3640}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the average age for all people in the table?", "sql": "SELECT avg(age) FROM Person", "example": {"db_id": "network_2", "query": "SELECT avg(age) FROM Person", "query_toks": ["SELECT", "avg", "(", "age", ")", "FROM", "Person"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "person"], "question": "What is the average age for all people in the table?", "question_toks": ["What", "is", "the", "average", "age", "for", "all", "people", "in", "the", "table", "?"], "dataset_name": "spider", "guid": 3641}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Show the name of the shop that has the most kind of devices in stock.", "sql": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "device", "query": "SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID  =  T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Shop_Name", "FROM", "stock", "AS", "T1", "JOIN", "shop", "AS", "T2", "ON", "T1.Shop_ID", "=", "T2.Shop_ID", "GROUP", "BY", "T1.Shop_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "shop_name", "from", "stock", "as", "t1", "join", "shop", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "group", "by", "t1", ".", "shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the name of the shop that has the most kind of devices in stock.", "question_toks": ["Show", "the", "name", "of", "the", "shop", "that", "has", "the", "most", "kind", "of", "devices", "in", "stock", "."], "dataset_name": "spider", "guid": 3642}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the names and trade names of the medcines that are FDA approved?", "sql": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'", "query_toks": ["SELECT", "name", ",", "trade_name", "FROM", "medicine", "WHERE", "FDA_approved", "=", "'Yes", "'"], "query_toks_no_value": ["select", "name", ",", "trade_name", "from", "medicine", "where", "fda_approved", "=", "value"], "question": "What are the names and trade names of the medcines that are FDA approved?", "question_toks": ["What", "are", "the", "names", "and", "trade", "names", "of", "the", "medcines", "that", "are", "FDA", "approved", "?"], "dataset_name": "spider", "guid": 3643}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Which grades have 4 or more high schoolers?", "sql": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "example": {"db_id": "network_1", "query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4", "query_toks": ["SELECT", "grade", "FROM", "Highschooler", "GROUP", "BY", "grade", "HAVING", "count", "(", "*", ")", ">", "=", "4"], "query_toks_no_value": ["select", "grade", "from", "highschooler", "group", "by", "grade", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which grades have 4 or more high schoolers?", "question_toks": ["Which", "grades", "have", "4", "or", "more", "high", "schoolers", "?"], "dataset_name": "spider", "guid": 3644}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the maximum weight for each type of pet. List the maximum weight and pet type.", "sql": "SELECT max(weight), petType FROM pets GROUP BY petType", "example": {"db_id": "pets_1", "query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType", "query_toks": ["SELECT", "max", "(", "weight", ")", ",", "petType", "FROM", "pets", "GROUP", "BY", "petType"], "query_toks_no_value": ["select", "max", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype"], "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "question_toks": ["Find", "the", "maximum", "weight", "for", "each", "type", "of", "pet", ".", "List", "the", "maximum", "weight", "and", "pet", "type", "."], "dataset_name": "spider", "guid": 3645}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?", "sql": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'", "query_toks": ["SELECT", "product", ",", "chromosome", ",", "porphyria", "FROM", "enzyme", "WHERE", "LOCATION", "=", "'Cytosol", "'"], "query_toks_no_value": ["select", "product", ",", "chromosome", ",", "porphyria", "from", "enzyme", "where", "location", "=", "value"], "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?", "question_toks": ["What", "is", "the", "product", ",", "chromosome", "and", "porphyria", "related", "to", "the", "enzymes", "which", "take", "effect", "at", "the", "location", "'Cytosol", "'", "?"], "dataset_name": "spider", "guid": 3646}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How many type of jobs do they have?", "sql": "SELECT count(DISTINCT job) FROM Person", "example": {"db_id": "network_2", "query": "SELECT count(DISTINCT job) FROM Person", "query_toks": ["SELECT", "count", "(", "DISTINCT", "job", ")", "FROM", "Person"], "query_toks_no_value": ["select", "count", "(", "distinct", "job", ")", "from", "person"], "question": "How many type of jobs do they have?", "question_toks": ["How", "many", "type", "of", "jobs", "do", "they", "have", "?"], "dataset_name": "spider", "guid": 3647}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | List the names of the dogs of the rarest breed and the treatment dates of them.", "sql": "SELECT T1.name , T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "example": {"db_id": "dog_kennels", "query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )", "query_toks": ["SELECT", "T1.name", ",", "T2.date_of_treatment", "FROM", "Dogs", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.dog_id", "=", "T2.dog_id", "WHERE", "T1.breed_code", "=", "(", "SELECT", "breed_code", "FROM", "Dogs", "GROUP", "BY", "breed_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "dog_id", "=", "t2", ".", "dog_id", "where", "t1", ".", "breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value", ")"], "question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "question_toks": ["List", "the", "names", "of", "the", "dogs", "of", "the", "rarest", "breed", "and", "the", "treatment", "dates", "of", "them", "."], "dataset_name": "spider", "guid": 3648}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?", "sql": "SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name , T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"", "query_toks": ["SELECT", "T3.staff_first_name", ",", "T3.staff_last_name", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "JOIN", "staff", "AS", "T3", "ON", "T1.product_id", "=", "T2.product_id", "AND", "T1.reported_by_staff_id", "=", "T3.staff_id", "WHERE", "T2.product_name", "=", "``", "rem", "''", "EXCEPT", "SELECT", "T3.staff_first_name", ",", "T3.staff_last_name", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "JOIN", "staff", "AS", "T3", "ON", "T1.product_id", "=", "T2.product_id", "AND", "T1.reported_by_staff_id", "=", "T3.staff_id", "WHERE", "T2.product_name", "=", "``", "aut", "''"], "query_toks_no_value": ["select", "t3", ".", "staff_first_name", ",", "t3", ".", "staff_last_name", "from", "problems", "as", "t1", "join", "product", "as", "t2", "join", "staff", "as", "t3", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "and", "t1", ".", "reported_by_staff_id", "=", "t3", ".", "staff_id", "where", "t2", ".", "product_name", "=", "value", "except", "select", "t3", ".", "staff_first_name", ",", "t3", ".", "staff_last_name", "from", "problems", "as", "t1", "join", "product", "as", "t2", "join", "staff", "as", "t3", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "and", "t1", ".", "reported_by_staff_id", "=", "t3", ".", "staff_id", "where", "t2", ".", "product_name", "=", "value"], "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?", "question_toks": ["Find", "the", "first", "and", "last", "name", "of", "the", "staff", "members", "who", "reported", "problems", "from", "the", "product", "``", "rem", "''", "but", "not", "``", "aut", "''", "?"], "dataset_name": "spider", "guid": 3649}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | How many pets have a greater weight than 10?", "sql": "SELECT count(*) FROM pets WHERE weight  >  10", "example": {"db_id": "pets_1", "query": "SELECT count(*) FROM pets WHERE weight  >  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "pets", "WHERE", "weight", ">", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "value"], "question": "How many pets have a greater weight than 10?", "question_toks": ["How", "many", "pets", "have", "a", "greater", "weight", "than", "10", "?"], "dataset_name": "spider", "guid": 3650}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which first names are used for professionals or owners but are not used as dog names?", "sql": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "example": {"db_id": "dog_kennels", "query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs", "query_toks": ["SELECT", "first_name", "FROM", "Professionals", "UNION", "SELECT", "first_name", "FROM", "Owners", "EXCEPT", "SELECT", "name", "FROM", "Dogs"], "query_toks_no_value": ["select", "first_name", "from", "professionals", "union", "select", "first_name", "from", "owners", "except", "select", "name", "from", "dogs"], "question": "Which first names are used for professionals or owners but are not used as dog names?", "question_toks": ["Which", "first", "names", "are", "used", "for", "professionals", "or", "owners", "but", "are", "not", "used", "as", "dog", "names", "?"], "dataset_name": "spider", "guid": 3651}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What is the oldest log id and its corresponding problem id?", "sql": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date ASC LIMIT 1", "example": {"db_id": "tracking_software_problems", "query": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1", "query_toks": ["SELECT", "problem_log_id", ",", "problem_id", "FROM", "problem_log", "ORDER", "BY", "log_entry_date", "LIMIT", "1"], "query_toks_no_value": ["select", "problem_log_id", ",", "problem_id", "from", "problem_log", "order", "by", "log_entry_date", "limit", "value"], "question": "What is the oldest log id and its corresponding problem id?", "question_toks": ["What", "is", "the", "oldest", "log", "id", "and", "its", "corresponding", "problem", "id", "?"], "dataset_name": "spider", "guid": 3652}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What are the names of high schoolers who both have friends and are liked?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id", "example": {"db_id": "network_1", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "query_toks": ["SELECT", "T2.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "INTERSECT", "SELECT", "T2.name", "FROM", "Likes", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.liked_id", "=", "T2.id"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "intersect", "select", "t2", ".", "name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "liked_id", "=", "t2", ".", "id"], "question": "What are the names of high schoolers who both have friends and are liked?", "question_toks": ["What", "are", "the", "names", "of", "high", "schoolers", "who", "both", "have", "friends", "and", "are", "liked", "?"], "dataset_name": "spider", "guid": 3653}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids.", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"", "query_toks": ["SELECT", "product_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Christop", "''", "AND", "T2.staff_last_name", "=", "``", "Berge", "''", "INTERSECT", "SELECT", "product_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.closure_authorised_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Ashley", "''", "AND", "T2.staff_last_name", "=", "``", "Medhurst", "''"], "query_toks_no_value": ["select", "product_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value", "and", "t2", ".", "staff_last_name", "=", "value", "intersect", "select", "product_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "closure_authorised_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value", "and", "t2", ".", "staff_last_name", "=", "value"], "question": "For which product was there a problem reported by Christop Berge, with closure authorised by Ashley Medhurst? Return the product ids.", "question_toks": ["For", "which", "product", "was", "there", "a", "problem", "reported", "by", "Christop", "Berge", ",", "with", "closure", "authorised", "by", "Ashley", "Medhurst", "?", "Return", "the", "product", "ids", "."], "dataset_name": "spider", "guid": 3654}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Which city does the student whose last name is \"Kim\" live in?", "sql": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"", "example": {"db_id": "allergy_1", "query": "SELECT city_code FROM Student WHERE LName  =  \"Kim\"", "query_toks": ["SELECT", "city_code", "FROM", "Student", "WHERE", "LName", "=", "``", "Kim", "''"], "query_toks_no_value": ["select", "city_code", "from", "student", "where", "lname", "=", "value"], "question": "Which city does the student whose last name is \"Kim\" live in?", "question_toks": ["Which", "city", "does", "the", "student", "whose", "last", "name", "is", "``", "Kim", "''", "live", "in", "?"], "dataset_name": "spider", "guid": 3655}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How many different jobs are listed?", "sql": "SELECT count(DISTINCT job) FROM Person", "example": {"db_id": "network_2", "query": "SELECT count(DISTINCT job) FROM Person", "query_toks": ["SELECT", "count", "(", "DISTINCT", "job", ")", "FROM", "Person"], "query_toks_no_value": ["select", "count", "(", "distinct", "job", ")", "from", "person"], "question": "How many different jobs are listed?", "question_toks": ["How", "many", "different", "jobs", "are", "listed", "?"], "dataset_name": "spider", "guid": 3656}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names of the people who are older 40 but no friends under age 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "example": {"db_id": "network_2", "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "query_toks": ["SELECT", "T1.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "IN", "(", "SELECT", "name", "FROM", "Person", "WHERE", "age", ">", "40", ")", "EXCEPT", "SELECT", "T1.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "IN", "(", "SELECT", "name", "FROM", "Person", "WHERE", "age", "<", "30", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "in", "(", "select", "name", "from", "person", "where", "age", ">", "value", ")", "except", "select", "t1", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "in", "(", "select", "name", "from", "person", "where", "age", "<", "value", ")"], "question": "What are the names of the people who are older 40 but no friends under age 30?", "question_toks": ["What", "are", "the", "names", "of", "the", "people", "who", "are", "older", "40", "but", "no", "friends", "under", "age", "30", "?"], "dataset_name": "spider", "guid": 3657}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What is the average age for all students who do not own any pets ?", "sql": "select avg(age) from student where stuid not in (select stuid from has_pet)", "example": {"db_id": "pets_1", "query": "select avg(age) from student where stuid not in (select stuid from has_pet)", "query_toks": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")"], "question": "What is the average age for all students who do not own any pets ?", "question_toks": ["What", "is", "the", "average", "age", "for", "all", "students", "who", "do", "not", "own", "any", "pets", "?"], "dataset_name": "spider", "guid": 3658}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What is the average age of the dogs who have gone through any treatments?", "sql": "SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments)", "example": {"db_id": "dog_kennels", "query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )", "query_toks": ["SELECT", "avg", "(", "age", ")", "FROM", "Dogs", "WHERE", "dog_id", "IN", "(", "SELECT", "dog_id", "FROM", "Treatments", ")"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")"], "question": "What is the average age of the dogs who have gone through any treatments?", "question_toks": ["What", "is", "the", "average", "age", "of", "the", "dogs", "who", "have", "gone", "through", "any", "treatments", "?"], "dataset_name": "spider", "guid": 3659}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | HOw many engineers are older than 30?", "sql": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'", "example": {"db_id": "network_2", "query": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Person", "WHERE", "age", ">", "30", "AND", "job", "=", "'engineer", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "person", "where", "age", ">", "value", "and", "job", "=", "value"], "question": "HOw many engineers are older than 30?", "question_toks": ["HOw", "many", "engineers", "are", "older", "than", "30", "?"], "dataset_name": "spider", "guid": 3660}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Return the names of all regions other than Denmark.", "sql": "SELECT region_name FROM region WHERE region_name != 'Denmark'", "example": {"db_id": "storm_record", "query": "SELECT region_name FROM region WHERE region_name != 'Denmark'", "query_toks": ["SELECT", "region_name", "FROM", "region", "WHERE", "region_name", "!", "=", "'Denmark", "'"], "query_toks_no_value": ["select", "region_name", "from", "region", "where", "region_name", "!", "=", "value"], "question": "Return the names of all regions other than Denmark.", "question_toks": ["Return", "the", "names", "of", "all", "regions", "other", "than", "Denmark", "."], "dataset_name": "spider", "guid": 3661}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show the names of students who have a grade higher than 5 and have at least 2 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "example": {"db_id": "network_1", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "WHERE", "T2.grade", ">", "5", "GROUP", "BY", "T1.student_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "where", "t2", ".", "grade", ">", "value", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "question_toks": ["Show", "the", "names", "of", "students", "who", "have", "a", "grade", "higher", "than", "5", "and", "have", "at", "least", "2", "friends", "."], "dataset_name": "spider", "guid": 3662}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "sql": "SELECT first_name , last_name , email_address FROM Owners WHERE state LIKE '%North%'", "example": {"db_id": "dog_kennels", "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "email_address", "FROM", "Owners", "WHERE", "state", "LIKE", "'", "%", "North", "%", "'"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "value"], "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "question_toks": ["Which", "owners", "live", "in", "the", "state", "whose", "name", "contains", "the", "substring", "'North", "'", "?", "List", "his", "first", "name", ",", "last", "name", "and", "email", "."], "dataset_name": "spider", "guid": 3663}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many distinct allergies are there?", "sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type", "example": {"db_id": "allergy_1", "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type", "query_toks": ["SELECT", "count", "(", "DISTINCT", "allergytype", ")", "FROM", "Allergy_type"], "query_toks_no_value": ["select", "count", "(", "distinct", "allergytype", ")", "from", "allergy_type"], "question": "How many distinct allergies are there?", "question_toks": ["How", "many", "distinct", "allergies", "are", "there", "?"], "dataset_name": "spider", "guid": 3664}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names of all friends who are from New York?", "sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'", "example": {"db_id": "network_2", "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'", "query_toks": ["SELECT", "T2.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T1.city", "=", "'new", "york", "city", "'"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t1", ".", "city", "=", "value"], "question": "What are the names of all friends who are from New York?", "question_toks": ["What", "are", "the", "names", "of", "all", "friends", "who", "are", "from", "New", "York", "?"], "dataset_name": "spider", "guid": 3665}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the full names of all students", "sql": "SELECT Fname ,  Lname FROM Student", "example": {"db_id": "allergy_1", "query": "SELECT Fname ,  Lname FROM Student", "query_toks": ["SELECT", "Fname", ",", "Lname", "FROM", "Student"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student"], "question": "What are the full names of all students", "question_toks": ["What", "are", "the", "full", "names", "of", "all", "students"], "dataset_name": "spider", "guid": 3666}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What grade is Kyle in?", "sql": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "example": {"db_id": "network_1", "query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\"", "query_toks": ["SELECT", "grade", "FROM", "Highschooler", "WHERE", "name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "grade", "from", "highschooler", "where", "name", "=", "value"], "question": "What grade is Kyle in?", "question_toks": ["What", "grade", "is", "Kyle", "in", "?"], "dataset_name": "spider", "guid": 3667}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.", "sql": "SELECT T1.Allergy, T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = \"Lisa\" ORDER BY T1.Allergy", "example": {"db_id": "allergy_1", "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy", "query_toks": ["SELECT", "T1.Allergy", ",", "T1.AllergyType", "FROM", "Allergy_type", "AS", "T1", "JOIN", "Has_allergy", "AS", "T2", "ON", "T1.Allergy", "=", "T2.Allergy", "JOIN", "Student", "AS", "T3", "ON", "T3.StuID", "=", "T2.StuID", "WHERE", "T3.Fname", "=", "``", "Lisa", "''", "ORDER", "BY", "T1.Allergy"], "query_toks_no_value": ["select", "t1", ".", "allergy", ",", "t1", ".", "allergytype", "from", "allergy_type", "as", "t1", "join", "has_allergy", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "join", "student", "as", "t3", "on", "t3", ".", "stuid", "=", "t2", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "order", "by", "t1", ".", "allergy"], "question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.", "question_toks": ["What", "are", "the", "allergies", "the", "girl", "named", "Lisa", "has", "?", "And", "what", "are", "the", "types", "of", "them", "?", "Order", "the", "result", "by", "allergy", "names", "."], "dataset_name": "spider", "guid": 3668}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What are the ids of the problems that are from the product \"voluptatem\" and are reported after 1995?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"", "query_toks": ["SELECT", "T1.problem_id", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "WHERE", "T2.product_name", "=", "``", "voluptatem", "''", "AND", "T1.date_problem_reported", ">", "``", "1995", "''"], "query_toks_no_value": ["select", "t1", ".", "problem_id", "from", "problems", "as", "t1", "join", "product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t2", ".", "product_name", "=", "value", "and", "t1", ".", "date_problem_reported", ">", "value"], "question": "What are the ids of the problems that are from the product \"voluptatem\" and are reported after 1995?", "question_toks": ["What", "are", "the", "ids", "of", "the", "problems", "that", "are", "from", "the", "product", "``", "voluptatem", "''", "and", "are", "reported", "after", "1995", "?"], "dataset_name": "spider", "guid": 3669}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the distinct first names and cities of the students who have allergy either to milk or to cat?", "sql": "SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = \"Milk\" OR T2.Allergy = \"Cat\"", "example": {"db_id": "allergy_1", "query": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"", "query_toks": ["SELECT", "DISTINCT", "T1.fname", ",", "T1.city_code", "FROM", "Student", "AS", "T1", "JOIN", "Has_Allergy", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T2.Allergy", "=", "``", "Milk", "''", "OR", "T2.Allergy", "=", "``", "Cat", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "city_code", "from", "student", "as", "t1", "join", "has_allergy", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t2", ".", "allergy", "=", "value", "or", "t2", ".", "allergy", "=", "value"], "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?", "question_toks": ["What", "are", "the", "distinct", "first", "names", "and", "cities", "of", "the", "students", "who", "have", "allergy", "either", "to", "milk", "or", "to", "cat", "?"], "dataset_name": "spider", "guid": 3670}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "sql": "SELECT professional_id , last_name , cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id , T1.last_name , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) > 2", "example": {"db_id": "dog_kennels", "query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2", "query_toks": ["SELECT", "professional_id", ",", "last_name", ",", "cell_number", "FROM", "Professionals", "WHERE", "state", "=", "'Indiana", "'", "UNION", "SELECT", "T1.professional_id", ",", "T1.last_name", ",", "T1.cell_number", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "value", "union", "select", "t1", ".", "professional_id", ",", "t1", ".", "last_name", ",", "t1", ".", "cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "question_toks": ["Which", "professionals", "live", "in", "the", "state", "of", "Indiana", "or", "have", "done", "treatment", "on", "more", "than", "2", "treatments", "?", "List", "his", "or", "her", "id", ",", "last", "name", "and", "cell", "phone", "."], "dataset_name": "spider", "guid": 3671}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How many different cities are they from?", "sql": "SELECT count(DISTINCT city) FROM Person", "example": {"db_id": "network_2", "query": "SELECT count(DISTINCT city) FROM Person", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "Person"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "person"], "question": "How many different cities are they from?", "question_toks": ["How", "many", "different", "cities", "are", "they", "from", "?"], "dataset_name": "spider", "guid": 3672}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What cities do students live in?", "sql": "SELECT DISTINCT city_code FROM Student", "example": {"db_id": "allergy_1", "query": "SELECT DISTINCT city_code FROM Student", "query_toks": ["SELECT", "DISTINCT", "city_code", "FROM", "Student"], "query_toks_no_value": ["select", "distinct", "city_code", "from", "student"], "question": "What cities do students live in?", "question_toks": ["What", "cities", "do", "students", "live", "in", "?"], "dataset_name": "spider", "guid": 3673}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show the names of high schoolers who have likes, and numbers of likes for each.", "sql": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "example": {"db_id": "network_1", "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "Likes", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id"], "question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "question_toks": ["Show", "the", "names", "of", "high", "schoolers", "who", "have", "likes", ",", "and", "numbers", "of", "likes", "for", "each", "."], "dataset_name": "spider", "guid": 3674}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What are the ids of the problems which are reported after 1978-06-26?", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"", "query_toks": ["SELECT", "problem_id", "FROM", "problems", "WHERE", "date_problem_reported", ">", "``", "1978-06-26", "''"], "query_toks_no_value": ["select", "problem_id", "from", "problems", "where", "date_problem_reported", ">", "value"], "question": "What are the ids of the problems which are reported after 1978-06-26?", "question_toks": ["What", "are", "the", "ids", "of", "the", "problems", "which", "are", "reported", "after", "1978-06-26", "?"], "dataset_name": "spider", "guid": 3675}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Count the number of different affected regions.", "sql": "SELECT COUNT(DISTINCT region_id) FROM affected_region", "example": {"db_id": "storm_record", "query": "SELECT count(DISTINCT region_id) FROM affected_region", "query_toks": ["SELECT", "count", "(", "DISTINCT", "region_id", ")", "FROM", "affected_region"], "query_toks_no_value": ["select", "count", "(", "distinct", "region_id", ")", "from", "affected_region"], "question": "Count the number of different affected regions.", "question_toks": ["Count", "the", "number", "of", "different", "affected", "regions", "."], "dataset_name": "spider", "guid": 3676}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the name, age, and job title of persons who are friends with Alice for the longest years.", "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "example": {"db_id": "network_2", "query": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "query_toks": ["SELECT", "T1.name", ",", "T1.age", ",", "T1.job", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "=", "'Alice", "'", "AND", "T2.year", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "PersonFriend", "WHERE", "friend", "=", "'Alice", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "age", ",", "t1", ".", "job", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "=", "value", "and", "t2", ".", "year", "=", "(", "select", "max", "(", "year", ")", "from", "personfriend", "where", "friend", "=", "value", ")"], "question": "Find the name, age, and job title of persons who are friends with Alice for the longest years.", "question_toks": ["Find", "the", "name", ",", "age", ",", "and", "job", "title", "of", "persons", "who", "are", "friends", "with", "Alice", "for", "the", "longest", "years", "."], "dataset_name": "spider", "guid": 3677}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the name and partition id for users who tweeted less than twice.", "sql": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2", "example": {"db_id": "twitter_1", "query": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2", "query_toks": ["SELECT", "T1.name", ",", "T1.partitionid", "FROM", "user_profiles", "AS", "T1", "JOIN", "tweets", "AS", "T2", "ON", "T1.uid", "=", "T2.uid", "GROUP", "BY", "T2.uid", "HAVING", "count", "(", "*", ")", "<", "2"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "partitionid", "from", "user_profiles", "as", "t1", "join", "tweets", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "uid", "group", "by", "t2", ".", "uid", "having", "count", "(", "*", ")", "<", "value"], "question": "Find the name and partition id for users who tweeted less than twice.", "question_toks": ["Find", "the", "name", "and", "partition", "id", "for", "users", "who", "tweeted", "less", "than", "twice", "."], "dataset_name": "spider", "guid": 3678}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | List the names and the locations that the enzymes can make an effect.", "sql": "SELECT name ,  LOCATION FROM enzyme", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT name ,  LOCATION FROM enzyme", "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "enzyme"], "query_toks_no_value": ["select", "name", ",", "location", "from", "enzyme"], "question": "List the names and the locations that the enzymes can make an effect.", "question_toks": ["List", "the", "names", "and", "the", "locations", "that", "the", "enzymes", "can", "make", "an", "effect", "."], "dataset_name": "spider", "guid": 3679}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many allergies are there?", "sql": "SELECT count(DISTINCT allergy) FROM Allergy_type", "example": {"db_id": "allergy_1", "query": "SELECT count(DISTINCT allergy) FROM Allergy_type", "query_toks": ["SELECT", "count", "(", "DISTINCT", "allergy", ")", "FROM", "Allergy_type"], "query_toks_no_value": ["select", "count", "(", "distinct", "allergy", ")", "from", "allergy_type"], "question": "How many allergies are there?", "question_toks": ["How", "many", "allergies", "are", "there", "?"], "dataset_name": "spider", "guid": 3680}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | How many trains have 'Express' in their names?", "sql": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"", "example": {"db_id": "station_weather", "query": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "train", "WHERE", "name", "LIKE", "``", "%", "Express", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "train", "where", "name", "like", "value"], "question": "How many trains have 'Express' in their names?", "question_toks": ["How", "many", "trains", "have", "'Express", "'", "in", "their", "names", "?"], "dataset_name": "spider", "guid": 3681}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What is the id and name of the enzyme that can interact with the most medicines as an activator?", "sql": "SELECT T1.id , T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activator' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "enzyme", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T1.id", "=", "T2.enzyme_id", "WHERE", "T2.interaction_type", "=", "'activitor", "'", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "enzyme", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "enzyme_id", "where", "t2", ".", "interaction_type", "=", "value", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?", "question_toks": ["What", "is", "the", "id", "and", "name", "of", "the", "enzyme", "that", "can", "interact", "with", "the", "most", "medicines", "as", "an", "activator", "?"], "dataset_name": "spider", "guid": 3682}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | Which enzyme names have the substring \"ALA\"?", "sql": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"", "query_toks": ["SELECT", "name", "FROM", "enzyme", "WHERE", "name", "LIKE", "``", "%", "ALA", "%", "''"], "query_toks_no_value": ["select", "name", "from", "enzyme", "where", "name", "like", "value"], "question": "Which enzyme names have the substring \"ALA\"?", "question_toks": ["Which", "enzyme", "names", "have", "the", "substring", "``", "ALA", "''", "?"], "dataset_name": "spider", "guid": 3683}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are all the friends of Alice who are female?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'", "example": {"db_id": "network_2", "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'", "query_toks": ["SELECT", "T2.friend", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T2.name", "=", "'Alice", "'", "AND", "T1.gender", "=", "'female", "'"], "query_toks_no_value": ["select", "t2", ".", "friend", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "gender", "=", "value"], "question": "What are all the friends of Alice who are female?", "question_toks": ["What", "are", "all", "the", "friends", "of", "Alice", "who", "are", "female", "?"], "dataset_name": "spider", "guid": 3684}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Who is the youngest male?", "sql": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )", "example": {"db_id": "network_2", "query": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )", "query_toks": ["SELECT", "name", "FROM", "Person", "WHERE", "gender", "=", "'male", "'", "AND", "age", "=", "(", "SELECT", "min", "(", "age", ")", "FROM", "person", "WHERE", "gender", "=", "'male", "'", ")"], "query_toks_no_value": ["select", "name", "from", "person", "where", "gender", "=", "value", "and", "age", "=", "(", "select", "min", "(", "age", ")", "from", "person", "where", "gender", "=", "value", ")"], "question": "Who is the youngest male?", "question_toks": ["Who", "is", "the", "youngest", "male", "?"], "dataset_name": "spider", "guid": 3685}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "dog_kennels", "query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.owner_id", ",", "T1.last_name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "JOIN", "Treatments", "AS", "T3", "ON", "T2.dog_id", "=", "T3.dog_id", "GROUP", "BY", "T1.owner_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "owner_id", ",", "t1", ".", "last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "join", "treatments", "as", "t3", "on", "t2", ".", "dog_id", "=", "t3", ".", "dog_id", "group", "by", "t1", ".", "owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "question_toks": ["Tell", "me", "the", "owner", "id", "and", "last", "name", "of", "the", "owner", "who", "spent", "the", "most", "on", "treatments", "of", "his", "or", "her", "dogs", "."], "dataset_name": "spider", "guid": 3686}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Return the text of tweets about the topic 'intern'.", "sql": "SELECT text FROM tweets WHERE text LIKE '%intern%'", "example": {"db_id": "twitter_1", "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'", "query_toks": ["SELECT", "text", "FROM", "tweets", "WHERE", "text", "LIKE", "'", "%", "intern", "%", "'"], "query_toks_no_value": ["select", "text", "from", "tweets", "where", "text", "like", "value"], "question": "Return the text of tweets about the topic 'intern'.", "question_toks": ["Return", "the", "text", "of", "tweets", "about", "the", "topic", "'intern", "'", "."], "dataset_name": "spider", "guid": 3687}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show name of all students who have some friends and also are liked by someone else.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "example": {"db_id": "network_1", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id", "query_toks": ["SELECT", "T2.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "INTERSECT", "SELECT", "T2.name", "FROM", "Likes", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.liked_id", "=", "T2.id"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "intersect", "select", "t2", ".", "name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "liked_id", "=", "t2", ".", "id"], "question": "Show name of all students who have some friends and also are liked by someone else.", "question_toks": ["Show", "name", "of", "all", "students", "who", "have", "some", "friends", "and", "also", "are", "liked", "by", "someone", "else", "."], "dataset_name": "spider", "guid": 3688}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Who are Bob's friends?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'", "example": {"db_id": "network_2", "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'", "query_toks": ["SELECT", "T2.friend", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T1.name", "=", "'Bob", "'"], "query_toks_no_value": ["select", "t2", ".", "friend", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t1", ".", "name", "=", "value"], "question": "Who are Bob's friends?", "question_toks": ["Who", "are", "Bob", "'s", "friends", "?"], "dataset_name": "spider", "guid": 3689}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | How many professionals did not operate any treatment on dogs?", "sql": "SELECT COUNT(*) FROM Professionals WHERE professional_id NOT IN (SELECT professional_id FROM Treatments)", "example": {"db_id": "dog_kennels", "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Professionals", "WHERE", "professional_id", "NOT", "IN", "(", "SELECT", "professional_id", "FROM", "Treatments", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professionals", "where", "professional_id", "not", "in", "(", "select", "professional_id", "from", "treatments", ")"], "question": "How many professionals did not operate any treatment on dogs?", "question_toks": ["How", "many", "professionals", "did", "not", "operate", "any", "treatment", "on", "dogs", "?"], "dataset_name": "spider", "guid": 3690}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the ages of all of Zach's friends who are in the longest relationship?", "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "example": {"db_id": "network_2", "query": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "query_toks": ["SELECT", "T1.age", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T2.name", "=", "'Zach", "'", "AND", "T2.year", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "PersonFriend", "WHERE", "name", "=", "'Zach", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "age", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t2", ".", "name", "=", "value", "and", "t2", ".", "year", "=", "(", "select", "max", "(", "year", ")", "from", "personfriend", "where", "name", "=", "value", ")"], "question": "What are the ages of all of Zach's friends who are in the longest relationship?", "question_toks": ["What", "are", "the", "ages", "of", "all", "of", "Zach", "'s", "friends", "who", "are", "in", "the", "longest", "relationship", "?"], "dataset_name": "spider", "guid": 3691}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Show the name for regions and the number of storms for each region.", "sql": "SELECT T1.region_name, COUNT(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id", "example": {"db_id": "storm_record", "query": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id", "query_toks": ["SELECT", "T1.region_name", ",", "count", "(", "*", ")", "FROM", "region", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "GROUP", "BY", "T1.region_id"], "query_toks_no_value": ["select", "t1", ".", "region_name", ",", "count", "(", "*", ")", "from", "region", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "group", "by", "t1", ".", "region_id"], "question": "Show the name for regions and the number of storms for each region.", "question_toks": ["Show", "the", "name", "for", "regions", "and", "the", "number", "of", "storms", "for", "each", "region", "."], "dataset_name": "spider", "guid": 3692}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | Which accelerator name contains substring \"Opera\"?", "sql": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"", "example": {"db_id": "browser_web", "query": "SELECT name FROM web_client_accelerator WHERE name LIKE \"%Opera%\"", "query_toks": ["SELECT", "name", "FROM", "web_client_accelerator", "WHERE", "name", "LIKE", "``", "%", "Opera", "%", "''"], "query_toks_no_value": ["select", "name", "from", "web_client_accelerator", "where", "name", "like", "value"], "question": "Which accelerator name contains substring \"Opera\"?", "question_toks": ["Which", "accelerator", "name", "contains", "substring", "``", "Opera", "''", "?"], "dataset_name": "spider", "guid": 3693}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Return the name of the high school student with the most friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "network_1", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the name of the high school student with the most friends.", "question_toks": ["Return", "the", "name", "of", "the", "high", "school", "student", "with", "the", "most", "friends", "."], "dataset_name": "spider", "guid": 3694}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What are the ids of high school students who do not have friends?", "sql": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "example": {"db_id": "network_1", "query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend", "query_toks": ["SELECT", "id", "FROM", "Highschooler", "EXCEPT", "SELECT", "student_id", "FROM", "Friend"], "query_toks_no_value": ["select", "id", "from", "highschooler", "except", "select", "student_id", "from", "friend"], "question": "What are the ids of high school students who do not have friends?", "question_toks": ["What", "are", "the", "ids", "of", "high", "school", "students", "who", "do", "not", "have", "friends", "?"], "dataset_name": "spider", "guid": 3695}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | How many distinct FDA approval statuses are there for the medicines?", "sql": "SELECT COUNT(DISTINCT fda_approved) FROM medicine", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT count(DISTINCT FDA_approved) FROM medicine", "query_toks": ["SELECT", "count", "(", "DISTINCT", "FDA_approved", ")", "FROM", "medicine"], "query_toks_no_value": ["select", "count", "(", "distinct", "fda_approved", ")", "from", "medicine"], "question": "How many distinct FDA approval statuses are there for the medicines?", "question_toks": ["How", "many", "distinct", "FDA", "approval", "statuses", "are", "there", "for", "the", "medicines", "?"], "dataset_name": "spider", "guid": 3696}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the weight of the youngest dog.", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "example": {"db_id": "pets_1", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "query_toks": ["SELECT", "weight", "FROM", "pets", "ORDER", "BY", "pet_age", "LIMIT", "1"], "query_toks_no_value": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "value"], "question": "Find the weight of the youngest dog.", "question_toks": ["Find", "the", "weight", "of", "the", "youngest", "dog", "."], "dataset_name": "spider", "guid": 3697}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What is the id of the problem log that is created most recently?", "sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1", "example": {"db_id": "tracking_software_problems", "query": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1", "query_toks": ["SELECT", "problem_log_id", "FROM", "problem_log", "ORDER", "BY", "log_entry_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "problem_log_id", "from", "problem_log", "order", "by", "log_entry_date", "desc", "limit", "value"], "question": "What is the id of the problem log that is created most recently?", "question_toks": ["What", "is", "the", "id", "of", "the", "problem", "log", "that", "is", "created", "most", "recently", "?"], "dataset_name": "spider", "guid": 3698}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | How many dogs went through any treatments?", "sql": "SELECT COUNT(DISTINCT dog_id) FROM Treatments", "example": {"db_id": "dog_kennels", "query": "SELECT count(DISTINCT dog_id) FROM Treatments", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dog_id", ")", "FROM", "Treatments"], "query_toks_no_value": ["select", "count", "(", "distinct", "dog_id", ")", "from", "treatments"], "question": "How many dogs went through any treatments?", "question_toks": ["How", "many", "dogs", "went", "through", "any", "treatments", "?"], "dataset_name": "spider", "guid": 3699}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What are the different carriers for devices, listed in alphabetical order?", "sql": "SELECT Carrier FROM device ORDER BY Carrier ASC", "example": {"db_id": "device", "query": "SELECT Carrier FROM device ORDER BY Carrier ASC", "query_toks": ["SELECT", "Carrier", "FROM", "device", "ORDER", "BY", "Carrier", "ASC"], "query_toks_no_value": ["select", "carrier", "from", "device", "order", "by", "carrier", "asc"], "question": "What are the different carriers for devices, listed in alphabetical order?", "question_toks": ["What", "are", "the", "different", "carriers", "for", "devices", ",", "listed", "in", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 3700}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the name of the user who has the largest number of followers.", "sql": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1", "example": {"db_id": "twitter_1", "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "user_profiles", "ORDER", "BY", "followers", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "user_profiles", "order", "by", "followers", "desc", "limit", "value"], "question": "Find the name of the user who has the largest number of followers.", "question_toks": ["Find", "the", "name", "of", "the", "user", "who", "has", "the", "largest", "number", "of", "followers", "."], "dataset_name": "spider", "guid": 3701}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"", "query_toks": ["SELECT", "product_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Dameon", "''", "AND", "T2.staff_last_name", "=", "``", "Frami", "''", "UNION", "SELECT", "product_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Jolie", "''", "AND", "T2.staff_last_name", "=", "``", "Weber", "''"], "query_toks_no_value": ["select", "product_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value", "and", "t2", ".", "staff_last_name", "=", "value", "union", "select", "product_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value", "and", "t2", ".", "staff_last_name", "=", "value"], "question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?", "question_toks": ["What", "are", "the", "id", "of", "problems", "reported", "by", "the", "staff", "named", "Dameon", "Frami", "or", "Jolie", "Weber", "?"], "dataset_name": "spider", "guid": 3702}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What are the ids of the problems which are reported before 1978-06-26?", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"", "query_toks": ["SELECT", "problem_id", "FROM", "problems", "WHERE", "date_problem_reported", "<", "``", "1978-06-26", "''"], "query_toks_no_value": ["select", "problem_id", "from", "problems", "where", "date_problem_reported", "<", "value"], "question": "What are the ids of the problems which are reported before 1978-06-26?", "question_toks": ["What", "are", "the", "ids", "of", "the", "problems", "which", "are", "reported", "before", "1978-06-26", "?"], "dataset_name": "spider", "guid": 3703}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show the number of high schoolers for each grade.", "sql": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "example": {"db_id": "network_1", "query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade", "query_toks": ["SELECT", "grade", ",", "count", "(", "*", ")", "FROM", "Highschooler", "GROUP", "BY", "grade"], "query_toks_no_value": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade"], "question": "Show the number of high schoolers for each grade.", "question_toks": ["Show", "the", "number", "of", "high", "schoolers", "for", "each", "grade", "."], "dataset_name": "spider", "guid": 3704}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Who is the person whose age is below 30?", "sql": "SELECT name FROM Person WHERE age  <  30", "example": {"db_id": "network_2", "query": "SELECT name FROM Person WHERE age  <  30", "query_toks": ["SELECT", "name", "FROM", "Person", "WHERE", "age", "<", "30"], "query_toks_no_value": ["select", "name", "from", "person", "where", "age", "<", "value"], "question": "Who is the person whose age is below 30?", "question_toks": ["Who", "is", "the", "person", "whose", "age", "is", "below", "30", "?"], "dataset_name": "spider", "guid": 3705}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Return the names of friends of the high school student Kyle.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "example": {"db_id": "network_1", "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "T3.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "JOIN", "Highschooler", "AS", "T3", "ON", "T1.friend_id", "=", "T3.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "join", "highschooler", "as", "t3", "on", "t1", ".", "friend_id", "=", "t3", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "Return the names of friends of the high school student Kyle.", "question_toks": ["Return", "the", "names", "of", "friends", "of", "the", "high", "school", "student", "Kyle", "."], "dataset_name": "spider", "guid": 3706}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.", "sql": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)", "example": {"db_id": "storm_record", "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)", "query_toks": ["SELECT", "sum", "(", "number_deaths", ")", ",", "sum", "(", "damage_millions_USD", ")", "FROM", "storm", "WHERE", "max_speed", ">", "(", "SELECT", "avg", "(", "max_speed", ")", "FROM", "storm", ")"], "query_toks_no_value": ["select", "sum", "(", "number_deaths", ")", ",", "sum", "(", "damage_millions_usd", ")", "from", "storm", "where", "max_speed", ">", "(", "select", "avg", "(", "max_speed", ")", "from", "storm", ")"], "question": "Return the total number of deaths and total damange in millions for storms that had a max speed greater than the average.", "question_toks": ["Return", "the", "total", "number", "of", "deaths", "and", "total", "damange", "in", "millions", "for", "storms", "that", "had", "a", "max", "speed", "greater", "than", "the", "average", "."], "dataset_name": "spider", "guid": 3707}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the first name and gender of student who have more than one pet.", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "example": {"db_id": "pets_1", "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.fname", ",", "T1.sex", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "GROUP", "BY", "T1.stuid", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "sex", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "group", "by", "t1", ".", "stuid", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the first name and gender of student who have more than one pet.", "question_toks": ["Find", "the", "first", "name", "and", "gender", "of", "student", "who", "have", "more", "than", "one", "pet", "."], "dataset_name": "spider", "guid": 3708}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | Show institution names along with the number of proteins for each institution.", "sql": "SELECT T1.institution , COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id", "example": {"db_id": "protein_institute", "query": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id", "query_toks": ["SELECT", "T1.institution", ",", "count", "(", "*", ")", "FROM", "institution", "AS", "T1", "JOIN", "protein", "AS", "T2", "ON", "T1.institution_id", "=", "T2.institution_id", "GROUP", "BY", "T1.institution_id"], "query_toks_no_value": ["select", "t1", ".", "institution", ",", "count", "(", "*", ")", "from", "institution", "as", "t1", "join", "protein", "as", "t2", "on", "t1", ".", "institution_id", "=", "t2", ".", "institution_id", "group", "by", "t1", ".", "institution_id"], "question": "Show institution names along with the number of proteins for each institution.", "question_toks": ["Show", "institution", "names", "along", "with", "the", "number", "of", "proteins", "for", "each", "institution", "."], "dataset_name": "spider", "guid": 3709}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the different allergy types?", "sql": "SELECT DISTINCT allergytype FROM Allergy_type", "example": {"db_id": "allergy_1", "query": "SELECT DISTINCT allergytype FROM Allergy_type", "query_toks": ["SELECT", "DISTINCT", "allergytype", "FROM", "Allergy_type"], "query_toks_no_value": ["select", "distinct", "allergytype", "from", "allergy_type"], "question": "What are the different allergy types?", "question_toks": ["What", "are", "the", "different", "allergy", "types", "?"], "dataset_name": "spider", "guid": 3710}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students have each different allergy?", "sql": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy", "example": {"db_id": "allergy_1", "query": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy", "query_toks": ["SELECT", "Allergy", ",", "count", "(", "*", ")", "FROM", "Has_allergy", "GROUP", "BY", "Allergy"], "query_toks_no_value": ["select", "allergy", ",", "count", "(", "*", ")", "from", "has_allergy", "group", "by", "allergy"], "question": "How many students have each different allergy?", "question_toks": ["How", "many", "students", "have", "each", "different", "allergy", "?"], "dataset_name": "spider", "guid": 3711}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are the cost and treatment type description of each treatment?", "sql": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code", "example": {"db_id": "dog_kennels", "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "query_toks": ["SELECT", "T1.cost_of_treatment", ",", "T2.treatment_type_description", "FROM", "Treatments", "AS", "T1", "JOIN", "treatment_types", "AS", "T2", "ON", "T1.treatment_type_code", "=", "T2.treatment_type_code"], "query_toks_no_value": ["select", "t1", ".", "cost_of_treatment", ",", "t2", ".", "treatment_type_description", "from", "treatments", "as", "t1", "join", "treatment_types", "as", "t2", "on", "t1", ".", "treatment_type_code", "=", "t2", ".", "treatment_type_code"], "question": "What are the cost and treatment type description of each treatment?", "question_toks": ["What", "are", "the", "cost", "and", "treatment", "type", "description", "of", "each", "treatment", "?"], "dataset_name": "spider", "guid": 3712}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | list the name, job title of all people ordered by their names.", "sql": "SELECT name ,  job FROM Person ORDER BY name", "example": {"db_id": "network_2", "query": "SELECT name ,  job FROM Person ORDER BY name", "query_toks": ["SELECT", "name", ",", "job", "FROM", "Person", "ORDER", "BY", "name"], "query_toks_no_value": ["select", "name", ",", "job", "from", "person", "order", "by", "name"], "question": "list the name, job title of all people ordered by their names.", "question_toks": ["list", "the", "name", ",", "job", "title", "of", "all", "people", "ordered", "by", "their", "names", "."], "dataset_name": "spider", "guid": 3713}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all allergy types.", "sql": "SELECT DISTINCT allergytype FROM Allergy_type", "example": {"db_id": "allergy_1", "query": "SELECT DISTINCT allergytype FROM Allergy_type", "query_toks": ["SELECT", "DISTINCT", "allergytype", "FROM", "Allergy_type"], "query_toks_no_value": ["select", "distinct", "allergytype", "from", "allergy_type"], "question": "Show all allergy types.", "question_toks": ["Show", "all", "allergy", "types", "."], "dataset_name": "spider", "guid": 3714}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students are affected by food related allergies?", "sql": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_type", "AS", "T2", "ON", "T1.allergy", "=", "T2.allergy", "WHERE", "T2.allergytype", "=", "``", "food", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "where", "t2", ".", "allergytype", "=", "value"], "question": "How many students are affected by food related allergies?", "question_toks": ["How", "many", "students", "are", "affected", "by", "food", "related", "allergies", "?"], "dataset_name": "spider", "guid": 3715}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | For each product which has problems, what are the number of problems and the product id?", "sql": "SELECT count(*) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id", "example": {"db_id": "tracking_software_problems", "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T2.product_id", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "GROUP", "BY", "T2.product_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "product_id", "from", "problems", "as", "t1", "join", "product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t2", ".", "product_id"], "question": "For each product which has problems, what are the number of problems and the product id?", "question_toks": ["For", "each", "product", "which", "has", "problems", ",", "what", "are", "the", "number", "of", "problems", "and", "the", "product", "id", "?"], "dataset_name": "spider", "guid": 3716}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the last names and ages of the students who are allergic to milk and cat?", "sql": "SELECT lname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\")", "example": {"db_id": "allergy_1", "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "query_toks": ["SELECT", "lname", ",", "age", "FROM", "Student", "WHERE", "StuID", "IN", "(", "SELECT", "StuID", "FROM", "Has_allergy", "WHERE", "Allergy", "=", "``", "Milk", "''", "INTERSECT", "SELECT", "StuID", "FROM", "Has_allergy", "WHERE", "Allergy", "=", "``", "Cat", "''", ")"], "query_toks_no_value": ["select", "lname", ",", "age", "from", "student", "where", "stuid", "in", "(", "select", "stuid", "from", "has_allergy", "where", "allergy", "=", "value", "intersect", "select", "stuid", "from", "has_allergy", "where", "allergy", "=", "value", ")"], "question": "What are the last names and ages of the students who are allergic to milk and cat?", "question_toks": ["What", "are", "the", "last", "names", "and", "ages", "of", "the", "students", "who", "are", "allergic", "to", "milk", "and", "cat", "?"], "dataset_name": "spider", "guid": 3717}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Who has a friend that is from new york city?", "sql": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'", "example": {"db_id": "network_2", "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'", "query_toks": ["SELECT", "T2.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T1.city", "=", "'new", "york", "city", "'"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t1", ".", "city", "=", "value"], "question": "Who has a friend that is from new york city?", "question_toks": ["Who", "has", "a", "friend", "that", "is", "from", "new", "york", "city", "?"], "dataset_name": "spider", "guid": 3718}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Return the names of the regions affected by storms that had a death count of at least 10.", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10", "example": {"db_id": "storm_record", "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10", "query_toks": ["SELECT", "T2.region_name", "FROM", "affected_region", "AS", "T1", "JOIN", "region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "JOIN", "storm", "AS", "T3", "ON", "T1.storm_id", "=", "T3.storm_id", "WHERE", "T3.number_deaths", ">", "=", "10"], "query_toks_no_value": ["select", "t2", ".", "region_name", "from", "affected_region", "as", "t1", "join", "region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "join", "storm", "as", "t3", "on", "t1", ".", "storm_id", "=", "t3", ".", "storm_id", "where", "t3", ".", "number_deaths", ">", "=", "value"], "question": "Return the names of the regions affected by storms that had a death count of at least 10.", "question_toks": ["Return", "the", "names", "of", "the", "regions", "affected", "by", "storms", "that", "had", "a", "death", "count", "of", "at", "least", "10", "."], "dataset_name": "spider", "guid": 3719}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "sql": "SELECT name FROM Dogs WHERE dog_id NOT IN (SELECT dog_id FROM Treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000)", "example": {"db_id": "dog_kennels", "query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )", "query_toks": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")"], "query_toks_no_value": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "value", ")"], "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "question_toks": ["What", "are", "the", "names", "of", "the", "dogs", "for", "which", "the", "owner", "has", "not", "spend", "more", "than", "1000", "for", "treatment", "?"], "dataset_name": "spider", "guid": 3720}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Which allergy type is most common?", "sql": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "allergy_1", "query": "SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "allergytype", "FROM", "Allergy_type", "GROUP", "BY", "allergytype", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "allergytype", "from", "allergy_type", "group", "by", "allergytype", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which allergy type is most common?", "question_toks": ["Which", "allergy", "type", "is", "most", "common", "?"], "dataset_name": "spider", "guid": 3721}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How old is the youngest person for each job?", "sql": "SELECT min(age) ,  job FROM Person GROUP BY job", "example": {"db_id": "network_2", "query": "SELECT min(age) ,  job FROM Person GROUP BY job", "query_toks": ["SELECT", "min", "(", "age", ")", ",", "job", "FROM", "Person", "GROUP", "BY", "job"], "query_toks_no_value": ["select", "min", "(", "age", ")", ",", "job", "from", "person", "group", "by", "job"], "question": "How old is the youngest person for each job?", "question_toks": ["How", "old", "is", "the", "youngest", "person", "for", "each", "job", "?"], "dataset_name": "spider", "guid": 3722}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | What is the partition id of the user named \"Iron Man\".", "sql": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'", "example": {"db_id": "twitter_1", "query": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'", "query_toks": ["SELECT", "partitionid", "FROM", "user_profiles", "WHERE", "name", "=", "'Iron", "Man", "'"], "query_toks_no_value": ["select", "partitionid", "from", "user_profiles", "where", "name", "=", "value"], "question": "What is the partition id of the user named \"Iron Man\".", "question_toks": ["What", "is", "the", "partition", "id", "of", "the", "user", "named", "``", "Iron", "Man", "''", "."], "dataset_name": "spider", "guid": 3723}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are each professional's first name and description of the treatment they have performed?", "sql": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code", "example": {"db_id": "dog_kennels", "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T3.treatment_type_description", "FROM", "professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "JOIN", "Treatment_types", "AS", "T3", "ON", "T2.treatment_type_code", "=", "T3.treatment_type_code"], "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t3", ".", "treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "join", "treatment_types", "as", "t3", "on", "t2", ".", "treatment_type_code", "=", "t3", ".", "treatment_type_code"], "question": "What are each professional's first name and description of the treatment they have performed?", "question_toks": ["What", "are", "each", "professional", "'s", "first", "name", "and", "description", "of", "the", "treatment", "they", "have", "performed", "?"], "dataset_name": "spider", "guid": 3724}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | How many friends does the high school student Kyle have?", "sql": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "example": {"db_id": "network_1", "query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "How many friends does the high school student Kyle have?", "question_toks": ["How", "many", "friends", "does", "the", "high", "school", "student", "Kyle", "have", "?"], "dataset_name": "spider", "guid": 3725}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What is the type of allergy Cat?", "sql": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"", "example": {"db_id": "allergy_1", "query": "SELECT allergytype FROM Allergy_type WHERE allergy  =  \"Cat\"", "query_toks": ["SELECT", "allergytype", "FROM", "Allergy_type", "WHERE", "allergy", "=", "``", "Cat", "''"], "query_toks_no_value": ["select", "allergytype", "from", "allergy_type", "where", "allergy", "=", "value"], "question": "What is the type of allergy Cat?", "question_toks": ["What", "is", "the", "type", "of", "allergy", "Cat", "?"], "dataset_name": "spider", "guid": 3726}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many advisors are there?", "sql": "SELECT count(DISTINCT advisor) FROM Student", "example": {"db_id": "allergy_1", "query": "SELECT count(DISTINCT advisor) FROM Student", "query_toks": ["SELECT", "count", "(", "DISTINCT", "advisor", ")", "FROM", "Student"], "query_toks_no_value": ["select", "count", "(", "distinct", "advisor", ")", "from", "student"], "question": "How many advisors are there?", "question_toks": ["How", "many", "advisors", "are", "there", "?"], "dataset_name": "spider", "guid": 3727}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the region names affected by the storm with a number of deaths of least 10?", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10", "example": {"db_id": "storm_record", "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10", "query_toks": ["SELECT", "T2.region_name", "FROM", "affected_region", "AS", "T1", "JOIN", "region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "JOIN", "storm", "AS", "T3", "ON", "T1.storm_id", "=", "T3.storm_id", "WHERE", "T3.number_deaths", ">", "=", "10"], "query_toks_no_value": ["select", "t2", ".", "region_name", "from", "affected_region", "as", "t1", "join", "region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "join", "storm", "as", "t3", "on", "t1", ".", "storm_id", "=", "t3", ".", "storm_id", "where", "t3", ".", "number_deaths", ">", "=", "value"], "question": "What are the region names affected by the storm with a number of deaths of least 10?", "question_toks": ["What", "are", "the", "region", "names", "affected", "by", "the", "storm", "with", "a", "number", "of", "deaths", "of", "least", "10", "?"], "dataset_name": "spider", "guid": 3728}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the names of enzymes whose product is not 'Heme'?", "sql": "SELECT name FROM enzyme WHERE product != 'Heme'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT name FROM enzyme WHERE product != 'Heme'", "query_toks": ["SELECT", "name", "FROM", "enzyme", "WHERE", "product", "!", "=", "'Heme", "'"], "query_toks_no_value": ["select", "name", "from", "enzyme", "where", "product", "!", "=", "value"], "question": "What are the names of enzymes whose product is not 'Heme'?", "question_toks": ["What", "are", "the", "names", "of", "enzymes", "whose", "product", "is", "not", "'Heme", "'", "?"], "dataset_name": "spider", "guid": 3729}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Find the name of the storm that affected both Afghanistan and Albania regions.", "sql": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania'", "example": {"db_id": "storm_record", "query": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'", "query_toks": ["SELECT", "T3.Name", "FROM", "affected_region", "AS", "T1", "JOIN", "region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "JOIN", "storm", "AS", "T3", "ON", "T1.storm_id", "=", "T3.storm_id", "WHERE", "T2.Region_name", "=", "'Afghanistan", "'", "INTERSECT", "SELECT", "T3.Name", "FROM", "affected_region", "AS", "T1", "JOIN", "region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "JOIN", "storm", "AS", "T3", "ON", "T1.storm_id", "=", "T3.storm_id", "WHERE", "T2.Region_name", "=", "'Albania", "'"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "affected_region", "as", "t1", "join", "region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "join", "storm", "as", "t3", "on", "t1", ".", "storm_id", "=", "t3", ".", "storm_id", "where", "t2", ".", "region_name", "=", "value", "intersect", "select", "t3", ".", "name", "from", "affected_region", "as", "t1", "join", "region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "join", "storm", "as", "t3", "on", "t1", ".", "storm_id", "=", "t3", ".", "storm_id", "where", "t2", ".", "region_name", "=", "value"], "question": "Find the name of the storm that affected both Afghanistan and Albania regions.", "question_toks": ["Find", "the", "name", "of", "the", "storm", "that", "affected", "both", "Afghanistan", "and", "Albania", "regions", "."], "dataset_name": "spider", "guid": 3730}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the id of users who are followed by Mary and Susan.", "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"", "example": {"db_id": "twitter_1", "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"", "query_toks": ["SELECT", "T2.f1", "FROM", "user_profiles", "AS", "T1", "JOIN", "follows", "AS", "T2", "ON", "T1.uid", "=", "T2.f2", "WHERE", "T1.name", "=", "``", "Mary", "''", "INTERSECT", "SELECT", "T2.f1", "FROM", "user_profiles", "AS", "T1", "JOIN", "follows", "AS", "T2", "ON", "T1.uid", "=", "T2.f2", "WHERE", "T1.name", "=", "``", "Susan", "''"], "query_toks_no_value": ["select", "t2", ".", "f1", "from", "user_profiles", "as", "t1", "join", "follows", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "f2", "where", "t1", ".", "name", "=", "value", "intersect", "select", "t2", ".", "f1", "from", "user_profiles", "as", "t1", "join", "follows", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "f2", "where", "t1", ".", "name", "=", "value"], "question": "Find the id of users who are followed by Mary and Susan.", "question_toks": ["Find", "the", "id", "of", "users", "who", "are", "followed", "by", "Mary", "and", "Susan", "."], "dataset_name": "spider", "guid": 3731}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | List the text of all tweets in the order of date.", "sql": "SELECT text FROM tweets ORDER BY createdate", "example": {"db_id": "twitter_1", "query": "SELECT text FROM tweets ORDER BY createdate", "query_toks": ["SELECT", "text", "FROM", "tweets", "ORDER", "BY", "createdate"], "query_toks_no_value": ["select", "text", "from", "tweets", "order", "by", "createdate"], "question": "List the text of all tweets in the order of date.", "question_toks": ["List", "the", "text", "of", "all", "tweets", "in", "the", "order", "of", "date", "."], "dataset_name": "spider", "guid": 3732}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all ages and corresponding number of students.", "sql": "SELECT age ,  count(*) FROM Student GROUP BY age", "example": {"db_id": "allergy_1", "query": "SELECT age ,  count(*) FROM Student GROUP BY age", "query_toks": ["SELECT", "age", ",", "count", "(", "*", ")", "FROM", "Student", "GROUP", "BY", "age"], "query_toks_no_value": ["select", "age", ",", "count", "(", "*", ")", "from", "student", "group", "by", "age"], "question": "Show all ages and corresponding number of students.", "question_toks": ["Show", "all", "ages", "and", "corresponding", "number", "of", "students", "."], "dataset_name": "spider", "guid": 3733}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | List the name and number of followers for each user, and sort the results by the number of followers in descending order.", "sql": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC", "example": {"db_id": "twitter_1", "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC", "query_toks": ["SELECT", "name", ",", "followers", "FROM", "user_profiles", "ORDER", "BY", "followers", "DESC"], "query_toks_no_value": ["select", "name", ",", "followers", "from", "user_profiles", "order", "by", "followers", "desc"], "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.", "question_toks": ["List", "the", "name", "and", "number", "of", "followers", "for", "each", "user", ",", "and", "sort", "the", "results", "by", "the", "number", "of", "followers", "in", "descending", "order", "."], "dataset_name": "spider", "guid": 3734}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Which allergy is the most common?", "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "allergy_1", "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Allergy", "FROM", "Has_allergy", "GROUP", "BY", "Allergy", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "allergy", "from", "has_allergy", "group", "by", "allergy", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which allergy is the most common?", "question_toks": ["Which", "allergy", "is", "the", "most", "common", "?"], "dataset_name": "spider", "guid": 3735}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Find the first name and major of the students who are not allegry to soy.", "sql": "SELECT fname, major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Soy\")", "example": {"db_id": "allergy_1", "query": "SELECT fname ,  major FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Soy\")", "query_toks": ["SELECT", "fname", ",", "major", "FROM", "Student", "WHERE", "StuID", "NOT", "IN", "(", "SELECT", "StuID", "FROM", "Has_allergy", "WHERE", "Allergy", "=", "``", "Soy", "''", ")"], "query_toks_no_value": ["select", "fname", ",", "major", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_allergy", "where", "allergy", "=", "value", ")"], "question": "Find the first name and major of the students who are not allegry to soy.", "question_toks": ["Find", "the", "first", "name", "and", "major", "of", "the", "students", "who", "are", "not", "allegry", "to", "soy", "."], "dataset_name": "spider", "guid": 3736}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?", "sql": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998", "example": {"db_id": "browser_web", "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998", "query_toks": ["SELECT", "T1.name", "FROM", "browser", "AS", "T1", "JOIN", "accelerator_compatible_browser", "AS", "T2", "ON", "T1.id", "=", "T2.browser_id", "JOIN", "web_client_accelerator", "AS", "T3", "ON", "T2.accelerator_id", "=", "T3.id", "WHERE", "T3.name", "=", "'CProxy", "'", "AND", "T2.compatible_since_year", ">", "1998"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "browser", "as", "t1", "join", "accelerator_compatible_browser", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "browser_id", "join", "web_client_accelerator", "as", "t3", "on", "t2", ".", "accelerator_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "compatible_since_year", ">", "value"], "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?", "question_toks": ["What", "is", "the", "name", "of", "the", "browser", "that", "became", "compatible", "with", "the", "accelerator", "'CProxy", "'", "after", "year", "1998", "?"], "dataset_name": "spider", "guid": 3737}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the ids and trade names of the medicine that can interact with at least 3 enzymes?", "sql": "SELECT T1.id , T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3", "query_toks": ["SELECT", "T1.id", ",", "T1.trade_name", "FROM", "medicine", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.medicine_id", "=", "T1.id", "GROUP", "BY", "T1.id", "HAVING", "COUNT", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "trade_name", "from", "medicine", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "medicine_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?", "question_toks": ["What", "are", "the", "ids", "and", "trade", "names", "of", "the", "medicine", "that", "can", "interact", "with", "at", "least", "3", "enzymes", "?"], "dataset_name": "spider", "guid": 3738}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students are affected by each allergy type?", "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "example": {"db_id": "allergy_1", "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "query_toks": ["SELECT", "T2.allergytype", ",", "count", "(", "*", ")", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_type", "AS", "T2", "ON", "T1.allergy", "=", "T2.allergy", "GROUP", "BY", "T2.allergytype"], "query_toks_no_value": ["select", "t2", ".", "allergytype", ",", "count", "(", "*", ")", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "group", "by", "t2", ".", "allergytype"], "question": "How many students are affected by each allergy type?", "question_toks": ["How", "many", "students", "are", "affected", "by", "each", "allergy", "type", "?"], "dataset_name": "spider", "guid": 3739}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the name of the oldest student?", "sql": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )", "example": {"db_id": "network_2", "query": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )", "query_toks": ["SELECT", "name", "FROM", "Person", "WHERE", "job", "=", "'student", "'", "AND", "age", "=", "(", "SELECT", "max", "(", "age", ")", "FROM", "person", "WHERE", "job", "=", "'student", "'", ")"], "query_toks_no_value": ["select", "name", "from", "person", "where", "job", "=", "value", "and", "age", "=", "(", "select", "max", "(", "age", ")", "from", "person", "where", "job", "=", "value", ")"], "question": "What is the name of the oldest student?", "question_toks": ["What", "is", "the", "name", "of", "the", "oldest", "student", "?"], "dataset_name": "spider", "guid": 3740}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What is the average age of all the dogs?", "sql": "SELECT avg(age) FROM Dogs", "example": {"db_id": "dog_kennels", "query": "SELECT avg(age) FROM Dogs", "query_toks": ["SELECT", "avg", "(", "age", ")", "FROM", "Dogs"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "dogs"], "question": "What is the average age of all the dogs?", "question_toks": ["What", "is", "the", "average", "age", "of", "all", "the", "dogs", "?"], "dataset_name": "spider", "guid": 3741}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Count the number of dogs of an age below the average.", "sql": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "example": {"db_id": "dog_kennels", "query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Dogs", "WHERE", "age", "<", "(", "SELECT", "avg", "(", "age", ")", "FROM", "Dogs", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")"], "question": "Count the number of dogs of an age below the average.", "question_toks": ["Count", "the", "number", "of", "dogs", "of", "an", "age", "below", "the", "average", "."], "dataset_name": "spider", "guid": 3742}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the name of persons who are friends with Alice for the shortest years.", "sql": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "example": {"db_id": "network_2", "query": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "query_toks": ["SELECT", "name", "FROM", "PersonFriend", "WHERE", "friend", "=", "'Alice", "'", "AND", "YEAR", "=", "(", "SELECT", "min", "(", "YEAR", ")", "FROM", "PersonFriend", "WHERE", "friend", "=", "'Alice", "'", ")"], "query_toks_no_value": ["select", "name", "from", "personfriend", "where", "friend", "=", "value", "and", "year", "=", "(", "select", "min", "(", "year", ")", "from", "personfriend", "where", "friend", "=", "value", ")"], "question": "Find the name of persons who are friends with Alice for the shortest years.", "question_toks": ["Find", "the", "name", "of", "persons", "who", "are", "friends", "with", "Alice", "for", "the", "shortest", "years", "."], "dataset_name": "spider", "guid": 3743}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Which problems are reported before 1978-06-26? Give me the ids of the problems.", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"", "query_toks": ["SELECT", "problem_id", "FROM", "problems", "WHERE", "date_problem_reported", "<", "``", "1978-06-26", "''"], "query_toks_no_value": ["select", "problem_id", "from", "problems", "where", "date_problem_reported", "<", "value"], "question": "Which problems are reported before 1978-06-26? Give me the ids of the problems.", "question_toks": ["Which", "problems", "are", "reported", "before", "1978-06-26", "?", "Give", "me", "the", "ids", "of", "the", "problems", "."], "dataset_name": "spider", "guid": 3744}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "sql": "SELECT DISTINCT T1.first_name , T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < ( SELECT avg(cost_of_treatment) FROM Treatments )", "example": {"db_id": "dog_kennels", "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )", "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T1.last_name", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "WHERE", "cost_of_treatment", "<", "(", "SELECT", "avg", "(", "cost_of_treatment", ")", "FROM", "Treatments", ")"], "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")"], "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "question_toks": ["Which", "professionals", "have", "operated", "a", "treatment", "that", "costs", "less", "than", "the", "average", "?", "Give", "me", "theor", "first", "names", "and", "last", "names", "."], "dataset_name": "spider", "guid": 3745}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Return the owner id, first name and last name of the owner who has the most dogs.", "sql": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "dog_kennels", "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.owner_id", ",", "T2.first_name", ",", "T2.last_name", "FROM", "Dogs", "AS", "T1", "JOIN", "Owners", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "GROUP", "BY", "T1.owner_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "owner_id", ",", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "group", "by", "t1", ".", "owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the owner id, first name and last name of the owner who has the most dogs.", "question_toks": ["Return", "the", "owner", "id", ",", "first", "name", "and", "last", "name", "of", "the", "owner", "who", "has", "the", "most", "dogs", "."], "dataset_name": "spider", "guid": 3746}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Tell me the number of dogs that have not received any treatment .", "sql": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "example": {"db_id": "dog_kennels", "query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments )", "query_toks": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")"], "question": "Tell me the number of dogs that have not received any treatment .", "question_toks": ["Tell", "me", "the", "number", "of", "dogs", "that", "have", "not", "received", "any", "treatment", "."], "dataset_name": "spider", "guid": 3747}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are each owner's first name and their dogs's name?", "sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id", "example": {"db_id": "dog_kennels", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id", "query_toks": ["SELECT", "T1.first_name", ",", "T2.name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t2", ".", "name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id"], "question": "What are each owner's first name and their dogs's name?", "question_toks": ["What", "are", "each", "owner", "'s", "first", "name", "and", "their", "dogs", "'s", "name", "?"], "dataset_name": "spider", "guid": 3748}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?", "sql": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'", "query_toks": ["SELECT", "T1.name", "FROM", "enzyme", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T1.id", "=", "T2.enzyme_id", "JOIN", "medicine", "AS", "T3", "ON", "T2.medicine_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Amisulpride", "'", "AND", "T2.interaction_type", "=", "'inhibitor", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "enzyme", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "enzyme_id", "join", "medicine", "as", "t3", "on", "t2", ".", "medicine_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "interaction_type", "=", "value"], "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?", "question_toks": ["What", "are", "the", "names", "of", "enzymes", "in", "the", "medicine", "named", "'Amisulpride", "'", "that", "can", "serve", "as", "an", "'inhibitor", "'", "?"], "dataset_name": "spider", "guid": 3749}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Show the average and maximum damage for all storms with max speed higher than 1000.", "sql": "SELECT avg(damage_millions_USD) , max(damage_millions_USD) FROM storm WHERE max_speed > 1000", "example": {"db_id": "storm_record", "query": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000", "query_toks": ["SELECT", "avg", "(", "damage_millions_USD", ")", ",", "max", "(", "damage_millions_USD", ")", "FROM", "storm", "WHERE", "max_speed", ">", "1000"], "query_toks_no_value": ["select", "avg", "(", "damage_millions_usd", ")", ",", "max", "(", "damage_millions_usd", ")", "from", "storm", "where", "max_speed", ">", "value"], "question": "Show the average and maximum damage for all storms with max speed higher than 1000.", "question_toks": ["Show", "the", "average", "and", "maximum", "damage", "for", "all", "storms", "with", "max", "speed", "higher", "than", "1000", "."], "dataset_name": "spider", "guid": 3750}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | List the open date of open year of the shop named \"Apple\".", "sql": "SELECT Open_Date, Open_Year FROM shop WHERE Shop_Name = 'Apple'", "example": {"db_id": "device", "query": "SELECT Open_Date ,  Open_Year FROM shop WHERE Shop_Name  =  \"Apple\"", "query_toks": ["SELECT", "Open_Date", ",", "Open_Year", "FROM", "shop", "WHERE", "Shop_Name", "=", "``", "Apple", "''"], "query_toks_no_value": ["select", "open_date", ",", "open_year", "from", "shop", "where", "shop_name", "=", "value"], "question": "List the open date of open year of the shop named \"Apple\".", "question_toks": ["List", "the", "open", "date", "of", "open", "year", "of", "the", "shop", "named", "``", "Apple", "''", "."], "dataset_name": "spider", "guid": 3751}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the person who has exactly one friend.", "sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1", "example": {"db_id": "network_2", "query": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1", "query_toks": ["SELECT", "name", "FROM", "PersonFriend", "GROUP", "BY", "name", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "name", "from", "personfriend", "group", "by", "name", "having", "count", "(", "*", ")", "=", "value"], "question": "Find the person who has exactly one friend.", "question_toks": ["Find", "the", "person", "who", "has", "exactly", "one", "friend", "."], "dataset_name": "spider", "guid": 3752}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are all the possible breed type and size type combinations?", "sql": "SELECT DISTINCT breed_code , size_code FROM Dogs", "example": {"db_id": "dog_kennels", "query": "SELECT DISTINCT breed_code ,  size_code FROM dogs", "query_toks": ["SELECT", "DISTINCT", "breed_code", ",", "size_code", "FROM", "dogs"], "query_toks_no_value": ["select", "distinct", "breed_code", ",", "size_code", "from", "dogs"], "question": "What are all the possible breed type and size type combinations?", "question_toks": ["What", "are", "all", "the", "possible", "breed", "type", "and", "size", "type", "combinations", "?"], "dataset_name": "spider", "guid": 3753}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "sql": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "example": {"db_id": "dog_kennels", "query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'", "query_toks": ["SELECT", "email_address", "FROM", "Professionals", "WHERE", "state", "=", "'Hawaii", "'", "OR", "state", "=", "'Wisconsin", "'"], "query_toks_no_value": ["select", "email_address", "from", "professionals", "where", "state", "=", "value", "or", "state", "=", "value"], "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "question_toks": ["What", "are", "the", "emails", "of", "the", "professionals", "living", "in", "either", "the", "state", "of", "Hawaii", "or", "the", "state", "of", "Wisconsin", "?"], "dataset_name": "spider", "guid": 3754}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | List name and damage for all storms in a descending order of max speed.", "sql": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC", "example": {"db_id": "storm_record", "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC", "query_toks": ["SELECT", "name", ",", "damage_millions_USD", "FROM", "storm", "ORDER", "BY", "max_speed", "DESC"], "query_toks_no_value": ["select", "name", ",", "damage_millions_usd", "from", "storm", "order", "by", "max_speed", "desc"], "question": "List name and damage for all storms in a descending order of max speed.", "question_toks": ["List", "name", "and", "damage", "for", "all", "storms", "in", "a", "descending", "order", "of", "max", "speed", "."], "dataset_name": "spider", "guid": 3755}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the students ids of students who have more than one allergy?", "sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2", "example": {"db_id": "allergy_1", "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2", "query_toks": ["SELECT", "StuID", "FROM", "Has_allergy", "GROUP", "BY", "StuID", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "stuid", "from", "has_allergy", "group", "by", "stuid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the students ids of students who have more than one allergy?", "question_toks": ["What", "are", "the", "students", "ids", "of", "students", "who", "have", "more", "than", "one", "allergy", "?"], "dataset_name": "spider", "guid": 3756}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | How much does the most expensive charge type costs?", "sql": "SELECT max(charge_amount) FROM Charges", "example": {"db_id": "dog_kennels", "query": "SELECT max(charge_amount) FROM Charges", "query_toks": ["SELECT", "max", "(", "charge_amount", ")", "FROM", "Charges"], "query_toks_no_value": ["select", "max", "(", "charge_amount", ")", "from", "charges"], "question": "How much does the most expensive charge type costs?", "question_toks": ["How", "much", "does", "the", "most", "expensive", "charge", "type", "costs", "?"], "dataset_name": "spider", "guid": 3757}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What are the carriers of devices that are in stock in more than a single shop?", "sql": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1", "example": {"db_id": "device", "query": "SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*)  >  1", "query_toks": ["SELECT", "T2.Carrier", "FROM", "stock", "AS", "T1", "JOIN", "device", "AS", "T2", "ON", "T1.Device_ID", "=", "T2.Device_ID", "GROUP", "BY", "T1.Device_ID", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t2", ".", "carrier", "from", "stock", "as", "t1", "join", "device", "as", "t2", "on", "t1", ".", "device_id", "=", "t2", ".", "device_id", "group", "by", "t1", ".", "device_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the carriers of devices that are in stock in more than a single shop?", "question_toks": ["What", "are", "the", "carriers", "of", "devices", "that", "are", "in", "stock", "in", "more", "than", "a", "single", "shop", "?"], "dataset_name": "spider", "guid": 3758}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the student ids for all male students?", "sql": "SELECT StuID FROM Student WHERE Sex  =  'M'", "example": {"db_id": "allergy_1", "query": "SELECT StuID FROM Student WHERE Sex  =  'M'", "query_toks": ["SELECT", "StuID", "FROM", "Student", "WHERE", "Sex", "=", "'M", "'"], "query_toks_no_value": ["select", "stuid", "from", "student", "where", "sex", "=", "value"], "question": "What are the student ids for all male students?", "question_toks": ["What", "are", "the", "student", "ids", "for", "all", "male", "students", "?"], "dataset_name": "spider", "guid": 3759}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | Find the number and time of the train that goes from Chennai to Guruvayur.", "sql": "SELECT train_number , TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur'", "example": {"db_id": "station_weather", "query": "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'", "query_toks": ["SELECT", "train_number", ",", "TIME", "FROM", "train", "WHERE", "origin", "=", "'Chennai", "'", "AND", "destination", "=", "'Guruvayur", "'"], "query_toks_no_value": ["select", "train_number", ",", "time", "from", "train", "where", "origin", "=", "value", "and", "destination", "=", "value"], "question": "Find the number and time of the train that goes from Chennai to Guruvayur.", "question_toks": ["Find", "the", "number", "and", "time", "of", "the", "train", "that", "goes", "from", "Chennai", "to", "Guruvayur", "."], "dataset_name": "spider", "guid": 3760}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | How many pets are owned by students that have an age greater than 20?", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "example": {"db_id": "pets_1", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T1.age", ">", "20"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t1", ".", "age", ">", "value"], "question": "How many pets are owned by students that have an age greater than 20?", "question_toks": ["How", "many", "pets", "are", "owned", "by", "students", "that", "have", "an", "age", "greater", "than", "20", "?"], "dataset_name": "spider", "guid": 3761}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the number of pets for each student who has any pet and student id.", "sql": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "example": {"db_id": "pets_1", "query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "GROUP", "BY", "T1.stuid"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "group", "by", "t1", ".", "stuid"], "question": "Find the number of pets for each student who has any pet and student id.", "question_toks": ["Find", "the", "number", "of", "pets", "for", "each", "student", "who", "has", "any", "pet", "and", "student", "id", "."], "dataset_name": "spider", "guid": 3762}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | How many different FDA approval statuses exist for medicines?", "sql": "SELECT COUNT(DISTINCT FDA_approved) FROM medicine", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT count(DISTINCT FDA_approved) FROM medicine", "query_toks": ["SELECT", "count", "(", "DISTINCT", "FDA_approved", ")", "FROM", "medicine"], "query_toks_no_value": ["select", "count", "(", "distinct", "fda_approved", ")", "from", "medicine"], "question": "How many different FDA approval statuses exist for medicines?", "question_toks": ["How", "many", "different", "FDA", "approval", "statuses", "exist", "for", "medicines", "?"], "dataset_name": "spider", "guid": 3763}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Count the number of dogs that went through a treatment.", "sql": "SELECT COUNT(DISTINCT dog_id) FROM Treatments", "example": {"db_id": "dog_kennels", "query": "SELECT count(DISTINCT dog_id) FROM Treatments", "query_toks": ["SELECT", "count", "(", "DISTINCT", "dog_id", ")", "FROM", "Treatments"], "query_toks_no_value": ["select", "count", "(", "distinct", "dog_id", ")", "from", "treatments"], "question": "Count the number of dogs that went through a treatment.", "question_toks": ["Count", "the", "number", "of", "dogs", "that", "went", "through", "a", "treatment", "."], "dataset_name": "spider", "guid": 3764}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which owner owns the most dogs? List the owner id, first name and last name.", "sql": "SELECT T1.owner_id , T2.first_name , T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "dog_kennels", "query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.owner_id", ",", "T2.first_name", ",", "T2.last_name", "FROM", "Dogs", "AS", "T1", "JOIN", "Owners", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "GROUP", "BY", "T1.owner_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "owner_id", ",", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "group", "by", "t1", ".", "owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which owner owns the most dogs? List the owner id, first name and last name.", "question_toks": ["Which", "owner", "owns", "the", "most", "dogs", "?", "List", "the", "owner", "id", ",", "first", "name", "and", "last", "name", "."], "dataset_name": "spider", "guid": 3765}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names of everybody who has exactly one friend?", "sql": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1", "example": {"db_id": "network_2", "query": "SELECT name FROM PersonFriend GROUP BY name HAVING count(*)  =  1", "query_toks": ["SELECT", "name", "FROM", "PersonFriend", "GROUP", "BY", "name", "HAVING", "count", "(", "*", ")", "=", "1"], "query_toks_no_value": ["select", "name", "from", "personfriend", "group", "by", "name", "having", "count", "(", "*", ")", "=", "value"], "question": "What are the names of everybody who has exactly one friend?", "question_toks": ["What", "are", "the", "names", "of", "everybody", "who", "has", "exactly", "one", "friend", "?"], "dataset_name": "spider", "guid": 3766}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are the arriving date and the departing date of all the dogs?", "sql": "SELECT date_arrived, date_departed FROM Dogs", "example": {"db_id": "dog_kennels", "query": "SELECT date_arrived ,  date_departed FROM Dogs", "query_toks": ["SELECT", "date_arrived", ",", "date_departed", "FROM", "Dogs"], "query_toks_no_value": ["select", "date_arrived", ",", "date_departed", "from", "dogs"], "question": "What are the arriving date and the departing date of all the dogs?", "question_toks": ["What", "are", "the", "arriving", "date", "and", "the", "departing", "date", "of", "all", "the", "dogs", "?"], "dataset_name": "spider", "guid": 3767}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the number of professionals who have not treated any dogs.", "sql": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "example": {"db_id": "dog_kennels", "query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Professionals", "WHERE", "professional_id", "NOT", "IN", "(", "SELECT", "professional_id", "FROM", "Treatments", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professionals", "where", "professional_id", "not", "in", "(", "select", "professional_id", "from", "treatments", ")"], "question": "Find the number of professionals who have not treated any dogs.", "question_toks": ["Find", "the", "number", "of", "professionals", "who", "have", "not", "treated", "any", "dogs", "."], "dataset_name": "spider", "guid": 3768}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Which allergy has most number of students affected?", "sql": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "allergy_1", "query": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Allergy", "FROM", "Has_allergy", "GROUP", "BY", "Allergy", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "allergy", "from", "has_allergy", "group", "by", "allergy", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which allergy has most number of students affected?", "question_toks": ["Which", "allergy", "has", "most", "number", "of", "students", "affected", "?"], "dataset_name": "spider", "guid": 3769}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are the date and the operating professional's first name of each treatment?", "sql": "SELECT T1.date_of_treatment , T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id", "example": {"db_id": "dog_kennels", "query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id", "query_toks": ["SELECT", "T1.date_of_treatment", ",", "T2.first_name", "FROM", "Treatments", "AS", "T1", "JOIN", "Professionals", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id"], "query_toks_no_value": ["select", "t1", ".", "date_of_treatment", ",", "t2", ".", "first_name", "from", "treatments", "as", "t1", "join", "professionals", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id"], "question": "What are the date and the operating professional's first name of each treatment?", "question_toks": ["What", "are", "the", "date", "and", "the", "operating", "professional", "'s", "first", "name", "of", "each", "treatment", "?"], "dataset_name": "spider", "guid": 3770}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | Find the id and local authority of the station with has the highest average high temperature.", "sql": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1", "example": {"db_id": "station_weather", "query": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id ORDER BY avg(high_temperature) DESC LIMIT 1", "query_toks": ["SELECT", "t2.id", ",", "t2.local_authority", "FROM", "weekly_weather", "AS", "t1", "JOIN", "station", "AS", "t2", "ON", "t1.station_id", "=", "t2.id", "GROUP", "BY", "t1.station_id", "ORDER", "BY", "avg", "(", "high_temperature", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "id", ",", "t2", ".", "local_authority", "from", "weekly_weather", "as", "t1", "join", "station", "as", "t2", "on", "t1", ".", "station_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "station_id", "order", "by", "avg", "(", "high_temperature", ")", "desc", "limit", "value"], "question": "Find the id and local authority of the station with has the highest average high temperature.", "question_toks": ["Find", "the", "id", "and", "local", "authority", "of", "the", "station", "with", "has", "the", "highest", "average", "high", "temperature", "."], "dataset_name": "spider", "guid": 3771}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the number of users who posted some tweets.", "sql": "SELECT count(DISTINCT UID) FROM tweets", "example": {"db_id": "twitter_1", "query": "SELECT count(DISTINCT UID) FROM tweets", "query_toks": ["SELECT", "count", "(", "DISTINCT", "UID", ")", "FROM", "tweets"], "query_toks_no_value": ["select", "count", "(", "distinct", "uid", ")", "from", "tweets"], "question": "Find the number of users who posted some tweets.", "question_toks": ["Find", "the", "number", "of", "users", "who", "posted", "some", "tweets", "."], "dataset_name": "spider", "guid": 3772}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.", "sql": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"", "query_toks": ["SELECT", "T1.problem_description", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Christop", "''"], "query_toks_no_value": ["select", "t1", ".", "problem_description", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value"], "question": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.", "question_toks": ["Which", "problems", "are", "reported", "by", "the", "staff", "with", "first", "name", "``", "Christop", "''", "?", "Show", "the", "descriptions", "of", "the", "problems", "."], "dataset_name": "spider", "guid": 3773}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What is the average and maximum age for each pet type?", "sql": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "example": {"db_id": "pets_1", "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "query_toks": ["SELECT", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "FROM", "pets", "GROUP", "BY", "pettype"], "query_toks_no_value": ["select", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "from", "pets", "group", "by", "pettype"], "question": "What is the average and maximum age for each pet type?", "question_toks": ["What", "is", "the", "average", "and", "maximum", "age", "for", "each", "pet", "type", "?"], "dataset_name": "spider", "guid": 3774}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What are the names of high schoolers who have likes, and how many likes does each have?", "sql": "SELECT T2.name , count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id", "example": {"db_id": "network_1", "query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "Likes", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id"], "question": "What are the names of high schoolers who have likes, and how many likes does each have?", "question_toks": ["What", "are", "the", "names", "of", "high", "schoolers", "who", "have", "likes", ",", "and", "how", "many", "likes", "does", "each", "have", "?"], "dataset_name": "spider", "guid": 3775}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | Find the origins from which more than 1 train starts.", "sql": "SELECT origin FROM train GROUP BY origin HAVING count(*) > 1", "example": {"db_id": "station_weather", "query": "SELECT origin FROM train GROUP BY origin HAVING count(*)  >  1", "query_toks": ["SELECT", "origin", "FROM", "train", "GROUP", "BY", "origin", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "origin", "from", "train", "group", "by", "origin", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the origins from which more than 1 train starts.", "question_toks": ["Find", "the", "origins", "from", "which", "more", "than", "1", "train", "starts", "."], "dataset_name": "spider", "guid": 3776}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?", "sql": "SELECT count(*) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id", "example": {"db_id": "tracking_software_problems", "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T2.product_id", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "WHERE", "T1.date_problem_reported", ">", "``", "1986-11-13", "''", "GROUP", "BY", "T2.product_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "product_id", "from", "problems", "as", "t1", "join", "product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t1", ".", "date_problem_reported", ">", "value", "group", "by", "t2", ".", "product_id"], "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?", "question_toks": ["For", "each", "product", "that", "has", "problems", ",", "find", "the", "number", "of", "problems", "reported", "after", "1986-11-13", "and", "the", "product", "id", "?"], "dataset_name": "spider", "guid": 3777}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | How many different services are provided by all stations?", "sql": "SELECT count(DISTINCT services) FROM station", "example": {"db_id": "station_weather", "query": "SELECT count(DISTINCT services) FROM station", "query_toks": ["SELECT", "count", "(", "DISTINCT", "services", ")", "FROM", "station"], "query_toks_no_value": ["select", "count", "(", "distinct", "services", ")", "from", "station"], "question": "How many different services are provided by all stations?", "question_toks": ["How", "many", "different", "services", "are", "provided", "by", "all", "stations", "?"], "dataset_name": "spider", "guid": 3778}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | What is the id and name of the browser that is compatible with the most web accelerators?", "sql": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "browser_web", "query": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "browser", "AS", "T1", "JOIN", "accelerator_compatible_browser", "AS", "T2", "ON", "T1.id", "=", "T2.browser_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "browser", "as", "t1", "join", "accelerator_compatible_browser", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "browser_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id and name of the browser that is compatible with the most web accelerators?", "question_toks": ["What", "is", "the", "id", "and", "name", "of", "the", "browser", "that", "is", "compatible", "with", "the", "most", "web", "accelerators", "?"], "dataset_name": "spider", "guid": 3779}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?", "sql": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer'", "example": {"db_id": "browser_web", "query": "SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id WHERE T3.name  =  'CACHEbox' AND T2.name  =  'Internet Explorer'", "query_toks": ["SELECT", "T1.compatible_since_year", "FROM", "accelerator_compatible_browser", "AS", "T1", "JOIN", "browser", "AS", "T2", "ON", "T1.browser_id", "=", "T2.id", "JOIN", "web_client_accelerator", "AS", "T3", "ON", "T1.accelerator_id", "=", "T3.id", "WHERE", "T3.name", "=", "'CACHEbox", "'", "AND", "T2.name", "=", "'Internet", "Explorer", "'"], "query_toks_no_value": ["select", "t1", ".", "compatible_since_year", "from", "accelerator_compatible_browser", "as", "t1", "join", "browser", "as", "t2", "on", "t1", ".", "browser_id", "=", "t2", ".", "id", "join", "web_client_accelerator", "as", "t3", "on", "t1", ".", "accelerator_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value", "and", "t2", ".", "name", "=", "value"], "question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?", "question_toks": ["When", "did", "the", "web", "accelerator", "'CACHEbox", "'", "and", "browser", "'Internet", "Explorer", "'", "become", "compatible", "?"], "dataset_name": "spider", "guid": 3780}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Which major has most number of students?", "sql": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "allergy_1", "query": "SELECT major FROM Student GROUP BY major ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "major", "FROM", "Student", "GROUP", "BY", "major", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "major", "from", "student", "group", "by", "major", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which major has most number of students?", "question_toks": ["Which", "major", "has", "most", "number", "of", "students", "?"], "dataset_name": "spider", "guid": 3781}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "sql": "SELECT T1.owner_id , T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "example": {"db_id": "dog_kennels", "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "query_toks": ["SELECT", "T1.owner_id", ",", "T1.zip_code", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "JOIN", "Treatments", "AS", "T3", "ON", "T2.dog_id", "=", "T3.dog_id", "GROUP", "BY", "T1.owner_id", "ORDER", "BY", "sum", "(", "T3.cost_of_treatment", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "owner_id", ",", "t1", ".", "zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "join", "treatments", "as", "t3", "on", "t2", ".", "dog_id", "=", "t3", ".", "dog_id", "group", "by", "t1", ".", "owner_id", "order", "by", "sum", "(", "t3", ".", "cost_of_treatment", ")", "desc", "limit", "value"], "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "question_toks": ["Which", "owner", "has", "paid", "the", "largest", "amount", "of", "money", "in", "total", "for", "their", "dogs", "?", "Show", "the", "owner", "id", "and", "zip", "code", "."], "dataset_name": "spider", "guid": 3782}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show the average age for male and female students.", "sql": "SELECT avg(age) ,  sex FROM Student GROUP BY sex", "example": {"db_id": "allergy_1", "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "sex", "FROM", "Student", "GROUP", "BY", "sex"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "sex", "from", "student", "group", "by", "sex"], "question": "Show the average age for male and female students.", "question_toks": ["Show", "the", "average", "age", "for", "male", "and", "female", "students", "."], "dataset_name": "spider", "guid": 3783}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What is the last name of the youngest student?", "sql": "SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student)", "example": {"db_id": "allergy_1", "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)", "query_toks": ["SELECT", "LName", "FROM", "Student", "WHERE", "age", "=", "(", "SELECT", "min", "(", "age", ")", "FROM", "Student", ")"], "query_toks_no_value": ["select", "lname", "from", "student", "where", "age", "=", "(", "select", "min", "(", "age", ")", "from", "student", ")"], "question": "What is the last name of the youngest student?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "youngest", "student", "?"], "dataset_name": "spider", "guid": 3784}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?", "sql": "SELECT T1.id , T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "enzyme", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T1.id", "=", "T2.enzyme_id", "WHERE", "T2.interaction_type", "=", "'activitor", "'", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "enzyme", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "enzyme_id", "where", "t2", ".", "interaction_type", "=", "value", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?", "question_toks": ["What", "is", "the", "id", "and", "name", "of", "the", "enzyme", "with", "most", "number", "of", "medicines", "that", "can", "interact", "as", "'activator", "'", "?"], "dataset_name": "spider", "guid": 3785}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What are the different software platforms for devices, and how many devices have each?", "sql": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform", "example": {"db_id": "device", "query": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform", "query_toks": ["SELECT", "Software_Platform", ",", "COUNT", "(", "*", ")", "FROM", "device", "GROUP", "BY", "Software_Platform"], "query_toks_no_value": ["select", "software_platform", ",", "count", "(", "*", ")", "from", "device", "group", "by", "software_platform"], "question": "What are the different software platforms for devices, and how many devices have each?", "question_toks": ["What", "are", "the", "different", "software", "platforms", "for", "devices", ",", "and", "how", "many", "devices", "have", "each", "?"], "dataset_name": "spider", "guid": 3786}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | show the lowest low temperature and highest wind speed in miles per hour.", "sql": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather", "example": {"db_id": "station_weather", "query": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather", "query_toks": ["SELECT", "min", "(", "low_temperature", ")", ",", "max", "(", "wind_speed_mph", ")", "FROM", "weekly_weather"], "query_toks_no_value": ["select", "min", "(", "low_temperature", ")", ",", "max", "(", "wind_speed_mph", ")", "from", "weekly_weather"], "question": "show the lowest low temperature and highest wind speed in miles per hour.", "question_toks": ["show", "the", "lowest", "low", "temperature", "and", "highest", "wind", "speed", "in", "miles", "per", "hour", "."], "dataset_name": "spider", "guid": 3787}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Count the number of regions.", "sql": "SELECT COUNT(*) FROM region", "example": {"db_id": "storm_record", "query": "SELECT count(*) FROM region", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "region"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "region"], "question": "Count the number of regions.", "question_toks": ["Count", "the", "number", "of", "regions", "."], "dataset_name": "spider", "guid": 3788}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | List the ids, names and market shares of all browsers.", "sql": "SELECT id, name, market_share FROM browser", "example": {"db_id": "browser_web", "query": "SELECT id ,  name ,  market_share FROM browser", "query_toks": ["SELECT", "id", ",", "name", ",", "market_share", "FROM", "browser"], "query_toks_no_value": ["select", "id", ",", "name", ",", "market_share", "from", "browser"], "question": "List the ids, names and market shares of all browsers.", "question_toks": ["List", "the", "ids", ",", "names", "and", "market", "shares", "of", "all", "browsers", "."], "dataset_name": "spider", "guid": 3789}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which professionals have done at least two treatments? List the professional's id, role, and first name.", "sql": "SELECT T1.professional_id , T1.role_code , T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2", "example": {"db_id": "dog_kennels", "query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.professional_id", ",", "T1.role_code", ",", "T1.first_name", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "professional_id", ",", "t1", ".", "role_code", ",", "t1", ".", "first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "question_toks": ["Which", "professionals", "have", "done", "at", "least", "two", "treatments", "?", "List", "the", "professional", "'s", "id", ",", "role", ",", "and", "first", "name", "."], "dataset_name": "spider", "guid": 3790}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | How many enzymes do not have any interactions?", "sql": "SELECT COUNT(*) FROM enzyme WHERE id NOT IN (SELECT enzyme_id FROM medicine_enzyme_interaction);", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction );", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "enzyme", "WHERE", "id", "NOT", "IN", "(", "SELECT", "enzyme_id", "FROM", "medicine_enzyme_interaction", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "enzyme", "where", "id", "not", "in", "(", "select", "enzyme_id", "from", "medicine_enzyme_interaction", ")"], "question": "How many enzymes do not have any interactions?", "question_toks": ["How", "many", "enzymes", "do", "not", "have", "any", "interactions", "?"], "dataset_name": "spider", "guid": 3791}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are the email, cell phone and home phone of each professional?", "sql": "SELECT email_address , cell_number , home_phone FROM professionals", "example": {"db_id": "dog_kennels", "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "query_toks": ["SELECT", "email_address", ",", "cell_number", ",", "home_phone", "FROM", "professionals"], "query_toks_no_value": ["select", "email_address", ",", "cell_number", ",", "home_phone", "from", "professionals"], "question": "What are the email, cell phone and home phone of each professional?", "question_toks": ["What", "are", "the", "email", ",", "cell", "phone", "and", "home", "phone", "of", "each", "professional", "?"], "dataset_name": "spider", "guid": 3792}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the name of the user who tweeted more than once, and number of tweets tweeted by them.", "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "example": {"db_id": "twitter_1", "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "user_profiles", "AS", "T1", "JOIN", "tweets", "AS", "T2", "ON", "T1.uid", "=", "T2.uid", "GROUP", "BY", "T2.uid", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "user_profiles", "as", "t1", "join", "tweets", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "uid", "group", "by", "t2", ".", "uid", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.", "question_toks": ["Find", "the", "name", "of", "the", "user", "who", "tweeted", "more", "than", "once", ",", "and", "number", "of", "tweets", "tweeted", "by", "them", "."], "dataset_name": "spider", "guid": 3793}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the name of the person who has the oldest average age for their friends, and what is that average age?", "sql": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1", "example": {"db_id": "network_2", "query": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", ",", "avg", "(", "T1.age", ")", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "GROUP", "BY", "T2.name", "ORDER", "BY", "avg", "(", "T1.age", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "avg", "(", "t1", ".", "age", ")", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "group", "by", "t2", ".", "name", "order", "by", "avg", "(", "t1", ".", "age", ")", "desc", "limit", "value"], "question": "What is the name of the person who has the oldest average age for their friends, and what is that average age?", "question_toks": ["What", "is", "the", "name", "of", "the", "person", "who", "has", "the", "oldest", "average", "age", "for", "their", "friends", ",", "and", "what", "is", "that", "average", "age", "?"], "dataset_name": "spider", "guid": 3794}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | Find the number of web accelerators used for each Operating system.", "sql": "SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system", "example": {"db_id": "browser_web", "query": "SELECT Operating_system ,  count(*) FROM web_client_accelerator GROUP BY Operating_system", "query_toks": ["SELECT", "Operating_system", ",", "count", "(", "*", ")", "FROM", "web_client_accelerator", "GROUP", "BY", "Operating_system"], "query_toks_no_value": ["select", "operating_system", ",", "count", "(", "*", ")", "from", "web_client_accelerator", "group", "by", "operating_system"], "question": "Find the number of web accelerators used for each Operating system.", "question_toks": ["Find", "the", "number", "of", "web", "accelerators", "used", "for", "each", "Operating", "system", "."], "dataset_name": "spider", "guid": 3795}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many animal type allergies exist?", "sql": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Allergy_type", "WHERE", "allergytype", "=", "``", "animal", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "allergy_type", "where", "allergytype", "=", "value"], "question": "How many animal type allergies exist?", "question_toks": ["How", "many", "animal", "type", "allergies", "exist", "?"], "dataset_name": "spider", "guid": 3796}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show first name, last name, age for all female students. Their sex is F.", "sql": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "example": {"db_id": "allergy_1", "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "query_toks": ["SELECT", "Fname", ",", "Lname", ",", "Age", "FROM", "Student", "WHERE", "Sex", "=", "'F", "'"], "query_toks_no_value": ["select", "fname", ",", "lname", ",", "age", "from", "student", "where", "sex", "=", "value"], "question": "Show first name, last name, age for all female students. Their sex is F.", "question_toks": ["Show", "first", "name", ",", "last", "name", ",", "age", "for", "all", "female", "students", ".", "Their", "sex", "is", "F", "."], "dataset_name": "spider", "guid": 3797}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show the minimum, average, and maximum age of all students.", "sql": "SELECT min(age) , avg(age) , max(age) FROM Student", "example": {"db_id": "allergy_1", "query": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student", "query_toks": ["SELECT", "min", "(", "age", ")", ",", "avg", "(", "age", ")", ",", "max", "(", "age", ")", "FROM", "Student"], "query_toks_no_value": ["select", "min", "(", "age", ")", ",", "avg", "(", "age", ")", ",", "max", "(", "age", ")", "from", "student"], "question": "Show the minimum, average, and maximum age of all students.", "question_toks": ["Show", "the", "minimum", ",", "average", ",", "and", "maximum", "age", "of", "all", "students", "."], "dataset_name": "spider", "guid": 3798}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | How many regions were affected by each storm?", "sql": "SELECT T1.name, COUNT(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id", "example": {"db_id": "storm_record", "query": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id", "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "storm", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.storm_id", "=", "T2.storm_id", "GROUP", "BY", "T1.storm_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "storm", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "storm_id", "=", "t2", ".", "storm_id", "group", "by", "t1", ".", "storm_id"], "question": "How many regions were affected by each storm?", "question_toks": ["How", "many", "regions", "were", "affected", "by", "each", "storm", "?"], "dataset_name": "spider", "guid": 3799}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Find the number of male (sex is 'M') students who have some food type allery.", "sql": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student", "WHERE", "sex", "=", "``", "M", "''", "AND", "StuID", "IN", "(", "SELECT", "StuID", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_Type", "AS", "T2", "ON", "T1.Allergy", "=", "T2.Allergy", "WHERE", "T2.allergytype", "=", "``", "food", "''", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "where", "sex", "=", "value", "and", "stuid", "in", "(", "select", "stuid", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "where", "t2", ".", "allergytype", "=", "value", ")"], "question": "Find the number of male (sex is 'M') students who have some food type allery.", "question_toks": ["Find", "the", "number", "of", "male", "(", "sex", "is", "'M", "'", ")", "students", "who", "have", "some", "food", "type", "allery", "."], "dataset_name": "spider", "guid": 3800}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | How many problems did the product called \"voluptatem\" have in record?", "sql": "SELECT COUNT(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "product", "AS", "T1", "JOIN", "problems", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "WHERE", "T1.product_name", "=", "``", "voluptatem", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "product", "as", "t1", "join", "problems", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t1", ".", "product_name", "=", "value"], "question": "How many problems did the product called \"voluptatem\" have in record?", "question_toks": ["How", "many", "problems", "did", "the", "product", "called", "``", "voluptatem", "''", "have", "in", "record", "?"], "dataset_name": "spider", "guid": 3801}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the number of people whose age is greater than all engineers.", "sql": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')", "example": {"db_id": "network_2", "query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Person", "WHERE", "age", ">", "(", "SELECT", "max", "(", "age", ")", "FROM", "person", "WHERE", "job", "=", "'engineer", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "person", "where", "age", ">", "(", "select", "max", "(", "age", ")", "from", "person", "where", "job", "=", "value", ")"], "question": "Find the number of people whose age is greater than all engineers.", "question_toks": ["Find", "the", "number", "of", "people", "whose", "age", "is", "greater", "than", "all", "engineers", "."], "dataset_name": "spider", "guid": 3802}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | What is the average high temperature for each day of week?", "sql": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week", "example": {"db_id": "station_weather", "query": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week", "query_toks": ["SELECT", "avg", "(", "high_temperature", ")", ",", "day_of_week", "FROM", "weekly_weather", "GROUP", "BY", "day_of_week"], "query_toks_no_value": ["select", "avg", "(", "high_temperature", ")", ",", "day_of_week", "from", "weekly_weather", "group", "by", "day_of_week"], "question": "What is the average high temperature for each day of week?", "question_toks": ["What", "is", "the", "average", "high", "temperature", "for", "each", "day", "of", "week", "?"], "dataset_name": "spider", "guid": 3803}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Return the number of likes that the high schooler named Kyle has.", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "example": {"db_id": "network_1", "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Likes", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "Return the number of likes that the high schooler named Kyle has.", "question_toks": ["Return", "the", "number", "of", "likes", "that", "the", "high", "schooler", "named", "Kyle", "has", "."], "dataset_name": "spider", "guid": 3804}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | List the names of shops that have no devices in stock.", "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)", "example": {"db_id": "device", "query": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)", "query_toks": ["SELECT", "Shop_Name", "FROM", "shop", "WHERE", "Shop_ID", "NOT", "IN", "(", "SELECT", "Shop_ID", "FROM", "stock", ")"], "query_toks_no_value": ["select", "shop_name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "stock", ")"], "question": "List the names of shops that have no devices in stock.", "question_toks": ["List", "the", "names", "of", "shops", "that", "have", "no", "devices", "in", "stock", "."], "dataset_name": "spider", "guid": 3805}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all cities where students live.", "sql": "SELECT DISTINCT city_code FROM Student", "example": {"db_id": "allergy_1", "query": "SELECT DISTINCT city_code FROM Student", "query_toks": ["SELECT", "DISTINCT", "city_code", "FROM", "Student"], "query_toks_no_value": ["select", "distinct", "city_code", "from", "student"], "question": "Show all cities where students live.", "question_toks": ["Show", "all", "cities", "where", "students", "live", "."], "dataset_name": "spider", "guid": 3806}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Show all region code and region name sorted by the codes.", "sql": "SELECT region_code , region_name FROM region ORDER BY region_code", "example": {"db_id": "storm_record", "query": "SELECT region_code ,  region_name FROM region ORDER BY region_code", "query_toks": ["SELECT", "region_code", ",", "region_name", "FROM", "region", "ORDER", "BY", "region_code"], "query_toks_no_value": ["select", "region_code", ",", "region_name", "from", "region", "order", "by", "region_code"], "question": "Show all region code and region name sorted by the codes.", "question_toks": ["Show", "all", "region", "code", "and", "region", "name", "sorted", "by", "the", "codes", "."], "dataset_name": "spider", "guid": 3807}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | give me names of all compatible browsers and accelerators in the descending order of compatible year", "sql": "SELECT T2.name , T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC", "example": {"db_id": "browser_web", "query": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC", "query_toks": ["SELECT", "T2.name", ",", "T3.name", "FROM", "accelerator_compatible_browser", "AS", "T1", "JOIN", "browser", "AS", "T2", "ON", "T1.browser_id", "=", "T2.id", "JOIN", "web_client_accelerator", "AS", "T3", "ON", "T1.accelerator_id", "=", "T3.id", "ORDER", "BY", "T1.compatible_since_year", "DESC"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t3", ".", "name", "from", "accelerator_compatible_browser", "as", "t1", "join", "browser", "as", "t2", "on", "t1", ".", "browser_id", "=", "t2", ".", "id", "join", "web_client_accelerator", "as", "t3", "on", "t1", ".", "accelerator_id", "=", "t3", ".", "id", "order", "by", "t1", ".", "compatible_since_year", "desc"], "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year", "question_toks": ["give", "me", "names", "of", "all", "compatible", "browsers", "and", "accelerators", "in", "the", "descending", "order", "of", "compatible", "year"], "dataset_name": "spider", "guid": 3808}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | List the names of all the distinct product names in alphabetical order?", "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_name", "example": {"db_id": "tracking_software_problems", "query": "SELECT DISTINCT product_name FROM product ORDER BY product_name", "query_toks": ["SELECT", "DISTINCT", "product_name", "FROM", "product", "ORDER", "BY", "product_name"], "query_toks_no_value": ["select", "distinct", "product_name", "from", "product", "order", "by", "product_name"], "question": "List the names of all the distinct product names in alphabetical order?", "question_toks": ["List", "the", "names", "of", "all", "the", "distinct", "product", "names", "in", "alphabetical", "order", "?"], "dataset_name": "spider", "guid": 3809}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Find the names of the regions which were affected by the storm that killed the greatest number of people.", "sql": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "example": {"db_id": "storm_record", "query": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1", "query_toks": ["SELECT", "T2.region_name", "FROM", "affected_region", "AS", "T1", "JOIN", "region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "JOIN", "storm", "AS", "T3", "ON", "T1.storm_id", "=", "T3.storm_id", "ORDER", "BY", "T3.Number_Deaths", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "region_name", "from", "affected_region", "as", "t1", "join", "region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "join", "storm", "as", "t3", "on", "t1", ".", "storm_id", "=", "t3", ".", "storm_id", "order", "by", "t3", ".", "number_deaths", "desc", "limit", "value"], "question": "Find the names of the regions which were affected by the storm that killed the greatest number of people.", "question_toks": ["Find", "the", "names", "of", "the", "regions", "which", "were", "affected", "by", "the", "storm", "that", "killed", "the", "greatest", "number", "of", "people", "."], "dataset_name": "spider", "guid": 3810}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | List the email, cell phone and home phone of all the professionals.", "sql": "SELECT email_address , cell_number , home_phone FROM professionals", "example": {"db_id": "dog_kennels", "query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals", "query_toks": ["SELECT", "email_address", ",", "cell_number", ",", "home_phone", "FROM", "professionals"], "query_toks_no_value": ["select", "email_address", ",", "cell_number", ",", "home_phone", "from", "professionals"], "question": "List the email, cell phone and home phone of all the professionals.", "question_toks": ["List", "the", "email", ",", "cell", "phone", "and", "home", "phone", "of", "all", "the", "professionals", "."], "dataset_name": "spider", "guid": 3811}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Who are the friends of Alice that are doctors?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'", "example": {"db_id": "network_2", "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'", "query_toks": ["SELECT", "T2.friend", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T2.name", "=", "'Alice", "'", "AND", "T1.gender", "=", "'male", "'", "AND", "T1.job", "=", "'doctor", "'"], "query_toks_no_value": ["select", "t2", ".", "friend", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "gender", "=", "value", "and", "t1", ".", "job", "=", "value"], "question": "Who are the friends of Alice that are doctors?", "question_toks": ["Who", "are", "the", "friends", "of", "Alice", "that", "are", "doctors", "?"], "dataset_name": "spider", "guid": 3812}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the name of the person who has friends with age above 40 and under age 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "example": {"db_id": "network_2", "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "query_toks": ["SELECT", "T1.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "IN", "(", "SELECT", "name", "FROM", "Person", "WHERE", "age", ">", "40", ")", "INTERSECT", "SELECT", "T1.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "IN", "(", "SELECT", "name", "FROM", "Person", "WHERE", "age", "<", "30", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "in", "(", "select", "name", "from", "person", "where", "age", ">", "value", ")", "intersect", "select", "t1", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "in", "(", "select", "name", "from", "person", "where", "age", "<", "value", ")"], "question": "Find the name of the person who has friends with age above 40 and under age 30?", "question_toks": ["Find", "the", "name", "of", "the", "person", "who", "has", "friends", "with", "age", "above", "40", "and", "under", "age", "30", "?"], "dataset_name": "spider", "guid": 3813}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the id and weight of all pets whose age is older than 1.", "sql": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "example": {"db_id": "pets_1", "query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1", "query_toks": ["SELECT", "petid", ",", "weight", "FROM", "pets", "WHERE", "pet_age", ">", "1"], "query_toks_no_value": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "value"], "question": "Find the id and weight of all pets whose age is older than 1.", "question_toks": ["Find", "the", "id", "and", "weight", "of", "all", "pets", "whose", "age", "is", "older", "than", "1", "."], "dataset_name": "spider", "guid": 3814}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | List name, dates active, and number of deaths for all storms with at least 1 death.", "sql": "SELECT name, dates_active, number_deaths FROM storm WHERE number_deaths >= 1", "example": {"db_id": "storm_record", "query": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1", "query_toks": ["SELECT", "name", ",", "dates_active", ",", "number_deaths", "FROM", "storm", "WHERE", "number_deaths", ">", "=", "1"], "query_toks_no_value": ["select", "name", ",", "dates_active", ",", "number_deaths", "from", "storm", "where", "number_deaths", ">", "=", "value"], "question": "List name, dates active, and number of deaths for all storms with at least 1 death.", "question_toks": ["List", "name", ",", "dates", "active", ",", "and", "number", "of", "deaths", "for", "all", "storms", "with", "at", "least", "1", "death", "."], "dataset_name": "spider", "guid": 3815}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What is the full name of each student who is not allergic to any type of food.", "sql": "SELECT fname, lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\")", "example": {"db_id": "allergy_1", "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "Student", "WHERE", "StuID", "NOT", "IN", "(", "SELECT", "T1.StuID", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_Type", "AS", "T2", "ON", "T1.Allergy", "=", "T2.Allergy", "WHERE", "T2.allergytype", "=", "``", "food", "''", ")"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "where", "t2", ".", "allergytype", "=", "value", ")"], "question": "What is the full name of each student who is not allergic to any type of food.", "question_toks": ["What", "is", "the", "full", "name", "of", "each", "student", "who", "is", "not", "allergic", "to", "any", "type", "of", "food", "."], "dataset_name": "spider", "guid": 3816}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Find the minimum grade of students who have no friends.", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "example": {"db_id": "network_1", "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "query_toks": ["SELECT", "min", "(", "grade", ")", "FROM", "Highschooler", "WHERE", "id", "NOT", "IN", "(", "SELECT", "T1.student_id", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", ")"], "query_toks_no_value": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1", ".", "student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", ")"], "question": "Find the minimum grade of students who have no friends.", "question_toks": ["Find", "the", "minimum", "grade", "of", "students", "who", "have", "no", "friends", "."], "dataset_name": "spider", "guid": 3817}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the number of dog pets that are raised by female students (with sex F).", "sql": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "example": {"db_id": "pets_1", "query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T2.petid", "=", "T3.petid", "WHERE", "T1.sex", "=", "'F", "'", "AND", "T3.pettype", "=", "'dog", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t2", ".", "petid", "=", "t3", ".", "petid", "where", "t1", ".", "sex", "=", "value", "and", "t3", ".", "pettype", "=", "value"], "question": "Find the number of dog pets that are raised by female students (with sex F).", "question_toks": ["Find", "the", "number", "of", "dog", "pets", "that", "are", "raised", "by", "female", "students", "(", "with", "sex", "F", ")", "."], "dataset_name": "spider", "guid": 3818}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Show all storm names affecting region \"Denmark\".", "sql": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "example": {"db_id": "storm_record", "query": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'", "query_toks": ["SELECT", "T3.name", "FROM", "affected_region", "AS", "T1", "JOIN", "region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "JOIN", "storm", "AS", "T3", "ON", "T1.storm_id", "=", "T3.storm_id", "WHERE", "T2.region_name", "=", "'Denmark", "'"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "affected_region", "as", "t1", "join", "region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "join", "storm", "as", "t3", "on", "t1", ".", "storm_id", "=", "t3", ".", "storm_id", "where", "t2", ".", "region_name", "=", "value"], "question": "Show all storm names affecting region \"Denmark\".", "question_toks": ["Show", "all", "storm", "names", "affecting", "region", "``", "Denmark", "''", "."], "dataset_name": "spider", "guid": 3819}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the name of each user and number of tweets tweeted by each of them.", "sql": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid", "example": {"db_id": "twitter_1", "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid", "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "user_profiles", "AS", "T1", "JOIN", "tweets", "AS", "T2", "ON", "T1.uid", "=", "T2.uid", "GROUP", "BY", "T2.uid"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "user_profiles", "as", "t1", "join", "tweets", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "uid", "group", "by", "t2", ".", "uid"], "question": "Find the name of each user and number of tweets tweeted by each of them.", "question_toks": ["Find", "the", "name", "of", "each", "user", "and", "number", "of", "tweets", "tweeted", "by", "each", "of", "them", "."], "dataset_name": "spider", "guid": 3820}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | How many likes does Kyle have?", "sql": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "example": {"db_id": "network_1", "query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Likes", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "How many likes does Kyle have?", "question_toks": ["How", "many", "likes", "does", "Kyle", "have", "?"], "dataset_name": "spider", "guid": 3821}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What are the names of device shops, and what are the carriers that they carry devices in stock for?", "sql": "SELECT T3.Shop_Name , T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID", "example": {"db_id": "device", "query": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID", "query_toks": ["SELECT", "T3.Shop_Name", ",", "T2.Carrier", "FROM", "stock", "AS", "T1", "JOIN", "device", "AS", "T2", "ON", "T1.Device_ID", "=", "T2.Device_ID", "JOIN", "shop", "AS", "T3", "ON", "T1.Shop_ID", "=", "T3.Shop_ID"], "query_toks_no_value": ["select", "t3", ".", "shop_name", ",", "t2", ".", "carrier", "from", "stock", "as", "t1", "join", "device", "as", "t2", "on", "t1", ".", "device_id", "=", "t2", ".", "device_id", "join", "shop", "as", "t3", "on", "t1", ".", "shop_id", "=", "t3", ".", "shop_id"], "question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?", "question_toks": ["What", "are", "the", "names", "of", "device", "shops", ",", "and", "what", "are", "the", "carriers", "that", "they", "carry", "devices", "in", "stock", "for", "?"], "dataset_name": "spider", "guid": 3822}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?", "sql": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'", "query_toks": ["SELECT", "product", ",", "chromosome", ",", "porphyria", "FROM", "enzyme", "WHERE", "LOCATION", "=", "'Cytosol", "'"], "query_toks_no_value": ["select", "product", ",", "chromosome", ",", "porphyria", "from", "enzyme", "where", "location", "=", "value"], "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?", "question_toks": ["What", "is", "the", "product", ",", "chromosome", ",", "and", "porphyria", "of", "the", "enzymes", "located", "at", "'Cytosol", "'", "?"], "dataset_name": "spider", "guid": 3823}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | List the cost of each treatment and the corresponding treatment type description.", "sql": "SELECT T1.cost_of_treatment , T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code", "example": {"db_id": "dog_kennels", "query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code", "query_toks": ["SELECT", "T1.cost_of_treatment", ",", "T2.treatment_type_description", "FROM", "Treatments", "AS", "T1", "JOIN", "treatment_types", "AS", "T2", "ON", "T1.treatment_type_code", "=", "T2.treatment_type_code"], "query_toks_no_value": ["select", "t1", ".", "cost_of_treatment", ",", "t2", ".", "treatment_type_description", "from", "treatments", "as", "t1", "join", "treatment_types", "as", "t2", "on", "t1", ".", "treatment_type_code", "=", "t2", ".", "treatment_type_code"], "question": "List the cost of each treatment and the corresponding treatment type description.", "question_toks": ["List", "the", "cost", "of", "each", "treatment", "and", "the", "corresponding", "treatment", "type", "description", "."], "dataset_name": "spider", "guid": 3824}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Please show the software platforms of devices in descending order of the count.", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC", "example": {"db_id": "device", "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC", "query_toks": ["SELECT", "Software_Platform", "FROM", "device", "GROUP", "BY", "Software_Platform", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "software_platform", "from", "device", "group", "by", "software_platform", "order", "by", "count", "(", "*", ")", "desc"], "question": "Please show the software platforms of devices in descending order of the count.", "question_toks": ["Please", "show", "the", "software", "platforms", "of", "devices", "in", "descending", "order", "of", "the", "count", "."], "dataset_name": "spider", "guid": 3825}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the name of the person who has no student friends.", "sql": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'", "example": {"db_id": "network_2", "query": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'", "query_toks": ["SELECT", "name", "FROM", "person", "EXCEPT", "SELECT", "T2.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T1.job", "=", "'student", "'"], "query_toks_no_value": ["select", "name", "from", "person", "except", "select", "t2", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t1", ".", "job", "=", "value"], "question": "Find the name of the person who has no student friends.", "question_toks": ["Find", "the", "name", "of", "the", "person", "who", "has", "no", "student", "friends", "."], "dataset_name": "spider", "guid": 3826}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the average ages for male and female students?", "sql": "SELECT avg(age) ,  sex FROM Student GROUP BY sex", "example": {"db_id": "allergy_1", "query": "SELECT avg(age) ,  sex FROM Student GROUP BY sex", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "sex", "FROM", "Student", "GROUP", "BY", "sex"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "sex", "from", "student", "group", "by", "sex"], "question": "What are the average ages for male and female students?", "question_toks": ["What", "are", "the", "average", "ages", "for", "male", "and", "female", "students", "?"], "dataset_name": "spider", "guid": 3827}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What is the age of the oldest dog?", "sql": "SELECT MAX(age) FROM Dogs", "example": {"db_id": "dog_kennels", "query": "SELECT max(age) FROM Dogs", "query_toks": ["SELECT", "max", "(", "age", ")", "FROM", "Dogs"], "query_toks_no_value": ["select", "max", "(", "age", ")", "from", "dogs"], "question": "What is the age of the oldest dog?", "question_toks": ["What", "is", "the", "age", "of", "the", "oldest", "dog", "?"], "dataset_name": "spider", "guid": 3828}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | Show all the distinct institution types.", "sql": "SELECT DISTINCT TYPE FROM institution", "example": {"db_id": "protein_institute", "query": "SELECT DISTINCT TYPE FROM institution", "query_toks": ["SELECT", "DISTINCT", "TYPE", "FROM", "institution"], "query_toks_no_value": ["select", "distinct", "type", "from", "institution"], "question": "Show all the distinct institution types.", "question_toks": ["Show", "all", "the", "distinct", "institution", "types", "."], "dataset_name": "spider", "guid": 3829}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Find all the ids and dates of the logs for the problem whose id is 10.", "sql": "SELECT problem_log_id , log_entry_date FROM problem_log WHERE problem_id = 10", "example": {"db_id": "tracking_software_problems", "query": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10", "query_toks": ["SELECT", "problem_log_id", ",", "log_entry_date", "FROM", "problem_log", "WHERE", "problem_id", "=", "10"], "query_toks_no_value": ["select", "problem_log_id", ",", "log_entry_date", "from", "problem_log", "where", "problem_id", "=", "value"], "question": "Find all the ids and dates of the logs for the problem whose id is 10.", "question_toks": ["Find", "all", "the", "ids", "and", "dates", "of", "the", "logs", "for", "the", "problem", "whose", "id", "is", "10", "."], "dataset_name": "spider", "guid": 3830}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many allergies have type animal?", "sql": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Allergy_type", "WHERE", "allergytype", "=", "``", "animal", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "allergy_type", "where", "allergytype", "=", "value"], "question": "How many allergies have type animal?", "question_toks": ["How", "many", "allergies", "have", "type", "animal", "?"], "dataset_name": "spider", "guid": 3831}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all allergies with number of students affected.", "sql": "SELECT Allergy, COUNT(*) FROM Has_allergy GROUP BY Allergy", "example": {"db_id": "allergy_1", "query": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy", "query_toks": ["SELECT", "Allergy", ",", "count", "(", "*", ")", "FROM", "Has_allergy", "GROUP", "BY", "Allergy"], "query_toks_no_value": ["select", "allergy", ",", "count", "(", "*", ")", "from", "has_allergy", "group", "by", "allergy"], "question": "Show all allergies with number of students affected.", "question_toks": ["Show", "all", "allergies", "with", "number", "of", "students", "affected", "."], "dataset_name": "spider", "guid": 3832}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find Alice's friends of friends.", "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'", "example": {"db_id": "network_2", "query": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'", "query_toks": ["SELECT", "DISTINCT", "T4.name", "FROM", "PersonFriend", "AS", "T1", "JOIN", "Person", "AS", "T2", "ON", "T1.name", "=", "T2.name", "JOIN", "PersonFriend", "AS", "T3", "ON", "T1.friend", "=", "T3.name", "JOIN", "PersonFriend", "AS", "T4", "ON", "T3.friend", "=", "T4.name", "WHERE", "T2.name", "=", "'Alice", "'", "AND", "T4.name", "!", "=", "'Alice", "'"], "query_toks_no_value": ["select", "distinct", "t4", ".", "name", "from", "personfriend", "as", "t1", "join", "person", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "join", "personfriend", "as", "t3", "on", "t1", ".", "friend", "=", "t3", ".", "name", "join", "personfriend", "as", "t4", "on", "t3", ".", "friend", "=", "t4", ".", "name", "where", "t2", ".", "name", "=", "value", "and", "t4", ".", "name", "!", "=", "value"], "question": "Find Alice's friends of friends.", "question_toks": ["Find", "Alice", "'s", "friends", "of", "friends", "."], "dataset_name": "spider", "guid": 3833}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the total number of people who have no friends living in Austin?", "sql": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')", "example": {"db_id": "network_2", "query": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')", "query_toks": ["SELECT", "count", "(", "DISTINCT", "name", ")", "FROM", "PersonFriend", "WHERE", "friend", "NOT", "IN", "(", "SELECT", "name", "FROM", "person", "WHERE", "city", "=", "'Austin", "'", ")"], "query_toks_no_value": ["select", "count", "(", "distinct", "name", ")", "from", "personfriend", "where", "friend", "not", "in", "(", "select", "name", "from", "person", "where", "city", "=", "value", ")"], "question": "What is the total number of people who have no friends living in Austin?", "question_toks": ["What", "is", "the", "total", "number", "of", "people", "who", "have", "no", "friends", "living", "in", "Austin", "?"], "dataset_name": "spider", "guid": 3834}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What is the last name of the student who has a cat that is 3 years old?", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "example": {"db_id": "pets_1", "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "query_toks": ["SELECT", "T1.lname", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pet_age", "=", "3", "AND", "T3.pettype", "=", "'cat", "'"], "query_toks_no_value": ["select", "t1", ".", "lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pet_age", "=", "value", "and", "t3", ".", "pettype", "=", "value"], "question": "What is the last name of the student who has a cat that is 3 years old?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "student", "who", "has", "a", "cat", "that", "is", "3", "years", "old", "?"], "dataset_name": "spider", "guid": 3835}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | How many regions do we have?", "sql": "SELECT COUNT(*) FROM region", "example": {"db_id": "storm_record", "query": "SELECT count(*) FROM region", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "region"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "region"], "question": "How many regions do we have?", "question_toks": ["How", "many", "regions", "do", "we", "have", "?"], "dataset_name": "spider", "guid": 3836}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Find the oldest log id and its corresponding problem id.", "sql": "SELECT problem_log_id , problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1", "example": {"db_id": "tracking_software_problems", "query": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1", "query_toks": ["SELECT", "problem_log_id", ",", "problem_id", "FROM", "problem_log", "ORDER", "BY", "log_entry_date", "LIMIT", "1"], "query_toks_no_value": ["select", "problem_log_id", ",", "problem_id", "from", "problem_log", "order", "by", "log_entry_date", "limit", "value"], "question": "Find the oldest log id and its corresponding problem id.", "question_toks": ["Find", "the", "oldest", "log", "id", "and", "its", "corresponding", "problem", "id", "."], "dataset_name": "spider", "guid": 3837}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show the names of all of the high schooler Kyle's friends.", "sql": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "example": {"db_id": "network_1", "query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\"", "query_toks": ["SELECT", "T3.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "JOIN", "Highschooler", "AS", "T3", "ON", "T1.friend_id", "=", "T3.id", "WHERE", "T2.name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "join", "highschooler", "as", "t3", "on", "t1", ".", "friend_id", "=", "t3", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "Show the names of all of the high schooler Kyle's friends.", "question_toks": ["Show", "the", "names", "of", "all", "of", "the", "high", "schooler", "Kyle", "'s", "friends", "."], "dataset_name": "spider", "guid": 3838}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all student IDs who have at least two allergies.", "sql": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING COUNT(*) >= 2", "example": {"db_id": "allergy_1", "query": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2", "query_toks": ["SELECT", "StuID", "FROM", "Has_allergy", "GROUP", "BY", "StuID", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "stuid", "from", "has_allergy", "group", "by", "stuid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show all student IDs who have at least two allergies.", "question_toks": ["Show", "all", "student", "IDs", "who", "have", "at", "least", "two", "allergies", "."], "dataset_name": "spider", "guid": 3839}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"", "query_toks": ["SELECT", "T2.product_name", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "JOIN", "staff", "AS", "T3", "ON", "T1.product_id", "=", "T2.product_id", "AND", "T1.reported_by_staff_id", "=", "T3.staff_id", "WHERE", "T3.staff_first_name", "=", "``", "Lacey", "''", "AND", "T3.staff_last_name", "=", "``", "Bosco", "''", "INTERSECT", "SELECT", "T2.product_name", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "JOIN", "staff", "AS", "T3", "ON", "T1.product_id", "=", "T2.product_id", "AND", "T1.reported_by_staff_id", "=", "T3.staff_id", "WHERE", "T3.staff_first_name", "=", "``", "Kenton", "''", "AND", "T3.staff_last_name", "=", "``", "Champlin", "''"], "query_toks_no_value": ["select", "t2", ".", "product_name", "from", "problems", "as", "t1", "join", "product", "as", "t2", "join", "staff", "as", "t3", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "and", "t1", ".", "reported_by_staff_id", "=", "t3", ".", "staff_id", "where", "t3", ".", "staff_first_name", "=", "value", "and", "t3", ".", "staff_last_name", "=", "value", "intersect", "select", "t2", ".", "product_name", "from", "problems", "as", "t1", "join", "product", "as", "t2", "join", "staff", "as", "t3", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "and", "t1", ".", "reported_by_staff_id", "=", "t3", ".", "staff_id", "where", "t3", ".", "staff_first_name", "=", "value", "and", "t3", ".", "staff_last_name", "=", "value"], "question": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?", "question_toks": ["Find", "the", "products", "which", "have", "problems", "reported", "by", "both", "Lacey", "Bosco", "and", "Kenton", "Champlin", "?"], "dataset_name": "spider", "guid": 3840}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | How much does the youngest dog weigh?", "sql": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "example": {"db_id": "pets_1", "query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1", "query_toks": ["SELECT", "weight", "FROM", "pets", "ORDER", "BY", "pet_age", "LIMIT", "1"], "query_toks_no_value": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "value"], "question": "How much does the youngest dog weigh?", "question_toks": ["How", "much", "does", "the", "youngest", "dog", "weigh", "?"], "dataset_name": "spider", "guid": 3841}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | How many medicines were not approved by the FDA?", "sql": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "medicine", "WHERE", "FDA_approved", "=", "'No", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "medicine", "where", "fda_approved", "=", "value"], "question": "How many medicines were not approved by the FDA?", "question_toks": ["How", "many", "medicines", "were", "not", "approved", "by", "the", "FDA", "?"], "dataset_name": "spider", "guid": 3842}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show the names of students who have at least 2 likes.", "sql": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "example": {"db_id": "network_1", "query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.name", "FROM", "Likes", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the names of students who have at least 2 likes.", "question_toks": ["Show", "the", "names", "of", "students", "who", "have", "at", "least", "2", "likes", "."], "dataset_name": "spider", "guid": 3843}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What is the average grade of students who have friends?", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "example": {"db_id": "network_1", "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "query_toks": ["SELECT", "avg", "(", "grade", ")", "FROM", "Highschooler", "WHERE", "id", "IN", "(", "SELECT", "T1.student_id", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", ")"], "query_toks_no_value": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1", ".", "student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", ")"], "question": "What is the average grade of students who have friends?", "question_toks": ["What", "is", "the", "average", "grade", "of", "students", "who", "have", "friends", "?"], "dataset_name": "spider", "guid": 3844}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What are the three products that have the most problems?s", "sql": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "tracking_software_problems", "query": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.product_name", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "GROUP", "BY", "T2.product_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "product_name", "from", "problems", "as", "t1", "join", "product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t2", ".", "product_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the three products that have the most problems?s", "question_toks": ["What", "are", "the", "three", "products", "that", "have", "the", "most", "problems", "?", "s"], "dataset_name": "spider", "guid": 3845}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students does each advisor have?", "sql": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor", "example": {"db_id": "allergy_1", "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor", "query_toks": ["SELECT", "advisor", ",", "count", "(", "*", ")", "FROM", "Student", "GROUP", "BY", "advisor"], "query_toks_no_value": ["select", "advisor", ",", "count", "(", "*", ")", "from", "student", "group", "by", "advisor"], "question": "How many students does each advisor have?", "question_toks": ["How", "many", "students", "does", "each", "advisor", "have", "?"], "dataset_name": "spider", "guid": 3846}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Count the number of likes for each student id.", "sql": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "example": {"db_id": "network_1", "query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id", "query_toks": ["SELECT", "student_id", ",", "count", "(", "*", ")", "FROM", "Likes", "GROUP", "BY", "student_id"], "query_toks_no_value": ["select", "student_id", ",", "count", "(", "*", ")", "from", "likes", "group", "by", "student_id"], "question": "Count the number of likes for each student id.", "question_toks": ["Count", "the", "number", "of", "likes", "for", "each", "student", "id", "."], "dataset_name": "spider", "guid": 3847}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | How many problems are there for product voluptatem?", "sql": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "product", "AS", "T1", "JOIN", "problems", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "WHERE", "T1.product_name", "=", "``", "voluptatem", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "product", "as", "t1", "join", "problems", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t1", ".", "product_name", "=", "value"], "question": "How many problems are there for product voluptatem?", "question_toks": ["How", "many", "problems", "are", "there", "for", "product", "voluptatem", "?"], "dataset_name": "spider", "guid": 3848}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | How many storms had death records?", "sql": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0", "example": {"db_id": "storm_record", "query": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "storm", "WHERE", "Number_Deaths", ">", "0"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "storm", "where", "number_deaths", ">", "value"], "question": "How many storms had death records?", "question_toks": ["How", "many", "storms", "had", "death", "records", "?"], "dataset_name": "spider", "guid": 3849}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the student ids of students who don't have any allergies?", "sql": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy", "example": {"db_id": "allergy_1", "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy", "query_toks": ["SELECT", "StuID", "FROM", "Student", "EXCEPT", "SELECT", "StuID", "FROM", "Has_allergy"], "query_toks_no_value": ["select", "stuid", "from", "student", "except", "select", "stuid", "from", "has_allergy"], "question": "What are the student ids of students who don't have any allergies?", "question_toks": ["What", "are", "the", "student", "ids", "of", "students", "who", "do", "n't", "have", "any", "allergies", "?"], "dataset_name": "spider", "guid": 3850}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the id of users who are followed by Mary or Susan.", "sql": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"", "example": {"db_id": "twitter_1", "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"", "query_toks": ["SELECT", "T2.f1", "FROM", "user_profiles", "AS", "T1", "JOIN", "follows", "AS", "T2", "ON", "T1.uid", "=", "T2.f2", "WHERE", "T1.name", "=", "``", "Mary", "''", "OR", "T1.name", "=", "``", "Susan", "''"], "query_toks_no_value": ["select", "t2", ".", "f1", "from", "user_profiles", "as", "t1", "join", "follows", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "f2", "where", "t1", ".", "name", "=", "value", "or", "t1", ".", "name", "=", "value"], "question": "Find the id of users who are followed by Mary or Susan.", "question_toks": ["Find", "the", "id", "of", "users", "who", "are", "followed", "by", "Mary", "or", "Susan", "."], "dataset_name": "spider", "guid": 3851}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.", "sql": "SELECT name , operating_system FROM web_client_accelerator EXCEPT SELECT T1.name , T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'", "example": {"db_id": "browser_web", "query": "SELECT name ,  operating_system FROM web_client_accelerator EXCEPT SELECT T1.name ,  T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T3.name  =  'Opera'", "query_toks": ["SELECT", "name", ",", "operating_system", "FROM", "web_client_accelerator", "EXCEPT", "SELECT", "T1.name", ",", "T1.operating_system", "FROM", "web_client_accelerator", "AS", "T1", "JOIN", "accelerator_compatible_browser", "AS", "T2", "ON", "T2.accelerator_id", "=", "T1.id", "JOIN", "browser", "AS", "T3", "ON", "T2.browser_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Opera", "'"], "query_toks_no_value": ["select", "name", ",", "operating_system", "from", "web_client_accelerator", "except", "select", "t1", ".", "name", ",", "t1", ".", "operating_system", "from", "web_client_accelerator", "as", "t1", "join", "accelerator_compatible_browser", "as", "t2", "on", "t2", ".", "accelerator_id", "=", "t1", ".", "id", "join", "browser", "as", "t3", "on", "t2", ".", "browser_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value"], "question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.", "question_toks": ["Show", "the", "accelerator", "names", "and", "supporting", "operating", "systems", "that", "are", "not", "compatible", "with", "the", "browser", "named", "'Opera", "'", "."], "dataset_name": "spider", "guid": 3852}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the age of the friend of Zach with longest year relationship?", "sql": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "example": {"db_id": "network_2", "query": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')", "query_toks": ["SELECT", "T1.age", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T2.name", "=", "'Zach", "'", "AND", "T2.year", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "PersonFriend", "WHERE", "name", "=", "'Zach", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "age", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t2", ".", "name", "=", "value", "and", "t2", ".", "year", "=", "(", "select", "max", "(", "year", ")", "from", "personfriend", "where", "name", "=", "value", ")"], "question": "What is the age of the friend of Zach with longest year relationship?", "question_toks": ["What", "is", "the", "age", "of", "the", "friend", "of", "Zach", "with", "longest", "year", "relationship", "?"], "dataset_name": "spider", "guid": 3853}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | Show the names of buildings except for those having an institution founded in 2003.", "sql": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003", "example": {"db_id": "protein_institute", "query": "SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  =  2003", "query_toks": ["SELECT", "name", "FROM", "building", "EXCEPT", "SELECT", "T1.name", "FROM", "building", "AS", "T1", "JOIN", "institution", "AS", "T2", "ON", "T1.building_id", "=", "T2.building_id", "WHERE", "T2.founded", "=", "2003"], "query_toks_no_value": ["select", "name", "from", "building", "except", "select", "t1", ".", "name", "from", "building", "as", "t1", "join", "institution", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "building_id", "where", "t2", ".", "founded", "=", "value"], "question": "Show the names of buildings except for those having an institution founded in 2003.", "question_toks": ["Show", "the", "names", "of", "buildings", "except", "for", "those", "having", "an", "institution", "founded", "in", "2003", "."], "dataset_name": "spider", "guid": 3854}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.", "sql": "SELECT DISTINCT staff_first_name , staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1", "example": {"db_id": "tracking_software_problems", "query": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1", "query_toks": ["SELECT", "DISTINCT", "staff_first_name", ",", "staff_last_name", "FROM", "staff", "AS", "T1", "JOIN", "problem_log", "AS", "T2", "ON", "T1.staff_id", "=", "T2.assigned_to_staff_id", "WHERE", "T2.problem_id", "=", "1"], "query_toks_no_value": ["select", "distinct", "staff_first_name", ",", "staff_last_name", "from", "staff", "as", "t1", "join", "problem_log", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "assigned_to_staff_id", "where", "t2", ".", "problem_id", "=", "value"], "question": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.", "question_toks": ["List", "the", "first", "and", "last", "names", "of", "all", "distinct", "staff", "members", "who", "are", "assigned", "to", "the", "problem", "whose", "id", "is", "1", "."], "dataset_name": "spider", "guid": 3855}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Find the average age of the students who have allergies with food and animal types.", "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")", "example": {"db_id": "allergy_1", "query": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")", "query_toks": ["SELECT", "avg", "(", "age", ")", "FROM", "Student", "WHERE", "StuID", "IN", "(", "SELECT", "T1.StuID", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_Type", "AS", "T2", "ON", "T1.Allergy", "=", "T2.Allergy", "WHERE", "T2.allergytype", "=", "``", "food", "''", "INTERSECT", "SELECT", "T1.StuID", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_Type", "AS", "T2", "ON", "T1.Allergy", "=", "T2.Allergy", "WHERE", "T2.allergytype", "=", "``", "animal", "''", ")"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "in", "(", "select", "t1", ".", "stuid", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "where", "t2", ".", "allergytype", "=", "value", "intersect", "select", "t1", ".", "stuid", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "where", "t2", ".", "allergytype", "=", "value", ")"], "question": "Find the average age of the students who have allergies with food and animal types.", "question_toks": ["Find", "the", "average", "age", "of", "the", "students", "who", "have", "allergies", "with", "food", "and", "animal", "types", "."], "dataset_name": "spider", "guid": 3856}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is average age for different job title?", "sql": "SELECT avg(age) ,  job FROM Person GROUP BY job", "example": {"db_id": "network_2", "query": "SELECT avg(age) ,  job FROM Person GROUP BY job", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "job", "FROM", "Person", "GROUP", "BY", "job"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "job", "from", "person", "group", "by", "job"], "question": "What is average age for different job title?", "question_toks": ["What", "is", "average", "age", "for", "different", "job", "title", "?"], "dataset_name": "spider", "guid": 3857}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show names of all high school students who do not have any friends.", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "example": {"db_id": "network_1", "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "query_toks": ["SELECT", "name", "FROM", "Highschooler", "EXCEPT", "SELECT", "T2.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id"], "query_toks_no_value": ["select", "name", "from", "highschooler", "except", "select", "t2", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id"], "question": "Show names of all high school students who do not have any friends.", "question_toks": ["Show", "names", "of", "all", "high", "school", "students", "who", "do", "not", "have", "any", "friends", "."], "dataset_name": "spider", "guid": 3858}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | For each product with some problems, list the count of problems and the product id.", "sql": "SELECT count(*) , T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id", "example": {"db_id": "tracking_software_problems", "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T2.product_id", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "GROUP", "BY", "T2.product_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "product_id", "from", "problems", "as", "t1", "join", "product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t2", ".", "product_id"], "question": "For each product with some problems, list the count of problems and the product id.", "question_toks": ["For", "each", "product", "with", "some", "problems", ",", "list", "the", "count", "of", "problems", "and", "the", "product", "id", "."], "dataset_name": "spider", "guid": 3859}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | List all the log ids and their descriptions from the problem logs.", "sql": "SELECT problem_log_id, log_entry_description FROM problem_log", "example": {"db_id": "tracking_software_problems", "query": "SELECT problem_log_id ,  log_entry_description FROM problem_log", "query_toks": ["SELECT", "problem_log_id", ",", "log_entry_description", "FROM", "problem_log"], "query_toks_no_value": ["select", "problem_log_id", ",", "log_entry_description", "from", "problem_log"], "question": "List all the log ids and their descriptions from the problem logs.", "question_toks": ["List", "all", "the", "log", "ids", "and", "their", "descriptions", "from", "the", "problem", "logs", "."], "dataset_name": "spider", "guid": 3860}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'", "example": {"db_id": "dog_kennels", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "query_toks": ["SELECT", "T1.first_name", ",", "T2.name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "WHERE", "T1.state", "=", "'Virginia", "'"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t2", ".", "name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "where", "t1", ".", "state", "=", "value"], "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "question_toks": ["Which", "dogs", "are", "owned", "by", "someone", "who", "lives", "in", "Virginia", "?", "List", "the", "owner", "'s", "first", "name", "and", "the", "dog", "'s", "name", "."], "dataset_name": "spider", "guid": 3861}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Who are the friends of Bob?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'", "example": {"db_id": "network_2", "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'", "query_toks": ["SELECT", "T2.friend", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T1.name", "=", "'Bob", "'"], "query_toks_no_value": ["select", "t2", ".", "friend", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t1", ".", "name", "=", "value"], "question": "Who are the friends of Bob?", "question_toks": ["Who", "are", "the", "friends", "of", "Bob", "?"], "dataset_name": "spider", "guid": 3862}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | How many storms occured in each region?", "sql": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id", "example": {"db_id": "storm_record", "query": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id", "query_toks": ["SELECT", "T1.region_name", ",", "count", "(", "*", ")", "FROM", "region", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id", "GROUP", "BY", "T1.region_id"], "query_toks_no_value": ["select", "t1", ".", "region_name", ",", "count", "(", "*", ")", "from", "region", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "group", "by", "t1", ".", "region_id"], "question": "How many storms occured in each region?", "question_toks": ["How", "many", "storms", "occured", "in", "each", "region", "?"], "dataset_name": "spider", "guid": 3863}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | What are the names of shops that do not have any devices in stock?", "sql": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)", "example": {"db_id": "device", "query": "SELECT Shop_Name FROM shop WHERE Shop_ID NOT IN (SELECT Shop_ID FROM stock)", "query_toks": ["SELECT", "Shop_Name", "FROM", "shop", "WHERE", "Shop_ID", "NOT", "IN", "(", "SELECT", "Shop_ID", "FROM", "stock", ")"], "query_toks_no_value": ["select", "shop_name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "stock", ")"], "question": "What are the names of shops that do not have any devices in stock?", "question_toks": ["What", "are", "the", "names", "of", "shops", "that", "do", "not", "have", "any", "devices", "in", "stock", "?"], "dataset_name": "spider", "guid": 3864}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Which product has the most problems? Give me the number of problems and the product name.", "sql": "SELECT count(*) , T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_software_problems", "query": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.product_name", "FROM", "product", "AS", "T1", "JOIN", "problems", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "GROUP", "BY", "T1.product_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "product_name", "from", "product", "as", "t1", "join", "problems", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which product has the most problems? Give me the number of problems and the product name.", "question_toks": ["Which", "product", "has", "the", "most", "problems", "?", "Give", "me", "the", "number", "of", "problems", "and", "the", "product", "name", "."], "dataset_name": "spider", "guid": 3865}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Please show different software platforms and the corresponding number of devices using each.", "sql": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform", "example": {"db_id": "device", "query": "SELECT Software_Platform ,  COUNT(*) FROM device GROUP BY Software_Platform", "query_toks": ["SELECT", "Software_Platform", ",", "COUNT", "(", "*", ")", "FROM", "device", "GROUP", "BY", "Software_Platform"], "query_toks_no_value": ["select", "software_platform", ",", "count", "(", "*", ")", "from", "device", "group", "by", "software_platform"], "question": "Please show different software platforms and the corresponding number of devices using each.", "question_toks": ["Please", "show", "different", "software", "platforms", "and", "the", "corresponding", "number", "of", "devices", "using", "each", "."], "dataset_name": "spider", "guid": 3866}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported > ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )", "example": {"db_id": "tracking_software_problems", "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )", "query_toks": ["SELECT", "T1.problem_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "date_problem_reported", ">", "(", "SELECT", "max", "(", "date_problem_reported", ")", "FROM", "problems", "AS", "T3", "JOIN", "staff", "AS", "T4", "ON", "T3.reported_by_staff_id", "=", "T4.staff_id", "WHERE", "T4.staff_first_name", "=", "``", "Rylan", "''", "AND", "T4.staff_last_name", "=", "``", "Homenick", "''", ")"], "query_toks_no_value": ["select", "t1", ".", "problem_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "date_problem_reported", ">", "(", "select", "max", "(", "date_problem_reported", ")", "from", "problems", "as", "t3", "join", "staff", "as", "t4", "on", "t3", ".", "reported_by_staff_id", "=", "t4", ".", "staff_id", "where", "t4", ".", "staff_first_name", "=", "value", "and", "t4", ".", "staff_last_name", "=", "value", ")"], "question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.", "question_toks": ["Find", "the", "ids", "of", "the", "problems", "reported", "after", "the", "date", "of", "any", "problems", "reported", "by", "the", "staff", "Rylan", "Homenick", "."], "dataset_name": "spider", "guid": 3867}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What are the names of students who have no friends?", "sql": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "example": {"db_id": "network_1", "query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id", "query_toks": ["SELECT", "name", "FROM", "Highschooler", "EXCEPT", "SELECT", "T2.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id"], "query_toks_no_value": ["select", "name", "from", "highschooler", "except", "select", "t2", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id"], "question": "What are the names of students who have no friends?", "question_toks": ["What", "are", "the", "names", "of", "students", "who", "have", "no", "friends", "?"], "dataset_name": "spider", "guid": 3868}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show the ID of the high schooler named Kyle.", "sql": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "example": {"db_id": "network_1", "query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\"", "query_toks": ["SELECT", "ID", "FROM", "Highschooler", "WHERE", "name", "=", "``", "Kyle", "''"], "query_toks_no_value": ["select", "id", "from", "highschooler", "where", "name", "=", "value"], "question": "Show the ID of the high schooler named Kyle.", "question_toks": ["Show", "the", "ID", "of", "the", "high", "schooler", "named", "Kyle", "."], "dataset_name": "spider", "guid": 3869}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | How many buildings are there?", "sql": "SELECT count(*) FROM building", "example": {"db_id": "protein_institute", "query": "SELECT count(*) FROM building", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "building"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "building"], "question": "How many buildings are there?", "question_toks": ["How", "many", "buildings", "are", "there", "?"], "dataset_name": "spider", "guid": 3870}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the average number of followers for the users who had some tweets.", "sql": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)", "example": {"db_id": "twitter_1", "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)", "query_toks": ["SELECT", "avg", "(", "followers", ")", "FROM", "user_profiles", "WHERE", "UID", "IN", "(", "SELECT", "UID", "FROM", "tweets", ")"], "query_toks_no_value": ["select", "avg", "(", "followers", ")", "from", "user_profiles", "where", "uid", "in", "(", "select", "uid", "from", "tweets", ")"], "question": "Find the average number of followers for the users who had some tweets.", "question_toks": ["Find", "the", "average", "number", "of", "followers", "for", "the", "users", "who", "had", "some", "tweets", "."], "dataset_name": "spider", "guid": 3871}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "sql": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith'", "example": {"db_id": "pets_1", "query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'", "query_toks": ["SELECT", "T2.petid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "WHERE", "T1.Lname", "=", "'Smith", "'"], "query_toks_no_value": ["select", "t2", ".", "petid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t1", ".", "lname", "=", "value"], "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "question_toks": ["Find", "the", "id", "of", "the", "pet", "owned", "by", "student", "whose", "last", "name", "is", "\u2018Smith\u2019", "."], "dataset_name": "spider", "guid": 3872}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What is the total number of deaths and damage for all storms with a max speed greater than the average?", "sql": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)", "example": {"db_id": "storm_record", "query": "SELECT sum(number_deaths) ,  sum(damage_millions_USD) FROM storm WHERE max_speed  >  (SELECT avg(max_speed) FROM storm)", "query_toks": ["SELECT", "sum", "(", "number_deaths", ")", ",", "sum", "(", "damage_millions_USD", ")", "FROM", "storm", "WHERE", "max_speed", ">", "(", "SELECT", "avg", "(", "max_speed", ")", "FROM", "storm", ")"], "query_toks_no_value": ["select", "sum", "(", "number_deaths", ")", ",", "sum", "(", "damage_millions_usd", ")", "from", "storm", "where", "max_speed", ">", "(", "select", "avg", "(", "max_speed", ")", "from", "storm", ")"], "question": "What is the total number of deaths and damage for all storms with a max speed greater than the average?", "question_toks": ["What", "is", "the", "total", "number", "of", "deaths", "and", "damage", "for", "all", "storms", "with", "a", "max", "speed", "greater", "than", "the", "average", "?"], "dataset_name": "spider", "guid": 3873}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all advisors and corresponding number of students.", "sql": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor", "example": {"db_id": "allergy_1", "query": "SELECT advisor ,  count(*) FROM Student GROUP BY advisor", "query_toks": ["SELECT", "advisor", ",", "count", "(", "*", ")", "FROM", "Student", "GROUP", "BY", "advisor"], "query_toks_no_value": ["select", "advisor", ",", "count", "(", "*", ")", "from", "student", "group", "by", "advisor"], "question": "Show all advisors and corresponding number of students.", "question_toks": ["Show", "all", "advisors", "and", "corresponding", "number", "of", "students", "."], "dataset_name": "spider", "guid": 3874}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the names of storms that did not affect two or more regions?", "sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2", "example": {"db_id": "storm_record", "query": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "name", "FROM", "storm", "EXCEPT", "SELECT", "T1.name", "FROM", "storm", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.storm_id", "=", "T2.storm_id", "GROUP", "BY", "T1.storm_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "name", "from", "storm", "except", "select", "t1", ".", "name", "from", "storm", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "storm_id", "=", "t2", ".", "storm_id", "group", "by", "t1", ".", "storm_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of storms that did not affect two or more regions?", "question_toks": ["What", "are", "the", "names", "of", "storms", "that", "did", "not", "affect", "two", "or", "more", "regions", "?"], "dataset_name": "spider", "guid": 3875}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What is the average weight for each type of pet?", "sql": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "example": {"db_id": "pets_1", "query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype", "query_toks": ["SELECT", "avg", "(", "weight", ")", ",", "pettype", "FROM", "pets", "GROUP", "BY", "pettype"], "query_toks_no_value": ["select", "avg", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype"], "question": "What is the average weight for each type of pet?", "question_toks": ["What", "is", "the", "average", "weight", "for", "each", "type", "of", "pet", "?"], "dataset_name": "spider", "guid": 3876}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the names of enzymes that include the string 'ALA'?", "sql": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"", "query_toks": ["SELECT", "name", "FROM", "enzyme", "WHERE", "name", "LIKE", "``", "%", "ALA", "%", "''"], "query_toks_no_value": ["select", "name", "from", "enzyme", "where", "name", "like", "value"], "question": "What are the names of enzymes that include the string 'ALA'?", "question_toks": ["What", "are", "the", "names", "of", "enzymes", "that", "include", "the", "string", "'ALA", "'", "?"], "dataset_name": "spider", "guid": 3877}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Provide the last name of the youngest student.", "sql": "SELECT LName FROM Student WHERE age = (SELECT min(age) FROM Student)", "example": {"db_id": "allergy_1", "query": "SELECT LName FROM Student WHERE age  =  (SELECT min(age) FROM Student)", "query_toks": ["SELECT", "LName", "FROM", "Student", "WHERE", "age", "=", "(", "SELECT", "min", "(", "age", ")", "FROM", "Student", ")"], "query_toks_no_value": ["select", "lname", "from", "student", "where", "age", "=", "(", "select", "min", "(", "age", ")", "from", "student", ")"], "question": "Provide the last name of the youngest student.", "question_toks": ["Provide", "the", "last", "name", "of", "the", "youngest", "student", "."], "dataset_name": "spider", "guid": 3878}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What is the total count of enzymes?", "sql": "SELECT count(*) FROM enzyme", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT count(*) FROM enzyme", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "enzyme"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "enzyme"], "question": "What is the total count of enzymes?", "question_toks": ["What", "is", "the", "total", "count", "of", "enzymes", "?"], "dataset_name": "spider", "guid": 3879}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".", "sql": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')", "example": {"db_id": "twitter_1", "query": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')", "query_toks": ["SELECT", "T1.name", "FROM", "user_profiles", "AS", "T1", "JOIN", "follows", "AS", "T2", "ON", "T1.uid", "=", "T2.f1", "GROUP", "BY", "T2.f1", "HAVING", "count", "(", "*", ")", ">", "(", "SELECT", "count", "(", "*", ")", "FROM", "user_profiles", "AS", "T1", "JOIN", "follows", "AS", "T2", "ON", "T1.uid", "=", "T2.f1", "WHERE", "T1.name", "=", "'Tyler", "Swift", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "user_profiles", "as", "t1", "join", "follows", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "f1", "group", "by", "t2", ".", "f1", "having", "count", "(", "*", ")", ">", "(", "select", "count", "(", "*", ")", "from", "user_profiles", "as", "t1", "join", "follows", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "f1", "where", "t1", ".", "name", "=", "value", ")"], "question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".", "question_toks": ["Find", "the", "names", "of", "the", "users", "whose", "number", "of", "followers", "is", "greater", "than", "that", "of", "the", "user", "named", "``", "Tyler", "Swift", "''", "."], "dataset_name": "spider", "guid": 3880}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?", "sql": "SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activator'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'", "query_toks": ["SELECT", "T1.name", ",", "T1.trade_name", "FROM", "medicine", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.medicine_id", "=", "T1.id", "WHERE", "interaction_type", "=", "'inhibitor", "'", "INTERSECT", "SELECT", "T1.name", ",", "T1.trade_name", "FROM", "medicine", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.medicine_id", "=", "T1.id", "WHERE", "interaction_type", "=", "'activitor", "'"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "trade_name", "from", "medicine", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "medicine_id", "=", "t1", ".", "id", "where", "interaction_type", "=", "value", "intersect", "select", "t1", ".", "name", ",", "t1", ".", "trade_name", "from", "medicine", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "medicine_id", "=", "t1", ".", "id", "where", "interaction_type", "=", "value"], "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?", "question_toks": ["What", "are", "the", "medicine", "and", "trade", "names", "that", "can", "interact", "as", "an", "inhibitor", "and", "activitor", "with", "enzymes", "?"], "dataset_name": "spider", "guid": 3881}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Count the number of high schoolers in grades 9 or 10.", "sql": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "example": {"db_id": "network_1", "query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Highschooler", "WHERE", "grade", "=", "9", "OR", "grade", "=", "10"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "value", "or", "grade", "=", "value"], "question": "Count the number of high schoolers in grades 9 or 10.", "question_toks": ["Count", "the", "number", "of", "high", "schoolers", "in", "grades", "9", "or", "10", "."], "dataset_name": "spider", "guid": 3882}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported < ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )", "example": {"db_id": "tracking_software_problems", "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )", "query_toks": ["SELECT", "T1.problem_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "date_problem_reported", "<", "(", "SELECT", "min", "(", "date_problem_reported", ")", "FROM", "problems", "AS", "T3", "JOIN", "staff", "AS", "T4", "ON", "T3.reported_by_staff_id", "=", "T4.staff_id", "WHERE", "T4.staff_first_name", "=", "``", "Lysanne", "''", "AND", "T4.staff_last_name", "=", "``", "Turcotte", "''", ")"], "query_toks_no_value": ["select", "t1", ".", "problem_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "date_problem_reported", "<", "(", "select", "min", "(", "date_problem_reported", ")", "from", "problems", "as", "t3", "join", "staff", "as", "t4", "on", "t3", ".", "reported_by_staff_id", "=", "t4", ".", "staff_id", "where", "t4", ".", "staff_first_name", "=", "value", "and", "t4", ".", "staff_last_name", "=", "value", ")"], "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?", "question_toks": ["What", "are", "the", "ids", "of", "the", "problems", "reported", "before", "the", "date", "of", "any", "problem", "reported", "by", "Lysanne", "Turcotte", "?"], "dataset_name": "spider", "guid": 3883}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students are there?", "sql": "SELECT COUNT(*) FROM Student", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Student", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student"], "question": "How many students are there?", "question_toks": ["How", "many", "students", "are", "there", "?"], "dataset_name": "spider", "guid": 3884}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Find the ids of the problems reported after 1978-06-26.", "sql": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"", "query_toks": ["SELECT", "problem_id", "FROM", "problems", "WHERE", "date_problem_reported", ">", "``", "1978-06-26", "''"], "query_toks_no_value": ["select", "problem_id", "from", "problems", "where", "date_problem_reported", ">", "value"], "question": "Find the ids of the problems reported after 1978-06-26.", "question_toks": ["Find", "the", "ids", "of", "the", "problems", "reported", "after", "1978-06-26", "."], "dataset_name": "spider", "guid": 3885}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all allergies with type food.", "sql": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"", "example": {"db_id": "allergy_1", "query": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"", "query_toks": ["SELECT", "DISTINCT", "allergy", "FROM", "Allergy_type", "WHERE", "allergytype", "=", "``", "food", "''"], "query_toks_no_value": ["select", "distinct", "allergy", "from", "allergy_type", "where", "allergytype", "=", "value"], "question": "Show all allergies with type food.", "question_toks": ["Show", "all", "allergies", "with", "type", "food", "."], "dataset_name": "spider", "guid": 3886}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the first names of owners living in Virginia and the names of dogs they own.", "sql": "SELECT T1.first_name , T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'", "example": {"db_id": "dog_kennels", "query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'", "query_toks": ["SELECT", "T1.first_name", ",", "T2.name", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "WHERE", "T1.state", "=", "'Virginia", "'"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t2", ".", "name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "where", "t1", ".", "state", "=", "value"], "question": "Find the first names of owners living in Virginia and the names of dogs they own.", "question_toks": ["Find", "the", "first", "names", "of", "owners", "living", "in", "Virginia", "and", "the", "names", "of", "dogs", "they", "own", "."], "dataset_name": "spider", "guid": 3887}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the name of people whose age is greater than any engineer sorted by their age.", "sql": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age", "example": {"db_id": "network_2", "query": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age", "query_toks": ["SELECT", "name", "FROM", "Person", "WHERE", "age", ">", "(", "SELECT", "min", "(", "age", ")", "FROM", "person", "WHERE", "job", "=", "'engineer", "'", ")", "ORDER", "BY", "age"], "query_toks_no_value": ["select", "name", "from", "person", "where", "age", ">", "(", "select", "min", "(", "age", ")", "from", "person", "where", "job", "=", "value", ")", "order", "by", "age"], "question": "Find the name of people whose age is greater than any engineer sorted by their age.", "question_toks": ["Find", "the", "name", "of", "people", "whose", "age", "is", "greater", "than", "any", "engineer", "sorted", "by", "their", "age", "."], "dataset_name": "spider", "guid": 3888}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the id of students who do not have a cat pet.", "sql": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "example": {"db_id": "pets_1", "query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'", "query_toks": ["SELECT", "stuid", "FROM", "student", "EXCEPT", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'"], "query_toks_no_value": ["select", "stuid", "from", "student", "except", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value"], "question": "Find the id of students who do not have a cat pet.", "question_toks": ["Find", "the", "id", "of", "students", "who", "do", "not", "have", "a", "cat", "pet", "."], "dataset_name": "spider", "guid": 3889}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | List the first name of all the professionals along with the description of the treatment they have done.", "sql": "SELECT DISTINCT T1.first_name , T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code", "example": {"db_id": "dog_kennels", "query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code", "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T3.treatment_type_description", "FROM", "professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "JOIN", "Treatment_types", "AS", "T3", "ON", "T2.treatment_type_code", "=", "T3.treatment_type_code"], "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t3", ".", "treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "join", "treatment_types", "as", "t3", "on", "t2", ".", "treatment_type_code", "=", "t3", ".", "treatment_type_code"], "question": "List the first name of all the professionals along with the description of the treatment they have done.", "question_toks": ["List", "the", "first", "name", "of", "all", "the", "professionals", "along", "with", "the", "description", "of", "the", "treatment", "they", "have", "done", "."], "dataset_name": "spider", "guid": 3890}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | How many different types of pet are there?", "sql": "SELECT count(DISTINCT pettype) FROM pets", "example": {"db_id": "pets_1", "query": "SELECT count(DISTINCT pettype) FROM pets", "query_toks": ["SELECT", "count", "(", "DISTINCT", "pettype", ")", "FROM", "pets"], "query_toks_no_value": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets"], "question": "How many different types of pet are there?", "question_toks": ["How", "many", "different", "types", "of", "pet", "are", "there", "?"], "dataset_name": "spider", "guid": 3891}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is average age of male for different job title?", "sql": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job", "example": {"db_id": "network_2", "query": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "job", "FROM", "Person", "WHERE", "gender", "=", "'male", "'", "GROUP", "BY", "job"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "job", "from", "person", "where", "gender", "=", "value", "group", "by", "job"], "question": "What is average age of male for different job title?", "question_toks": ["What", "is", "average", "age", "of", "male", "for", "different", "job", "title", "?"], "dataset_name": "spider", "guid": 3892}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the full names and ages for all female students whose sex is F?", "sql": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "example": {"db_id": "allergy_1", "query": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'", "query_toks": ["SELECT", "Fname", ",", "Lname", ",", "Age", "FROM", "Student", "WHERE", "Sex", "=", "'F", "'"], "query_toks_no_value": ["select", "fname", ",", "lname", ",", "age", "from", "student", "where", "sex", "=", "value"], "question": "What are the full names and ages for all female students whose sex is F?", "question_toks": ["What", "are", "the", "full", "names", "and", "ages", "for", "all", "female", "students", "whose", "sex", "is", "F", "?"], "dataset_name": "spider", "guid": 3893}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?", "sql": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING count(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected) >= 10", "example": {"db_id": "storm_record", "query": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10", "query_toks": ["SELECT", "T1.name", "FROM", "storm", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.storm_id", "=", "T2.storm_id", "GROUP", "BY", "T1.storm_id", "HAVING", "count", "(", "*", ")", ">", "=", "2", "INTERSECT", "SELECT", "T1.name", "FROM", "storm", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.storm_id", "=", "T2.storm_id", "GROUP", "BY", "T1.storm_id", "HAVING", "sum", "(", "T2.number_city_affected", ")", ">", "=", "10"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "storm", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "storm_id", "=", "t2", ".", "storm_id", "group", "by", "t1", ".", "storm_id", "having", "count", "(", "*", ")", ">", "=", "value", "intersect", "select", "t1", ".", "name", "from", "storm", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "storm_id", "=", "t2", ".", "storm_id", "group", "by", "t1", ".", "storm_id", "having", "sum", "(", "t2", ".", "number_city_affected", ")", ">", "=", "value"], "question": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?", "question_toks": ["What", "are", "the", "names", "of", "storms", "that", "both", "affected", "two", "or", "more", "regions", "and", "affected", "a", "total", "of", "10", "or", "more", "cities", "?"], "dataset_name": "spider", "guid": 3894}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Give the number of students living in either HKG or CHI.", "sql": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student", "WHERE", "city_code", "=", "``", "HKG", "''", "OR", "city_code", "=", "``", "CHI", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "where", "city_code", "=", "value", "or", "city_code", "=", "value"], "question": "Give the number of students living in either HKG or CHI.", "question_toks": ["Give", "the", "number", "of", "students", "living", "in", "either", "HKG", "or", "CHI", "."], "dataset_name": "spider", "guid": 3895}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Which professionals have done at least two types of treatments? List the professional id and cell phone.", "sql": "SELECT T1.professional_id , T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING count(*) >= 2", "example": {"db_id": "dog_kennels", "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.professional_id", ",", "T1.cell_number", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "professional_id", ",", "t1", ".", "cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "question_toks": ["Which", "professionals", "have", "done", "at", "least", "two", "types", "of", "treatments", "?", "List", "the", "professional", "id", "and", "cell", "phone", "."], "dataset_name": "spider", "guid": 3896}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?", "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'", "example": {"db_id": "protein_institute", "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "institution", "AS", "T1", "JOIN", "protein", "AS", "T2", "ON", "T1.institution_id", "=", "T2.institution_id", "WHERE", "T1.founded", ">", "1880", "OR", "T1.type", "=", "'Private", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "institution", "as", "t1", "join", "protein", "as", "t2", "on", "t1", ".", "institution_id", "=", "t2", ".", "institution_id", "where", "t1", ".", "founded", ">", "value", "or", "t1", ".", "type", "=", "value"], "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?", "question_toks": ["How", "many", "proteins", "are", "associated", "with", "an", "institution", "founded", "after", "1880", "or", "an", "institution", "with", "type", "``", "Private", "''", "?"], "dataset_name": "spider", "guid": 3897}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | What is the name of the tallest building?", "sql": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1", "example": {"db_id": "protein_institute", "query": "SELECT name FROM building ORDER BY height_feet DESC LIMIT 1", "query_toks": ["SELECT", "name", "FROM", "building", "ORDER", "BY", "height_feet", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", "from", "building", "order", "by", "height_feet", "desc", "limit", "value"], "question": "What is the name of the tallest building?", "question_toks": ["What", "is", "the", "name", "of", "the", "tallest", "building", "?"], "dataset_name": "spider", "guid": 3898}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | What is the id and market share of the browser Safari?", "sql": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'", "example": {"db_id": "browser_web", "query": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'", "query_toks": ["SELECT", "id", ",", "market_share", "FROM", "browser", "WHERE", "name", "=", "'Safari", "'"], "query_toks_no_value": ["select", "id", ",", "market_share", "from", "browser", "where", "name", "=", "value"], "question": "What is the id and market share of the browser Safari?", "question_toks": ["What", "is", "the", "id", "and", "market", "share", "of", "the", "browser", "Safari", "?"], "dataset_name": "spider", "guid": 3899}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Who is the person that has no friend?", "sql": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend", "example": {"db_id": "network_2", "query": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend", "query_toks": ["SELECT", "name", "FROM", "person", "EXCEPT", "SELECT", "name", "FROM", "PersonFriend"], "query_toks_no_value": ["select", "name", "from", "person", "except", "select", "name", "from", "personfriend"], "question": "Who is the person that has no friend?", "question_toks": ["Who", "is", "the", "person", "that", "has", "no", "friend", "?"], "dataset_name": "spider", "guid": 3900}}
{"text": "train: id, train_number, name, origin, destination, time, interval; station: id, network_name, services, local_authority; route: train_id, station_id; weekly_weather: station_id, day_of_week, high_temperature, low_temperature, precipitation, wind_speed_mph | Give me the times and numbers of all trains that go to Chennai, ordered by time.", "sql": "SELECT TIME , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME", "example": {"db_id": "station_weather", "query": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME", "query_toks": ["SELECT", "TIME", ",", "train_number", "FROM", "train", "WHERE", "destination", "=", "'Chennai", "'", "ORDER", "BY", "TIME"], "query_toks_no_value": ["select", "time", ",", "train_number", "from", "train", "where", "destination", "=", "value", "order", "by", "time"], "question": "Give me the times and numbers of all trains that go to Chennai, ordered by time.", "question_toks": ["Give", "me", "the", "times", "and", "numbers", "of", "all", "trains", "that", "go", "to", "Chennai", ",", "ordered", "by", "time", "."], "dataset_name": "spider", "guid": 3901}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the name of the person whose age is below 30?", "sql": "SELECT name FROM Person WHERE age  <  30", "example": {"db_id": "network_2", "query": "SELECT name FROM Person WHERE age  <  30", "query_toks": ["SELECT", "name", "FROM", "Person", "WHERE", "age", "<", "30"], "query_toks_no_value": ["select", "name", "from", "person", "where", "age", "<", "value"], "question": "What is the name of the person whose age is below 30?", "question_toks": ["What", "is", "the", "name", "of", "the", "person", "whose", "age", "is", "below", "30", "?"], "dataset_name": "spider", "guid": 3902}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the average and maximum age for each type of pet.", "sql": "SELECT avg(pet_age) , max(pet_age) , pettype FROM pets GROUP BY pettype", "example": {"db_id": "pets_1", "query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype", "query_toks": ["SELECT", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "FROM", "pets", "GROUP", "BY", "pettype"], "query_toks_no_value": ["select", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "from", "pets", "group", "by", "pettype"], "question": "Find the average and maximum age for each type of pet.", "question_toks": ["Find", "the", "average", "and", "maximum", "age", "for", "each", "type", "of", "pet", "."], "dataset_name": "spider", "guid": 3903}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = \"Bosco\"", "query_toks": ["SELECT", "T1.problem_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_last_name", "=", "``", "Bosco", "''"], "query_toks_no_value": ["select", "t1", ".", "problem_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_last_name", "=", "value"], "question": "Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems.", "question_toks": ["Which", "problems", "are", "reported", "by", "the", "staff", "with", "last", "name", "``", "Bosco", "''", "?", "Show", "the", "ids", "of", "the", "problems", "."], "dataset_name": "spider", "guid": 3904}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the name of all the people who are older than at least one engineer? Order them by age.", "sql": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age", "example": {"db_id": "network_2", "query": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age", "query_toks": ["SELECT", "name", "FROM", "Person", "WHERE", "age", ">", "(", "SELECT", "min", "(", "age", ")", "FROM", "person", "WHERE", "job", "=", "'engineer", "'", ")", "ORDER", "BY", "age"], "query_toks_no_value": ["select", "name", "from", "person", "where", "age", ">", "(", "select", "min", "(", "age", ")", "from", "person", "where", "job", "=", "value", ")", "order", "by", "age"], "question": "What is the name of all the people who are older than at least one engineer? Order them by age.", "question_toks": ["What", "is", "the", "name", "of", "all", "the", "people", "who", "are", "older", "than", "at", "least", "one", "engineer", "?", "Order", "them", "by", "age", "."], "dataset_name": "spider", "guid": 3905}}