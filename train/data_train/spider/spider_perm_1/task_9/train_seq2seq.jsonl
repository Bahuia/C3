{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What is the average unit price of rock tracks?", "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "example": {"db_id": "chinook_1", "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "query_toks": ["SELECT", "AVG", "(", "T2.UnitPrice", ")", "FROM", "GENRE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.GenreId", "=", "T2.GenreId", "WHERE", "T1.Name", "=", "``", "Rock", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "unitprice", ")", "from", "genre", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "genreid", "=", "t2", ".", "genreid", "where", "t1", ".", "name", "=", "value"], "question": "What is the average unit price of rock tracks?", "question_toks": ["What", "is", "the", "average", "unit", "price", "of", "rock", "tracks", "?"], "guid": 5031}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show other account details for account with name 338.", "sql": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"", "query_toks": ["SELECT", "other_account_details", "FROM", "Accounts", "WHERE", "account_name", "=", "``", "338", "''"], "query_toks_no_value": ["select", "other_account_details", "from", "accounts", "where", "account_name", "=", "value"], "question": "Show other account details for account with name 338.", "question_toks": ["Show", "other", "account", "details", "for", "account", "with", "name", "338", "."], "guid": 5032}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What are the emails and phone numbers of custoemrs who have never filed a complaint?", "sql": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)", "example": {"db_id": "customer_complaints", "query": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)", "query_toks": ["SELECT", "email_address", ",", "phone_number", "FROM", "customers", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "complaints", ")"], "query_toks_no_value": ["select", "email_address", ",", "phone_number", "from", "customers", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "complaints", ")"], "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?", "question_toks": ["What", "are", "the", "emails", "and", "phone", "numbers", "of", "custoemrs", "who", "have", "never", "filed", "a", "complaint", "?"], "guid": 5033}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the first names and ids for customers who have two or more accounts?", "sql": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.customer_first_name", ",", "T1.customer_id", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "customer_first_name", ",", "t1", ".", "customer_id", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the first names and ids for customers who have two or more accounts?", "question_toks": ["What", "are", "the", "first", "names", "and", "ids", "for", "customers", "who", "have", "two", "or", "more", "accounts", "?"], "guid": 5034}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List every album whose title starts with A in alphabetical order.", "sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "example": {"db_id": "store_1", "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "query_toks": ["SELECT", "title", "FROM", "albums", "WHERE", "title", "LIKE", "'A", "%", "'", "ORDER", "BY", "title", ";"], "query_toks_no_value": ["select", "title", "from", "albums", "where", "title", "like", "value", "order", "by", "title"], "question": "List every album whose title starts with A in alphabetical order.", "question_toks": ["List", "every", "album", "whose", "title", "starts", "with", "A", "in", "alphabetical", "order", "."], "guid": 5035}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?", "sql": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3", "example": {"db_id": "sakila_1", "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3", "query_toks": ["SELECT", "title", ",", "film_id", "FROM", "film", "WHERE", "rental_rate", "=", "0.99", "INTERSECT", "SELECT", "T1.title", ",", "T1.film_id", "FROM", "film", "AS", "T1", "JOIN", "inventory", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id", "HAVING", "count", "(", "*", ")", "<", "3"], "query_toks_no_value": ["select", "title", ",", "film_id", "from", "film", "where", "rental_rate", "=", "value", "intersect", "select", "t1", ".", "title", ",", "t1", ".", "film_id", "from", "film", "as", "t1", "join", "inventory", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id", "having", "count", "(", "*", ")", "<", "value"], "question": "What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?", "question_toks": ["What", "are", "the", "title", "and", "id", "of", "the", "film", "which", "has", "a", "rental", "rate", "of", "0.99", "and", "an", "inventory", "of", "below", "3", "?"], "guid": 5036}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.", "sql": "SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer", "example": {"db_id": "customer_deliveries", "query": "SELECT customer_name ,  customer_phone ,  customer_email FROM Customers ORDER BY date_became_customer", "query_toks": ["SELECT", "customer_name", ",", "customer_phone", ",", "customer_email", "FROM", "Customers", "ORDER", "BY", "date_became_customer"], "query_toks_no_value": ["select", "customer_name", ",", "customer_phone", ",", "customer_email", "from", "customers", "order", "by", "date_became_customer"], "question": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.", "question_toks": ["List", "the", "names", ",", "phone", "numbers", ",", "and", "emails", "of", "all", "customers", "sorted", "by", "their", "dates", "of", "becoming", "customers", "."], "guid": 5037}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the phone number and postal code of the address 1031 Daugavpils Parkway?", "sql": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'", "example": {"db_id": "sakila_1", "query": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'", "query_toks": ["SELECT", "phone", ",", "postal_code", "FROM", "address", "WHERE", "address", "=", "'1031", "Daugavpils", "Parkway", "'"], "query_toks_no_value": ["select", "phone", ",", "postal_code", "from", "address", "where", "address", "=", "value"], "question": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?", "question_toks": ["What", "is", "the", "phone", "number", "and", "postal", "code", "of", "the", "address", "1031", "Daugavpils", "Parkway", "?"], "guid": 5038}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the names of products that have never been ordered?", "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id", "query_toks": ["SELECT", "product_name", "FROM", "Products", "EXCEPT", "SELECT", "T1.product_name", "FROM", "Products", "AS", "T1", "JOIN", "Order_items", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id"], "query_toks_no_value": ["select", "product_name", "from", "products", "except", "select", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id"], "question": "What are the names of products that have never been ordered?", "question_toks": ["What", "are", "the", "names", "of", "products", "that", "have", "never", "been", "ordered", "?"], "guid": 5039}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the first name of the staff who did not give any lesson?", "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id", "example": {"db_id": "driving_school", "query": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id", "query_toks": ["SELECT", "first_name", "FROM", "Staff", "EXCEPT", "SELECT", "T2.first_name", "FROM", "Lessons", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id"], "query_toks_no_value": ["select", "first_name", "from", "staff", "except", "select", "t2", ".", "first_name", "from", "lessons", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id"], "question": "What is the first name of the staff who did not give any lesson?", "question_toks": ["What", "is", "the", "first", "name", "of", "the", "staff", "who", "did", "not", "give", "any", "lesson", "?"], "guid": 5040}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show order ids and the total quantity in each order.", "sql": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id", "query_toks": ["SELECT", "order_id", ",", "sum", "(", "product_quantity", ")", "FROM", "Order_items", "GROUP", "BY", "order_id"], "query_toks_no_value": ["select", "order_id", ",", "sum", "(", "product_quantity", ")", "from", "order_items", "group", "by", "order_id"], "question": "Show order ids and the total quantity in each order.", "question_toks": ["Show", "order", "ids", "and", "the", "total", "quantity", "in", "each", "order", "."], "guid": 5041}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the codes of card types that have 5 or more cards?", "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5", "example": {"db_id": "customers_card_transactions", "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5", "query_toks": ["SELECT", "card_type_code", "FROM", "Customers_cards", "GROUP", "BY", "card_type_code", "HAVING", "count", "(", "*", ")", ">", "=", "5"], "query_toks_no_value": ["select", "card_type_code", "from", "customers_cards", "group", "by", "card_type_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the codes of card types that have 5 or more cards?", "question_toks": ["What", "are", "the", "codes", "of", "card", "types", "that", "have", "5", "or", "more", "cards", "?"], "guid": 5042}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | How many accounts are there for each customer id?", "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id", "query_toks": ["SELECT", "customer_id", ",", "count", "(", "*", ")", "FROM", "Accounts", "GROUP", "BY", "customer_id"], "query_toks_no_value": ["select", "customer_id", ",", "count", "(", "*", ")", "from", "accounts", "group", "by", "customer_id"], "question": "How many accounts are there for each customer id?", "question_toks": ["How", "many", "accounts", "are", "there", "for", "each", "customer", "id", "?"], "guid": 5043}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What is the average unit price of tracks that belong to Jazz genre?", "sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"", "example": {"db_id": "chinook_1", "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"", "query_toks": ["SELECT", "AVG", "(", "UnitPrice", ")", "FROM", "GENRE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.GenreId", "=", "T2.GenreId", "WHERE", "T1.Name", "=", "``", "Jazz", "''"], "query_toks_no_value": ["select", "avg", "(", "unitprice", ")", "from", "genre", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "genreid", "=", "t2", ".", "genreid", "where", "t1", ".", "name", "=", "value"], "question": "What is the average unit price of tracks that belong to Jazz genre?", "question_toks": ["What", "is", "the", "average", "unit", "price", "of", "tracks", "that", "belong", "to", "Jazz", "genre", "?"], "guid": 5044}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".", "sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"", "example": {"db_id": "customer_complaints", "query": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"", "query_toks": ["SELECT", "address_line_1", ",", "address_line_2", "FROM", "customers", "WHERE", "email_address", "=", "``", "vbogisich", "@", "example.org", "''"], "query_toks_no_value": ["select", "address_line_1", ",", "address_line_2", "from", "customers", "where", "email_address", "=", "value"], "question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".", "question_toks": ["Find", "the", "address", "line", "1", "and", "2", "of", "the", "customer", "with", "email", "``", "vbogisich", "@", "example.org", "''", "."], "guid": 5045}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the customers first and last name of 10 least expensive invoices.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "example": {"db_id": "store_1", "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "customers", "AS", "T1", "JOIN", "invoices", "AS", "T2", "ON", "T2.customer_id", "=", "T1.id", "ORDER", "BY", "total", "LIMIT", "10", ";"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "customers", "as", "t1", "join", "invoices", "as", "t2", "on", "t2", ".", "customer_id", "=", "t1", ".", "id", "order", "by", "total", "limit", "value"], "question": "List the customers first and last name of 10 least expensive invoices.", "question_toks": ["List", "the", "customers", "first", "and", "last", "name", "of", "10", "least", "expensive", "invoices", "."], "guid": 5046}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the different transaction types, and how many transactions of each have taken place?", "sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "example": {"db_id": "customers_card_transactions", "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "query_toks": ["SELECT", "transaction_type", ",", "count", "(", "*", ")", "FROM", "Financial_transactions", "GROUP", "BY", "transaction_type"], "query_toks_no_value": ["select", "transaction_type", ",", "count", "(", "*", ")", "from", "financial_transactions", "group", "by", "transaction_type"], "question": "What are the different transaction types, and how many transactions of each have taken place?", "question_toks": ["What", "are", "the", "different", "transaction", "types", ",", "and", "how", "many", "transactions", "of", "each", "have", "taken", "place", "?"], "guid": 5047}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | How many bookings did each customer make? List the customer id, first name, and the count.", "sql": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "example": {"db_id": "products_for_hire", "query": "SELECT T1.customer_id ,  T1.first_name ,  count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "query_toks": ["SELECT", "T1.customer_id", ",", "T1.first_name", ",", "count", "(", "*", ")", "FROM", "Customers", "AS", "T1", "JOIN", "bookings", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id"], "query_toks_no_value": ["select", "t1", ".", "customer_id", ",", "t1", ".", "first_name", ",", "count", "(", "*", ")", "from", "customers", "as", "t1", "join", "bookings", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id"], "question": "How many bookings did each customer make? List the customer id, first name, and the count.", "question_toks": ["How", "many", "bookings", "did", "each", "customer", "make", "?", "List", "the", "customer", "id", ",", "first", "name", ",", "and", "the", "count", "."], "guid": 5048}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the total amount of money spent by Lucas Mancini?", "sql": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";", "example": {"db_id": "store_1", "query": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";", "query_toks": ["SELECT", "sum", "(", "T2.total", ")", "FROM", "customers", "AS", "T1", "JOIN", "invoices", "AS", "T2", "ON", "T1.id", "=", "T2.customer_id", "WHERE", "T1.first_name", "=", "``", "Lucas", "''", "AND", "T1.last_name", "=", "``", "Mancini", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "total", ")", "from", "customers", "as", "t1", "join", "invoices", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "customer_id", "where", "t1", ".", "first_name", "=", "value", "and", "t1", ".", "last_name", "=", "value"], "question": "What is the total amount of money spent by Lucas Mancini?", "question_toks": ["What", "is", "the", "total", "amount", "of", "money", "spent", "by", "Lucas", "Mancini", "?"], "guid": 5049}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Count the number of characteristics of the product named 'laurel'.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "laurel", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value"], "question": "Count the number of characteristics of the product named 'laurel'.", "question_toks": ["Count", "the", "number", "of", "characteristics", "of", "the", "product", "named", "'laurel", "'", "."], "guid": 5050}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Which state has the most customers?", "sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "state", "FROM", "customers", "GROUP", "BY", "state", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "state", "from", "customers", "group", "by", "state", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Which state has the most customers?", "question_toks": ["Which", "state", "has", "the", "most", "customers", "?"], "guid": 5051}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the first name and the last name of the customer who made the earliest rental?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "customer", "AS", "T1", "JOIN", "rental", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "ORDER", "BY", "T2.rental_date", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "customer", "as", "t1", "join", "rental", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "order", "by", "t2", ".", "rental_date", "asc", "limit", "value"], "question": "What is the first name and the last name of the customer who made the earliest rental?", "question_toks": ["What", "is", "the", "first", "name", "and", "the", "last", "name", "of", "the", "customer", "who", "made", "the", "earliest", "rental", "?"], "guid": 5052}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the first and last names of the top 10 longest-serving employees?", "sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "example": {"db_id": "store_1", "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "employees", "ORDER", "BY", "hire_date", "ASC", "LIMIT", "10", ";"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "employees", "order", "by", "hire_date", "asc", "limit", "value"], "question": "What are the first and last names of the top 10 longest-serving employees?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "the", "top", "10", "longest-serving", "employees", "?"], "guid": 5053}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Give me the average and minimum price (in Euro) of the products.", "sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents", "example": {"db_id": "product_catalog", "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents", "query_toks": ["SELECT", "avg", "(", "price_in_euros", ")", ",", "min", "(", "price_in_euros", ")", "FROM", "catalog_contents"], "query_toks_no_value": ["select", "avg", "(", "price_in_euros", ")", ",", "min", "(", "price_in_euros", ")", "from", "catalog_contents"], "question": "Give me the average and minimum price (in Euro) of the products.", "question_toks": ["Give", "me", "the", "average", "and", "minimum", "price", "(", "in", "Euro", ")", "of", "the", "products", "."], "guid": 5054}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What is the average unit price of all the tracks?", "sql": "SELECT AVG(UnitPrice) FROM TRACK", "example": {"db_id": "chinook_1", "query": "SELECT AVG(UnitPrice) FROM TRACK", "query_toks": ["SELECT", "AVG", "(", "UnitPrice", ")", "FROM", "TRACK"], "query_toks_no_value": ["select", "avg", "(", "unitprice", ")", "from", "track"], "question": "What is the average unit price of all the tracks?", "question_toks": ["What", "is", "the", "average", "unit", "price", "of", "all", "the", "tracks", "?"], "guid": 5055}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | How many films are there in each category? List the genre name, genre id and the count.", "sql": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id", "example": {"db_id": "sakila_1", "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id", "query_toks": ["SELECT", "T2.name", ",", "T1.category_id", ",", "count", "(", "*", ")", "FROM", "film_category", "AS", "T1", "JOIN", "category", "AS", "T2", "ON", "T1.category_id", "=", "T2.category_id", "GROUP", "BY", "T1.category_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "category_id", ",", "count", "(", "*", ")", "from", "film_category", "as", "t1", "join", "category", "as", "t2", "on", "t1", ".", "category_id", "=", "t2", ".", "category_id", "group", "by", "t1", ".", "category_id"], "question": "How many films are there in each category? List the genre name, genre id and the count.", "question_toks": ["How", "many", "films", "are", "there", "in", "each", "category", "?", "List", "the", "genre", "name", ",", "genre", "id", "and", "the", "count", "."], "guid": 5056}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Count the number of different complaint type codes.", "sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints", "example": {"db_id": "customer_complaints", "query": "SELECT count(DISTINCT complaint_type_code) FROM complaints", "query_toks": ["SELECT", "count", "(", "DISTINCT", "complaint_type_code", ")", "FROM", "complaints"], "query_toks_no_value": ["select", "count", "(", "distinct", "complaint_type_code", ")", "from", "complaints"], "question": "Count the number of different complaint type codes.", "question_toks": ["Count", "the", "number", "of", "different", "complaint", "type", "codes", "."], "guid": 5057}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the distinct names of customers who have purchased a keyboard?", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"", "example": {"db_id": "department_store", "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"", "query_toks": ["SELECT", "DISTINCT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "JOIN", "order_items", "AS", "T3", "ON", "T2.order_id", "=", "T3.order_id", "JOIN", "products", "AS", "T4", "ON", "T3.product_id", "=", "T4.product_id", "WHERE", "T4.product_name", "=", "``", "keyboard", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "join", "products", "as", "t4", "on", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t4", ".", "product_name", "=", "value"], "question": "What are the distinct names of customers who have purchased a keyboard?", "question_toks": ["What", "are", "the", "distinct", "names", "of", "customers", "who", "have", "purchased", "a", "keyboard", "?"], "guid": 5058}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | What are the entry names of catalog with the attribute possessed by most entries.", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "product_catalog", "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "t1.catalog_entry_name", "FROM", "Catalog_Contents", "AS", "t1", "JOIN", "Catalog_Contents_Additional_Attributes", "AS", "t2", "ON", "t1.catalog_entry_id", "=", "t2.catalog_entry_id", "WHERE", "t2.attribute_value", "=", "(", "SELECT", "attribute_value", "FROM", "Catalog_Contents_Additional_Attributes", "GROUP", "BY", "attribute_value", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t1", ".", "catalog_entry_name", "from", "catalog_contents", "as", "t1", "join", "catalog_contents_additional_attributes", "as", "t2", "on", "t1", ".", "catalog_entry_id", "=", "t2", ".", "catalog_entry_id", "where", "t2", ".", "attribute_value", "=", "(", "select", "attribute_value", "from", "catalog_contents_additional_attributes", "group", "by", "attribute_value", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What are the entry names of catalog with the attribute possessed by most entries.", "question_toks": ["What", "are", "the", "entry", "names", "of", "catalog", "with", "the", "attribute", "possessed", "by", "most", "entries", "."], "guid": 5059}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the account id and name with at least 4 transactions.", "sql": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4", "example": {"db_id": "customers_and_invoices", "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4", "query_toks": ["SELECT", "T1.account_id", ",", "T2.account_name", "FROM", "Financial_transactions", "AS", "T1", "JOIN", "Accounts", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "GROUP", "BY", "T1.account_id", "HAVING", "count", "(", "*", ")", ">", "=", "4"], "query_toks_no_value": ["select", "t1", ".", "account_id", ",", "t2", ".", "account_name", "from", "financial_transactions", "as", "t1", "join", "accounts", "as", "t2", "on", "t1", ".", "account_id", "=", "t2", ".", "account_id", "group", "by", "t1", ".", "account_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the account id and name with at least 4 transactions.", "question_toks": ["Show", "the", "account", "id", "and", "name", "with", "at", "least", "4", "transactions", "."], "guid": 5060}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | List the all the distinct names of the products with the characteristic name 'warm'.", "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"", "query_toks": ["SELECT", "DISTINCT", "t1.product_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t3.characteristic_name", "=", "``", "warm", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t3", ".", "characteristic_name", "=", "value"], "question": "List the all the distinct names of the products with the characteristic name 'warm'.", "question_toks": ["List", "the", "all", "the", "distinct", "names", "of", "the", "products", "with", "the", "characteristic", "name", "'warm", "'", "."], "guid": 5061}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the names of artists who have not released any albums?", "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId", "example": {"db_id": "chinook_1", "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId", "query_toks": ["SELECT", "Name", "FROM", "ARTIST", "EXCEPT", "SELECT", "T2.Name", "FROM", "ALBUM", "AS", "T1", "JOIN", "ARTIST", "AS", "T2", "ON", "T1.ArtistId", "=", "T2.ArtistId"], "query_toks_no_value": ["select", "name", "from", "artist", "except", "select", "t2", ".", "name", "from", "album", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artistid", "=", "t2", ".", "artistid"], "question": "What are the names of artists who have not released any albums?", "question_toks": ["What", "are", "the", "names", "of", "artists", "who", "have", "not", "released", "any", "albums", "?"], "guid": 5062}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many different products correspond to each order id?", "sql": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id", "query_toks": ["SELECT", "order_id", ",", "count", "(", "DISTINCT", "product_id", ")", "FROM", "Order_items", "GROUP", "BY", "order_id"], "query_toks_no_value": ["select", "order_id", ",", "count", "(", "distinct", "product_id", ")", "from", "order_items", "group", "by", "order_id"], "question": "How many different products correspond to each order id?", "question_toks": ["How", "many", "different", "products", "correspond", "to", "each", "order", "id", "?"], "guid": 5063}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | List the name of all the distinct customers who have orders with status \"Packing\".", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"", "example": {"db_id": "tracking_orders", "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"", "query_toks": ["SELECT", "DISTINCT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "Packing", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"], "question": "List the name of all the distinct customers who have orders with status \"Packing\".", "question_toks": ["List", "the", "name", "of", "all", "the", "distinct", "customers", "who", "have", "orders", "with", "status", "``", "Packing", "''", "."], "guid": 5064}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.", "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000", "example": {"db_id": "tracking_share_transactions", "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >  100 OR amount_of_transaction  >  1000", "query_toks": ["SELECT", "date_of_transaction", "FROM", "TRANSACTIONS", "WHERE", "share_count", ">", "100", "OR", "amount_of_transaction", ">", "1000"], "query_toks_no_value": ["select", "date_of_transaction", "from", "transactions", "where", "share_count", ">", "value", "or", "amount_of_transaction", ">", "value"], "question": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.", "question_toks": ["Show", "the", "dates", "of", "transactions", "if", "the", "share", "count", "is", "bigger", "than", "100", "or", "the", "amount", "is", "bigger", "than", "1000", "."], "guid": 5065}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many transaction does account with name 337 have?", "sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Financial_transactions", "AS", "T1", "JOIN", "Accounts", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "WHERE", "T2.account_name", "=", "``", "337", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "financial_transactions", "as", "t1", "join", "accounts", "as", "t2", "on", "t1", ".", "account_id", "=", "t2", ".", "account_id", "where", "t2", ".", "account_name", "=", "value"], "question": "How many transaction does account with name 337 have?", "question_toks": ["How", "many", "transaction", "does", "account", "with", "name", "337", "have", "?"], "guid": 5066}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many invoices correspond to each order id?", "sql": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id", "query_toks": ["SELECT", "order_id", ",", "count", "(", "*", ")", "FROM", "Invoices", "GROUP", "BY", "order_id"], "query_toks_no_value": ["select", "order_id", ",", "count", "(", "*", ")", "from", "invoices", "group", "by", "order_id"], "question": "How many invoices correspond to each order id?", "question_toks": ["How", "many", "invoices", "correspond", "to", "each", "order", "id", "?"], "guid": 5067}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the first name of all employees who do not give any lessons?", "sql": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id", "example": {"db_id": "driving_school", "query": "SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id  =  T2.staff_id", "query_toks": ["SELECT", "first_name", "FROM", "Staff", "EXCEPT", "SELECT", "T2.first_name", "FROM", "Lessons", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id"], "query_toks_no_value": ["select", "first_name", "from", "staff", "except", "select", "t2", ".", "first_name", "from", "lessons", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id"], "question": "What is the first name of all employees who do not give any lessons?", "question_toks": ["What", "is", "the", "first", "name", "of", "all", "employees", "who", "do", "not", "give", "any", "lessons", "?"], "guid": 5068}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many customers in state of CA?", "sql": "SELECT count(*) FROM customers WHERE state = \"CA\";", "example": {"db_id": "store_1", "query": "SELECT count(*) FROM customers WHERE state = \"CA\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "WHERE", "state", "=", "``", "CA", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "state", "=", "value"], "question": "How many customers in state of CA?", "question_toks": ["How", "many", "customers", "in", "state", "of", "CA", "?"], "guid": 5069}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find all the catalog publishers whose name contains \"Murray\"", "sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"", "example": {"db_id": "product_catalog", "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"", "query_toks": ["SELECT", "distinct", "(", "catalog_publisher", ")", "FROM", "catalogs", "WHERE", "catalog_publisher", "LIKE", "``", "%", "Murray", "%", "''"], "query_toks_no_value": ["select", "distinct", "(", "catalog_publisher", ")", "from", "catalogs", "where", "catalog_publisher", "like", "value"], "question": "Find all the catalog publishers whose name contains \"Murray\"", "question_toks": ["Find", "all", "the", "catalog", "publishers", "whose", "name", "contains", "``", "Murray", "''"], "guid": 5070}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the average unit price of tracks from the Rock genre.", "sql": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "example": {"db_id": "chinook_1", "query": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "query_toks": ["SELECT", "AVG", "(", "T2.UnitPrice", ")", "FROM", "GENRE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.GenreId", "=", "T2.GenreId", "WHERE", "T1.Name", "=", "``", "Rock", "''"], "query_toks_no_value": ["select", "avg", "(", "t2", ".", "unitprice", ")", "from", "genre", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "genreid", "=", "t2", ".", "genreid", "where", "t1", ".", "name", "=", "value"], "question": "Find the average unit price of tracks from the Rock genre.", "question_toks": ["Find", "the", "average", "unit", "price", "of", "tracks", "from", "the", "Rock", "genre", "."], "guid": 5071}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What is the average price of clothes?", "sql": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'", "example": {"db_id": "department_store", "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'", "query_toks": ["SELECT", "avg", "(", "product_price", ")", "FROM", "products", "WHERE", "product_type_code", "=", "'Clothes", "'"], "query_toks_no_value": ["select", "avg", "(", "product_price", ")", "from", "products", "where", "product_type_code", "=", "value"], "question": "What is the average price of clothes?", "question_toks": ["What", "is", "the", "average", "price", "of", "clothes", "?"], "guid": 5072}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?", "sql": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.invoice_number", ",", "T2.invoice_date", "FROM", "Financial_transactions", "AS", "T1", "JOIN", "Invoices", "AS", "T2", "ON", "T1.invoice_number", "=", "T2.invoice_number", "GROUP", "BY", "T1.invoice_number", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "invoice_number", ",", "t2", ".", "invoice_date", "from", "financial_transactions", "as", "t1", "join", "invoices", "as", "t2", "on", "t1", ".", "invoice_number", "=", "t2", ".", "invoice_number", "group", "by", "t1", ".", "invoice_number", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?", "question_toks": ["What", "is", "the", "invoice", "number", "and", "invoice", "date", "corresponding", "to", "the", "invoice", "with", "the", "greatest", "number", "of", "transactions", "?"], "guid": 5073}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Show member names without any registered branch.", "sql": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)", "example": {"db_id": "shop_membership", "query": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)", "query_toks": ["SELECT", "name", "FROM", "member", "WHERE", "member_id", "NOT", "IN", "(", "SELECT", "member_id", "FROM", "membership_register_branch", ")"], "query_toks_no_value": ["select", "name", "from", "member", "where", "member_id", "not", "in", "(", "select", "member_id", "from", "membership_register_branch", ")"], "question": "Show member names without any registered branch.", "question_toks": ["Show", "member", "names", "without", "any", "registered", "branch", "."], "guid": 5074}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | How many customers do not have an account?", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "Accounts", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "accounts", ")"], "question": "How many customers do not have an account?", "question_toks": ["How", "many", "customers", "do", "not", "have", "an", "account", "?"], "guid": 5075}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?", "sql": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;", "example": {"db_id": "driving_school", "query": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "Customers", "WHERE", "amount_outstanding", "BETWEEN", "1000", "AND", "3000", ";"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "customers", "where", "amount_outstanding", "between", "value", "and", "value"], "question": "What are the first and last names of all customers with between 1000 and 3000 dollars outstanding?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "all", "customers", "with", "between", "1000", "and", "3000", "dollars", "outstanding", "?"], "guid": 5076}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the email and phone number of Astrid Gruber the customer?", "sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";", "example": {"db_id": "store_1", "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";", "query_toks": ["SELECT", "email", ",", "phone", "FROM", "customers", "WHERE", "first_name", "=", "``", "Astrid", "''", "AND", "last_name", "=", "``", "Gruber", "''", ";"], "query_toks_no_value": ["select", "email", ",", "phone", "from", "customers", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the email and phone number of Astrid Gruber the customer?", "question_toks": ["What", "is", "the", "email", "and", "phone", "number", "of", "Astrid", "Gruber", "the", "customer", "?"], "guid": 5077}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Return the weights of entrepreneurs, ordered descending by amount of money requested.", "sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC", "example": {"db_id": "entrepreneur", "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC", "query_toks": ["SELECT", "T2.Weight", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Money_Requested", "DESC"], "query_toks_no_value": ["select", "t2", ".", "weight", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "money_requested", "desc"], "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.", "question_toks": ["Return", "the", "weights", "of", "entrepreneurs", ",", "ordered", "descending", "by", "amount", "of", "money", "requested", "."], "guid": 5078}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the detail of products whose detail contains the word \"Latte\" or the word \"Americano\"", "sql": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"", "query_toks": ["SELECT", "product_details", "FROM", "products", "WHERE", "product_details", "LIKE", "``", "%", "Latte", "%", "''", "OR", "product_details", "LIKE", "``", "%", "Americano", "%", "''"], "query_toks_no_value": ["select", "product_details", "from", "products", "where", "product_details", "like", "value", "or", "product_details", "like", "value"], "question": "Find the detail of products whose detail contains the word \"Latte\" or the word \"Americano\"", "question_toks": ["Find", "the", "detail", "of", "products", "whose", "detail", "contains", "the", "word", "``", "Latte", "''", "or", "the", "word", "``", "Americano", "''"], "guid": 5079}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the name of all tracks in the album named Balls to the Wall?", "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";", "example": {"db_id": "store_1", "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";", "query_toks": ["SELECT", "T2.name", "FROM", "albums", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "WHERE", "T1.title", "=", "``", "Balls", "to", "the", "Wall", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "albums", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "where", "t1", ".", "title", "=", "value"], "question": "What is the name of all tracks in the album named Balls to the Wall?", "question_toks": ["What", "is", "the", "name", "of", "all", "tracks", "in", "the", "album", "named", "Balls", "to", "the", "Wall", "?"], "guid": 5080}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the customer name and date of the orders whose status is \"Delivered\".", "sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"", "query_toks": ["SELECT", "t1.customer_name", ",", "t2.order_date", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "order_status", "=", "``", "Delivered", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", ",", "t2", ".", "order_date", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "order_status", "=", "value"], "question": "What are the customer name and date of the orders whose status is \"Delivered\".", "question_toks": ["What", "are", "the", "customer", "name", "and", "date", "of", "the", "orders", "whose", "status", "is", "``", "Delivered", "''", "."], "guid": 5081}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the names of all tracks that are on playlists titled Movies?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";", "example": {"db_id": "store_1", "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";", "query_toks": ["SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "playlist_tracks", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "playlists", "AS", "T3", "ON", "T3.id", "=", "T2.playlist_id", "WHERE", "T3.name", "=", "``", "Movies", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "playlist_tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "playlists", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "playlist_id", "where", "t3", ".", "name", "=", "value"], "question": "What are the names of all tracks that are on playlists titled Movies?", "question_toks": ["What", "are", "the", "names", "of", "all", "tracks", "that", "are", "on", "playlists", "titled", "Movies", "?"], "guid": 5082}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the total amount of moeny paid by the customer Carole Bernhard?", "sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"", "example": {"db_id": "driving_school", "query": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"", "query_toks": ["SELECT", "sum", "(", "T1.amount_payment", ")", "FROM", "Customer_Payments", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.first_name", "=", "``", "Carole", "''", "AND", "T2.last_name", "=", "``", "Bernhard", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "amount_payment", ")", "from", "customer_payments", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "What is the total amount of moeny paid by the customer Carole Bernhard?", "question_toks": ["What", "is", "the", "total", "amount", "of", "moeny", "paid", "by", "the", "customer", "Carole", "Bernhard", "?"], "guid": 5083}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What is the average and total transaction amount?", "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "example": {"db_id": "customers_card_transactions", "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "query_toks": ["SELECT", "avg", "(", "transaction_amount", ")", ",", "sum", "(", "transaction_amount", ")", "FROM", "Financial_transactions"], "query_toks_no_value": ["select", "avg", "(", "transaction_amount", ")", ",", "sum", "(", "transaction_amount", ")", "from", "financial_transactions"], "question": "What is the average and total transaction amount?", "question_toks": ["What", "is", "the", "average", "and", "total", "transaction", "amount", "?"], "guid": 5084}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many employees are living in Canada?", "sql": "SELECT count(*) FROM employees WHERE country = \"Canada\";", "example": {"db_id": "store_1", "query": "SELECT count(*) FROM employees WHERE country = \"Canada\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employees", "WHERE", "country", "=", "``", "Canada", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employees", "where", "country", "=", "value"], "question": "How many employees are living in Canada?", "question_toks": ["How", "many", "employees", "are", "living", "in", "Canada", "?"], "guid": 5085}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the names of all the tracks that are in both the Movies and music playlists?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "example": {"db_id": "store_1", "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "query_toks": ["SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "playlist_tracks", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "playlists", "AS", "T3", "ON", "T2.playlist_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Movies", "'", "INTERSECT", "SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "playlist_tracks", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "playlists", "AS", "T3", "ON", "T2.playlist_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Music", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "playlist_tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "playlists", "as", "t3", "on", "t2", ".", "playlist_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "playlist_tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "playlists", "as", "t3", "on", "t2", ".", "playlist_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value"], "question": "What are the names of all the tracks that are in both the Movies and music playlists?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "tracks", "that", "are", "in", "both", "the", "Movies", "and", "music", "playlists", "?"], "guid": 5086}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the names and ids of products costing between 600 and 700?", "sql": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700", "example": {"db_id": "department_store", "query": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700", "query_toks": ["SELECT", "product_name", ",", "product_id", "FROM", "products", "WHERE", "product_price", "BETWEEN", "600", "AND", "700"], "query_toks_no_value": ["select", "product_name", ",", "product_id", "from", "products", "where", "product_price", "between", "value", "and", "value"], "question": "What are the names and ids of products costing between 600 and 700?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "products", "costing", "between", "600", "and", "700", "?"], "guid": 5087}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the average millisecond length of Latin and Pop tracks.", "sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"", "example": {"db_id": "chinook_1", "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"", "query_toks": ["SELECT", "AVG", "(", "Milliseconds", ")", "FROM", "GENRE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.GenreId", "=", "T2.GenreId", "WHERE", "T1.Name", "=", "``", "Latin", "''", "OR", "T1.Name", "=", "``", "Pop", "''"], "query_toks_no_value": ["select", "avg", "(", "milliseconds", ")", "from", "genre", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "genreid", "=", "t2", ".", "genreid", "where", "t1", ".", "name", "=", "value", "or", "t1", ".", "name", "=", "value"], "question": "Find the average millisecond length of Latin and Pop tracks.", "question_toks": ["Find", "the", "average", "millisecond", "length", "of", "Latin", "and", "Pop", "tracks", "."], "guid": 5088}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the names of the top 8 countries by total invoice size and what are those sizes?", "sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;", "example": {"db_id": "store_1", "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;", "query_toks": ["SELECT", "billing_country", ",", "SUM", "(", "total", ")", "FROM", "invoices", "GROUP", "BY", "billing_country", "ORDER", "BY", "SUM", "(", "total", ")", "DESC", "LIMIT", "8", ";"], "query_toks_no_value": ["select", "billing_country", ",", "sum", "(", "total", ")", "from", "invoices", "group", "by", "billing_country", "order", "by", "sum", "(", "total", ")", "desc", "limit", "value"], "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?", "question_toks": ["What", "are", "the", "names", "of", "the", "top", "8", "countries", "by", "total", "invoice", "size", "and", "what", "are", "those", "sizes", "?"], "guid": 5089}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Count the number of financial transactions that the account with the name 337 has.", "sql": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id WHERE T2.account_name  =  \"337\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Financial_transactions", "AS", "T1", "JOIN", "Accounts", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "WHERE", "T2.account_name", "=", "``", "337", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "financial_transactions", "as", "t1", "join", "accounts", "as", "t2", "on", "t1", ".", "account_id", "=", "t2", ".", "account_id", "where", "t2", ".", "account_name", "=", "value"], "question": "Count the number of financial transactions that the account with the name 337 has.", "question_toks": ["Count", "the", "number", "of", "financial", "transactions", "that", "the", "account", "with", "the", "name", "337", "has", "."], "guid": 5090}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What is the total money requested by entrepreneurs with height more than 1.85?", "sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85", "example": {"db_id": "entrepreneur", "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85", "query_toks": ["SELECT", "sum", "(", "T1.Money_Requested", ")", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Height", ">", "1.85"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "money_requested", ")", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "height", ">", "value"], "question": "What is the total money requested by entrepreneurs with height more than 1.85?", "question_toks": ["What", "is", "the", "total", "money", "requested", "by", "entrepreneurs", "with", "height", "more", "than", "1.85", "?"], "guid": 5091}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the number of customers.", "sql": "SELECT count(*) FROM Customers", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM Customers", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "Show the number of customers.", "question_toks": ["Show", "the", "number", "of", "customers", "."], "guid": 5092}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the date of birth of every customer whose status code is 'Good Customer'?", "sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'", "example": {"db_id": "driving_school", "query": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'", "query_toks": ["SELECT", "date_of_birth", "FROM", "Customers", "WHERE", "customer_status_code", "=", "'Good", "Customer", "'"], "query_toks_no_value": ["select", "date_of_birth", "from", "customers", "where", "customer_status_code", "=", "value"], "question": "What is the date of birth of every customer whose status code is 'Good Customer'?", "question_toks": ["What", "is", "the", "date", "of", "birth", "of", "every", "customer", "whose", "status", "code", "is", "'Good", "Customer", "'", "?"], "guid": 5093}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'", "sql": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'", "example": {"db_id": "products_for_hire", "query": "SELECT payment_date FROM payments WHERE amount_paid  >  300 OR payment_type_code  =  'Check'", "query_toks": ["SELECT", "payment_date", "FROM", "payments", "WHERE", "amount_paid", ">", "300", "OR", "payment_type_code", "=", "'Check", "'"], "query_toks_no_value": ["select", "payment_date", "from", "payments", "where", "amount_paid", ">", "value", "or", "payment_type_code", "=", "value"], "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'", "question_toks": ["What", "are", "the", "payment", "date", "of", "the", "payment", "with", "amount", "paid", "higher", "than", "300", "or", "with", "payment", "type", "is", "'Check", "'"], "guid": 5094}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | How many entrepreneurs are there?", "sql": "SELECT count(*) FROM entrepreneur", "example": {"db_id": "entrepreneur", "query": "SELECT count(*) FROM entrepreneur", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "entrepreneur"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "entrepreneur"], "question": "How many entrepreneurs are there?", "question_toks": ["How", "many", "entrepreneurs", "are", "there", "?"], "guid": 5095}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Give the districts which have two or more addresses.", "sql": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2", "example": {"db_id": "sakila_1", "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2", "query_toks": ["SELECT", "district", "FROM", "address", "GROUP", "BY", "district", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "district", "from", "address", "group", "by", "district", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Give the districts which have two or more addresses.", "question_toks": ["Give", "the", "districts", "which", "have", "two", "or", "more", "addresses", "."], "guid": 5096}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.", "sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "example": {"db_id": "product_catalog", "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "query_toks": ["SELECT", "t1.attribute_name", ",", "t1.attribute_id", "FROM", "Attribute_Definitions", "AS", "t1", "JOIN", "Catalog_Contents_Additional_Attributes", "AS", "t2", "ON", "t1.attribute_id", "=", "t2.attribute_id", "WHERE", "t2.attribute_value", "=", "0"], "query_toks_no_value": ["select", "t1", ".", "attribute_name", ",", "t1", ".", "attribute_id", "from", "attribute_definitions", "as", "t1", "join", "catalog_contents_additional_attributes", "as", "t2", "on", "t1", ".", "attribute_id", "=", "t2", ".", "attribute_id", "where", "t2", ".", "attribute_value", "=", "value"], "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.", "question_toks": ["Which", "attribute", "definitions", "have", "attribute", "value", "0", "?", "Give", "me", "the", "attribute", "name", "and", "attribute", "ID", "."], "guid": 5097}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | Which city does staff with first name as Janessa and last name as Sawayn live?", "sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "query_toks": ["SELECT", "T1.city", "FROM", "Addresses", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.address_id", "=", "T2.staff_address_id", "WHERE", "T2.first_name", "=", "``", "Janessa", "''", "AND", "T2.last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "city", "from", "addresses", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "staff_address_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "Which city does staff with first name as Janessa and last name as Sawayn live?", "question_toks": ["Which", "city", "does", "staff", "with", "first", "name", "as", "Janessa", "and", "last", "name", "as", "Sawayn", "live", "?"], "guid": 5098}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the product ids and the number of unique orders containing each product.", "sql": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id", "query_toks": ["SELECT", "product_id", ",", "count", "(", "DISTINCT", "order_id", ")", "FROM", "Order_items", "GROUP", "BY", "product_id"], "query_toks_no_value": ["select", "product_id", ",", "count", "(", "distinct", "order_id", ")", "from", "order_items", "group", "by", "product_id"], "question": "Show the product ids and the number of unique orders containing each product.", "question_toks": ["Show", "the", "product", "ids", "and", "the", "number", "of", "unique", "orders", "containing", "each", "product", "."], "guid": 5099}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?", "sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details", "example": {"db_id": "department_store", "query": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details", "query_toks": ["SELECT", "T1.supplier_name", ",", "T1.supplier_phone", "FROM", "Suppliers", "AS", "T1", "JOIN", "supplier_addresses", "AS", "T2", "ON", "T1.supplier_id", "=", "T2.supplier_id", "JOIN", "addresses", "AS", "T3", "ON", "T2.address_id", "=", "T3.address_id", "ORDER", "BY", "T3.address_details"], "query_toks_no_value": ["select", "t1", ".", "supplier_name", ",", "t1", ".", "supplier_phone", "from", "suppliers", "as", "t1", "join", "supplier_addresses", "as", "t2", "on", "t1", ".", "supplier_id", "=", "t2", ".", "supplier_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", "order", "by", "t3", ".", "address_details"], "question": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?", "question_toks": ["What", "are", "the", "names", "and", "phone", "numbers", "for", "all", "suppliers", ",", "sorted", "in", "alphabetical", "order", "of", "their", "addressed", "?"], "guid": 5100}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the full names of customers with the account name 900?", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"", "query_toks": ["SELECT", "T2.customer_first_name", ",", "T2.customer_last_name", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.account_name", "=", "``", "900", "''"], "query_toks_no_value": ["select", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "account_name", "=", "value"], "question": "What are the full names of customers with the account name 900?", "question_toks": ["What", "are", "the", "full", "names", "of", "customers", "with", "the", "account", "name", "900", "?"], "guid": 5101}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Which payment method is used by most customers?", "sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "payment_method", "FROM", "customers", "GROUP", "BY", "payment_method", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method", "from", "customers", "group", "by", "payment_method", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which payment method is used by most customers?", "question_toks": ["Which", "payment", "method", "is", "used", "by", "most", "customers", "?"], "guid": 5102}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many tracks does each genre have and what are the names of the top 5?", "sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "example": {"db_id": "store_1", "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "query_toks": ["SELECT", "T1.name", ",", "COUNT", "(", "*", ")", "FROM", "genres", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T2.genre_id", "=", "T1.id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "5", ";"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "genres", "as", "t1", "join", "tracks", "as", "t2", "on", "t2", ".", "genre_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "How many tracks does each genre have and what are the names of the top 5?", "question_toks": ["How", "many", "tracks", "does", "each", "genre", "have", "and", "what", "are", "the", "names", "of", "the", "top", "5", "?"], "guid": 5103}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | How many cities are in Australia?", "sql": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'", "example": {"db_id": "sakila_1", "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "city", "AS", "T1", "JOIN", "country", "AS", "T2", "ON", "T1.country_id", "=", "T2.country_id", "WHERE", "T2.country", "=", "'Australia", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "city", "as", "t1", "join", "country", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "where", "t2", ".", "country", "=", "value"], "question": "How many cities are in Australia?", "question_toks": ["How", "many", "cities", "are", "in", "Australia", "?"], "guid": 5104}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many staff in total?", "sql": "SELECT count(*) FROM Staff;", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Staff;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Staff", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "staff"], "question": "How many staff in total?", "question_toks": ["How", "many", "staff", "in", "total", "?"], "guid": 5105}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the title and id of the film that has the greatest number of copies in inventory?", "sql": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.title", ",", "T1.film_id", "FROM", "film", "AS", "T1", "JOIN", "inventory", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "film_id", "from", "film", "as", "t1", "join", "inventory", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the title and id of the film that has the greatest number of copies in inventory?", "question_toks": ["What", "is", "the", "title", "and", "id", "of", "the", "film", "that", "has", "the", "greatest", "number", "of", "copies", "in", "inventory", "?"], "guid": 5106}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the address of customer 10.", "sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10", "example": {"db_id": "department_store", "query": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10", "query_toks": ["SELECT", "T1.address_details", "FROM", "addresses", "AS", "T1", "JOIN", "customer_addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T2.customer_id", "=", "10"], "query_toks_no_value": ["select", "t1", ".", "address_details", "from", "addresses", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "customer_id", "=", "value"], "question": "Return the address of customer 10.", "question_toks": ["Return", "the", "address", "of", "customer", "10", "."], "guid": 5107}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the first and last names of the 5 customers who purchased something most recently?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "example": {"db_id": "store_1", "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "customers", "AS", "T1", "JOIN", "invoices", "AS", "T2", "ON", "T2.customer_id", "=", "T1.id", "ORDER", "BY", "T2.invoice_date", "DESC", "LIMIT", "5", ";"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "customers", "as", "t1", "join", "invoices", "as", "t2", "on", "t2", ".", "customer_id", "=", "t1", ".", "id", "order", "by", "t2", ".", "invoice_date", "desc", "limit", "value"], "question": "What are the first and last names of the 5 customers who purchased something most recently?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "the", "5", "customers", "who", "purchased", "something", "most", "recently", "?"], "guid": 5108}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the zip code of staff with first name as Janessa and last name as Sawayn lived?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "query_toks": ["SELECT", "T1.zip_postcode", "FROM", "Addresses", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.address_id", "=", "T2.staff_address_id", "WHERE", "T2.first_name", "=", "``", "Janessa", "''", "AND", "T2.last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "zip_postcode", "from", "addresses", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "staff_address_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "What is the zip code of staff with first name as Janessa and last name as Sawayn lived?", "question_toks": ["What", "is", "the", "zip", "code", "of", "staff", "with", "first", "name", "as", "Janessa", "and", "last", "name", "as", "Sawayn", "lived", "?"], "guid": 5109}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | How many distinct cities does the employees live in?", "sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE", "example": {"db_id": "chinook_1", "query": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "city", ")", "FROM", "EMPLOYEE"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "employee"], "question": "How many distinct cities does the employees live in?", "question_toks": ["How", "many", "distinct", "cities", "does", "the", "employees", "live", "in", "?"], "guid": 5110}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the channel code and contact number of the customer contact channel that was active for the longest time?", "sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)", "example": {"db_id": "customers_and_addresses", "query": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)", "query_toks": ["SELECT", "channel_code", ",", "contact_number", "FROM", "customer_contact_channels", "WHERE", "active_to_date", "-", "active_from_date", "=", "(", "SELECT", "active_to_date", "-", "active_from_date", "FROM", "customer_contact_channels", "ORDER", "BY", "(", "active_to_date", "-", "active_from_date", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "channel_code", ",", "contact_number", "from", "customer_contact_channels", "where", "active_to_date", "-", "active_from_date", "=", "(", "select", "active_to_date", "-", "active_from_date", "from", "customer_contact_channels", "order", "by", "(", "active_to_date", "-", "active_from_date", ")", "desc", "limit", "value", ")"], "question": "What is the channel code and contact number of the customer contact channel that was active for the longest time?", "question_toks": ["What", "is", "the", "channel", "code", "and", "contact", "number", "of", "the", "customer", "contact", "channel", "that", "was", "active", "for", "the", "longest", "time", "?"], "guid": 5111}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find all the stores in the district with the most population.", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)", "example": {"db_id": "store_product", "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)", "query_toks": ["SELECT", "t1.store_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "WHERE", "district_id", "=", "(", "SELECT", "district_id", "FROM", "district", "ORDER", "BY", "city_population", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t1", ".", "store_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "where", "district_id", "=", "(", "select", "district_id", "from", "district", "order", "by", "city_population", "desc", "limit", "value", ")"], "question": "Find all the stores in the district with the most population.", "question_toks": ["Find", "all", "the", "stores", "in", "the", "district", "with", "the", "most", "population", "."], "guid": 5112}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the names of all playlists that have more than 100 tracks?", "sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "example": {"db_id": "store_1", "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "query_toks": ["SELECT", "T2.name", "FROM", "playlist_tracks", "AS", "T1", "JOIN", "playlists", "AS", "T2", "ON", "T2.id", "=", "T1.playlist_id", "GROUP", "BY", "T1.playlist_id", "HAVING", "count", "(", "T1.track_id", ")", ">", "100", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "playlist_tracks", "as", "t1", "join", "playlists", "as", "t2", "on", "t2", ".", "id", "=", "t1", ".", "playlist_id", "group", "by", "t1", ".", "playlist_id", "having", "count", "(", "t1", ".", "track_id", ")", ">", "value"], "question": "What are the names of all playlists that have more than 100 tracks?", "question_toks": ["What", "are", "the", "names", "of", "all", "playlists", "that", "have", "more", "than", "100", "tracks", "?"], "guid": 5113}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Show all member names and registered branch names sorted by register year.", "sql": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year", "example": {"db_id": "shop_membership", "query": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year", "query_toks": ["SELECT", "T3.name", ",", "T2.name", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "branch", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "member", "AS", "T3", "ON", "T1.member_id", "=", "T3.member_id", "ORDER", "BY", "T1.register_year"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "name", "from", "membership_register_branch", "as", "t1", "join", "branch", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "member", "as", "t3", "on", "t1", ".", "member_id", "=", "t3", ".", "member_id", "order", "by", "t1", ".", "register_year"], "question": "Show all member names and registered branch names sorted by register year.", "question_toks": ["Show", "all", "member", "names", "and", "registered", "branch", "names", "sorted", "by", "register", "year", "."], "guid": 5114}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Count the number of customers who do not have an account.", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "Accounts", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "accounts", ")"], "question": "Count the number of customers who do not have an account.", "question_toks": ["Count", "the", "number", "of", "customers", "who", "do", "not", "have", "an", "account", "."], "guid": 5115}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Give the name of the products that have a color description 'yellow'.", "sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'", "example": {"db_id": "products_gen_characteristics", "query": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'", "query_toks": ["SELECT", "T1.product_name", "FROM", "products", "AS", "T1", "JOIN", "ref_colors", "AS", "T2", "ON", "T1.color_code", "=", "T2.color_code", "WHERE", "T2.color_description", "=", "'yellow", "'"], "query_toks_no_value": ["select", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "where", "t2", ".", "color_description", "=", "value"], "question": "Give the name of the products that have a color description 'yellow'.", "question_toks": ["Give", "the", "name", "of", "the", "products", "that", "have", "a", "color", "description", "'yellow", "'", "."], "guid": 5116}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the maximum and minimum customer codes.", "sql": "SELECT max(customer_code) ,  min(customer_code) FROM Customers", "example": {"db_id": "department_store", "query": "SELECT max(customer_code) ,  min(customer_code) FROM Customers", "query_toks": ["SELECT", "max", "(", "customer_code", ")", ",", "min", "(", "customer_code", ")", "FROM", "Customers"], "query_toks_no_value": ["select", "max", "(", "customer_code", ")", ",", "min", "(", "customer_code", ")", "from", "customers"], "question": "Return the maximum and minimum customer codes.", "question_toks": ["Return", "the", "maximum", "and", "minimum", "customer", "codes", "."], "guid": 5117}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Show the album names and ids for albums that contain tracks with unit price bigger than 1.", "sql": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "example": {"db_id": "chinook_1", "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "query_toks": ["SELECT", "T1.Title", ",", "T2.AlbumID", "FROM", "ALBUM", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.AlbumId", "=", "T2.AlbumId", "WHERE", "T2.UnitPrice", ">", "1", "GROUP", "BY", "T2.AlbumID"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "albumid", "from", "album", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "albumid", "=", "t2", ".", "albumid", "where", "t2", ".", "unitprice", ">", "value", "group", "by", "t2", ".", "albumid"], "question": "Show the album names and ids for albums that contain tracks with unit price bigger than 1.", "question_toks": ["Show", "the", "album", "names", "and", "ids", "for", "albums", "that", "contain", "tracks", "with", "unit", "price", "bigger", "than", "1", "."], "guid": 5118}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | How many customers do we have?", "sql": "SELECT count(*) FROM Customers", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Customers", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "How many customers do we have?", "question_toks": ["How", "many", "customers", "do", "we", "have", "?"], "guid": 5119}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the name of all customers whose name contains \"Alex\".", "sql": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "WHERE", "customer_name", "LIKE", "``", "%", "Alex", "%", "''"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "where", "customer_name", "like", "value"], "question": "Find the name of all customers whose name contains \"Alex\".", "question_toks": ["Find", "the", "name", "of", "all", "customers", "whose", "name", "contains", "``", "Alex", "''", "."], "guid": 5120}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the different product colors?", "sql": "SELECT DISTINCT product_color FROM Products", "example": {"db_id": "customers_and_invoices", "query": "SELECT DISTINCT product_color FROM Products", "query_toks": ["SELECT", "DISTINCT", "product_color", "FROM", "Products"], "query_toks_no_value": ["select", "distinct", "product_color", "from", "products"], "question": "What are the different product colors?", "question_toks": ["What", "are", "the", "different", "product", "colors", "?"], "guid": 5121}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the names of the members and branches at which they are registered sorted by year of registration?", "sql": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year", "example": {"db_id": "shop_membership", "query": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year", "query_toks": ["SELECT", "T3.name", ",", "T2.name", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "branch", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "member", "AS", "T3", "ON", "T1.member_id", "=", "T3.member_id", "ORDER", "BY", "T1.register_year"], "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "name", "from", "membership_register_branch", "as", "t1", "join", "branch", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "member", "as", "t3", "on", "t1", ".", "member_id", "=", "t3", ".", "member_id", "order", "by", "t1", ".", "register_year"], "question": "What are the names of the members and branches at which they are registered sorted by year of registration?", "question_toks": ["What", "are", "the", "names", "of", "the", "members", "and", "branches", "at", "which", "they", "are", "registered", "sorted", "by", "year", "of", "registration", "?"], "guid": 5122}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Count the number of invoices.", "sql": "SELECT count(*) FROM Invoices", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM Invoices", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Invoices"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "invoices"], "question": "Count the number of invoices.", "question_toks": ["Count", "the", "number", "of", "invoices", "."], "guid": 5123}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | Find number of tracks in each genre?", "sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;", "example": {"db_id": "store_1", "query": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "genres", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "GROUP", "BY", "T1.name", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "genres", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "group", "by", "t1", ".", "name"], "question": "Find number of tracks in each genre?", "question_toks": ["Find", "number", "of", "tracks", "in", "each", "genre", "?"], "guid": 5124}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What is the code of the category that the product with the name 'flax' belongs to?", "sql": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"", "query_toks": ["SELECT", "product_category_code", "FROM", "products", "WHERE", "product_name", "=", "``", "flax", "''"], "query_toks_no_value": ["select", "product_category_code", "from", "products", "where", "product_name", "=", "value"], "question": "What is the code of the category that the product with the name 'flax' belongs to?", "question_toks": ["What", "is", "the", "code", "of", "the", "category", "that", "the", "product", "with", "the", "name", "'flax", "'", "belongs", "to", "?"], "guid": 5125}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show order ids and the number of products in each order.", "sql": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT order_id ,  count(DISTINCT product_id) FROM Order_items GROUP BY order_id", "query_toks": ["SELECT", "order_id", ",", "count", "(", "DISTINCT", "product_id", ")", "FROM", "Order_items", "GROUP", "BY", "order_id"], "query_toks_no_value": ["select", "order_id", ",", "count", "(", "distinct", "product_id", ")", "from", "order_items", "group", "by", "order_id"], "question": "Show order ids and the number of products in each order.", "question_toks": ["Show", "order", "ids", "and", "the", "number", "of", "products", "in", "each", "order", "."], "guid": 5126}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | List the companies of entrepreneurs in descending order of money requested.", "sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "example": {"db_id": "entrepreneur", "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "query_toks": ["SELECT", "Company", "FROM", "entrepreneur", "ORDER", "BY", "Money_Requested", "DESC"], "query_toks_no_value": ["select", "company", "from", "entrepreneur", "order", "by", "money_requested", "desc"], "question": "List the companies of entrepreneurs in descending order of money requested.", "question_toks": ["List", "the", "companies", "of", "entrepreneurs", "in", "descending", "order", "of", "money", "requested", "."], "guid": 5127}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the address of employee Nancy Edwards?", "sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "example": {"db_id": "store_1", "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "query_toks": ["SELECT", "address", "FROM", "employees", "WHERE", "first_name", "=", "``", "Nancy", "''", "AND", "last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "address", "from", "employees", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the address of employee Nancy Edwards?", "question_toks": ["What", "is", "the", "address", "of", "employee", "Nancy", "Edwards", "?"], "guid": 5128}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Return the first names of the 5 staff members who have handled the most complaints.", "sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5", "example": {"db_id": "customer_complaints", "query": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5", "query_toks": ["SELECT", "t1.first_name", "FROM", "staff", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.staff_id", "=", "t2.staff_id", "GROUP", "BY", "t2.staff_id", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "5"], "query_toks_no_value": ["select", "t1", ".", "first_name", "from", "staff", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "group", "by", "t2", ".", "staff_id", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Return the first names of the 5 staff members who have handled the most complaints.", "question_toks": ["Return", "the", "first", "names", "of", "the", "5", "staff", "members", "who", "have", "handled", "the", "most", "complaints", "."], "guid": 5129}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?", "sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000", "example": {"db_id": "department_store", "query": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000", "query_toks": ["SELECT", "product_id", "FROM", "Order_Items", "GROUP", "BY", "product_id", "HAVING", "count", "(", "*", ")", ">", "3", "UNION", "SELECT", "product_id", "FROM", "Product_Suppliers", "GROUP", "BY", "product_id", "HAVING", "sum", "(", "total_amount_purchased", ")", ">", "80000"], "query_toks_no_value": ["select", "product_id", "from", "order_items", "group", "by", "product_id", "having", "count", "(", "*", ")", ">", "value", "union", "select", "product_id", "from", "product_suppliers", "group", "by", "product_id", "having", "sum", "(", "total_amount_purchased", ")", ">", "value"], "question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?", "question_toks": ["What", "are", "the", "ids", "of", "all", "products", "that", "were", "either", "ordered", "more", "than", "3", "times", "or", "have", "a", "cumulative", "amount", "purchased", "of", "above", "80000", "?"], "guid": 5130}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the distinct names of products purchased by at least two different customers?", "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2", "example": {"db_id": "department_store", "query": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2", "query_toks": ["SELECT", "DISTINCT", "T3.product_name", "FROM", "customer_orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "JOIN", "products", "AS", "T3", "ON", "T2.product_id", "=", "T3.product_id", "GROUP", "BY", "T3.product_id", "HAVING", "COUNT", "(", "DISTINCT", "T1.customer_id", ")", ">", "=", "2"], "query_toks_no_value": ["select", "distinct", "t3", ".", "product_name", "from", "customer_orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "join", "products", "as", "t3", "on", "t2", ".", "product_id", "=", "t3", ".", "product_id", "group", "by", "t3", ".", "product_id", "having", "count", "(", "distinct", "t1", ".", "customer_id", ")", ">", "=", "value"], "question": "What are the distinct names of products purchased by at least two different customers?", "question_toks": ["What", "are", "the", "distinct", "names", "of", "products", "purchased", "by", "at", "least", "two", "different", "customers", "?"], "guid": 5131}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the order id and customer id associated with the oldest order.", "sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1", "example": {"db_id": "tracking_orders", "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1", "query_toks": ["SELECT", "order_id", ",", "customer_id", "FROM", "orders", "ORDER", "BY", "date_order_placed", "LIMIT", "1"], "query_toks_no_value": ["select", "order_id", ",", "customer_id", "from", "orders", "order", "by", "date_order_placed", "limit", "value"], "question": "Find the order id and customer id associated with the oldest order.", "question_toks": ["Find", "the", "order", "id", "and", "customer", "id", "associated", "with", "the", "oldest", "order", "."], "guid": 5132}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What si the youngest employee's first and last name?", "sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "example": {"db_id": "store_1", "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "employees", "ORDER", "BY", "birth_date", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "employees", "order", "by", "birth_date", "desc", "limit", "value"], "question": "What si the youngest employee's first and last name?", "question_toks": ["What", "si", "the", "youngest", "employee", "'s", "first", "and", "last", "name", "?"], "guid": 5133}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | List all the contact channel codes that were used less than 5 times.", "sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5", "example": {"db_id": "customers_and_addresses", "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5", "query_toks": ["SELECT", "channel_code", "FROM", "customer_contact_channels", "GROUP", "BY", "channel_code", "HAVING", "count", "(", "customer_id", ")", "<", "5"], "query_toks_no_value": ["select", "channel_code", "from", "customer_contact_channels", "group", "by", "channel_code", "having", "count", "(", "customer_id", ")", "<", "value"], "question": "List all the contact channel codes that were used less than 5 times.", "question_toks": ["List", "all", "the", "contact", "channel", "codes", "that", "were", "used", "less", "than", "5", "times", "."], "guid": 5134}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are total transaction amounts for each transaction type?", "sql": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type", "example": {"db_id": "customers_and_invoices", "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type", "query_toks": ["SELECT", "transaction_type", ",", "sum", "(", "transaction_amount", ")", "FROM", "Financial_transactions", "GROUP", "BY", "transaction_type"], "query_toks_no_value": ["select", "transaction_type", ",", "sum", "(", "transaction_amount", ")", "from", "financial_transactions", "group", "by", "transaction_type"], "question": "What are total transaction amounts for each transaction type?", "question_toks": ["What", "are", "total", "transaction", "amounts", "for", "each", "transaction", "type", "?"], "guid": 5135}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is maximum, minimum and average amount of outstanding of customer?", "sql": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;", "example": {"db_id": "driving_school", "query": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;", "query_toks": ["SELECT", "max", "(", "amount_outstanding", ")", ",", "min", "(", "amount_outstanding", ")", ",", "avg", "(", "amount_outstanding", ")", "FROM", "Customers", ";"], "query_toks_no_value": ["select", "max", "(", "amount_outstanding", ")", ",", "min", "(", "amount_outstanding", ")", ",", "avg", "(", "amount_outstanding", ")", "from", "customers"], "question": "What is maximum, minimum and average amount of outstanding of customer?", "question_toks": ["What", "is", "maximum", ",", "minimum", "and", "average", "amount", "of", "outstanding", "of", "customer", "?"], "guid": 5136}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.", "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "example": {"db_id": "entrepreneur", "query": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "query_toks": ["SELECT", "Investor", "FROM", "entrepreneur", "WHERE", "Money_Requested", ">", "140000", "INTERSECT", "SELECT", "Investor", "FROM", "entrepreneur", "WHERE", "Money_Requested", "<", "120000"], "query_toks_no_value": ["select", "investor", "from", "entrepreneur", "where", "money_requested", ">", "value", "intersect", "select", "investor", "from", "entrepreneur", "where", "money_requested", "<", "value"], "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.", "question_toks": ["Show", "the", "investors", "shared", "by", "entrepreneurs", "that", "requested", "more", "than", "140000", "and", "entrepreneurs", "that", "requested", "less", "than", "120000", "."], "guid": 5137}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What was the date of the earliest payment?", "sql": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1", "query_toks": ["SELECT", "payment_date", "FROM", "payment", "ORDER", "BY", "payment_date", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_date", "from", "payment", "order", "by", "payment_date", "asc", "limit", "value"], "question": "What was the date of the earliest payment?", "question_toks": ["What", "was", "the", "date", "of", "the", "earliest", "payment", "?"], "guid": 5138}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the name of all tracks in the playlists of Movies.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";", "example": {"db_id": "store_1", "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\";", "query_toks": ["SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "playlist_tracks", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "playlists", "AS", "T3", "ON", "T3.id", "=", "T2.playlist_id", "WHERE", "T3.name", "=", "``", "Movies", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "playlist_tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "playlists", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "playlist_id", "where", "t3", ".", "name", "=", "value"], "question": "List the name of all tracks in the playlists of Movies.", "question_toks": ["List", "the", "name", "of", "all", "tracks", "in", "the", "playlists", "of", "Movies", "."], "guid": 5139}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | find the full name of employees who report to Nancy Edwards?", "sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";", "example": {"db_id": "store_1", "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "employees", "AS", "T1", "JOIN", "employees", "AS", "T2", "ON", "T1.id", "=", "T2.reports_to", "WHERE", "T1.first_name", "=", "``", "Nancy", "''", "AND", "T1.last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "employees", "as", "t1", "join", "employees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "reports_to", "where", "t1", ".", "first_name", "=", "value", "and", "t1", ".", "last_name", "=", "value"], "question": "find the full name of employees who report to Nancy Edwards?", "question_toks": ["find", "the", "full", "name", "of", "employees", "who", "report", "to", "Nancy", "Edwards", "?"], "guid": 5140}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Return the average transaction amount, as well as the total amount of all transactions.", "sql": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "example": {"db_id": "customers_card_transactions", "query": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions", "query_toks": ["SELECT", "avg", "(", "transaction_amount", ")", ",", "sum", "(", "transaction_amount", ")", "FROM", "Financial_transactions"], "query_toks_no_value": ["select", "avg", "(", "transaction_amount", ")", ",", "sum", "(", "transaction_amount", ")", "from", "financial_transactions"], "question": "Return the average transaction amount, as well as the total amount of all transactions.", "question_toks": ["Return", "the", "average", "transaction", "amount", ",", "as", "well", "as", "the", "total", "amount", "of", "all", "transactions", "."], "guid": 5141}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the invoice dates for customers with the first name Astrid and the last name Gruber?", "sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"", "example": {"db_id": "chinook_1", "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"", "query_toks": ["SELECT", "T2.InvoiceDate", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "INVOICE", "AS", "T2", "ON", "T1.CustomerId", "=", "T2.CustomerId", "WHERE", "T1.FirstName", "=", "``", "Astrid", "''", "AND", "LastName", "=", "``", "Gruber", "''"], "query_toks_no_value": ["select", "t2", ".", "invoicedate", "from", "customer", "as", "t1", "join", "invoice", "as", "t2", "on", "t1", ".", "customerid", "=", "t2", ".", "customerid", "where", "t1", ".", "firstname", "=", "value", "and", "lastname", "=", "value"], "question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?", "question_toks": ["What", "are", "the", "invoice", "dates", "for", "customers", "with", "the", "first", "name", "Astrid", "and", "the", "last", "name", "Gruber", "?"], "guid": 5142}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What is the card type code with most number of cards?", "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_card_transactions", "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "card_type_code", "FROM", "Customers_cards", "GROUP", "BY", "card_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "card_type_code", "from", "customers_cards", "group", "by", "card_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the card type code with most number of cards?", "question_toks": ["What", "is", "the", "card", "type", "code", "with", "most", "number", "of", "cards", "?"], "guid": 5143}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Give the ids and names of products with price lower than 600 or higher than 900.", "sql": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900", "example": {"db_id": "department_store", "query": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900", "query_toks": ["SELECT", "product_id", ",", "product_name", "FROM", "products", "WHERE", "product_price", "<", "600", "OR", "product_price", ">", "900"], "query_toks_no_value": ["select", "product_id", ",", "product_name", "from", "products", "where", "product_price", "<", "value", "or", "product_price", ">", "value"], "question": "Give the ids and names of products with price lower than 600 or higher than 900.", "question_toks": ["Give", "the", "ids", "and", "names", "of", "products", "with", "price", "lower", "than", "600", "or", "higher", "than", "900", "."], "guid": 5144}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the name and job title of the staff with the latest date assigned.", "sql": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1", "query_toks": ["SELECT", "T1.staff_name", ",", "T2.job_title_code", "FROM", "staff", "AS", "T1", "JOIN", "staff_department_assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "ORDER", "BY", "T2.date_assigned_to", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "staff_name", ",", "t2", ".", "job_title_code", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "order", "by", "t2", ".", "date_assigned_to", "desc", "limit", "value"], "question": "Return the name and job title of the staff with the latest date assigned.", "question_toks": ["Return", "the", "name", "and", "job", "title", "of", "the", "staff", "with", "the", "latest", "date", "assigned", "."], "guid": 5145}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What is the first name, last name, and phone of the customer with card 4560596484842.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"", "query_toks": ["SELECT", "T2.customer_first_name", ",", "T2.customer_last_name", ",", "T2.customer_phone", "FROM", "Customers_cards", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.card_number", "=", "``", "4560596484842", "''"], "query_toks_no_value": ["select", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", ",", "t2", ".", "customer_phone", "from", "customers_cards", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "card_number", "=", "value"], "question": "What is the first name, last name, and phone of the customer with card 4560596484842.", "question_toks": ["What", "is", "the", "first", "name", ",", "last", "name", ",", "and", "phone", "of", "the", "customer", "with", "card", "4560596484842", "."], "guid": 5146}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Count the number of products that were never ordered.", "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "WHERE", "product_id", "NOT", "IN", "(", "SELECT", "product_id", "FROM", "Order_items", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "where", "product_id", "not", "in", "(", "select", "product_id", "from", "order_items", ")"], "question": "Count the number of products that were never ordered.", "question_toks": ["Count", "the", "number", "of", "products", "that", "were", "never", "ordered", "."], "guid": 5147}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the average time span of contact channels in the database?", "sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels", "example": {"db_id": "customers_and_addresses", "query": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels", "query_toks": ["SELECT", "avg", "(", "active_to_date", "-", "active_from_date", ")", "FROM", "customer_contact_channels"], "query_toks_no_value": ["select", "avg", "(", "active_to_date", "-", "active_from_date", ")", "from", "customer_contact_channels"], "question": "What is the average time span of contact channels in the database?", "question_toks": ["What", "is", "the", "average", "time", "span", "of", "contact", "channels", "in", "the", "database", "?"], "guid": 5148}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the order ids and the number of invoices for each order.", "sql": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT order_id ,  count(*) FROM Invoices GROUP BY order_id", "query_toks": ["SELECT", "order_id", ",", "count", "(", "*", ")", "FROM", "Invoices", "GROUP", "BY", "order_id"], "query_toks_no_value": ["select", "order_id", ",", "count", "(", "*", ")", "from", "invoices", "group", "by", "order_id"], "question": "Show the order ids and the number of invoices for each order.", "question_toks": ["Show", "the", "order", "ids", "and", "the", "number", "of", "invoices", "for", "each", "order", "."], "guid": 5149}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Give the color description for the product 'catnip'.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"", "query_toks": ["SELECT", "t2.color_description", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "WHERE", "t1.product_name", "=", "``", "catnip", "''"], "query_toks_no_value": ["select", "t2", ".", "color_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "where", "t1", ".", "product_name", "=", "value"], "question": "Give the color description for the product 'catnip'.", "question_toks": ["Give", "the", "color", "description", "for", "the", "product", "'catnip", "'", "."], "guid": 5150}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Count the number of financial transactions that correspond to each account id.", "sql": "SELECT count(*) ,  account_id FROM Financial_transactions", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) ,  account_id FROM Financial_transactions", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "account_id", "FROM", "Financial_transactions"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "account_id", "from", "financial_transactions"], "question": "Count the number of financial transactions that correspond to each account id.", "question_toks": ["Count", "the", "number", "of", "financial", "transactions", "that", "correspond", "to", "each", "account", "id", "."], "guid": 5151}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Give the order ids for all orders, as well as the total product quantity in each.", "sql": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT order_id ,  sum(product_quantity) FROM Order_items GROUP BY order_id", "query_toks": ["SELECT", "order_id", ",", "sum", "(", "product_quantity", ")", "FROM", "Order_items", "GROUP", "BY", "order_id"], "query_toks_no_value": ["select", "order_id", ",", "sum", "(", "product_quantity", ")", "from", "order_items", "group", "by", "order_id"], "question": "Give the order ids for all orders, as well as the total product quantity in each.", "question_toks": ["Give", "the", "order", "ids", "for", "all", "orders", ",", "as", "well", "as", "the", "total", "product", "quantity", "in", "each", "."], "guid": 5152}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the names of all the catalog entries.", "sql": "SELECT distinct(catalog_entry_name) FROM catalog_contents", "example": {"db_id": "product_catalog", "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents", "query_toks": ["SELECT", "distinct", "(", "catalog_entry_name", ")", "FROM", "catalog_contents"], "query_toks_no_value": ["select", "distinct", "(", "catalog_entry_name", ")", "from", "catalog_contents"], "question": "Find the names of all the catalog entries.", "question_toks": ["Find", "the", "names", "of", "all", "the", "catalog", "entries", "."], "guid": 5153}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | what are the order id and customer id of the oldest order?", "sql": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1", "example": {"db_id": "tracking_orders", "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1", "query_toks": ["SELECT", "order_id", ",", "customer_id", "FROM", "orders", "ORDER", "BY", "date_order_placed", "LIMIT", "1"], "query_toks_no_value": ["select", "order_id", ",", "customer_id", "from", "orders", "order", "by", "date_order_placed", "limit", "value"], "question": "what are the order id and customer id of the oldest order?", "question_toks": ["what", "are", "the", "order", "id", "and", "customer", "id", "of", "the", "oldest", "order", "?"], "guid": 5154}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | For each customer status code, how many customers are classified that way?", "sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;", "example": {"db_id": "driving_school", "query": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;", "query_toks": ["SELECT", "customer_status_code", ",", "count", "(", "*", ")", "FROM", "Customers", "GROUP", "BY", "customer_status_code", ";"], "query_toks_no_value": ["select", "customer_status_code", ",", "count", "(", "*", ")", "from", "customers", "group", "by", "customer_status_code"], "question": "For each customer status code, how many customers are classified that way?", "question_toks": ["For", "each", "customer", "status", "code", ",", "how", "many", "customers", "are", "classified", "that", "way", "?"], "guid": 5155}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List name of all tracks in Balls to the Wall.", "sql": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";", "example": {"db_id": "store_1", "query": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\";", "query_toks": ["SELECT", "T2.name", "FROM", "albums", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "WHERE", "T1.title", "=", "``", "Balls", "to", "the", "Wall", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "albums", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "where", "t1", ".", "title", "=", "value"], "question": "List name of all tracks in Balls to the Wall.", "question_toks": ["List", "name", "of", "all", "tracks", "in", "Balls", "to", "the", "Wall", "."], "guid": 5156}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?", "sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'", "example": {"db_id": "shop_membership", "query": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'", "query_toks": ["SELECT", "T2.name", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "branch", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "member", "AS", "T3", "ON", "T1.member_id", "=", "T3.member_id", "WHERE", "T3.Hometown", "=", "'Louisville", ",", "Kentucky", "'", "INTERSECT", "SELECT", "T2.name", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "branch", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "member", "AS", "T3", "ON", "T1.member_id", "=", "T3.member_id", "WHERE", "T3.Hometown", "=", "'Hiram", ",", "Georgia", "'"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "membership_register_branch", "as", "t1", "join", "branch", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "member", "as", "t3", "on", "t1", ".", "member_id", "=", "t3", ".", "member_id", "where", "t3", ".", "hometown", "=", "value", "intersect", "select", "t2", ".", "name", "from", "membership_register_branch", "as", "t1", "join", "branch", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "member", "as", "t3", "on", "t1", ".", "member_id", "=", "t3", ".", "member_id", "where", "t3", ".", "hometown", "=", "value"], "question": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?", "question_toks": ["What", "are", "the", "names", "of", "the", "branches", "that", "have", "some", "members", "with", "a", "hometown", "in", "Louisville", ",", "Kentucky", "and", "also", "those", "from", "Hiram", ",", "Goergia", "?"], "guid": 5157}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | Show the details of all trucks in the order of their license number.", "sql": "SELECT truck_details FROM trucks ORDER BY truck_licence_number", "example": {"db_id": "customer_deliveries", "query": "SELECT truck_details FROM trucks ORDER BY truck_licence_number", "query_toks": ["SELECT", "truck_details", "FROM", "trucks", "ORDER", "BY", "truck_licence_number"], "query_toks_no_value": ["select", "truck_details", "from", "trucks", "order", "by", "truck_licence_number"], "question": "Show the details of all trucks in the order of their license number.", "question_toks": ["Show", "the", "details", "of", "all", "trucks", "in", "the", "order", "of", "their", "license", "number", "."], "guid": 5158}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.", "sql": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'", "example": {"db_id": "shop_membership", "query": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'", "query_toks": ["SELECT", "T2.name", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "branch", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "member", "AS", "T3", "ON", "T1.member_id", "=", "T3.member_id", "WHERE", "T3.Hometown", "=", "'Louisville", ",", "Kentucky", "'", "INTERSECT", "SELECT", "T2.name", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "branch", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "member", "AS", "T3", "ON", "T1.member_id", "=", "T3.member_id", "WHERE", "T3.Hometown", "=", "'Hiram", ",", "Georgia", "'"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "membership_register_branch", "as", "t1", "join", "branch", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "member", "as", "t3", "on", "t1", ".", "member_id", "=", "t3", ".", "member_id", "where", "t3", ".", "hometown", "=", "value", "intersect", "select", "t2", ".", "name", "from", "membership_register_branch", "as", "t1", "join", "branch", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "member", "as", "t3", "on", "t1", ".", "member_id", "=", "t3", ".", "member_id", "where", "t3", ".", "hometown", "=", "value"], "question": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.", "question_toks": ["Find", "the", "name", "of", "branches", "where", "have", "some", "members", "whose", "hometown", "is", "in", "Louisville", ",", "Kentucky", "and", "some", "in", "Hiram", ",", "Georgia", "."], "guid": 5159}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | Find out the first name and last name of staff lived in city Damianfort.", "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";", "example": {"db_id": "driving_school", "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "Addresses", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.address_id", "=", "T2.staff_address_id", "WHERE", "T1.city", "=", "``", "Damianfort", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "addresses", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "staff_address_id", "where", "t1", ".", "city", "=", "value"], "question": "Find out the first name and last name of staff lived in city Damianfort.", "question_toks": ["Find", "out", "the", "first", "name", "and", "last", "name", "of", "staff", "lived", "in", "city", "Damianfort", "."], "guid": 5160}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "query_toks": ["SELECT", "sum", "(", "lesson_time", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.first_name", "=", "``", "Janessa", "''", "AND", "T2.last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "lesson_time", ")", "from", "lessons", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?", "question_toks": ["How", "long", "is", "the", "total", "lesson", "time", "taught", "by", "staff", "with", "first", "name", "as", "Janessa", "and", "last", "name", "as", "Sawayn", "?"], "guid": 5161}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | Show the product name and total order quantity for each product.", "sql": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id", "query_toks": ["SELECT", "T1.product_name", ",", "sum", "(", "T2.order_quantity", ")", "FROM", "products", "AS", "T1", "JOIN", "order_items", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "GROUP", "BY", "T1.product_id"], "query_toks_no_value": ["select", "t1", ".", "product_name", ",", "sum", "(", "t2", ".", "order_quantity", ")", "from", "products", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_id"], "question": "Show the product name and total order quantity for each product.", "question_toks": ["Show", "the", "product", "name", "and", "total", "order", "quantity", "for", "each", "product", "."], "guid": 5162}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | How many credit cards does customer Blanche Huels have?", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers_cards", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.customer_first_name", "=", "``", "Blanche", "''", "AND", "T2.customer_last_name", "=", "``", "Huels", "''", "AND", "T1.card_type_code", "=", "``", "Credit", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers_cards", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_first_name", "=", "value", "and", "t2", ".", "customer_last_name", "=", "value", "and", "t1", ".", "card_type_code", "=", "value"], "question": "How many credit cards does customer Blanche Huels have?", "question_toks": ["How", "many", "credit", "cards", "does", "customer", "Blanche", "Huels", "have", "?"], "guid": 5163}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Which city has the least number of customers whose type code is \"Good Credit Rating\"?", "sql": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "town_city", "FROM", "customers", "WHERE", "customer_type_code", "=", "``", "Good", "Credit", "Rating", "''", "GROUP", "BY", "town_city", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "town_city", "from", "customers", "where", "customer_type_code", "=", "value", "group", "by", "town_city", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Which city has the least number of customers whose type code is \"Good Credit Rating\"?", "question_toks": ["Which", "city", "has", "the", "least", "number", "of", "customers", "whose", "type", "code", "is", "``", "Good", "Credit", "Rating", "''", "?"], "guid": 5164}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the phone numbers for each employee?", "sql": "SELECT Phone FROM EMPLOYEE", "example": {"db_id": "chinook_1", "query": "SELECT Phone FROM EMPLOYEE", "query_toks": ["SELECT", "Phone", "FROM", "EMPLOYEE"], "query_toks_no_value": ["select", "phone", "from", "employee"], "question": "What are the phone numbers for each employee?", "question_toks": ["What", "are", "the", "phone", "numbers", "for", "each", "employee", "?"], "guid": 5165}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Give the full name and phone of the customer who has the account name 162.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"", "query_toks": ["SELECT", "T2.customer_first_name", ",", "T2.customer_last_name", ",", "T2.customer_phone", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.account_name", "=", "``", "162", "''"], "query_toks_no_value": ["select", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", ",", "t2", ".", "customer_phone", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "account_name", "=", "value"], "question": "Give the full name and phone of the customer who has the account name 162.", "question_toks": ["Give", "the", "full", "name", "and", "phone", "of", "the", "customer", "who", "has", "the", "account", "name", "162", "."], "guid": 5166}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many employees live in Georgia?", "sql": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Addresses", "WHERE", "state_province_county", "=", "``", "Georgia", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "addresses", "where", "state_province_county", "=", "value"], "question": "How many employees live in Georgia?", "question_toks": ["How", "many", "employees", "live", "in", "Georgia", "?"], "guid": 5167}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the names of all artists that have \"a\" in their names.", "sql": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"", "example": {"db_id": "chinook_1", "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"", "query_toks": ["SELECT", "Name", "FROM", "ARTIST", "WHERE", "Name", "LIKE", "``", "%", "a", "%", "''"], "query_toks_no_value": ["select", "name", "from", "artist", "where", "name", "like", "value"], "question": "Find the names of all artists that have \"a\" in their names.", "question_toks": ["Find", "the", "names", "of", "all", "artists", "that", "have", "``", "a", "''", "in", "their", "names", "."], "guid": 5168}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Find the ids of all distinct customers who made order after some orders that were Cancelled.", "sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")", "example": {"db_id": "department_store", "query": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")", "query_toks": ["SELECT", "DISTINCT", "customer_id", "FROM", "Customer_Orders", "WHERE", "order_date", ">", "(", "SELECT", "min", "(", "order_date", ")", "FROM", "Customer_Orders", "WHERE", "order_status_code", "=", "``", "Cancelled", "''", ")"], "query_toks_no_value": ["select", "distinct", "customer_id", "from", "customer_orders", "where", "order_date", ">", "(", "select", "min", "(", "order_date", ")", "from", "customer_orders", "where", "order_status_code", "=", "value", ")"], "question": "Find the ids of all distinct customers who made order after some orders that were Cancelled.", "question_toks": ["Find", "the", "ids", "of", "all", "distinct", "customers", "who", "made", "order", "after", "some", "orders", "that", "were", "Cancelled", "."], "guid": 5169}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the id of the order whose shipment tracking number is \"3452\".", "sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"", "example": {"db_id": "tracking_orders", "query": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"", "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_tracking_number", "=", "``", "3452", "''"], "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_tracking_number", "=", "value"], "question": "Find the id of the order whose shipment tracking number is \"3452\".", "question_toks": ["Find", "the", "id", "of", "the", "order", "whose", "shipment", "tracking", "number", "is", "``", "3452", "''", "."], "guid": 5170}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Which customers use \"Cash\" for payment method? Return the customer names.", "sql": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\"", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "WHERE", "payment_method", "=", "``", "Cash", "''"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "where", "payment_method", "=", "value"], "question": "Which customers use \"Cash\" for payment method? Return the customer names.", "question_toks": ["Which", "customers", "use", "``", "Cash", "''", "for", "payment", "method", "?", "Return", "the", "customer", "names", "."], "guid": 5171}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Return the lot details of lots that belong to investors with details \"l\"?", "sql": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  \"l\"", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON  T1.investor_id  =  T2.investor_id WHERE T1.Investor_details  =  \"l\"", "query_toks": ["SELECT", "T2.lot_details", "FROM", "INVESTORS", "AS", "T1", "JOIN", "LOTS", "AS", "T2", "ON", "T1.investor_id", "=", "T2.investor_id", "WHERE", "T1.Investor_details", "=", "``", "l", "''"], "query_toks_no_value": ["select", "t2", ".", "lot_details", "from", "investors", "as", "t1", "join", "lots", "as", "t2", "on", "t1", ".", "investor_id", "=", "t2", ".", "investor_id", "where", "t1", ".", "investor_details", "=", "value"], "question": "Return the lot details of lots that belong to investors with details \"l\"?", "question_toks": ["Return", "the", "lot", "details", "of", "lots", "that", "belong", "to", "investors", "with", "details", "``", "l", "''", "?"], "guid": 5172}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T1.customer_id", "FROM", "customer", "AS", "T1", "JOIN", "payment", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "sum", "(", "amount", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t1", ".", "customer_id", "from", "customer", "as", "t1", "join", "payment", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "sum", "(", "amount", ")", "asc", "limit", "value"], "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.", "question_toks": ["Which", "customer", ",", "who", "has", "made", "at", "least", "one", "payment", ",", "has", "spent", "the", "least", "money", "?", "List", "his", "or", "her", "first", "name", ",", "last", "name", ",", "and", "the", "id", "."], "guid": 5173}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | Show the names of customers who have both an order in completed status and an order in part status.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  'Part'", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status_code", "=", "'Completed", "'", "INTERSECT", "SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status_code", "=", "'Part", "'"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status_code", "=", "value", "intersect", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status_code", "=", "value"], "question": "Show the names of customers who have both an order in completed status and an order in part status.", "question_toks": ["Show", "the", "names", "of", "customers", "who", "have", "both", "an", "order", "in", "completed", "status", "and", "an", "order", "in", "part", "status", "."], "guid": 5174}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many invoices were billed from each state?", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;", "example": {"db_id": "store_1", "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;", "query_toks": ["SELECT", "billing_state", ",", "COUNT", "(", "*", ")", "FROM", "invoices", "WHERE", "billing_country", "=", "``", "USA", "''", "GROUP", "BY", "billing_state", ";"], "query_toks_no_value": ["select", "billing_state", ",", "count", "(", "*", ")", "from", "invoices", "where", "billing_country", "=", "value", "group", "by", "billing_state"], "question": "How many invoices were billed from each state?", "question_toks": ["How", "many", "invoices", "were", "billed", "from", "each", "state", "?"], "guid": 5175}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5", "example": {"db_id": "store_product", "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5", "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "max_page_size", "=", "``", "A4", "''", "AND", "pages_per_minute_color", "<", "5"], "query_toks_no_value": ["select", "product", "from", "product", "where", "max_page_size", "=", "value", "and", "pages_per_minute_color", "<", "value"], "question": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?", "question_toks": ["What", "are", "the", "products", "with", "the", "maximum", "page", "size", "A4", "that", "also", "have", "a", "pages", "per", "minute", "color", "smaller", "than", "5", "?"], "guid": 5176}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | In which city do the most employees live and how many of them live there?", "sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "driving_school", "query": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "T1.city", ",", "count", "(", "*", ")", "FROM", "Addresses", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.address_id", "=", "T2.staff_address_id", "GROUP", "BY", "T1.city", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "city", ",", "count", "(", "*", ")", "from", "addresses", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "staff_address_id", "group", "by", "t1", ".", "city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "In which city do the most employees live and how many of them live there?", "question_toks": ["In", "which", "city", "do", "the", "most", "employees", "live", "and", "how", "many", "of", "them", "live", "there", "?"], "guid": 5177}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What are the first, middle, and last names of all staff?", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Staff;", "example": {"db_id": "driving_school", "query": "SELECT first_name ,  middle_name ,  last_name FROM Staff;", "query_toks": ["SELECT", "first_name", ",", "middle_name", ",", "last_name", "FROM", "Staff", ";"], "query_toks_no_value": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "staff"], "question": "What are the first, middle, and last names of all staff?", "question_toks": ["What", "are", "the", "first", ",", "middle", ",", "and", "last", "names", "of", "all", "staff", "?"], "guid": 5178}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Give me the name of the customer who ordered the most items in total.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "GROUP", "BY", "t1.customer_name", "ORDER", "BY", "sum", "(", "t3.order_quantity", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "group", "by", "t1", ".", "customer_name", "order", "by", "sum", "(", "t3", ".", "order_quantity", ")", "desc", "limit", "value"], "question": "Give me the name of the customer who ordered the most items in total.", "question_toks": ["Give", "me", "the", "name", "of", "the", "customer", "who", "ordered", "the", "most", "items", "in", "total", "."], "guid": 5179}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What is the name of the customer who has the most orders?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the customer who has the most orders?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "the", "most", "orders", "?"], "guid": 5180}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are all the payment methods?", "sql": "SELECT DISTINCT payment_method FROM customers", "example": {"db_id": "customers_and_addresses", "query": "SELECT DISTINCT payment_method FROM customers", "query_toks": ["SELECT", "DISTINCT", "payment_method", "FROM", "customers"], "query_toks_no_value": ["select", "distinct", "payment_method", "from", "customers"], "question": "What are all the payment methods?", "question_toks": ["What", "are", "all", "the", "payment", "methods", "?"], "guid": 5181}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | Find the name of tracks which are in both Movies and music playlists.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "example": {"db_id": "store_1", "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "query_toks": ["SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "playlist_tracks", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "playlists", "AS", "T3", "ON", "T2.playlist_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Movies", "'", "INTERSECT", "SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "playlist_tracks", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "playlists", "AS", "T3", "ON", "T2.playlist_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Music", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "playlist_tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "playlists", "as", "t3", "on", "t2", ".", "playlist_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value", "intersect", "select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "playlist_tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "playlists", "as", "t3", "on", "t2", ".", "playlist_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value"], "question": "Find the name of tracks which are in both Movies and music playlists.", "question_toks": ["Find", "the", "name", "of", "tracks", "which", "are", "in", "both", "Movies", "and", "music", "playlists", "."], "guid": 5182}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the different card types, and how many transactions have been made with each?", "sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code", "example": {"db_id": "customers_card_transactions", "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code", "query_toks": ["SELECT", "T2.card_type_code", ",", "count", "(", "*", ")", "FROM", "Financial_transactions", "AS", "T1", "JOIN", "Customers_cards", "AS", "T2", "ON", "T1.card_id", "=", "T2.card_id", "GROUP", "BY", "T2.card_type_code"], "query_toks_no_value": ["select", "t2", ".", "card_type_code", ",", "count", "(", "*", ")", "from", "financial_transactions", "as", "t1", "join", "customers_cards", "as", "t2", "on", "t1", ".", "card_id", "=", "t2", ".", "card_id", "group", "by", "t2", ".", "card_type_code"], "question": "What are the different card types, and how many transactions have been made with each?", "question_toks": ["What", "are", "the", "different", "card", "types", ",", "and", "how", "many", "transactions", "have", "been", "made", "with", "each", "?"], "guid": 5183}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?", "sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"", "example": {"db_id": "tracking_orders", "query": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"", "query_toks": ["SELECT", "DISTINCT", "T2.product_id", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "WHERE", "T1.date_order_placed", ">", "=", "``", "1975-01-01", "''", "AND", "T1.date_order_placed", "<", "=", "``", "1976-01-01", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "product_id", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t1", ".", "date_order_placed", ">", "=", "value", "and", "t1", ".", "date_order_placed", "<", "=", "value"], "question": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?", "question_toks": ["Give", "me", "a", "list", "of", "distinct", "product", "ids", "from", "orders", "placed", "between", "1975-01-01", "and", "1976-01-01", "?"], "guid": 5184}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the staff ids and genders of all staffs whose job title is Department Manager?", "sql": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"", "example": {"db_id": "department_store", "query": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"", "query_toks": ["SELECT", "T1.staff_id", ",", "T1.staff_gender", "FROM", "staff", "AS", "T1", "JOIN", "staff_department_assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.job_title_code", "=", "``", "Department", "Manager", "''"], "query_toks_no_value": ["select", "t1", ".", "staff_id", ",", "t1", ".", "staff_gender", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "job_title_code", "=", "value"], "question": "What are the staff ids and genders of all staffs whose job title is Department Manager?", "question_toks": ["What", "are", "the", "staff", "ids", "and", "genders", "of", "all", "staffs", "whose", "job", "title", "is", "Department", "Manager", "?"], "guid": 5185}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the different card type codes?", "sql": "SELECT DISTINCT card_type_code FROM Customers_Cards", "example": {"db_id": "customers_card_transactions", "query": "SELECT DISTINCT card_type_code FROM Customers_Cards", "query_toks": ["SELECT", "DISTINCT", "card_type_code", "FROM", "Customers_Cards"], "query_toks_no_value": ["select", "distinct", "card_type_code", "from", "customers_cards"], "question": "What are the different card type codes?", "question_toks": ["What", "are", "the", "different", "card", "type", "codes", "?"], "guid": 5186}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | Find the number of customers in total.", "sql": "SELECT count(*) FROM customers", "example": {"db_id": "customer_deliveries", "query": "SELECT count(*) FROM customers", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "Find the number of customers in total.", "question_toks": ["Find", "the", "number", "of", "customers", "in", "total", "."], "guid": 5187}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the nickname of the employee named Janessa Sawayn?", "sql": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "query_toks": ["SELECT", "nickname", "FROM", "Staff", "WHERE", "first_name", "=", "``", "Janessa", "''", "AND", "last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "nickname", "from", "staff", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the nickname of the employee named Janessa Sawayn?", "question_toks": ["What", "is", "the", "nickname", "of", "the", "employee", "named", "Janessa", "Sawayn", "?"], "guid": 5188}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the names of the products with length smaller than 3 or height greater than 5.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "query_toks": ["SELECT", "catalog_entry_name", "FROM", "catalog_contents", "WHERE", "LENGTH", "<", "3", "OR", "width", ">", "5"], "query_toks_no_value": ["select", "catalog_entry_name", "from", "catalog_contents", "where", "length", "<", "value", "or", "width", ">", "value"], "question": "Find the names of the products with length smaller than 3 or height greater than 5.", "question_toks": ["Find", "the", "names", "of", "the", "products", "with", "length", "smaller", "than", "3", "or", "height", "greater", "than", "5", "."], "guid": 5189}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How long is the total lesson time took by the customer named Rylan Goodwin?", "sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";", "example": {"db_id": "driving_school", "query": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";", "query_toks": ["SELECT", "sum", "(", "T1.lesson_time", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.first_name", "=", "``", "Rylan", "''", "AND", "T2.last_name", "=", "``", "Goodwin", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "lesson_time", ")", "from", "lessons", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "How long is the total lesson time took by the customer named Rylan Goodwin?", "question_toks": ["How", "long", "is", "the", "total", "lesson", "time", "took", "by", "the", "customer", "named", "Rylan", "Goodwin", "?"], "guid": 5190}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the names of artist who have the letter 'a' in their names?", "sql": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"", "example": {"db_id": "chinook_1", "query": "SELECT Name FROM ARTIST WHERE Name LIKE \"%a%\"", "query_toks": ["SELECT", "Name", "FROM", "ARTIST", "WHERE", "Name", "LIKE", "``", "%", "a", "%", "''"], "query_toks_no_value": ["select", "name", "from", "artist", "where", "name", "like", "value"], "question": "What are the names of artist who have the letter 'a' in their names?", "question_toks": ["What", "are", "the", "names", "of", "artist", "who", "have", "the", "letter", "'a", "'", "in", "their", "names", "?"], "guid": 5191}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What is the customer id, first and last name with most number of accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_invoices", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.customer_id", ",", "T2.customer_first_name", ",", "T2.customer_last_name", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_id", ",", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the customer id, first and last name with most number of accounts.", "question_toks": ["What", "is", "the", "customer", "id", ",", "first", "and", "last", "name", "with", "most", "number", "of", "accounts", "."], "guid": 5192}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | List the count and id of each product in all the orders.", "sql": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "example": {"db_id": "tracking_orders", "query": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T3.product_id", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "JOIN", "products", "AS", "T3", "ON", "T1.order_id", "=", "T2.order_id", "AND", "T2.product_id", "=", "T3.product_id", "GROUP", "BY", "T3.product_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t3", ".", "product_id", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "join", "products", "as", "t3", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "and", "t2", ".", "product_id", "=", "t3", ".", "product_id", "group", "by", "t3", ".", "product_id"], "question": "List the count and id of each product in all the orders.", "question_toks": ["List", "the", "count", "and", "id", "of", "each", "product", "in", "all", "the", "orders", "."], "guid": 5193}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Return the category code and typical price of 'cumin'.", "sql": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"", "query_toks": ["SELECT", "product_category_code", ",", "typical_buying_price", "FROM", "products", "WHERE", "product_name", "=", "``", "cumin", "''"], "query_toks_no_value": ["select", "product_category_code", ",", "typical_buying_price", "from", "products", "where", "product_name", "=", "value"], "question": "Return the category code and typical price of 'cumin'.", "question_toks": ["Return", "the", "category", "code", "and", "typical", "price", "of", "'cumin", "'", "."], "guid": 5194}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Show the member name and hometown who registered a branch in 2016.", "sql": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016", "example": {"db_id": "shop_membership", "query": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016", "query_toks": ["SELECT", "T2.name", ",", "T2.hometown", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.member_id", "=", "T2.member_id", "WHERE", "T1.register_year", "=", "2016"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "hometown", "from", "membership_register_branch", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "where", "t1", ".", "register_year", "=", "value"], "question": "Show the member name and hometown who registered a branch in 2016.", "question_toks": ["Show", "the", "member", "name", "and", "hometown", "who", "registered", "a", "branch", "in", "2016", "."], "guid": 5195}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Which city is the headquarter of the store named \"Blackville\" in?", "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"", "example": {"db_id": "store_product", "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"", "query_toks": ["SELECT", "t3.headquartered_city", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.store_name", "=", "``", "Blackville", "''"], "query_toks_no_value": ["select", "t3", ".", "headquartered_city", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "store_name", "=", "value"], "question": "Which city is the headquarter of the store named \"Blackville\" in?", "question_toks": ["Which", "city", "is", "the", "headquarter", "of", "the", "store", "named", "``", "Blackville", "''", "in", "?"], "guid": 5196}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the average amount of transactions for different lots.", "sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id", "query_toks": ["SELECT", "T2.lot_id", ",", "avg", "(", "amount_of_transaction", ")", "FROM", "TRANSACTIONS", "AS", "T1", "JOIN", "Transactions_Lots", "AS", "T2", "ON", "T1.transaction_id", "=", "T2.transaction_id", "GROUP", "BY", "T2.lot_id"], "query_toks_no_value": ["select", "t2", ".", "lot_id", ",", "avg", "(", "amount_of_transaction", ")", "from", "transactions", "as", "t1", "join", "transactions_lots", "as", "t2", "on", "t1", ".", "transaction_id", "=", "t2", ".", "transaction_id", "group", "by", "t2", ".", "lot_id"], "question": "Show the average amount of transactions for different lots.", "question_toks": ["Show", "the", "average", "amount", "of", "transactions", "for", "different", "lots", "."], "guid": 5197}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Count the number of cities in Australia.", "sql": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'", "example": {"db_id": "sakila_1", "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "city", "AS", "T1", "JOIN", "country", "AS", "T2", "ON", "T1.country_id", "=", "T2.country_id", "WHERE", "T2.country", "=", "'Australia", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "city", "as", "t1", "join", "country", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "where", "t2", ".", "country", "=", "value"], "question": "Count the number of cities in Australia.", "question_toks": ["Count", "the", "number", "of", "cities", "in", "Australia", "."], "guid": 5198}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Return the names of entrepreneurs.", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "example": {"db_id": "entrepreneur", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "query_toks": ["SELECT", "T2.Name", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"], "question": "Return the names of entrepreneurs.", "question_toks": ["Return", "the", "names", "of", "entrepreneurs", "."], "guid": 5199}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | Show the names of customers who have at least 2 mailshots with outcome code 'Order'.", "sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.customer_name", "FROM", "mailshot_customers", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "outcome_code", "=", "'Order", "'", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "customer_name", "from", "mailshot_customers", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "outcome_code", "=", "value", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.", "question_toks": ["Show", "the", "names", "of", "customers", "who", "have", "at", "least", "2", "mailshots", "with", "outcome", "code", "'Order", "'", "."], "guid": 5200}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the average amount of transactions for different lots, ordered by average amount of transactions.", "sql": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T2.lot_id ,  avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id  =  T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)", "query_toks": ["SELECT", "T2.lot_id", ",", "avg", "(", "amount_of_transaction", ")", "FROM", "TRANSACTIONS", "AS", "T1", "JOIN", "Transactions_Lots", "AS", "T2", "ON", "T1.transaction_id", "=", "T2.transaction_id", "GROUP", "BY", "T2.lot_id", "ORDER", "BY", "avg", "(", "amount_of_transaction", ")"], "query_toks_no_value": ["select", "t2", ".", "lot_id", ",", "avg", "(", "amount_of_transaction", ")", "from", "transactions", "as", "t1", "join", "transactions_lots", "as", "t2", "on", "t1", ".", "transaction_id", "=", "t2", ".", "transaction_id", "group", "by", "t2", ".", "lot_id", "order", "by", "avg", "(", "amount_of_transaction", ")"], "question": "Show the average amount of transactions for different lots, ordered by average amount of transactions.", "question_toks": ["Show", "the", "average", "amount", "of", "transactions", "for", "different", "lots", ",", "ordered", "by", "average", "amount", "of", "transactions", "."], "guid": 5201}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the average unit price of jazz tracks.", "sql": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"", "example": {"db_id": "chinook_1", "query": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"", "query_toks": ["SELECT", "AVG", "(", "UnitPrice", ")", "FROM", "GENRE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.GenreId", "=", "T2.GenreId", "WHERE", "T1.Name", "=", "``", "Jazz", "''"], "query_toks_no_value": ["select", "avg", "(", "unitprice", ")", "from", "genre", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "genreid", "=", "t2", ".", "genreid", "where", "t1", ".", "name", "=", "value"], "question": "Find the average unit price of jazz tracks.", "question_toks": ["Find", "the", "average", "unit", "price", "of", "jazz", "tracks", "."], "guid": 5202}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are all the characteristic names of product \"sesame\"?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "query_toks": ["SELECT", "t3.characteristic_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "sesame", "''"], "query_toks_no_value": ["select", "t3", ".", "characteristic_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value"], "question": "What are all the characteristic names of product \"sesame\"?", "question_toks": ["What", "are", "all", "the", "characteristic", "names", "of", "product", "``", "sesame", "''", "?"], "guid": 5203}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the distinct unit prices of all tracks?", "sql": "SELECT distinct(UnitPrice) FROM TRACK", "example": {"db_id": "chinook_1", "query": "SELECT distinct(UnitPrice) FROM TRACK", "query_toks": ["SELECT", "distinct", "(", "UnitPrice", ")", "FROM", "TRACK"], "query_toks_no_value": ["select", "distinct", "(", "unitprice", ")", "from", "track"], "question": "What are the distinct unit prices of all tracks?", "question_toks": ["What", "are", "the", "distinct", "unit", "prices", "of", "all", "tracks", "?"], "guid": 5204}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | List the name and phone number of all suppliers in the alphabetical order of their addresses.", "sql": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details", "example": {"db_id": "department_store", "query": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details", "query_toks": ["SELECT", "T1.supplier_name", ",", "T1.supplier_phone", "FROM", "Suppliers", "AS", "T1", "JOIN", "supplier_addresses", "AS", "T2", "ON", "T1.supplier_id", "=", "T2.supplier_id", "JOIN", "addresses", "AS", "T3", "ON", "T2.address_id", "=", "T3.address_id", "ORDER", "BY", "T3.address_details"], "query_toks_no_value": ["select", "t1", ".", "supplier_name", ",", "t1", ".", "supplier_phone", "from", "suppliers", "as", "t1", "join", "supplier_addresses", "as", "t2", "on", "t1", ".", "supplier_id", "=", "t2", ".", "supplier_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", "order", "by", "t3", ".", "address_details"], "question": "List the name and phone number of all suppliers in the alphabetical order of their addresses.", "question_toks": ["List", "the", "name", "and", "phone", "number", "of", "all", "suppliers", "in", "the", "alphabetical", "order", "of", "their", "addresses", "."], "guid": 5205}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.first_name", "=", "``", "Rylan", "''", "AND", "T2.last_name", "=", "``", "Goodwin", "''", "AND", "T1.lesson_status_code", "=", "``", "Completed", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "lessons", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value", "and", "t1", ".", "lesson_status_code", "=", "value"], "question": "How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?", "question_toks": ["How", "many", "lessons", "taken", "by", "customer", "with", "first", "name", "as", "Rylan", "and", "last", "name", "as", "Goodwin", "were", "completed", "?"], "guid": 5206}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List email address and birthday of customer whose first name as Carole.", "sql": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"", "example": {"db_id": "driving_school", "query": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"", "query_toks": ["SELECT", "email_address", ",", "date_of_birth", "FROM", "Customers", "WHERE", "first_name", "=", "``", "Carole", "''"], "query_toks_no_value": ["select", "email_address", ",", "date_of_birth", "from", "customers", "where", "first_name", "=", "value"], "question": "List email address and birthday of customer whose first name as Carole.", "question_toks": ["List", "email", "address", "and", "birthday", "of", "customer", "whose", "first", "name", "as", "Carole", "."], "guid": 5207}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show the number of card types.", "sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "query_toks": ["SELECT", "count", "(", "DISTINCT", "card_type_code", ")", "FROM", "Customers_Cards"], "query_toks_no_value": ["select", "count", "(", "distinct", "card_type_code", ")", "from", "customers_cards"], "question": "Show the number of card types.", "question_toks": ["Show", "the", "number", "of", "card", "types", "."], "guid": 5208}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the names and ids of artists with 3 or more albums, listed in alphabetical order?", "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "example": {"db_id": "chinook_1", "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "query_toks": ["SELECT", "T2.Name", ",", "T1.ArtistId", "FROM", "ALBUM", "AS", "T1", "JOIN", "ARTIST", "AS", "T2", "ON", "T1.ArtistId", "=", "T2.ArtistID", "GROUP", "BY", "T1.ArtistId", "HAVING", "COUNT", "(", "*", ")", ">", "=", "3", "ORDER", "BY", "T2.Name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "artistid", "from", "album", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artistid", "=", "t2", ".", "artistid", "group", "by", "t1", ".", "artistid", "having", "count", "(", "*", ")", ">", "=", "value", "order", "by", "t2", ".", "name"], "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "artists", "with", "3", "or", "more", "albums", ",", "listed", "in", "alphabetical", "order", "?"], "guid": 5209}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | How many types of products have Rodrick Heaney bought in total?", "sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t3.product_id", ")", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "WHERE", "t1.customer_name", "=", "``", "Rodrick", "Heaney", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "product_id", ")", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "How many types of products have Rodrick Heaney bought in total?", "question_toks": ["How", "many", "types", "of", "products", "have", "Rodrick", "Heaney", "bought", "in", "total", "?"], "guid": 5210}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the name of tracks belongs to genre Rock or genre Jazz.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"", "example": {"db_id": "store_1", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"", "query_toks": ["SELECT", "T2.name", "FROM", "genres", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "WHERE", "T1.name", "=", "``", "Rock", "''", "OR", "T1.name", "=", "``", "Jazz", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "genres", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "where", "t1", ".", "name", "=", "value", "or", "t1", ".", "name", "=", "value"], "question": "List the name of tracks belongs to genre Rock or genre Jazz.", "question_toks": ["List", "the", "name", "of", "tracks", "belongs", "to", "genre", "Rock", "or", "genre", "Jazz", "."], "guid": 5211}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'", "example": {"db_id": "sakila_1", "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'", "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T1.last_name", "FROM", "staff", "AS", "T1", "JOIN", "rental", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "JOIN", "customer", "AS", "T3", "ON", "T2.customer_id", "=", "T3.customer_id", "WHERE", "T3.first_name", "=", "'APRIL", "'", "AND", "T3.last_name", "=", "'BURNS", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "staff", "as", "t1", "join", "rental", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "join", "customer", "as", "t3", "on", "t2", ".", "customer_id", "=", "t3", ".", "customer_id", "where", "t3", ".", "first_name", "=", "value", "and", "t3", ".", "last_name", "=", "value"], "question": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?", "question_toks": ["What", "is", "the", "full", "name", "of", "the", "staff", "member", "who", "has", "rented", "a", "film", "to", "a", "customer", "with", "the", "first", "name", "April", "and", "the", "last", "name", "Burns", "?"], "guid": 5212}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?", "sql": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"", "example": {"db_id": "chinook_1", "query": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"", "query_toks": ["SELECT", "AVG", "(", "Milliseconds", ")", "FROM", "GENRE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.GenreId", "=", "T2.GenreId", "WHERE", "T1.Name", "=", "``", "Latin", "''", "OR", "T1.Name", "=", "``", "Pop", "''"], "query_toks_no_value": ["select", "avg", "(", "milliseconds", ")", "from", "genre", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "genreid", "=", "t2", ".", "genreid", "where", "t1", ".", "name", "=", "value", "or", "t1", ".", "name", "=", "value"], "question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?", "question_toks": ["What", "is", "the", "average", "duration", "in", "milliseconds", "of", "tracks", "that", "belong", "to", "Latin", "or", "Pop", "genre", "?"], "guid": 5213}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\".", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "JOIN", "ref_colors", "AS", "t4", "ON", "t1.color_code", "=", "t4.color_code", "WHERE", "t4.color_description", "=", "``", "red", "''", "AND", "t3.characteristic_name", "=", "``", "slow", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "join", "ref_colors", "as", "t4", "on", "t1", ".", "color_code", "=", "t4", ".", "color_code", "where", "t4", ".", "color_description", "=", "value", "and", "t3", ".", "characteristic_name", "=", "value"], "question": "Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\".", "question_toks": ["Find", "the", "number", "of", "the", "products", "that", "have", "their", "color", "described", "as", "``", "red", "''", "and", "have", "a", "characteristic", "named", "``", "slow", "''", "."], "guid": 5214}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | List the names and emails of customers who payed by Visa card.", "sql": "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'", "example": {"db_id": "customer_deliveries", "query": "SELECT customer_email ,  customer_name FROM customers WHERE payment_method  =  'Visa'", "query_toks": ["SELECT", "customer_email", ",", "customer_name", "FROM", "customers", "WHERE", "payment_method", "=", "'Visa", "'"], "query_toks_no_value": ["select", "customer_email", ",", "customer_name", "from", "customers", "where", "payment_method", "=", "value"], "question": "List the names and emails of customers who payed by Visa card.", "question_toks": ["List", "the", "names", "and", "emails", "of", "customers", "who", "payed", "by", "Visa", "card", "."], "guid": 5215}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many orders does Lucas Mancini has?", "sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";", "example": {"db_id": "store_1", "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "AS", "T1", "JOIN", "invoices", "AS", "T2", "ON", "T1.id", "=", "T2.customer_id", "WHERE", "T1.first_name", "=", "``", "Lucas", "''", "AND", "T1.last_name", "=", "``", "Mancini", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "as", "t1", "join", "invoices", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "customer_id", "where", "t1", ".", "first_name", "=", "value", "and", "t1", ".", "last_name", "=", "value"], "question": "How many orders does Lucas Mancini has?", "question_toks": ["How", "many", "orders", "does", "Lucas", "Mancini", "has", "?"], "guid": 5216}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the name and active date of the customer that use email as the contact channel.", "sql": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'", "query_toks": ["SELECT", "t1.customer_name", ",", "t2.active_from_date", "FROM", "customers", "AS", "t1", "JOIN", "customer_contact_channels", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t2.channel_code", "=", "'Email", "'"], "query_toks_no_value": ["select", "t1", ".", "customer_name", ",", "t2", ".", "active_from_date", "from", "customers", "as", "t1", "join", "customer_contact_channels", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "channel_code", "=", "value"], "question": "Find the name and active date of the customer that use email as the contact channel.", "question_toks": ["Find", "the", "name", "and", "active", "date", "of", "the", "customer", "that", "use", "email", "as", "the", "contact", "channel", "."], "guid": 5217}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What are the coupon amount of the coupons owned by both good and bad customers?", "sql": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'", "example": {"db_id": "products_for_hire", "query": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'", "query_toks": ["SELECT", "T1.coupon_amount", "FROM", "Discount_Coupons", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.coupon_id", "=", "T2.coupon_id", "WHERE", "T2.good_or_bad_customer", "=", "'good", "'", "INTERSECT", "SELECT", "T1.coupon_amount", "FROM", "Discount_Coupons", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.coupon_id", "=", "T2.coupon_id", "WHERE", "T2.good_or_bad_customer", "=", "'bad", "'"], "query_toks_no_value": ["select", "t1", ".", "coupon_amount", "from", "discount_coupons", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "coupon_id", "=", "t2", ".", "coupon_id", "where", "t2", ".", "good_or_bad_customer", "=", "value", "intersect", "select", "t1", ".", "coupon_amount", "from", "discount_coupons", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "coupon_id", "=", "t2", ".", "coupon_id", "where", "t2", ".", "good_or_bad_customer", "=", "value"], "question": "What are the coupon amount of the coupons owned by both good and bad customers?", "question_toks": ["What", "are", "the", "coupon", "amount", "of", "the", "coupons", "owned", "by", "both", "good", "and", "bad", "customers", "?"], "guid": 5218}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What is the customer first, last name and id with least number of accounts.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "customers_card_transactions", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T2.customer_first_name", ",", "T2.customer_last_name", ",", "T1.customer_id", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", ",", "t1", ".", "customer_id", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the customer first, last name and id with least number of accounts.", "question_toks": ["What", "is", "the", "customer", "first", ",", "last", "name", "and", "id", "with", "least", "number", "of", "accounts", "."], "guid": 5219}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Return the unit of measure for 'Herb' products.", "sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"", "query_toks": ["SELECT", "unit_of_measure", "FROM", "ref_product_categories", "WHERE", "product_category_code", "=", "``", "Herbs", "''"], "query_toks_no_value": ["select", "unit_of_measure", "from", "ref_product_categories", "where", "product_category_code", "=", "value"], "question": "Return the unit of measure for 'Herb' products.", "question_toks": ["Return", "the", "unit", "of", "measure", "for", "'Herb", "'", "products", "."], "guid": 5220}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the ids, date opened, name, and other details for all accounts?", "sql": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts", "example": {"db_id": "customers_and_invoices", "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts", "query_toks": ["SELECT", "account_id", ",", "date_account_opened", ",", "account_name", ",", "other_account_details", "FROM", "Accounts"], "query_toks_no_value": ["select", "account_id", ",", "date_account_opened", ",", "account_name", ",", "other_account_details", "from", "accounts"], "question": "What are the ids, date opened, name, and other details for all accounts?", "question_toks": ["What", "are", "the", "ids", ",", "date", "opened", ",", "name", ",", "and", "other", "details", "for", "all", "accounts", "?"], "guid": 5221}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What are the first and last names of all customers who lived in Lockmanfurt?", "sql": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";", "example": {"db_id": "driving_school", "query": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "Customers", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.customer_address_id", "=", "T2.address_id", "WHERE", "T2.city", "=", "``", "Lockmanfurt", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "customers", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "customer_address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "city", "=", "value"], "question": "What are the first and last names of all customers who lived in Lockmanfurt?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "all", "customers", "who", "lived", "in", "Lockmanfurt", "?"], "guid": 5222}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the number of invoices and the invoice total from California.", "sql": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";", "example": {"db_id": "store_1", "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";", "query_toks": ["SELECT", "billing_state", ",", "COUNT", "(", "*", ")", ",", "SUM", "(", "total", ")", "FROM", "invoices", "WHERE", "billing_state", "=", "``", "CA", "''", ";"], "query_toks_no_value": ["select", "billing_state", ",", "count", "(", "*", ")", ",", "sum", "(", "total", ")", "from", "invoices", "where", "billing_state", "=", "value"], "question": "List the number of invoices and the invoice total from California.", "question_toks": ["List", "the", "number", "of", "invoices", "and", "the", "invoice", "total", "from", "California", "."], "guid": 5223}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | When did the staff member Janessa Sawayn leave the company?", "sql": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "query_toks": ["SELECT", "date_left_staff", "FROM", "Staff", "WHERE", "first_name", "=", "``", "Janessa", "''", "AND", "last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "date_left_staff", "from", "staff", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "When did the staff member Janessa Sawayn leave the company?", "question_toks": ["When", "did", "the", "staff", "member", "Janessa", "Sawayn", "leave", "the", "company", "?"], "guid": 5224}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the names of the albums that have more than 10 tracks?", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "example": {"db_id": "store_1", "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "query_toks": ["SELECT", "T1.title", "FROM", "albums", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.album_id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "T1.id", ")", ">", "10", ";"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "albums", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "album_id", "group", "by", "t1", ".", "id", "having", "count", "(", "t1", ".", "id", ")", ">", "value"], "question": "What are the names of the albums that have more than 10 tracks?", "question_toks": ["What", "are", "the", "names", "of", "the", "albums", "that", "have", "more", "than", "10", "tracks", "?"], "guid": 5225}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the product id and product type of the cheapest product?", "sql": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1", "query_toks": ["SELECT", "product_id", ",", "product_type_code", "FROM", "products", "ORDER", "BY", "product_price", "LIMIT", "1"], "query_toks_no_value": ["select", "product_id", ",", "product_type_code", "from", "products", "order", "by", "product_price", "limit", "value"], "question": "What are the product id and product type of the cheapest product?", "question_toks": ["What", "are", "the", "product", "id", "and", "product", "type", "of", "the", "cheapest", "product", "?"], "guid": 5226}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find the most prominent max page size among all the products.", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "store_product", "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "max_page_size", "FROM", "product", "GROUP", "BY", "max_page_size", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "max_page_size", "from", "product", "group", "by", "max_page_size", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the most prominent max page size among all the products.", "question_toks": ["Find", "the", "most", "prominent", "max", "page", "size", "among", "all", "the", "products", "."], "guid": 5227}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the average unit price for a track.", "sql": "SELECT AVG(UnitPrice) FROM TRACK", "example": {"db_id": "chinook_1", "query": "SELECT AVG(UnitPrice) FROM TRACK", "query_toks": ["SELECT", "AVG", "(", "UnitPrice", ")", "FROM", "TRACK"], "query_toks_no_value": ["select", "avg", "(", "unitprice", ")", "from", "track"], "question": "Find the average unit price for a track.", "question_toks": ["Find", "the", "average", "unit", "price", "for", "a", "track", "."], "guid": 5228}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Return the investor who have invested in the greatest number of entrepreneurs.", "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "entrepreneur", "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Investor", "FROM", "entrepreneur", "GROUP", "BY", "Investor", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "investor", "from", "entrepreneur", "group", "by", "investor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the investor who have invested in the greatest number of entrepreneurs.", "question_toks": ["Return", "the", "investor", "who", "have", "invested", "in", "the", "greatest", "number", "of", "entrepreneurs", "."], "guid": 5229}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | List the names and phone numbers of all the distinct suppliers who supply red jeans.", "sql": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"", "example": {"db_id": "department_store", "query": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"", "query_toks": ["SELECT", "DISTINCT", "T1.supplier_name", ",", "T1.supplier_phone", "FROM", "suppliers", "AS", "T1", "JOIN", "product_suppliers", "AS", "T2", "ON", "T1.supplier_id", "=", "T2.supplier_id", "JOIN", "products", "AS", "T3", "ON", "T2.product_id", "=", "T3.product_id", "WHERE", "T3.product_name", "=", "``", "red", "jeans", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "supplier_name", ",", "t1", ".", "supplier_phone", "from", "suppliers", "as", "t1", "join", "product_suppliers", "as", "t2", "on", "t1", ".", "supplier_id", "=", "t2", ".", "supplier_id", "join", "products", "as", "t3", "on", "t2", ".", "product_id", "=", "t3", ".", "product_id", "where", "t3", ".", "product_name", "=", "value"], "question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.", "question_toks": ["List", "the", "names", "and", "phone", "numbers", "of", "all", "the", "distinct", "suppliers", "who", "supply", "red", "jeans", "."], "guid": 5230}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show all customer ids and the number of accounts for each customer.", "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id", "query_toks": ["SELECT", "customer_id", ",", "count", "(", "*", ")", "FROM", "Accounts", "GROUP", "BY", "customer_id"], "query_toks_no_value": ["select", "customer_id", ",", "count", "(", "*", ")", "from", "accounts", "group", "by", "customer_id"], "question": "Show all customer ids and the number of accounts for each customer.", "question_toks": ["Show", "all", "customer", "ids", "and", "the", "number", "of", "accounts", "for", "each", "customer", "."], "guid": 5231}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5", "example": {"db_id": "store_product", "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5", "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "max_page_size", "=", "``", "A4", "''", "OR", "pages_per_minute_color", "<", "5"], "query_toks_no_value": ["select", "product", "from", "product", "where", "max_page_size", "=", "value", "or", "pages_per_minute_color", "<", "value"], "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?", "question_toks": ["What", "are", "the", "products", "with", "the", "maximum", "page", "size", "eqal", "to", "A4", "or", "a", "pages", "per", "minute", "color", "less", "than", "5", "?"], "guid": 5232}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | How many accounts do we have?", "sql": "SELECT count(*) FROM Accounts", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Accounts", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Accounts"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "accounts"], "question": "How many accounts do we have?", "question_toks": ["How", "many", "accounts", "do", "we", "have", "?"], "guid": 5233}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the phone numbers of all customers and suppliers.", "sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers", "example": {"db_id": "department_store", "query": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers", "query_toks": ["SELECT", "customer_phone", "FROM", "customers", "UNION", "SELECT", "supplier_phone", "FROM", "suppliers"], "query_toks_no_value": ["select", "customer_phone", "from", "customers", "union", "select", "supplier_phone", "from", "suppliers"], "question": "What are the phone numbers of all customers and suppliers.", "question_toks": ["What", "are", "the", "phone", "numbers", "of", "all", "customers", "and", "suppliers", "."], "guid": 5234}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What is the id of the most recent order?", "sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1", "example": {"db_id": "tracking_orders", "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1", "query_toks": ["SELECT", "order_id", "FROM", "orders", "ORDER", "BY", "date_order_placed", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "order_id", "from", "orders", "order", "by", "date_order_placed", "desc", "limit", "value"], "question": "What is the id of the most recent order?", "question_toks": ["What", "is", "the", "id", "of", "the", "most", "recent", "order", "?"], "guid": 5235}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many tracks are in each genre?", "sql": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;", "example": {"db_id": "store_1", "query": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name;", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.name", "FROM", "genres", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "GROUP", "BY", "T1.name", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "genres", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "group", "by", "t1", ".", "name"], "question": "How many tracks are in each genre?", "question_toks": ["How", "many", "tracks", "are", "in", "each", "genre", "?"], "guid": 5236}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What is all the customer information for customers in NY state?", "sql": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"", "example": {"db_id": "chinook_1", "query": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"", "query_toks": ["SELECT", "*", "FROM", "CUSTOMER", "WHERE", "State", "=", "``", "NY", "''"], "query_toks_no_value": ["select", "*", "from", "customer", "where", "state", "=", "value"], "question": "What is all the customer information for customers in NY state?", "question_toks": ["What", "is", "all", "the", "customer", "information", "for", "customers", "in", "NY", "state", "?"], "guid": 5237}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Count the number of products in the category 'Seeds'.", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "WHERE", "product_category_code", "=", "``", "Seeds", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "where", "product_category_code", "=", "value"], "question": "Count the number of products in the category 'Seeds'.", "question_toks": ["Count", "the", "number", "of", "products", "in", "the", "category", "'Seeds", "'", "."], "guid": 5238}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What is the customer last name, id and phone number with most number of orders?", "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.customer_last_name", ",", "T1.customer_id", ",", "T2.phone_number", "FROM", "Orders", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "customer_last_name", ",", "t1", ".", "customer_id", ",", "t2", ".", "phone_number", "from", "orders", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the customer last name, id and phone number with most number of orders?", "question_toks": ["What", "is", "the", "customer", "last", "name", ",", "id", "and", "phone", "number", "with", "most", "number", "of", "orders", "?"], "guid": 5239}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the first and last names of all the employees and how many people report to them?", "sql": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;", "example": {"db_id": "store_1", "query": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", ",", "count", "(", "T1.reports_to", ")", "FROM", "employees", "AS", "T1", "JOIN", "employees", "AS", "T2", "ON", "T1.reports_to", "=", "T2.id", "GROUP", "BY", "T1.reports_to", "ORDER", "BY", "count", "(", "T1.reports_to", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", ",", "count", "(", "t1", ".", "reports_to", ")", "from", "employees", "as", "t1", "join", "employees", "as", "t2", "on", "t1", ".", "reports_to", "=", "t2", ".", "id", "group", "by", "t1", ".", "reports_to", "order", "by", "count", "(", "t1", ".", "reports_to", ")", "desc", "limit", "value"], "question": "What are the first and last names of all the employees and how many people report to them?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "all", "the", "employees", "and", "how", "many", "people", "report", "to", "them", "?"], "guid": 5240}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the \"date became customers\" of the customers whose ID is between 10 and 20.", "sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20", "example": {"db_id": "customers_and_addresses", "query": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20", "query_toks": ["SELECT", "date_became_customer", "FROM", "customers", "WHERE", "customer_id", "BETWEEN", "10", "AND", "20"], "query_toks_no_value": ["select", "date_became_customer", "from", "customers", "where", "customer_id", "between", "value", "and", "value"], "question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.", "question_toks": ["Find", "the", "``", "date", "became", "customers", "''", "of", "the", "customers", "whose", "ID", "is", "between", "10", "and", "20", "."], "guid": 5241}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | What is the attribute data type of the attribute with name \"Green\"?", "sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"", "example": {"db_id": "product_catalog", "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"", "query_toks": ["SELECT", "attribute_data_type", "FROM", "Attribute_Definitions", "WHERE", "attribute_name", "=", "``", "Green", "''"], "query_toks_no_value": ["select", "attribute_data_type", "from", "attribute_definitions", "where", "attribute_name", "=", "value"], "question": "What is the attribute data type of the attribute with name \"Green\"?", "question_toks": ["What", "is", "the", "attribute", "data", "type", "of", "the", "attribute", "with", "name", "``", "Green", "''", "?"], "guid": 5242}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Which products has been complained by the customer who has filed least amount of complaints?", "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "DISTINCT", "t1.product_name", "FROM", "products", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "customers", "AS", "t3", "GROUP", "BY", "t3.customer_id", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "distinct", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "customers", "as", "t3", "group", "by", "t3", ".", "customer_id", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Which products has been complained by the customer who has filed least amount of complaints?", "question_toks": ["Which", "products", "has", "been", "complained", "by", "the", "customer", "who", "has", "filed", "least", "amount", "of", "complaints", "?"], "guid": 5243}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Return the average price of products that have each category code.", "sql": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code", "example": {"db_id": "customer_complaints", "query": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code", "query_toks": ["SELECT", "avg", "(", "product_price", ")", ",", "product_category_code", "FROM", "products", "GROUP", "BY", "product_category_code"], "query_toks_no_value": ["select", "avg", "(", "product_price", ")", ",", "product_category_code", "from", "products", "group", "by", "product_category_code"], "question": "Return the average price of products that have each category code.", "question_toks": ["Return", "the", "average", "price", "of", "products", "that", "have", "each", "category", "code", "."], "guid": 5244}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Return the description and unit of measurement for products in the 'Herbs' category.", "sql": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"", "query_toks": ["SELECT", "product_category_description", ",", "unit_of_measure", "FROM", "ref_product_categories", "WHERE", "product_category_code", "=", "``", "Herbs", "''"], "query_toks_no_value": ["select", "product_category_description", ",", "unit_of_measure", "from", "ref_product_categories", "where", "product_category_code", "=", "value"], "question": "Return the description and unit of measurement for products in the 'Herbs' category.", "question_toks": ["Return", "the", "description", "and", "unit", "of", "measurement", "for", "products", "in", "the", "'Herbs", "'", "category", "."], "guid": 5245}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?", "sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'", "example": {"db_id": "customers_and_invoices", "query": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'", "query_toks": ["SELECT", "T1.account_id", ",", "T1.date_account_opened", ",", "T1.account_name", ",", "T1.other_account_details", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.customer_first_name", "=", "'Meaghan", "'"], "query_toks_no_value": ["select", "t1", ".", "account_id", ",", "t1", ".", "date_account_opened", ",", "t1", ".", "account_name", ",", "t1", ".", "other_account_details", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_first_name", "=", "value"], "question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?", "question_toks": ["What", "are", "the", "ids", ",", "names", ",", "dates", "of", "opening", ",", "and", "other", "details", "for", "accounts", "corresponding", "to", "the", "customer", "with", "the", "first", "name", "``", "Meaghan", "''", "?"], "guid": 5246}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | How many customers are there?", "sql": "SELECT count(*) FROM customers", "example": {"db_id": "customer_complaints", "query": "SELECT count(*) FROM customers", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "How many customers are there?", "question_toks": ["How", "many", "customers", "are", "there", "?"], "guid": 5247}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show ids, first names, last names, and phones for all customers.", "sql": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers", "query_toks": ["SELECT", "customer_id", ",", "customer_first_name", ",", "customer_last_name", ",", "customer_phone", "FROM", "Customers"], "query_toks_no_value": ["select", "customer_id", ",", "customer_first_name", ",", "customer_last_name", ",", "customer_phone", "from", "customers"], "question": "Show ids, first names, last names, and phones for all customers.", "question_toks": ["Show", "ids", ",", "first", "names", ",", "last", "names", ",", "and", "phones", "for", "all", "customers", "."], "guid": 5248}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | How many languages are in these films?", "sql": "SELECT count(DISTINCT language_id) FROM film", "example": {"db_id": "sakila_1", "query": "SELECT count(DISTINCT language_id) FROM film", "query_toks": ["SELECT", "count", "(", "DISTINCT", "language_id", ")", "FROM", "film"], "query_toks_no_value": ["select", "count", "(", "distinct", "language_id", ")", "from", "film"], "question": "How many languages are in these films?", "question_toks": ["How", "many", "languages", "are", "in", "these", "films", "?"], "guid": 5249}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Count the number of accounts corresponding to each customer id.", "sql": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "customer_id", "FROM", "Accounts", "GROUP", "BY", "customer_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "customer_id", "from", "accounts", "group", "by", "customer_id"], "question": "Count the number of accounts corresponding to each customer id.", "question_toks": ["Count", "the", "number", "of", "accounts", "corresponding", "to", "each", "customer", "id", "."], "guid": 5250}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the city with post code 255.", "sql": "SELECT city FROM addresses WHERE zip_postcode  =  255", "example": {"db_id": "customers_and_addresses", "query": "SELECT city FROM addresses WHERE zip_postcode  =  255", "query_toks": ["SELECT", "city", "FROM", "addresses", "WHERE", "zip_postcode", "=", "255"], "query_toks_no_value": ["select", "city", "from", "addresses", "where", "zip_postcode", "=", "value"], "question": "Find the city with post code 255.", "question_toks": ["Find", "the", "city", "with", "post", "code", "255", "."], "guid": 5251}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the name of tracks belongs to genre Rock or media type is MPEG audio file.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";", "example": {"db_id": "store_1", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";", "query_toks": ["SELECT", "T2.name", "FROM", "genres", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "JOIN", "media_types", "AS", "T3", "ON", "T3.id", "=", "T2.media_type_id", "WHERE", "T1.name", "=", "``", "Rock", "''", "OR", "T3.name", "=", "``", "MPEG", "audio", "file", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "genres", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "join", "media_types", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "media_type_id", "where", "t1", ".", "name", "=", "value", "or", "t3", ".", "name", "=", "value"], "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.", "question_toks": ["List", "the", "name", "of", "tracks", "belongs", "to", "genre", "Rock", "or", "media", "type", "is", "MPEG", "audio", "file", "."], "guid": 5252}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the cities no customers live in?", "sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)", "example": {"db_id": "customers_and_addresses", "query": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)", "query_toks": ["SELECT", "city", "FROM", "addresses", "WHERE", "city", "NOT", "IN", "(", "SELECT", "DISTINCT", "t3.city", "FROM", "customers", "AS", "t1", "JOIN", "customer_addresses", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "addresses", "AS", "t3", "ON", "t2.address_id", "=", "t3.address_id", ")"], "query_toks_no_value": ["select", "city", "from", "addresses", "where", "city", "not", "in", "(", "select", "distinct", "t3", ".", "city", "from", "customers", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", ")"], "question": "What are the cities no customers live in?", "question_toks": ["What", "are", "the", "cities", "no", "customers", "live", "in", "?"], "guid": 5253}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the names and genders of staff who were assigned in 2016?", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"", "example": {"db_id": "department_store", "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"", "query_toks": ["SELECT", "T1.staff_name", ",", "T1.staff_gender", "FROM", "staff", "AS", "T1", "JOIN", "staff_department_assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.date_assigned_from", "LIKE", "``", "2016", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "staff_name", ",", "t1", ".", "staff_gender", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "date_assigned_from", "like", "value"], "question": "What are the names and genders of staff who were assigned in 2016?", "question_toks": ["What", "are", "the", "names", "and", "genders", "of", "staff", "who", "were", "assigned", "in", "2016", "?"], "guid": 5254}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?", "sql": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";", "example": {"db_id": "driving_school", "query": "SELECT sum(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\";", "query_toks": ["SELECT", "sum", "(", "T1.lesson_time", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.first_name", "=", "``", "Rylan", "''", "AND", "T2.last_name", "=", "``", "Goodwin", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "lesson_time", ")", "from", "lessons", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?", "question_toks": ["How", "long", "is", "the", "total", "lesson", "time", "took", "by", "customer", "with", "first", "name", "as", "Rylan", "and", "last", "name", "as", "Goodwin", "?"], "guid": 5255}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many customers are there of each gender?", "sql": "SELECT gender ,  count(*) FROM Customers GROUP BY gender", "example": {"db_id": "customers_and_invoices", "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender", "query_toks": ["SELECT", "gender", ",", "count", "(", "*", ")", "FROM", "Customers", "GROUP", "BY", "gender"], "query_toks_no_value": ["select", "gender", ",", "count", "(", "*", ")", "from", "customers", "group", "by", "gender"], "question": "How many customers are there of each gender?", "question_toks": ["How", "many", "customers", "are", "there", "of", "each", "gender", "?"], "guid": 5256}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Show the company of the tallest entrepreneur.", "sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "example": {"db_id": "entrepreneur", "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "query_toks": ["SELECT", "T1.Company", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "company", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "height", "desc", "limit", "value"], "question": "Show the company of the tallest entrepreneur.", "question_toks": ["Show", "the", "company", "of", "the", "tallest", "entrepreneur", "."], "guid": 5257}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find all the product whose name contains the word \"Scanner\".", "sql": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"", "example": {"db_id": "store_product", "query": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"", "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "product", "LIKE", "``", "%", "Scanner", "%", "''"], "query_toks_no_value": ["select", "product", "from", "product", "where", "product", "like", "value"], "question": "Find all the product whose name contains the word \"Scanner\".", "question_toks": ["Find", "all", "the", "product", "whose", "name", "contains", "the", "word", "``", "Scanner", "''", "."], "guid": 5258}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | List all the characteristic names and data types of product \"cumin\".", "sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"", "query_toks": ["SELECT", "t3.characteristic_name", ",", "t3.characteristic_data_type", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "cumin", "''"], "query_toks_no_value": ["select", "t3", ".", "characteristic_name", ",", "t3", ".", "characteristic_data_type", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value"], "question": "List all the characteristic names and data types of product \"cumin\".", "question_toks": ["List", "all", "the", "characteristic", "names", "and", "data", "types", "of", "product", "``", "cumin", "''", "."], "guid": 5259}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the birthday of the staff member with first name as Janessa and last name as Sawayn?", "sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "query_toks": ["SELECT", "date_of_birth", "FROM", "Staff", "WHERE", "first_name", "=", "``", "Janessa", "''", "AND", "last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "date_of_birth", "from", "staff", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the birthday of the staff member with first name as Janessa and last name as Sawayn?", "question_toks": ["What", "is", "the", "birthday", "of", "the", "staff", "member", "with", "first", "name", "as", "Janessa", "and", "last", "name", "as", "Sawayn", "?"], "guid": 5260}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Show name, address road, and city for all branches sorted by open year.", "sql": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year", "example": {"db_id": "shop_membership", "query": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year", "query_toks": ["SELECT", "name", ",", "address_road", ",", "city", "FROM", "branch", "ORDER", "BY", "open_year"], "query_toks_no_value": ["select", "name", ",", "address_road", ",", "city", "from", "branch", "order", "by", "open_year"], "question": "Show name, address road, and city for all branches sorted by open year.", "question_toks": ["Show", "name", ",", "address", "road", ",", "and", "city", "for", "all", "branches", "sorted", "by", "open", "year", "."], "guid": 5261}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the birth dates corresponding to employees who live in the city of Edmonton.", "sql": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"", "example": {"db_id": "chinook_1", "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"", "query_toks": ["SELECT", "BirthDate", "FROM", "EMPLOYEE", "WHERE", "City", "=", "``", "Edmonton", "''"], "query_toks_no_value": ["select", "birthdate", "from", "employee", "where", "city", "=", "value"], "question": "Find the birth dates corresponding to employees who live in the city of Edmonton.", "question_toks": ["Find", "the", "birth", "dates", "corresponding", "to", "employees", "who", "live", "in", "the", "city", "of", "Edmonton", "."], "guid": 5262}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the country in which the customer Carole Bernhard lived?", "sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "example": {"db_id": "driving_school", "query": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "query_toks": ["SELECT", "T2.country", "FROM", "Customers", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.customer_address_id", "=", "T2.address_id", "WHERE", "T1.first_name", "=", "``", "Carole", "''", "AND", "T1.last_name", "=", "``", "Bernhard", "''"], "query_toks_no_value": ["select", "t2", ".", "country", "from", "customers", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "customer_address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "first_name", "=", "value", "and", "t1", ".", "last_name", "=", "value"], "question": "What is the country in which the customer Carole Bernhard lived?", "question_toks": ["What", "is", "the", "country", "in", "which", "the", "customer", "Carole", "Bernhard", "lived", "?"], "guid": 5263}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?", "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";", "example": {"db_id": "driving_school", "query": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";", "query_toks": ["SELECT", "T1.lesson_id", "FROM", "Lessons", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.first_name", "=", "``", "Janessa", "''", "AND", "T2.last_name", "=", "``", "Sawayn", "''", "AND", "nickname", "LIKE", "``", "%", "s", "%", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "lesson_id", "from", "lessons", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value", "and", "nickname", "like", "value"], "question": "What are the the lesson ids of all staff taught by Janessa Sawayn whose nickname has the letter s?", "question_toks": ["What", "are", "the", "the", "lesson", "ids", "of", "all", "staff", "taught", "by", "Janessa", "Sawayn", "whose", "nickname", "has", "the", "letter", "s", "?"], "guid": 5264}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | How many customers are there?", "sql": "SELECT count(*) FROM customers", "example": {"db_id": "customers_and_addresses", "query": "SELECT count(*) FROM customers", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "How many customers are there?", "question_toks": ["How", "many", "customers", "are", "there", "?"], "guid": 5265}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What are the names of the states that have 2 to 4 employees living there?", "sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;", "example": {"db_id": "driving_school", "query": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;", "query_toks": ["SELECT", "T1.state_province_county", "FROM", "Addresses", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.address_id", "=", "T2.staff_address_id", "GROUP", "BY", "T1.state_province_county", "HAVING", "count", "(", "*", ")", "BETWEEN", "2", "AND", "4", ";"], "query_toks_no_value": ["select", "t1", ".", "state_province_county", "from", "addresses", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "staff_address_id", "group", "by", "t1", ".", "state_province_county", "having", "count", "(", "*", ")", "between", "value", "and", "value"], "question": "What are the names of the states that have 2 to 4 employees living there?", "question_toks": ["What", "are", "the", "names", "of", "the", "states", "that", "have", "2", "to", "4", "employees", "living", "there", "?"], "guid": 5266}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the descriptions of the categories that products with product descriptions that contain the letter t are in?", "sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'", "example": {"db_id": "products_gen_characteristics", "query": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'", "query_toks": ["SELECT", "T1.product_category_description", "FROM", "ref_product_categories", "AS", "T1", "JOIN", "products", "AS", "T2", "ON", "T1.product_category_code", "=", "T2.product_category_code", "WHERE", "T2.product_description", "LIKE", "'", "%", "t", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "product_category_description", "from", "ref_product_categories", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_category_code", "=", "t2", ".", "product_category_code", "where", "t2", ".", "product_description", "like", "value"], "question": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?", "question_toks": ["What", "are", "the", "descriptions", "of", "the", "categories", "that", "products", "with", "product", "descriptions", "that", "contain", "the", "letter", "t", "are", "in", "?"], "guid": 5267}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the names of all tracks that are on the Movies playlist but not in the music playlist?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "example": {"db_id": "store_1", "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "query_toks": ["SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "playlist_tracks", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "playlists", "AS", "T3", "ON", "T2.playlist_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Movies", "'", "EXCEPT", "SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "playlist_tracks", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "playlists", "AS", "T3", "ON", "T2.playlist_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Music", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "playlist_tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "playlists", "as", "t3", "on", "t2", ".", "playlist_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value", "except", "select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "playlist_tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "playlists", "as", "t3", "on", "t2", ".", "playlist_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value"], "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?", "question_toks": ["What", "are", "the", "names", "of", "all", "tracks", "that", "are", "on", "the", "Movies", "playlist", "but", "not", "in", "the", "music", "playlist", "?"], "guid": 5268}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the title of the album that was released by the artist whose name has the phrase 'Led'?", "sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'", "example": {"db_id": "store_1", "query": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'", "query_toks": ["SELECT", "T2.title", "FROM", "artists", "AS", "T1", "JOIN", "albums", "AS", "T2", "ON", "T1.id", "=", "T2.artist_id", "WHERE", "T1.name", "LIKE", "'", "%", "Led", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "artists", "as", "t1", "join", "albums", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "artist_id", "where", "t1", ".", "name", "like", "value"], "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?", "question_toks": ["What", "is", "the", "title", "of", "the", "album", "that", "was", "released", "by", "the", "artist", "whose", "name", "has", "the", "phrase", "'Led", "'", "?"], "guid": 5269}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | Show the product type codes which have at least two products.", "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING count(*)  >=  2", "query_toks": ["SELECT", "product_type_code", "FROM", "products", "GROUP", "BY", "product_type_code", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "product_type_code", "from", "products", "group", "by", "product_type_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the product type codes which have at least two products.", "question_toks": ["Show", "the", "product", "type", "codes", "which", "have", "at", "least", "two", "products", "."], "guid": 5270}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | When did customer with first name as Carole and last name as Bernhard became a customer?", "sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";", "example": {"db_id": "driving_school", "query": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";", "query_toks": ["SELECT", "date_became_customer", "FROM", "Customers", "WHERE", "first_name", "=", "``", "Carole", "''", "AND", "last_name", "=", "``", "Bernhard", "''", ";"], "query_toks_no_value": ["select", "date_became_customer", "from", "customers", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "When did customer with first name as Carole and last name as Bernhard became a customer?", "question_toks": ["When", "did", "customer", "with", "first", "name", "as", "Carole", "and", "last", "name", "as", "Bernhard", "became", "a", "customer", "?"], "guid": 5271}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What are the companies of entrepreneurs, ordered descending by amount of money requested?", "sql": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "example": {"db_id": "entrepreneur", "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC", "query_toks": ["SELECT", "Company", "FROM", "entrepreneur", "ORDER", "BY", "Money_Requested", "DESC"], "query_toks_no_value": ["select", "company", "from", "entrepreneur", "order", "by", "money_requested", "desc"], "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?", "question_toks": ["What", "are", "the", "companies", "of", "entrepreneurs", ",", "ordered", "descending", "by", "amount", "of", "money", "requested", "?"], "guid": 5272}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | Find the name of the most expensive product.", "sql": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1", "example": {"db_id": "customer_deliveries", "query": "SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1", "query_toks": ["SELECT", "product_name", "FROM", "products", "ORDER", "BY", "product_price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_name", "from", "products", "order", "by", "product_price", "desc", "limit", "value"], "question": "Find the name of the most expensive product.", "question_toks": ["Find", "the", "name", "of", "the", "most", "expensive", "product", "."], "guid": 5273}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".", "sql": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "query_toks": ["SELECT", "sum", "(", "t3.order_quantity", ")", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "WHERE", "t1.customer_name", "=", "``", "Rodrick", "Heaney", "''"], "query_toks_no_value": ["select", "sum", "(", "t3", ".", "order_quantity", ")", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".", "question_toks": ["Tell", "me", "the", "total", "quantity", "of", "products", "bought", "by", "the", "customer", "called", "``", "Rodrick", "Heaney", "''", "."], "guid": 5274}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the titles of all the Aerosmith albums?", "sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";", "example": {"db_id": "store_1", "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";", "query_toks": ["SELECT", "T1.title", "FROM", "albums", "AS", "T1", "JOIN", "artists", "AS", "T2", "ON", "T1.artist_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Aerosmith", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "albums", "as", "t1", "join", "artists", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "What are the titles of all the Aerosmith albums?", "question_toks": ["What", "are", "the", "titles", "of", "all", "the", "Aerosmith", "albums", "?"], "guid": 5275}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the names and data types of the characteristics of the 'cumin' product?", "sql": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t3.characteristic_name ,  t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"cumin\"", "query_toks": ["SELECT", "t3.characteristic_name", ",", "t3.characteristic_data_type", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "cumin", "''"], "query_toks_no_value": ["select", "t3", ".", "characteristic_name", ",", "t3", ".", "characteristic_data_type", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value"], "question": "What are the names and data types of the characteristics of the 'cumin' product?", "question_toks": ["What", "are", "the", "names", "and", "data", "types", "of", "the", "characteristics", "of", "the", "'cumin", "'", "product", "?"], "guid": 5276}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What is the name of the product with the color description 'yellow'?", "sql": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'", "example": {"db_id": "products_gen_characteristics", "query": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'", "query_toks": ["SELECT", "T1.product_name", "FROM", "products", "AS", "T1", "JOIN", "ref_colors", "AS", "T2", "ON", "T1.color_code", "=", "T2.color_code", "WHERE", "T2.color_description", "=", "'yellow", "'"], "query_toks_no_value": ["select", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "where", "t2", ".", "color_description", "=", "value"], "question": "What is the name of the product with the color description 'yellow'?", "question_toks": ["What", "is", "the", "name", "of", "the", "product", "with", "the", "color", "description", "'yellow", "'", "?"], "guid": 5277}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.", "sql": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "department_store", "query": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "avg", "(", "total_amount_purchased", ")", ",", "avg", "(", "total_value_purchased", ")", "FROM", "Product_Suppliers", "WHERE", "supplier_id", "=", "(", "SELECT", "supplier_id", "FROM", "Product_Suppliers", "GROUP", "BY", "supplier_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "avg", "(", "total_amount_purchased", ")", ",", "avg", "(", "total_value_purchased", ")", "from", "product_suppliers", "where", "supplier_id", "=", "(", "select", "supplier_id", "from", "product_suppliers", "group", "by", "supplier_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.", "question_toks": ["Return", "the", "average", "total", "amount", "purchased", "and", "total", "value", "purchased", "for", "the", "supplier", "who", "supplies", "the", "greatest", "number", "of", "products", "."], "guid": 5278}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show all investor details.", "sql": "SELECT Investor_details FROM INVESTORS", "example": {"db_id": "tracking_share_transactions", "query": "SELECT Investor_details FROM INVESTORS", "query_toks": ["SELECT", "Investor_details", "FROM", "INVESTORS"], "query_toks_no_value": ["select", "investor_details", "from", "investors"], "question": "Show all investor details.", "question_toks": ["Show", "all", "investor", "details", "."], "guid": 5279}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Count the number of characteristics of the 'flax' product.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "flax", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value"], "question": "Count the number of characteristics of the 'flax' product.", "question_toks": ["Count", "the", "number", "of", "characteristics", "of", "the", "'flax", "'", "product", "."], "guid": 5280}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Find the names of all the product characteristics.", "sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS", "example": {"db_id": "products_gen_characteristics", "query": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS", "query_toks": ["SELECT", "DISTINCT", "characteristic_name", "FROM", "CHARACTERISTICS"], "query_toks_no_value": ["select", "distinct", "characteristic_name", "from", "characteristics"], "question": "Find the names of all the product characteristics.", "question_toks": ["Find", "the", "names", "of", "all", "the", "product", "characteristics", "."], "guid": 5281}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which film has the highest rental rate? And what is the rate?", "sql": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1", "query_toks": ["SELECT", "title", ",", "rental_rate", "FROM", "film", "ORDER", "BY", "rental_rate", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "title", ",", "rental_rate", "from", "film", "order", "by", "rental_rate", "desc", "limit", "value"], "question": "Which film has the highest rental rate? And what is the rate?", "question_toks": ["Which", "film", "has", "the", "highest", "rental", "rate", "?", "And", "what", "is", "the", "rate", "?"], "guid": 5282}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the company where Eduardo Martins is a customer?", "sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";", "example": {"db_id": "store_1", "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";", "query_toks": ["SELECT", "company", "FROM", "customers", "WHERE", "first_name", "=", "``", "Eduardo", "''", "AND", "last_name", "=", "``", "Martins", "''", ";"], "query_toks_no_value": ["select", "company", "from", "customers", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the company where Eduardo Martins is a customer?", "question_toks": ["What", "is", "the", "company", "where", "Eduardo", "Martins", "is", "a", "customer", "?"], "guid": 5283}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Return the phone and email of the customer with the first name Aniyah and last name Feest.", "sql": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"", "query_toks": ["SELECT", "customer_phone", ",", "customer_email", "FROM", "Customers", "WHERE", "customer_first_name", "=", "``", "Aniyah", "''", "AND", "customer_last_name", "=", "``", "Feest", "''"], "query_toks_no_value": ["select", "customer_phone", ",", "customer_email", "from", "customers", "where", "customer_first_name", "=", "value", "and", "customer_last_name", "=", "value"], "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.", "question_toks": ["Return", "the", "phone", "and", "email", "of", "the", "customer", "with", "the", "first", "name", "Aniyah", "and", "last", "name", "Feest", "."], "guid": 5284}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Find the number of complaints with Product Failure type for each complaint status.", "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code", "example": {"db_id": "customer_complaints", "query": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code", "query_toks": ["SELECT", "complaint_status_code", ",", "count", "(", "*", ")", "FROM", "complaints", "WHERE", "complaint_type_code", "=", "``", "Product", "Failure", "''", "GROUP", "BY", "complaint_status_code"], "query_toks_no_value": ["select", "complaint_status_code", ",", "count", "(", "*", ")", "from", "complaints", "where", "complaint_type_code", "=", "value", "group", "by", "complaint_status_code"], "question": "Find the number of complaints with Product Failure type for each complaint status.", "question_toks": ["Find", "the", "number", "of", "complaints", "with", "Product", "Failure", "type", "for", "each", "complaint", "status", "."], "guid": 5285}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What is the name of the district with the most residents?", "sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1", "example": {"db_id": "store_product", "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1", "query_toks": ["SELECT", "district_name", "FROM", "district", "ORDER", "BY", "city_population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "district_name", "from", "district", "order", "by", "city_population", "desc", "limit", "value"], "question": "What is the name of the district with the most residents?", "question_toks": ["What", "is", "the", "name", "of", "the", "district", "with", "the", "most", "residents", "?"], "guid": 5286}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the titles of all albums that start with A in alphabetical order?", "sql": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "example": {"db_id": "store_1", "query": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title;", "query_toks": ["SELECT", "title", "FROM", "albums", "WHERE", "title", "LIKE", "'A", "%", "'", "ORDER", "BY", "title", ";"], "query_toks_no_value": ["select", "title", "from", "albums", "where", "title", "like", "value", "order", "by", "title"], "question": "What are the titles of all albums that start with A in alphabetical order?", "question_toks": ["What", "are", "the", "titles", "of", "all", "albums", "that", "start", "with", "A", "in", "alphabetical", "order", "?"], "guid": 5287}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Give the total money requested by entrepreneurs who are taller than 1.85.", "sql": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85", "example": {"db_id": "entrepreneur", "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85", "query_toks": ["SELECT", "sum", "(", "T1.Money_Requested", ")", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Height", ">", "1.85"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "money_requested", ")", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "height", ">", "value"], "question": "Give the total money requested by entrepreneurs who are taller than 1.85.", "question_toks": ["Give", "the", "total", "money", "requested", "by", "entrepreneurs", "who", "are", "taller", "than", "1.85", "."], "guid": 5288}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List first name and last name of customers that have more than 2 payments.", "sql": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;", "example": {"db_id": "driving_school", "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "Customer_Payments", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "2", ";"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "customer_payments", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "value"], "question": "List first name and last name of customers that have more than 2 payments.", "question_toks": ["List", "first", "name", "and", "last", "name", "of", "customers", "that", "have", "more", "than", "2", "payments", "."], "guid": 5289}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Show the album names, ids and the number of tracks for each album.", "sql": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID", "example": {"db_id": "chinook_1", "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID", "query_toks": ["SELECT", "T1.Title", ",", "T2.AlbumID", ",", "COUNT", "(", "*", ")", "FROM", "ALBUM", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.AlbumId", "=", "T2.AlbumId", "GROUP", "BY", "T2.AlbumID"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "albumid", ",", "count", "(", "*", ")", "from", "album", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "albumid", "=", "t2", ".", "albumid", "group", "by", "t2", ".", "albumid"], "question": "Show the album names, ids and the number of tracks for each album.", "question_toks": ["Show", "the", "album", "names", ",", "ids", "and", "the", "number", "of", "tracks", "for", "each", "album", "."], "guid": 5290}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?", "sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"", "example": {"db_id": "tracking_orders", "query": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"", "query_toks": ["SELECT", "DISTINCT", "T1.customer_details", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "On", "Road", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_details", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"], "question": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?", "question_toks": ["What", "are", "the", "distinct", "customers", "who", "have", "orders", "with", "status", "``", "On", "Road", "''", "?", "Give", "me", "the", "customer", "details", "?"], "guid": 5291}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the most common first name among all actors.", "sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "first_name", "FROM", "actor", "GROUP", "BY", "first_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", "from", "actor", "group", "by", "first_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the most common first name among all actors.", "question_toks": ["Return", "the", "most", "common", "first", "name", "among", "all", "actors", "."], "guid": 5292}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show id, first name and last name for all customers and the number of accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "query_toks": ["SELECT", "T1.customer_id", ",", "T2.customer_first_name", ",", "T2.customer_last_name", ",", "count", "(", "*", ")", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id"], "query_toks_no_value": ["select", "t1", ".", "customer_id", ",", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", ",", "count", "(", "*", ")", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id"], "question": "Show id, first name and last name for all customers and the number of accounts.", "question_toks": ["Show", "id", ",", "first", "name", "and", "last", "name", "for", "all", "customers", "and", "the", "number", "of", "accounts", "."], "guid": 5293}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"", "example": {"db_id": "department_store", "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"", "query_toks": ["SELECT", "T1.staff_name", ",", "T1.staff_gender", "FROM", "staff", "AS", "T1", "JOIN", "Staff_Department_Assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.job_title_code", "=", "``", "Sales", "Person", "''", "EXCEPT", "SELECT", "T1.staff_name", ",", "T1.staff_gender", "FROM", "staff", "AS", "T1", "JOIN", "Staff_Department_Assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.job_title_code", "=", "``", "Clerical", "Staff", "''"], "query_toks_no_value": ["select", "t1", ".", "staff_name", ",", "t1", ".", "staff_gender", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "job_title_code", "=", "value", "except", "select", "t1", ".", "staff_name", ",", "t1", ".", "staff_gender", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "job_title_code", "=", "value"], "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.", "question_toks": ["Find", "the", "name", "and", "gender", "of", "the", "staff", "who", "has", "been", "assigned", "the", "job", "of", "Sales", "Person", "but", "never", "Clerical", "Staff", "."], "guid": 5294}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the names and buying prices of all the products?", "sql": "SELECT product_name ,  typical_buying_price FROM products", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_name ,  typical_buying_price FROM products", "query_toks": ["SELECT", "product_name", ",", "typical_buying_price", "FROM", "products"], "query_toks_no_value": ["select", "product_name", ",", "typical_buying_price", "from", "products"], "question": "What are the names and buying prices of all the products?", "question_toks": ["What", "are", "the", "names", "and", "buying", "prices", "of", "all", "the", "products", "?"], "guid": 5295}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | How many distinct companies are there?", "sql": "SELECT count(DISTINCT Company) FROM entrepreneur", "example": {"db_id": "entrepreneur", "query": "SELECT count(DISTINCT Company) FROM entrepreneur", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Company", ")", "FROM", "entrepreneur"], "query_toks_no_value": ["select", "count", "(", "distinct", "company", ")", "from", "entrepreneur"], "question": "How many distinct companies are there?", "question_toks": ["How", "many", "distinct", "companies", "are", "there", "?"], "guid": 5296}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the total amount of money in the invoices billed from Chicago, Illinois?", "sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "example": {"db_id": "store_1", "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "query_toks": ["SELECT", "sum", "(", "total", ")", "FROM", "invoices", "WHERE", "billing_city", "=", "``", "Chicago", "''", "AND", "billing_state", "=", "``", "IL", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "total", ")", "from", "invoices", "where", "billing_city", "=", "value", "and", "billing_state", "=", "value"], "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?", "question_toks": ["What", "are", "the", "total", "amount", "of", "money", "in", "the", "invoices", "billed", "from", "Chicago", ",", "Illinois", "?"], "guid": 5297}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | For each product, return its id and the number of times it was ordered.", "sql": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "example": {"db_id": "tracking_orders", "query": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T3.product_id", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "JOIN", "products", "AS", "T3", "ON", "T1.order_id", "=", "T2.order_id", "AND", "T2.product_id", "=", "T3.product_id", "GROUP", "BY", "T3.product_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t3", ".", "product_id", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "join", "products", "as", "t3", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "and", "t2", ".", "product_id", "=", "t3", ".", "product_id", "group", "by", "t3", ".", "product_id"], "question": "For each product, return its id and the number of times it was ordered.", "question_toks": ["For", "each", "product", ",", "return", "its", "id", "and", "the", "number", "of", "times", "it", "was", "ordered", "."], "guid": 5298}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the names of the tracks that are Rock or Jazz songs?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"", "example": {"db_id": "store_1", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\" OR T1.name = \"Jazz\"", "query_toks": ["SELECT", "T2.name", "FROM", "genres", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "WHERE", "T1.name", "=", "``", "Rock", "''", "OR", "T1.name", "=", "``", "Jazz", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "genres", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "where", "t1", ".", "name", "=", "value", "or", "t1", ".", "name", "=", "value"], "question": "What are the names of the tracks that are Rock or Jazz songs?", "question_toks": ["What", "are", "the", "names", "of", "the", "tracks", "that", "are", "Rock", "or", "Jazz", "songs", "?"], "guid": 5299}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List the first name and last name of customers have the amount of outstanding between 1000 and 3000.", "sql": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;", "example": {"db_id": "driving_school", "query": "SELECT first_name ,  last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000;", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "Customers", "WHERE", "amount_outstanding", "BETWEEN", "1000", "AND", "3000", ";"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "customers", "where", "amount_outstanding", "between", "value", "and", "value"], "question": "List the first name and last name of customers have the amount of outstanding between 1000 and 3000.", "question_toks": ["List", "the", "first", "name", "and", "last", "name", "of", "customers", "have", "the", "amount", "of", "outstanding", "between", "1000", "and", "3000", "."], "guid": 5300}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the number of accounts.", "sql": "SELECT count(*) FROM Accounts", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM Accounts", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Accounts"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "accounts"], "question": "Show the number of accounts.", "question_toks": ["Show", "the", "number", "of", "accounts", "."], "guid": 5301}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What are the companies and investors that correspond to each entrepreneur?", "sql": "SELECT Company ,  Investor FROM entrepreneur", "example": {"db_id": "entrepreneur", "query": "SELECT Company ,  Investor FROM entrepreneur", "query_toks": ["SELECT", "Company", ",", "Investor", "FROM", "entrepreneur"], "query_toks_no_value": ["select", "company", ",", "investor", "from", "entrepreneur"], "question": "What are the companies and investors that correspond to each entrepreneur?", "question_toks": ["What", "are", "the", "companies", "and", "investors", "that", "correspond", "to", "each", "entrepreneur", "?"], "guid": 5302}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What is the id of the account with the most transactions?", "sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_invoices", "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "account_id", "FROM", "Financial_transactions", "GROUP", "BY", "account_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "account_id", "from", "financial_transactions", "group", "by", "account_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id of the account with the most transactions?", "question_toks": ["What", "is", "the", "id", "of", "the", "account", "with", "the", "most", "transactions", "?"], "guid": 5303}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the names of all Rock tracks that are stored on MPEG audio files?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";", "example": {"db_id": "store_1", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";", "query_toks": ["SELECT", "T2.name", "FROM", "genres", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "JOIN", "media_types", "AS", "T3", "ON", "T3.id", "=", "T2.media_type_id", "WHERE", "T1.name", "=", "``", "Rock", "''", "AND", "T3.name", "=", "``", "MPEG", "audio", "file", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "genres", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "join", "media_types", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "media_type_id", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "What are the names of all Rock tracks that are stored on MPEG audio files?", "question_toks": ["What", "are", "the", "names", "of", "all", "Rock", "tracks", "that", "are", "stored", "on", "MPEG", "audio", "files", "?"], "guid": 5304}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the maximum and minimum product prices for each product type?", "sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code", "example": {"db_id": "department_store", "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code", "query_toks": ["SELECT", "product_type_code", ",", "max", "(", "product_price", ")", ",", "min", "(", "product_price", ")", "FROM", "products", "GROUP", "BY", "product_type_code"], "query_toks_no_value": ["select", "product_type_code", ",", "max", "(", "product_price", ")", ",", "min", "(", "product_price", ")", "from", "products", "group", "by", "product_type_code"], "question": "What are the maximum and minimum product prices for each product type?", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "product", "prices", "for", "each", "product", "type", "?"], "guid": 5305}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the maximum and minimum share count of different transaction types.", "sql": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code", "example": {"db_id": "tracking_share_transactions", "query": "SELECT transaction_type_code ,  max(share_count) ,  min(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code", "query_toks": ["SELECT", "transaction_type_code", ",", "max", "(", "share_count", ")", ",", "min", "(", "share_count", ")", "FROM", "TRANSACTIONS", "GROUP", "BY", "transaction_type_code"], "query_toks_no_value": ["select", "transaction_type_code", ",", "max", "(", "share_count", ")", ",", "min", "(", "share_count", ")", "from", "transactions", "group", "by", "transaction_type_code"], "question": "Show the maximum and minimum share count of different transaction types.", "question_toks": ["Show", "the", "maximum", "and", "minimum", "share", "count", "of", "different", "transaction", "types", "."], "guid": 5306}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show ids, customer ids, card type codes, card numbers for all cards.", "sql": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards", "example": {"db_id": "customers_card_transactions", "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards", "query_toks": ["SELECT", "card_id", ",", "customer_id", ",", "card_type_code", ",", "card_number", "FROM", "Customers_cards"], "query_toks_no_value": ["select", "card_id", ",", "customer_id", ",", "card_type_code", ",", "card_number", "from", "customers_cards"], "question": "Show ids, customer ids, card type codes, card numbers for all cards.", "question_toks": ["Show", "ids", ",", "customer", "ids", ",", "card", "type", "codes", ",", "card", "numbers", "for", "all", "cards", "."], "guid": 5307}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the the phone number of Nancy Edwards?", "sql": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "example": {"db_id": "store_1", "query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "query_toks": ["SELECT", "phone", "FROM", "employees", "WHERE", "first_name", "=", "``", "Nancy", "''", "AND", "last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "phone", "from", "employees", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the the phone number of Nancy Edwards?", "question_toks": ["What", "is", "the", "the", "phone", "number", "of", "Nancy", "Edwards", "?"], "guid": 5308}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show all product names and the number of customers having an order on each product.", "sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name", "query_toks": ["SELECT", "T2.product_name", ",", "count", "(", "*", ")", "FROM", "Order_items", "AS", "T1", "JOIN", "Products", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "JOIN", "Orders", "AS", "T3", "ON", "T3.order_id", "=", "T1.order_id", "GROUP", "BY", "T2.product_name"], "query_toks_no_value": ["select", "t2", ".", "product_name", ",", "count", "(", "*", ")", "from", "order_items", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "orders", "as", "t3", "on", "t3", ".", "order_id", "=", "t1", ".", "order_id", "group", "by", "t2", ".", "product_name"], "question": "Show all product names and the number of customers having an order on each product.", "question_toks": ["Show", "all", "product", "names", "and", "the", "number", "of", "customers", "having", "an", "order", "on", "each", "product", "."], "guid": 5309}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the ids of the investors who have at least two transactions.", "sql": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T2.investor_id", "FROM", "INVESTORS", "AS", "T1", "JOIN", "TRANSACTIONS", "AS", "T2", "ON", "T1.investor_id", "=", "T2.investor_id", "GROUP", "BY", "T2.investor_id", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "investor_id", "from", "investors", "as", "t1", "join", "transactions", "as", "t2", "on", "t1", ".", "investor_id", "=", "t2", ".", "investor_id", "group", "by", "t2", ".", "investor_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the ids of the investors who have at least two transactions.", "question_toks": ["Show", "the", "ids", "of", "the", "investors", "who", "have", "at", "least", "two", "transactions", "."], "guid": 5310}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the titles of films that include 'Deleted Scenes' in their special feature section.", "sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'", "example": {"db_id": "sakila_1", "query": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'", "query_toks": ["SELECT", "title", "FROM", "film", "WHERE", "special_features", "LIKE", "'", "%", "Deleted", "Scenes", "%", "'"], "query_toks_no_value": ["select", "title", "from", "film", "where", "special_features", "like", "value"], "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.", "question_toks": ["Return", "the", "titles", "of", "films", "that", "include", "'Deleted", "Scenes", "'", "in", "their", "special", "feature", "section", "."], "guid": 5311}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | Which customer status code has least number of customers?", "sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;", "example": {"db_id": "driving_school", "query": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;", "query_toks": ["SELECT", "customer_status_code", "FROM", "Customers", "GROUP", "BY", "customer_status_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "customer_status_code", "from", "customers", "group", "by", "customer_status_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Which customer status code has least number of customers?", "question_toks": ["Which", "customer", "status", "code", "has", "least", "number", "of", "customers", "?"], "guid": 5312}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the product type, name, and price for products supplied by supplier 3.", "sql": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3", "example": {"db_id": "department_store", "query": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3", "query_toks": ["SELECT", "T2.product_type_code", ",", "T2.product_name", ",", "T2.product_price", "FROM", "product_suppliers", "AS", "T1", "JOIN", "products", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "WHERE", "T1.supplier_id", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "product_type_code", ",", "t2", ".", "product_name", ",", "t2", ".", "product_price", "from", "product_suppliers", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t1", ".", "supplier_id", "=", "value"], "question": "Return the product type, name, and price for products supplied by supplier 3.", "question_toks": ["Return", "the", "product", "type", ",", "name", ",", "and", "price", "for", "products", "supplied", "by", "supplier", "3", "."], "guid": 5313}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | What are the average and minimum price (in Euro) of all products?", "sql": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents", "example": {"db_id": "product_catalog", "query": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents", "query_toks": ["SELECT", "avg", "(", "price_in_euros", ")", ",", "min", "(", "price_in_euros", ")", "FROM", "catalog_contents"], "query_toks_no_value": ["select", "avg", "(", "price_in_euros", ")", ",", "min", "(", "price_in_euros", ")", "from", "catalog_contents"], "question": "What are the average and minimum price (in Euro) of all products?", "question_toks": ["What", "are", "the", "average", "and", "minimum", "price", "(", "in", "Euro", ")", "of", "all", "products", "?"], "guid": 5314}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the zip code of the hosue of the employee named Janessa Sawayn?", "sql": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "query_toks": ["SELECT", "T1.zip_postcode", "FROM", "Addresses", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.address_id", "=", "T2.staff_address_id", "WHERE", "T2.first_name", "=", "``", "Janessa", "''", "AND", "T2.last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "zip_postcode", "from", "addresses", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "staff_address_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "What is the zip code of the hosue of the employee named Janessa Sawayn?", "question_toks": ["What", "is", "the", "zip", "code", "of", "the", "hosue", "of", "the", "employee", "named", "Janessa", "Sawayn", "?"], "guid": 5315}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many customers are from California?", "sql": "SELECT count(*) FROM customers WHERE state = \"CA\";", "example": {"db_id": "store_1", "query": "SELECT count(*) FROM customers WHERE state = \"CA\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "WHERE", "state", "=", "``", "CA", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "state", "=", "value"], "question": "How many customers are from California?", "question_toks": ["How", "many", "customers", "are", "from", "California", "?"], "guid": 5316}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | How many tracks belong to rock genre?", "sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "example": {"db_id": "chinook_1", "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "GENRE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.GenreId", "=", "T2.GenreId", "WHERE", "T1.Name", "=", "``", "Rock", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "genre", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "genreid", "=", "t2", ".", "genreid", "where", "t1", ".", "name", "=", "value"], "question": "How many tracks belong to rock genre?", "question_toks": ["How", "many", "tracks", "belong", "to", "rock", "genre", "?"], "guid": 5317}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the transaction type descriptions and dates if the share count is smaller than 10.", "sql": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T1.transaction_type_description ,  T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code WHERE T2.share_count  <  10", "query_toks": ["SELECT", "T1.transaction_type_description", ",", "T2.date_of_transaction", "FROM", "Ref_Transaction_Types", "AS", "T1", "JOIN", "TRANSACTIONS", "AS", "T2", "ON", "T1.transaction_type_code", "=", "T2.transaction_type_code", "WHERE", "T2.share_count", "<", "10"], "query_toks_no_value": ["select", "t1", ".", "transaction_type_description", ",", "t2", ".", "date_of_transaction", "from", "ref_transaction_types", "as", "t1", "join", "transactions", "as", "t2", "on", "t1", ".", "transaction_type_code", "=", "t2", ".", "transaction_type_code", "where", "t2", ".", "share_count", "<", "value"], "question": "Show the transaction type descriptions and dates if the share count is smaller than 10.", "question_toks": ["Show", "the", "transaction", "type", "descriptions", "and", "dates", "if", "the", "share", "count", "is", "smaller", "than", "10", "."], "guid": 5318}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How long does track Fast As a Shark has?", "sql": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";", "example": {"db_id": "store_1", "query": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";", "query_toks": ["SELECT", "milliseconds", "FROM", "tracks", "WHERE", "name", "=", "``", "Fast", "As", "a", "Shark", "''", ";"], "query_toks_no_value": ["select", "milliseconds", "from", "tracks", "where", "name", "=", "value"], "question": "How long does track Fast As a Shark has?", "question_toks": ["How", "long", "does", "track", "Fast", "As", "a", "Shark", "has", "?"], "guid": 5319}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show the number of transaction types.", "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "query_toks": ["SELECT", "count", "(", "DISTINCT", "transaction_type", ")", "FROM", "Financial_Transactions"], "query_toks_no_value": ["select", "count", "(", "distinct", "transaction_type", ")", "from", "financial_transactions"], "question": "Show the number of transaction types.", "question_toks": ["Show", "the", "number", "of", "transaction", "types", "."], "guid": 5320}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | How many branches where have more than average number of memberships are there?", "sql": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)", "example": {"db_id": "shop_membership", "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "branch", "WHERE", "membership_amount", ">", "(", "SELECT", "avg", "(", "membership_amount", ")", "FROM", "branch", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "branch", "where", "membership_amount", ">", "(", "select", "avg", "(", "membership_amount", ")", "from", "branch", ")"], "question": "How many branches where have more than average number of memberships are there?", "question_toks": ["How", "many", "branches", "where", "have", "more", "than", "average", "number", "of", "memberships", "are", "there", "?"], "guid": 5321}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | How many orders have detail \"Second time\"?", "sql": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customer_orders", "WHERE", "order_details", "=", "``", "Second", "time", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customer_orders", "where", "order_details", "=", "value"], "question": "How many orders have detail \"Second time\"?", "question_toks": ["How", "many", "orders", "have", "detail", "``", "Second", "time", "''", "?"], "guid": 5322}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show id, first and last names for all customers with at least two cards.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "example": {"db_id": "customers_card_transactions", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.customer_id", ",", "T2.customer_first_name", ",", "T2.customer_last_name", "FROM", "Customers_cards", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "customer_id", ",", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", "from", "customers_cards", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show id, first and last names for all customers with at least two cards.", "question_toks": ["Show", "id", ",", "first", "and", "last", "names", "for", "all", "customers", "with", "at", "least", "two", "cards", "."], "guid": 5323}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Which artist does the album \"Balls to the Wall\" belong to?", "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"", "example": {"db_id": "chinook_1", "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"", "query_toks": ["SELECT", "T2.Name", "FROM", "ALBUM", "AS", "T1", "JOIN", "ARTIST", "AS", "T2", "ON", "T1.ArtistId", "=", "T2.ArtistId", "WHERE", "T1.Title", "=", "``", "Balls", "to", "the", "Wall", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "album", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artistid", "=", "t2", ".", "artistid", "where", "t1", ".", "title", "=", "value"], "question": "Which artist does the album \"Balls to the Wall\" belong to?", "question_toks": ["Which", "artist", "does", "the", "album", "``", "Balls", "to", "the", "Wall", "''", "belong", "to", "?"], "guid": 5324}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Show the city and the number of branches opened before 2010 for each city.", "sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city", "example": {"db_id": "shop_membership", "query": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city", "query_toks": ["SELECT", "city", ",", "count", "(", "*", ")", "FROM", "branch", "WHERE", "open_year", "<", "2010", "GROUP", "BY", "city"], "query_toks_no_value": ["select", "city", ",", "count", "(", "*", ")", "from", "branch", "where", "open_year", "<", "value", "group", "by", "city"], "question": "Show the city and the number of branches opened before 2010 for each city.", "question_toks": ["Show", "the", "city", "and", "the", "number", "of", "branches", "opened", "before", "2010", "for", "each", "city", "."], "guid": 5325}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the names of catalog entries with level number 8.", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"", "example": {"db_id": "product_catalog", "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"", "query_toks": ["SELECT", "t1.catalog_entry_name", "FROM", "Catalog_Contents", "AS", "t1", "JOIN", "Catalog_Contents_Additional_Attributes", "AS", "t2", "ON", "t1.catalog_entry_id", "=", "t2.catalog_entry_id", "WHERE", "t2.catalog_level_number", "=", "``", "8", "''"], "query_toks_no_value": ["select", "t1", ".", "catalog_entry_name", "from", "catalog_contents", "as", "t1", "join", "catalog_contents_additional_attributes", "as", "t2", "on", "t1", ".", "catalog_entry_id", "=", "t2", ".", "catalog_entry_id", "where", "t2", ".", "catalog_level_number", "=", "value"], "question": "Find the names of catalog entries with level number 8.", "question_toks": ["Find", "the", "names", "of", "catalog", "entries", "with", "level", "number", "8", "."], "guid": 5326}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.", "sql": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'", "example": {"db_id": "sakila_1", "query": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'", "query_toks": ["SELECT", "payment_date", "FROM", "payment", "WHERE", "amount", ">", "10", "UNION", "SELECT", "T1.payment_date", "FROM", "payment", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.first_name", "=", "'Elsa", "'"], "query_toks_no_value": ["select", "payment_date", "from", "payment", "where", "amount", ">", "value", "union", "select", "t1", ".", "payment_date", "from", "payment", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "first_name", "=", "value"], "question": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.", "question_toks": ["Find", "all", "the", "payment", "dates", "for", "the", "payments", "with", "an", "amount", "larger", "than", "10", "and", "the", "payments", "handled", "by", "a", "staff", "person", "with", "the", "first", "name", "Elsa", "."], "guid": 5327}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | list the card number of all members whose hometown address includes word \"Kentucky\".", "sql": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"", "example": {"db_id": "shop_membership", "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"", "query_toks": ["SELECT", "card_number", "FROM", "member", "WHERE", "Hometown", "LIKE", "``", "%", "Kentucky", "%", "''"], "query_toks_no_value": ["select", "card_number", "from", "member", "where", "hometown", "like", "value"], "question": "list the card number of all members whose hometown address includes word \"Kentucky\".", "question_toks": ["list", "the", "card", "number", "of", "all", "members", "whose", "hometown", "address", "includes", "word", "``", "Kentucky", "''", "."], "guid": 5328}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the ids of the two department store chains with the largest number of department stores?", "sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2", "example": {"db_id": "department_store", "query": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2", "query_toks": ["SELECT", "dept_store_chain_id", "FROM", "department_stores", "GROUP", "BY", "dept_store_chain_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "2"], "query_toks_no_value": ["select", "dept_store_chain_id", "from", "department_stores", "group", "by", "dept_store_chain_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the ids of the two department store chains with the largest number of department stores?", "question_toks": ["What", "are", "the", "ids", "of", "the", "two", "department", "store", "chains", "with", "the", "largest", "number", "of", "department", "stores", "?"], "guid": 5329}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the ids and details of the investors who have at least two transactions with type code \"SALE\".", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.transaction_type_code  =  \"SALE\" GROUP BY T2.investor_id HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "T2.investor_id", ",", "T1.Investor_details", "FROM", "INVESTORS", "AS", "T1", "JOIN", "TRANSACTIONS", "AS", "T2", "ON", "T1.investor_id", "=", "T2.investor_id", "WHERE", "T2.transaction_type_code", "=", "``", "SALE", "''", "GROUP", "BY", "T2.investor_id", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "investor_id", ",", "t1", ".", "investor_details", "from", "investors", "as", "t1", "join", "transactions", "as", "t2", "on", "t1", ".", "investor_id", "=", "t2", ".", "investor_id", "where", "t2", ".", "transaction_type_code", "=", "value", "group", "by", "t2", ".", "investor_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".", "question_toks": ["Show", "the", "ids", "and", "details", "of", "the", "investors", "who", "have", "at", "least", "two", "transactions", "with", "type", "code", "``", "SALE", "''", "."], "guid": 5330}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".", "sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "query_toks": ["SELECT", "max", "(", "t2.active_to_date", ")", "FROM", "customers", "AS", "t1", "JOIN", "customer_contact_channels", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.customer_name", "=", "``", "Tillman", "Ernser", "''"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "active_to_date", ")", "from", "customers", "as", "t1", "join", "customer_contact_channels", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".", "question_toks": ["Return", "the", "the", "``", "active", "to", "date", "''", "of", "the", "latest", "contact", "channel", "used", "by", "the", "customer", "named", "``", "Tillman", "Ernser", "''", "."], "guid": 5331}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Give the state that has the most customers.", "sql": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT state FROM customers GROUP BY state ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "state", "FROM", "customers", "GROUP", "BY", "state", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "state", "from", "customers", "group", "by", "state", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Give the state that has the most customers.", "question_toks": ["Give", "the", "state", "that", "has", "the", "most", "customers", "."], "guid": 5332}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What is the average pages per minute color?", "sql": "SELECT avg(pages_per_minute_color) FROM product", "example": {"db_id": "store_product", "query": "SELECT avg(pages_per_minute_color) FROM product", "query_toks": ["SELECT", "avg", "(", "pages_per_minute_color", ")", "FROM", "product"], "query_toks_no_value": ["select", "avg", "(", "pages_per_minute_color", ")", "from", "product"], "question": "What is the average pages per minute color?", "question_toks": ["What", "is", "the", "average", "pages", "per", "minute", "color", "?"], "guid": 5333}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What is the total population for all the districts that have an area larger tahn the average city area?", "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)", "example": {"db_id": "store_product", "query": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)", "query_toks": ["SELECT", "sum", "(", "city_population", ")", "FROM", "district", "WHERE", "city_area", ">", "(", "SELECT", "avg", "(", "city_area", ")", "FROM", "district", ")"], "query_toks_no_value": ["select", "sum", "(", "city_population", ")", "from", "district", "where", "city_area", ">", "(", "select", "avg", "(", "city_area", ")", "from", "district", ")"], "question": "What is the total population for all the districts that have an area larger tahn the average city area?", "question_toks": ["What", "is", "the", "total", "population", "for", "all", "the", "districts", "that", "have", "an", "area", "larger", "tahn", "the", "average", "city", "area", "?"], "guid": 5334}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What is the name of the entrepreneur with the greatest weight?", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "example": {"db_id": "entrepreneur", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "query_toks": ["SELECT", "T2.Name", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Weight", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "weight", "desc", "limit", "value"], "question": "What is the name of the entrepreneur with the greatest weight?", "question_toks": ["What", "is", "the", "name", "of", "the", "entrepreneur", "with", "the", "greatest", "weight", "?"], "guid": 5335}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What is the most common maximum page size?", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "store_product", "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "max_page_size", "FROM", "product", "GROUP", "BY", "max_page_size", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "max_page_size", "from", "product", "group", "by", "max_page_size", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common maximum page size?", "question_toks": ["What", "is", "the", "most", "common", "maximum", "page", "size", "?"], "guid": 5336}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the total amount of products purchased before 2018-03-17 07:13:53?", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"", "query_toks": ["SELECT", "sum", "(", "t2.order_quantity", ")", "FROM", "customer_orders", "AS", "t1", "JOIN", "order_items", "AS", "t2", "ON", "t1.order_id", "=", "t2.order_id", "WHERE", "t1.order_date", "<", "``", "2018-03-17", "07:13:53", "''"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "order_quantity", ")", "from", "customer_orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t1", ".", "order_date", "<", "value"], "question": "What is the total amount of products purchased before 2018-03-17 07:13:53?", "question_toks": ["What", "is", "the", "total", "amount", "of", "products", "purchased", "before", "2018-03-17", "07:13:53", "?"], "guid": 5337}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | What is the level name of the cheapest catalog (in USD)?", "sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "example": {"db_id": "product_catalog", "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "query_toks": ["SELECT", "t2.catalog_level_name", "FROM", "catalog_contents", "AS", "t1", "JOIN", "catalog_structure", "AS", "t2", "ON", "t1.catalog_level_number", "=", "t2.catalog_level_number", "ORDER", "BY", "t1.price_in_dollars", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "catalog_level_name", "from", "catalog_contents", "as", "t1", "join", "catalog_structure", "as", "t2", "on", "t1", ".", "catalog_level_number", "=", "t2", ".", "catalog_level_number", "order", "by", "t1", ".", "price_in_dollars", "limit", "value"], "question": "What is the level name of the cheapest catalog (in USD)?", "question_toks": ["What", "is", "the", "level", "name", "of", "the", "cheapest", "catalog", "(", "in", "USD", ")", "?"], "guid": 5338}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What are the names and ids of the different categories, and how many films are in each?", "sql": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id", "example": {"db_id": "sakila_1", "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id", "query_toks": ["SELECT", "T2.name", ",", "T1.category_id", ",", "count", "(", "*", ")", "FROM", "film_category", "AS", "T1", "JOIN", "category", "AS", "T2", "ON", "T1.category_id", "=", "T2.category_id", "GROUP", "BY", "T1.category_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "category_id", ",", "count", "(", "*", ")", "from", "film_category", "as", "t1", "join", "category", "as", "t2", "on", "t1", ".", "category_id", "=", "t2", ".", "category_id", "group", "by", "t1", ".", "category_id"], "question": "What are the names and ids of the different categories, and how many films are in each?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "the", "different", "categories", ",", "and", "how", "many", "films", "are", "in", "each", "?"], "guid": 5339}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Which company was started by the entrepreneur with the greatest height?", "sql": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "example": {"db_id": "entrepreneur", "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1", "query_toks": ["SELECT", "T1.Company", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "company", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "height", "desc", "limit", "value"], "question": "Which company was started by the entrepreneur with the greatest height?", "question_toks": ["Which", "company", "was", "started", "by", "the", "entrepreneur", "with", "the", "greatest", "height", "?"], "guid": 5340}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Return the color code and description for the product with the name 'chervil'.", "sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"", "query_toks": ["SELECT", "t1.color_code", ",", "t2.color_description", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "WHERE", "t1.product_name", "=", "``", "chervil", "''"], "query_toks_no_value": ["select", "t1", ".", "color_code", ",", "t2", ".", "color_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "where", "t1", ".", "product_name", "=", "value"], "question": "Return the color code and description for the product with the name 'chervil'.", "question_toks": ["Return", "the", "color", "code", "and", "description", "for", "the", "product", "with", "the", "name", "'chervil", "'", "."], "guid": 5341}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Show the membership level with most number of members.", "sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "shop_membership", "query": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "LEVEL", "FROM", "member", "GROUP", "BY", "LEVEL", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "level", "from", "member", "group", "by", "level", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the membership level with most number of members.", "question_toks": ["Show", "the", "membership", "level", "with", "most", "number", "of", "members", "."], "guid": 5342}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Retrieve the list of all cities.", "sql": "SELECT DISTINCT city FROM addresses", "example": {"db_id": "customers_and_addresses", "query": "SELECT DISTINCT city FROM addresses", "query_toks": ["SELECT", "DISTINCT", "city", "FROM", "addresses"], "query_toks_no_value": ["select", "distinct", "city", "from", "addresses"], "question": "Retrieve the list of all cities.", "question_toks": ["Retrieve", "the", "list", "of", "all", "cities", "."], "guid": 5343}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Give me a list of id and status of orders which belong to the customer named \"Jeramie\".", "sql": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "example": {"db_id": "tracking_orders", "query": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "query_toks": ["SELECT", "T2.order_id", ",", "T2.order_status", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.customer_name", "=", "``", "Jeramie", "''"], "query_toks_no_value": ["select", "t2", ".", "order_id", ",", "t2", ".", "order_status", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".", "question_toks": ["Give", "me", "a", "list", "of", "id", "and", "status", "of", "orders", "which", "belong", "to", "the", "customer", "named", "``", "Jeramie", "''", "."], "guid": 5344}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Find the number of characteristics that the product \"flax\" has.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "flax", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value"], "question": "Find the number of characteristics that the product \"flax\" has.", "question_toks": ["Find", "the", "number", "of", "characteristics", "that", "the", "product", "``", "flax", "''", "has", "."], "guid": 5345}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What are the names of the customers who have made two or less orders?", "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2", "example": {"db_id": "tracking_orders", "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2", "query_toks": ["SELECT", "T2.customer_name", "FROM", "orders", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T2.customer_id", "HAVING", "count", "(", "*", ")", "<", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "customer_name", "from", "orders", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_id", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "What are the names of the customers who have made two or less orders?", "question_toks": ["What", "are", "the", "names", "of", "the", "customers", "who", "have", "made", "two", "or", "less", "orders", "?"], "guid": 5346}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show all card type codes and the number of customers holding cards in each type.", "sql": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code", "example": {"db_id": "customers_card_transactions", "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code", "query_toks": ["SELECT", "card_type_code", ",", "count", "(", "DISTINCT", "customer_id", ")", "FROM", "Customers_cards", "GROUP", "BY", "card_type_code"], "query_toks_no_value": ["select", "card_type_code", ",", "count", "(", "distinct", "customer_id", ")", "from", "customers_cards", "group", "by", "card_type_code"], "question": "Show all card type codes and the number of customers holding cards in each type.", "question_toks": ["Show", "all", "card", "type", "codes", "and", "the", "number", "of", "customers", "holding", "cards", "in", "each", "type", "."], "guid": 5347}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find all the order items whose product id is 11. What are the order item ids?", "sql": "SELECT order_item_id FROM order_items WHERE product_id = 11", "example": {"db_id": "tracking_orders", "query": "SELECT order_item_id FROM order_items WHERE product_id = 11", "query_toks": ["SELECT", "order_item_id", "FROM", "order_items", "WHERE", "product_id", "=", "11"], "query_toks_no_value": ["select", "order_item_id", "from", "order_items", "where", "product_id", "=", "value"], "question": "Find all the order items whose product id is 11. What are the order item ids?", "question_toks": ["Find", "all", "the", "order", "items", "whose", "product", "id", "is", "11", ".", "What", "are", "the", "order", "item", "ids", "?"], "guid": 5348}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the number of invoices from Chicago, IL.", "sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "example": {"db_id": "store_1", "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "invoices", "WHERE", "billing_city", "=", "``", "Chicago", "''", "AND", "billing_state", "=", "``", "IL", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "invoices", "where", "billing_city", "=", "value", "and", "billing_state", "=", "value"], "question": "List the number of invoices from Chicago, IL.", "question_toks": ["List", "the", "number", "of", "invoices", "from", "Chicago", ",", "IL", "."], "guid": 5349}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | How many cards does customer Art Turcotte have?", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers_cards", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.customer_first_name", "=", "``", "Art", "''", "AND", "T2.customer_last_name", "=", "``", "Turcotte", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers_cards", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_first_name", "=", "value", "and", "t2", ".", "customer_last_name", "=", "value"], "question": "How many cards does customer Art Turcotte have?", "question_toks": ["How", "many", "cards", "does", "customer", "Art", "Turcotte", "have", "?"], "guid": 5350}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | What are the details of the lots which are not used in any transactions?", "sql": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id", "example": {"db_id": "tracking_share_transactions", "query": "SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id  =  T2.lot_id", "query_toks": ["SELECT", "lot_details", "FROM", "Lots", "EXCEPT", "SELECT", "T1.lot_details", "FROM", "Lots", "AS", "T1", "JOIN", "transactions_lots", "AS", "T2", "ON", "T1.lot_id", "=", "T2.lot_id"], "query_toks_no_value": ["select", "lot_details", "from", "lots", "except", "select", "t1", ".", "lot_details", "from", "lots", "as", "t1", "join", "transactions_lots", "as", "t2", "on", "t1", ".", "lot_id", "=", "t2", ".", "lot_id"], "question": "What are the details of the lots which are not used in any transactions?", "question_toks": ["What", "are", "the", "details", "of", "the", "lots", "which", "are", "not", "used", "in", "any", "transactions", "?"], "guid": 5351}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.", "sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')", "example": {"db_id": "department_store", "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')", "query_toks": ["SELECT", "staff_id", "FROM", "Staff_Department_Assignments", "WHERE", "date_assigned_to", "<", "(", "SELECT", "max", "(", "date_assigned_to", ")", "FROM", "Staff_Department_Assignments", "WHERE", "job_title_code", "=", "'Clerical", "Staff", "'", ")"], "query_toks_no_value": ["select", "staff_id", "from", "staff_department_assignments", "where", "date_assigned_to", "<", "(", "select", "max", "(", "date_assigned_to", ")", "from", "staff_department_assignments", "where", "job_title_code", "=", "value", ")"], "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.", "question_toks": ["Return", "the", "id", "of", "the", "staff", "whose", "Staff", "Department", "Assignment", "was", "earlier", "than", "that", "of", "any", "Clerical", "Staff", "."], "guid": 5352}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Return the name of the characteristic that is most common across all products.", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t3.characteristic_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "GROUP", "BY", "t3.characteristic_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "characteristic_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "group", "by", "t3", ".", "characteristic_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the name of the characteristic that is most common across all products.", "question_toks": ["Return", "the", "name", "of", "the", "characteristic", "that", "is", "most", "common", "across", "all", "products", "."], "guid": 5353}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the different product names for products that have the 'warm' characteristic:?", "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"", "query_toks": ["SELECT", "DISTINCT", "t1.product_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t3.characteristic_name", "=", "``", "warm", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t3", ".", "characteristic_name", "=", "value"], "question": "What are the different product names for products that have the 'warm' characteristic:?", "question_toks": ["What", "are", "the", "different", "product", "names", "for", "products", "that", "have", "the", "'warm", "'", "characteristic", ":", "?"], "guid": 5354}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.", "sql": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'", "query_toks": ["SELECT", "order_shipping_charges", ",", "customer_id", "FROM", "customer_orders", "WHERE", "order_status_code", "=", "'Cancelled", "'", "OR", "order_status_code", "=", "'Paid", "'"], "query_toks_no_value": ["select", "order_shipping_charges", ",", "customer_id", "from", "customer_orders", "where", "order_status_code", "=", "value", "or", "order_status_code", "=", "value"], "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.", "question_toks": ["Show", "the", "shipping", "charge", "and", "customer", "id", "for", "customer", "orders", "with", "order", "status", "Cancelled", "or", "Paid", "."], "guid": 5355}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are teh names of the different products, as well as the number of customers who have ordered each product.", "sql": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.product_name ,  count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id JOIN Orders AS T3 ON T3.order_id  =  T1.order_id GROUP BY T2.product_name", "query_toks": ["SELECT", "T2.product_name", ",", "count", "(", "*", ")", "FROM", "Order_items", "AS", "T1", "JOIN", "Products", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "JOIN", "Orders", "AS", "T3", "ON", "T3.order_id", "=", "T1.order_id", "GROUP", "BY", "T2.product_name"], "query_toks_no_value": ["select", "t2", ".", "product_name", ",", "count", "(", "*", ")", "from", "order_items", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "orders", "as", "t3", "on", "t3", ".", "order_id", "=", "t1", ".", "order_id", "group", "by", "t2", ".", "product_name"], "question": "What are teh names of the different products, as well as the number of customers who have ordered each product.", "question_toks": ["What", "are", "teh", "names", "of", "the", "different", "products", ",", "as", "well", "as", "the", "number", "of", "customers", "who", "have", "ordered", "each", "product", "."], "guid": 5356}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Return the last name of the staff member who handled the complaint with the earliest date raised.", "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1", "query_toks": ["SELECT", "t1.last_name", "FROM", "staff", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.staff_id", "=", "t2.staff_id", "ORDER", "BY", "t2.date_complaint_raised", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "staff", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "order", "by", "t2", ".", "date_complaint_raised", "limit", "value"], "question": "Return the last name of the staff member who handled the complaint with the earliest date raised.", "question_toks": ["Return", "the", "last", "name", "of", "the", "staff", "member", "who", "handled", "the", "complaint", "with", "the", "earliest", "date", "raised", "."], "guid": 5357}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the distinct names and phone numbers for suppliers who have red jeans?", "sql": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"", "example": {"db_id": "department_store", "query": "SELECT DISTINCT T1.supplier_name ,  T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN products AS T3 ON T2.product_id  =  T3.product_id WHERE T3.product_name  =  \"red jeans\"", "query_toks": ["SELECT", "DISTINCT", "T1.supplier_name", ",", "T1.supplier_phone", "FROM", "suppliers", "AS", "T1", "JOIN", "product_suppliers", "AS", "T2", "ON", "T1.supplier_id", "=", "T2.supplier_id", "JOIN", "products", "AS", "T3", "ON", "T2.product_id", "=", "T3.product_id", "WHERE", "T3.product_name", "=", "``", "red", "jeans", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "supplier_name", ",", "t1", ".", "supplier_phone", "from", "suppliers", "as", "t1", "join", "product_suppliers", "as", "t2", "on", "t1", ".", "supplier_id", "=", "t2", ".", "supplier_id", "join", "products", "as", "t3", "on", "t2", ".", "product_id", "=", "t3", ".", "product_id", "where", "t3", ".", "product_name", "=", "value"], "question": "What are the distinct names and phone numbers for suppliers who have red jeans?", "question_toks": ["What", "are", "the", "distinct", "names", "and", "phone", "numbers", "for", "suppliers", "who", "have", "red", "jeans", "?"], "guid": 5358}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What is the average money requested by all entrepreneurs?", "sql": "SELECT avg(Money_Requested) FROM entrepreneur", "example": {"db_id": "entrepreneur", "query": "SELECT avg(Money_Requested) FROM entrepreneur", "query_toks": ["SELECT", "avg", "(", "Money_Requested", ")", "FROM", "entrepreneur"], "query_toks_no_value": ["select", "avg", "(", "money_requested", ")", "from", "entrepreneur"], "question": "What is the average money requested by all entrepreneurs?", "question_toks": ["What", "is", "the", "average", "money", "requested", "by", "all", "entrepreneurs", "?"], "guid": 5359}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | What are the name and publication date of the catalogs with catalog level number above 5?", "sql": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5", "example": {"db_id": "product_catalog", "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5", "query_toks": ["SELECT", "t1.catalog_name", ",", "t1.date_of_publication", "FROM", "catalogs", "AS", "t1", "JOIN", "catalog_structure", "AS", "t2", "ON", "t1.catalog_id", "=", "t2.catalog_id", "WHERE", "catalog_level_number", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "catalog_name", ",", "t1", ".", "date_of_publication", "from", "catalogs", "as", "t1", "join", "catalog_structure", "as", "t2", "on", "t1", ".", "catalog_id", "=", "t2", ".", "catalog_id", "where", "catalog_level_number", ">", "value"], "question": "What are the name and publication date of the catalogs with catalog level number above 5?", "question_toks": ["What", "are", "the", "name", "and", "publication", "date", "of", "the", "catalogs", "with", "catalog", "level", "number", "above", "5", "?"], "guid": 5360}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What is the number of branches that have more than the average number of memberships?", "sql": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)", "example": {"db_id": "shop_membership", "query": "SELECT count(*) FROM branch WHERE membership_amount  >  (SELECT avg(membership_amount) FROM branch)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "branch", "WHERE", "membership_amount", ">", "(", "SELECT", "avg", "(", "membership_amount", ")", "FROM", "branch", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "branch", "where", "membership_amount", ">", "(", "select", "avg", "(", "membership_amount", ")", "from", "branch", ")"], "question": "What is the number of branches that have more than the average number of memberships?", "question_toks": ["What", "is", "the", "number", "of", "branches", "that", "have", "more", "than", "the", "average", "number", "of", "memberships", "?"], "guid": 5361}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the names of products with category \"Spices\"?", "sql": "SELECT product_name FROM products WHERE product_category_code  =  \"Spices\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_name FROM products WHERE product_category_code  =  \"Spices\"", "query_toks": ["SELECT", "product_name", "FROM", "products", "WHERE", "product_category_code", "=", "``", "Spices", "''"], "query_toks_no_value": ["select", "product_name", "from", "products", "where", "product_category_code", "=", "value"], "question": "What are the names of products with category \"Spices\"?", "question_toks": ["What", "are", "the", "names", "of", "products", "with", "category", "``", "Spices", "''", "?"], "guid": 5362}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the durations of the longest and the shortest tracks in milliseconds?", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK", "example": {"db_id": "chinook_1", "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK", "query_toks": ["SELECT", "max", "(", "Milliseconds", ")", ",", "min", "(", "Milliseconds", ")", "FROM", "TRACK"], "query_toks_no_value": ["select", "max", "(", "milliseconds", ")", ",", "min", "(", "milliseconds", ")", "from", "track"], "question": "What are the durations of the longest and the shortest tracks in milliseconds?", "question_toks": ["What", "are", "the", "durations", "of", "the", "longest", "and", "the", "shortest", "tracks", "in", "milliseconds", "?"], "guid": 5363}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Please list the name and id of all artists that have at least 3 albums in alphabetical order.", "sql": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "example": {"db_id": "chinook_1", "query": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name", "query_toks": ["SELECT", "T2.Name", ",", "T1.ArtistId", "FROM", "ALBUM", "AS", "T1", "JOIN", "ARTIST", "AS", "T2", "ON", "T1.ArtistId", "=", "T2.ArtistID", "GROUP", "BY", "T1.ArtistId", "HAVING", "COUNT", "(", "*", ")", ">", "=", "3", "ORDER", "BY", "T2.Name"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "artistid", "from", "album", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artistid", "=", "t2", ".", "artistid", "group", "by", "t1", ".", "artistid", "having", "count", "(", "*", ")", ">", "=", "value", "order", "by", "t2", ".", "name"], "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.", "question_toks": ["Please", "list", "the", "name", "and", "id", "of", "all", "artists", "that", "have", "at", "least", "3", "albums", "in", "alphabetical", "order", "."], "guid": 5364}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What is the order id and order details for the order more than two invoices.", "sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2", "query_toks": ["SELECT", "T2.order_id", ",", "T2.order_details", "FROM", "Invoices", "AS", "T1", "JOIN", "Orders", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "GROUP", "BY", "T2.order_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t2", ".", "order_id", ",", "t2", ".", "order_details", "from", "invoices", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "group", "by", "t2", ".", "order_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What is the order id and order details for the order more than two invoices.", "question_toks": ["What", "is", "the", "order", "id", "and", "order", "details", "for", "the", "order", "more", "than", "two", "invoices", "."], "guid": 5365}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | Show each state and the number of addresses in each state.", "sql": "SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT state_province_county ,  count(*) FROM addresses GROUP BY state_province_county", "query_toks": ["SELECT", "state_province_county", ",", "count", "(", "*", ")", "FROM", "addresses", "GROUP", "BY", "state_province_county"], "query_toks_no_value": ["select", "state_province_county", ",", "count", "(", "*", ")", "from", "addresses", "group", "by", "state_province_county"], "question": "Show each state and the number of addresses in each state.", "question_toks": ["Show", "each", "state", "and", "the", "number", "of", "addresses", "in", "each", "state", "."], "guid": 5366}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Find the names of products that were bought by at least two distinct customers.", "sql": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2", "example": {"db_id": "department_store", "query": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2", "query_toks": ["SELECT", "DISTINCT", "T3.product_name", "FROM", "customer_orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "JOIN", "products", "AS", "T3", "ON", "T2.product_id", "=", "T3.product_id", "GROUP", "BY", "T3.product_id", "HAVING", "COUNT", "(", "DISTINCT", "T1.customer_id", ")", ">", "=", "2"], "query_toks_no_value": ["select", "distinct", "t3", ".", "product_name", "from", "customer_orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "join", "products", "as", "t3", "on", "t2", ".", "product_id", "=", "t3", ".", "product_id", "group", "by", "t3", ".", "product_id", "having", "count", "(", "distinct", "t1", ".", "customer_id", ")", ">", "=", "value"], "question": "Find the names of products that were bought by at least two distinct customers.", "question_toks": ["Find", "the", "names", "of", "products", "that", "were", "bought", "by", "at", "least", "two", "distinct", "customers", "."], "guid": 5367}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | List the companies and the investors of entrepreneurs.", "sql": "SELECT Company ,  Investor FROM entrepreneur", "example": {"db_id": "entrepreneur", "query": "SELECT Company ,  Investor FROM entrepreneur", "query_toks": ["SELECT", "Company", ",", "Investor", "FROM", "entrepreneur"], "query_toks_no_value": ["select", "company", ",", "investor", "from", "entrepreneur"], "question": "List the companies and the investors of entrepreneurs.", "question_toks": ["List", "the", "companies", "and", "the", "investors", "of", "entrepreneurs", "."], "guid": 5368}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the total time for all lessons taught by Janessa Sawayn?", "sql": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT sum(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "query_toks": ["SELECT", "sum", "(", "lesson_time", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.first_name", "=", "``", "Janessa", "''", "AND", "T2.last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "lesson_time", ")", "from", "lessons", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "What is the total time for all lessons taught by Janessa Sawayn?", "question_toks": ["What", "is", "the", "total", "time", "for", "all", "lessons", "taught", "by", "Janessa", "Sawayn", "?"], "guid": 5369}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | Show all distinct cities in the address record.", "sql": "SELECT DISTINCT city FROM addresses", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT DISTINCT city FROM addresses", "query_toks": ["SELECT", "DISTINCT", "city", "FROM", "addresses"], "query_toks_no_value": ["select", "distinct", "city", "from", "addresses"], "question": "Show all distinct cities in the address record.", "question_toks": ["Show", "all", "distinct", "cities", "in", "the", "address", "record", "."], "guid": 5370}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.", "sql": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'", "example": {"db_id": "shop_membership", "query": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'", "query_toks": ["SELECT", "min", "(", "membership_amount", ")", ",", "max", "(", "membership_amount", ")", "FROM", "branch", "WHERE", "open_year", "=", "2011", "OR", "city", "=", "'London", "'"], "query_toks_no_value": ["select", "min", "(", "membership_amount", ")", ",", "max", "(", "membership_amount", ")", "from", "branch", "where", "open_year", "=", "value", "or", "city", "=", "value"], "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.", "question_toks": ["Show", "minimum", "and", "maximum", "amount", "of", "memberships", "for", "all", "branches", "opened", "in", "2011", "or", "located", "at", "city", "London", "."], "guid": 5371}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What are the city name, id, and number of addresses corresponding to the city with the most addressed?", "sql": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.city", ",", "count", "(", "*", ")", ",", "T1.city_id", "FROM", "address", "AS", "T1", "JOIN", "city", "AS", "T2", "ON", "T1.city_id", "=", "T2.city_id", "GROUP", "BY", "T1.city_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "city", ",", "count", "(", "*", ")", ",", "t1", ".", "city_id", "from", "address", "as", "t1", "join", "city", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "city_id", "group", "by", "t1", ".", "city_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?", "question_toks": ["What", "are", "the", "city", "name", ",", "id", ",", "and", "number", "of", "addresses", "corresponding", "to", "the", "city", "with", "the", "most", "addressed", "?"], "guid": 5372}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find all types of store and number of them.", "sql": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE", "example": {"db_id": "store_product", "query": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE", "query_toks": ["SELECT", "TYPE", ",", "count", "(", "*", ")", "FROM", "store", "GROUP", "BY", "TYPE"], "query_toks_no_value": ["select", "type", ",", "count", "(", "*", ")", "from", "store", "group", "by", "type"], "question": "Find all types of store and number of them.", "question_toks": ["Find", "all", "types", "of", "store", "and", "number", "of", "them", "."], "guid": 5373}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the full names of customers who do not have any accounts?", "sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "query_toks": ["SELECT", "customer_first_name", ",", "customer_last_name", "FROM", "Customers", "EXCEPT", "SELECT", "T1.customer_first_name", ",", "T1.customer_last_name", "FROM", "Customers", "AS", "T1", "JOIN", "Accounts", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id"], "query_toks_no_value": ["select", "customer_first_name", ",", "customer_last_name", "from", "customers", "except", "select", "t1", ".", "customer_first_name", ",", "t1", ".", "customer_last_name", "from", "customers", "as", "t1", "join", "accounts", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "What are the full names of customers who do not have any accounts?", "question_toks": ["What", "are", "the", "full", "names", "of", "customers", "who", "do", "not", "have", "any", "accounts", "?"], "guid": 5374}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the number of customers for each gender.", "sql": "SELECT gender ,  count(*) FROM Customers GROUP BY gender", "example": {"db_id": "customers_and_invoices", "query": "SELECT gender ,  count(*) FROM Customers GROUP BY gender", "query_toks": ["SELECT", "gender", ",", "count", "(", "*", ")", "FROM", "Customers", "GROUP", "BY", "gender"], "query_toks_no_value": ["select", "gender", ",", "count", "(", "*", ")", "from", "customers", "group", "by", "gender"], "question": "Show the number of customers for each gender.", "question_toks": ["Show", "the", "number", "of", "customers", "for", "each", "gender", "."], "guid": 5375}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What are the email addresses and date of births for all customers who have a first name of Carole?", "sql": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"", "example": {"db_id": "driving_school", "query": "SELECT email_address ,  date_of_birth FROM Customers WHERE first_name = \"Carole\"", "query_toks": ["SELECT", "email_address", ",", "date_of_birth", "FROM", "Customers", "WHERE", "first_name", "=", "``", "Carole", "''"], "query_toks_no_value": ["select", "email_address", ",", "date_of_birth", "from", "customers", "where", "first_name", "=", "value"], "question": "What are the email addresses and date of births for all customers who have a first name of Carole?", "question_toks": ["What", "are", "the", "email", "addresses", "and", "date", "of", "births", "for", "all", "customers", "who", "have", "a", "first", "name", "of", "Carole", "?"], "guid": 5376}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Count the number of cards the customer with the first name Art and last name Turcotte has.", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers_cards", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.customer_first_name", "=", "``", "Art", "''", "AND", "T2.customer_last_name", "=", "``", "Turcotte", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers_cards", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_first_name", "=", "value", "and", "t2", ".", "customer_last_name", "=", "value"], "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.", "question_toks": ["Count", "the", "number", "of", "cards", "the", "customer", "with", "the", "first", "name", "Art", "and", "last", "name", "Turcotte", "has", "."], "guid": 5377}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What is the address for the customer with id 10?", "sql": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10", "example": {"db_id": "department_store", "query": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10", "query_toks": ["SELECT", "T1.address_details", "FROM", "addresses", "AS", "T1", "JOIN", "customer_addresses", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T2.customer_id", "=", "10"], "query_toks_no_value": ["select", "t1", ".", "address_details", "from", "addresses", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "customer_id", "=", "value"], "question": "What is the address for the customer with id 10?", "question_toks": ["What", "is", "the", "address", "for", "the", "customer", "with", "id", "10", "?"], "guid": 5378}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the name of albums that are released by aritist whose name has 'Led'", "sql": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'", "example": {"db_id": "store_1", "query": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'", "query_toks": ["SELECT", "T2.title", "FROM", "artists", "AS", "T1", "JOIN", "albums", "AS", "T2", "ON", "T1.id", "=", "T2.artist_id", "WHERE", "T1.name", "LIKE", "'", "%", "Led", "%", "'"], "query_toks_no_value": ["select", "t2", ".", "title", "from", "artists", "as", "t1", "join", "albums", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "artist_id", "where", "t1", ".", "name", "like", "value"], "question": "List the name of albums that are released by aritist whose name has 'Led'", "question_toks": ["List", "the", "name", "of", "albums", "that", "are", "released", "by", "aritist", "whose", "name", "has", "'Led", "'"], "guid": 5379}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".", "sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"", "query_toks": ["SELECT", "product_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "JOIN", "ref_colors", "AS", "t4", "ON", "t1.color_code", "=", "t4.color_code", "WHERE", "t4.color_description", "=", "``", "red", "''", "AND", "t3.characteristic_name", "=", "``", "fast", "''"], "query_toks_no_value": ["select", "product_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "join", "ref_colors", "as", "t4", "on", "t1", ".", "color_code", "=", "t4", ".", "color_code", "where", "t4", ".", "color_description", "=", "value", "and", "t3", ".", "characteristic_name", "=", "value"], "question": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".", "question_toks": ["Find", "the", "name", "of", "the", "products", "that", "have", "the", "color", "description", "``", "red", "''", "and", "have", "the", "characteristic", "name", "``", "fast", "''", "."], "guid": 5380}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Count the number of colors.", "sql": "SELECT count(*) FROM ref_colors", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM ref_colors", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ref_colors"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_colors"], "question": "Count the number of colors.", "question_toks": ["Count", "the", "number", "of", "colors", "."], "guid": 5381}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.", "sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000", "example": {"db_id": "department_store", "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000", "query_toks": ["SELECT", "supplier_id", "FROM", "Product_Suppliers", "GROUP", "BY", "supplier_id", "HAVING", "avg", "(", "total_amount_purchased", ")", ">", "50000", "OR", "avg", "(", "total_amount_purchased", ")", "<", "30000"], "query_toks_no_value": ["select", "supplier_id", "from", "product_suppliers", "group", "by", "supplier_id", "having", "avg", "(", "total_amount_purchased", ")", ">", "value", "or", "avg", "(", "total_amount_purchased", ")", "<", "value"], "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.", "question_toks": ["Find", "the", "id", "of", "suppliers", "whose", "average", "amount", "purchased", "for", "each", "product", "is", "above", "50000", "or", "below", "30000", "."], "guid": 5382}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the name of the language that the film 'AIRPORT POLLOCK' is in?", "sql": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'", "example": {"db_id": "sakila_1", "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'", "query_toks": ["SELECT", "T2.name", "FROM", "film", "AS", "T1", "JOIN", "LANGUAGE", "AS", "T2", "ON", "T1.language_id", "=", "T2.language_id", "WHERE", "T1.title", "=", "'AIRPORT", "POLLOCK", "'"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "film", "as", "t1", "join", "language", "as", "t2", "on", "t1", ".", "language_id", "=", "t2", ".", "language_id", "where", "t1", ".", "title", "=", "value"], "question": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?", "question_toks": ["What", "is", "the", "name", "of", "the", "language", "that", "the", "film", "'AIRPORT", "POLLOCK", "'", "is", "in", "?"], "guid": 5383}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the duration of the longest and shortest pop tracks in milliseconds?", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"", "example": {"db_id": "chinook_1", "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"", "query_toks": ["SELECT", "max", "(", "Milliseconds", ")", ",", "min", "(", "Milliseconds", ")", "FROM", "GENRE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.GenreId", "=", "T2.GenreId", "WHERE", "T1.Name", "=", "``", "Pop", "''"], "query_toks_no_value": ["select", "max", "(", "milliseconds", ")", ",", "min", "(", "milliseconds", ")", "from", "genre", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "genreid", "=", "t2", ".", "genreid", "where", "t1", ".", "name", "=", "value"], "question": "What are the duration of the longest and shortest pop tracks in milliseconds?", "question_toks": ["What", "are", "the", "duration", "of", "the", "longest", "and", "shortest", "pop", "tracks", "in", "milliseconds", "?"], "guid": 5384}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What are the investors that have invested in at least two entrepreneurs?", "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2", "example": {"db_id": "entrepreneur", "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Investor", "FROM", "entrepreneur", "GROUP", "BY", "Investor", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "investor", "from", "entrepreneur", "group", "by", "investor", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the investors that have invested in at least two entrepreneurs?", "question_toks": ["What", "are", "the", "investors", "that", "have", "invested", "in", "at", "least", "two", "entrepreneurs", "?"], "guid": 5385}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the name of all customers.", "sql": "SELECT customer_name FROM customers", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers", "query_toks": ["SELECT", "customer_name", "FROM", "customers"], "query_toks_no_value": ["select", "customer_name", "from", "customers"], "question": "Find the name of all customers.", "question_toks": ["Find", "the", "name", "of", "all", "customers", "."], "guid": 5386}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Which customer's name contains \"Alex\"? Find the full name.", "sql": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers WHERE customer_name LIKE \"%Alex%\"", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "WHERE", "customer_name", "LIKE", "``", "%", "Alex", "%", "''"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "where", "customer_name", "like", "value"], "question": "Which customer's name contains \"Alex\"? Find the full name.", "question_toks": ["Which", "customer", "'s", "name", "contains", "``", "Alex", "''", "?", "Find", "the", "full", "name", "."], "guid": 5387}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the name, phone number and email address of the customer who made the largest number of orders?", "sql": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.customer_name", ",", "T1.customer_phone", ",", "T1.customer_email", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T2.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", ",", "t1", ".", "customer_phone", ",", "t1", ".", "customer_email", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the name, phone number and email address of the customer who made the largest number of orders?", "question_toks": ["What", "are", "the", "name", ",", "phone", "number", "and", "email", "address", "of", "the", "customer", "who", "made", "the", "largest", "number", "of", "orders", "?"], "guid": 5388}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | List the ids of all distinct orders ordered by placed date.", "sql": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed", "example": {"db_id": "tracking_orders", "query": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed", "query_toks": ["SELECT", "DISTINCT", "order_id", "FROM", "orders", "ORDER", "BY", "date_order_placed"], "query_toks_no_value": ["select", "distinct", "order_id", "from", "orders", "order", "by", "date_order_placed"], "question": "List the ids of all distinct orders ordered by placed date.", "question_toks": ["List", "the", "ids", "of", "all", "distinct", "orders", "ordered", "by", "placed", "date", "."], "guid": 5389}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?", "sql": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000", "example": {"db_id": "store_product", "query": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000", "query_toks": ["SELECT", "district_name", "FROM", "district", "WHERE", "city_area", ">", "10", "OR", "City_Population", ">", "100000"], "query_toks_no_value": ["select", "district_name", "from", "district", "where", "city_area", ">", "value", "or", "city_population", ">", "value"], "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?", "question_toks": ["What", "are", "the", "names", "of", "all", "districts", "with", "a", "city", "area", "greater", "than", "10", "or", "have", "more", "than", "100000", "people", "living", "there", "?"], "guid": 5390}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | Eduardo Martins is a customer at which company?", "sql": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";", "example": {"db_id": "store_1", "query": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\";", "query_toks": ["SELECT", "company", "FROM", "customers", "WHERE", "first_name", "=", "``", "Eduardo", "''", "AND", "last_name", "=", "``", "Martins", "''", ";"], "query_toks_no_value": ["select", "company", "from", "customers", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "Eduardo Martins is a customer at which company?", "question_toks": ["Eduardo", "Martins", "is", "a", "customer", "at", "which", "company", "?"], "guid": 5391}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find all the customer information in state NY.", "sql": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"", "example": {"db_id": "chinook_1", "query": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"", "query_toks": ["SELECT", "*", "FROM", "CUSTOMER", "WHERE", "State", "=", "``", "NY", "''"], "query_toks_no_value": ["select", "*", "from", "customer", "where", "state", "=", "value"], "question": "Find all the customer information in state NY.", "question_toks": ["Find", "all", "the", "customer", "information", "in", "state", "NY", "."], "guid": 5392}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Return complaint status codes have more than 3 corresponding complaints?", "sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3", "example": {"db_id": "customer_complaints", "query": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3", "query_toks": ["SELECT", "complaint_status_code", "FROM", "complaints", "GROUP", "BY", "complaint_status_code", "HAVING", "count", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "complaint_status_code", "from", "complaints", "group", "by", "complaint_status_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Return complaint status codes have more than 3 corresponding complaints?", "question_toks": ["Return", "complaint", "status", "codes", "have", "more", "than", "3", "corresponding", "complaints", "?"], "guid": 5393}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What are the details of the car with id 1?", "sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;", "example": {"db_id": "driving_school", "query": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;", "query_toks": ["SELECT", "vehicle_details", "FROM", "Vehicles", "WHERE", "vehicle_id", "=", "1", ";"], "query_toks_no_value": ["select", "vehicle_details", "from", "vehicles", "where", "vehicle_id", "=", "value"], "question": "What are the details of the car with id 1?", "question_toks": ["What", "are", "the", "details", "of", "the", "car", "with", "id", "1", "?"], "guid": 5394}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many staff have the first name Ludie?", "sql": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Staff", "WHERE", "first_name", "=", "``", "Ludie", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "staff", "where", "first_name", "=", "value"], "question": "How many staff have the first name Ludie?", "question_toks": ["How", "many", "staff", "have", "the", "first", "name", "Ludie", "?"], "guid": 5395}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?", "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)", "example": {"db_id": "department_store", "query": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)", "query_toks": ["SELECT", "T1.product_id", "FROM", "product_suppliers", "AS", "T1", "JOIN", "products", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "WHERE", "T1.supplier_id", "=", "2", "AND", "T2.product_price", ">", "(", "SELECT", "avg", "(", "product_price", ")", "FROM", "products", ")"], "query_toks_no_value": ["select", "t1", ".", "product_id", "from", "product_suppliers", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t1", ".", "supplier_id", "=", "value", "and", "t2", ".", "product_price", ">", "(", "select", "avg", "(", "product_price", ")", "from", "products", ")"], "question": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?", "question_toks": ["What", "are", "the", "ids", "of", "products", "from", "the", "supplier", "with", "id", "2", ",", "which", "are", "more", "expensive", "than", "the", "average", "price", "across", "all", "products", "?"], "guid": 5396}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Give the product id for the product that was ordered most frequently.", "sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "product_id", "FROM", "order_items", "GROUP", "BY", "product_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_id", "from", "order_items", "group", "by", "product_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give the product id for the product that was ordered most frequently.", "question_toks": ["Give", "the", "product", "id", "for", "the", "product", "that", "was", "ordered", "most", "frequently", "."], "guid": 5397}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?", "sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"", "example": {"db_id": "driving_school", "query": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"", "query_toks": ["SELECT", "customer_status_code", ",", "cell_mobile_phone_number", ",", "email_address", "FROM", "Customers", "WHERE", "first_name", "=", "``", "Marina", "''", "OR", "last_name", "=", "``", "Kohler", "''"], "query_toks_no_value": ["select", "customer_status_code", ",", "cell_mobile_phone_number", ",", "email_address", "from", "customers", "where", "first_name", "=", "value", "or", "last_name", "=", "value"], "question": "What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?", "question_toks": ["What", "is", "the", "status", "code", ",", "mobile", "phone", "number", "and", "email", "address", "of", "customer", "with", "last", "name", "as", "Kohler", "or", "first", "name", "as", "Marina", "?"], "guid": 5398}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | Show the name of the customer who has the most orders.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the name of the customer who has the most orders.", "question_toks": ["Show", "the", "name", "of", "the", "customer", "who", "has", "the", "most", "orders", "."], "guid": 5399}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List top 10 employee work longest in the company. List employee's first and last name.", "sql": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "example": {"db_id": "store_1", "query": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10;", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "employees", "ORDER", "BY", "hire_date", "ASC", "LIMIT", "10", ";"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "employees", "order", "by", "hire_date", "asc", "limit", "value"], "question": "List top 10 employee work longest in the company. List employee's first and last name.", "question_toks": ["List", "top", "10", "employee", "work", "longest", "in", "the", "company", ".", "List", "employee", "'s", "first", "and", "last", "name", "."], "guid": 5400}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?", "sql": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20", "example": {"db_id": "products_for_hire", "query": "SELECT product_name ,  product_description FROM products_for_hire WHERE product_type_code  =  'Cutlery' AND daily_hire_cost  <  20", "query_toks": ["SELECT", "product_name", ",", "product_description", "FROM", "products_for_hire", "WHERE", "product_type_code", "=", "'Cutlery", "'", "AND", "daily_hire_cost", "<", "20"], "query_toks_no_value": ["select", "product_name", ",", "product_description", "from", "products_for_hire", "where", "product_type_code", "=", "value", "and", "daily_hire_cost", "<", "value"], "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?", "question_toks": ["What", "are", "the", "names", "and", "descriptions", "of", "the", "products", "that", "are", "of", "'Cutlery", "'", "type", "and", "have", "daily", "hire", "cost", "lower", "than", "20", "?"], "guid": 5401}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the full names of customers who have accounts?", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "example": {"db_id": "customers_card_transactions", "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "query_toks": ["SELECT", "DISTINCT", "T1.customer_first_name", ",", "T1.customer_last_name", "FROM", "Customers", "AS", "T1", "JOIN", "Accounts", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_first_name", ",", "t1", ".", "customer_last_name", "from", "customers", "as", "t1", "join", "accounts", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "What are the full names of customers who have accounts?", "question_toks": ["What", "are", "the", "full", "names", "of", "customers", "who", "have", "accounts", "?"], "guid": 5402}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many vehicle in total?", "sql": "SELECT count(*) FROM Vehicles;", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Vehicles;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Vehicles", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "vehicles"], "question": "How many vehicle in total?", "question_toks": ["How", "many", "vehicle", "in", "total", "?"], "guid": 5403}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Of complaints with the type code \"Product Failure\", how many had each different status code?", "sql": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code", "example": {"db_id": "customer_complaints", "query": "SELECT complaint_status_code ,  count(*) FROM complaints WHERE complaint_type_code  =  \"Product Failure\" GROUP BY complaint_status_code", "query_toks": ["SELECT", "complaint_status_code", ",", "count", "(", "*", ")", "FROM", "complaints", "WHERE", "complaint_type_code", "=", "``", "Product", "Failure", "''", "GROUP", "BY", "complaint_status_code"], "query_toks_no_value": ["select", "complaint_status_code", ",", "count", "(", "*", ")", "from", "complaints", "where", "complaint_type_code", "=", "value", "group", "by", "complaint_status_code"], "question": "Of complaints with the type code \"Product Failure\", how many had each different status code?", "question_toks": ["Of", "complaints", "with", "the", "type", "code", "``", "Product", "Failure", "''", ",", "how", "many", "had", "each", "different", "status", "code", "?"], "guid": 5404}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What are the first and last names for all customers?", "sql": "SELECT first_name ,  last_name FROM Customers;", "example": {"db_id": "driving_school", "query": "SELECT first_name ,  last_name FROM Customers;", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "Customers", ";"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "customers"], "question": "What are the first and last names for all customers?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "for", "all", "customers", "?"], "guid": 5405}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | How many products are in the 'Spices' category and have a typical price of over 1000?", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "WHERE", "product_category_code", "=", "``", "Spices", "''", "AND", "typical_buying_price", ">", "1000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "where", "product_category_code", "=", "value", "and", "typical_buying_price", ">", "value"], "question": "How many products are in the 'Spices' category and have a typical price of over 1000?", "question_toks": ["How", "many", "products", "are", "in", "the", "'Spices", "'", "category", "and", "have", "a", "typical", "price", "of", "over", "1000", "?"], "guid": 5406}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | How many kinds of different ratings are listed?", "sql": "SELECT count(DISTINCT rating) FROM film", "example": {"db_id": "sakila_1", "query": "SELECT count(DISTINCT rating) FROM film", "query_toks": ["SELECT", "count", "(", "DISTINCT", "rating", ")", "FROM", "film"], "query_toks_no_value": ["select", "count", "(", "distinct", "rating", ")", "from", "film"], "question": "How many kinds of different ratings are listed?", "question_toks": ["How", "many", "kinds", "of", "different", "ratings", "are", "listed", "?"], "guid": 5407}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the number of different cities that employees live in.", "sql": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE", "example": {"db_id": "chinook_1", "query": "SELECT COUNT(DISTINCT city) FROM EMPLOYEE", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "city", ")", "FROM", "EMPLOYEE"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "employee"], "question": "Find the number of different cities that employees live in.", "question_toks": ["Find", "the", "number", "of", "different", "cities", "that", "employees", "live", "in", "."], "guid": 5408}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the ids and names of accounts with 4 or more transactions?", "sql": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4", "example": {"db_id": "customers_and_invoices", "query": "SELECT T1.account_id ,  T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id HAVING count(*)  >=  4", "query_toks": ["SELECT", "T1.account_id", ",", "T2.account_name", "FROM", "Financial_transactions", "AS", "T1", "JOIN", "Accounts", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "GROUP", "BY", "T1.account_id", "HAVING", "count", "(", "*", ")", ">", "=", "4"], "query_toks_no_value": ["select", "t1", ".", "account_id", ",", "t2", ".", "account_name", "from", "financial_transactions", "as", "t1", "join", "accounts", "as", "t2", "on", "t1", ".", "account_id", "=", "t2", ".", "account_id", "group", "by", "t1", ".", "account_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the ids and names of accounts with 4 or more transactions?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "accounts", "with", "4", "or", "more", "transactions", "?"], "guid": 5409}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.", "sql": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3", "example": {"db_id": "sakila_1", "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3", "query_toks": ["SELECT", "title", ",", "film_id", "FROM", "film", "WHERE", "rental_rate", "=", "0.99", "INTERSECT", "SELECT", "T1.title", ",", "T1.film_id", "FROM", "film", "AS", "T1", "JOIN", "inventory", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id", "HAVING", "count", "(", "*", ")", "<", "3"], "query_toks_no_value": ["select", "title", ",", "film_id", "from", "film", "where", "rental_rate", "=", "value", "intersect", "select", "t1", ".", "title", ",", "t1", ".", "film_id", "from", "film", "as", "t1", "join", "inventory", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id", "having", "count", "(", "*", ")", "<", "value"], "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.", "question_toks": ["Which", "film", "is", "rented", "at", "a", "fee", "of", "0.99", "and", "has", "less", "than", "3", "in", "the", "inventory", "?", "List", "the", "film", "title", "and", "id", "."], "guid": 5410}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | How many addresses are in the district of California?", "sql": "SELECT count(*) FROM address WHERE district  =  'California'", "example": {"db_id": "sakila_1", "query": "SELECT count(*) FROM address WHERE district  =  'California'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "address", "WHERE", "district", "=", "'California", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "address", "where", "district", "=", "value"], "question": "How many addresses are in the district of California?", "question_toks": ["How", "many", "addresses", "are", "in", "the", "district", "of", "California", "?"], "guid": 5411}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the different card type codes, and how many different customers hold each type?", "sql": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code", "example": {"db_id": "customers_card_transactions", "query": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code", "query_toks": ["SELECT", "card_type_code", ",", "count", "(", "DISTINCT", "customer_id", ")", "FROM", "Customers_cards", "GROUP", "BY", "card_type_code"], "query_toks_no_value": ["select", "card_type_code", ",", "count", "(", "distinct", "customer_id", ")", "from", "customers_cards", "group", "by", "card_type_code"], "question": "What are the different card type codes, and how many different customers hold each type?", "question_toks": ["What", "are", "the", "different", "card", "type", "codes", ",", "and", "how", "many", "different", "customers", "hold", "each", "type", "?"], "guid": 5412}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | Show the outcome code of mailshots along with the number of mailshots in each outcome code.", "sql": "SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT outcome_code ,  count(*) FROM mailshot_customers GROUP BY outcome_code", "query_toks": ["SELECT", "outcome_code", ",", "count", "(", "*", ")", "FROM", "mailshot_customers", "GROUP", "BY", "outcome_code"], "query_toks_no_value": ["select", "outcome_code", ",", "count", "(", "*", ")", "from", "mailshot_customers", "group", "by", "outcome_code"], "question": "Show the outcome code of mailshots along with the number of mailshots in each outcome code.", "question_toks": ["Show", "the", "outcome", "code", "of", "mailshots", "along", "with", "the", "number", "of", "mailshots", "in", "each", "outcome", "code", "."], "guid": 5413}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What are the ids of all vehicles?", "sql": "SELECT vehicle_id FROM Vehicles;", "example": {"db_id": "driving_school", "query": "SELECT vehicle_id FROM Vehicles;", "query_toks": ["SELECT", "vehicle_id", "FROM", "Vehicles", ";"], "query_toks_no_value": ["select", "vehicle_id", "from", "vehicles"], "question": "What are the ids of all vehicles?", "question_toks": ["What", "are", "the", "ids", "of", "all", "vehicles", "?"], "guid": 5414}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show details of all investors if they make any transaction with share count greater than 100.", "sql": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T1.Investor_details FROM  INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id WHERE T2.share_count  >  100", "query_toks": ["SELECT", "T1.Investor_details", "FROM", "INVESTORS", "AS", "T1", "JOIN", "TRANSACTIONS", "AS", "T2", "ON", "T1.investor_id", "=", "T2.investor_id", "WHERE", "T2.share_count", ">", "100"], "query_toks_no_value": ["select", "t1", ".", "investor_details", "from", "investors", "as", "t1", "join", "transactions", "as", "t2", "on", "t1", ".", "investor_id", "=", "t2", ".", "investor_id", "where", "t2", ".", "share_count", ">", "value"], "question": "Show details of all investors if they make any transaction with share count greater than 100.", "question_toks": ["Show", "details", "of", "all", "investors", "if", "they", "make", "any", "transaction", "with", "share", "count", "greater", "than", "100", "."], "guid": 5415}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the name of all playlist.", "sql": "SELECT name FROM playlists;", "example": {"db_id": "store_1", "query": "SELECT name FROM playlists;", "query_toks": ["SELECT", "name", "FROM", "playlists", ";"], "query_toks_no_value": ["select", "name", "from", "playlists"], "question": "List the name of all playlist.", "question_toks": ["List", "the", "name", "of", "all", "playlist", "."], "guid": 5416}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List total amount of  invoice from Chicago, IL.", "sql": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "example": {"db_id": "store_1", "query": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "query_toks": ["SELECT", "sum", "(", "total", ")", "FROM", "invoices", "WHERE", "billing_city", "=", "``", "Chicago", "''", "AND", "billing_state", "=", "``", "IL", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "total", ")", "from", "invoices", "where", "billing_city", "=", "value", "and", "billing_state", "=", "value"], "question": "List total amount of  invoice from Chicago, IL.", "question_toks": ["List", "total", "amount", "of", "invoice", "from", "Chicago", ",", "IL", "."], "guid": 5417}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What is the total number of residents for the districts with the 3 largest areas?", "sql": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3", "example": {"db_id": "store_product", "query": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3", "query_toks": ["SELECT", "sum", "(", "city_population", ")", "FROM", "district", "ORDER", "BY", "city_area", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "sum", "(", "city_population", ")", "from", "district", "order", "by", "city_area", "desc", "limit", "value"], "question": "What is the total number of residents for the districts with the 3 largest areas?", "question_toks": ["What", "is", "the", "total", "number", "of", "residents", "for", "the", "districts", "with", "the", "3", "largest", "areas", "?"], "guid": 5418}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.", "sql": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\" GROUP BY investor_id", "example": {"db_id": "tracking_share_transactions", "query": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\" GROUP BY investor_id", "query_toks": ["SELECT", "investor_id", ",", "COUNT", "(", "*", ")", "FROM", "TRANSACTIONS", "WHERE", "transaction_type_code", "=", "``", "SALE", "''", "GROUP", "BY", "investor_id"], "query_toks_no_value": ["select", "investor_id", ",", "count", "(", "*", ")", "from", "transactions", "where", "transaction_type_code", "=", "value", "group", "by", "investor_id"], "question": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.", "question_toks": ["Show", "the", "number", "of", "transactions", "with", "transaction", "type", "code", "``", "SALE", "''", "for", "different", "investors", "if", "it", "is", "larger", "than", "0", "."], "guid": 5419}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the top 5 countries by number of invoices and how many do they have?", "sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "example": {"db_id": "store_1", "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "query_toks": ["SELECT", "billing_country", ",", "COUNT", "(", "*", ")", "FROM", "invoices", "GROUP", "BY", "billing_country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "5", ";"], "query_toks_no_value": ["select", "billing_country", ",", "count", "(", "*", ")", "from", "invoices", "group", "by", "billing_country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the top 5 countries by number of invoices and how many do they have?", "question_toks": ["What", "are", "the", "top", "5", "countries", "by", "number", "of", "invoices", "and", "how", "many", "do", "they", "have", "?"], "guid": 5420}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show distinct first and last names for all customers with an account.", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "example": {"db_id": "customers_card_transactions", "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "query_toks": ["SELECT", "DISTINCT", "T1.customer_first_name", ",", "T1.customer_last_name", "FROM", "Customers", "AS", "T1", "JOIN", "Accounts", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_first_name", ",", "t1", ".", "customer_last_name", "from", "customers", "as", "t1", "join", "accounts", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "Show distinct first and last names for all customers with an account.", "question_toks": ["Show", "distinct", "first", "and", "last", "names", "for", "all", "customers", "with", "an", "account", "."], "guid": 5421}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Find the product category description of the product category with code \"Spices\".", "sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"", "query_toks": ["SELECT", "product_category_description", "FROM", "ref_product_categories", "WHERE", "product_category_code", "=", "``", "Spices", "''"], "query_toks_no_value": ["select", "product_category_description", "from", "ref_product_categories", "where", "product_category_code", "=", "value"], "question": "Find the product category description of the product category with code \"Spices\".", "question_toks": ["Find", "the", "product", "category", "description", "of", "the", "product", "category", "with", "code", "``", "Spices", "''", "."], "guid": 5422}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the names of all the products whose stock number starts with \"2\".", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"", "query_toks": ["SELECT", "catalog_entry_name", "FROM", "catalog_contents", "WHERE", "product_stock_number", "LIKE", "``", "2", "%", "''"], "query_toks_no_value": ["select", "catalog_entry_name", "from", "catalog_contents", "where", "product_stock_number", "like", "value"], "question": "Find the names of all the products whose stock number starts with \"2\".", "question_toks": ["Find", "the", "names", "of", "all", "the", "products", "whose", "stock", "number", "starts", "with", "``", "2", "''", "."], "guid": 5423}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | Find the payment method that is used most frequently.", "sql": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customer_deliveries", "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "payment_method", "FROM", "Customers", "GROUP", "BY", "payment_method", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method", "from", "customers", "group", "by", "payment_method", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the payment method that is used most frequently.", "question_toks": ["Find", "the", "payment", "method", "that", "is", "used", "most", "frequently", "."], "guid": 5424}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the names of the members that have never registered at any branch?", "sql": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)", "example": {"db_id": "shop_membership", "query": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)", "query_toks": ["SELECT", "name", "FROM", "member", "WHERE", "member_id", "NOT", "IN", "(", "SELECT", "member_id", "FROM", "membership_register_branch", ")"], "query_toks_no_value": ["select", "name", "from", "member", "where", "member_id", "not", "in", "(", "select", "member_id", "from", "membership_register_branch", ")"], "question": "What are the names of the members that have never registered at any branch?", "question_toks": ["What", "are", "the", "names", "of", "the", "members", "that", "have", "never", "registered", "at", "any", "branch", "?"], "guid": 5425}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List the states which have between 2 to 4 staffs living there.", "sql": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;", "example": {"db_id": "driving_school", "query": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING count(*) BETWEEN 2 AND 4;", "query_toks": ["SELECT", "T1.state_province_county", "FROM", "Addresses", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.address_id", "=", "T2.staff_address_id", "GROUP", "BY", "T1.state_province_county", "HAVING", "count", "(", "*", ")", "BETWEEN", "2", "AND", "4", ";"], "query_toks_no_value": ["select", "t1", ".", "state_province_county", "from", "addresses", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "staff_address_id", "group", "by", "t1", ".", "state_province_county", "having", "count", "(", "*", ")", "between", "value", "and", "value"], "question": "List the states which have between 2 to 4 staffs living there.", "question_toks": ["List", "the", "states", "which", "have", "between", "2", "to", "4", "staffs", "living", "there", "."], "guid": 5426}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the average share count of transactions each each investor, ordered by average share count.", "sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)", "example": {"db_id": "tracking_share_transactions", "query": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY avg(share_count)", "query_toks": ["SELECT", "investor_id", ",", "avg", "(", "share_count", ")", "FROM", "TRANSACTIONS", "GROUP", "BY", "investor_id", "ORDER", "BY", "avg", "(", "share_count", ")"], "query_toks_no_value": ["select", "investor_id", ",", "avg", "(", "share_count", ")", "from", "transactions", "group", "by", "investor_id", "order", "by", "avg", "(", "share_count", ")"], "question": "Show the average share count of transactions each each investor, ordered by average share count.", "question_toks": ["Show", "the", "average", "share", "count", "of", "transactions", "each", "each", "investor", ",", "ordered", "by", "average", "share", "count", "."], "guid": 5427}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What are the last names of staff with email addressed containing the substring \"wrau\"?", "sql": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"", "example": {"db_id": "customer_complaints", "query": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"", "query_toks": ["SELECT", "last_name", "FROM", "staff", "WHERE", "email_address", "LIKE", "``", "%", "wrau", "%", "''"], "query_toks_no_value": ["select", "last_name", "from", "staff", "where", "email_address", "like", "value"], "question": "What are the last names of staff with email addressed containing the substring \"wrau\"?", "question_toks": ["What", "are", "the", "last", "names", "of", "staff", "with", "email", "addressed", "containing", "the", "substring", "``", "wrau", "''", "?"], "guid": 5428}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the number of invoices from the US, grouped by state.", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;", "example": {"db_id": "store_1", "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state;", "query_toks": ["SELECT", "billing_state", ",", "COUNT", "(", "*", ")", "FROM", "invoices", "WHERE", "billing_country", "=", "``", "USA", "''", "GROUP", "BY", "billing_state", ";"], "query_toks_no_value": ["select", "billing_state", ",", "count", "(", "*", ")", "from", "invoices", "where", "billing_country", "=", "value", "group", "by", "billing_state"], "question": "List the number of invoices from the US, grouped by state.", "question_toks": ["List", "the", "number", "of", "invoices", "from", "the", "US", ",", "grouped", "by", "state", "."], "guid": 5429}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Find the id and name of the staff who has been assigned for the shortest period.", "sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1", "query_toks": ["SELECT", "T1.staff_id", ",", "T1.staff_name", "FROM", "staff", "AS", "T1", "JOIN", "Staff_Department_Assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "ORDER", "BY", "date_assigned_to", "-", "date_assigned_from", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "staff_id", ",", "t1", ".", "staff_name", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "order", "by", "date_assigned_to", "-", "date_assigned_from", "limit", "value"], "question": "Find the id and name of the staff who has been assigned for the shortest period.", "question_toks": ["Find", "the", "id", "and", "name", "of", "the", "staff", "who", "has", "been", "assigned", "for", "the", "shortest", "period", "."], "guid": 5430}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List title of albums have the number of tracks greater than 10.", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "example": {"db_id": "store_1", "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10;", "query_toks": ["SELECT", "T1.title", "FROM", "albums", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.album_id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "T1.id", ")", ">", "10", ";"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "albums", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "album_id", "group", "by", "t1", ".", "id", "having", "count", "(", "t1", ".", "id", ")", ">", "value"], "question": "List title of albums have the number of tracks greater than 10.", "question_toks": ["List", "title", "of", "albums", "have", "the", "number", "of", "tracks", "greater", "than", "10", "."], "guid": 5431}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Find the emails of customers who has filed a complaints of the product with the most complaints.", "sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "t1.email_address", "FROM", "customers", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "email_address", "from", "customers", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.", "question_toks": ["Find", "the", "emails", "of", "customers", "who", "has", "filed", "a", "complaints", "of", "the", "product", "with", "the", "most", "complaints", "."], "guid": 5432}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the ids of all products that were ordered more than three times or supplied more than 80000.", "sql": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000", "example": {"db_id": "department_store", "query": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000", "query_toks": ["SELECT", "product_id", "FROM", "Order_Items", "GROUP", "BY", "product_id", "HAVING", "count", "(", "*", ")", ">", "3", "UNION", "SELECT", "product_id", "FROM", "Product_Suppliers", "GROUP", "BY", "product_id", "HAVING", "sum", "(", "total_amount_purchased", ")", ">", "80000"], "query_toks_no_value": ["select", "product_id", "from", "order_items", "group", "by", "product_id", "having", "count", "(", "*", ")", ">", "value", "union", "select", "product_id", "from", "product_suppliers", "group", "by", "product_id", "having", "sum", "(", "total_amount_purchased", ")", ">", "value"], "question": "Return the ids of all products that were ordered more than three times or supplied more than 80000.", "question_toks": ["Return", "the", "ids", "of", "all", "products", "that", "were", "ordered", "more", "than", "three", "times", "or", "supplied", "more", "than", "80000", "."], "guid": 5433}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many lesson does customer with first name Ray took?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.first_name", "=", "``", "Ray", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "lessons", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "first_name", "=", "value"], "question": "How many lesson does customer with first name Ray took?", "question_toks": ["How", "many", "lesson", "does", "customer", "with", "first", "name", "Ray", "took", "?"], "guid": 5434}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | What is the entry name of the most expensive catalog (in USD)?", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "query_toks": ["SELECT", "catalog_entry_name", "FROM", "catalog_contents", "ORDER", "BY", "price_in_dollars", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "catalog_entry_name", "from", "catalog_contents", "order", "by", "price_in_dollars", "desc", "limit", "value"], "question": "What is the entry name of the most expensive catalog (in USD)?", "question_toks": ["What", "is", "the", "entry", "name", "of", "the", "most", "expensive", "catalog", "(", "in", "USD", ")", "?"], "guid": 5435}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What is the average number of pages per minute color?", "sql": "SELECT avg(pages_per_minute_color) FROM product", "example": {"db_id": "store_product", "query": "SELECT avg(pages_per_minute_color) FROM product", "query_toks": ["SELECT", "avg", "(", "pages_per_minute_color", ")", "FROM", "product"], "query_toks_no_value": ["select", "avg", "(", "pages_per_minute_color", ")", "from", "product"], "question": "What is the average number of pages per minute color?", "question_toks": ["What", "is", "the", "average", "number", "of", "pages", "per", "minute", "color", "?"], "guid": 5436}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the titles of all the albums alphabetically ascending?", "sql": "SELECT title FROM albums ORDER BY title;", "example": {"db_id": "store_1", "query": "SELECT title FROM albums ORDER BY title;", "query_toks": ["SELECT", "title", "FROM", "albums", "ORDER", "BY", "title", ";"], "query_toks_no_value": ["select", "title", "from", "albums", "order", "by", "title"], "question": "What are the titles of all the albums alphabetically ascending?", "question_toks": ["What", "are", "the", "titles", "of", "all", "the", "albums", "alphabetically", "ascending", "?"], "guid": 5437}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What are the daily hire costs for the products with substring 'Book' in its name?", "sql": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'", "example": {"db_id": "products_for_hire", "query": "SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%'", "query_toks": ["SELECT", "daily_hire_cost", "FROM", "Products_for_hire", "WHERE", "product_name", "LIKE", "'", "%", "Book", "%", "'"], "query_toks_no_value": ["select", "daily_hire_cost", "from", "products_for_hire", "where", "product_name", "like", "value"], "question": "What are the daily hire costs for the products with substring 'Book' in its name?", "question_toks": ["What", "are", "the", "daily", "hire", "costs", "for", "the", "products", "with", "substring", "'Book", "'", "in", "its", "name", "?"], "guid": 5438}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What is the first name and last name employee helps the customer with first name Leonie?", "sql": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"", "example": {"db_id": "chinook_1", "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"", "query_toks": ["SELECT", "T2.FirstName", ",", "T2.LastName", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "EMPLOYEE", "AS", "T2", "ON", "T1.SupportRepId", "=", "T2.EmployeeId", "WHERE", "T1.FirstName", "=", "``", "Leonie", "''"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "customer", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "supportrepid", "=", "t2", ".", "employeeid", "where", "t1", ".", "firstname", "=", "value"], "question": "What is the first name and last name employee helps the customer with first name Leonie?", "question_toks": ["What", "is", "the", "first", "name", "and", "last", "name", "employee", "helps", "the", "customer", "with", "first", "name", "Leonie", "?"], "guid": 5439}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the entry names of the catalog with the attribute that have the most entries.", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "product_catalog", "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "t1.catalog_entry_name", "FROM", "Catalog_Contents", "AS", "t1", "JOIN", "Catalog_Contents_Additional_Attributes", "AS", "t2", "ON", "t1.catalog_entry_id", "=", "t2.catalog_entry_id", "WHERE", "t2.attribute_value", "=", "(", "SELECT", "attribute_value", "FROM", "Catalog_Contents_Additional_Attributes", "GROUP", "BY", "attribute_value", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t1", ".", "catalog_entry_name", "from", "catalog_contents", "as", "t1", "join", "catalog_contents_additional_attributes", "as", "t2", "on", "t1", ".", "catalog_entry_id", "=", "t2", ".", "catalog_entry_id", "where", "t2", ".", "attribute_value", "=", "(", "select", "attribute_value", "from", "catalog_contents_additional_attributes", "group", "by", "attribute_value", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "Find the entry names of the catalog with the attribute that have the most entries.", "question_toks": ["Find", "the", "entry", "names", "of", "the", "catalog", "with", "the", "attribute", "that", "have", "the", "most", "entries", "."], "guid": 5440}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many customers have no payment histories?", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "Customer_Payments", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "customer_payments", ")"], "question": "How many customers have no payment histories?", "question_toks": ["How", "many", "customers", "have", "no", "payment", "histories", "?"], "guid": 5441}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many customers live in Prague city?", "sql": "SELECT count(*) FROM customers WHERE city = \"Prague\";", "example": {"db_id": "store_1", "query": "SELECT count(*) FROM customers WHERE city = \"Prague\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "WHERE", "city", "=", "``", "Prague", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "city", "=", "value"], "question": "How many customers live in Prague city?", "question_toks": ["How", "many", "customers", "live", "in", "Prague", "city", "?"], "guid": 5442}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the distinct names of customers with an order status of Pending, sorted by customer id?", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id", "example": {"db_id": "department_store", "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id", "query_toks": ["SELECT", "DISTINCT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status_code", "=", "``", "Pending", "''", "ORDER", "BY", "T2.customer_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status_code", "=", "value", "order", "by", "t2", ".", "customer_id"], "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?", "question_toks": ["What", "are", "the", "distinct", "names", "of", "customers", "with", "an", "order", "status", "of", "Pending", ",", "sorted", "by", "customer", "id", "?"], "guid": 5443}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show the first names and last names of customers without any account.", "sql": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_first_name ,  customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "query_toks": ["SELECT", "customer_first_name", ",", "customer_last_name", "FROM", "Customers", "EXCEPT", "SELECT", "T1.customer_first_name", ",", "T1.customer_last_name", "FROM", "Customers", "AS", "T1", "JOIN", "Accounts", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id"], "query_toks_no_value": ["select", "customer_first_name", ",", "customer_last_name", "from", "customers", "except", "select", "t1", ".", "customer_first_name", ",", "t1", ".", "customer_last_name", "from", "customers", "as", "t1", "join", "accounts", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "Show the first names and last names of customers without any account.", "question_toks": ["Show", "the", "first", "names", "and", "last", "names", "of", "customers", "without", "any", "account", "."], "guid": 5444}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | List the names, color descriptions and product descriptions of products with category \"Herbs\".", "sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"", "query_toks": ["SELECT", "T1.product_name", ",", "T2.color_description", ",", "T1.product_description", "FROM", "products", "AS", "T1", "JOIN", "Ref_colors", "AS", "T2", "ON", "T1.color_code", "=", "T2.color_code", "WHERE", "product_category_code", "=", "``", "Herbs", "''"], "query_toks_no_value": ["select", "t1", ".", "product_name", ",", "t2", ".", "color_description", ",", "t1", ".", "product_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "where", "product_category_code", "=", "value"], "question": "List the names, color descriptions and product descriptions of products with category \"Herbs\".", "question_toks": ["List", "the", "names", ",", "color", "descriptions", "and", "product", "descriptions", "of", "products", "with", "category", "``", "Herbs", "''", "."], "guid": 5445}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | What are the name and phone of the customer with the most ordered product quantity?", "sql": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT  T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T3.order_id  =  T2.order_id GROUP BY T1.customer_id ORDER BY sum(T3.order_quantity) DESC LIMIT 1", "query_toks": ["SELECT", "T1.customer_name", ",", "T1.customer_phone", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "JOIN", "order_items", "AS", "T3", "ON", "T3.order_id", "=", "T2.order_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "sum", "(", "T3.order_quantity", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", ",", "t1", ".", "customer_phone", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t3", ".", "order_id", "=", "t2", ".", "order_id", "group", "by", "t1", ".", "customer_id", "order", "by", "sum", "(", "t3", ".", "order_quantity", ")", "desc", "limit", "value"], "question": "What are the name and phone of the customer with the most ordered product quantity?", "question_toks": ["What", "are", "the", "name", "and", "phone", "of", "the", "customer", "with", "the", "most", "ordered", "product", "quantity", "?"], "guid": 5446}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.", "sql": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'", "query_toks": ["SELECT", "T2.customer_name", ",", "T2.payment_method", "FROM", "mailshot_customers", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.outcome_code", "=", "'Order", "'", "INTERSECT", "SELECT", "T2.customer_name", ",", "T2.payment_method", "FROM", "mailshot_customers", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.outcome_code", "=", "'No", "Response", "'"], "query_toks_no_value": ["select", "t2", ".", "customer_name", ",", "t2", ".", "payment_method", "from", "mailshot_customers", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "outcome_code", "=", "value", "intersect", "select", "t2", ".", "customer_name", ",", "t2", ".", "payment_method", "from", "mailshot_customers", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "outcome_code", "=", "value"], "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.", "question_toks": ["What", "are", "the", "name", "and", "payment", "method", "of", "customers", "who", "have", "both", "mailshots", "in", "'Order", "'", "outcome", "and", "mailshots", "in", "'No", "Response", "'", "outcome", "."], "guid": 5447}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.", "sql": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;", "example": {"db_id": "store_1", "query": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8;", "query_toks": ["SELECT", "billing_country", ",", "SUM", "(", "total", ")", "FROM", "invoices", "GROUP", "BY", "billing_country", "ORDER", "BY", "SUM", "(", "total", ")", "DESC", "LIMIT", "8", ";"], "query_toks_no_value": ["select", "billing_country", ",", "sum", "(", "total", ")", "from", "invoices", "group", "by", "billing_country", "order", "by", "sum", "(", "total", ")", "desc", "limit", "value"], "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.", "question_toks": ["A", "list", "of", "the", "top", "8", "countries", "by", "gross/total", "invoice", "size", ".", "List", "country", "name", "and", "gross", "invoice", "size", "."], "guid": 5448}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the address and email of the customer with the first name Linda.", "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'", "example": {"db_id": "sakila_1", "query": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'", "query_toks": ["SELECT", "T2.address", ",", "T1.email", "FROM", "customer", "AS", "T1", "JOIN", "address", "AS", "T2", "ON", "T2.address_id", "=", "T1.address_id", "WHERE", "T1.first_name", "=", "'LINDA", "'"], "query_toks_no_value": ["select", "t2", ".", "address", ",", "t1", ".", "email", "from", "customer", "as", "t1", "join", "address", "as", "t2", "on", "t2", ".", "address_id", "=", "t1", ".", "address_id", "where", "t1", ".", "first_name", "=", "value"], "question": "Return the address and email of the customer with the first name Linda.", "question_toks": ["Return", "the", "address", "and", "email", "of", "the", "customer", "with", "the", "first", "name", "Linda", "."], "guid": 5449}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Which district has the largest population?", "sql": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1", "example": {"db_id": "store_product", "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1", "query_toks": ["SELECT", "district_name", "FROM", "district", "ORDER", "BY", "city_population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "district_name", "from", "district", "order", "by", "city_population", "desc", "limit", "value"], "question": "Which district has the largest population?", "question_toks": ["Which", "district", "has", "the", "largest", "population", "?"], "guid": 5450}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | List the countries having more than 4 addresses listed.", "sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4", "example": {"db_id": "customers_and_addresses", "query": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4", "query_toks": ["SELECT", "country", "FROM", "addresses", "GROUP", "BY", "country", "HAVING", "count", "(", "address_id", ")", ">", "4"], "query_toks_no_value": ["select", "country", "from", "addresses", "group", "by", "country", "having", "count", "(", "address_id", ")", ">", "value"], "question": "List the countries having more than 4 addresses listed.", "question_toks": ["List", "the", "countries", "having", "more", "than", "4", "addresses", "listed", "."], "guid": 5451}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List the first name middle name and last name of all staff.", "sql": "SELECT first_name ,  middle_name ,  last_name FROM Staff;", "example": {"db_id": "driving_school", "query": "SELECT first_name ,  middle_name ,  last_name FROM Staff;", "query_toks": ["SELECT", "first_name", ",", "middle_name", ",", "last_name", "FROM", "Staff", ";"], "query_toks_no_value": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "staff"], "question": "List the first name middle name and last name of all staff.", "question_toks": ["List", "the", "first", "name", "middle", "name", "and", "last", "name", "of", "all", "staff", "."], "guid": 5452}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Where does the customer with the first name Linda live? And what is her email?", "sql": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'", "example": {"db_id": "sakila_1", "query": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'", "query_toks": ["SELECT", "T2.address", ",", "T1.email", "FROM", "customer", "AS", "T1", "JOIN", "address", "AS", "T2", "ON", "T2.address_id", "=", "T1.address_id", "WHERE", "T1.first_name", "=", "'LINDA", "'"], "query_toks_no_value": ["select", "t2", ".", "address", ",", "t1", ".", "email", "from", "customer", "as", "t1", "join", "address", "as", "t2", "on", "t2", ".", "address_id", "=", "t1", ".", "address_id", "where", "t1", ".", "first_name", "=", "value"], "question": "Where does the customer with the first name Linda live? And what is her email?", "question_toks": ["Where", "does", "the", "customer", "with", "the", "first", "name", "Linda", "live", "?", "And", "what", "is", "her", "email", "?"], "guid": 5453}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"", "query_toks": ["SELECT", "t3.characteristic_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "sesame", "''", "AND", "t3.characteristic_type_code", "=", "``", "Grade", "''"], "query_toks_no_value": ["select", "t3", ".", "characteristic_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value", "and", "t3", ".", "characteristic_type_code", "=", "value"], "question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?", "question_toks": ["What", "are", "the", "names", "of", "the", "characteristics", "of", "the", "product", "'sesame", "'", "that", "have", "the", "characteristic", "type", "code", "'Grade", "'", "?"], "guid": 5454}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Find the phone number of all the customers and staff.", "sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff", "example": {"db_id": "customer_complaints", "query": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff", "query_toks": ["SELECT", "phone_number", "FROM", "customers", "UNION", "SELECT", "phone_number", "FROM", "staff"], "query_toks_no_value": ["select", "phone_number", "from", "customers", "union", "select", "phone_number", "from", "staff"], "question": "Find the phone number of all the customers and staff.", "question_toks": ["Find", "the", "phone", "number", "of", "all", "the", "customers", "and", "staff", "."], "guid": 5455}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show the customer id and number of accounts with most accounts.", "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "customer_id", ",", "count", "(", "*", ")", "FROM", "Accounts", "GROUP", "BY", "customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "customer_id", ",", "count", "(", "*", ")", "from", "accounts", "group", "by", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the customer id and number of accounts with most accounts.", "question_toks": ["Show", "the", "customer", "id", "and", "number", "of", "accounts", "with", "most", "accounts", "."], "guid": 5456}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the number of invoices and total money billed in them from CA?", "sql": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";", "example": {"db_id": "store_1", "query": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\";", "query_toks": ["SELECT", "billing_state", ",", "COUNT", "(", "*", ")", ",", "SUM", "(", "total", ")", "FROM", "invoices", "WHERE", "billing_state", "=", "``", "CA", "''", ";"], "query_toks_no_value": ["select", "billing_state", ",", "count", "(", "*", ")", ",", "sum", "(", "total", ")", "from", "invoices", "where", "billing_state", "=", "value"], "question": "What is the number of invoices and total money billed in them from CA?", "question_toks": ["What", "is", "the", "number", "of", "invoices", "and", "total", "money", "billed", "in", "them", "from", "CA", "?"], "guid": 5457}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?", "sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "example": {"db_id": "customers_card_transactions", "query": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "query_toks": ["SELECT", "account_id", ",", "count", "(", "*", ")", "FROM", "Financial_transactions", "GROUP", "BY", "account_id"], "query_toks_no_value": ["select", "account_id", ",", "count", "(", "*", ")", "from", "financial_transactions", "group", "by", "account_id"], "question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?", "question_toks": ["What", "are", "the", "different", "account", "ids", "that", "have", "made", "financial", "transactions", ",", "as", "well", "as", "how", "many", "transactions", "correspond", "to", "each", "?"], "guid": 5458}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What are the first and last names of all customers with more than 2 payments?", "sql": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;", "example": {"db_id": "driving_school", "query": "SELECT T2.first_name ,  T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  2;", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "Customer_Payments", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "2", ";"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "customer_payments", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the first and last names of all customers with more than 2 payments?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "all", "customers", "with", "more", "than", "2", "payments", "?"], "guid": 5459}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | When did the staff member with first name as Janessa and last name as Sawayn leave the company?", "sql": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT date_left_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "query_toks": ["SELECT", "date_left_staff", "FROM", "Staff", "WHERE", "first_name", "=", "``", "Janessa", "''", "AND", "last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "date_left_staff", "from", "staff", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "When did the staff member with first name as Janessa and last name as Sawayn leave the company?", "question_toks": ["When", "did", "the", "staff", "member", "with", "first", "name", "as", "Janessa", "and", "last", "name", "as", "Sawayn", "leave", "the", "company", "?"], "guid": 5460}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | Are the customers holding coupons with amount 500 bad or good?", "sql": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500", "example": {"db_id": "products_for_hire", "query": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500", "query_toks": ["SELECT", "T1.good_or_bad_customer", "FROM", "customers", "AS", "T1", "JOIN", "discount_coupons", "AS", "T2", "ON", "T1.coupon_id", "=", "T2.coupon_id", "WHERE", "T2.coupon_amount", "=", "500"], "query_toks_no_value": ["select", "t1", ".", "good_or_bad_customer", "from", "customers", "as", "t1", "join", "discount_coupons", "as", "t2", "on", "t1", ".", "coupon_id", "=", "t2", ".", "coupon_id", "where", "t2", ".", "coupon_amount", "=", "value"], "question": "Are the customers holding coupons with amount 500 bad or good?", "question_toks": ["Are", "the", "customers", "holding", "coupons", "with", "amount", "500", "bad", "or", "good", "?"], "guid": 5461}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | How many colors are never used by any product?", "sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Ref_colors", "WHERE", "color_code", "NOT", "IN", "(", "SELECT", "color_code", "FROM", "products", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_colors", "where", "color_code", "not", "in", "(", "select", "color_code", "from", "products", ")"], "question": "How many colors are never used by any product?", "question_toks": ["How", "many", "colors", "are", "never", "used", "by", "any", "product", "?"], "guid": 5462}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Return the average money requested across all entrepreneurs.", "sql": "SELECT avg(Money_Requested) FROM entrepreneur", "example": {"db_id": "entrepreneur", "query": "SELECT avg(Money_Requested) FROM entrepreneur", "query_toks": ["SELECT", "avg", "(", "Money_Requested", ")", "FROM", "entrepreneur"], "query_toks_no_value": ["select", "avg", "(", "money_requested", ")", "from", "entrepreneur"], "question": "Return the average money requested across all entrepreneurs.", "question_toks": ["Return", "the", "average", "money", "requested", "across", "all", "entrepreneurs", "."], "guid": 5463}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What are all the distinct payment types?", "sql": "SELECT DISTINCT payment_type_code FROM payments", "example": {"db_id": "products_for_hire", "query": "SELECT DISTINCT payment_type_code FROM payments", "query_toks": ["SELECT", "DISTINCT", "payment_type_code", "FROM", "payments"], "query_toks_no_value": ["select", "distinct", "payment_type_code", "from", "payments"], "question": "What are all the distinct payment types?", "question_toks": ["What", "are", "all", "the", "distinct", "payment", "types", "?"], "guid": 5464}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | How many characteristics are there?", "sql": "SELECT count(*) FROM CHARACTERISTICS", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM CHARACTERISTICS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CHARACTERISTICS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "characteristics"], "question": "How many characteristics are there?", "question_toks": ["How", "many", "characteristics", "are", "there", "?"], "guid": 5465}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the total quantity of products purchased by \"Rodrick Heaney\"?", "sql": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "query_toks": ["SELECT", "sum", "(", "t3.order_quantity", ")", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "WHERE", "t1.customer_name", "=", "``", "Rodrick", "Heaney", "''"], "query_toks_no_value": ["select", "sum", "(", "t3", ".", "order_quantity", ")", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "What is the total quantity of products purchased by \"Rodrick Heaney\"?", "question_toks": ["What", "is", "the", "total", "quantity", "of", "products", "purchased", "by", "``", "Rodrick", "Heaney", "''", "?"], "guid": 5466}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the distinct first names, last names, and phone numbers for customers with accounts?", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "query_toks": ["SELECT", "DISTINCT", "T1.customer_first_name", ",", "T1.customer_last_name", ",", "T1.phone_number", "FROM", "Customers", "AS", "T1", "JOIN", "Accounts", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_first_name", ",", "t1", ".", "customer_last_name", ",", "t1", ".", "phone_number", "from", "customers", "as", "t1", "join", "accounts", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?", "question_toks": ["What", "are", "the", "distinct", "first", "names", ",", "last", "names", ",", "and", "phone", "numbers", "for", "customers", "with", "accounts", "?"], "guid": 5467}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What is the maximum page size for everything that has more than 3 products listed?", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3", "example": {"db_id": "store_product", "query": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3", "query_toks": ["SELECT", "max_page_size", "FROM", "product", "GROUP", "BY", "max_page_size", "HAVING", "count", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "max_page_size", "from", "product", "group", "by", "max_page_size", "having", "count", "(", "*", ")", ">", "value"], "question": "What is the maximum page size for everything that has more than 3 products listed?", "question_toks": ["What", "is", "the", "maximum", "page", "size", "for", "everything", "that", "has", "more", "than", "3", "products", "listed", "?"], "guid": 5468}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Return the id and full name of the customer with the most accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_invoices", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.customer_id", ",", "T2.customer_first_name", ",", "T2.customer_last_name", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_id", ",", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the id and full name of the customer with the most accounts.", "question_toks": ["Return", "the", "id", "and", "full", "name", "of", "the", "customer", "with", "the", "most", "accounts", "."], "guid": 5469}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | List the names of the customers who have once bought product \"food\".", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "JOIN", "order_items", "AS", "T3", "JOIN", "products", "AS", "T4", "ON", "T1.customer_id", "=", "T2.customer_id", "AND", "T2.order_id", "=", "T3.order_id", "AND", "T3.product_id", "=", "T4.product_id", "WHERE", "T4.product_name", "=", "``", "food", "''", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "join", "order_items", "as", "t3", "join", "products", "as", "t4", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "and", "t2", ".", "order_id", "=", "t3", ".", "order_id", "and", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t4", ".", "product_name", "=", "value", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List the names of the customers who have once bought product \"food\".", "question_toks": ["List", "the", "names", "of", "the", "customers", "who", "have", "once", "bought", "product", "``", "food", "''", "."], "guid": 5470}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What is the city with the most number of flagship stores?", "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "store_product", "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t3.headquartered_city", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "GROUP", "BY", "t3.headquartered_city", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "headquartered_city", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "group", "by", "t3", ".", "headquartered_city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the city with the most number of flagship stores?", "question_toks": ["What", "is", "the", "city", "with", "the", "most", "number", "of", "flagship", "stores", "?"], "guid": 5471}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What is the color code and description of the product named \"chervil\"?", "sql": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t1.color_code ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"chervil\"", "query_toks": ["SELECT", "t1.color_code", ",", "t2.color_description", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "WHERE", "t1.product_name", "=", "``", "chervil", "''"], "query_toks_no_value": ["select", "t1", ".", "color_code", ",", "t2", ".", "color_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "where", "t1", ".", "product_name", "=", "value"], "question": "What is the color code and description of the product named \"chervil\"?", "question_toks": ["What", "is", "the", "color", "code", "and", "description", "of", "the", "product", "named", "``", "chervil", "''", "?"], "guid": 5472}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the id of the store that has the most items in inventory?", "sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "store_id", "FROM", "inventory", "GROUP", "BY", "store_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "store_id", "from", "inventory", "group", "by", "store_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id of the store that has the most items in inventory?", "question_toks": ["What", "is", "the", "id", "of", "the", "store", "that", "has", "the", "most", "items", "in", "inventory", "?"], "guid": 5473}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show all distinct lot details.", "sql": "SELECT DISTINCT lot_details FROM LOTS", "example": {"db_id": "tracking_share_transactions", "query": "SELECT DISTINCT lot_details FROM LOTS", "query_toks": ["SELECT", "DISTINCT", "lot_details", "FROM", "LOTS"], "query_toks_no_value": ["select", "distinct", "lot_details", "from", "lots"], "question": "Show all distinct lot details.", "question_toks": ["Show", "all", "distinct", "lot", "details", "."], "guid": 5474}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Name all the products with next entry ID greater than 8.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "query_toks": ["SELECT", "catalog_entry_name", "FROM", "catalog_contents", "WHERE", "next_entry_id", ">", "8"], "query_toks_no_value": ["select", "catalog_entry_name", "from", "catalog_contents", "where", "next_entry_id", ">", "value"], "question": "Name all the products with next entry ID greater than 8.", "question_toks": ["Name", "all", "the", "products", "with", "next", "entry", "ID", "greater", "than", "8", "."], "guid": 5475}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the title of all the albums of the artist \"AC/DC\".", "sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"", "example": {"db_id": "chinook_1", "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"", "query_toks": ["SELECT", "Title", "FROM", "ALBUM", "AS", "T1", "JOIN", "ARTIST", "AS", "T2", "ON", "T1.ArtistId", "=", "T2.ArtistId", "WHERE", "T2.Name", "=", "``", "AC/DC", "''"], "query_toks_no_value": ["select", "title", "from", "album", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artistid", "=", "t2", ".", "artistid", "where", "t2", ".", "name", "=", "value"], "question": "Find the title of all the albums of the artist \"AC/DC\".", "question_toks": ["Find", "the", "title", "of", "all", "the", "albums", "of", "the", "artist", "``", "AC/DC", "''", "."], "guid": 5476}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What are the last names that are used by customers and staff?", "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff", "example": {"db_id": "driving_school", "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff", "query_toks": ["SELECT", "last_name", "FROM", "Customers", "INTERSECT", "SELECT", "last_name", "FROM", "Staff"], "query_toks_no_value": ["select", "last_name", "from", "customers", "intersect", "select", "last_name", "from", "staff"], "question": "What are the last names that are used by customers and staff?", "question_toks": ["What", "are", "the", "last", "names", "that", "are", "used", "by", "customers", "and", "staff", "?"], "guid": 5477}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Return the characteristic names of the 'sesame' product.", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "query_toks": ["SELECT", "t3.characteristic_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "sesame", "''"], "query_toks_no_value": ["select", "t3", ".", "characteristic_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value"], "question": "Return the characteristic names of the 'sesame' product.", "question_toks": ["Return", "the", "characteristic", "names", "of", "the", "'sesame", "'", "product", "."], "guid": 5478}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Which city has the most customers living in?", "sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t3.city", "FROM", "customers", "AS", "t1", "JOIN", "customer_addresses", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "addresses", "AS", "t3", "ON", "t2.address_id", "=", "t3.address_id", "GROUP", "BY", "t3.city", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "city", "from", "customers", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", "group", "by", "t3", ".", "city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which city has the most customers living in?", "question_toks": ["Which", "city", "has", "the", "most", "customers", "living", "in", "?"], "guid": 5479}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | What are the attribute data types with more than 3 attribute definitions?", "sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3", "example": {"db_id": "product_catalog", "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3", "query_toks": ["SELECT", "attribute_data_type", "FROM", "Attribute_Definitions", "GROUP", "BY", "attribute_data_type", "HAVING", "count", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "attribute_data_type", "from", "attribute_definitions", "group", "by", "attribute_data_type", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the attribute data types with more than 3 attribute definitions?", "question_toks": ["What", "are", "the", "attribute", "data", "types", "with", "more", "than", "3", "attribute", "definitions", "?"], "guid": 5480}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Please show the employee last names that serves no more than 20 customers.", "sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20", "example": {"db_id": "chinook_1", "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20", "query_toks": ["SELECT", "T1.LastName", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "EMPLOYEE", "AS", "T2", "ON", "T1.SupportRepId", "=", "T2.EmployeeId", "GROUP", "BY", "T1.SupportRepId", "HAVING", "COUNT", "(", "*", ")", "<", "=", "20"], "query_toks_no_value": ["select", "t1", ".", "lastname", "from", "customer", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "supportrepid", "=", "t2", ".", "employeeid", "group", "by", "t1", ".", "supportrepid", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "Please show the employee last names that serves no more than 20 customers.", "question_toks": ["Please", "show", "the", "employee", "last", "names", "that", "serves", "no", "more", "than", "20", "customers", "."], "guid": 5481}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | How many products have the color description 'red' and the characteristic name 'slow'?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "JOIN", "ref_colors", "AS", "t4", "ON", "t1.color_code", "=", "t4.color_code", "WHERE", "t4.color_description", "=", "``", "red", "''", "AND", "t3.characteristic_name", "=", "``", "slow", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "join", "ref_colors", "as", "t4", "on", "t1", ".", "color_code", "=", "t4", ".", "color_code", "where", "t4", ".", "color_description", "=", "value", "and", "t3", ".", "characteristic_name", "=", "value"], "question": "How many products have the color description 'red' and the characteristic name 'slow'?", "question_toks": ["How", "many", "products", "have", "the", "color", "description", "'red", "'", "and", "the", "characteristic", "name", "'slow", "'", "?"], "guid": 5482}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What are the names of people in ascending order of weight?", "sql": "SELECT Name FROM People ORDER BY Weight ASC", "example": {"db_id": "entrepreneur", "query": "SELECT Name FROM People ORDER BY Weight ASC", "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Weight", "ASC"], "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "weight", "asc"], "question": "What are the names of people in ascending order of weight?", "question_toks": ["What", "are", "the", "names", "of", "people", "in", "ascending", "order", "of", "weight", "?"], "guid": 5483}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many customers live in the city of Prague?", "sql": "SELECT count(*) FROM customers WHERE city = \"Prague\";", "example": {"db_id": "store_1", "query": "SELECT count(*) FROM customers WHERE city = \"Prague\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "WHERE", "city", "=", "``", "Prague", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "city", "=", "value"], "question": "How many customers live in the city of Prague?", "question_toks": ["How", "many", "customers", "live", "in", "the", "city", "of", "Prague", "?"], "guid": 5484}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What are the names of all the stores located in Khanewal District?", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"", "example": {"db_id": "store_product", "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"", "query_toks": ["SELECT", "t1.store_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t3.district_name", "=", "``", "Khanewal", "District", "''"], "query_toks_no_value": ["select", "t1", ".", "store_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t3", ".", "district_name", "=", "value"], "question": "What are the names of all the stores located in Khanewal District?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "stores", "located", "in", "Khanewal", "District", "?"], "guid": 5485}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Count the number of customers.", "sql": "SELECT count(*) FROM customers", "example": {"db_id": "customer_complaints", "query": "SELECT count(*) FROM customers", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "Count the number of customers.", "question_toks": ["Count", "the", "number", "of", "customers", "."], "guid": 5486}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | List the name and count of each product in all orders.", "sql": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "example": {"db_id": "tracking_orders", "query": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "query_toks": ["SELECT", "T3.product_name", ",", "count", "(", "*", ")", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "JOIN", "products", "AS", "T3", "ON", "T1.order_id", "=", "T2.order_id", "AND", "T2.product_id", "=", "T3.product_id", "GROUP", "BY", "T3.product_id"], "query_toks_no_value": ["select", "t3", ".", "product_name", ",", "count", "(", "*", ")", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "join", "products", "as", "t3", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "and", "t2", ".", "product_id", "=", "t3", ".", "product_id", "group", "by", "t3", ".", "product_id"], "question": "List the name and count of each product in all orders.", "question_toks": ["List", "the", "name", "and", "count", "of", "each", "product", "in", "all", "orders", "."], "guid": 5487}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | How many stores are there?", "sql": "SELECT count(*) FROM store", "example": {"db_id": "sakila_1", "query": "SELECT count(*) FROM store", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "store"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "store"], "question": "How many stores are there?", "question_toks": ["How", "many", "stores", "are", "there", "?"], "guid": 5488}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show all product colors.", "sql": "SELECT DISTINCT product_color FROM Products", "example": {"db_id": "customers_and_invoices", "query": "SELECT DISTINCT product_color FROM Products", "query_toks": ["SELECT", "DISTINCT", "product_color", "FROM", "Products"], "query_toks_no_value": ["select", "distinct", "product_color", "from", "products"], "question": "Show all product colors.", "question_toks": ["Show", "all", "product", "colors", "."], "guid": 5489}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Count the number of characteristics the product 'sesame' has.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "WHERE", "t1.product_name", "=", "``", "sesame", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t1", ".", "product_name", "=", "value"], "question": "Count the number of characteristics the product 'sesame' has.", "question_toks": ["Count", "the", "number", "of", "characteristics", "the", "product", "'sesame", "'", "has", "."], "guid": 5490}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Find the product type whose average price is higher than the average price of all products.", "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)", "example": {"db_id": "department_store", "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)", "query_toks": ["SELECT", "product_type_code", "FROM", "products", "GROUP", "BY", "product_type_code", "HAVING", "avg", "(", "product_price", ")", ">", "(", "SELECT", "avg", "(", "product_price", ")", "FROM", "products", ")"], "query_toks_no_value": ["select", "product_type_code", "from", "products", "group", "by", "product_type_code", "having", "avg", "(", "product_price", ")", ">", "(", "select", "avg", "(", "product_price", ")", "from", "products", ")"], "question": "Find the product type whose average price is higher than the average price of all products.", "question_toks": ["Find", "the", "product", "type", "whose", "average", "price", "is", "higher", "than", "the", "average", "price", "of", "all", "products", "."], "guid": 5491}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Find the number of different product types.", "sql": "SELECT count(DISTINCT product_type_code) FROM products", "example": {"db_id": "department_store", "query": "SELECT count(DISTINCT product_type_code) FROM products", "query_toks": ["SELECT", "count", "(", "DISTINCT", "product_type_code", ")", "FROM", "products"], "query_toks_no_value": ["select", "count", "(", "distinct", "product_type_code", ")", "from", "products"], "question": "Find the number of different product types.", "question_toks": ["Find", "the", "number", "of", "different", "product", "types", "."], "guid": 5492}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the ids and names of department stores with both marketing and managing departments?", "sql": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"", "example": {"db_id": "department_store", "query": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"", "query_toks": ["SELECT", "T2.dept_store_id", ",", "T2.store_name", "FROM", "departments", "AS", "T1", "JOIN", "department_stores", "AS", "T2", "ON", "T1.dept_store_id", "=", "T2.dept_store_id", "WHERE", "T1.department_name", "=", "``", "marketing", "''", "INTERSECT", "SELECT", "T2.dept_store_id", ",", "T2.store_name", "FROM", "departments", "AS", "T1", "JOIN", "department_stores", "AS", "T2", "ON", "T1.dept_store_id", "=", "T2.dept_store_id", "WHERE", "T1.department_name", "=", "``", "managing", "''"], "query_toks_no_value": ["select", "t2", ".", "dept_store_id", ",", "t2", ".", "store_name", "from", "departments", "as", "t1", "join", "department_stores", "as", "t2", "on", "t1", ".", "dept_store_id", "=", "t2", ".", "dept_store_id", "where", "t1", ".", "department_name", "=", "value", "intersect", "select", "t2", ".", "dept_store_id", ",", "t2", ".", "store_name", "from", "departments", "as", "t1", "join", "department_stores", "as", "t2", "on", "t1", ".", "dept_store_id", "=", "t2", ".", "dept_store_id", "where", "t1", ".", "department_name", "=", "value"], "question": "What are the ids and names of department stores with both marketing and managing departments?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "department", "stores", "with", "both", "marketing", "and", "managing", "departments", "?"], "guid": 5493}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the most frequently ordered product? Tell me the detail of the product", "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.product_details", "FROM", "order_items", "AS", "t1", "JOIN", "products", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "GROUP", "BY", "t1.product_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "product_details", "from", "order_items", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most frequently ordered product? Tell me the detail of the product", "question_toks": ["What", "is", "the", "most", "frequently", "ordered", "product", "?", "Tell", "me", "the", "detail", "of", "the", "product"], "guid": 5494}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List every album's title.", "sql": "SELECT title FROM albums;", "example": {"db_id": "store_1", "query": "SELECT title FROM albums;", "query_toks": ["SELECT", "title", "FROM", "albums", ";"], "query_toks_no_value": ["select", "title", "from", "albums"], "question": "List every album's title.", "question_toks": ["List", "every", "album", "'s", "title", "."], "guid": 5495}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?", "sql": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor", "example": {"db_id": "entrepreneur", "query": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor", "query_toks": ["SELECT", "Investor", ",", "COUNT", "(", "*", ")", "FROM", "entrepreneur", "GROUP", "BY", "Investor"], "query_toks_no_value": ["select", "investor", ",", "count", "(", "*", ")", "from", "entrepreneur", "group", "by", "investor"], "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?", "question_toks": ["What", "are", "the", "investors", "of", "entrepreneurs", "and", "the", "corresponding", "number", "of", "entrepreneurs", "invested", "by", "each", "investor", "?"], "guid": 5496}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Return the names of products in the category 'Spices'.", "sql": "SELECT product_name FROM products WHERE product_category_code  =  \"Spices\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_name FROM products WHERE product_category_code  =  \"Spices\"", "query_toks": ["SELECT", "product_name", "FROM", "products", "WHERE", "product_category_code", "=", "``", "Spices", "''"], "query_toks_no_value": ["select", "product_name", "from", "products", "where", "product_category_code", "=", "value"], "question": "Return the names of products in the category 'Spices'.", "question_toks": ["Return", "the", "names", "of", "products", "in", "the", "category", "'Spices", "'", "."], "guid": 5497}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What is the color description of the product with name \"catnip\"?", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"", "query_toks": ["SELECT", "t2.color_description", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "WHERE", "t1.product_name", "=", "``", "catnip", "''"], "query_toks_no_value": ["select", "t2", ".", "color_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "where", "t1", ".", "product_name", "=", "value"], "question": "What is the color description of the product with name \"catnip\"?", "question_toks": ["What", "is", "the", "color", "description", "of", "the", "product", "with", "name", "``", "catnip", "''", "?"], "guid": 5498}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"", "query_toks": ["SELECT", "t1.product_name", "FROM", "products", "AS", "t1", "JOIN", "ref_product_categories", "AS", "t2", "ON", "t1.product_category_code", "=", "t2.product_category_code", "JOIN", "ref_colors", "AS", "t3", "ON", "t1.color_code", "=", "t3.color_code", "WHERE", "t3.color_description", "=", "``", "white", "''", "AND", "t2.unit_of_measure", "!", "=", "``", "Handful", "''"], "query_toks_no_value": ["select", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "ref_product_categories", "as", "t2", "on", "t1", ".", "product_category_code", "=", "t2", ".", "product_category_code", "join", "ref_colors", "as", "t3", "on", "t1", ".", "color_code", "=", "t3", ".", "color_code", "where", "t3", ".", "color_description", "=", "value", "and", "t2", ".", "unit_of_measure", "!", "=", "value"], "question": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?", "question_toks": ["What", "are", "the", "names", "of", "products", "that", "are", "not", "'white", "'", "in", "color", "and", "are", "not", "measured", "by", "the", "unit", "'Handful", "'", "?"], "guid": 5499}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Where is store 1 located?", "sql": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1", "example": {"db_id": "sakila_1", "query": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1", "query_toks": ["SELECT", "T2.address", "FROM", "store", "AS", "T1", "JOIN", "address", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "store_id", "=", "1"], "query_toks_no_value": ["select", "t2", ".", "address", "from", "store", "as", "t1", "join", "address", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "store_id", "=", "value"], "question": "Where is store 1 located?", "question_toks": ["Where", "is", "store", "1", "located", "?"], "guid": 5500}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the names of all the customers?", "sql": "SELECT customer_name FROM customers", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers", "query_toks": ["SELECT", "customer_name", "FROM", "customers"], "query_toks_no_value": ["select", "customer_name", "from", "customers"], "question": "What are the names of all the customers?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "customers", "?"], "guid": 5501}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Give the unit of measure for the product with the name 'cumin'.", "sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"", "query_toks": ["SELECT", "t2.unit_of_measure", "FROM", "products", "AS", "t1", "JOIN", "ref_product_categories", "AS", "t2", "ON", "t1.product_category_code", "=", "t2.product_category_code", "WHERE", "t1.product_name", "=", "``", "cumin", "''"], "query_toks_no_value": ["select", "t2", ".", "unit_of_measure", "from", "products", "as", "t1", "join", "ref_product_categories", "as", "t2", "on", "t1", ".", "product_category_code", "=", "t2", ".", "product_category_code", "where", "t1", ".", "product_name", "=", "value"], "question": "Give the unit of measure for the product with the name 'cumin'.", "question_toks": ["Give", "the", "unit", "of", "measure", "for", "the", "product", "with", "the", "name", "'cumin", "'", "."], "guid": 5502}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Which orders are made by the customer named \"Jeramie\"? Give me the order ids and status.", "sql": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "example": {"db_id": "tracking_orders", "query": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "query_toks": ["SELECT", "T2.order_id", ",", "T2.order_status", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.customer_name", "=", "``", "Jeramie", "''"], "query_toks_no_value": ["select", "t2", ".", "order_id", ",", "t2", ".", "order_status", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Which orders are made by the customer named \"Jeramie\"? Give me the order ids and status.", "question_toks": ["Which", "orders", "are", "made", "by", "the", "customer", "named", "``", "Jeramie", "''", "?", "Give", "me", "the", "order", "ids", "and", "status", "."], "guid": 5503}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What is the name and job title of the staff who was assigned the latest?", "sql": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT T1.staff_name ,  T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1", "query_toks": ["SELECT", "T1.staff_name", ",", "T2.job_title_code", "FROM", "staff", "AS", "T1", "JOIN", "staff_department_assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "ORDER", "BY", "T2.date_assigned_to", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "staff_name", ",", "t2", ".", "job_title_code", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "order", "by", "t2", ".", "date_assigned_to", "desc", "limit", "value"], "question": "What is the name and job title of the staff who was assigned the latest?", "question_toks": ["What", "is", "the", "name", "and", "job", "title", "of", "the", "staff", "who", "was", "assigned", "the", "latest", "?"], "guid": 5504}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the name and gender of the staff who was assigned in 2016.", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"", "example": {"db_id": "department_store", "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"", "query_toks": ["SELECT", "T1.staff_name", ",", "T1.staff_gender", "FROM", "staff", "AS", "T1", "JOIN", "staff_department_assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.date_assigned_from", "LIKE", "``", "2016", "%", "''"], "query_toks_no_value": ["select", "t1", ".", "staff_name", ",", "t1", ".", "staff_gender", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "date_assigned_from", "like", "value"], "question": "Return the name and gender of the staff who was assigned in 2016.", "question_toks": ["Return", "the", "name", "and", "gender", "of", "the", "staff", "who", "was", "assigned", "in", "2016", "."], "guid": 5505}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the names of all the media types?", "sql": "SELECT name FROM media_types;", "example": {"db_id": "store_1", "query": "SELECT name FROM media_types;", "query_toks": ["SELECT", "name", "FROM", "media_types", ";"], "query_toks_no_value": ["select", "name", "from", "media_types"], "question": "What are the names of all the media types?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "media", "types", "?"], "guid": 5506}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the transaction type code that occurs the fewest times.", "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1", "example": {"db_id": "tracking_share_transactions", "query": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) ASC LIMIT 1", "query_toks": ["SELECT", "transaction_type_code", "FROM", "TRANSACTIONS", "GROUP", "BY", "transaction_type_code", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "transaction_type_code", "from", "transactions", "group", "by", "transaction_type_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Show the transaction type code that occurs the fewest times.", "question_toks": ["Show", "the", "transaction", "type", "code", "that", "occurs", "the", "fewest", "times", "."], "guid": 5507}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Count the number of addressed in the California district.", "sql": "SELECT count(*) FROM address WHERE district  =  'California'", "example": {"db_id": "sakila_1", "query": "SELECT count(*) FROM address WHERE district  =  'California'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "address", "WHERE", "district", "=", "'California", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "address", "where", "district", "=", "value"], "question": "Count the number of addressed in the California district.", "question_toks": ["Count", "the", "number", "of", "addressed", "in", "the", "California", "district", "."], "guid": 5508}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which store has most the customers?", "sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "store_id", "FROM", "customer", "GROUP", "BY", "store_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "store_id", "from", "customer", "group", "by", "store_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which store has most the customers?", "question_toks": ["Which", "store", "has", "most", "the", "customers", "?"], "guid": 5509}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Count the number of items store 1 has in stock.", "sql": "SELECT count(*) FROM inventory WHERE store_id  =  1", "example": {"db_id": "sakila_1", "query": "SELECT count(*) FROM inventory WHERE store_id  =  1", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "inventory", "WHERE", "store_id", "=", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "inventory", "where", "store_id", "=", "value"], "question": "Count the number of items store 1 has in stock.", "question_toks": ["Count", "the", "number", "of", "items", "store", "1", "has", "in", "stock", "."], "guid": 5510}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | How many distinct transaction types are used in the transactions?", "sql": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS", "example": {"db_id": "tracking_share_transactions", "query": "SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS", "query_toks": ["SELECT", "COUNT", "(", "DISTINCT", "transaction_type_code", ")", "FROM", "TRANSACTIONS"], "query_toks_no_value": ["select", "count", "(", "distinct", "transaction_type_code", ")", "from", "transactions"], "question": "How many distinct transaction types are used in the transactions?", "question_toks": ["How", "many", "distinct", "transaction", "types", "are", "used", "in", "the", "transactions", "?"], "guid": 5511}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Please list all album titles in alphabetical order.", "sql": "SELECT Title FROM ALBUM ORDER BY Title", "example": {"db_id": "chinook_1", "query": "SELECT Title FROM ALBUM ORDER BY Title", "query_toks": ["SELECT", "Title", "FROM", "ALBUM", "ORDER", "BY", "Title"], "query_toks_no_value": ["select", "title", "from", "album", "order", "by", "title"], "question": "Please list all album titles in alphabetical order.", "question_toks": ["Please", "list", "all", "album", "titles", "in", "alphabetical", "order", "."], "guid": 5512}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the number of transactions for different investors.", "sql": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id", "example": {"db_id": "tracking_share_transactions", "query": "SELECT investor_id ,  COUNT(*) FROM TRANSACTIONS GROUP BY investor_id", "query_toks": ["SELECT", "investor_id", ",", "COUNT", "(", "*", ")", "FROM", "TRANSACTIONS", "GROUP", "BY", "investor_id"], "query_toks_no_value": ["select", "investor_id", ",", "count", "(", "*", ")", "from", "transactions", "group", "by", "investor_id"], "question": "Show the number of transactions for different investors.", "question_toks": ["Show", "the", "number", "of", "transactions", "for", "different", "investors", "."], "guid": 5513}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | When did the staff member with first name as Janessa and last name as Sawayn join the company?", "sql": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "query_toks": ["SELECT", "date_joined_staff", "FROM", "Staff", "WHERE", "first_name", "=", "``", "Janessa", "''", "AND", "last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "date_joined_staff", "from", "staff", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "When did the staff member with first name as Janessa and last name as Sawayn join the company?", "question_toks": ["When", "did", "the", "staff", "member", "with", "first", "name", "as", "Janessa", "and", "last", "name", "as", "Sawayn", "join", "the", "company", "?"], "guid": 5514}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | Show all distinct product categories along with the number of mailshots in each category.", "sql": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category", "query_toks": ["SELECT", "product_category", ",", "count", "(", "*", ")", "FROM", "mailshot_campaigns", "GROUP", "BY", "product_category"], "query_toks_no_value": ["select", "product_category", ",", "count", "(", "*", ")", "from", "mailshot_campaigns", "group", "by", "product_category"], "question": "Show all distinct product categories along with the number of mailshots in each category.", "question_toks": ["Show", "all", "distinct", "product", "categories", "along", "with", "the", "number", "of", "mailshots", "in", "each", "category", "."], "guid": 5515}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the names, address roads, and cities of the branches ordered by opening year?", "sql": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year", "example": {"db_id": "shop_membership", "query": "SELECT name ,  address_road ,  city FROM branch ORDER BY open_year", "query_toks": ["SELECT", "name", ",", "address_road", ",", "city", "FROM", "branch", "ORDER", "BY", "open_year"], "query_toks_no_value": ["select", "name", ",", "address_road", ",", "city", "from", "branch", "order", "by", "open_year"], "question": "What are the names, address roads, and cities of the branches ordered by opening year?", "question_toks": ["What", "are", "the", "names", ",", "address", "roads", ",", "and", "cities", "of", "the", "branches", "ordered", "by", "opening", "year", "?"], "guid": 5516}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are id and name of the products whose price is lower than 600 or higher than 900?", "sql": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900", "example": {"db_id": "department_store", "query": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900", "query_toks": ["SELECT", "product_id", ",", "product_name", "FROM", "products", "WHERE", "product_price", "<", "600", "OR", "product_price", ">", "900"], "query_toks_no_value": ["select", "product_id", ",", "product_name", "from", "products", "where", "product_price", "<", "value", "or", "product_price", ">", "value"], "question": "What are id and name of the products whose price is lower than 600 or higher than 900?", "question_toks": ["What", "are", "id", "and", "name", "of", "the", "products", "whose", "price", "is", "lower", "than", "600", "or", "higher", "than", "900", "?"], "guid": 5517}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Give the id and product type of the product with the lowest price.", "sql": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT product_id ,  product_type_code FROM products ORDER BY product_price LIMIT 1", "query_toks": ["SELECT", "product_id", ",", "product_type_code", "FROM", "products", "ORDER", "BY", "product_price", "LIMIT", "1"], "query_toks_no_value": ["select", "product_id", ",", "product_type_code", "from", "products", "order", "by", "product_price", "limit", "value"], "question": "Give the id and product type of the product with the lowest price.", "question_toks": ["Give", "the", "id", "and", "product", "type", "of", "the", "product", "with", "the", "lowest", "price", "."], "guid": 5518}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | List the order id, customer id for orders in Cancelled status, ordered by their order dates.", "sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date", "example": {"db_id": "department_store", "query": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date", "query_toks": ["SELECT", "order_id", ",", "customer_id", "FROM", "customer_orders", "WHERE", "order_status_code", "=", "``", "Cancelled", "''", "ORDER", "BY", "order_date"], "query_toks_no_value": ["select", "order_id", ",", "customer_id", "from", "customer_orders", "where", "order_status_code", "=", "value", "order", "by", "order_date"], "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.", "question_toks": ["List", "the", "order", "id", ",", "customer", "id", "for", "orders", "in", "Cancelled", "status", ",", "ordered", "by", "their", "order", "dates", "."], "guid": 5519}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Give the color description that is least common across products.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "t2.color_description", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "GROUP", "BY", "t2.color_description", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "color_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "group", "by", "t2", ".", "color_description", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Give the color description that is least common across products.", "question_toks": ["Give", "the", "color", "description", "that", "is", "least", "common", "across", "products", "."], "guid": 5520}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | In which country does Roberto Almeida?", "sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";", "example": {"db_id": "store_1", "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";", "query_toks": ["SELECT", "country", "FROM", "customers", "WHERE", "first_name", "=", "``", "Roberto", "''", "AND", "last_name", "=", "``", "Almeida", "''", ";"], "query_toks_no_value": ["select", "country", "from", "customers", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "In which country does Roberto Almeida?", "question_toks": ["In", "which", "country", "does", "Roberto", "Almeida", "?"], "guid": 5521}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | When did the staff member named Janessa Sawayn join the company?", "sql": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT date_joined_staff FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "query_toks": ["SELECT", "date_joined_staff", "FROM", "Staff", "WHERE", "first_name", "=", "``", "Janessa", "''", "AND", "last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "date_joined_staff", "from", "staff", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "When did the staff member named Janessa Sawayn join the company?", "question_toks": ["When", "did", "the", "staff", "member", "named", "Janessa", "Sawayn", "join", "the", "company", "?"], "guid": 5522}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | Show the names of customers who have the most mailshots.", "sql": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.customer_name", "FROM", "mailshot_customers", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "customer_name", "from", "mailshot_customers", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the names of customers who have the most mailshots.", "question_toks": ["Show", "the", "names", "of", "customers", "who", "have", "the", "most", "mailshots", "."], "guid": 5523}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the ids and full names of customers who hold two or more cards?", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "example": {"db_id": "customers_card_transactions", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.customer_id", ",", "T2.customer_first_name", ",", "T2.customer_last_name", "FROM", "Customers_cards", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "customer_id", ",", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", "from", "customers_cards", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the ids and full names of customers who hold two or more cards?", "question_toks": ["What", "are", "the", "ids", "and", "full", "names", "of", "customers", "who", "hold", "two", "or", "more", "cards", "?"], "guid": 5524}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Count the number of customer cards of the type Debit.", "sql": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers_cards", "WHERE", "card_type_code", "=", "``", "Debit", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers_cards", "where", "card_type_code", "=", "value"], "question": "Count the number of customer cards of the type Debit.", "question_toks": ["Count", "the", "number", "of", "customer", "cards", "of", "the", "type", "Debit", "."], "guid": 5525}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the name and capacity of products with price greater than 700 (in USD).", "sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "query_toks": ["SELECT", "catalog_entry_name", ",", "capacity", "FROM", "Catalog_Contents", "WHERE", "price_in_dollars", ">", "700"], "query_toks_no_value": ["select", "catalog_entry_name", ",", "capacity", "from", "catalog_contents", "where", "price_in_dollars", ">", "value"], "question": "Find the name and capacity of products with price greater than 700 (in USD).", "question_toks": ["Find", "the", "name", "and", "capacity", "of", "products", "with", "price", "greater", "than", "700", "(", "in", "USD", ")", "."], "guid": 5526}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show all customer ids and the number of cards owned by each customer.", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id", "query_toks": ["SELECT", "customer_id", ",", "count", "(", "*", ")", "FROM", "Customers_cards", "GROUP", "BY", "customer_id"], "query_toks_no_value": ["select", "customer_id", ",", "count", "(", "*", ")", "from", "customers_cards", "group", "by", "customer_id"], "question": "Show all customer ids and the number of cards owned by each customer.", "question_toks": ["Show", "all", "customer", "ids", "and", "the", "number", "of", "cards", "owned", "by", "each", "customer", "."], "guid": 5527}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What is the average amount due for all the payments?", "sql": "SELECT avg(amount_due) FROM payments", "example": {"db_id": "products_for_hire", "query": "SELECT avg(amount_due) FROM payments", "query_toks": ["SELECT", "avg", "(", "amount_due", ")", "FROM", "payments"], "query_toks_no_value": ["select", "avg", "(", "amount_due", ")", "from", "payments"], "question": "What is the average amount due for all the payments?", "question_toks": ["What", "is", "the", "average", "amount", "due", "for", "all", "the", "payments", "?"], "guid": 5528}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which countries have at least 3 cities?", "sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3", "example": {"db_id": "sakila_1", "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3", "query_toks": ["SELECT", "T2.country", "FROM", "city", "AS", "T1", "JOIN", "country", "AS", "T2", "ON", "T1.country_id", "=", "T2.country_id", "GROUP", "BY", "T2.country_id", "HAVING", "count", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "country", "from", "city", "as", "t1", "join", "country", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "group", "by", "t2", ".", "country_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which countries have at least 3 cities?", "question_toks": ["Which", "countries", "have", "at", "least", "3", "cities", "?"], "guid": 5529}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the name of the product that has the smallest capacity.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "query_toks": ["SELECT", "catalog_entry_name", "FROM", "catalog_contents", "ORDER", "BY", "capacity", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "catalog_entry_name", "from", "catalog_contents", "order", "by", "capacity", "asc", "limit", "value"], "question": "Find the name of the product that has the smallest capacity.", "question_toks": ["Find", "the", "name", "of", "the", "product", "that", "has", "the", "smallest", "capacity", "."], "guid": 5530}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List all vehicle id", "sql": "SELECT vehicle_id FROM Vehicles;", "example": {"db_id": "driving_school", "query": "SELECT vehicle_id FROM Vehicles;", "query_toks": ["SELECT", "vehicle_id", "FROM", "Vehicles", ";"], "query_toks_no_value": ["select", "vehicle_id", "from", "vehicles"], "question": "List all vehicle id", "question_toks": ["List", "all", "vehicle", "id"], "guid": 5531}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the different types of transactions?", "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "example": {"db_id": "customers_card_transactions", "query": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "query_toks": ["SELECT", "DISTINCT", "transaction_type", "FROM", "Financial_Transactions"], "query_toks_no_value": ["select", "distinct", "transaction_type", "from", "financial_transactions"], "question": "What are the different types of transactions?", "question_toks": ["What", "are", "the", "different", "types", "of", "transactions", "?"], "guid": 5532}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | How many products are never booked with amount higher than 200?", "sql": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )", "example": {"db_id": "products_for_hire", "query": "SELECT count(*) FROM Products_for_hire WHERE product_id NOT IN ( SELECT product_id FROM products_booked WHERE booked_amount  >  200 )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Products_for_hire", "WHERE", "product_id", "NOT", "IN", "(", "SELECT", "product_id", "FROM", "products_booked", "WHERE", "booked_amount", ">", "200", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products_for_hire", "where", "product_id", "not", "in", "(", "select", "product_id", "from", "products_booked", "where", "booked_amount", ">", "value", ")"], "question": "How many products are never booked with amount higher than 200?", "question_toks": ["How", "many", "products", "are", "never", "booked", "with", "amount", "higher", "than", "200", "?"], "guid": 5533}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | How many total pounds were purchased in the year 2018 at all London branches?", "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", "example": {"db_id": "shop_membership", "query": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", "query_toks": ["SELECT", "sum", "(", "total_pounds", ")", "FROM", "purchase", "AS", "T1", "JOIN", "branch", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T2.city", "=", "'London", "'", "AND", "T1.year", "=", "2018"], "query_toks_no_value": ["select", "sum", "(", "total_pounds", ")", "from", "purchase", "as", "t1", "join", "branch", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t2", ".", "city", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "How many total pounds were purchased in the year 2018 at all London branches?", "question_toks": ["How", "many", "total", "pounds", "were", "purchased", "in", "the", "year", "2018", "at", "all", "London", "branches", "?"], "guid": 5534}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the names for the 3 branches that have the most memberships?", "sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3", "example": {"db_id": "shop_membership", "query": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3", "query_toks": ["SELECT", "name", "FROM", "branch", "ORDER", "BY", "membership_amount", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "branch", "order", "by", "membership_amount", "desc", "limit", "value"], "question": "What are the names for the 3 branches that have the most memberships?", "question_toks": ["What", "are", "the", "names", "for", "the", "3", "branches", "that", "have", "the", "most", "memberships", "?"], "guid": 5535}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the most popular full name of the actors?", "sql": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "actor", "GROUP", "BY", "first_name", ",", "last_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "actor", "group", "by", "first_name", ",", "last_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most popular full name of the actors?", "question_toks": ["What", "is", "the", "most", "popular", "full", "name", "of", "the", "actors", "?"], "guid": 5536}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.", "sql": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'", "example": {"db_id": "sakila_1", "query": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'", "query_toks": ["SELECT", "phone", ",", "postal_code", "FROM", "address", "WHERE", "address", "=", "'1031", "Daugavpils", "Parkway", "'"], "query_toks_no_value": ["select", "phone", ",", "postal_code", "from", "address", "where", "address", "=", "value"], "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.", "question_toks": ["Give", "the", "phone", "and", "postal", "code", "corresponding", "to", "the", "address", "'1031", "Daugavpils", "Parkway", "'", "."], "guid": 5537}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many lessons did the customer with the first name Ray take?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Ray\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.first_name", "=", "``", "Ray", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "lessons", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "first_name", "=", "value"], "question": "How many lessons did the customer with the first name Ray take?", "question_toks": ["How", "many", "lessons", "did", "the", "customer", "with", "the", "first", "name", "Ray", "take", "?"], "guid": 5538}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find the name all districts with city area greater than 10 or population larger than 100000", "sql": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000", "example": {"db_id": "store_product", "query": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000", "query_toks": ["SELECT", "district_name", "FROM", "district", "WHERE", "city_area", ">", "10", "OR", "City_Population", ">", "100000"], "query_toks_no_value": ["select", "district_name", "from", "district", "where", "city_area", ">", "value", "or", "city_population", ">", "value"], "question": "Find the name all districts with city area greater than 10 or population larger than 100000", "question_toks": ["Find", "the", "name", "all", "districts", "with", "city", "area", "greater", "than", "10", "or", "population", "larger", "than", "100000"], "guid": 5539}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | For each branch id, what are the names of the branches that were registered after 2015?", "sql": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id", "example": {"db_id": "shop_membership", "query": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "branch", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T1.register_year", ">", "2015", "GROUP", "BY", "T2.branch_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "membership_register_branch", "as", "t1", "join", "branch", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t1", ".", "register_year", ">", "value", "group", "by", "t2", ".", "branch_id"], "question": "For each branch id, what are the names of the branches that were registered after 2015?", "question_toks": ["For", "each", "branch", "id", ",", "what", "are", "the", "names", "of", "the", "branches", "that", "were", "registered", "after", "2015", "?"], "guid": 5540}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | Find the number of employees whose title is IT Staff from each city?", "sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "example": {"db_id": "store_1", "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "city", "FROM", "employees", "WHERE", "title", "=", "'IT", "Staff", "'", "GROUP", "BY", "city"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "city", "from", "employees", "where", "title", "=", "value", "group", "by", "city"], "question": "Find the number of employees whose title is IT Staff from each city?", "question_toks": ["Find", "the", "number", "of", "employees", "whose", "title", "is", "IT", "Staff", "from", "each", "city", "?"], "guid": 5541}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | How many accounts does the customer with first name Art and last name Turcotte have?", "sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.customer_first_name", "=", "``", "Art", "''", "AND", "T2.customer_last_name", "=", "``", "Turcotte", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_first_name", "=", "value", "and", "t2", ".", "customer_last_name", "=", "value"], "question": "How many accounts does the customer with first name Art and last name Turcotte have?", "question_toks": ["How", "many", "accounts", "does", "the", "customer", "with", "first", "name", "Art", "and", "last", "name", "Turcotte", "have", "?"], "guid": 5542}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the names of all the tracks that contain the word \"you\".", "sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "example": {"db_id": "chinook_1", "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "query_toks": ["SELECT", "Name", "FROM", "TRACK", "WHERE", "Name", "LIKE", "'", "%", "you", "%", "'"], "query_toks_no_value": ["select", "name", "from", "track", "where", "name", "like", "value"], "question": "Find the names of all the tracks that contain the word \"you\".", "question_toks": ["Find", "the", "names", "of", "all", "the", "tracks", "that", "contain", "the", "word", "``", "you", "''", "."], "guid": 5543}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the name of the customer who made an order most recently.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "ORDER", "BY", "t2.order_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "order", "by", "t2", ".", "order_date", "desc", "limit", "value"], "question": "Find the name of the customer who made an order most recently.", "question_toks": ["Find", "the", "name", "of", "the", "customer", "who", "made", "an", "order", "most", "recently", "."], "guid": 5544}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What are the different district names in order of descending city area?", "sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC", "example": {"db_id": "store_product", "query": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC", "query_toks": ["SELECT", "DISTINCT", "District_name", "FROM", "district", "ORDER", "BY", "city_area", "DESC"], "query_toks_no_value": ["select", "distinct", "district_name", "from", "district", "order", "by", "city_area", "desc"], "question": "What are the different district names in order of descending city area?", "question_toks": ["What", "are", "the", "different", "district", "names", "in", "order", "of", "descending", "city", "area", "?"], "guid": 5545}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show first name and id for all customers with at least 2 accounts.", "sql": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.customer_first_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.customer_first_name", ",", "T1.customer_id", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "customer_first_name", ",", "t1", ".", "customer_id", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show first name and id for all customers with at least 2 accounts.", "question_toks": ["Show", "first", "name", "and", "id", "for", "all", "customers", "with", "at", "least", "2", "accounts", "."], "guid": 5546}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Return the weight of the shortest person.", "sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "example": {"db_id": "entrepreneur", "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "query_toks": ["SELECT", "Weight", "FROM", "people", "ORDER", "BY", "Height", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "weight", "from", "people", "order", "by", "height", "asc", "limit", "value"], "question": "Return the weight of the shortest person.", "question_toks": ["Return", "the", "weight", "of", "the", "shortest", "person", "."], "guid": 5547}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the names, details and data types of the characteristics which are never used by any product?", "sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id", "example": {"db_id": "products_gen_characteristics", "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id", "query_toks": ["SELECT", "characteristic_name", ",", "other_characteristic_details", ",", "characteristic_data_type", "FROM", "CHARACTERISTICS", "EXCEPT", "SELECT", "t1.characteristic_name", ",", "t1.other_characteristic_details", ",", "t1.characteristic_data_type", "FROM", "CHARACTERISTICS", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.characteristic_id", "=", "t2.characteristic_id"], "query_toks_no_value": ["select", "characteristic_name", ",", "other_characteristic_details", ",", "characteristic_data_type", "from", "characteristics", "except", "select", "t1", ".", "characteristic_name", ",", "t1", ".", "other_characteristic_details", ",", "t1", ".", "characteristic_data_type", "from", "characteristics", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "characteristic_id", "=", "t2", ".", "characteristic_id"], "question": "What are the names, details and data types of the characteristics which are never used by any product?", "question_toks": ["What", "are", "the", "names", ",", "details", "and", "data", "types", "of", "the", "characteristics", "which", "are", "never", "used", "by", "any", "product", "?"], "guid": 5548}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the name, phone number and email address for the customer with the most orders.", "sql": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.customer_name", ",", "T1.customer_phone", ",", "T1.customer_email", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T2.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", ",", "t1", ".", "customer_phone", ",", "t1", ".", "customer_email", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the name, phone number and email address for the customer with the most orders.", "question_toks": ["Return", "the", "name", ",", "phone", "number", "and", "email", "address", "for", "the", "customer", "with", "the", "most", "orders", "."], "guid": 5549}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Give the address of the staff member who has the first name Elsa.", "sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'", "example": {"db_id": "sakila_1", "query": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'", "query_toks": ["SELECT", "T2.address", "FROM", "staff", "AS", "T1", "JOIN", "address", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T1.first_name", "=", "'Elsa", "'"], "query_toks_no_value": ["select", "t2", ".", "address", "from", "staff", "as", "t1", "join", "address", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "first_name", "=", "value"], "question": "Give the address of the staff member who has the first name Elsa.", "question_toks": ["Give", "the", "address", "of", "the", "staff", "member", "who", "has", "the", "first", "name", "Elsa", "."], "guid": 5550}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.", "sql": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "DISTINCT", "t1.product_name", "FROM", "products", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "customers", "AS", "t3", "GROUP", "BY", "t3.customer_id", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "distinct", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "customers", "as", "t3", "group", "by", "t3", ".", "customer_id", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.", "question_toks": ["Return", "the", "names", "of", "products", "that", "have", "had", "complaints", "filed", "by", "the", "customer", "who", "has", "filed", "the", "fewest", "complaints", "."], "guid": 5551}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List phone number and email address of customer with more than 2000 outstanding balance.", "sql": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;", "example": {"db_id": "driving_school", "query": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;", "query_toks": ["SELECT", "phone_number", ",", "email_address", "FROM", "Customers", "WHERE", "amount_outstanding", ">", "2000", ";"], "query_toks_no_value": ["select", "phone_number", ",", "email_address", "from", "customers", "where", "amount_outstanding", ">", "value"], "question": "List phone number and email address of customer with more than 2000 outstanding balance.", "question_toks": ["List", "phone", "number", "and", "email", "address", "of", "customer", "with", "more", "than", "2000", "outstanding", "balance", "."], "guid": 5552}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.", "sql": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"", "query_toks": ["SELECT", "address_content", "FROM", "addresses", "WHERE", "city", "=", "``", "East", "Julianaside", "''", "AND", "state_province_county", "=", "``", "Texas", "''", "UNION", "SELECT", "address_content", "FROM", "addresses", "WHERE", "city", "=", "``", "Gleasonmouth", "''", "AND", "state_province_county", "=", "``", "Arizona", "''"], "query_toks_no_value": ["select", "address_content", "from", "addresses", "where", "city", "=", "value", "and", "state_province_county", "=", "value", "union", "select", "address_content", "from", "addresses", "where", "city", "=", "value", "and", "state_province_county", "=", "value"], "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.", "question_toks": ["Find", "all", "the", "addresses", "in", "East", "Julianaside", ",", "Texas", "or", "in", "Gleasonmouth", ",", "Arizona", "."], "guid": 5553}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the average amount purchased and value purchased for the supplier who supplies the most products.", "sql": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "department_store", "query": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "avg", "(", "total_amount_purchased", ")", ",", "avg", "(", "total_value_purchased", ")", "FROM", "Product_Suppliers", "WHERE", "supplier_id", "=", "(", "SELECT", "supplier_id", "FROM", "Product_Suppliers", "GROUP", "BY", "supplier_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "avg", "(", "total_amount_purchased", ")", ",", "avg", "(", "total_value_purchased", ")", "from", "product_suppliers", "where", "supplier_id", "=", "(", "select", "supplier_id", "from", "product_suppliers", "group", "by", "supplier_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What are the average amount purchased and value purchased for the supplier who supplies the most products.", "question_toks": ["What", "are", "the", "average", "amount", "purchased", "and", "value", "purchased", "for", "the", "supplier", "who", "supplies", "the", "most", "products", "."], "guid": 5554}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What is the name and category code of the product with the highest price?", "sql": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1", "query_toks": ["SELECT", "product_name", ",", "product_category_code", "FROM", "products", "ORDER", "BY", "product_price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_name", ",", "product_category_code", "from", "products", "order", "by", "product_price", "desc", "limit", "value"], "question": "What is the name and category code of the product with the highest price?", "question_toks": ["What", "is", "the", "name", "and", "category", "code", "of", "the", "product", "with", "the", "highest", "price", "?"], "guid": 5555}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the total amount of products ordered before 2018-03-17 07:13:53.", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"", "query_toks": ["SELECT", "sum", "(", "t2.order_quantity", ")", "FROM", "customer_orders", "AS", "t1", "JOIN", "order_items", "AS", "t2", "ON", "t1.order_id", "=", "t2.order_id", "WHERE", "t1.order_date", "<", "``", "2018-03-17", "07:13:53", "''"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "order_quantity", ")", "from", "customer_orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t1", ".", "order_date", "<", "value"], "question": "Find the total amount of products ordered before 2018-03-17 07:13:53.", "question_toks": ["Find", "the", "total", "amount", "of", "products", "ordered", "before", "2018-03-17", "07:13:53", "."], "guid": 5556}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the first names and last names of the employees who live in Calgary city.", "sql": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"", "example": {"db_id": "chinook_1", "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"", "query_toks": ["SELECT", "FirstName", ",", "LastName", "FROM", "EMPLOYEE", "WHERE", "City", "=", "``", "Calgary", "''"], "query_toks_no_value": ["select", "firstname", ",", "lastname", "from", "employee", "where", "city", "=", "value"], "question": "What are the first names and last names of the employees who live in Calgary city.", "question_toks": ["What", "are", "the", "first", "names", "and", "last", "names", "of", "the", "employees", "who", "live", "in", "Calgary", "city", "."], "guid": 5557}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?", "sql": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"", "example": {"db_id": "driving_school", "query": "SELECT customer_status_code ,  cell_mobile_phone_number ,  email_address FROM Customers WHERE first_name = \"Marina\" OR last_name  =  \"Kohler\"", "query_toks": ["SELECT", "customer_status_code", ",", "cell_mobile_phone_number", ",", "email_address", "FROM", "Customers", "WHERE", "first_name", "=", "``", "Marina", "''", "OR", "last_name", "=", "``", "Kohler", "''"], "query_toks_no_value": ["select", "customer_status_code", ",", "cell_mobile_phone_number", ",", "email_address", "from", "customers", "where", "first_name", "=", "value", "or", "last_name", "=", "value"], "question": "What is the status code, phone number, and email address of the customer whose last name is Kohler or whose first name is Marina?", "question_toks": ["What", "is", "the", "status", "code", ",", "phone", "number", ",", "and", "email", "address", "of", "the", "customer", "whose", "last", "name", "is", "Kohler", "or", "whose", "first", "name", "is", "Marina", "?"], "guid": 5558}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the different names of the product characteristics?", "sql": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS", "example": {"db_id": "products_gen_characteristics", "query": "SELECT DISTINCT characteristic_name FROM CHARACTERISTICS", "query_toks": ["SELECT", "DISTINCT", "characteristic_name", "FROM", "CHARACTERISTICS"], "query_toks_no_value": ["select", "distinct", "characteristic_name", "from", "characteristics"], "question": "What are the different names of the product characteristics?", "question_toks": ["What", "are", "the", "different", "names", "of", "the", "product", "characteristics", "?"], "guid": 5559}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | How many addresses are there in country USA?", "sql": "SELECT count(*) FROM addresses WHERE country  =  'USA'", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT count(*) FROM addresses WHERE country  =  'USA'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "addresses", "WHERE", "country", "=", "'USA", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "addresses", "where", "country", "=", "value"], "question": "How many addresses are there in country USA?", "question_toks": ["How", "many", "addresses", "are", "there", "in", "country", "USA", "?"], "guid": 5560}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | How many customers have an active value of 1?", "sql": "SELECT count(*) FROM customer WHERE active = '1'", "example": {"db_id": "sakila_1", "query": "SELECT count(*) FROM customer WHERE active = '1'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customer", "WHERE", "active", "=", "'1", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customer", "where", "active", "=", "value"], "question": "How many customers have an active value of 1?", "question_toks": ["How", "many", "customers", "have", "an", "active", "value", "of", "1", "?"], "guid": 5561}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the card numbers of members from Kentucky?", "sql": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"", "example": {"db_id": "shop_membership", "query": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"", "query_toks": ["SELECT", "card_number", "FROM", "member", "WHERE", "Hometown", "LIKE", "``", "%", "Kentucky", "%", "''"], "query_toks_no_value": ["select", "card_number", "from", "member", "where", "hometown", "like", "value"], "question": "What are the card numbers of members from Kentucky?", "question_toks": ["What", "are", "the", "card", "numbers", "of", "members", "from", "Kentucky", "?"], "guid": 5562}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which staff handled least number of payments? List the full name and the id.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T1.staff_id", "FROM", "staff", "AS", "T1", "JOIN", "payment", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "GROUP", "BY", "T1.staff_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t1", ".", "staff_id", "from", "staff", "as", "t1", "join", "payment", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "group", "by", "t1", ".", "staff_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Which staff handled least number of payments? List the full name and the id.", "question_toks": ["Which", "staff", "handled", "least", "number", "of", "payments", "?", "List", "the", "full", "name", "and", "the", "id", "."], "guid": 5563}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Count the number of stores.", "sql": "SELECT count(*) FROM store", "example": {"db_id": "sakila_1", "query": "SELECT count(*) FROM store", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "store"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "store"], "question": "Count the number of stores.", "question_toks": ["Count", "the", "number", "of", "stores", "."], "guid": 5564}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find all the customer last names that do not have invoice totals larger than 20.", "sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20", "example": {"db_id": "chinook_1", "query": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20", "query_toks": ["SELECT", "LastName", "FROM", "CUSTOMER", "EXCEPT", "SELECT", "T1.LastName", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "Invoice", "AS", "T2", "ON", "T1.CustomerId", "=", "T2.CustomerId", "WHERE", "T2.total", ">", "20"], "query_toks_no_value": ["select", "lastname", "from", "customer", "except", "select", "t1", ".", "lastname", "from", "customer", "as", "t1", "join", "invoice", "as", "t2", "on", "t1", ".", "customerid", "=", "t2", ".", "customerid", "where", "t2", ".", "total", ">", "value"], "question": "Find all the customer last names that do not have invoice totals larger than 20.", "question_toks": ["Find", "all", "the", "customer", "last", "names", "that", "do", "not", "have", "invoice", "totals", "larger", "than", "20", "."], "guid": 5565}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | What are the purchase details of transactions with amount bigger than 10000?", "sql": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  >  10000", "query_toks": ["SELECT", "T1.purchase_details", "FROM", "PURCHASES", "AS", "T1", "JOIN", "TRANSACTIONS", "AS", "T2", "ON", "T1.purchase_transaction_id", "=", "T2.transaction_id", "WHERE", "T2.amount_of_transaction", ">", "10000"], "query_toks_no_value": ["select", "t1", ".", "purchase_details", "from", "purchases", "as", "t1", "join", "transactions", "as", "t2", "on", "t1", ".", "purchase_transaction_id", "=", "t2", ".", "transaction_id", "where", "t2", ".", "amount_of_transaction", ">", "value"], "question": "What are the purchase details of transactions with amount bigger than 10000?", "question_toks": ["What", "are", "the", "purchase", "details", "of", "transactions", "with", "amount", "bigger", "than", "10000", "?"], "guid": 5566}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What is the largest and smallest customer codes?", "sql": "SELECT max(customer_code) ,  min(customer_code) FROM Customers", "example": {"db_id": "department_store", "query": "SELECT max(customer_code) ,  min(customer_code) FROM Customers", "query_toks": ["SELECT", "max", "(", "customer_code", ")", ",", "min", "(", "customer_code", ")", "FROM", "Customers"], "query_toks_no_value": ["select", "max", "(", "customer_code", ")", ",", "min", "(", "customer_code", ")", "from", "customers"], "question": "What is the largest and smallest customer codes?", "question_toks": ["What", "is", "the", "largest", "and", "smallest", "customer", "codes", "?"], "guid": 5567}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer ids.", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"", "query_toks": ["SELECT", "T1.customer_id", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "On", "Road", "''", "INTERSECT", "SELECT", "T1.customer_id", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "Shipped", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value", "intersect", "select", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"], "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer ids.", "question_toks": ["Which", "customers", "have", "both", "``", "On", "Road", "''", "and", "``", "Shipped", "''", "as", "order", "status", "?", "List", "the", "customer", "ids", "."], "guid": 5568}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Find the name and category of the most expensive product.", "sql": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT product_name ,  product_category_code FROM products ORDER BY product_price DESC LIMIT 1", "query_toks": ["SELECT", "product_name", ",", "product_category_code", "FROM", "products", "ORDER", "BY", "product_price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_name", ",", "product_category_code", "from", "products", "order", "by", "product_price", "desc", "limit", "value"], "question": "Find the name and category of the most expensive product.", "question_toks": ["Find", "the", "name", "and", "category", "of", "the", "most", "expensive", "product", "."], "guid": 5569}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Return the the details of all products.", "sql": "SELECT DISTINCT product_details FROM products", "example": {"db_id": "customers_and_addresses", "query": "SELECT DISTINCT product_details FROM products", "query_toks": ["SELECT", "DISTINCT", "product_details", "FROM", "products"], "query_toks_no_value": ["select", "distinct", "product_details", "from", "products"], "question": "Return the the details of all products.", "question_toks": ["Return", "the", "the", "details", "of", "all", "products", "."], "guid": 5570}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | For each product, show its name and the number of times it was ordered.", "sql": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "example": {"db_id": "tracking_orders", "query": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id", "query_toks": ["SELECT", "T3.product_name", ",", "count", "(", "*", ")", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "JOIN", "products", "AS", "T3", "ON", "T1.order_id", "=", "T2.order_id", "AND", "T2.product_id", "=", "T3.product_id", "GROUP", "BY", "T3.product_id"], "query_toks_no_value": ["select", "t3", ".", "product_name", ",", "count", "(", "*", ")", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "join", "products", "as", "t3", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "and", "t2", ".", "product_id", "=", "t3", ".", "product_id", "group", "by", "t3", ".", "product_id"], "question": "For each product, show its name and the number of times it was ordered.", "question_toks": ["For", "each", "product", ",", "show", "its", "name", "and", "the", "number", "of", "times", "it", "was", "ordered", "."], "guid": 5571}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | List the description of all the colors.", "sql": "SELECT color_description FROM ref_colors", "example": {"db_id": "products_gen_characteristics", "query": "SELECT color_description FROM ref_colors", "query_toks": ["SELECT", "color_description", "FROM", "ref_colors"], "query_toks_no_value": ["select", "color_description", "from", "ref_colors"], "question": "List the description of all the colors.", "question_toks": ["List", "the", "description", "of", "all", "the", "colors", "."], "guid": 5572}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Give me the product type, name and price for all the products supplied by supplier id 3.", "sql": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3", "example": {"db_id": "department_store", "query": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3", "query_toks": ["SELECT", "T2.product_type_code", ",", "T2.product_name", ",", "T2.product_price", "FROM", "product_suppliers", "AS", "T1", "JOIN", "products", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "WHERE", "T1.supplier_id", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "product_type_code", ",", "t2", ".", "product_name", ",", "t2", ".", "product_price", "from", "product_suppliers", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t1", ".", "supplier_id", "=", "value"], "question": "Give me the product type, name and price for all the products supplied by supplier id 3.", "question_toks": ["Give", "me", "the", "product", "type", ",", "name", "and", "price", "for", "all", "the", "products", "supplied", "by", "supplier", "id", "3", "."], "guid": 5573}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.", "sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"", "example": {"db_id": "entrepreneur", "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"", "query_toks": ["SELECT", "T2.Date_of_Birth", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Investor", "=", "``", "Simon", "Woodroffe", "''", "OR", "T1.Investor", "=", "``", "Peter", "Jones", "''"], "query_toks_no_value": ["select", "t2", ".", "date_of_birth", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "investor", "=", "value", "or", "t1", ".", "investor", "=", "value"], "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.", "question_toks": ["Return", "the", "dates", "of", "birth", "for", "entrepreneurs", "who", "have", "either", "the", "investor", "Simon", "Woodroffe", "or", "Peter", "Jones", "."], "guid": 5574}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Return the lot details and investor ids.", "sql": "SELECT lot_details ,  investor_id FROM LOTS", "example": {"db_id": "tracking_share_transactions", "query": "SELECT lot_details ,  investor_id FROM LOTS", "query_toks": ["SELECT", "lot_details", ",", "investor_id", "FROM", "LOTS"], "query_toks_no_value": ["select", "lot_details", ",", "investor_id", "from", "lots"], "question": "Return the lot details and investor ids.", "question_toks": ["Return", "the", "lot", "details", "and", "investor", "ids", "."], "guid": 5575}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which film actor (actress) starred the most films? List his or her first name, last name and actor id.", "sql": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", ",", "T2.actor_id", "FROM", "film_actor", "AS", "T1", "JOIN", "actor", "AS", "T2", "ON", "T1.actor_id", "=", "T2.actor_id", "GROUP", "BY", "T2.actor_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", ",", "t2", ".", "actor_id", "from", "film_actor", "as", "t1", "join", "actor", "as", "t2", "on", "t1", ".", "actor_id", "=", "t2", ".", "actor_id", "group", "by", "t2", ".", "actor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.", "question_toks": ["Which", "film", "actor", "(", "actress", ")", "starred", "the", "most", "films", "?", "List", "his", "or", "her", "first", "name", ",", "last", "name", "and", "actor", "id", "."], "guid": 5576}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the maximum amount of transaction.", "sql": "SELECT max(amount_of_transaction) FROM TRANSACTIONS", "example": {"db_id": "tracking_share_transactions", "query": "SELECT max(amount_of_transaction) FROM TRANSACTIONS", "query_toks": ["SELECT", "max", "(", "amount_of_transaction", ")", "FROM", "TRANSACTIONS"], "query_toks_no_value": ["select", "max", "(", "amount_of_transaction", ")", "from", "transactions"], "question": "Show the maximum amount of transaction.", "question_toks": ["Show", "the", "maximum", "amount", "of", "transaction", "."], "guid": 5577}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | How many premises are there?", "sql": "SELECT count(*) FROM premises", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT count(*) FROM premises", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "premises"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "premises"], "question": "How many premises are there?", "question_toks": ["How", "many", "premises", "are", "there", "?"], "guid": 5578}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | For each product type, return the maximum and minimum price.", "sql": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code", "example": {"db_id": "department_store", "query": "SELECT product_type_code ,  max(product_price) ,  min(product_price) FROM products GROUP BY product_type_code", "query_toks": ["SELECT", "product_type_code", ",", "max", "(", "product_price", ")", ",", "min", "(", "product_price", ")", "FROM", "products", "GROUP", "BY", "product_type_code"], "query_toks_no_value": ["select", "product_type_code", ",", "max", "(", "product_price", ")", ",", "min", "(", "product_price", ")", "from", "products", "group", "by", "product_type_code"], "question": "For each product type, return the maximum and minimum price.", "question_toks": ["For", "each", "product", "type", ",", "return", "the", "maximum", "and", "minimum", "price", "."], "guid": 5579}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find the total population of the top 3 districts with the largest area.", "sql": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3", "example": {"db_id": "store_product", "query": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3", "query_toks": ["SELECT", "sum", "(", "city_population", ")", "FROM", "district", "ORDER", "BY", "city_area", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "sum", "(", "city_population", ")", "from", "district", "order", "by", "city_area", "desc", "limit", "value"], "question": "Find the total population of the top 3 districts with the largest area.", "question_toks": ["Find", "the", "total", "population", "of", "the", "top", "3", "districts", "with", "the", "largest", "area", "."], "guid": 5580}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | How many characteristics does the product named \"laurel\" have?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "laurel", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value"], "question": "How many characteristics does the product named \"laurel\" have?", "question_toks": ["How", "many", "characteristics", "does", "the", "product", "named", "``", "laurel", "''", "have", "?"], "guid": 5581}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | How many colors are there?", "sql": "SELECT count(*) FROM ref_colors", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM ref_colors", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ref_colors"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_colors"], "question": "How many colors are there?", "question_toks": ["How", "many", "colors", "are", "there", "?"], "guid": 5582}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Return the investors who have invested in two or more entrepreneurs.", "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2", "example": {"db_id": "entrepreneur", "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Investor", "FROM", "entrepreneur", "GROUP", "BY", "Investor", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "investor", "from", "entrepreneur", "group", "by", "investor", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Return the investors who have invested in two or more entrepreneurs.", "question_toks": ["Return", "the", "investors", "who", "have", "invested", "in", "two", "or", "more", "entrepreneurs", "."], "guid": 5583}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show all transaction types.", "sql": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "example": {"db_id": "customers_card_transactions", "query": "SELECT DISTINCT transaction_type FROM Financial_Transactions", "query_toks": ["SELECT", "DISTINCT", "transaction_type", "FROM", "Financial_Transactions"], "query_toks_no_value": ["select", "distinct", "transaction_type", "from", "financial_transactions"], "question": "Show all transaction types.", "question_toks": ["Show", "all", "transaction", "types", "."], "guid": 5584}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What are the names of all the stores in the largest district by population?", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)", "example": {"db_id": "store_product", "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)", "query_toks": ["SELECT", "t1.store_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "WHERE", "district_id", "=", "(", "SELECT", "district_id", "FROM", "district", "ORDER", "BY", "city_population", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t1", ".", "store_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "where", "district_id", "=", "(", "select", "district_id", "from", "district", "order", "by", "city_population", "desc", "limit", "value", ")"], "question": "What are the names of all the stores in the largest district by population?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "stores", "in", "the", "largest", "district", "by", "population", "?"], "guid": 5585}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Return the full name and phone of the customer who has card number 4560596484842.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.card_number  =  \"4560596484842\"", "query_toks": ["SELECT", "T2.customer_first_name", ",", "T2.customer_last_name", ",", "T2.customer_phone", "FROM", "Customers_cards", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.card_number", "=", "``", "4560596484842", "''"], "query_toks_no_value": ["select", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", ",", "t2", ".", "customer_phone", "from", "customers_cards", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "card_number", "=", "value"], "question": "Return the full name and phone of the customer who has card number 4560596484842.", "question_toks": ["Return", "the", "full", "name", "and", "phone", "of", "the", "customer", "who", "has", "card", "number", "4560596484842", "."], "guid": 5586}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is Astrid Gruber's email and phone number?", "sql": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";", "example": {"db_id": "store_1", "query": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\";", "query_toks": ["SELECT", "email", ",", "phone", "FROM", "customers", "WHERE", "first_name", "=", "``", "Astrid", "''", "AND", "last_name", "=", "``", "Gruber", "''", ";"], "query_toks_no_value": ["select", "email", ",", "phone", "from", "customers", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is Astrid Gruber's email and phone number?", "question_toks": ["What", "is", "Astrid", "Gruber", "'s", "email", "and", "phone", "number", "?"], "guid": 5587}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show customer ids who don't have an account.", "sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts", "example": {"db_id": "customers_and_invoices", "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts", "query_toks": ["SELECT", "customer_id", "FROM", "Customers", "EXCEPT", "SELECT", "customer_id", "FROM", "Accounts"], "query_toks_no_value": ["select", "customer_id", "from", "customers", "except", "select", "customer_id", "from", "accounts"], "question": "Show customer ids who don't have an account.", "question_toks": ["Show", "customer", "ids", "who", "do", "n't", "have", "an", "account", "."], "guid": 5588}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many milliseconds long is Fast As a Shark?", "sql": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";", "example": {"db_id": "store_1", "query": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\";", "query_toks": ["SELECT", "milliseconds", "FROM", "tracks", "WHERE", "name", "=", "``", "Fast", "As", "a", "Shark", "''", ";"], "query_toks_no_value": ["select", "milliseconds", "from", "tracks", "where", "name", "=", "value"], "question": "How many milliseconds long is Fast As a Shark?", "question_toks": ["How", "many", "milliseconds", "long", "is", "Fast", "As", "a", "Shark", "?"], "guid": 5589}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | How many different product types are there?", "sql": "SELECT count(DISTINCT product_type_code) FROM products_for_hire", "example": {"db_id": "products_for_hire", "query": "SELECT count(DISTINCT product_type_code) FROM products_for_hire", "query_toks": ["SELECT", "count", "(", "DISTINCT", "product_type_code", ")", "FROM", "products_for_hire"], "query_toks_no_value": ["select", "count", "(", "distinct", "product_type_code", ")", "from", "products_for_hire"], "question": "How many different product types are there?", "question_toks": ["How", "many", "different", "product", "types", "are", "there", "?"], "guid": 5590}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many invoices do we have?", "sql": "SELECT count(*) FROM Invoices", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM Invoices", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Invoices"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "invoices"], "question": "How many invoices do we have?", "question_toks": ["How", "many", "invoices", "do", "we", "have", "?"], "guid": 5591}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers.", "sql": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT town_city FROM customers WHERE customer_type_code  =  \"Good Credit Rating\" GROUP BY town_city ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "town_city", "FROM", "customers", "WHERE", "customer_type_code", "=", "``", "Good", "Credit", "Rating", "''", "GROUP", "BY", "town_city", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "town_city", "from", "customers", "where", "customer_type_code", "=", "value", "group", "by", "town_city", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers.", "question_toks": ["Return", "the", "city", "with", "the", "customer", "type", "code", "``", "Good", "Credit", "Rating", "''", "that", "had", "the", "fewest", "customers", "."], "guid": 5592}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List all tracks bought by customer Daan Peeters.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";", "example": {"db_id": "store_1", "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";", "query_toks": ["SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "invoice_lines", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "invoices", "AS", "T3", "ON", "T3.id", "=", "T2.invoice_id", "JOIN", "customers", "AS", "T4", "ON", "T4.id", "=", "T3.customer_id", "WHERE", "T4.first_name", "=", "``", "Daan", "''", "AND", "T4.last_name", "=", "``", "Peeters", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "invoice_lines", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "invoices", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "invoice_id", "join", "customers", "as", "t4", "on", "t4", ".", "id", "=", "t3", ".", "customer_id", "where", "t4", ".", "first_name", "=", "value", "and", "t4", ".", "last_name", "=", "value"], "question": "List all tracks bought by customer Daan Peeters.", "question_toks": ["List", "all", "tracks", "bought", "by", "customer", "Daan", "Peeters", "."], "guid": 5593}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Find the name and address of the customers who have both New and Pending orders.", "sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"", "example": {"db_id": "department_store", "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"", "query_toks": ["SELECT", "T1.customer_name", ",", "T1.customer_address", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status_code", "=", "``", "New", "''", "INTERSECT", "SELECT", "T1.customer_name", ",", "T1.customer_address", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status_code", "=", "``", "Pending", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", ",", "t1", ".", "customer_address", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status_code", "=", "value", "intersect", "select", "t1", ".", "customer_name", ",", "t1", ".", "customer_address", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status_code", "=", "value"], "question": "Find the name and address of the customers who have both New and Pending orders.", "question_toks": ["Find", "the", "name", "and", "address", "of", "the", "customers", "who", "have", "both", "New", "and", "Pending", "orders", "."], "guid": 5594}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the average price for each product type.", "sql": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code", "example": {"db_id": "department_store", "query": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code", "query_toks": ["SELECT", "product_type_code", ",", "avg", "(", "product_price", ")", "FROM", "products", "GROUP", "BY", "product_type_code"], "query_toks_no_value": ["select", "product_type_code", ",", "avg", "(", "product_price", ")", "from", "products", "group", "by", "product_type_code"], "question": "Return the average price for each product type.", "question_toks": ["Return", "the", "average", "price", "for", "each", "product", "type", "."], "guid": 5595}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show the number of all customers without an account.", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "Accounts", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "accounts", ")"], "question": "Show the number of all customers without an account.", "question_toks": ["Show", "the", "number", "of", "all", "customers", "without", "an", "account", "."], "guid": 5596}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find the name and population of district with population between 200000 and 2000000", "sql": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000", "example": {"db_id": "store_product", "query": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000", "query_toks": ["SELECT", "District_name", ",", "City_Population", "FROM", "district", "WHERE", "City_Population", "BETWEEN", "200000", "AND", "2000000"], "query_toks_no_value": ["select", "district_name", ",", "city_population", "from", "district", "where", "city_population", "between", "value", "and", "value"], "question": "Find the name and population of district with population between 200000 and 2000000", "question_toks": ["Find", "the", "name", "and", "population", "of", "district", "with", "population", "between", "200000", "and", "2000000"], "guid": 5597}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What is the customer id of the customer who has the most orders?", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.customer_id", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the customer id of the customer who has the most orders?", "question_toks": ["What", "is", "the", "customer", "id", "of", "the", "customer", "who", "has", "the", "most", "orders", "?"], "guid": 5598}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the product ids and color descriptions for products with two or more characteristics?", "sql": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "t1.product_id", ",", "t2.color_description", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "JOIN", "product_characteristics", "AS", "t3", "ON", "t1.product_id", "=", "t3.product_id", "GROUP", "BY", "t1.product_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "product_id", ",", "t2", ".", "color_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "join", "product_characteristics", "as", "t3", "on", "t1", ".", "product_id", "=", "t3", ".", "product_id", "group", "by", "t1", ".", "product_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the product ids and color descriptions for products with two or more characteristics?", "question_toks": ["What", "are", "the", "product", "ids", "and", "color", "descriptions", "for", "products", "with", "two", "or", "more", "characteristics", "?"], "guid": 5599}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the state and country of all the cities that have post codes starting with 4.\\", "sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"", "query_toks": ["SELECT", "state_province_county", ",", "country", "FROM", "addresses", "WHERE", "zip_postcode", "LIKE", "``", "4", "%", "''"], "query_toks_no_value": ["select", "state_province_county", ",", "country", "from", "addresses", "where", "zip_postcode", "like", "value"], "question": "What are the state and country of all the cities that have post codes starting with 4.\\", "question_toks": ["What", "are", "the", "state", "and", "country", "of", "all", "the", "cities", "that", "have", "post", "codes", "starting", "with", "4.\\"], "guid": 5600}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | Find the types and details for all premises and order by the premise type.", "sql": "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT premises_type ,  premise_details FROM premises ORDER BY premises_type", "query_toks": ["SELECT", "premises_type", ",", "premise_details", "FROM", "premises", "ORDER", "BY", "premises_type"], "query_toks_no_value": ["select", "premises_type", ",", "premise_details", "from", "premises", "order", "by", "premises_type"], "question": "Find the types and details for all premises and order by the premise type.", "question_toks": ["Find", "the", "types", "and", "details", "for", "all", "premises", "and", "order", "by", "the", "premise", "type", "."], "guid": 5601}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | For which countries are there more than four distinct addresses listed?", "sql": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4", "example": {"db_id": "customers_and_addresses", "query": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4", "query_toks": ["SELECT", "country", "FROM", "addresses", "GROUP", "BY", "country", "HAVING", "count", "(", "address_id", ")", ">", "4"], "query_toks_no_value": ["select", "country", "from", "addresses", "group", "by", "country", "having", "count", "(", "address_id", ")", ">", "value"], "question": "For which countries are there more than four distinct addresses listed?", "question_toks": ["For", "which", "countries", "are", "there", "more", "than", "four", "distinct", "addresses", "listed", "?"], "guid": 5602}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Return the channel code and contact number of the customer contact channel whose active duration was the longest.", "sql": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)", "example": {"db_id": "customers_and_addresses", "query": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)", "query_toks": ["SELECT", "channel_code", ",", "contact_number", "FROM", "customer_contact_channels", "WHERE", "active_to_date", "-", "active_from_date", "=", "(", "SELECT", "active_to_date", "-", "active_from_date", "FROM", "customer_contact_channels", "ORDER", "BY", "(", "active_to_date", "-", "active_from_date", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "channel_code", ",", "contact_number", "from", "customer_contact_channels", "where", "active_to_date", "-", "active_from_date", "=", "(", "select", "active_to_date", "-", "active_from_date", "from", "customer_contact_channels", "order", "by", "(", "active_to_date", "-", "active_from_date", ")", "desc", "limit", "value", ")"], "question": "Return the channel code and contact number of the customer contact channel whose active duration was the longest.", "question_toks": ["Return", "the", "channel", "code", "and", "contact", "number", "of", "the", "customer", "contact", "channel", "whose", "active", "duration", "was", "the", "longest", "."], "guid": 5603}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | Find the states which do not have any employee in their record.", "sql": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)", "example": {"db_id": "customer_deliveries", "query": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)", "query_toks": ["SELECT", "state_province_county", "FROM", "addresses", "WHERE", "address_id", "NOT", "IN", "(", "SELECT", "employee_address_id", "FROM", "Employees", ")"], "query_toks_no_value": ["select", "state_province_county", "from", "addresses", "where", "address_id", "not", "in", "(", "select", "employee_address_id", "from", "employees", ")"], "question": "Find the states which do not have any employee in their record.", "question_toks": ["Find", "the", "states", "which", "do", "not", "have", "any", "employee", "in", "their", "record", "."], "guid": 5604}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What is the least common media type in all tracks?", "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "example": {"db_id": "chinook_1", "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.Name", "FROM", "MEDIATYPE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.MediaTypeId", "=", "T2.MediaTypeId", "GROUP", "BY", "T2.MediaTypeId", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "mediatype", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "mediatypeid", "=", "t2", ".", "mediatypeid", "group", "by", "t2", ".", "mediatypeid", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the least common media type in all tracks?", "question_toks": ["What", "is", "the", "least", "common", "media", "type", "in", "all", "tracks", "?"], "guid": 5605}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the name and active date of the customers whose contact channel code is email?", "sql": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'", "query_toks": ["SELECT", "t1.customer_name", ",", "t2.active_from_date", "FROM", "customers", "AS", "t1", "JOIN", "customer_contact_channels", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t2.channel_code", "=", "'Email", "'"], "query_toks_no_value": ["select", "t1", ".", "customer_name", ",", "t2", ".", "active_from_date", "from", "customers", "as", "t1", "join", "customer_contact_channels", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "channel_code", "=", "value"], "question": "What are the name and active date of the customers whose contact channel code is email?", "question_toks": ["What", "are", "the", "name", "and", "active", "date", "of", "the", "customers", "whose", "contact", "channel", "code", "is", "email", "?"], "guid": 5606}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is title of album which track Balls to the Wall belongs to?", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";", "example": {"db_id": "store_1", "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";", "query_toks": ["SELECT", "T1.title", "FROM", "albums", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "WHERE", "T2.name", "=", "``", "Balls", "to", "the", "Wall", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "albums", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "where", "t2", ".", "name", "=", "value"], "question": "What is title of album which track Balls to the Wall belongs to?", "question_toks": ["What", "is", "title", "of", "album", "which", "track", "Balls", "to", "the", "Wall", "belongs", "to", "?"], "guid": 5607}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Find the average price of all product clothes.", "sql": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'", "example": {"db_id": "department_store", "query": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'", "query_toks": ["SELECT", "avg", "(", "product_price", ")", "FROM", "products", "WHERE", "product_type_code", "=", "'Clothes", "'"], "query_toks_no_value": ["select", "avg", "(", "product_price", ")", "from", "products", "where", "product_type_code", "=", "value"], "question": "Find the average price of all product clothes.", "question_toks": ["Find", "the", "average", "price", "of", "all", "product", "clothes", "."], "guid": 5608}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Give the names, details, and data types of characteristics that are not found in any product.", "sql": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id", "example": {"db_id": "products_gen_characteristics", "query": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id", "query_toks": ["SELECT", "characteristic_name", ",", "other_characteristic_details", ",", "characteristic_data_type", "FROM", "CHARACTERISTICS", "EXCEPT", "SELECT", "t1.characteristic_name", ",", "t1.other_characteristic_details", ",", "t1.characteristic_data_type", "FROM", "CHARACTERISTICS", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.characteristic_id", "=", "t2.characteristic_id"], "query_toks_no_value": ["select", "characteristic_name", ",", "other_characteristic_details", ",", "characteristic_data_type", "from", "characteristics", "except", "select", "t1", ".", "characteristic_name", ",", "t1", ".", "other_characteristic_details", ",", "t1", ".", "characteristic_data_type", "from", "characteristics", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "characteristic_id", "=", "t2", ".", "characteristic_id"], "question": "Give the names, details, and data types of characteristics that are not found in any product.", "question_toks": ["Give", "the", "names", ",", "details", ",", "and", "data", "types", "of", "characteristics", "that", "are", "not", "found", "in", "any", "product", "."], "guid": 5609}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What city does the employee who helps the customer with postal code 70174 live in?", "sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"", "example": {"db_id": "chinook_1", "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"", "query_toks": ["SELECT", "T2.City", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "EMPLOYEE", "AS", "T2", "ON", "T1.SupportRepId", "=", "T2.EmployeeId", "WHERE", "T1.PostalCode", "=", "``", "70174", "''"], "query_toks_no_value": ["select", "t2", ".", "city", "from", "customer", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "supportrepid", "=", "t2", ".", "employeeid", "where", "t1", ".", "postalcode", "=", "value"], "question": "What city does the employee who helps the customer with postal code 70174 live in?", "question_toks": ["What", "city", "does", "the", "employee", "who", "helps", "the", "customer", "with", "postal", "code", "70174", "live", "in", "?"], "guid": 5610}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | How many customers are there in the customer type with the most customers?", "sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "GROUP", "BY", "customer_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "group", "by", "customer_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "How many customers are there in the customer type with the most customers?", "question_toks": ["How", "many", "customers", "are", "there", "in", "the", "customer", "type", "with", "the", "most", "customers", "?"], "guid": 5611}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What are the full names of actors who had roles in more than 30 films?", "sql": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30", "example": {"db_id": "sakila_1", "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "film_actor", "AS", "T1", "JOIN", "actor", "AS", "T2", "ON", "T1.actor_id", "=", "T2.actor_id", "GROUP", "BY", "T2.actor_id", "HAVING", "count", "(", "*", ")", ">", "30"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "film_actor", "as", "t1", "join", "actor", "as", "t2", "on", "t1", ".", "actor_id", "=", "t2", ".", "actor_id", "group", "by", "t2", ".", "actor_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the full names of actors who had roles in more than 30 films?", "question_toks": ["What", "are", "the", "full", "names", "of", "actors", "who", "had", "roles", "in", "more", "than", "30", "films", "?"], "guid": 5612}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | A list of the top 10 countries by average invoice size. List country name and average invoice size.", "sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;", "example": {"db_id": "store_1", "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;", "query_toks": ["SELECT", "billing_country", ",", "AVG", "(", "total", ")", "FROM", "invoices", "GROUP", "BY", "billing_country", "ORDER", "BY", "AVG", "(", "total", ")", "DESC", "LIMIT", "10", ";"], "query_toks_no_value": ["select", "billing_country", ",", "avg", "(", "total", ")", "from", "invoices", "group", "by", "billing_country", "order", "by", "avg", "(", "total", ")", "desc", "limit", "value"], "question": "A list of the top 10 countries by average invoice size. List country name and average invoice size.", "question_toks": ["A", "list", "of", "the", "top", "10", "countries", "by", "average", "invoice", "size", ".", "List", "country", "name", "and", "average", "invoice", "size", "."], "guid": 5613}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Count the number of colors that are not used in any products.", "sql": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Ref_colors", "WHERE", "color_code", "NOT", "IN", "(", "SELECT", "color_code", "FROM", "products", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_colors", "where", "color_code", "not", "in", "(", "select", "color_code", "from", "products", ")"], "question": "Count the number of colors that are not used in any products.", "question_toks": ["Count", "the", "number", "of", "colors", "that", "are", "not", "used", "in", "any", "products", "."], "guid": 5614}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the full names of employees living in the city of Calgary.", "sql": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"", "example": {"db_id": "chinook_1", "query": "SELECT FirstName ,  LastName FROM EMPLOYEE WHERE City  =  \"Calgary\"", "query_toks": ["SELECT", "FirstName", ",", "LastName", "FROM", "EMPLOYEE", "WHERE", "City", "=", "``", "Calgary", "''"], "query_toks_no_value": ["select", "firstname", ",", "lastname", "from", "employee", "where", "city", "=", "value"], "question": "Find the full names of employees living in the city of Calgary.", "question_toks": ["Find", "the", "full", "names", "of", "employees", "living", "in", "the", "city", "of", "Calgary", "."], "guid": 5615}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?", "sql": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "example": {"db_id": "entrepreneur", "query": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000", "query_toks": ["SELECT", "Investor", "FROM", "entrepreneur", "WHERE", "Money_Requested", ">", "140000", "INTERSECT", "SELECT", "Investor", "FROM", "entrepreneur", "WHERE", "Money_Requested", "<", "120000"], "query_toks_no_value": ["select", "investor", "from", "entrepreneur", "where", "money_requested", ">", "value", "intersect", "select", "investor", "from", "entrepreneur", "where", "money_requested", "<", "value"], "question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?", "question_toks": ["What", "are", "the", "investors", "who", "have", "invested", "in", "both", "entrepreneurs", "who", "requested", "more", "than", "140000", "and", "entrepreneurs", "who", "requested", "less", "than", "120000", "?"], "guid": 5616}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show all card type codes and the number of cards in each type.", "sql": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code", "example": {"db_id": "customers_card_transactions", "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code", "query_toks": ["SELECT", "card_type_code", ",", "count", "(", "*", ")", "FROM", "Customers_cards", "GROUP", "BY", "card_type_code"], "query_toks_no_value": ["select", "card_type_code", ",", "count", "(", "*", ")", "from", "customers_cards", "group", "by", "card_type_code"], "question": "Show all card type codes and the number of cards in each type.", "question_toks": ["Show", "all", "card", "type", "codes", "and", "the", "number", "of", "cards", "in", "each", "type", "."], "guid": 5617}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Count the number of tracks that are of the media type \"AAC audio file\".", "sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"", "example": {"db_id": "chinook_1", "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "MEDIATYPE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.MediaTypeId", "=", "T2.MediaTypeId", "WHERE", "T1.Name", "=", "``", "AAC", "audio", "file", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "mediatype", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "mediatypeid", "=", "t2", ".", "mediatypeid", "where", "t1", ".", "name", "=", "value"], "question": "Count the number of tracks that are of the media type \"AAC audio file\".", "question_toks": ["Count", "the", "number", "of", "tracks", "that", "are", "of", "the", "media", "type", "``", "AAC", "audio", "file", "''", "."], "guid": 5618}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Which complaint status has more than 3 records on file?", "sql": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3", "example": {"db_id": "customer_complaints", "query": "SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING count(*)  >  3", "query_toks": ["SELECT", "complaint_status_code", "FROM", "complaints", "GROUP", "BY", "complaint_status_code", "HAVING", "count", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "complaint_status_code", "from", "complaints", "group", "by", "complaint_status_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Which complaint status has more than 3 records on file?", "question_toks": ["Which", "complaint", "status", "has", "more", "than", "3", "records", "on", "file", "?"], "guid": 5619}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What is first names of the top 5 staff who have handled the greatest number of complaints?", "sql": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5", "example": {"db_id": "customer_complaints", "query": "SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id GROUP BY t2.staff_id ORDER BY count(*) LIMIT 5", "query_toks": ["SELECT", "t1.first_name", "FROM", "staff", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.staff_id", "=", "t2.staff_id", "GROUP", "BY", "t2.staff_id", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "5"], "query_toks_no_value": ["select", "t1", ".", "first_name", "from", "staff", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "group", "by", "t2", ".", "staff_id", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What is first names of the top 5 staff who have handled the greatest number of complaints?", "question_toks": ["What", "is", "first", "names", "of", "the", "top", "5", "staff", "who", "have", "handled", "the", "greatest", "number", "of", "complaints", "?"], "guid": 5620}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.", "sql": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;", "example": {"db_id": "store_1", "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "COUNT", "(", "*", ")", "FROM", "customers", "AS", "T1", "JOIN", "invoices", "AS", "T2", "ON", "T2.customer_id", "=", "T1.id", "GROUP", "BY", "T1.id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "10", ";"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "count", "(", "*", ")", "from", "customers", "as", "t1", "join", "invoices", "as", "t2", "on", "t2", ".", "customer_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.", "question_toks": ["Find", "out", "the", "top", "10", "customers", "by", "total", "number", "of", "orders", ".", "List", "customers", "'", "first", "and", "last", "name", "and", "the", "number", "of", "total", "orders", "."], "guid": 5621}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | List all the distinct cities", "sql": "SELECT DISTINCT city FROM addresses", "example": {"db_id": "customers_and_addresses", "query": "SELECT DISTINCT city FROM addresses", "query_toks": ["SELECT", "DISTINCT", "city", "FROM", "addresses"], "query_toks_no_value": ["select", "distinct", "city", "from", "addresses"], "question": "List all the distinct cities", "question_toks": ["List", "all", "the", "distinct", "cities"], "guid": 5622}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What is the product category description and unit of measurement of category \"Herbs\"?", "sql": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_category_description ,  unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"", "query_toks": ["SELECT", "product_category_description", ",", "unit_of_measure", "FROM", "ref_product_categories", "WHERE", "product_category_code", "=", "``", "Herbs", "''"], "query_toks_no_value": ["select", "product_category_description", ",", "unit_of_measure", "from", "ref_product_categories", "where", "product_category_code", "=", "value"], "question": "What is the product category description and unit of measurement of category \"Herbs\"?", "question_toks": ["What", "is", "the", "product", "category", "description", "and", "unit", "of", "measurement", "of", "category", "``", "Herbs", "''", "?"], "guid": 5623}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What are the id and the amount of refund of the booking that incurred the most times of payments?", "sql": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "products_for_hire", "query": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.booking_id", ",", "T1.amount_of_refund", "FROM", "Bookings", "AS", "T1", "JOIN", "Payments", "AS", "T2", "ON", "T1.booking_id", "=", "T2.booking_id", "GROUP", "BY", "T1.booking_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "booking_id", ",", "t1", ".", "amount_of_refund", "from", "bookings", "as", "t1", "join", "payments", "as", "t2", "on", "t1", ".", "booking_id", "=", "t2", ".", "booking_id", "group", "by", "t1", ".", "booking_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?", "question_toks": ["What", "are", "the", "id", "and", "the", "amount", "of", "refund", "of", "the", "booking", "that", "incurred", "the", "most", "times", "of", "payments", "?"], "guid": 5624}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the different billing countries for all invoices.", "sql": "SELECT distinct(BillingCountry) FROM INVOICE", "example": {"db_id": "chinook_1", "query": "SELECT distinct(BillingCountry) FROM INVOICE", "query_toks": ["SELECT", "distinct", "(", "BillingCountry", ")", "FROM", "INVOICE"], "query_toks_no_value": ["select", "distinct", "(", "billingcountry", ")", "from", "invoice"], "question": "Find the different billing countries for all invoices.", "question_toks": ["Find", "the", "different", "billing", "countries", "for", "all", "invoices", "."], "guid": 5625}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Return the last name, id and phone number of the customer who has made the greatest number of orders.", "sql": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.customer_last_name ,  T1.customer_id ,  T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.customer_last_name", ",", "T1.customer_id", ",", "T2.phone_number", "FROM", "Orders", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "customer_last_name", ",", "t1", ".", "customer_id", ",", "t2", ".", "phone_number", "from", "orders", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.", "question_toks": ["Return", "the", "last", "name", ",", "id", "and", "phone", "number", "of", "the", "customer", "who", "has", "made", "the", "greatest", "number", "of", "orders", "."], "guid": 5626}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.date_order_placed", ">", "=", "``", "2009-01-01", "''", "AND", "T2.date_order_placed", "<", "=", "``", "2010-01-01", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "date_order_placed", ">", "=", "value", "and", "t2", ".", "date_order_placed", "<", "=", "value"], "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.", "question_toks": ["Which", "customers", "made", "orders", "between", "2009-01-01", "and", "2010-01-01", "?", "Find", "their", "names", "."], "guid": 5627}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many employees have a first name of Ludie?", "sql": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Staff WHERE first_name = \"Ludie\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Staff", "WHERE", "first_name", "=", "``", "Ludie", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "staff", "where", "first_name", "=", "value"], "question": "How many employees have a first name of Ludie?", "question_toks": ["How", "many", "employees", "have", "a", "first", "name", "of", "Ludie", "?"], "guid": 5628}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | How many items in inventory does store 1 have?", "sql": "SELECT count(*) FROM inventory WHERE store_id  =  1", "example": {"db_id": "sakila_1", "query": "SELECT count(*) FROM inventory WHERE store_id  =  1", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "inventory", "WHERE", "store_id", "=", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "inventory", "where", "store_id", "=", "value"], "question": "How many items in inventory does store 1 have?", "question_toks": ["How", "many", "items", "in", "inventory", "does", "store", "1", "have", "?"], "guid": 5629}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What is the id of the department with the least number of staff?", "sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "department_id", "FROM", "staff_department_assignments", "GROUP", "BY", "department_id", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "department_id", "from", "staff_department_assignments", "group", "by", "department_id", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What is the id of the department with the least number of staff?", "question_toks": ["What", "is", "the", "id", "of", "the", "department", "with", "the", "least", "number", "of", "staff", "?"], "guid": 5630}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What is the total number of purchases for members with level 6?", "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6", "example": {"db_id": "shop_membership", "query": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "purchase", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.member_id", "=", "T2.member_id", "WHERE", "T2.level", "=", "6"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "purchase", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "where", "t2", ".", "level", "=", "value"], "question": "What is the total number of purchases for members with level 6?", "question_toks": ["What", "is", "the", "total", "number", "of", "purchases", "for", "members", "with", "level", "6", "?"], "guid": 5631}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How much money did Lucas Mancini spend?", "sql": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";", "example": {"db_id": "store_1", "query": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";", "query_toks": ["SELECT", "sum", "(", "T2.total", ")", "FROM", "customers", "AS", "T1", "JOIN", "invoices", "AS", "T2", "ON", "T1.id", "=", "T2.customer_id", "WHERE", "T1.first_name", "=", "``", "Lucas", "''", "AND", "T1.last_name", "=", "``", "Mancini", "''", ";"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "total", ")", "from", "customers", "as", "t1", "join", "invoices", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "customer_id", "where", "t1", ".", "first_name", "=", "value", "and", "t1", ".", "last_name", "=", "value"], "question": "How much money did Lucas Mancini spend?", "question_toks": ["How", "much", "money", "did", "Lucas", "Mancini", "spend", "?"], "guid": 5632}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | How many products are there?", "sql": "SELECT count(*) FROM products", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products"], "question": "How many products are there?", "question_toks": ["How", "many", "products", "are", "there", "?"], "guid": 5633}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | Show the customer name, customer address city, date from, and date to for each customer address history.", "sql": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id", "query_toks": ["SELECT", "T2.customer_name", ",", "T3.city", ",", "T1.date_from", ",", "T1.date_to", "FROM", "customer_address_history", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "JOIN", "addresses", "AS", "T3", "ON", "T1.address_id", "=", "T3.address_id"], "query_toks_no_value": ["select", "t2", ".", "customer_name", ",", "t3", ".", "city", ",", "t1", ".", "date_from", ",", "t1", ".", "date_to", "from", "customer_address_history", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t1", ".", "address_id", "=", "t3", ".", "address_id"], "question": "Show the customer name, customer address city, date from, and date to for each customer address history.", "question_toks": ["Show", "the", "customer", "name", ",", "customer", "address", "city", ",", "date", "from", ",", "and", "date", "to", "for", "each", "customer", "address", "history", "."], "guid": 5634}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How much in total does customer with first name as Carole and last name as Bernhard paid?", "sql": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"", "example": {"db_id": "driving_school", "query": "SELECT sum(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = \"Carole\" AND T2.last_name = \"Bernhard\"", "query_toks": ["SELECT", "sum", "(", "T1.amount_payment", ")", "FROM", "Customer_Payments", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.first_name", "=", "``", "Carole", "''", "AND", "T2.last_name", "=", "``", "Bernhard", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "amount_payment", ")", "from", "customer_payments", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "How much in total does customer with first name as Carole and last name as Bernhard paid?", "question_toks": ["How", "much", "in", "total", "does", "customer", "with", "first", "name", "as", "Carole", "and", "last", "name", "as", "Bernhard", "paid", "?"], "guid": 5635}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the number of albums by the artist \"Metallica\".", "sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"", "example": {"db_id": "chinook_1", "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "ALBUM", "AS", "T1", "JOIN", "ARTIST", "AS", "T2", "ON", "T1.ArtistId", "=", "T2.ArtistId", "WHERE", "T2.Name", "=", "``", "Metallica", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "album", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artistid", "=", "t2", ".", "artistid", "where", "t2", ".", "name", "=", "value"], "question": "Find the number of albums by the artist \"Metallica\".", "question_toks": ["Find", "the", "number", "of", "albums", "by", "the", "artist", "``", "Metallica", "''", "."], "guid": 5636}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Which catalog publisher has published the most catalogs?", "sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "product_catalog", "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "catalog_publisher", "FROM", "catalogs", "GROUP", "BY", "catalog_publisher", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "catalog_publisher", "from", "catalogs", "group", "by", "catalog_publisher", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which catalog publisher has published the most catalogs?", "question_toks": ["Which", "catalog", "publisher", "has", "published", "the", "most", "catalogs", "?"], "guid": 5637}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | List the state names and the number of customers living in each state.", "sql": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county", "example": {"db_id": "customer_deliveries", "query": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county", "query_toks": ["SELECT", "t2.state_province_county", ",", "count", "(", "*", ")", "FROM", "customer_addresses", "AS", "t1", "JOIN", "addresses", "AS", "t2", "ON", "t1.address_id", "=", "t2.address_id", "GROUP", "BY", "t2.state_province_county"], "query_toks_no_value": ["select", "t2", ".", "state_province_county", ",", "count", "(", "*", ")", "from", "customer_addresses", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "group", "by", "t2", ".", "state_province_county"], "question": "List the state names and the number of customers living in each state.", "question_toks": ["List", "the", "state", "names", "and", "the", "number", "of", "customers", "living", "in", "each", "state", "."], "guid": 5638}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the names of staff who have been assigned multiple jobs?", "sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1", "example": {"db_id": "department_store", "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1", "query_toks": ["SELECT", "T1.staff_name", "FROM", "staff", "AS", "T1", "JOIN", "staff_department_assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "GROUP", "BY", "T2.staff_id", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "staff_name", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "group", "by", "t2", ".", "staff_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the names of staff who have been assigned multiple jobs?", "question_toks": ["What", "are", "the", "names", "of", "staff", "who", "have", "been", "assigned", "multiple", "jobs", "?"], "guid": 5639}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many albums has Billy Cobam released?", "sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";", "example": {"db_id": "store_1", "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "albums", "AS", "T1", "JOIN", "artists", "AS", "T2", "ON", "T1.artist_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Billy", "Cobham", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "albums", "as", "t1", "join", "artists", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "How many albums has Billy Cobam released?", "question_toks": ["How", "many", "albums", "has", "Billy", "Cobam", "released", "?"], "guid": 5640}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental.", "sql": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'", "example": {"db_id": "sakila_1", "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'", "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T1.last_name", "FROM", "staff", "AS", "T1", "JOIN", "rental", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "JOIN", "customer", "AS", "T3", "ON", "T2.customer_id", "=", "T3.customer_id", "WHERE", "T3.first_name", "=", "'APRIL", "'", "AND", "T3.last_name", "=", "'BURNS", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "staff", "as", "t1", "join", "rental", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "join", "customer", "as", "t3", "on", "t2", ".", "customer_id", "=", "t3", ".", "customer_id", "where", "t3", ".", "first_name", "=", "value", "and", "t3", ".", "last_name", "=", "value"], "question": "Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental.", "question_toks": ["Return", "the", "full", "name", "of", "the", "staff", "who", "provided", "a", "customer", "with", "the", "first", "name", "April", "and", "the", "last", "name", "Burns", "with", "a", "film", "rental", "."], "guid": 5641}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the names of customers who live in Colorado state?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_addresses", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "addresses", "AS", "t3", "ON", "t2.address_id", "=", "t3.address_id", "WHERE", "t3.state_province_county", "=", "``", "Colorado", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", "where", "t3", ".", "state_province_county", "=", "value"], "question": "What are the names of customers who live in Colorado state?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "live", "in", "Colorado", "state", "?"], "guid": 5642}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | On which day was the order placed whose shipment tracking number is 3452?", "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452", "example": {"db_id": "tracking_orders", "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452", "query_toks": ["SELECT", "T1.date_order_placed", "FROM", "orders", "AS", "T1", "JOIN", "shipments", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "WHERE", "T2.shipment_tracking_number", "=", "3452"], "query_toks_no_value": ["select", "t1", ".", "date_order_placed", "from", "orders", "as", "t1", "join", "shipments", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t2", ".", "shipment_tracking_number", "=", "value"], "question": "On which day was the order placed whose shipment tracking number is 3452?", "question_toks": ["On", "which", "day", "was", "the", "order", "placed", "whose", "shipment", "tracking", "number", "is", "3452", "?"], "guid": 5643}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Which catalog content has the smallest capacity? Return the catalog entry name.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1", "query_toks": ["SELECT", "catalog_entry_name", "FROM", "catalog_contents", "ORDER", "BY", "capacity", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "catalog_entry_name", "from", "catalog_contents", "order", "by", "capacity", "asc", "limit", "value"], "question": "Which catalog content has the smallest capacity? Return the catalog entry name.", "question_toks": ["Which", "catalog", "content", "has", "the", "smallest", "capacity", "?", "Return", "the", "catalog", "entry", "name", "."], "guid": 5644}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | Who is the composer of track Fast As a Shark?", "sql": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";", "example": {"db_id": "store_1", "query": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";", "query_toks": ["SELECT", "composer", "FROM", "tracks", "WHERE", "name", "=", "``", "Fast", "As", "a", "Shark", "''", ";"], "query_toks_no_value": ["select", "composer", "from", "tracks", "where", "name", "=", "value"], "question": "Who is the composer of track Fast As a Shark?", "question_toks": ["Who", "is", "the", "composer", "of", "track", "Fast", "As", "a", "Shark", "?"], "guid": 5645}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the top 5 genres by number of tracks. List genres name and total tracks.", "sql": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "example": {"db_id": "store_1", "query": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5;", "query_toks": ["SELECT", "T1.name", ",", "COUNT", "(", "*", ")", "FROM", "genres", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T2.genre_id", "=", "T1.id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "5", ";"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "genres", "as", "t1", "join", "tracks", "as", "t2", "on", "t2", ".", "genre_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the top 5 genres by number of tracks. List genres name and total tracks.", "question_toks": ["List", "the", "top", "5", "genres", "by", "number", "of", "tracks", ".", "List", "genres", "name", "and", "total", "tracks", "."], "guid": 5646}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the total number of catalog contents.", "sql": "SELECT count(*) FROM catalog_contents", "example": {"db_id": "product_catalog", "query": "SELECT count(*) FROM catalog_contents", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "catalog_contents"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "catalog_contents"], "question": "Find the total number of catalog contents.", "question_toks": ["Find", "the", "total", "number", "of", "catalog", "contents", "."], "guid": 5647}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the names of customers using the most popular payment method?", "sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "WHERE", "payment_method", "=", "(", "SELECT", "payment_method", "FROM", "customers", "GROUP", "BY", "payment_method", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "where", "payment_method", "=", "(", "select", "payment_method", "from", "customers", "group", "by", "payment_method", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What are the names of customers using the most popular payment method?", "question_toks": ["What", "are", "the", "names", "of", "customers", "using", "the", "most", "popular", "payment", "method", "?"], "guid": 5648}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Count the number of characteristics.", "sql": "SELECT count(*) FROM CHARACTERISTICS", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM CHARACTERISTICS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CHARACTERISTICS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "characteristics"], "question": "Count the number of characteristics.", "question_toks": ["Count", "the", "number", "of", "characteristics", "."], "guid": 5649}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the distinct billing countries of the invoices?", "sql": "SELECT distinct(BillingCountry) FROM INVOICE", "example": {"db_id": "chinook_1", "query": "SELECT distinct(BillingCountry) FROM INVOICE", "query_toks": ["SELECT", "distinct", "(", "BillingCountry", ")", "FROM", "INVOICE"], "query_toks_no_value": ["select", "distinct", "(", "billingcountry", ")", "from", "invoice"], "question": "What are the distinct billing countries of the invoices?", "question_toks": ["What", "are", "the", "distinct", "billing", "countries", "of", "the", "invoices", "?"], "guid": 5650}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | For each city, how many branches opened before 2010?", "sql": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city", "example": {"db_id": "shop_membership", "query": "SELECT city ,  count(*) FROM branch WHERE open_year  <  2010 GROUP BY city", "query_toks": ["SELECT", "city", ",", "count", "(", "*", ")", "FROM", "branch", "WHERE", "open_year", "<", "2010", "GROUP", "BY", "city"], "query_toks_no_value": ["select", "city", ",", "count", "(", "*", ")", "from", "branch", "where", "open_year", "<", "value", "group", "by", "city"], "question": "For each city, how many branches opened before 2010?", "question_toks": ["For", "each", "city", ",", "how", "many", "branches", "opened", "before", "2010", "?"], "guid": 5651}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the id and details for the investors who have the top 3 number of transactions.", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3", "query_toks": ["SELECT", "T2.investor_id", ",", "T1.Investor_details", "FROM", "INVESTORS", "AS", "T1", "JOIN", "TRANSACTIONS", "AS", "T2", "ON", "T1.investor_id", "=", "T2.investor_id", "GROUP", "BY", "T2.investor_id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "t2", ".", "investor_id", ",", "t1", ".", "investor_details", "from", "investors", "as", "t1", "join", "transactions", "as", "t2", "on", "t1", ".", "investor_id", "=", "t2", ".", "investor_id", "group", "by", "t2", ".", "investor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the id and details for the investors who have the top 3 number of transactions.", "question_toks": ["Show", "the", "id", "and", "details", "for", "the", "investors", "who", "have", "the", "top", "3", "number", "of", "transactions", "."], "guid": 5652}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Find the prices of products which has never received a single complaint.", "sql": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)", "example": {"db_id": "customer_complaints", "query": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)", "query_toks": ["SELECT", "product_price", "FROM", "products", "WHERE", "product_id", "NOT", "IN", "(", "SELECT", "product_id", "FROM", "complaints", ")"], "query_toks_no_value": ["select", "product_price", "from", "products", "where", "product_id", "not", "in", "(", "select", "product_id", "from", "complaints", ")"], "question": "Find the prices of products which has never received a single complaint.", "question_toks": ["Find", "the", "prices", "of", "products", "which", "has", "never", "received", "a", "single", "complaint", "."], "guid": 5653}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the different card types, and how many cards are there of each?", "sql": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code", "example": {"db_id": "customers_card_transactions", "query": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code", "query_toks": ["SELECT", "card_type_code", ",", "count", "(", "*", ")", "FROM", "Customers_cards", "GROUP", "BY", "card_type_code"], "query_toks_no_value": ["select", "card_type_code", ",", "count", "(", "*", ")", "from", "customers_cards", "group", "by", "card_type_code"], "question": "What are the different card types, and how many cards are there of each?", "question_toks": ["What", "are", "the", "different", "card", "types", ",", "and", "how", "many", "cards", "are", "there", "of", "each", "?"], "guid": 5654}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | In what city does Janessa Sawayn live?", "sql": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "query_toks": ["SELECT", "T1.city", "FROM", "Addresses", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.address_id", "=", "T2.staff_address_id", "WHERE", "T2.first_name", "=", "``", "Janessa", "''", "AND", "T2.last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "city", "from", "addresses", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "staff_address_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "In what city does Janessa Sawayn live?", "question_toks": ["In", "what", "city", "does", "Janessa", "Sawayn", "live", "?"], "guid": 5655}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Return the id of the customer who has the most cards, as well as the number of cards.", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "customer_id", ",", "count", "(", "*", ")", "FROM", "Customers_cards", "GROUP", "BY", "customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "customer_id", ",", "count", "(", "*", ")", "from", "customers_cards", "group", "by", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the id of the customer who has the most cards, as well as the number of cards.", "question_toks": ["Return", "the", "id", "of", "the", "customer", "who", "has", "the", "most", "cards", ",", "as", "well", "as", "the", "number", "of", "cards", "."], "guid": 5656}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find products with max page size as \"A4\" and pages per minute color smaller than 5.", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5", "example": {"db_id": "store_product", "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5", "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "max_page_size", "=", "``", "A4", "''", "AND", "pages_per_minute_color", "<", "5"], "query_toks_no_value": ["select", "product", "from", "product", "where", "max_page_size", "=", "value", "and", "pages_per_minute_color", "<", "value"], "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.", "question_toks": ["Find", "products", "with", "max", "page", "size", "as", "``", "A4", "''", "and", "pages", "per", "minute", "color", "smaller", "than", "5", "."], "guid": 5657}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the maximum share count of transactions where the amount is smaller than 10000", "sql": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000", "example": {"db_id": "tracking_share_transactions", "query": "SELECT max(share_count) FROM TRANSACTIONS WHERE amount_of_transaction  <  10000", "query_toks": ["SELECT", "max", "(", "share_count", ")", "FROM", "TRANSACTIONS", "WHERE", "amount_of_transaction", "<", "10000"], "query_toks_no_value": ["select", "max", "(", "share_count", ")", "from", "transactions", "where", "amount_of_transaction", "<", "value"], "question": "Show the maximum share count of transactions where the amount is smaller than 10000", "question_toks": ["Show", "the", "maximum", "share", "count", "of", "transactions", "where", "the", "amount", "is", "smaller", "than", "10000"], "guid": 5658}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | Who is the youngest employee in the company? List employee's first and last name.", "sql": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "example": {"db_id": "store_1", "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1;", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "employees", "ORDER", "BY", "birth_date", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "employees", "order", "by", "birth_date", "desc", "limit", "value"], "question": "Who is the youngest employee in the company? List employee's first and last name.", "question_toks": ["Who", "is", "the", "youngest", "employee", "in", "the", "company", "?", "List", "employee", "'s", "first", "and", "last", "name", "."], "guid": 5659}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "JOIN", "order_items", "AS", "T3", "JOIN", "products", "AS", "T4", "ON", "T1.customer_id", "=", "T2.customer_id", "AND", "T2.order_id", "=", "T3.order_id", "AND", "T3.product_id", "=", "T4.product_id", "WHERE", "T3.order_item_status", "=", "``", "Cancel", "''", "AND", "T4.product_name", "=", "``", "food", "''", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "join", "order_items", "as", "t3", "join", "products", "as", "t4", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "and", "t2", ".", "order_id", "=", "t3", ".", "order_id", "and", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t3", ".", "order_item_status", "=", "value", "and", "t4", ".", "product_name", "=", "value", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")?", "question_toks": ["Which", "customers", "have", "ever", "canceled", "the", "purchase", "of", "the", "product", "``", "food", "''", "(", "the", "item", "status", "is", "``", "Cancel", "''", ")", "?"], "guid": 5660}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What is the last name of the staff member in charge of the complaint on the product with the lowest price?", "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1", "query_toks": ["SELECT", "t1.last_name", "FROM", "staff", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.staff_id", "=", "t2.staff_id", "JOIN", "products", "AS", "t3", "ON", "t2.product_id", "=", "t3.product_id", "ORDER", "BY", "t3.product_price", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "staff", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "join", "products", "as", "t3", "on", "t2", ".", "product_id", "=", "t3", ".", "product_id", "order", "by", "t3", ".", "product_price", "limit", "value"], "question": "What is the last name of the staff member in charge of the complaint on the product with the lowest price?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "staff", "member", "in", "charge", "of", "the", "complaint", "on", "the", "product", "with", "the", "lowest", "price", "?"], "guid": 5661}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Give the full name and staff id of the staff who has handled the fewest payments.", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T1.staff_id", "FROM", "staff", "AS", "T1", "JOIN", "payment", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "GROUP", "BY", "T1.staff_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t1", ".", "staff_id", "from", "staff", "as", "t1", "join", "payment", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "group", "by", "t1", ".", "staff_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Give the full name and staff id of the staff who has handled the fewest payments.", "question_toks": ["Give", "the", "full", "name", "and", "staff", "id", "of", "the", "staff", "who", "has", "handled", "the", "fewest", "payments", "."], "guid": 5662}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | Which city does has most number of customers?", "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "driving_school", "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "T2.city", "FROM", "Customers", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.customer_address_id", "=", "T2.address_id", "GROUP", "BY", "T2.city", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "city", "from", "customers", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "customer_address_id", "=", "t2", ".", "address_id", "group", "by", "t2", ".", "city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which city does has most number of customers?", "question_toks": ["Which", "city", "does", "has", "most", "number", "of", "customers", "?"], "guid": 5663}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many accounts does each customer have? List the number and customer id.", "sql": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) ,  customer_id FROM Accounts GROUP BY customer_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "customer_id", "FROM", "Accounts", "GROUP", "BY", "customer_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "customer_id", "from", "accounts", "group", "by", "customer_id"], "question": "How many accounts does each customer have? List the number and customer id.", "question_toks": ["How", "many", "accounts", "does", "each", "customer", "have", "?", "List", "the", "number", "and", "customer", "id", "."], "guid": 5664}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What is the customer id, first and last name with least number of accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "customers_card_transactions", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.customer_id", ",", "T2.customer_first_name", ",", "T2.customer_last_name", "FROM", "Customers_cards", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_id", ",", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", "from", "customers_cards", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the customer id, first and last name with least number of accounts.", "question_toks": ["What", "is", "the", "customer", "id", ",", "first", "and", "last", "name", "with", "least", "number", "of", "accounts", "."], "guid": 5665}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show all product sizes.", "sql": "SELECT DISTINCT product_size FROM Products", "example": {"db_id": "customers_and_invoices", "query": "SELECT DISTINCT product_size FROM Products", "query_toks": ["SELECT", "DISTINCT", "product_size", "FROM", "Products"], "query_toks_no_value": ["select", "distinct", "product_size", "from", "products"], "question": "Show all product sizes.", "question_toks": ["Show", "all", "product", "sizes", "."], "guid": 5666}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What is the membership level with the most people?", "sql": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "shop_membership", "query": "SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "LEVEL", "FROM", "member", "GROUP", "BY", "LEVEL", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "level", "from", "member", "group", "by", "level", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the membership level with the most people?", "question_toks": ["What", "is", "the", "membership", "level", "with", "the", "most", "people", "?"], "guid": 5667}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the names of the countries and average invoice size of the top countries by size?", "sql": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;", "example": {"db_id": "store_1", "query": "SELECT billing_country ,  AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10;", "query_toks": ["SELECT", "billing_country", ",", "AVG", "(", "total", ")", "FROM", "invoices", "GROUP", "BY", "billing_country", "ORDER", "BY", "AVG", "(", "total", ")", "DESC", "LIMIT", "10", ";"], "query_toks_no_value": ["select", "billing_country", ",", "avg", "(", "total", ")", "from", "invoices", "group", "by", "billing_country", "order", "by", "avg", "(", "total", ")", "desc", "limit", "value"], "question": "What are the names of the countries and average invoice size of the top countries by size?", "question_toks": ["What", "are", "the", "names", "of", "the", "countries", "and", "average", "invoice", "size", "of", "the", "top", "countries", "by", "size", "?"], "guid": 5668}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What are the first name, last name, and gender of all the good customers? Order by their last name.", "sql": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name", "example": {"db_id": "products_for_hire", "query": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "gender_mf", "FROM", "customers", "WHERE", "good_or_bad_customer", "=", "'good", "'", "ORDER", "BY", "last_name"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "gender_mf", "from", "customers", "where", "good_or_bad_customer", "=", "value", "order", "by", "last_name"], "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.", "question_toks": ["What", "are", "the", "first", "name", ",", "last", "name", ",", "and", "gender", "of", "all", "the", "good", "customers", "?", "Order", "by", "their", "last", "name", "."], "guid": 5669}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Find the id and name of customers whose address contains WY state and do not use credit card for payment.", "sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"", "example": {"db_id": "department_store", "query": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"", "query_toks": ["SELECT", "customer_id", ",", "customer_name", "FROM", "customers", "WHERE", "customer_address", "LIKE", "``", "%", "WY", "%", "''", "AND", "payment_method_code", "!", "=", "``", "Credit", "Card", "''"], "query_toks_no_value": ["select", "customer_id", ",", "customer_name", "from", "customers", "where", "customer_address", "like", "value", "and", "payment_method_code", "!", "=", "value"], "question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.", "question_toks": ["Find", "the", "id", "and", "name", "of", "customers", "whose", "address", "contains", "WY", "state", "and", "do", "not", "use", "credit", "card", "for", "payment", "."], "guid": 5670}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Show all branch names with the number of members in each branch registered after 2015.", "sql": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id", "example": {"db_id": "shop_membership", "query": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "branch", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T1.register_year", ">", "2015", "GROUP", "BY", "T2.branch_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "membership_register_branch", "as", "t1", "join", "branch", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t1", ".", "register_year", ">", "value", "group", "by", "t2", ".", "branch_id"], "question": "Show all branch names with the number of members in each branch registered after 2015.", "question_toks": ["Show", "all", "branch", "names", "with", "the", "number", "of", "members", "in", "each", "branch", "registered", "after", "2015", "."], "guid": 5671}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What is the id of the order which has the most items?", "sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_orders", "query": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.order_id", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "GROUP", "BY", "T1.order_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "order_id", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "group", "by", "t1", ".", "order_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id of the order which has the most items?", "question_toks": ["What", "is", "the", "id", "of", "the", "order", "which", "has", "the", "most", "items", "?"], "guid": 5672}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "example": {"db_id": "department_store", "query": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "query_toks": ["SELECT", "max", "(", "product_price", ")", ",", "min", "(", "product_price", ")", ",", "product_type_code", "FROM", "products", "GROUP", "BY", "product_type_code", "ORDER", "BY", "product_type_code"], "query_toks_no_value": ["select", "max", "(", "product_price", ")", ",", "min", "(", "product_price", ")", ",", "product_type_code", "from", "products", "group", "by", "product_type_code", "order", "by", "product_type_code"], "question": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?", "question_toks": ["What", "are", "the", "highest", "and", "lowest", "prices", "of", "products", ",", "grouped", "by", "and", "alphabetically", "ordered", "by", "product", "type", "?"], "guid": 5673}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Find the number of investors in total.", "sql": "SELECT count(*) FROM INVESTORS", "example": {"db_id": "tracking_share_transactions", "query": "SELECT count(*) FROM INVESTORS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "INVESTORS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "investors"], "question": "Find the number of investors in total.", "question_toks": ["Find", "the", "number", "of", "investors", "in", "total", "."], "guid": 5674}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?", "sql": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "query_toks": ["SELECT", "max", "(", "t2.active_to_date", ")", "FROM", "customers", "AS", "t1", "JOIN", "customer_contact_channels", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.customer_name", "=", "``", "Tillman", "Ernser", "''"], "query_toks_no_value": ["select", "max", "(", "t2", ".", "active_to_date", ")", "from", "customers", "as", "t1", "join", "customer_contact_channels", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?", "question_toks": ["What", "is", "the", "``", "active", "to", "date", "''", "of", "the", "latest", "contact", "channel", "used", "by", "``", "Tillman", "Ernser", "''", "?"], "guid": 5675}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Which city is post code 255 located in?", "sql": "SELECT city FROM addresses WHERE zip_postcode  =  255", "example": {"db_id": "customers_and_addresses", "query": "SELECT city FROM addresses WHERE zip_postcode  =  255", "query_toks": ["SELECT", "city", "FROM", "addresses", "WHERE", "zip_postcode", "=", "255"], "query_toks_no_value": ["select", "city", "from", "addresses", "where", "zip_postcode", "=", "value"], "question": "Which city is post code 255 located in?", "question_toks": ["Which", "city", "is", "post", "code", "255", "located", "in", "?"], "guid": 5676}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the names of artists that do not have any albums.", "sql": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId", "example": {"db_id": "chinook_1", "query": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId", "query_toks": ["SELECT", "Name", "FROM", "ARTIST", "EXCEPT", "SELECT", "T2.Name", "FROM", "ALBUM", "AS", "T1", "JOIN", "ARTIST", "AS", "T2", "ON", "T1.ArtistId", "=", "T2.ArtistId"], "query_toks_no_value": ["select", "name", "from", "artist", "except", "select", "t2", ".", "name", "from", "album", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artistid", "=", "t2", ".", "artistid"], "question": "Find the names of artists that do not have any albums.", "question_toks": ["Find", "the", "names", "of", "artists", "that", "do", "not", "have", "any", "albums", "."], "guid": 5677}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What is the category and typical buying price  of the product with name \"cumin\"?", "sql": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"", "query_toks": ["SELECT", "product_category_code", ",", "typical_buying_price", "FROM", "products", "WHERE", "product_name", "=", "``", "cumin", "''"], "query_toks_no_value": ["select", "product_category_code", ",", "typical_buying_price", "from", "products", "where", "product_name", "=", "value"], "question": "What is the category and typical buying price  of the product with name \"cumin\"?", "question_toks": ["What", "is", "the", "category", "and", "typical", "buying", "price", "of", "the", "product", "with", "name", "``", "cumin", "''", "?"], "guid": 5678}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the name of the genre that is most frequent across all tracks.", "sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "chinook_1", "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", "FROM", "GENRE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.GenreId", "=", "T2.GenreId", "GROUP", "BY", "T2.GenreId", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "genre", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "genreid", "=", "t2", ".", "genreid", "group", "by", "t2", ".", "genreid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the genre that is most frequent across all tracks.", "question_toks": ["Find", "the", "name", "of", "the", "genre", "that", "is", "most", "frequent", "across", "all", "tracks", "."], "guid": 5679}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Which order's shipment tracking number is \"3452\"? Give me the id of the order.", "sql": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"", "example": {"db_id": "tracking_orders", "query": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"", "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_tracking_number", "=", "``", "3452", "''"], "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_tracking_number", "=", "value"], "question": "Which order's shipment tracking number is \"3452\"? Give me the id of the order.", "question_toks": ["Which", "order", "'s", "shipment", "tracking", "number", "is", "``", "3452", "''", "?", "Give", "me", "the", "id", "of", "the", "order", "."], "guid": 5680}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Find the last name of the staff whose email address contains \"wrau\".", "sql": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"", "example": {"db_id": "customer_complaints", "query": "SELECT last_name FROM staff WHERE email_address LIKE \"%wrau%\"", "query_toks": ["SELECT", "last_name", "FROM", "staff", "WHERE", "email_address", "LIKE", "``", "%", "wrau", "%", "''"], "query_toks_no_value": ["select", "last_name", "from", "staff", "where", "email_address", "like", "value"], "question": "Find the last name of the staff whose email address contains \"wrau\".", "question_toks": ["Find", "the", "last", "name", "of", "the", "staff", "whose", "email", "address", "contains", "``", "wrau", "''", "."], "guid": 5681}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many customers don't have an account?", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "Accounts", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "accounts", ")"], "question": "How many customers don't have an account?", "question_toks": ["How", "many", "customers", "do", "n't", "have", "an", "account", "?"], "guid": 5682}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?", "sql": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"", "example": {"db_id": "entrepreneur", "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"", "query_toks": ["SELECT", "T2.Date_of_Birth", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Investor", "=", "``", "Simon", "Woodroffe", "''", "OR", "T1.Investor", "=", "``", "Peter", "Jones", "''"], "query_toks_no_value": ["select", "t2", ".", "date_of_birth", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "investor", "=", "value", "or", "t1", ".", "investor", "=", "value"], "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?", "question_toks": ["What", "are", "the", "dates", "of", "birth", "of", "entrepreneurs", "with", "investor", "``", "Simon", "Woodroffe", "''", "or", "``", "Peter", "Jones", "''", "?"], "guid": 5683}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | List the names of entrepreneurs and their companies in descending order of money requested?", "sql": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested", "example": {"db_id": "entrepreneur", "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested", "query_toks": ["SELECT", "T2.Name", ",", "T1.Company", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Money_Requested"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "company", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "money_requested"], "question": "List the names of entrepreneurs and their companies in descending order of money requested?", "question_toks": ["List", "the", "names", "of", "entrepreneurs", "and", "their", "companies", "in", "descending", "order", "of", "money", "requested", "?"], "guid": 5684}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"", "query_toks": ["SELECT", "t1.product_name", "FROM", "products", "AS", "t1", "JOIN", "ref_product_categories", "AS", "t2", "ON", "t1.product_category_code", "=", "t2.product_category_code", "JOIN", "ref_colors", "AS", "t3", "ON", "t1.color_code", "=", "t3.color_code", "WHERE", "t3.color_description", "=", "``", "white", "''", "AND", "t2.unit_of_measure", "!", "=", "``", "Handful", "''"], "query_toks_no_value": ["select", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "ref_product_categories", "as", "t2", "on", "t1", ".", "product_category_code", "=", "t2", ".", "product_category_code", "join", "ref_colors", "as", "t3", "on", "t1", ".", "color_code", "=", "t3", ".", "color_code", "where", "t3", ".", "color_description", "=", "value", "and", "t2", ".", "unit_of_measure", "!", "=", "value"], "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".", "question_toks": ["Find", "the", "product", "names", "that", "are", "colored", "'white", "'", "but", "do", "not", "have", "unit", "of", "measurement", "``", "Handful", "''", "."], "guid": 5685}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "query_toks": ["SELECT", "avg", "(", "price", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.first_name", "=", "``", "Janessa", "''", "AND", "T2.last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "avg", "(", "price", ")", "from", "lessons", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?", "question_toks": ["What", "is", "average", "lesson", "price", "taught", "by", "staff", "with", "first", "name", "as", "Janessa", "and", "last", "name", "as", "Sawayn", "?"], "guid": 5686}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What are the dates of the orders made by the customer named \"Jeramie\"?", "sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "example": {"db_id": "tracking_orders", "query": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "query_toks": ["SELECT", "T2.date_order_placed", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.customer_name", "=", "``", "Jeramie", "''"], "query_toks_no_value": ["select", "t2", ".", "date_order_placed", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "What are the dates of the orders made by the customer named \"Jeramie\"?", "question_toks": ["What", "are", "the", "dates", "of", "the", "orders", "made", "by", "the", "customer", "named", "``", "Jeramie", "''", "?"], "guid": 5687}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the names of customers who ordered both products Latte and Americano.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "JOIN", "products", "AS", "t4", "ON", "t3.product_id", "=", "t4.product_id", "WHERE", "t4.product_details", "=", "'Latte", "'", "INTERSECT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "JOIN", "products", "AS", "t4", "ON", "t3.product_id", "=", "t4.product_id", "WHERE", "t4.product_details", "=", "'Americano", "'"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "join", "products", "as", "t4", "on", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t4", ".", "product_details", "=", "value", "intersect", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "join", "products", "as", "t4", "on", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t4", ".", "product_details", "=", "value"], "question": "Find the names of customers who ordered both products Latte and Americano.", "question_toks": ["Find", "the", "names", "of", "customers", "who", "ordered", "both", "products", "Latte", "and", "Americano", "."], "guid": 5688}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show ids, customer ids, names for all accounts.", "sql": "SELECT account_id ,  customer_id ,  account_name FROM Accounts", "example": {"db_id": "customers_card_transactions", "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts", "query_toks": ["SELECT", "account_id", ",", "customer_id", ",", "account_name", "FROM", "Accounts"], "query_toks_no_value": ["select", "account_id", ",", "customer_id", ",", "account_name", "from", "accounts"], "question": "Show ids, customer ids, names for all accounts.", "question_toks": ["Show", "ids", ",", "customer", "ids", ",", "names", "for", "all", "accounts", "."], "guid": 5689}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What is the first name, last name, and phone of the customer with account name 162?", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"162\"", "query_toks": ["SELECT", "T2.customer_first_name", ",", "T2.customer_last_name", ",", "T2.customer_phone", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.account_name", "=", "``", "162", "''"], "query_toks_no_value": ["select", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", ",", "t2", ".", "customer_phone", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "account_name", "=", "value"], "question": "What is the first name, last name, and phone of the customer with account name 162?", "question_toks": ["What", "is", "the", "first", "name", ",", "last", "name", ",", "and", "phone", "of", "the", "customer", "with", "account", "name", "162", "?"], "guid": 5690}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the unique first names, last names, and phone numbers for all customers with any account.", "sql": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name ,  T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id", "query_toks": ["SELECT", "DISTINCT", "T1.customer_first_name", ",", "T1.customer_last_name", ",", "T1.phone_number", "FROM", "Customers", "AS", "T1", "JOIN", "Accounts", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_first_name", ",", "t1", ".", "customer_last_name", ",", "t1", ".", "phone_number", "from", "customers", "as", "t1", "join", "accounts", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "Show the unique first names, last names, and phone numbers for all customers with any account.", "question_toks": ["Show", "the", "unique", "first", "names", ",", "last", "names", ",", "and", "phone", "numbers", "for", "all", "customers", "with", "any", "account", "."], "guid": 5691}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | Find the name of the first 5 customers.", "sql": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5", "example": {"db_id": "customer_deliveries", "query": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5", "query_toks": ["SELECT", "customer_name", "FROM", "Customers", "ORDER", "BY", "date_became_customer", "LIMIT", "5"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "order", "by", "date_became_customer", "limit", "value"], "question": "Find the name of the first 5 customers.", "question_toks": ["Find", "the", "name", "of", "the", "first", "5", "customers", "."], "guid": 5692}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the order ids and the number of items in each order.", "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "query_toks": ["SELECT", "order_id", ",", "count", "(", "*", ")", "FROM", "Order_items", "GROUP", "BY", "order_id"], "query_toks_no_value": ["select", "order_id", ",", "count", "(", "*", ")", "from", "order_items", "group", "by", "order_id"], "question": "Show the order ids and the number of items in each order.", "question_toks": ["Show", "the", "order", "ids", "and", "the", "number", "of", "items", "in", "each", "order", "."], "guid": 5693}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | What are all the catalog entry names?", "sql": "SELECT distinct(catalog_entry_name) FROM catalog_contents", "example": {"db_id": "product_catalog", "query": "SELECT distinct(catalog_entry_name) FROM catalog_contents", "query_toks": ["SELECT", "distinct", "(", "catalog_entry_name", ")", "FROM", "catalog_contents"], "query_toks_no_value": ["select", "distinct", "(", "catalog_entry_name", ")", "from", "catalog_contents"], "question": "What are all the catalog entry names?", "question_toks": ["What", "are", "all", "the", "catalog", "entry", "names", "?"], "guid": 5694}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the description of the transaction type that occurs most frequently.", "sql": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code  =  T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.transaction_type_description", "FROM", "Ref_Transaction_Types", "AS", "T1", "JOIN", "TRANSACTIONS", "AS", "T2", "ON", "T1.transaction_type_code", "=", "T2.transaction_type_code", "GROUP", "BY", "T1.transaction_type_code", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "transaction_type_description", "from", "ref_transaction_types", "as", "t1", "join", "transactions", "as", "t2", "on", "t1", ".", "transaction_type_code", "=", "t2", ".", "transaction_type_code", "group", "by", "t1", ".", "transaction_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the description of the transaction type that occurs most frequently.", "question_toks": ["Show", "the", "description", "of", "the", "transaction", "type", "that", "occurs", "most", "frequently", "."], "guid": 5695}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the ids of orders which are shipped after 2000-01-01.", "sql": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"", "example": {"db_id": "tracking_orders", "query": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"", "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_date", ">", "``", "2000-01-01", "''"], "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_date", ">", "value"], "question": "Find the ids of orders which are shipped after 2000-01-01.", "question_toks": ["Find", "the", "ids", "of", "orders", "which", "are", "shipped", "after", "2000-01-01", "."], "guid": 5696}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the id of the order which is shipped most recently.", "sql": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)", "example": {"db_id": "tracking_orders", "query": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)", "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_date", "=", "(", "SELECT", "max", "(", "shipment_date", ")", "FROM", "shipments", ")"], "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_date", "=", "(", "select", "max", "(", "shipment_date", ")", "from", "shipments", ")"], "question": "Find the id of the order which is shipped most recently.", "question_toks": ["Find", "the", "id", "of", "the", "order", "which", "is", "shipped", "most", "recently", "."], "guid": 5697}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the staff ids and genders for any staff with the title Department Manager.", "sql": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"", "example": {"db_id": "department_store", "query": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"", "query_toks": ["SELECT", "T1.staff_id", ",", "T1.staff_gender", "FROM", "staff", "AS", "T1", "JOIN", "staff_department_assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.job_title_code", "=", "``", "Department", "Manager", "''"], "query_toks_no_value": ["select", "t1", ".", "staff_id", ",", "t1", ".", "staff_gender", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "job_title_code", "=", "value"], "question": "Return the staff ids and genders for any staff with the title Department Manager.", "question_toks": ["Return", "the", "staff", "ids", "and", "genders", "for", "any", "staff", "with", "the", "title", "Department", "Manager", "."], "guid": 5698}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Count the number of tracks that are part of the rock genre.", "sql": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "example": {"db_id": "chinook_1", "query": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "GENRE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.GenreId", "=", "T2.GenreId", "WHERE", "T1.Name", "=", "``", "Rock", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "genre", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "genreid", "=", "t2", ".", "genreid", "where", "t1", ".", "name", "=", "value"], "question": "Count the number of tracks that are part of the rock genre.", "question_toks": ["Count", "the", "number", "of", "tracks", "that", "are", "part", "of", "the", "rock", "genre", "."], "guid": 5699}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?", "sql": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"", "example": {"db_id": "customers_and_invoices", "query": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"", "query_toks": ["SELECT", "T1.account_name", ",", "T1.other_account_details", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.customer_first_name", "=", "``", "Meaghan", "''", "AND", "T2.customer_last_name", "=", "``", "Keeling", "''"], "query_toks_no_value": ["select", "t1", ".", "account_name", ",", "t1", ".", "other_account_details", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_first_name", "=", "value", "and", "t2", ".", "customer_last_name", "=", "value"], "question": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?", "question_toks": ["What", "are", "the", "names", "and", "other", "details", "for", "accounts", "corresponding", "to", "the", "customer", "named", "Meaghan", "Keeling", "?"], "guid": 5700}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | For each customer who has at least two orders, find the customer name and number of orders made.", "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2", "example": {"db_id": "tracking_orders", "query": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.customer_name", ",", "count", "(", "*", ")", "FROM", "orders", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T2.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "customer_name", ",", "count", "(", "*", ")", "from", "orders", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "For each customer who has at least two orders, find the customer name and number of orders made.", "question_toks": ["For", "each", "customer", "who", "has", "at", "least", "two", "orders", ",", "find", "the", "customer", "name", "and", "number", "of", "orders", "made", "."], "guid": 5701}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show all transaction ids with transaction code 'PUR'.", "sql": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR'", "example": {"db_id": "tracking_share_transactions", "query": "SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code  =  'PUR'", "query_toks": ["SELECT", "transaction_id", "FROM", "TRANSACTIONS", "WHERE", "transaction_type_code", "=", "'PUR", "'"], "query_toks_no_value": ["select", "transaction_id", "from", "transactions", "where", "transaction_type_code", "=", "value"], "question": "Show all transaction ids with transaction code 'PUR'.", "question_toks": ["Show", "all", "transaction", "ids", "with", "transaction", "code", "'PUR", "'", "."], "guid": 5702}}