{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | How many distinct complaint type codes are there in the database?", "sql": "SELECT count(DISTINCT complaint_type_code) FROM complaints", "example": {"db_id": "customer_complaints", "query": "SELECT count(DISTINCT complaint_type_code) FROM complaints", "query_toks": ["SELECT", "count", "(", "DISTINCT", "complaint_type_code", ")", "FROM", "complaints"], "query_toks_no_value": ["select", "count", "(", "distinct", "complaint_type_code", ")", "from", "complaints"], "question": "How many distinct complaint type codes are there in the database?", "question_toks": ["How", "many", "distinct", "complaint", "type", "codes", "are", "there", "in", "the", "database", "?"], "guid": 5871}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the names of customers who have purchased both products Latte and Americano?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "JOIN", "products", "AS", "t4", "ON", "t3.product_id", "=", "t4.product_id", "WHERE", "t4.product_details", "=", "'Latte", "'", "INTERSECT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "JOIN", "products", "AS", "t4", "ON", "t3.product_id", "=", "t4.product_id", "WHERE", "t4.product_details", "=", "'Americano", "'"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "join", "products", "as", "t4", "on", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t4", ".", "product_details", "=", "value", "intersect", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "join", "products", "as", "t4", "on", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t4", ".", "product_details", "=", "value"], "question": "What are the names of customers who have purchased both products Latte and Americano?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "purchased", "both", "products", "Latte", "and", "Americano", "?"], "guid": 5872}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the payment method that is used most frequently.", "sql": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "payment_method", "FROM", "customers", "GROUP", "BY", "payment_method", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method", "from", "customers", "group", "by", "payment_method", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the payment method that is used most frequently.", "question_toks": ["Find", "the", "payment", "method", "that", "is", "used", "most", "frequently", "."], "guid": 5873}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the names of different music genres?", "sql": "SELECT Name FROM GENRE", "example": {"db_id": "chinook_1", "query": "SELECT Name FROM GENRE", "query_toks": ["SELECT", "Name", "FROM", "GENRE"], "query_toks_no_value": ["select", "name", "from", "genre"], "question": "What are the names of different music genres?", "question_toks": ["What", "are", "the", "names", "of", "different", "music", "genres", "?"], "guid": 5874}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List all customer status codes and the number of customers having each status code.", "sql": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;", "example": {"db_id": "driving_school", "query": "SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code;", "query_toks": ["SELECT", "customer_status_code", ",", "count", "(", "*", ")", "FROM", "Customers", "GROUP", "BY", "customer_status_code", ";"], "query_toks_no_value": ["select", "customer_status_code", ",", "count", "(", "*", ")", "from", "customers", "group", "by", "customer_status_code"], "question": "List all customer status codes and the number of customers having each status code.", "question_toks": ["List", "all", "customer", "status", "codes", "and", "the", "number", "of", "customers", "having", "each", "status", "code", "."], "guid": 5875}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | Show the name, phone, and payment method code for all customers in descending order of customer number.", "sql": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name ,  customer_phone ,  payment_method_code FROM customers ORDER BY customer_number DESC", "query_toks": ["SELECT", "customer_name", ",", "customer_phone", ",", "payment_method_code", "FROM", "customers", "ORDER", "BY", "customer_number", "DESC"], "query_toks_no_value": ["select", "customer_name", ",", "customer_phone", ",", "payment_method_code", "from", "customers", "order", "by", "customer_number", "desc"], "question": "Show the name, phone, and payment method code for all customers in descending order of customer number.", "question_toks": ["Show", "the", "name", ",", "phone", ",", "and", "payment", "method", "code", "for", "all", "customers", "in", "descending", "order", "of", "customer", "number", "."], "guid": 5876}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | How many characteristics does the product named \"sesame\" have?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "WHERE", "t1.product_name", "=", "``", "sesame", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t1", ".", "product_name", "=", "value"], "question": "How many characteristics does the product named \"sesame\" have?", "question_toks": ["How", "many", "characteristics", "does", "the", "product", "named", "``", "sesame", "''", "have", "?"], "guid": 5877}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What are the emails and phone numbers of all customers, sorted by email address and phone number?", "sql": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number", "example": {"db_id": "customer_complaints", "query": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number", "query_toks": ["SELECT", "email_address", ",", "phone_number", "FROM", "customers", "ORDER", "BY", "email_address", ",", "phone_number"], "query_toks_no_value": ["select", "email_address", ",", "phone_number", "from", "customers", "order", "by", "email_address", ",", "phone_number"], "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?", "question_toks": ["What", "are", "the", "emails", "and", "phone", "numbers", "of", "all", "customers", ",", "sorted", "by", "email", "address", "and", "phone", "number", "?"], "guid": 5878}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What are the phone numbers of all customers and all staff members?", "sql": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff", "example": {"db_id": "customer_complaints", "query": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff", "query_toks": ["SELECT", "phone_number", "FROM", "customers", "UNION", "SELECT", "phone_number", "FROM", "staff"], "query_toks_no_value": ["select", "phone_number", "from", "customers", "union", "select", "phone_number", "from", "staff"], "question": "What are the phone numbers of all customers and all staff members?", "question_toks": ["What", "are", "the", "phone", "numbers", "of", "all", "customers", "and", "all", "staff", "members", "?"], "guid": 5879}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What is the invoice number and invoice date for the invoice with most number of transactions?", "sql": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.invoice_number ,  T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number  =  T2.invoice_number GROUP BY T1.invoice_number ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.invoice_number", ",", "T2.invoice_date", "FROM", "Financial_transactions", "AS", "T1", "JOIN", "Invoices", "AS", "T2", "ON", "T1.invoice_number", "=", "T2.invoice_number", "GROUP", "BY", "T1.invoice_number", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "invoice_number", ",", "t2", ".", "invoice_date", "from", "financial_transactions", "as", "t1", "join", "invoices", "as", "t2", "on", "t1", ".", "invoice_number", "=", "t2", ".", "invoice_number", "group", "by", "t1", ".", "invoice_number", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the invoice number and invoice date for the invoice with most number of transactions?", "question_toks": ["What", "is", "the", "invoice", "number", "and", "invoice", "date", "for", "the", "invoice", "with", "most", "number", "of", "transactions", "?"], "guid": 5880}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the titles of any movies with an R rating.", "sql": "SELECT title FROM film WHERE rating  =  'R'", "example": {"db_id": "sakila_1", "query": "SELECT title FROM film WHERE rating  =  'R'", "query_toks": ["SELECT", "title", "FROM", "film", "WHERE", "rating", "=", "'R", "'"], "query_toks_no_value": ["select", "title", "from", "film", "where", "rating", "=", "value"], "question": "Return the titles of any movies with an R rating.", "question_toks": ["Return", "the", "titles", "of", "any", "movies", "with", "an", "R", "rating", "."], "guid": 5881}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the names of all the playlists?", "sql": "SELECT name FROM playlists;", "example": {"db_id": "store_1", "query": "SELECT name FROM playlists;", "query_toks": ["SELECT", "name", "FROM", "playlists", ";"], "query_toks_no_value": ["select", "name", "from", "playlists"], "question": "What are the names of all the playlists?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "playlists", "?"], "guid": 5882}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?", "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )", "example": {"db_id": "sakila_1", "query": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )", "query_toks": ["SELECT", "first_name", "FROM", "customer", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "rental", "WHERE", "rental_date", ">", "'2005-08-23", "02:06:01", "'", ")"], "query_toks_no_value": ["select", "first_name", "from", "customer", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "rental", "where", "rental_date", ">", "value", ")"], "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?", "question_toks": ["What", "are", "the", "first", "names", "of", "customers", "who", "have", "not", "rented", "any", "films", "after", "'2005-08-23", "02:06:01", "'", "?"], "guid": 5883}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the date of birth for the staff member named Janessa Sawayn?", "sql": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT date_of_birth FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "query_toks": ["SELECT", "date_of_birth", "FROM", "Staff", "WHERE", "first_name", "=", "``", "Janessa", "''", "AND", "last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "date_of_birth", "from", "staff", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the date of birth for the staff member named Janessa Sawayn?", "question_toks": ["What", "is", "the", "date", "of", "birth", "for", "the", "staff", "member", "named", "Janessa", "Sawayn", "?"], "guid": 5884}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Which catalog contents have length below 3 or above 5? Find the catalog entry names.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5", "query_toks": ["SELECT", "catalog_entry_name", "FROM", "catalog_contents", "WHERE", "LENGTH", "<", "3", "OR", "width", ">", "5"], "query_toks_no_value": ["select", "catalog_entry_name", "from", "catalog_contents", "where", "length", "<", "value", "or", "width", ">", "value"], "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.", "question_toks": ["Which", "catalog", "contents", "have", "length", "below", "3", "or", "above", "5", "?", "Find", "the", "catalog", "entry", "names", "."], "guid": 5885}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which film has the most number of actors or actresses? List the film name, film id and description.", "sql": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "T2.film_id", ",", "T2.description", "FROM", "film_actor", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T2.film_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t2", ".", "film_id", ",", "t2", ".", "description", "from", "film_actor", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t2", ".", "film_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which film has the most number of actors or actresses? List the film name, film id and description.", "question_toks": ["Which", "film", "has", "the", "most", "number", "of", "actors", "or", "actresses", "?", "List", "the", "film", "name", ",", "film", "id", "and", "description", "."], "guid": 5886}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the distinct name of customers whose order status is Pending, in the order of customer id.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id", "example": {"db_id": "department_store", "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id", "query_toks": ["SELECT", "DISTINCT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status_code", "=", "``", "Pending", "''", "ORDER", "BY", "T2.customer_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status_code", "=", "value", "order", "by", "t2", ".", "customer_id"], "question": "Return the distinct name of customers whose order status is Pending, in the order of customer id.", "question_toks": ["Return", "the", "distinct", "name", "of", "customers", "whose", "order", "status", "is", "Pending", ",", "in", "the", "order", "of", "customer", "id", "."], "guid": 5887}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find the names of districts where have both city mall and village store type stores.", "sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"", "example": {"db_id": "store_product", "query": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"", "query_toks": ["SELECT", "t3.District_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.Type", "=", "``", "City", "Mall", "''", "INTERSECT", "SELECT", "t3.District_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.Type", "=", "``", "Village", "Store", "''"], "query_toks_no_value": ["select", "t3", ".", "district_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "type", "=", "value", "intersect", "select", "t3", ".", "district_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "type", "=", "value"], "question": "Find the names of districts where have both city mall and village store type stores.", "question_toks": ["Find", "the", "names", "of", "districts", "where", "have", "both", "city", "mall", "and", "village", "store", "type", "stores", "."], "guid": 5888}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Return the color description that is most common across all products.", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.color_description", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "GROUP", "BY", "t2.color_description", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "color_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "group", "by", "t2", ".", "color_description", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the color description that is most common across all products.", "question_toks": ["Return", "the", "color", "description", "that", "is", "most", "common", "across", "all", "products", "."], "guid": 5889}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.", "sql": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'", "example": {"db_id": "customers_and_invoices", "query": "SELECT T1.account_id ,  T1.date_account_opened ,  T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  'Meaghan'", "query_toks": ["SELECT", "T1.account_id", ",", "T1.date_account_opened", ",", "T1.account_name", ",", "T1.other_account_details", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.customer_first_name", "=", "'Meaghan", "'"], "query_toks_no_value": ["select", "t1", ".", "account_id", ",", "t1", ".", "date_account_opened", ",", "t1", ".", "account_name", ",", "t1", ".", "other_account_details", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_first_name", "=", "value"], "question": "Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.", "question_toks": ["Show", "the", "id", ",", "the", "account", "name", ",", "and", "other", "account", "details", "for", "all", "accounts", "by", "the", "customer", "with", "first", "name", "'Meaghan", "'", "."], "guid": 5890}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which film has the most copies in the inventory? List both title and id.", "sql": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.title", ",", "T1.film_id", "FROM", "film", "AS", "T1", "JOIN", "inventory", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "film_id", "from", "film", "as", "t1", "join", "inventory", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which film has the most copies in the inventory? List both title and id.", "question_toks": ["Which", "film", "has", "the", "most", "copies", "in", "the", "inventory", "?", "List", "both", "title", "and", "id", "."], "guid": 5891}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find products with max page size as \"A4\" or pages per minute color smaller than 5.", "sql": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5", "example": {"db_id": "store_product", "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5", "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "max_page_size", "=", "``", "A4", "''", "OR", "pages_per_minute_color", "<", "5"], "query_toks_no_value": ["select", "product", "from", "product", "where", "max_page_size", "=", "value", "or", "pages_per_minute_color", "<", "value"], "question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.", "question_toks": ["Find", "products", "with", "max", "page", "size", "as", "``", "A4", "''", "or", "pages", "per", "minute", "color", "smaller", "than", "5", "."], "guid": 5892}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the average amount of transactions for different investors.", "sql": "SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id", "example": {"db_id": "tracking_share_transactions", "query": "SELECT investor_id ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id", "query_toks": ["SELECT", "investor_id", ",", "avg", "(", "amount_of_transaction", ")", "FROM", "TRANSACTIONS", "GROUP", "BY", "investor_id"], "query_toks_no_value": ["select", "investor_id", ",", "avg", "(", "amount_of_transaction", ")", "from", "transactions", "group", "by", "investor_id"], "question": "Show the average amount of transactions for different investors.", "question_toks": ["Show", "the", "average", "amount", "of", "transactions", "for", "different", "investors", "."], "guid": 5893}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?", "sql": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')", "example": {"db_id": "department_store", "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')", "query_toks": ["SELECT", "staff_id", "FROM", "Staff_Department_Assignments", "WHERE", "date_assigned_to", "<", "(", "SELECT", "max", "(", "date_assigned_to", ")", "FROM", "Staff_Department_Assignments", "WHERE", "job_title_code", "=", "'Clerical", "Staff", "'", ")"], "query_toks_no_value": ["select", "staff_id", "from", "staff_department_assignments", "where", "date_assigned_to", "<", "(", "select", "max", "(", "date_assigned_to", ")", "from", "staff_department_assignments", "where", "job_title_code", "=", "value", ")"], "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?", "question_toks": ["What", "is", "id", "of", "the", "staff", "who", "had", "a", "Staff", "Department", "Assignment", "earlier", "than", "any", "Clerical", "Staff", "?"], "guid": 5894}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What is the name of the most common genre in all tracks?", "sql": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "chinook_1", "query": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Name", "FROM", "GENRE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.GenreId", "=", "T2.GenreId", "GROUP", "BY", "T2.GenreId", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "genre", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "genreid", "=", "t2", ".", "genreid", "group", "by", "t2", ".", "genreid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the most common genre in all tracks?", "question_toks": ["What", "is", "the", "name", "of", "the", "most", "common", "genre", "in", "all", "tracks", "?"], "guid": 5895}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What is the description of the color for most products?", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.color_description", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "GROUP", "BY", "t2.color_description", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "color_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "group", "by", "t2", ".", "color_description", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the description of the color for most products?", "question_toks": ["What", "is", "the", "description", "of", "the", "color", "for", "most", "products", "?"], "guid": 5896}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What is the description of the product named \"Chocolate\"?", "sql": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\"", "example": {"db_id": "customer_complaints", "query": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\"", "query_toks": ["SELECT", "product_description", "FROM", "products", "WHERE", "product_name", "=", "``", "Chocolate", "''"], "query_toks_no_value": ["select", "product_description", "from", "products", "where", "product_name", "=", "value"], "question": "What is the description of the product named \"Chocolate\"?", "question_toks": ["What", "is", "the", "description", "of", "the", "product", "named", "``", "Chocolate", "''", "?"], "guid": 5897}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the names of tracks that contain the the word you in them?", "sql": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "example": {"db_id": "chinook_1", "query": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'", "query_toks": ["SELECT", "Name", "FROM", "TRACK", "WHERE", "Name", "LIKE", "'", "%", "you", "%", "'"], "query_toks_no_value": ["select", "name", "from", "track", "where", "name", "like", "value"], "question": "What are the names of tracks that contain the the word you in them?", "question_toks": ["What", "are", "the", "names", "of", "tracks", "that", "contain", "the", "the", "word", "you", "in", "them", "?"], "guid": 5898}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the name of all tracks in the Rock genre?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";", "example": {"db_id": "store_1", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";", "query_toks": ["SELECT", "T2.name", "FROM", "genres", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "WHERE", "T1.name", "=", "``", "Rock", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "genres", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "where", "t1", ".", "name", "=", "value"], "question": "What is the name of all tracks in the Rock genre?", "question_toks": ["What", "is", "the", "name", "of", "all", "tracks", "in", "the", "Rock", "genre", "?"], "guid": 5899}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Count the number of customers.", "sql": "SELECT count(*) FROM Customers", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM Customers", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "Count the number of customers.", "question_toks": ["Count", "the", "number", "of", "customers", "."], "guid": 5900}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | Show the product type and name for the products with price higher than 1000 or lower than 500.", "sql": "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT product_type_code ,  product_name FROM products WHERE product_price  >  1000 OR product_price  <  500", "query_toks": ["SELECT", "product_type_code", ",", "product_name", "FROM", "products", "WHERE", "product_price", ">", "1000", "OR", "product_price", "<", "500"], "query_toks_no_value": ["select", "product_type_code", ",", "product_name", "from", "products", "where", "product_price", ">", "value", "or", "product_price", "<", "value"], "question": "Show the product type and name for the products with price higher than 1000 or lower than 500.", "question_toks": ["Show", "the", "product", "type", "and", "name", "for", "the", "products", "with", "price", "higher", "than", "1000", "or", "lower", "than", "500", "."], "guid": 5901}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many vehicles exist?", "sql": "SELECT count(*) FROM Vehicles;", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Vehicles;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Vehicles", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "vehicles"], "question": "How many vehicles exist?", "question_toks": ["How", "many", "vehicles", "exist", "?"], "guid": 5902}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the id, the date of account opened, the account name, and other account detail for all accounts.", "sql": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts", "example": {"db_id": "customers_and_invoices", "query": "SELECT account_id ,  date_account_opened ,  account_name ,  other_account_details FROM Accounts", "query_toks": ["SELECT", "account_id", ",", "date_account_opened", ",", "account_name", ",", "other_account_details", "FROM", "Accounts"], "query_toks_no_value": ["select", "account_id", ",", "date_account_opened", ",", "account_name", ",", "other_account_details", "from", "accounts"], "question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.", "question_toks": ["Show", "the", "id", ",", "the", "date", "of", "account", "opened", ",", "the", "account", "name", ",", "and", "other", "account", "detail", "for", "all", "accounts", "."], "guid": 5903}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | List the name of staff who has been assigned multiple jobs.", "sql": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1", "example": {"db_id": "department_store", "query": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1", "query_toks": ["SELECT", "T1.staff_name", "FROM", "staff", "AS", "T1", "JOIN", "staff_department_assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "GROUP", "BY", "T2.staff_id", "HAVING", "COUNT", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "staff_name", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "group", "by", "t2", ".", "staff_id", "having", "count", "(", "*", ")", ">", "value"], "question": "List the name of staff who has been assigned multiple jobs.", "question_toks": ["List", "the", "name", "of", "staff", "who", "has", "been", "assigned", "multiple", "jobs", "."], "guid": 5904}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?", "sql": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date", "example": {"db_id": "department_store", "query": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date", "query_toks": ["SELECT", "order_id", ",", "customer_id", "FROM", "customer_orders", "WHERE", "order_status_code", "=", "``", "Cancelled", "''", "ORDER", "BY", "order_date"], "query_toks_no_value": ["select", "order_id", ",", "customer_id", "from", "customer_orders", "where", "order_status_code", "=", "value", "order", "by", "order_date"], "question": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?", "question_toks": ["What", "are", "the", "order", "ids", "and", "customer", "ids", "for", "orders", "that", "have", "been", "Cancelled", ",", "sorted", "by", "their", "order", "dates", "?"], "guid": 5905}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What city is the headquarter of the store Blackville?", "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"", "example": {"db_id": "store_product", "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"", "query_toks": ["SELECT", "t3.headquartered_city", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.store_name", "=", "``", "Blackville", "''"], "query_toks_no_value": ["select", "t3", ".", "headquartered_city", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "store_name", "=", "value"], "question": "What city is the headquarter of the store Blackville?", "question_toks": ["What", "city", "is", "the", "headquarter", "of", "the", "store", "Blackville", "?"], "guid": 5906}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the city where the most customers live.", "sql": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t3.city", "FROM", "customers", "AS", "t1", "JOIN", "customer_addresses", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "addresses", "AS", "t3", "ON", "t2.address_id", "=", "t3.address_id", "GROUP", "BY", "t3.city", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "city", "from", "customers", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", "group", "by", "t3", ".", "city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the city where the most customers live.", "question_toks": ["Find", "the", "city", "where", "the", "most", "customers", "live", "."], "guid": 5907}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What are the prices of products that have never gotten a complaint?", "sql": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)", "example": {"db_id": "customer_complaints", "query": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)", "query_toks": ["SELECT", "product_price", "FROM", "products", "WHERE", "product_id", "NOT", "IN", "(", "SELECT", "product_id", "FROM", "complaints", ")"], "query_toks_no_value": ["select", "product_price", "from", "products", "where", "product_id", "not", "in", "(", "select", "product_id", "from", "complaints", ")"], "question": "What are the prices of products that have never gotten a complaint?", "question_toks": ["What", "are", "the", "prices", "of", "products", "that", "have", "never", "gotten", "a", "complaint", "?"], "guid": 5908}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What is the unit of measuerment of the product category code \"Herbs\"?", "sql": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"", "query_toks": ["SELECT", "unit_of_measure", "FROM", "ref_product_categories", "WHERE", "product_category_code", "=", "``", "Herbs", "''"], "query_toks_no_value": ["select", "unit_of_measure", "from", "ref_product_categories", "where", "product_category_code", "=", "value"], "question": "What is the unit of measuerment of the product category code \"Herbs\"?", "question_toks": ["What", "is", "the", "unit", "of", "measuerment", "of", "the", "product", "category", "code", "``", "Herbs", "''", "?"], "guid": 5909}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What is the average price for each type of product?", "sql": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code", "example": {"db_id": "department_store", "query": "SELECT product_type_code ,  avg(product_price) FROM products GROUP BY product_type_code", "query_toks": ["SELECT", "product_type_code", ",", "avg", "(", "product_price", ")", "FROM", "products", "GROUP", "BY", "product_type_code"], "query_toks_no_value": ["select", "product_type_code", ",", "avg", "(", "product_price", ")", "from", "products", "group", "by", "product_type_code"], "question": "What is the average price for each type of product?", "question_toks": ["What", "is", "the", "average", "price", "for", "each", "type", "of", "product", "?"], "guid": 5910}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the first names and support rep ids for employees serving 10 or more customers?", "sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10", "example": {"db_id": "chinook_1", "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10", "query_toks": ["SELECT", "T1.FirstName", ",", "T1.SupportRepId", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "EMPLOYEE", "AS", "T2", "ON", "T1.SupportRepId", "=", "T2.EmployeeId", "GROUP", "BY", "T1.SupportRepId", "HAVING", "COUNT", "(", "*", ")", ">", "=", "10"], "query_toks_no_value": ["select", "t1", ".", "firstname", ",", "t1", ".", "supportrepid", "from", "customer", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "supportrepid", "=", "t2", ".", "employeeid", "group", "by", "t1", ".", "supportrepid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the first names and support rep ids for employees serving 10 or more customers?", "question_toks": ["What", "are", "the", "first", "names", "and", "support", "rep", "ids", "for", "employees", "serving", "10", "or", "more", "customers", "?"], "guid": 5911}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the address of store 1.", "sql": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1", "example": {"db_id": "sakila_1", "query": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1", "query_toks": ["SELECT", "T2.address", "FROM", "store", "AS", "T1", "JOIN", "address", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "store_id", "=", "1"], "query_toks_no_value": ["select", "t2", ".", "address", "from", "store", "as", "t1", "join", "address", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "store_id", "=", "value"], "question": "Return the address of store 1.", "question_toks": ["Return", "the", "address", "of", "store", "1", "."], "guid": 5912}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What are the title and rental rate of the film with the highest rental rate?", "sql": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1", "query_toks": ["SELECT", "title", ",", "rental_rate", "FROM", "film", "ORDER", "BY", "rental_rate", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "title", ",", "rental_rate", "from", "film", "order", "by", "rental_rate", "desc", "limit", "value"], "question": "What are the title and rental rate of the film with the highest rental rate?", "question_toks": ["What", "are", "the", "title", "and", "rental", "rate", "of", "the", "film", "with", "the", "highest", "rental", "rate", "?"], "guid": 5913}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | How many different payment methods are there?", "sql": "SELECT count(DISTINCT payment_method) FROM customers", "example": {"db_id": "customer_deliveries", "query": "SELECT count(DISTINCT payment_method) FROM customers", "query_toks": ["SELECT", "count", "(", "DISTINCT", "payment_method", ")", "FROM", "customers"], "query_toks_no_value": ["select", "count", "(", "distinct", "payment_method", ")", "from", "customers"], "question": "How many different payment methods are there?", "question_toks": ["How", "many", "different", "payment", "methods", "are", "there", "?"], "guid": 5914}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the valid from and valid to dates for the card with the number 4560596484842?", "sql": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"", "query_toks": ["SELECT", "date_valid_from", ",", "date_valid_to", "FROM", "Customers_cards", "WHERE", "card_number", "=", "``", "4560596484842", "''"], "query_toks_no_value": ["select", "date_valid_from", ",", "date_valid_to", "from", "customers_cards", "where", "card_number", "=", "value"], "question": "What are the valid from and valid to dates for the card with the number 4560596484842?", "question_toks": ["What", "are", "the", "valid", "from", "and", "valid", "to", "dates", "for", "the", "card", "with", "the", "number", "4560596484842", "?"], "guid": 5915}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show the number of customer cards.", "sql": "SELECT count(*) FROM Customers_cards", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Customers_cards", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers_cards"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers_cards"], "question": "Show the number of customer cards.", "question_toks": ["Show", "the", "number", "of", "customer", "cards", "."], "guid": 5916}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the address of all customers that live in Germany and have invoice.", "sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"", "example": {"db_id": "chinook_1", "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"", "query_toks": ["SELECT", "DISTINCT", "T1.Address", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "INVOICE", "AS", "T2", "ON", "T1.CustomerId", "=", "T2.CustomerId", "WHERE", "T1.country", "=", "``", "Germany", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "address", "from", "customer", "as", "t1", "join", "invoice", "as", "t2", "on", "t1", ".", "customerid", "=", "t2", ".", "customerid", "where", "t1", ".", "country", "=", "value"], "question": "Find the address of all customers that live in Germany and have invoice.", "question_toks": ["Find", "the", "address", "of", "all", "customers", "that", "live", "in", "Germany", "and", "have", "invoice", "."], "guid": 5917}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the full names of employees who help customers with the first name Leonie.", "sql": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"", "example": {"db_id": "chinook_1", "query": "SELECT T2.FirstName ,  T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.FirstName  =  \"Leonie\"", "query_toks": ["SELECT", "T2.FirstName", ",", "T2.LastName", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "EMPLOYEE", "AS", "T2", "ON", "T1.SupportRepId", "=", "T2.EmployeeId", "WHERE", "T1.FirstName", "=", "``", "Leonie", "''"], "query_toks_no_value": ["select", "t2", ".", "firstname", ",", "t2", ".", "lastname", "from", "customer", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "supportrepid", "=", "t2", ".", "employeeid", "where", "t1", ".", "firstname", "=", "value"], "question": "Find the full names of employees who help customers with the first name Leonie.", "question_toks": ["Find", "the", "full", "names", "of", "employees", "who", "help", "customers", "with", "the", "first", "name", "Leonie", "."], "guid": 5918}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Count the number of different companies.", "sql": "SELECT count(DISTINCT Company) FROM entrepreneur", "example": {"db_id": "entrepreneur", "query": "SELECT count(DISTINCT Company) FROM entrepreneur", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Company", ")", "FROM", "entrepreneur"], "query_toks_no_value": ["select", "count", "(", "distinct", "company", ")", "from", "entrepreneur"], "question": "Count the number of different companies.", "question_toks": ["Count", "the", "number", "of", "different", "companies", "."], "guid": 5919}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show the transaction type and the number of transactions.", "sql": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "example": {"db_id": "customers_card_transactions", "query": "SELECT transaction_type ,  count(*) FROM Financial_transactions GROUP BY transaction_type", "query_toks": ["SELECT", "transaction_type", ",", "count", "(", "*", ")", "FROM", "Financial_transactions", "GROUP", "BY", "transaction_type"], "query_toks_no_value": ["select", "transaction_type", ",", "count", "(", "*", ")", "from", "financial_transactions", "group", "by", "transaction_type"], "question": "Show the transaction type and the number of transactions.", "question_toks": ["Show", "the", "transaction", "type", "and", "the", "number", "of", "transactions", "."], "guid": 5920}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"", "example": {"db_id": "entrepreneur", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"", "query_toks": ["SELECT", "T2.Name", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Investor", "!", "=", "``", "Rachel", "Elnaugh", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "investor", "!", "=", "value"], "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?", "question_toks": ["What", "are", "the", "names", "of", "entrepreneurs", "whose", "investor", "is", "not", "``", "Rachel", "Elnaugh", "''", "?"], "guid": 5921}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the first and last names of the customers with the 10 cheapest invoices?", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "example": {"db_id": "store_1", "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10;", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "customers", "AS", "T1", "JOIN", "invoices", "AS", "T2", "ON", "T2.customer_id", "=", "T1.id", "ORDER", "BY", "total", "LIMIT", "10", ";"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "customers", "as", "t1", "join", "invoices", "as", "t2", "on", "t2", ".", "customer_id", "=", "t1", ".", "id", "order", "by", "total", "limit", "value"], "question": "What are the first and last names of the customers with the 10 cheapest invoices?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "the", "customers", "with", "the", "10", "cheapest", "invoices", "?"], "guid": 5922}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many lessons did the customer Ryan Goodwin complete?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id  = T2.customer_id WHERE T2.first_name = \"Rylan\" AND T2.last_name = \"Goodwin\" AND T1.lesson_status_code = \"Completed\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.first_name", "=", "``", "Rylan", "''", "AND", "T2.last_name", "=", "``", "Goodwin", "''", "AND", "T1.lesson_status_code", "=", "``", "Completed", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "lessons", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value", "and", "t1", ".", "lesson_status_code", "=", "value"], "question": "How many lessons did the customer Ryan Goodwin complete?", "question_toks": ["How", "many", "lessons", "did", "the", "customer", "Ryan", "Goodwin", "complete", "?"], "guid": 5923}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the last names of employees who serve at most 20 customers?", "sql": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20", "example": {"db_id": "chinook_1", "query": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20", "query_toks": ["SELECT", "T1.LastName", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "EMPLOYEE", "AS", "T2", "ON", "T1.SupportRepId", "=", "T2.EmployeeId", "GROUP", "BY", "T1.SupportRepId", "HAVING", "COUNT", "(", "*", ")", "<", "=", "20"], "query_toks_no_value": ["select", "t1", ".", "lastname", "from", "customer", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "supportrepid", "=", "t2", ".", "employeeid", "group", "by", "t1", ".", "supportrepid", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "What are the last names of employees who serve at most 20 customers?", "question_toks": ["What", "are", "the", "last", "names", "of", "employees", "who", "serve", "at", "most", "20", "customers", "?"], "guid": 5924}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Count the number of transactions.", "sql": "SELECT count(*) FROM Financial_transactions", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM Financial_transactions", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Financial_transactions"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "financial_transactions"], "question": "Count the number of transactions.", "question_toks": ["Count", "the", "number", "of", "transactions", "."], "guid": 5925}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the name of the customer that made the order with the largest quantity?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "WHERE", "t3.order_quantity", "=", "(", "SELECT", "max", "(", "order_quantity", ")", "FROM", "order_items", ")"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "where", "t3", ".", "order_quantity", "=", "(", "select", "max", "(", "order_quantity", ")", "from", "order_items", ")"], "question": "What is the name of the customer that made the order with the largest quantity?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "that", "made", "the", "order", "with", "the", "largest", "quantity", "?"], "guid": 5926}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the city with the most customers?", "sql": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "driving_school", "query": "SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "T2.city", "FROM", "Customers", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.customer_address_id", "=", "T2.address_id", "GROUP", "BY", "T2.city", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "city", "from", "customers", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "customer_address_id", "=", "t2", ".", "address_id", "group", "by", "t2", ".", "city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the city with the most customers?", "question_toks": ["What", "is", "the", "city", "with", "the", "most", "customers", "?"], "guid": 5927}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Where does the staff member with the first name Elsa live?", "sql": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'", "example": {"db_id": "sakila_1", "query": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'", "query_toks": ["SELECT", "T2.address", "FROM", "staff", "AS", "T1", "JOIN", "address", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T1.first_name", "=", "'Elsa", "'"], "query_toks_no_value": ["select", "t2", ".", "address", "from", "staff", "as", "t1", "join", "address", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "first_name", "=", "value"], "question": "Where does the staff member with the first name Elsa live?", "question_toks": ["Where", "does", "the", "staff", "member", "with", "the", "first", "name", "Elsa", "live", "?"], "guid": 5928}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | On which days more than one revisions were made on catalogs.", "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "example": {"db_id": "product_catalog", "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "query_toks": ["SELECT", "date_of_latest_revision", "FROM", "Catalogs", "GROUP", "BY", "date_of_latest_revision", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "date_of_latest_revision", "from", "catalogs", "group", "by", "date_of_latest_revision", "having", "count", "(", "*", ")", ">", "value"], "question": "On which days more than one revisions were made on catalogs.", "question_toks": ["On", "which", "days", "more", "than", "one", "revisions", "were", "made", "on", "catalogs", "."], "guid": 5929}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Tell me the number of orders with \"Second time\" as order detail.", "sql": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customer_orders", "WHERE", "order_details", "=", "``", "Second", "time", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customer_orders", "where", "order_details", "=", "value"], "question": "Tell me the number of orders with \"Second time\" as order detail.", "question_toks": ["Tell", "me", "the", "number", "of", "orders", "with", "``", "Second", "time", "''", "as", "order", "detail", "."], "guid": 5930}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the average amount of items ordered in each order?", "sql": "SELECT avg(order_quantity) FROM order_items", "example": {"db_id": "customers_and_addresses", "query": "SELECT avg(order_quantity) FROM order_items", "query_toks": ["SELECT", "avg", "(", "order_quantity", ")", "FROM", "order_items"], "query_toks_no_value": ["select", "avg", "(", "order_quantity", ")", "from", "order_items"], "question": "What is the average amount of items ordered in each order?", "question_toks": ["What", "is", "the", "average", "amount", "of", "items", "ordered", "in", "each", "order", "?"], "guid": 5931}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"", "example": {"db_id": "entrepreneur", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"", "query_toks": ["SELECT", "T2.Name", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Investor", "!", "=", "``", "Rachel", "Elnaugh", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "investor", "!", "=", "value"], "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.", "question_toks": ["Return", "the", "names", "of", "entrepreneurs", "do", "no", "not", "have", "the", "investor", "Rachel", "Elnaugh", "."], "guid": 5932}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Return the number of customers who have at least one order with \"Cancelled\" status.", "sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "customer_id", ")", "FROM", "customer_orders", "WHERE", "order_status", "=", "``", "Cancelled", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "customer_id", ")", "from", "customer_orders", "where", "order_status", "=", "value"], "question": "Return the number of customers who have at least one order with \"Cancelled\" status.", "question_toks": ["Return", "the", "number", "of", "customers", "who", "have", "at", "least", "one", "order", "with", "``", "Cancelled", "''", "status", "."], "guid": 5933}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is Nancy Edwards's address?", "sql": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "example": {"db_id": "store_1", "query": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "query_toks": ["SELECT", "address", "FROM", "employees", "WHERE", "first_name", "=", "``", "Nancy", "''", "AND", "last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "address", "from", "employees", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is Nancy Edwards's address?", "question_toks": ["What", "is", "Nancy", "Edwards", "'s", "address", "?"], "guid": 5934}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Count the number of different languages in these films.", "sql": "SELECT count(DISTINCT language_id) FROM film", "example": {"db_id": "sakila_1", "query": "SELECT count(DISTINCT language_id) FROM film", "query_toks": ["SELECT", "count", "(", "DISTINCT", "language_id", ")", "FROM", "film"], "query_toks_no_value": ["select", "count", "(", "distinct", "language_id", ")", "from", "film"], "question": "Count the number of different languages in these films.", "question_toks": ["Count", "the", "number", "of", "different", "languages", "in", "these", "films", "."], "guid": 5935}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.", "sql": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)", "example": {"db_id": "department_store", "query": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)", "query_toks": ["SELECT", "T1.product_id", "FROM", "product_suppliers", "AS", "T1", "JOIN", "products", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "WHERE", "T1.supplier_id", "=", "2", "AND", "T2.product_price", ">", "(", "SELECT", "avg", "(", "product_price", ")", "FROM", "products", ")"], "query_toks_no_value": ["select", "t1", ".", "product_id", "from", "product_suppliers", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t1", ".", "supplier_id", "=", "value", "and", "t2", ".", "product_price", ">", "(", "select", "avg", "(", "product_price", ")", "from", "products", ")"], "question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.", "question_toks": ["Return", "ids", "of", "all", "the", "products", "that", "are", "supplied", "by", "supplier", "id", "2", "and", "are", "more", "expensive", "than", "the", "average", "price", "of", "all", "products", "."], "guid": 5936}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the catalog publisher that has the most catalogs.", "sql": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "product_catalog", "query": "SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "catalog_publisher", "FROM", "catalogs", "GROUP", "BY", "catalog_publisher", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "catalog_publisher", "from", "catalogs", "group", "by", "catalog_publisher", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the catalog publisher that has the most catalogs.", "question_toks": ["Find", "the", "catalog", "publisher", "that", "has", "the", "most", "catalogs", "."], "guid": 5937}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | What are the name and level of catalog structure with level number between 5 and 10", "sql": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "example": {"db_id": "product_catalog", "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "query_toks": ["SELECT", "catalog_level_name", ",", "catalog_level_number", "FROM", "Catalog_Structure", "WHERE", "catalog_level_number", "BETWEEN", "5", "AND", "10"], "query_toks_no_value": ["select", "catalog_level_name", ",", "catalog_level_number", "from", "catalog_structure", "where", "catalog_level_number", "between", "value", "and", "value"], "question": "What are the name and level of catalog structure with level number between 5 and 10", "question_toks": ["What", "are", "the", "name", "and", "level", "of", "catalog", "structure", "with", "level", "number", "between", "5", "and", "10"], "guid": 5938}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the id of the department with the fewest staff assignments.", "sql": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "department_id", "FROM", "staff_department_assignments", "GROUP", "BY", "department_id", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "department_id", "from", "staff_department_assignments", "group", "by", "department_id", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "Return the id of the department with the fewest staff assignments.", "question_toks": ["Return", "the", "id", "of", "the", "department", "with", "the", "fewest", "staff", "assignments", "."], "guid": 5939}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the different customer ids, and how many cards does each one hold?", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id", "query_toks": ["SELECT", "customer_id", ",", "count", "(", "*", ")", "FROM", "Customers_cards", "GROUP", "BY", "customer_id"], "query_toks_no_value": ["select", "customer_id", ",", "count", "(", "*", ")", "from", "customers_cards", "group", "by", "customer_id"], "question": "What are the different customer ids, and how many cards does each one hold?", "question_toks": ["What", "are", "the", "different", "customer", "ids", ",", "and", "how", "many", "cards", "does", "each", "one", "hold", "?"], "guid": 5940}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What is the id and name of the staff who has been assigned for the least amount of time?", "sql": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1", "query_toks": ["SELECT", "T1.staff_id", ",", "T1.staff_name", "FROM", "staff", "AS", "T1", "JOIN", "Staff_Department_Assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "ORDER", "BY", "date_assigned_to", "-", "date_assigned_from", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "staff_id", ",", "t1", ".", "staff_name", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "order", "by", "date_assigned_to", "-", "date_assigned_from", "limit", "value"], "question": "What is the id and name of the staff who has been assigned for the least amount of time?", "question_toks": ["What", "is", "the", "id", "and", "name", "of", "the", "staff", "who", "has", "been", "assigned", "for", "the", "least", "amount", "of", "time", "?"], "guid": 5941}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Return the names of people, ordered by weight ascending.", "sql": "SELECT Name FROM People ORDER BY Weight ASC", "example": {"db_id": "entrepreneur", "query": "SELECT Name FROM People ORDER BY Weight ASC", "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Weight", "ASC"], "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "weight", "asc"], "question": "Return the names of people, ordered by weight ascending.", "question_toks": ["Return", "the", "names", "of", "people", ",", "ordered", "by", "weight", "ascending", "."], "guid": 5942}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many lessons were taught by a staff member whose first name has the letter 'a' in it?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.first_name", "LIKE", "``", "%", "a", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "lessons", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "first_name", "like", "value"], "question": "How many lessons were taught by a staff member whose first name has the letter 'a' in it?", "question_toks": ["How", "many", "lessons", "were", "taught", "by", "a", "staff", "member", "whose", "first", "name", "has", "the", "letter", "'a", "'", "in", "it", "?"], "guid": 5943}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | Find the full name of employee who supported the most number of customers.", "sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "store_1", "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "employees", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.id", "=", "T2.support_rep_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "employees", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "support_rep_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the full name of employee who supported the most number of customers.", "question_toks": ["Find", "the", "full", "name", "of", "employee", "who", "supported", "the", "most", "number", "of", "customers", "."], "guid": 5944}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the name of the album that has the track Ball to the Wall?", "sql": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";", "example": {"db_id": "store_1", "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\";", "query_toks": ["SELECT", "T1.title", "FROM", "albums", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "WHERE", "T2.name", "=", "``", "Balls", "to", "the", "Wall", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "albums", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "where", "t2", ".", "name", "=", "value"], "question": "What is the name of the album that has the track Ball to the Wall?", "question_toks": ["What", "is", "the", "name", "of", "the", "album", "that", "has", "the", "track", "Ball", "to", "the", "Wall", "?"], "guid": 5945}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | Find the name of tracks which are in Movies playlist but not in music playlist.", "sql": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "example": {"db_id": "store_1", "query": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'", "query_toks": ["SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "playlist_tracks", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "playlists", "AS", "T3", "ON", "T2.playlist_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Movies", "'", "EXCEPT", "SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "playlist_tracks", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "playlists", "AS", "T3", "ON", "T2.playlist_id", "=", "T3.id", "WHERE", "T3.name", "=", "'Music", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "playlist_tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "playlists", "as", "t3", "on", "t2", ".", "playlist_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value", "except", "select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "playlist_tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "playlists", "as", "t3", "on", "t2", ".", "playlist_id", "=", "t3", ".", "id", "where", "t3", ".", "name", "=", "value"], "question": "Find the name of tracks which are in Movies playlist but not in music playlist.", "question_toks": ["Find", "the", "name", "of", "tracks", "which", "are", "in", "Movies", "playlist", "but", "not", "in", "music", "playlist", "."], "guid": 5946}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | How many customers have email that contains \"gmail.com\"?", "sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"", "example": {"db_id": "chinook_1", "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "CUSTOMER", "WHERE", "Email", "LIKE", "``", "%", "gmail.com", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customer", "where", "email", "like", "value"], "question": "How many customers have email that contains \"gmail.com\"?", "question_toks": ["How", "many", "customers", "have", "email", "that", "contains", "``", "gmail.com", "''", "?"], "guid": 5947}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?", "sql": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000", "example": {"db_id": "store_product", "query": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000", "query_toks": ["SELECT", "District_name", ",", "City_Population", "FROM", "district", "WHERE", "City_Population", "BETWEEN", "200000", "AND", "2000000"], "query_toks_no_value": ["select", "district_name", ",", "city_population", "from", "district", "where", "city_population", "between", "value", "and", "value"], "question": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?", "question_toks": ["What", "are", "the", "district", "names", "and", "city", "populations", "for", "all", "districts", "that", "between", "200,000", "and", "2,000,000", "residents", "?"], "guid": 5948}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many transaction does each account have? Show the number and account id.", "sql": "SELECT count(*) ,  account_id FROM Financial_transactions", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) ,  account_id FROM Financial_transactions", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "account_id", "FROM", "Financial_transactions"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "account_id", "from", "financial_transactions"], "question": "How many transaction does each account have? Show the number and account id.", "question_toks": ["How", "many", "transaction", "does", "each", "account", "have", "?", "Show", "the", "number", "and", "account", "id", "."], "guid": 5949}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the different cities that have more than 100 memberships?", "sql": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100", "example": {"db_id": "shop_membership", "query": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100", "query_toks": ["SELECT", "DISTINCT", "city", "FROM", "branch", "WHERE", "membership_amount", ">", "=", "100"], "query_toks_no_value": ["select", "distinct", "city", "from", "branch", "where", "membership_amount", ">", "=", "value"], "question": "What are the different cities that have more than 100 memberships?", "question_toks": ["What", "are", "the", "different", "cities", "that", "have", "more", "than", "100", "memberships", "?"], "guid": 5950}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Show card number, name, and hometown for all members in a descending order of level.", "sql": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC", "example": {"db_id": "shop_membership", "query": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC", "query_toks": ["SELECT", "card_number", ",", "name", ",", "hometown", "FROM", "member", "ORDER", "BY", "LEVEL", "DESC"], "query_toks_no_value": ["select", "card_number", ",", "name", ",", "hometown", "from", "member", "order", "by", "level", "desc"], "question": "Show card number, name, and hometown for all members in a descending order of level.", "question_toks": ["Show", "card", "number", ",", "name", ",", "and", "hometown", "for", "all", "members", "in", "a", "descending", "order", "of", "level", "."], "guid": 5951}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | How many artists do not have any album?", "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "example": {"db_id": "chinook_1", "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ARTIST", "WHERE", "artistid", "NOT", "IN", "(", "SELECT", "artistid", "FROM", "ALBUM", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artist", "where", "artistid", "not", "in", "(", "select", "artistid", "from", "album", ")"], "question": "How many artists do not have any album?", "question_toks": ["How", "many", "artists", "do", "not", "have", "any", "album", "?"], "guid": 5952}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the total purchases for members rated at level 6?", "sql": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6", "example": {"db_id": "shop_membership", "query": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "purchase", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.member_id", "=", "T2.member_id", "WHERE", "T2.level", "=", "6"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "purchase", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "where", "t2", ".", "level", "=", "value"], "question": "What are the total purchases for members rated at level 6?", "question_toks": ["What", "are", "the", "total", "purchases", "for", "members", "rated", "at", "level", "6", "?"], "guid": 5953}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Which order deals with the most items? Return the order id.", "sql": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_orders", "query": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.order_id", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "GROUP", "BY", "T1.order_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "order_id", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "group", "by", "t1", ".", "order_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which order deals with the most items? Return the order id.", "question_toks": ["Which", "order", "deals", "with", "the", "most", "items", "?", "Return", "the", "order", "id", "."], "guid": 5954}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the list of cities that no customer is living in.", "sql": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)", "example": {"db_id": "customers_and_addresses", "query": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)", "query_toks": ["SELECT", "city", "FROM", "addresses", "WHERE", "city", "NOT", "IN", "(", "SELECT", "DISTINCT", "t3.city", "FROM", "customers", "AS", "t1", "JOIN", "customer_addresses", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "addresses", "AS", "t3", "ON", "t2.address_id", "=", "t3.address_id", ")"], "query_toks_no_value": ["select", "city", "from", "addresses", "where", "city", "not", "in", "(", "select", "distinct", "t3", ".", "city", "from", "customers", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", ")"], "question": "Find the list of cities that no customer is living in.", "question_toks": ["Find", "the", "list", "of", "cities", "that", "no", "customer", "is", "living", "in", "."], "guid": 5955}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Find the unit of measurement and product category code of product named \"chervil\".", "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"", "query_toks": ["SELECT", "t2.unit_of_measure", ",", "t2.product_category_code", "FROM", "products", "AS", "t1", "JOIN", "ref_product_categories", "AS", "t2", "ON", "t1.product_category_code", "=", "t2.product_category_code", "WHERE", "t1.product_name", "=", "``", "chervil", "''"], "query_toks_no_value": ["select", "t2", ".", "unit_of_measure", ",", "t2", ".", "product_category_code", "from", "products", "as", "t1", "join", "ref_product_categories", "as", "t2", "on", "t1", ".", "product_category_code", "=", "t2", ".", "product_category_code", "where", "t1", ".", "product_name", "=", "value"], "question": "Find the unit of measurement and product category code of product named \"chervil\".", "question_toks": ["Find", "the", "unit", "of", "measurement", "and", "product", "category", "code", "of", "product", "named", "``", "chervil", "''", "."], "guid": 5956}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the full name of the customer who made the first rental.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "customer", "AS", "T1", "JOIN", "rental", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "ORDER", "BY", "T2.rental_date", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "customer", "as", "t1", "join", "rental", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "order", "by", "t2", ".", "rental_date", "asc", "limit", "value"], "question": "Return the full name of the customer who made the first rental.", "question_toks": ["Return", "the", "full", "name", "of", "the", "customer", "who", "made", "the", "first", "rental", "."], "guid": 5957}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the number of distinct products Rodrick Heaney has bought so far.", "sql": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t3.product_id", ")", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "WHERE", "t1.customer_name", "=", "``", "Rodrick", "Heaney", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "product_id", ")", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Find the number of distinct products Rodrick Heaney has bought so far.", "question_toks": ["Find", "the", "number", "of", "distinct", "products", "Rodrick", "Heaney", "has", "bought", "so", "far", "."], "guid": 5958}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the sum of all payment amounts.", "sql": "SELECT sum(amount) FROM payment", "example": {"db_id": "sakila_1", "query": "SELECT sum(amount) FROM payment", "query_toks": ["SELECT", "sum", "(", "amount", ")", "FROM", "payment"], "query_toks_no_value": ["select", "sum", "(", "amount", ")", "from", "payment"], "question": "Return the sum of all payment amounts.", "question_toks": ["Return", "the", "sum", "of", "all", "payment", "amounts", "."], "guid": 5959}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Return the name of the heaviest entrepreneur.", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "example": {"db_id": "entrepreneur", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1", "query_toks": ["SELECT", "T2.Name", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Weight", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "weight", "desc", "limit", "value"], "question": "Return the name of the heaviest entrepreneur.", "question_toks": ["Return", "the", "name", "of", "the", "heaviest", "entrepreneur", "."], "guid": 5960}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the names and ids of the different albums, and how many tracks are on each?", "sql": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID", "example": {"db_id": "chinook_1", "query": "SELECT T1.Title ,  T2.AlbumID ,  COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId GROUP BY T2.AlbumID", "query_toks": ["SELECT", "T1.Title", ",", "T2.AlbumID", ",", "COUNT", "(", "*", ")", "FROM", "ALBUM", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.AlbumId", "=", "T2.AlbumId", "GROUP", "BY", "T2.AlbumID"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "albumid", ",", "count", "(", "*", ")", "from", "album", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "albumid", "=", "t2", ".", "albumid", "group", "by", "t2", ".", "albumid"], "question": "What are the names and ids of the different albums, and how many tracks are on each?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "the", "different", "albums", ",", "and", "how", "many", "tracks", "are", "on", "each", "?"], "guid": 5961}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Count the number of customers that have an email containing \"gmail.com\".", "sql": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"", "example": {"db_id": "chinook_1", "query": "SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE \"%gmail.com%\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "CUSTOMER", "WHERE", "Email", "LIKE", "``", "%", "gmail.com", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customer", "where", "email", "like", "value"], "question": "Count the number of customers that have an email containing \"gmail.com\".", "question_toks": ["Count", "the", "number", "of", "customers", "that", "have", "an", "email", "containing", "``", "gmail.com", "''", "."], "guid": 5962}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.", "sql": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"", "query_toks": ["SELECT", "product_details", "FROM", "products", "WHERE", "product_details", "LIKE", "``", "%", "Latte", "%", "''", "OR", "product_details", "LIKE", "``", "%", "Americano", "%", "''"], "query_toks_no_value": ["select", "product_details", "from", "products", "where", "product_details", "like", "value", "or", "product_details", "like", "value"], "question": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.", "question_toks": ["Which", "product", "'s", "detail", "contains", "the", "word", "``", "Latte", "''", "or", "``", "Americano", "''", "?", "Return", "the", "full", "detail", "."], "guid": 5963}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | Find the name and price of the product that has been ordered the greatest number of times.", "sql": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customer_deliveries", "query": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.product_name", ",", "t1.product_price", "FROM", "products", "AS", "t1", "JOIN", "regular_order_products", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "GROUP", "BY", "t2.product_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "product_name", ",", "t1", ".", "product_price", "from", "products", "as", "t1", "join", "regular_order_products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t2", ".", "product_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name and price of the product that has been ordered the greatest number of times.", "question_toks": ["Find", "the", "name", "and", "price", "of", "the", "product", "that", "has", "been", "ordered", "the", "greatest", "number", "of", "times", "."], "guid": 5964}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Which category does the product named \"flax\" belong to?", "sql": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_category_code FROM products WHERE product_name  =  \"flax\"", "query_toks": ["SELECT", "product_category_code", "FROM", "products", "WHERE", "product_name", "=", "``", "flax", "''"], "query_toks_no_value": ["select", "product_category_code", "from", "products", "where", "product_name", "=", "value"], "question": "Which category does the product named \"flax\" belong to?", "question_toks": ["Which", "category", "does", "the", "product", "named", "``", "flax", "''", "belong", "to", "?"], "guid": 5965}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List first name and last name of customers lived in city Lockmanfurt.", "sql": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";", "example": {"db_id": "driving_school", "query": "SELECT T1.first_name ,  T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = \"Lockmanfurt\";", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "Customers", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.customer_address_id", "=", "T2.address_id", "WHERE", "T2.city", "=", "``", "Lockmanfurt", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "customers", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "customer_address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "city", "=", "value"], "question": "List first name and last name of customers lived in city Lockmanfurt.", "question_toks": ["List", "first", "name", "and", "last", "name", "of", "customers", "lived", "in", "city", "Lockmanfurt", "."], "guid": 5966}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the id and detail of the vehicle used in lessons for most of the times?", "sql": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "driving_school", "query": "SELECT T1.vehicle_id ,  T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id  =  T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.vehicle_id", ",", "T1.vehicle_details", "FROM", "Vehicles", "AS", "T1", "JOIN", "Lessons", "AS", "T2", "ON", "T1.vehicle_id", "=", "T2.vehicle_id", "GROUP", "BY", "T1.vehicle_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "vehicle_id", ",", "t1", ".", "vehicle_details", "from", "vehicles", "as", "t1", "join", "lessons", "as", "t2", "on", "t1", ".", "vehicle_id", "=", "t2", ".", "vehicle_id", "group", "by", "t1", ".", "vehicle_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id and detail of the vehicle used in lessons for most of the times?", "question_toks": ["What", "is", "the", "id", "and", "detail", "of", "the", "vehicle", "used", "in", "lessons", "for", "most", "of", "the", "times", "?"], "guid": 5967}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | How many products are there in the records?", "sql": "SELECT count(*) FROM catalog_contents", "example": {"db_id": "product_catalog", "query": "SELECT count(*) FROM catalog_contents", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "catalog_contents"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "catalog_contents"], "question": "How many products are there in the records?", "question_toks": ["How", "many", "products", "are", "there", "in", "the", "records", "?"], "guid": 5968}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show the date valid from and the date valid to for the card with card number '4560596484842'.", "sql": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT date_valid_from ,  date_valid_to FROM Customers_cards WHERE card_number  =  \"4560596484842\"", "query_toks": ["SELECT", "date_valid_from", ",", "date_valid_to", "FROM", "Customers_cards", "WHERE", "card_number", "=", "``", "4560596484842", "''"], "query_toks_no_value": ["select", "date_valid_from", ",", "date_valid_to", "from", "customers_cards", "where", "card_number", "=", "value"], "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.", "question_toks": ["Show", "the", "date", "valid", "from", "and", "the", "date", "valid", "to", "for", "the", "card", "with", "card", "number", "'4560596484842", "'", "."], "guid": 5969}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the name of customers who did not pay with Cash.", "sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "WHERE", "payment_method", "!", "=", "'Cash", "'"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "where", "payment_method", "!", "=", "value"], "question": "Find the name of customers who did not pay with Cash.", "question_toks": ["Find", "the", "name", "of", "customers", "who", "did", "not", "pay", "with", "Cash", "."], "guid": 5970}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | Find the names and phone numbers of customers living in California state.", "sql": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'", "example": {"db_id": "customer_deliveries", "query": "SELECT t1.customer_name ,  t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'", "query_toks": ["SELECT", "t1.customer_name", ",", "t1.customer_phone", "FROM", "customers", "AS", "t1", "JOIN", "customer_addresses", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "addresses", "AS", "t3", "ON", "t2.address_id", "=", "t3.address_id", "WHERE", "t3.state_province_county", "=", "'California", "'"], "query_toks_no_value": ["select", "t1", ".", "customer_name", ",", "t1", ".", "customer_phone", "from", "customers", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", "where", "t3", ".", "state_province_county", "=", "value"], "question": "Find the names and phone numbers of customers living in California state.", "question_toks": ["Find", "the", "names", "and", "phone", "numbers", "of", "customers", "living", "in", "California", "state", "."], "guid": 5971}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show ids for all transactions whose amounts are greater than the average.", "sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)", "example": {"db_id": "customers_and_invoices", "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)", "query_toks": ["SELECT", "transaction_id", "FROM", "Financial_transactions", "WHERE", "transaction_amount", ">", "(", "SELECT", "avg", "(", "transaction_amount", ")", "FROM", "Financial_transactions", ")"], "query_toks_no_value": ["select", "transaction_id", "from", "financial_transactions", "where", "transaction_amount", ">", "(", "select", "avg", "(", "transaction_amount", ")", "from", "financial_transactions", ")"], "question": "Show ids for all transactions whose amounts are greater than the average.", "question_toks": ["Show", "ids", "for", "all", "transactions", "whose", "amounts", "are", "greater", "than", "the", "average", "."], "guid": 5972}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | List the phone numbers of all employees.", "sql": "SELECT Phone FROM EMPLOYEE", "example": {"db_id": "chinook_1", "query": "SELECT Phone FROM EMPLOYEE", "query_toks": ["SELECT", "Phone", "FROM", "EMPLOYEE"], "query_toks_no_value": ["select", "phone", "from", "employee"], "question": "List the phone numbers of all employees.", "question_toks": ["List", "the", "phone", "numbers", "of", "all", "employees", "."], "guid": 5973}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which city has the most addresses? List the city name, number of addresses, and city id.", "sql": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.city", ",", "count", "(", "*", ")", ",", "T1.city_id", "FROM", "address", "AS", "T1", "JOIN", "city", "AS", "T2", "ON", "T1.city_id", "=", "T2.city_id", "GROUP", "BY", "T1.city_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "city", ",", "count", "(", "*", ")", ",", "t1", ".", "city_id", "from", "address", "as", "t1", "join", "city", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "city_id", "group", "by", "t1", ".", "city_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which city has the most addresses? List the city name, number of addresses, and city id.", "question_toks": ["Which", "city", "has", "the", "most", "addresses", "?", "List", "the", "city", "name", ",", "number", "of", "addresses", ",", "and", "city", "id", "."], "guid": 5974}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many distinct order ids correspond to each product?", "sql": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT product_id ,  count(DISTINCT order_id) FROM Order_items GROUP BY product_id", "query_toks": ["SELECT", "product_id", ",", "count", "(", "DISTINCT", "order_id", ")", "FROM", "Order_items", "GROUP", "BY", "product_id"], "query_toks_no_value": ["select", "product_id", ",", "count", "(", "distinct", "order_id", ")", "from", "order_items", "group", "by", "product_id"], "question": "How many distinct order ids correspond to each product?", "question_toks": ["How", "many", "distinct", "order", "ids", "correspond", "to", "each", "product", "?"], "guid": 5975}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What are the countries that contain 3 or more cities?", "sql": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3", "example": {"db_id": "sakila_1", "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3", "query_toks": ["SELECT", "T2.country", "FROM", "city", "AS", "T1", "JOIN", "country", "AS", "T2", "ON", "T1.country_id", "=", "T2.country_id", "GROUP", "BY", "T2.country_id", "HAVING", "count", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "country", "from", "city", "as", "t1", "join", "country", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "group", "by", "t2", ".", "country_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the countries that contain 3 or more cities?", "question_toks": ["What", "are", "the", "countries", "that", "contain", "3", "or", "more", "cities", "?"], "guid": 5976}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Find the id and color description of the products with at least 2 characteristics.", "sql": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "t1.product_id", ",", "t2.color_description", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "JOIN", "product_characteristics", "AS", "t3", "ON", "t1.product_id", "=", "t3.product_id", "GROUP", "BY", "t1.product_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "product_id", ",", "t2", ".", "color_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "join", "product_characteristics", "as", "t3", "on", "t1", ".", "product_id", "=", "t3", ".", "product_id", "group", "by", "t1", ".", "product_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the id and color description of the products with at least 2 characteristics.", "question_toks": ["Find", "the", "id", "and", "color", "description", "of", "the", "products", "with", "at", "least", "2", "characteristics", "."], "guid": 5977}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | How many products have their color described as 'white' or have a characteristic with the name 'hot'?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "JOIN", "ref_colors", "AS", "t4", "ON", "t1.color_code", "=", "t4.color_code", "WHERE", "t4.color_description", "=", "``", "white", "''", "OR", "t3.characteristic_name", "=", "``", "hot", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "join", "ref_colors", "as", "t4", "on", "t1", ".", "color_code", "=", "t4", ".", "color_code", "where", "t4", ".", "color_description", "=", "value", "or", "t3", ".", "characteristic_name", "=", "value"], "question": "How many products have their color described as 'white' or have a characteristic with the name 'hot'?", "question_toks": ["How", "many", "products", "have", "their", "color", "described", "as", "'white", "'", "or", "have", "a", "characteristic", "with", "the", "name", "'hot", "'", "?"], "guid": 5978}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the attribute data type for the attribute named \"Green\".", "sql": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"", "example": {"db_id": "product_catalog", "query": "SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name  =  \"Green\"", "query_toks": ["SELECT", "attribute_data_type", "FROM", "Attribute_Definitions", "WHERE", "attribute_name", "=", "``", "Green", "''"], "query_toks_no_value": ["select", "attribute_data_type", "from", "attribute_definitions", "where", "attribute_name", "=", "value"], "question": "Find the attribute data type for the attribute named \"Green\".", "question_toks": ["Find", "the", "attribute", "data", "type", "for", "the", "attribute", "named", "``", "Green", "''", "."], "guid": 5979}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the different product sizes?", "sql": "SELECT DISTINCT product_size FROM Products", "example": {"db_id": "customers_and_invoices", "query": "SELECT DISTINCT product_size FROM Products", "query_toks": ["SELECT", "DISTINCT", "product_size", "FROM", "Products"], "query_toks_no_value": ["select", "distinct", "product_size", "from", "products"], "question": "What are the different product sizes?", "question_toks": ["What", "are", "the", "different", "product", "sizes", "?"], "guid": 5980}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the title and inventory id of the film that is rented most often.", "sql": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.title", ",", "T2.inventory_id", "FROM", "film", "AS", "T1", "JOIN", "inventory", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "JOIN", "rental", "AS", "T3", "ON", "T2.inventory_id", "=", "T3.inventory_id", "GROUP", "BY", "T2.inventory_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "inventory_id", "from", "film", "as", "t1", "join", "inventory", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "join", "rental", "as", "t3", "on", "t2", ".", "inventory_id", "=", "t3", ".", "inventory_id", "group", "by", "t2", ".", "inventory_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the title and inventory id of the film that is rented most often.", "question_toks": ["Return", "the", "title", "and", "inventory", "id", "of", "the", "film", "that", "is", "rented", "most", "often", "."], "guid": 5981}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the names of customers who use payment method \"Cash\"?", "sql": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers WHERE payment_method  =  \"Cash\"", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "WHERE", "payment_method", "=", "``", "Cash", "''"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "where", "payment_method", "=", "value"], "question": "What are the names of customers who use payment method \"Cash\"?", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "use", "payment", "method", "``", "Cash", "''", "?"], "guid": 5982}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show all dates of transactions whose type code is \"SALE\".", "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"", "example": {"db_id": "tracking_share_transactions", "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"", "query_toks": ["SELECT", "date_of_transaction", "FROM", "TRANSACTIONS", "WHERE", "transaction_type_code", "=", "``", "SALE", "''"], "query_toks_no_value": ["select", "date_of_transaction", "from", "transactions", "where", "transaction_type_code", "=", "value"], "question": "Show all dates of transactions whose type code is \"SALE\".", "question_toks": ["Show", "all", "dates", "of", "transactions", "whose", "type", "code", "is", "``", "SALE", "''", "."], "guid": 5983}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | List the name of all products along with the number of complaints that they have received.", "sql": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name", "example": {"db_id": "customer_complaints", "query": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name", "query_toks": ["SELECT", "t1.product_name", ",", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "GROUP", "BY", "t1.product_name"], "query_toks_no_value": ["select", "t1", ".", "product_name", ",", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_name"], "question": "List the name of all products along with the number of complaints that they have received.", "question_toks": ["List", "the", "name", "of", "all", "products", "along", "with", "the", "number", "of", "complaints", "that", "they", "have", "received", "."], "guid": 5984}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List Aerosmith's albums.", "sql": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";", "example": {"db_id": "store_1", "query": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\";", "query_toks": ["SELECT", "T1.title", "FROM", "albums", "AS", "T1", "JOIN", "artists", "AS", "T2", "ON", "T1.artist_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Aerosmith", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "albums", "as", "t1", "join", "artists", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "List Aerosmith's albums.", "question_toks": ["List", "Aerosmith", "'s", "albums", "."], "guid": 5985}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show the customer ids and firstname without a credit card.", "sql": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"", "query_toks": ["SELECT", "customer_id", ",", "customer_first_name", "FROM", "Customers", "EXCEPT", "SELECT", "T1.customer_id", ",", "T2.customer_first_name", "FROM", "Customers_cards", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "card_type_code", "=", "``", "Credit", "''"], "query_toks_no_value": ["select", "customer_id", ",", "customer_first_name", "from", "customers", "except", "select", "t1", ".", "customer_id", ",", "t2", ".", "customer_first_name", "from", "customers_cards", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "card_type_code", "=", "value"], "question": "Show the customer ids and firstname without a credit card.", "question_toks": ["Show", "the", "customer", "ids", "and", "firstname", "without", "a", "credit", "card", "."], "guid": 5986}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many transactions correspond to each invoice number?", "sql": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number", "example": {"db_id": "customers_and_invoices", "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number", "query_toks": ["SELECT", "invoice_number", ",", "count", "(", "*", ")", "FROM", "Financial_transactions", "GROUP", "BY", "invoice_number"], "query_toks_no_value": ["select", "invoice_number", ",", "count", "(", "*", ")", "from", "financial_transactions", "group", "by", "invoice_number"], "question": "How many transactions correspond to each invoice number?", "question_toks": ["How", "many", "transactions", "correspond", "to", "each", "invoice", "number", "?"], "guid": 5987}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.date_order_placed", ">", "=", "``", "2009-01-01", "''", "AND", "T2.date_order_placed", "<", "=", "``", "2010-01-01", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "date_order_placed", ">", "=", "value", "and", "t2", ".", "date_order_placed", "<", "=", "value"], "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.", "question_toks": ["Give", "me", "the", "names", "of", "customers", "who", "have", "placed", "orders", "between", "2009-01-01", "and", "2010-01-01", "."], "guid": 5988}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show all product names and the total quantity ordered for each product name.", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "query_toks": ["SELECT", "T2.product_name", ",", "sum", "(", "T1.product_quantity", ")", "FROM", "Order_items", "AS", "T1", "JOIN", "Products", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "GROUP", "BY", "T2.product_name"], "query_toks_no_value": ["select", "t2", ".", "product_name", ",", "sum", "(", "t1", ".", "product_quantity", ")", "from", "order_items", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t2", ".", "product_name"], "question": "Show all product names and the total quantity ordered for each product name.", "question_toks": ["Show", "all", "product", "names", "and", "the", "total", "quantity", "ordered", "for", "each", "product", "name", "."], "guid": 5989}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Which catalog publishers have substring \"Murray\" in their names?", "sql": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"", "example": {"db_id": "product_catalog", "query": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"", "query_toks": ["SELECT", "distinct", "(", "catalog_publisher", ")", "FROM", "catalogs", "WHERE", "catalog_publisher", "LIKE", "``", "%", "Murray", "%", "''"], "query_toks_no_value": ["select", "distinct", "(", "catalog_publisher", ")", "from", "catalogs", "where", "catalog_publisher", "like", "value"], "question": "Which catalog publishers have substring \"Murray\" in their names?", "question_toks": ["Which", "catalog", "publishers", "have", "substring", "``", "Murray", "''", "in", "their", "names", "?"], "guid": 5990}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | What is the product with the highest height? Give me the catalog entry name.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "query_toks": ["SELECT", "catalog_entry_name", "FROM", "catalog_contents", "ORDER", "BY", "height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "catalog_entry_name", "from", "catalog_contents", "order", "by", "height", "desc", "limit", "value"], "question": "What is the product with the highest height? Give me the catalog entry name.", "question_toks": ["What", "is", "the", "product", "with", "the", "highest", "height", "?", "Give", "me", "the", "catalog", "entry", "name", "."], "guid": 5991}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the list of attribute data types possessed by more than 3 attribute definitions.", "sql": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3", "example": {"db_id": "product_catalog", "query": "SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING count(*)  >  3", "query_toks": ["SELECT", "attribute_data_type", "FROM", "Attribute_Definitions", "GROUP", "BY", "attribute_data_type", "HAVING", "count", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "attribute_data_type", "from", "attribute_definitions", "group", "by", "attribute_data_type", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.", "question_toks": ["Find", "the", "list", "of", "attribute", "data", "types", "possessed", "by", "more", "than", "3", "attribute", "definitions", "."], "guid": 5992}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | Which country does customer with first name as Carole and last name as Bernhard lived in?", "sql": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "example": {"db_id": "driving_school", "query": "SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "query_toks": ["SELECT", "T2.country", "FROM", "Customers", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.customer_address_id", "=", "T2.address_id", "WHERE", "T1.first_name", "=", "``", "Carole", "''", "AND", "T1.last_name", "=", "``", "Bernhard", "''"], "query_toks_no_value": ["select", "t2", ".", "country", "from", "customers", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "customer_address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "first_name", "=", "value", "and", "t1", ".", "last_name", "=", "value"], "question": "Which country does customer with first name as Carole and last name as Bernhard lived in?", "question_toks": ["Which", "country", "does", "customer", "with", "first", "name", "as", "Carole", "and", "last", "name", "as", "Bernhard", "lived", "in", "?"], "guid": 5993}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Return the id and full name of the customer who has the fewest accounts.", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "customers_card_transactions", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.customer_id", ",", "T2.customer_first_name", ",", "T2.customer_last_name", "FROM", "Customers_cards", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_id", ",", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", "from", "customers_cards", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Return the id and full name of the customer who has the fewest accounts.", "question_toks": ["Return", "the", "id", "and", "full", "name", "of", "the", "customer", "who", "has", "the", "fewest", "accounts", "."], "guid": 5994}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the film title and inventory id of the item in the inventory which was rented most frequently?", "sql": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.title", ",", "T2.inventory_id", "FROM", "film", "AS", "T1", "JOIN", "inventory", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "JOIN", "rental", "AS", "T3", "ON", "T2.inventory_id", "=", "T3.inventory_id", "GROUP", "BY", "T2.inventory_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "inventory_id", "from", "film", "as", "t1", "join", "inventory", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "join", "rental", "as", "t3", "on", "t2", ".", "inventory_id", "=", "t3", ".", "inventory_id", "group", "by", "t2", ".", "inventory_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?", "question_toks": ["What", "is", "the", "film", "title", "and", "inventory", "id", "of", "the", "item", "in", "the", "inventory", "which", "was", "rented", "most", "frequently", "?"], "guid": 5995}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the customer ids for customers who do not have an account?", "sql": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts", "example": {"db_id": "customers_and_invoices", "query": "SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts", "query_toks": ["SELECT", "customer_id", "FROM", "Customers", "EXCEPT", "SELECT", "customer_id", "FROM", "Accounts"], "query_toks_no_value": ["select", "customer_id", "from", "customers", "except", "select", "customer_id", "from", "accounts"], "question": "What are the customer ids for customers who do not have an account?", "question_toks": ["What", "are", "the", "customer", "ids", "for", "customers", "who", "do", "not", "have", "an", "account", "?"], "guid": 5996}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Tell me the payment method used by the customer who ordered the least amount of goods in total.", "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1", "query_toks": ["SELECT", "t1.payment_method", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "GROUP", "BY", "t1.customer_name", "ORDER", "BY", "sum", "(", "t3.order_quantity", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "payment_method", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "group", "by", "t1", ".", "customer_name", "order", "by", "sum", "(", "t3", ".", "order_quantity", ")", "limit", "value"], "question": "Tell me the payment method used by the customer who ordered the least amount of goods in total.", "question_toks": ["Tell", "me", "the", "payment", "method", "used", "by", "the", "customer", "who", "ordered", "the", "least", "amount", "of", "goods", "in", "total", "."], "guid": 5997}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the name and level of catalog structure with level between 5 and 10.", "sql": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "example": {"db_id": "product_catalog", "query": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10", "query_toks": ["SELECT", "catalog_level_name", ",", "catalog_level_number", "FROM", "Catalog_Structure", "WHERE", "catalog_level_number", "BETWEEN", "5", "AND", "10"], "query_toks_no_value": ["select", "catalog_level_name", ",", "catalog_level_number", "from", "catalog_structure", "where", "catalog_level_number", "between", "value", "and", "value"], "question": "Find the name and level of catalog structure with level between 5 and 10.", "question_toks": ["Find", "the", "name", "and", "level", "of", "catalog", "structure", "with", "level", "between", "5", "and", "10", "."], "guid": 5998}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | Show the detail of vehicle with id 1.", "sql": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;", "example": {"db_id": "driving_school", "query": "SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1;", "query_toks": ["SELECT", "vehicle_details", "FROM", "Vehicles", "WHERE", "vehicle_id", "=", "1", ";"], "query_toks_no_value": ["select", "vehicle_details", "from", "vehicles", "where", "vehicle_id", "=", "value"], "question": "Show the detail of vehicle with id 1.", "question_toks": ["Show", "the", "detail", "of", "vehicle", "with", "id", "1", "."], "guid": 5999}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the names of customers who never ordered product Latte.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "EXCEPT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "JOIN", "products", "AS", "t4", "ON", "t3.product_id", "=", "t4.product_id", "WHERE", "t4.product_details", "=", "'Latte", "'"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "except", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "join", "products", "as", "t4", "on", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t4", ".", "product_details", "=", "value"], "question": "Find the names of customers who never ordered product Latte.", "question_toks": ["Find", "the", "names", "of", "customers", "who", "never", "ordered", "product", "Latte", "."], "guid": 6000}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the dates on which more than one revisions were made.", "sql": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "example": {"db_id": "product_catalog", "query": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1", "query_toks": ["SELECT", "date_of_latest_revision", "FROM", "Catalogs", "GROUP", "BY", "date_of_latest_revision", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "date_of_latest_revision", "from", "catalogs", "group", "by", "date_of_latest_revision", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the dates on which more than one revisions were made.", "question_toks": ["Find", "the", "dates", "on", "which", "more", "than", "one", "revisions", "were", "made", "."], "guid": 6001}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the ids for transactions that have an amount greater than the average amount of a transaction?", "sql": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)", "example": {"db_id": "customers_and_invoices", "query": "SELECT transaction_id FROM Financial_transactions WHERE transaction_amount  >  (SELECT avg(transaction_amount) FROM Financial_transactions)", "query_toks": ["SELECT", "transaction_id", "FROM", "Financial_transactions", "WHERE", "transaction_amount", ">", "(", "SELECT", "avg", "(", "transaction_amount", ")", "FROM", "Financial_transactions", ")"], "query_toks_no_value": ["select", "transaction_id", "from", "financial_transactions", "where", "transaction_amount", ">", "(", "select", "avg", "(", "transaction_amount", ")", "from", "financial_transactions", ")"], "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?", "question_toks": ["What", "are", "the", "ids", "for", "transactions", "that", "have", "an", "amount", "greater", "than", "the", "average", "amount", "of", "a", "transaction", "?"], "guid": 6002}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.", "sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "example": {"db_id": "store_1", "query": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "SUM", "(", "T2.total", ")", "FROM", "customers", "AS", "T1", "JOIN", "invoices", "AS", "T2", "ON", "T2.customer_id", "=", "T1.id", "GROUP", "BY", "T1.id", "ORDER", "BY", "SUM", "(", "T2.total", ")", "DESC", "LIMIT", "10", ";"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "sum", "(", "t2", ".", "total", ")", "from", "customers", "as", "t1", "join", "invoices", "as", "t2", "on", "t2", ".", "customer_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "order", "by", "sum", "(", "t2", ".", "total", ")", "desc", "limit", "value"], "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.", "question_toks": ["List", "the", "top", "10", "customers", "by", "total", "gross", "sales", ".", "List", "customers", "'", "first", "and", "last", "name", "and", "total", "gross", "sales", "."], "guid": 6003}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What is the average price of the products for each category?", "sql": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code", "example": {"db_id": "customer_complaints", "query": "SELECT avg(product_price) ,  product_category_code FROM products GROUP BY product_category_code", "query_toks": ["SELECT", "avg", "(", "product_price", ")", ",", "product_category_code", "FROM", "products", "GROUP", "BY", "product_category_code"], "query_toks_no_value": ["select", "avg", "(", "product_price", ")", ",", "product_category_code", "from", "products", "group", "by", "product_category_code"], "question": "What is the average price of the products for each category?", "question_toks": ["What", "is", "the", "average", "price", "of", "the", "products", "for", "each", "category", "?"], "guid": 6004}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What is the characteristic name used by most number of the products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t3.characteristic_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "GROUP", "BY", "t3.characteristic_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "characteristic_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "group", "by", "t3", ".", "characteristic_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the characteristic name used by most number of the products?", "question_toks": ["What", "is", "the", "characteristic", "name", "used", "by", "most", "number", "of", "the", "products", "?"], "guid": 6005}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the maximum and minimum durations of tracks in milliseconds.", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK", "example": {"db_id": "chinook_1", "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK", "query_toks": ["SELECT", "max", "(", "Milliseconds", ")", ",", "min", "(", "Milliseconds", ")", "FROM", "TRACK"], "query_toks_no_value": ["select", "max", "(", "milliseconds", ")", ",", "min", "(", "milliseconds", ")", "from", "track"], "question": "Find the maximum and minimum durations of tracks in milliseconds.", "question_toks": ["Find", "the", "maximum", "and", "minimum", "durations", "of", "tracks", "in", "milliseconds", "."], "guid": 6006}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the birth dates of employees living in Edmonton?", "sql": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"", "example": {"db_id": "chinook_1", "query": "SELECT BirthDate FROM EMPLOYEE WHERE City  =  \"Edmonton\"", "query_toks": ["SELECT", "BirthDate", "FROM", "EMPLOYEE", "WHERE", "City", "=", "``", "Edmonton", "''"], "query_toks_no_value": ["select", "birthdate", "from", "employee", "where", "city", "=", "value"], "question": "What are the birth dates of employees living in Edmonton?", "question_toks": ["What", "are", "the", "birth", "dates", "of", "employees", "living", "in", "Edmonton", "?"], "guid": 6007}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer names.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "On", "Road", "''", "INTERSECT", "SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "Shipped", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value", "intersect", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"], "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer names.", "question_toks": ["Which", "customers", "have", "both", "``", "On", "Road", "''", "and", "``", "Shipped", "''", "as", "order", "status", "?", "List", "the", "customer", "names", "."], "guid": 6008}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | List the names of all the distinct customers who bought a keyboard.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"", "example": {"db_id": "department_store", "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"", "query_toks": ["SELECT", "DISTINCT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "JOIN", "order_items", "AS", "T3", "ON", "T2.order_id", "=", "T3.order_id", "JOIN", "products", "AS", "T4", "ON", "T3.product_id", "=", "T4.product_id", "WHERE", "T4.product_name", "=", "``", "keyboard", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "join", "products", "as", "t4", "on", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t4", ".", "product_name", "=", "value"], "question": "List the names of all the distinct customers who bought a keyboard.", "question_toks": ["List", "the", "names", "of", "all", "the", "distinct", "customers", "who", "bought", "a", "keyboard", "."], "guid": 6009}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Show all city with a branch opened in 2001 and a branch with more than 100 membership.", "sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100", "example": {"db_id": "shop_membership", "query": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100", "query_toks": ["SELECT", "city", "FROM", "branch", "WHERE", "open_year", "=", "2001", "AND", "membership_amount", ">", "100"], "query_toks_no_value": ["select", "city", "from", "branch", "where", "open_year", "=", "value", "and", "membership_amount", ">", "value"], "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.", "question_toks": ["Show", "all", "city", "with", "a", "branch", "opened", "in", "2001", "and", "a", "branch", "with", "more", "than", "100", "membership", "."], "guid": 6010}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What is the weight of the shortest person?", "sql": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "example": {"db_id": "entrepreneur", "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1", "query_toks": ["SELECT", "Weight", "FROM", "people", "ORDER", "BY", "Height", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "weight", "from", "people", "order", "by", "height", "asc", "limit", "value"], "question": "What is the weight of the shortest person?", "question_toks": ["What", "is", "the", "weight", "of", "the", "shortest", "person", "?"], "guid": 6011}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the account ids, customer ids, and account names for all the accounts?", "sql": "SELECT account_id ,  customer_id ,  account_name FROM Accounts", "example": {"db_id": "customers_card_transactions", "query": "SELECT account_id ,  customer_id ,  account_name FROM Accounts", "query_toks": ["SELECT", "account_id", ",", "customer_id", ",", "account_name", "FROM", "Accounts"], "query_toks_no_value": ["select", "account_id", ",", "customer_id", ",", "account_name", "from", "accounts"], "question": "What are the account ids, customer ids, and account names for all the accounts?", "question_toks": ["What", "are", "the", "account", "ids", ",", "customer", "ids", ",", "and", "account", "names", "for", "all", "the", "accounts", "?"], "guid": 6012}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | How many debit cards do we have?", "sql": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers_cards", "WHERE", "card_type_code", "=", "``", "Debit", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers_cards", "where", "card_type_code", "=", "value"], "question": "How many debit cards do we have?", "question_toks": ["How", "many", "debit", "cards", "do", "we", "have", "?"], "guid": 6013}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Show all distinct city where branches with at least 100 memberships are located.", "sql": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100", "example": {"db_id": "shop_membership", "query": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100", "query_toks": ["SELECT", "DISTINCT", "city", "FROM", "branch", "WHERE", "membership_amount", ">", "=", "100"], "query_toks_no_value": ["select", "distinct", "city", "from", "branch", "where", "membership_amount", ">", "=", "value"], "question": "Show all distinct city where branches with at least 100 memberships are located.", "question_toks": ["Show", "all", "distinct", "city", "where", "branches", "with", "at", "least", "100", "memberships", "are", "located", "."], "guid": 6014}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many employees who are IT staff are from each city?", "sql": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "example": {"db_id": "store_1", "query": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "city", "FROM", "employees", "WHERE", "title", "=", "'IT", "Staff", "'", "GROUP", "BY", "city"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "city", "from", "employees", "where", "title", "=", "value", "group", "by", "city"], "question": "How many employees who are IT staff are from each city?", "question_toks": ["How", "many", "employees", "who", "are", "IT", "staff", "are", "from", "each", "city", "?"], "guid": 6015}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the titles and ids for albums containing tracks with unit price greater than 1?", "sql": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "example": {"db_id": "chinook_1", "query": "SELECT T1.Title ,  T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId  =  T2.AlbumId WHERE T2.UnitPrice  >  1 GROUP BY T2.AlbumID", "query_toks": ["SELECT", "T1.Title", ",", "T2.AlbumID", "FROM", "ALBUM", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.AlbumId", "=", "T2.AlbumId", "WHERE", "T2.UnitPrice", ">", "1", "GROUP", "BY", "T2.AlbumID"], "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "albumid", "from", "album", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "albumid", "=", "t2", ".", "albumid", "where", "t2", ".", "unitprice", ">", "value", "group", "by", "t2", ".", "albumid"], "question": "What are the titles and ids for albums containing tracks with unit price greater than 1?", "question_toks": ["What", "are", "the", "titles", "and", "ids", "for", "albums", "containing", "tracks", "with", "unit", "price", "greater", "than", "1", "?"], "guid": 6016}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What is the name and opening year for the branch that registered the most members in 2016?", "sql": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "shop_membership", "query": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", ",", "T2.open_year", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "branch", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T1.register_year", "=", "2016", "GROUP", "BY", "T2.branch_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "open_year", "from", "membership_register_branch", "as", "t1", "join", "branch", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t1", ".", "register_year", "=", "value", "group", "by", "t2", ".", "branch_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and opening year for the branch that registered the most members in 2016?", "question_toks": ["What", "is", "the", "name", "and", "opening", "year", "for", "the", "branch", "that", "registered", "the", "most", "members", "in", "2016", "?"], "guid": 6017}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | Find out 5 customers who most recently purchased something. List customers' first and last name.", "sql": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "example": {"db_id": "store_1", "query": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY T2.invoice_date DESC LIMIT 5;", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "customers", "AS", "T1", "JOIN", "invoices", "AS", "T2", "ON", "T2.customer_id", "=", "T1.id", "ORDER", "BY", "T2.invoice_date", "DESC", "LIMIT", "5", ";"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "customers", "as", "t1", "join", "invoices", "as", "t2", "on", "t2", ".", "customer_id", "=", "t1", ".", "id", "order", "by", "t2", ".", "invoice_date", "desc", "limit", "value"], "question": "Find out 5 customers who most recently purchased something. List customers' first and last name.", "question_toks": ["Find", "out", "5", "customers", "who", "most", "recently", "purchased", "something", ".", "List", "customers", "'", "first", "and", "last", "name", "."], "guid": 6018}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the unit price of the tune \"Fast As a Shark\"?", "sql": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";", "example": {"db_id": "store_1", "query": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";", "query_toks": ["SELECT", "unit_price", "FROM", "tracks", "WHERE", "name", "=", "``", "Fast", "As", "a", "Shark", "''", ";"], "query_toks_no_value": ["select", "unit_price", "from", "tracks", "where", "name", "=", "value"], "question": "What is the unit price of the tune \"Fast As a Shark\"?", "question_toks": ["What", "is", "the", "unit", "price", "of", "the", "tune", "``", "Fast", "As", "a", "Shark", "''", "?"], "guid": 6019}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | When did Carole Bernhard first become a customer?", "sql": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";", "example": {"db_id": "driving_school", "query": "SELECT date_became_customer FROM Customers WHERE first_name = \"Carole\" AND last_name = \"Bernhard\";", "query_toks": ["SELECT", "date_became_customer", "FROM", "Customers", "WHERE", "first_name", "=", "``", "Carole", "''", "AND", "last_name", "=", "``", "Bernhard", "''", ";"], "query_toks_no_value": ["select", "date_became_customer", "from", "customers", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "When did Carole Bernhard first become a customer?", "question_toks": ["When", "did", "Carole", "Bernhard", "first", "become", "a", "customer", "?"], "guid": 6020}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | How many department stores does the store chain South have?", "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"", "example": {"db_id": "department_store", "query": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "department_stores", "AS", "T1", "JOIN", "department_store_chain", "AS", "T2", "ON", "T1.dept_store_chain_id", "=", "T2.dept_store_chain_id", "WHERE", "T2.dept_store_chain_name", "=", "``", "South", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department_stores", "as", "t1", "join", "department_store_chain", "as", "t2", "on", "t1", ".", "dept_store_chain_id", "=", "t2", ".", "dept_store_chain_id", "where", "t2", ".", "dept_store_chain_name", "=", "value"], "question": "How many department stores does the store chain South have?", "question_toks": ["How", "many", "department", "stores", "does", "the", "store", "chain", "South", "have", "?"], "guid": 6021}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What is the description of the color used by least products?", "sql": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "t2.color_description", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "GROUP", "BY", "t2.color_description", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "color_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "group", "by", "t2", ".", "color_description", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the description of the color used by least products?", "question_toks": ["What", "is", "the", "description", "of", "the", "color", "used", "by", "least", "products", "?"], "guid": 6022}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the id of the customer who made the most orders.", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.customer_id", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the id of the customer who made the most orders.", "question_toks": ["Find", "the", "id", "of", "the", "customer", "who", "made", "the", "most", "orders", "."], "guid": 6023}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the names of the products that have a color description of 'red' and the 'fast' characteristic?", "sql": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"", "query_toks": ["SELECT", "product_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "JOIN", "ref_colors", "AS", "t4", "ON", "t1.color_code", "=", "t4.color_code", "WHERE", "t4.color_description", "=", "``", "red", "''", "AND", "t3.characteristic_name", "=", "``", "fast", "''"], "query_toks_no_value": ["select", "product_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "join", "ref_colors", "as", "t4", "on", "t1", ".", "color_code", "=", "t4", ".", "color_code", "where", "t4", ".", "color_description", "=", "value", "and", "t3", ".", "characteristic_name", "=", "value"], "question": "What are the names of the products that have a color description of 'red' and the 'fast' characteristic?", "question_toks": ["What", "are", "the", "names", "of", "the", "products", "that", "have", "a", "color", "description", "of", "'red", "'", "and", "the", "'fast", "'", "characteristic", "?"], "guid": 6024}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the customer name and date of the orders that have the status \"Delivered\".", "sql": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"", "query_toks": ["SELECT", "t1.customer_name", ",", "t2.order_date", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "order_status", "=", "``", "Delivered", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", ",", "t2", ".", "order_date", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "order_status", "=", "value"], "question": "Find the customer name and date of the orders that have the status \"Delivered\".", "question_toks": ["Find", "the", "customer", "name", "and", "date", "of", "the", "orders", "that", "have", "the", "status", "``", "Delivered", "''", "."], "guid": 6025}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the name of the artist who made the album \"Balls to the Wall\".", "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"", "example": {"db_id": "chinook_1", "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T1.Title  =  \"Balls to the Wall\"", "query_toks": ["SELECT", "T2.Name", "FROM", "ALBUM", "AS", "T1", "JOIN", "ARTIST", "AS", "T2", "ON", "T1.ArtistId", "=", "T2.ArtistId", "WHERE", "T1.Title", "=", "``", "Balls", "to", "the", "Wall", "''"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "album", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artistid", "=", "t2", ".", "artistid", "where", "t1", ".", "title", "=", "value"], "question": "Find the name of the artist who made the album \"Balls to the Wall\".", "question_toks": ["Find", "the", "name", "of", "the", "artist", "who", "made", "the", "album", "``", "Balls", "to", "the", "Wall", "''", "."], "guid": 6026}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.", "sql": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";", "example": {"db_id": "driving_school", "query": "SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\" AND nickname LIKE \"%s%\";", "query_toks": ["SELECT", "T1.lesson_id", "FROM", "Lessons", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.first_name", "=", "``", "Janessa", "''", "AND", "T2.last_name", "=", "``", "Sawayn", "''", "AND", "nickname", "LIKE", "``", "%", "s", "%", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "lesson_id", "from", "lessons", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value", "and", "nickname", "like", "value"], "question": "List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.", "question_toks": ["List", "lesson", "id", "of", "all", "lessons", "taught", "by", "staff", "with", "first", "name", "as", "Janessa", ",", "last", "name", "as", "Sawayn", "and", "nickname", "containing", "letter", "'s", "'", "."], "guid": 6027}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | Show all cities without a branch having more than 100 memberships.", "sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100", "example": {"db_id": "shop_membership", "query": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100", "query_toks": ["SELECT", "city", "FROM", "branch", "EXCEPT", "SELECT", "city", "FROM", "branch", "WHERE", "membership_amount", ">", "100"], "query_toks_no_value": ["select", "city", "from", "branch", "except", "select", "city", "from", "branch", "where", "membership_amount", ">", "value"], "question": "Show all cities without a branch having more than 100 memberships.", "question_toks": ["Show", "all", "cities", "without", "a", "branch", "having", "more", "than", "100", "memberships", "."], "guid": 6028}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Count the number of credit cards that the customer with first name Blanche and last name Huels has.", "sql": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers_cards", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.customer_first_name", "=", "``", "Blanche", "''", "AND", "T2.customer_last_name", "=", "``", "Huels", "''", "AND", "T1.card_type_code", "=", "``", "Credit", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers_cards", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_first_name", "=", "value", "and", "t2", ".", "customer_last_name", "=", "value", "and", "t1", ".", "card_type_code", "=", "value"], "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.", "question_toks": ["Count", "the", "number", "of", "credit", "cards", "that", "the", "customer", "with", "first", "name", "Blanche", "and", "last", "name", "Huels", "has", "."], "guid": 6029}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Count the number of products.", "sql": "SELECT count(*) FROM products", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products"], "question": "Count the number of products.", "question_toks": ["Count", "the", "number", "of", "products", "."], "guid": 6030}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the dates when customers with ids between 10 and 20 became customers?", "sql": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20", "example": {"db_id": "customers_and_addresses", "query": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20", "query_toks": ["SELECT", "date_became_customer", "FROM", "customers", "WHERE", "customer_id", "BETWEEN", "10", "AND", "20"], "query_toks_no_value": ["select", "date_became_customer", "from", "customers", "where", "customer_id", "between", "value", "and", "value"], "question": "What are the dates when customers with ids between 10 and 20 became customers?", "question_toks": ["What", "are", "the", "dates", "when", "customers", "with", "ids", "between", "10", "and", "20", "became", "customers", "?"], "guid": 6031}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the distinct ids of customers who made an order after any order that was Cancelled?", "sql": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")", "example": {"db_id": "department_store", "query": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")", "query_toks": ["SELECT", "DISTINCT", "customer_id", "FROM", "Customer_Orders", "WHERE", "order_date", ">", "(", "SELECT", "min", "(", "order_date", ")", "FROM", "Customer_Orders", "WHERE", "order_status_code", "=", "``", "Cancelled", "''", ")"], "query_toks_no_value": ["select", "distinct", "customer_id", "from", "customer_orders", "where", "order_date", ">", "(", "select", "min", "(", "order_date", ")", "from", "customer_orders", "where", "order_status_code", "=", "value", ")"], "question": "What are the distinct ids of customers who made an order after any order that was Cancelled?", "question_toks": ["What", "are", "the", "distinct", "ids", "of", "customers", "who", "made", "an", "order", "after", "any", "order", "that", "was", "Cancelled", "?"], "guid": 6032}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.", "sql": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"", "query_toks": ["SELECT", "address_content", "FROM", "addresses", "WHERE", "city", "=", "``", "East", "Julianaside", "''", "AND", "state_province_county", "=", "``", "Texas", "''", "UNION", "SELECT", "address_content", "FROM", "addresses", "WHERE", "city", "=", "``", "Gleasonmouth", "''", "AND", "state_province_county", "=", "``", "Arizona", "''"], "query_toks_no_value": ["select", "address_content", "from", "addresses", "where", "city", "=", "value", "and", "state_province_county", "=", "value", "union", "select", "address_content", "from", "addresses", "where", "city", "=", "value", "and", "state_province_county", "=", "value"], "question": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.", "question_toks": ["What", "are", "all", "the", "addresses", "in", "East", "Julianaside", ",", "Texas", "or", "in", "Gleasonmouth", ",", "Arizona", "."], "guid": 6033}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the names and ids of customers whose address contains TN?", "sql": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"", "example": {"db_id": "department_store", "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"", "query_toks": ["SELECT", "customer_name", ",", "customer_id", "FROM", "customers", "WHERE", "customer_address", "LIKE", "``", "%", "TN", "%", "''"], "query_toks_no_value": ["select", "customer_name", ",", "customer_id", "from", "customers", "where", "customer_address", "like", "value"], "question": "What are the names and ids of customers whose address contains TN?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "customers", "whose", "address", "contains", "TN", "?"], "guid": 6034}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Which contact channel has been used by the customer with name \"Tillman Ernser\"?", "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "query_toks": ["SELECT", "DISTINCT", "channel_code", "FROM", "customers", "AS", "t1", "JOIN", "customer_contact_channels", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.customer_name", "=", "``", "Tillman", "Ernser", "''"], "query_toks_no_value": ["select", "distinct", "channel_code", "from", "customers", "as", "t1", "join", "customer_contact_channels", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?", "question_toks": ["Which", "contact", "channel", "has", "been", "used", "by", "the", "customer", "with", "name", "``", "Tillman", "Ernser", "''", "?"], "guid": 6035}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?", "sql": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;", "example": {"db_id": "driving_school", "query": "SELECT phone_number ,  email_address FROM Customers WHERE amount_outstanding  >  2000;", "query_toks": ["SELECT", "phone_number", ",", "email_address", "FROM", "Customers", "WHERE", "amount_outstanding", ">", "2000", ";"], "query_toks_no_value": ["select", "phone_number", ",", "email_address", "from", "customers", "where", "amount_outstanding", ">", "value"], "question": "What are the phone numbers and email addresses of all customers who have an outstanding balance of more than 2000?", "question_toks": ["What", "are", "the", "phone", "numbers", "and", "email", "addresses", "of", "all", "customers", "who", "have", "an", "outstanding", "balance", "of", "more", "than", "2000", "?"], "guid": 6036}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the first and last name of all employees who live in the city Damianfort?", "sql": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";", "example": {"db_id": "driving_school", "query": "SELECT T2.first_name ,  T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = \"Damianfort\";", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "Addresses", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.address_id", "=", "T2.staff_address_id", "WHERE", "T1.city", "=", "``", "Damianfort", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "addresses", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "staff_address_id", "where", "t1", ".", "city", "=", "value"], "question": "What is the first and last name of all employees who live in the city Damianfort?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "all", "employees", "who", "live", "in", "the", "city", "Damianfort", "?"], "guid": 6037}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | What are the sale details and dates of transactions with amount smaller than 3000?", "sql": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T1.sales_details ,  T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id  =  T2.transaction_id WHERE T2.amount_of_transaction  <  3000", "query_toks": ["SELECT", "T1.sales_details", ",", "T2.date_of_transaction", "FROM", "SALES", "AS", "T1", "JOIN", "TRANSACTIONS", "AS", "T2", "ON", "T1.sales_transaction_id", "=", "T2.transaction_id", "WHERE", "T2.amount_of_transaction", "<", "3000"], "query_toks_no_value": ["select", "t1", ".", "sales_details", ",", "t2", ".", "date_of_transaction", "from", "sales", "as", "t1", "join", "transactions", "as", "t2", "on", "t1", ".", "sales_transaction_id", "=", "t2", ".", "transaction_id", "where", "t2", ".", "amount_of_transaction", "<", "value"], "question": "What are the sale details and dates of transactions with amount smaller than 3000?", "question_toks": ["What", "are", "the", "sale", "details", "and", "dates", "of", "transactions", "with", "amount", "smaller", "than", "3000", "?"], "guid": 6038}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | List all characteristics of product named \"sesame\" with type code \"Grade\".", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"", "query_toks": ["SELECT", "t3.characteristic_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "sesame", "''", "AND", "t3.characteristic_type_code", "=", "``", "Grade", "''"], "query_toks_no_value": ["select", "t3", ".", "characteristic_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value", "and", "t3", ".", "characteristic_type_code", "=", "value"], "question": "List all characteristics of product named \"sesame\" with type code \"Grade\".", "question_toks": ["List", "all", "characteristics", "of", "product", "named", "``", "sesame", "''", "with", "type", "code", "``", "Grade", "''", "."], "guid": 6039}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | Show the minimum, maximum, average price for all products.", "sql": "SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT min(product_price) ,  max(product_price) ,  avg(product_price) FROM products", "query_toks": ["SELECT", "min", "(", "product_price", ")", ",", "max", "(", "product_price", ")", ",", "avg", "(", "product_price", ")", "FROM", "products"], "query_toks_no_value": ["select", "min", "(", "product_price", ")", ",", "max", "(", "product_price", ")", ",", "avg", "(", "product_price", ")", "from", "products"], "question": "Show the minimum, maximum, average price for all products.", "question_toks": ["Show", "the", "minimum", ",", "maximum", ",", "average", "price", "for", "all", "products", "."], "guid": 6040}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which districts have at least two addresses?", "sql": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2", "example": {"db_id": "sakila_1", "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2", "query_toks": ["SELECT", "district", "FROM", "address", "GROUP", "BY", "district", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "district", "from", "address", "group", "by", "district", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which districts have at least two addresses?", "question_toks": ["Which", "districts", "have", "at", "least", "two", "addresses", "?"], "guid": 6041}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the average amount of transactions with type code \"SALE\".", "sql": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"", "example": {"db_id": "tracking_share_transactions", "query": "SELECT avg(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"SALE\"", "query_toks": ["SELECT", "avg", "(", "amount_of_transaction", ")", "FROM", "TRANSACTIONS", "WHERE", "transaction_type_code", "=", "``", "SALE", "''"], "query_toks_no_value": ["select", "avg", "(", "amount_of_transaction", ")", "from", "transactions", "where", "transaction_type_code", "=", "value"], "question": "Show the average amount of transactions with type code \"SALE\".", "question_toks": ["Show", "the", "average", "amount", "of", "transactions", "with", "type", "code", "``", "SALE", "''", "."], "guid": 6042}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | How many different types of transactions are there?", "sql": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(DISTINCT transaction_type) FROM Financial_Transactions", "query_toks": ["SELECT", "count", "(", "DISTINCT", "transaction_type", ")", "FROM", "Financial_Transactions"], "query_toks_no_value": ["select", "count", "(", "distinct", "transaction_type", ")", "from", "financial_transactions"], "question": "How many different types of transactions are there?", "question_toks": ["How", "many", "different", "types", "of", "transactions", "are", "there", "?"], "guid": 6043}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What are the names of people who are not entrepreneurs?", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "example": {"db_id": "entrepreneur", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_ID", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "entrepreneur", ")"], "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "entrepreneur", ")"], "question": "What are the names of people who are not entrepreneurs?", "question_toks": ["What", "are", "the", "names", "of", "people", "who", "are", "not", "entrepreneurs", "?"], "guid": 6044}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Return the address content for the customer whose name is \"Maudie Kertzmann\".", "sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"", "query_toks": ["SELECT", "t3.address_content", "FROM", "customers", "AS", "t1", "JOIN", "customer_addresses", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "addresses", "AS", "t3", "ON", "t2.address_id", "=", "t3.address_id", "WHERE", "t1.customer_name", "=", "``", "Maudie", "Kertzmann", "''"], "query_toks_no_value": ["select", "t3", ".", "address_content", "from", "customers", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Return the address content for the customer whose name is \"Maudie Kertzmann\".", "question_toks": ["Return", "the", "address", "content", "for", "the", "customer", "whose", "name", "is", "``", "Maudie", "Kertzmann", "''", "."], "guid": 6045}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.", "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200", "example": {"db_id": "sakila_1", "query": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200", "query_toks": ["SELECT", "title", "FROM", "film", "WHERE", "LENGTH", ">", "100", "OR", "rating", "=", "'PG", "'", "EXCEPT", "SELECT", "title", "FROM", "film", "WHERE", "replacement_cost", ">", "200"], "query_toks_no_value": ["select", "title", "from", "film", "where", "length", ">", "value", "or", "rating", "=", "value", "except", "select", "title", "from", "film", "where", "replacement_cost", ">", "value"], "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.", "question_toks": ["Find", "all", "the", "films", "longer", "than", "100", "minutes", ",", "or", "rated", "PG", ",", "except", "those", "who", "cost", "more", "than", "200", "for", "replacement", ".", "List", "the", "titles", "."], "guid": 6046}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the average price for a lesson taught by Janessa Sawayn?", "sql": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT avg(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "query_toks": ["SELECT", "avg", "(", "price", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.first_name", "=", "``", "Janessa", "''", "AND", "T2.last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "avg", "(", "price", ")", "from", "lessons", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "What is the average price for a lesson taught by Janessa Sawayn?", "question_toks": ["What", "is", "the", "average", "price", "for", "a", "lesson", "taught", "by", "Janessa", "Sawayn", "?"], "guid": 6047}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Count the number of customers.", "sql": "SELECT count(*) FROM Customers", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Customers", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "Count the number of customers.", "question_toks": ["Count", "the", "number", "of", "customers", "."], "guid": 6048}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?", "sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"", "query_toks": ["SELECT", "t1.product_name", ",", "t1.typical_buying_price", ",", "t1.typical_selling_price", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "WHERE", "t2.color_description", "=", "``", "yellow", "''"], "query_toks_no_value": ["select", "t1", ".", "product_name", ",", "t1", ".", "typical_buying_price", ",", "t1", ".", "typical_selling_price", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "where", "t2", ".", "color_description", "=", "value"], "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?", "question_toks": ["What", "are", "the", "name", "and", "typical", "buying", "and", "selling", "prices", "of", "the", "products", "that", "have", "color", "described", "as", "``", "yellow", "''", "?"], "guid": 6049}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the name of the customer who made the order of the largest amount of goods.", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "WHERE", "t3.order_quantity", "=", "(", "SELECT", "max", "(", "order_quantity", ")", "FROM", "order_items", ")"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "where", "t3", ".", "order_quantity", "=", "(", "select", "max", "(", "order_quantity", ")", "from", "order_items", ")"], "question": "Find the name of the customer who made the order of the largest amount of goods.", "question_toks": ["Find", "the", "name", "of", "the", "customer", "who", "made", "the", "order", "of", "the", "largest", "amount", "of", "goods", "."], "guid": 6050}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the names of products with 'white' as their color description?", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"", "query_toks": ["SELECT", "t1.product_name", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "WHERE", "t2.color_description", "=", "``", "white", "''"], "query_toks_no_value": ["select", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "where", "t2", ".", "color_description", "=", "value"], "question": "What are the names of products with 'white' as their color description?", "question_toks": ["What", "are", "the", "names", "of", "products", "with", "'white", "'", "as", "their", "color", "description", "?"], "guid": 6051}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the name of the customer who made the most orders.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of the customer who made the most orders.", "question_toks": ["Find", "the", "name", "of", "the", "customer", "who", "made", "the", "most", "orders", "."], "guid": 6052}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Which customers have made at least two orders? Give me each customer name and number of orders made.", "sql": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2", "example": {"db_id": "tracking_orders", "query": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.customer_name", ",", "count", "(", "*", ")", "FROM", "orders", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T2.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "customer_name", ",", "count", "(", "*", ")", "from", "orders", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which customers have made at least two orders? Give me each customer name and number of orders made.", "question_toks": ["Which", "customers", "have", "made", "at", "least", "two", "orders", "?", "Give", "me", "each", "customer", "name", "and", "number", "of", "orders", "made", "."], "guid": 6053}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | Show the name and phone for customers with a mailshot with outcome code 'No Response'.", "sql": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'", "query_toks": ["SELECT", "T1.customer_name", ",", "T1.customer_phone", "FROM", "customers", "AS", "T1", "JOIN", "mailshot_customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.outcome_code", "=", "'No", "Response", "'"], "query_toks_no_value": ["select", "t1", ".", "customer_name", ",", "t1", ".", "customer_phone", "from", "customers", "as", "t1", "join", "mailshot_customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "outcome_code", "=", "value"], "question": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.", "question_toks": ["Show", "the", "name", "and", "phone", "for", "customers", "with", "a", "mailshot", "with", "outcome", "code", "'No", "Response", "'", "."], "guid": 6054}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show all product names without an order.", "sql": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id  =  T2.product_id", "query_toks": ["SELECT", "product_name", "FROM", "Products", "EXCEPT", "SELECT", "T1.product_name", "FROM", "Products", "AS", "T1", "JOIN", "Order_items", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id"], "query_toks_no_value": ["select", "product_name", "from", "products", "except", "select", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id"], "question": "Show all product names without an order.", "question_toks": ["Show", "all", "product", "names", "without", "an", "order", "."], "guid": 6055}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are all the album titles, in alphabetical order?", "sql": "SELECT Title FROM ALBUM ORDER BY Title", "example": {"db_id": "chinook_1", "query": "SELECT Title FROM ALBUM ORDER BY Title", "query_toks": ["SELECT", "Title", "FROM", "ALBUM", "ORDER", "BY", "Title"], "query_toks_no_value": ["select", "title", "from", "album", "order", "by", "title"], "question": "What are all the album titles, in alphabetical order?", "question_toks": ["What", "are", "all", "the", "album", "titles", ",", "in", "alphabetical", "order", "?"], "guid": 6056}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What is the code of the product type with an average price higher than the average price of all products?", "sql": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)", "example": {"db_id": "department_store", "query": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)", "query_toks": ["SELECT", "product_type_code", "FROM", "products", "GROUP", "BY", "product_type_code", "HAVING", "avg", "(", "product_price", ")", ">", "(", "SELECT", "avg", "(", "product_price", ")", "FROM", "products", ")"], "query_toks_no_value": ["select", "product_type_code", "from", "products", "group", "by", "product_type_code", "having", "avg", "(", "product_price", ")", ">", "(", "select", "avg", "(", "product_price", ")", "from", "products", ")"], "question": "What is the code of the product type with an average price higher than the average price of all products?", "question_toks": ["What", "is", "the", "code", "of", "the", "product", "type", "with", "an", "average", "price", "higher", "than", "the", "average", "price", "of", "all", "products", "?"], "guid": 6057}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the name of the customers who use the most frequently used payment method.", "sql": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers WHERE payment_method  =  (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "WHERE", "payment_method", "=", "(", "SELECT", "payment_method", "FROM", "customers", "GROUP", "BY", "payment_method", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "where", "payment_method", "=", "(", "select", "payment_method", "from", "customers", "group", "by", "payment_method", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "Find the name of the customers who use the most frequently used payment method.", "question_toks": ["Find", "the", "name", "of", "the", "customers", "who", "use", "the", "most", "frequently", "used", "payment", "method", "."], "guid": 6058}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find all the distinct district names ordered by city area in descending.", "sql": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC", "example": {"db_id": "store_product", "query": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC", "query_toks": ["SELECT", "DISTINCT", "District_name", "FROM", "district", "ORDER", "BY", "city_area", "DESC"], "query_toks_no_value": ["select", "distinct", "district_name", "from", "district", "order", "by", "city_area", "desc"], "question": "Find all the distinct district names ordered by city area in descending.", "question_toks": ["Find", "all", "the", "distinct", "district", "names", "ordered", "by", "city", "area", "in", "descending", "."], "guid": 6059}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What is the id and name of the department store that has both marketing and managing department?", "sql": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"", "example": {"db_id": "department_store", "query": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"", "query_toks": ["SELECT", "T2.dept_store_id", ",", "T2.store_name", "FROM", "departments", "AS", "T1", "JOIN", "department_stores", "AS", "T2", "ON", "T1.dept_store_id", "=", "T2.dept_store_id", "WHERE", "T1.department_name", "=", "``", "marketing", "''", "INTERSECT", "SELECT", "T2.dept_store_id", ",", "T2.store_name", "FROM", "departments", "AS", "T1", "JOIN", "department_stores", "AS", "T2", "ON", "T1.dept_store_id", "=", "T2.dept_store_id", "WHERE", "T1.department_name", "=", "``", "managing", "''"], "query_toks_no_value": ["select", "t2", ".", "dept_store_id", ",", "t2", ".", "store_name", "from", "departments", "as", "t1", "join", "department_stores", "as", "t2", "on", "t1", ".", "dept_store_id", "=", "t2", ".", "dept_store_id", "where", "t1", ".", "department_name", "=", "value", "intersect", "select", "t2", ".", "dept_store_id", ",", "t2", ".", "store_name", "from", "departments", "as", "t1", "join", "department_stores", "as", "t2", "on", "t1", ".", "dept_store_id", "=", "t2", ".", "dept_store_id", "where", "t1", ".", "department_name", "=", "value"], "question": "What is the id and name of the department store that has both marketing and managing department?", "question_toks": ["What", "is", "the", "id", "and", "name", "of", "the", "department", "store", "that", "has", "both", "marketing", "and", "managing", "department", "?"], "guid": 6060}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find the number of stores in each city.", "sql": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city", "example": {"db_id": "store_product", "query": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city", "query_toks": ["SELECT", "t3.headquartered_city", ",", "count", "(", "*", ")", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "GROUP", "BY", "t3.headquartered_city"], "query_toks_no_value": ["select", "t3", ".", "headquartered_city", ",", "count", "(", "*", ")", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "group", "by", "t3", ".", "headquartered_city"], "question": "Find the number of stores in each city.", "question_toks": ["Find", "the", "number", "of", "stores", "in", "each", "city", "."], "guid": 6061}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the count of customers that Steve Johnson supports?", "sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";", "example": {"db_id": "store_1", "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employees", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T2.support_rep_id", "=", "T1.id", "WHERE", "T1.first_name", "=", "``", "Steve", "''", "AND", "T1.last_name", "=", "``", "Johnson", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employees", "as", "t1", "join", "customers", "as", "t2", "on", "t2", ".", "support_rep_id", "=", "t1", ".", "id", "where", "t1", ".", "first_name", "=", "value", "and", "t1", ".", "last_name", "=", "value"], "question": "What is the count of customers that Steve Johnson supports?", "question_toks": ["What", "is", "the", "count", "of", "customers", "that", "Steve", "Johnson", "supports", "?"], "guid": 6062}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | Find the names of customers who are not living in the state of California.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'", "example": {"db_id": "customer_deliveries", "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  'California'", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "EXCEPT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_addresses", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "addresses", "AS", "t3", "ON", "t2.address_id", "=", "t3.address_id", "WHERE", "t3.state_province_county", "=", "'California", "'"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "except", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", "where", "t3", ".", "state_province_county", "=", "value"], "question": "Find the names of customers who are not living in the state of California.", "question_toks": ["Find", "the", "names", "of", "customers", "who", "are", "not", "living", "in", "the", "state", "of", "California", "."], "guid": 6063}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many customers in total?", "sql": "SELECT count(*) FROM Customers;", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Customers;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "How many customers in total?", "question_toks": ["How", "many", "customers", "in", "total", "?"], "guid": 6064}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the title, phone and hire date of Nancy Edwards?", "sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "example": {"db_id": "store_1", "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "query_toks": ["SELECT", "title", ",", "phone", ",", "hire_date", "FROM", "employees", "WHERE", "first_name", "=", "``", "Nancy", "''", "AND", "last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "title", ",", "phone", ",", "hire_date", "from", "employees", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the title, phone and hire date of Nancy Edwards?", "question_toks": ["What", "is", "the", "title", ",", "phone", "and", "hire", "date", "of", "Nancy", "Edwards", "?"], "guid": 6065}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Return the number of accounts that the customer with the first name Art and last name Turcotte has.", "sql": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.customer_first_name", "=", "``", "Art", "''", "AND", "T2.customer_last_name", "=", "``", "Turcotte", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_first_name", "=", "value", "and", "t2", ".", "customer_last_name", "=", "value"], "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.", "question_toks": ["Return", "the", "number", "of", "accounts", "that", "the", "customer", "with", "the", "first", "name", "Art", "and", "last", "name", "Turcotte", "has", "."], "guid": 6066}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What is the placement date of the order whose invoice number is 10?", "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10", "example": {"db_id": "tracking_orders", "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10", "query_toks": ["SELECT", "T1.date_order_placed", "FROM", "orders", "AS", "T1", "JOIN", "shipments", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "WHERE", "T2.invoice_number", "=", "10"], "query_toks_no_value": ["select", "t1", ".", "date_order_placed", "from", "orders", "as", "t1", "join", "shipments", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t2", ".", "invoice_number", "=", "value"], "question": "What is the placement date of the order whose invoice number is 10?", "question_toks": ["What", "is", "the", "placement", "date", "of", "the", "order", "whose", "invoice", "number", "is", "10", "?"], "guid": 6067}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Which artist has the most albums?", "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "chinook_1", "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Name", "FROM", "ALBUM", "AS", "T1", "JOIN", "ARTIST", "AS", "T2", "ON", "T1.ArtistId", "=", "T2.ArtistId", "GROUP", "BY", "T2.Name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "album", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artistid", "=", "t2", ".", "artistid", "group", "by", "t2", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which artist has the most albums?", "question_toks": ["Which", "artist", "has", "the", "most", "albums", "?"], "guid": 6068}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the title, phone number and hire date for the employee named Nancy Edwards?", "sql": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "example": {"db_id": "store_1", "query": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "query_toks": ["SELECT", "title", ",", "phone", ",", "hire_date", "FROM", "employees", "WHERE", "first_name", "=", "``", "Nancy", "''", "AND", "last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "title", ",", "phone", ",", "hire_date", "from", "employees", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the title, phone number and hire date for the employee named Nancy Edwards?", "question_toks": ["What", "is", "the", "title", ",", "phone", "number", "and", "hire", "date", "for", "the", "employee", "named", "Nancy", "Edwards", "?"], "guid": 6069}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the ids of the two department store chains with the most department stores.", "sql": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2", "example": {"db_id": "department_store", "query": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2", "query_toks": ["SELECT", "dept_store_chain_id", "FROM", "department_stores", "GROUP", "BY", "dept_store_chain_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "2"], "query_toks_no_value": ["select", "dept_store_chain_id", "from", "department_stores", "group", "by", "dept_store_chain_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the ids of the two department store chains with the most department stores.", "question_toks": ["Return", "the", "ids", "of", "the", "two", "department", "store", "chains", "with", "the", "most", "department", "stores", "."], "guid": 6070}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What are the names of entrepreneurs?", "sql": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "example": {"db_id": "entrepreneur", "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID", "query_toks": ["SELECT", "T2.Name", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"], "question": "What are the names of entrepreneurs?", "question_toks": ["What", "are", "the", "names", "of", "entrepreneurs", "?"], "guid": 6071}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Compute the average active time span of contact channels.", "sql": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels", "example": {"db_id": "customers_and_addresses", "query": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels", "query_toks": ["SELECT", "avg", "(", "active_to_date", "-", "active_from_date", ")", "FROM", "customer_contact_channels"], "query_toks_no_value": ["select", "avg", "(", "active_to_date", "-", "active_from_date", ")", "from", "customer_contact_channels"], "question": "Compute the average active time span of contact channels.", "question_toks": ["Compute", "the", "average", "active", "time", "span", "of", "contact", "channels", "."], "guid": 6072}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Return all the distinct payment methods used by customers.", "sql": "SELECT DISTINCT payment_method FROM customers", "example": {"db_id": "customers_and_addresses", "query": "SELECT DISTINCT payment_method FROM customers", "query_toks": ["SELECT", "DISTINCT", "payment_method", "FROM", "customers"], "query_toks_no_value": ["select", "distinct", "payment_method", "from", "customers"], "question": "Return all the distinct payment methods used by customers.", "question_toks": ["Return", "all", "the", "distinct", "payment", "methods", "used", "by", "customers", "."], "guid": 6073}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | What are the dates of transactions with at least 100 share count or amount bigger than 100?", "sql": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100", "example": {"db_id": "tracking_share_transactions", "query": "SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count  >=  100 OR amount_of_transaction  >=  100", "query_toks": ["SELECT", "date_of_transaction", "FROM", "TRANSACTIONS", "WHERE", "share_count", ">", "=", "100", "OR", "amount_of_transaction", ">", "=", "100"], "query_toks_no_value": ["select", "date_of_transaction", "from", "transactions", "where", "share_count", ">", "=", "value", "or", "amount_of_transaction", ">", "=", "value"], "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?", "question_toks": ["What", "are", "the", "dates", "of", "transactions", "with", "at", "least", "100", "share", "count", "or", "amount", "bigger", "than", "100", "?"], "guid": 6074}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | When was the order placed whose shipment tracking number is 3452? Give me the date.", "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452", "example": {"db_id": "tracking_orders", "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452", "query_toks": ["SELECT", "T1.date_order_placed", "FROM", "orders", "AS", "T1", "JOIN", "shipments", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "WHERE", "T2.shipment_tracking_number", "=", "3452"], "query_toks_no_value": ["select", "t1", ".", "date_order_placed", "from", "orders", "as", "t1", "join", "shipments", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t2", ".", "shipment_tracking_number", "=", "value"], "question": "When was the order placed whose shipment tracking number is 3452? Give me the date.", "question_toks": ["When", "was", "the", "order", "placed", "whose", "shipment", "tracking", "number", "is", "3452", "?", "Give", "me", "the", "date", "."], "guid": 6075}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Count the number of products with the 'hot' charactersitic.", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t3.characteristic_name", "=", "``", "hot", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t3", ".", "characteristic_name", "=", "value"], "question": "Count the number of products with the 'hot' charactersitic.", "question_toks": ["Count", "the", "number", "of", "products", "with", "the", "'hot", "'", "charactersitic", "."], "guid": 6076}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the addresses of customers living in Germany who have had an invoice?", "sql": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"", "example": {"db_id": "chinook_1", "query": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"", "query_toks": ["SELECT", "DISTINCT", "T1.Address", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "INVOICE", "AS", "T2", "ON", "T1.CustomerId", "=", "T2.CustomerId", "WHERE", "T1.country", "=", "``", "Germany", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "address", "from", "customer", "as", "t1", "join", "invoice", "as", "t2", "on", "t1", ".", "customerid", "=", "t2", ".", "customerid", "where", "t1", ".", "country", "=", "value"], "question": "What are the addresses of customers living in Germany who have had an invoice?", "question_toks": ["What", "are", "the", "addresses", "of", "customers", "living", "in", "Germany", "who", "have", "had", "an", "invoice", "?"], "guid": 6077}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?", "sql": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"", "query_toks": ["SELECT", "T1.product_name", ",", "T2.color_description", ",", "T1.product_description", "FROM", "products", "AS", "T1", "JOIN", "Ref_colors", "AS", "T2", "ON", "T1.color_code", "=", "T2.color_code", "WHERE", "product_category_code", "=", "``", "Herbs", "''"], "query_toks_no_value": ["select", "t1", ".", "product_name", ",", "t2", ".", "color_description", ",", "t1", ".", "product_description", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "where", "product_category_code", "=", "value"], "question": "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?", "question_toks": ["What", "are", "the", "names", ",", "color", "descriptions", ",", "and", "product", "descriptions", "for", "products", "in", "the", "'Herbs", "'", "category", "?"], "guid": 6078}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find the names of all stores in Khanewal District.", "sql": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"", "example": {"db_id": "store_product", "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"", "query_toks": ["SELECT", "t1.store_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t3.district_name", "=", "``", "Khanewal", "District", "''"], "query_toks_no_value": ["select", "t1", ".", "store_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t3", ".", "district_name", "=", "value"], "question": "Find the names of all stores in Khanewal District.", "question_toks": ["Find", "the", "names", "of", "all", "stores", "in", "Khanewal", "District", "."], "guid": 6079}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | How many entrepreneurs correspond to each investor?", "sql": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor", "example": {"db_id": "entrepreneur", "query": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor", "query_toks": ["SELECT", "Investor", ",", "COUNT", "(", "*", ")", "FROM", "entrepreneur", "GROUP", "BY", "Investor"], "query_toks_no_value": ["select", "investor", ",", "count", "(", "*", ")", "from", "entrepreneur", "group", "by", "investor"], "question": "How many entrepreneurs correspond to each investor?", "question_toks": ["How", "many", "entrepreneurs", "correspond", "to", "each", "investor", "?"], "guid": 6080}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the top 10 customers' first and last names by total number of orders and how many orders did they make?", "sql": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;", "example": {"db_id": "store_1", "query": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10;", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "COUNT", "(", "*", ")", "FROM", "customers", "AS", "T1", "JOIN", "invoices", "AS", "T2", "ON", "T2.customer_id", "=", "T1.id", "GROUP", "BY", "T1.id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "10", ";"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "count", "(", "*", ")", "from", "customers", "as", "t1", "join", "invoices", "as", "t2", "on", "t2", ".", "customer_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?", "question_toks": ["What", "are", "the", "top", "10", "customers", "'", "first", "and", "last", "names", "by", "total", "number", "of", "orders", "and", "how", "many", "orders", "did", "they", "make", "?"], "guid": 6081}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What is the customer id of the customer with the most accounts, and how many accounts does this person have?", "sql": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_id ,  count(*) FROM Accounts GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "customer_id", ",", "count", "(", "*", ")", "FROM", "Accounts", "GROUP", "BY", "customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "customer_id", ",", "count", "(", "*", ")", "from", "accounts", "group", "by", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?", "question_toks": ["What", "is", "the", "customer", "id", "of", "the", "customer", "with", "the", "most", "accounts", ",", "and", "how", "many", "accounts", "does", "this", "person", "have", "?"], "guid": 6082}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | How many customers use each payment method?", "sql": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code", "example": {"db_id": "department_store", "query": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code", "query_toks": ["SELECT", "payment_method_code", ",", "count", "(", "*", ")", "FROM", "customers", "GROUP", "BY", "payment_method_code"], "query_toks_no_value": ["select", "payment_method_code", ",", "count", "(", "*", ")", "from", "customers", "group", "by", "payment_method_code"], "question": "How many customers use each payment method?", "question_toks": ["How", "many", "customers", "use", "each", "payment", "method", "?"], "guid": 6083}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many products were not included in any order?", "sql": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM products WHERE product_id NOT IN ( SELECT product_id FROM Order_items )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "WHERE", "product_id", "NOT", "IN", "(", "SELECT", "product_id", "FROM", "Order_items", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "where", "product_id", "not", "in", "(", "select", "product_id", "from", "order_items", ")"], "question": "How many products were not included in any order?", "question_toks": ["How", "many", "products", "were", "not", "included", "in", "any", "order", "?"], "guid": 6084}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What is the customer id with most number of cards, and how many does he have?", "sql": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_id ,  count(*) FROM Customers_cards GROUP BY customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "customer_id", ",", "count", "(", "*", ")", "FROM", "Customers_cards", "GROUP", "BY", "customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "customer_id", ",", "count", "(", "*", ")", "from", "customers_cards", "group", "by", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the customer id with most number of cards, and how many does he have?", "question_toks": ["What", "is", "the", "customer", "id", "with", "most", "number", "of", "cards", ",", "and", "how", "many", "does", "he", "have", "?"], "guid": 6085}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What is the id of the product that is booked for 3 times?", "sql": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3", "example": {"db_id": "products_for_hire", "query": "SELECT product_id FROM products_booked GROUP BY product_id HAVING count(*)  =  3", "query_toks": ["SELECT", "product_id", "FROM", "products_booked", "GROUP", "BY", "product_id", "HAVING", "count", "(", "*", ")", "=", "3"], "query_toks_no_value": ["select", "product_id", "from", "products_booked", "group", "by", "product_id", "having", "count", "(", "*", ")", "=", "value"], "question": "What is the id of the product that is booked for 3 times?", "question_toks": ["What", "is", "the", "id", "of", "the", "product", "that", "is", "booked", "for", "3", "times", "?"], "guid": 6086}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | Show the names of customers who use Credit Card payment method and have more than 2 orders.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.payment_method_code", "=", "'Credit", "Card", "'", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "payment_method_code", "=", "value", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.", "question_toks": ["Show", "the", "names", "of", "customers", "who", "use", "Credit", "Card", "payment", "method", "and", "have", "more", "than", "2", "orders", "."], "guid": 6087}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the account id with most number of transactions.", "sql": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_invoices", "query": "SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "account_id", "FROM", "Financial_transactions", "GROUP", "BY", "account_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "account_id", "from", "financial_transactions", "group", "by", "account_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the account id with most number of transactions.", "question_toks": ["Show", "the", "account", "id", "with", "most", "number", "of", "transactions", "."], "guid": 6088}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Return the order ids and details for orderes with two or more invoices.", "sql": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id GROUP BY T2.order_id HAVING count(*)  >  2", "query_toks": ["SELECT", "T2.order_id", ",", "T2.order_details", "FROM", "Invoices", "AS", "T1", "JOIN", "Orders", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "GROUP", "BY", "T2.order_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t2", ".", "order_id", ",", "t2", ".", "order_details", "from", "invoices", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "group", "by", "t2", ".", "order_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Return the order ids and details for orderes with two or more invoices.", "question_toks": ["Return", "the", "order", "ids", "and", "details", "for", "orderes", "with", "two", "or", "more", "invoices", "."], "guid": 6089}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the total amount of all payments?", "sql": "SELECT sum(amount) FROM payment", "example": {"db_id": "sakila_1", "query": "SELECT sum(amount) FROM payment", "query_toks": ["SELECT", "sum", "(", "amount", ")", "FROM", "payment"], "query_toks_no_value": ["select", "sum", "(", "amount", ")", "from", "payment"], "question": "What is the total amount of all payments?", "question_toks": ["What", "is", "the", "total", "amount", "of", "all", "payments", "?"], "guid": 6090}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?", "sql": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'", "example": {"db_id": "shop_membership", "query": "SELECT min(membership_amount) ,  max(membership_amount) FROM branch WHERE open_year  =  2011 OR city  =  'London'", "query_toks": ["SELECT", "min", "(", "membership_amount", ")", ",", "max", "(", "membership_amount", ")", "FROM", "branch", "WHERE", "open_year", "=", "2011", "OR", "city", "=", "'London", "'"], "query_toks_no_value": ["select", "min", "(", "membership_amount", ")", ",", "max", "(", "membership_amount", ")", "from", "branch", "where", "open_year", "=", "value", "or", "city", "=", "value"], "question": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?", "question_toks": ["What", "are", "the", "minimum", "and", "maximum", "membership", "amounts", "for", "all", "branches", "that", "either", "opened", "in", "2011", "or", "are", "located", "in", "London", "?"], "guid": 6091}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find the name of the products that are not using the most frequently-used max page size.", "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "store_product", "query": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "product", "!", "=", "(", "SELECT", "max_page_size", "FROM", "product", "GROUP", "BY", "max_page_size", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "product", "from", "product", "where", "product", "!", "=", "(", "select", "max_page_size", "from", "product", "group", "by", "max_page_size", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "Find the name of the products that are not using the most frequently-used max page size.", "question_toks": ["Find", "the", "name", "of", "the", "products", "that", "are", "not", "using", "the", "most", "frequently-used", "max", "page", "size", "."], "guid": 6092}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many lessons have been cancelled?", "sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Lessons", "WHERE", "lesson_status_code", "=", "``", "Cancelled", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "lessons", "where", "lesson_status_code", "=", "value"], "question": "How many lessons have been cancelled?", "question_toks": ["How", "many", "lessons", "have", "been", "cancelled", "?"], "guid": 6093}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the names and addressed of customers who have both New and Pending orders?", "sql": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"", "example": {"db_id": "department_store", "query": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"", "query_toks": ["SELECT", "T1.customer_name", ",", "T1.customer_address", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status_code", "=", "``", "New", "''", "INTERSECT", "SELECT", "T1.customer_name", ",", "T1.customer_address", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status_code", "=", "``", "Pending", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", ",", "t1", ".", "customer_address", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status_code", "=", "value", "intersect", "select", "t1", ".", "customer_name", ",", "t1", ".", "customer_address", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status_code", "=", "value"], "question": "What are the names and addressed of customers who have both New and Pending orders?", "question_toks": ["What", "are", "the", "names", "and", "addressed", "of", "customers", "who", "have", "both", "New", "and", "Pending", "orders", "?"], "guid": 6094}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many invoices were billed from Chicago, IL?", "sql": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "example": {"db_id": "store_1", "query": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\";", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "invoices", "WHERE", "billing_city", "=", "``", "Chicago", "''", "AND", "billing_state", "=", "``", "IL", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "invoices", "where", "billing_city", "=", "value", "and", "billing_state", "=", "value"], "question": "How many invoices were billed from Chicago, IL?", "question_toks": ["How", "many", "invoices", "were", "billed", "from", "Chicago", ",", "IL", "?"], "guid": 6095}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the distinct names of customers who have purchased at least three different products?", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3", "example": {"db_id": "department_store", "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3", "query_toks": ["SELECT", "DISTINCT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "JOIN", "order_items", "AS", "T3", "ON", "T2.order_id", "=", "T3.order_id", "GROUP", "BY", "T1.customer_id", "HAVING", "COUNT", "(", "DISTINCT", "T3.product_id", ")", ">", "=", "3"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "distinct", "t3", ".", "product_id", ")", ">", "=", "value"], "question": "What are the distinct names of customers who have purchased at least three different products?", "question_toks": ["What", "are", "the", "distinct", "names", "of", "customers", "who", "have", "purchased", "at", "least", "three", "different", "products", "?"], "guid": 6096}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What is the transaction type that has processed the greatest total amount in transactions?", "sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "example": {"db_id": "customers_card_transactions", "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "query_toks": ["SELECT", "transaction_type", "FROM", "Financial_transactions", "GROUP", "BY", "transaction_type", "ORDER", "BY", "sum", "(", "transaction_amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "transaction_type", "from", "financial_transactions", "group", "by", "transaction_type", "order", "by", "sum", "(", "transaction_amount", ")", "desc", "limit", "value"], "question": "What is the transaction type that has processed the greatest total amount in transactions?", "question_toks": ["What", "is", "the", "transaction", "type", "that", "has", "processed", "the", "greatest", "total", "amount", "in", "transactions", "?"], "guid": 6097}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Return the type of transaction with the highest total amount.", "sql": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "example": {"db_id": "customers_card_transactions", "query": "SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC LIMIT 1", "query_toks": ["SELECT", "transaction_type", "FROM", "Financial_transactions", "GROUP", "BY", "transaction_type", "ORDER", "BY", "sum", "(", "transaction_amount", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "transaction_type", "from", "financial_transactions", "group", "by", "transaction_type", "order", "by", "sum", "(", "transaction_amount", ")", "desc", "limit", "value"], "question": "Return the type of transaction with the highest total amount.", "question_toks": ["Return", "the", "type", "of", "transaction", "with", "the", "highest", "total", "amount", "."], "guid": 6098}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Which customer made the most orders? Find the customer name.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which customer made the most orders? Find the customer name.", "question_toks": ["Which", "customer", "made", "the", "most", "orders", "?", "Find", "the", "customer", "name", "."], "guid": 6099}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show all date and share count of transactions.", "sql": "SELECT date_of_transaction ,  share_count FROM TRANSACTIONS", "example": {"db_id": "tracking_share_transactions", "query": "SELECT date_of_transaction ,  share_count FROM TRANSACTIONS", "query_toks": ["SELECT", "date_of_transaction", ",", "share_count", "FROM", "TRANSACTIONS"], "query_toks_no_value": ["select", "date_of_transaction", ",", "share_count", "from", "transactions"], "question": "Show all date and share count of transactions.", "question_toks": ["Show", "all", "date", "and", "share", "count", "of", "transactions", "."], "guid": 6100}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the most common full name among all actors.", "sql": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "actor", "GROUP", "BY", "first_name", ",", "last_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "actor", "group", "by", "first_name", ",", "last_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the most common full name among all actors.", "question_toks": ["Return", "the", "most", "common", "full", "name", "among", "all", "actors", "."], "guid": 6101}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List the number of customers that did not have any payment history.", "sql": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Customers WHERE customer_id NOT IN ( SELECT customer_id FROM Customer_Payments );", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "Customer_Payments", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "customer_payments", ")"], "question": "List the number of customers that did not have any payment history.", "question_toks": ["List", "the", "number", "of", "customers", "that", "did", "not", "have", "any", "payment", "history", "."], "guid": 6102}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Which contact channel codes were used less than 5 times?", "sql": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5", "example": {"db_id": "customers_and_addresses", "query": "SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING count(customer_id)  <  5", "query_toks": ["SELECT", "channel_code", "FROM", "customer_contact_channels", "GROUP", "BY", "channel_code", "HAVING", "count", "(", "customer_id", ")", "<", "5"], "query_toks_no_value": ["select", "channel_code", "from", "customer_contact_channels", "group", "by", "channel_code", "having", "count", "(", "customer_id", ")", "<", "value"], "question": "Which contact channel codes were used less than 5 times?", "question_toks": ["Which", "contact", "channel", "codes", "were", "used", "less", "than", "5", "times", "?"], "guid": 6103}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which store owns most items?", "sql": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "store_id", "FROM", "inventory", "GROUP", "BY", "store_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "store_id", "from", "inventory", "group", "by", "store_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which store owns most items?", "question_toks": ["Which", "store", "owns", "most", "items", "?"], "guid": 6104}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many albums does Billy Cobham has?", "sql": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";", "example": {"db_id": "store_1", "query": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "albums", "AS", "T1", "JOIN", "artists", "AS", "T2", "ON", "T1.artist_id", "=", "T2.id", "WHERE", "T2.name", "=", "``", "Billy", "Cobham", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "albums", "as", "t1", "join", "artists", "as", "t2", "on", "t1", ".", "artist_id", "=", "t2", ".", "id", "where", "t2", ".", "name", "=", "value"], "question": "How many albums does Billy Cobham has?", "question_toks": ["How", "many", "albums", "does", "Billy", "Cobham", "has", "?"], "guid": 6105}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the invoice dates, order ids, and order details for all invoices?", "sql": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id", "query_toks": ["SELECT", "T1.invoice_date", ",", "T1.order_id", ",", "T2.order_details", "FROM", "Invoices", "AS", "T1", "JOIN", "Orders", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id"], "query_toks_no_value": ["select", "t1", ".", "invoice_date", ",", "t1", ".", "order_id", ",", "t2", ".", "order_details", "from", "invoices", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id"], "question": "What are the invoice dates, order ids, and order details for all invoices?", "question_toks": ["What", "are", "the", "invoice", "dates", ",", "order", "ids", ",", "and", "order", "details", "for", "all", "invoices", "?"], "guid": 6106}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | How many distinct characteristic names does the product \"cumin\" have?", "sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t3.characteristic_name", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "sesame", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "characteristic_name", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value"], "question": "How many distinct characteristic names does the product \"cumin\" have?", "question_toks": ["How", "many", "distinct", "characteristic", "names", "does", "the", "product", "``", "cumin", "''", "have", "?"], "guid": 6107}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.", "sql": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700", "query_toks": ["SELECT", "catalog_entry_name", ",", "capacity", "FROM", "Catalog_Contents", "WHERE", "price_in_dollars", ">", "700"], "query_toks_no_value": ["select", "catalog_entry_name", ",", "capacity", "from", "catalog_contents", "where", "price_in_dollars", ">", "value"], "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.", "question_toks": ["Which", "catalog", "contents", "has", "price", "above", "700", "dollars", "?", "Show", "their", "catalog", "entry", "names", "and", "capacities", "."], "guid": 6108}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.", "sql": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;", "example": {"db_id": "store_1", "query": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1;", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", ",", "count", "(", "T1.reports_to", ")", "FROM", "employees", "AS", "T1", "JOIN", "employees", "AS", "T2", "ON", "T1.reports_to", "=", "T2.id", "GROUP", "BY", "T1.reports_to", "ORDER", "BY", "count", "(", "T1.reports_to", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", ",", "count", "(", "t1", ".", "reports_to", ")", "from", "employees", "as", "t1", "join", "employees", "as", "t2", "on", "t1", ".", "reports_to", "=", "t2", ".", "id", "group", "by", "t1", ".", "reports_to", "order", "by", "count", "(", "t1", ".", "reports_to", ")", "desc", "limit", "value"], "question": "Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.", "question_toks": ["Which", "employee", "manage", "most", "number", "of", "peoples", "?", "List", "employee", "'s", "first", "and", "last", "name", ",", "and", "number", "of", "people", "report", "to", "that", "employee", "."], "guid": 6109}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What are all of the products whose name includes the substring \"Scanner\"?", "sql": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"", "example": {"db_id": "store_product", "query": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"", "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "product", "LIKE", "``", "%", "Scanner", "%", "''"], "query_toks_no_value": ["select", "product", "from", "product", "where", "product", "like", "value"], "question": "What are all of the products whose name includes the substring \"Scanner\"?", "question_toks": ["What", "are", "all", "of", "the", "products", "whose", "name", "includes", "the", "substring", "``", "Scanner", "''", "?"], "guid": 6110}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Find the emails and phone numbers of all the customers, ordered by email address and phone number.", "sql": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number", "example": {"db_id": "customer_complaints", "query": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number", "query_toks": ["SELECT", "email_address", ",", "phone_number", "FROM", "customers", "ORDER", "BY", "email_address", ",", "phone_number"], "query_toks_no_value": ["select", "email_address", ",", "phone_number", "from", "customers", "order", "by", "email_address", ",", "phone_number"], "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.", "question_toks": ["Find", "the", "emails", "and", "phone", "numbers", "of", "all", "the", "customers", ",", "ordered", "by", "email", "address", "and", "phone", "number", "."], "guid": 6111}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the name of customers who do not use Cash as payment method.", "sql": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers WHERE payment_method != 'Cash'", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "WHERE", "payment_method", "!", "=", "'Cash", "'"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "where", "payment_method", "!", "=", "value"], "question": "What is the name of customers who do not use Cash as payment method.", "question_toks": ["What", "is", "the", "name", "of", "customers", "who", "do", "not", "use", "Cash", "as", "payment", "method", "."], "guid": 6112}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the name of customers who are living in Colorado?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_addresses", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "addresses", "AS", "t3", "ON", "t2.address_id", "=", "t3.address_id", "WHERE", "t3.state_province_county", "=", "``", "Colorado", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", "where", "t3", ".", "state_province_county", "=", "value"], "question": "Find the name of customers who are living in Colorado?", "question_toks": ["Find", "the", "name", "of", "customers", "who", "are", "living", "in", "Colorado", "?"], "guid": 6113}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | Show names and phones of customers who do not have address information.", "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_address_history)", "query_toks": ["SELECT", "customer_name", ",", "customer_phone", "FROM", "customers", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "customer_address_history", ")"], "query_toks_no_value": ["select", "customer_name", ",", "customer_phone", "from", "customers", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "customer_address_history", ")"], "question": "Show names and phones of customers who do not have address information.", "question_toks": ["Show", "names", "and", "phones", "of", "customers", "who", "do", "not", "have", "address", "information", "."], "guid": 6114}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List all media types.", "sql": "SELECT name FROM media_types;", "example": {"db_id": "store_1", "query": "SELECT name FROM media_types;", "query_toks": ["SELECT", "name", "FROM", "media_types", ";"], "query_toks_no_value": ["select", "name", "from", "media_types"], "question": "List all media types.", "question_toks": ["List", "all", "media", "types", "."], "guid": 6115}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the ids, full names, and phones of each customer?", "sql": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_id ,  customer_first_name ,  customer_last_name ,  customer_phone FROM Customers", "query_toks": ["SELECT", "customer_id", ",", "customer_first_name", ",", "customer_last_name", ",", "customer_phone", "FROM", "Customers"], "query_toks_no_value": ["select", "customer_id", ",", "customer_first_name", ",", "customer_last_name", ",", "customer_phone", "from", "customers"], "question": "What are the ids, full names, and phones of each customer?", "question_toks": ["What", "are", "the", "ids", ",", "full", "names", ",", "and", "phones", "of", "each", "customer", "?"], "guid": 6116}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is zip code of customer with first name as Carole and last name as Bernhard?", "sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "example": {"db_id": "driving_school", "query": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "query_toks": ["SELECT", "T2.zip_postcode", "FROM", "Customers", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.customer_address_id", "=", "T2.address_id", "WHERE", "T1.first_name", "=", "``", "Carole", "''", "AND", "T1.last_name", "=", "``", "Bernhard", "''"], "query_toks_no_value": ["select", "t2", ".", "zip_postcode", "from", "customers", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "customer_address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "first_name", "=", "value", "and", "t1", ".", "last_name", "=", "value"], "question": "What is zip code of customer with first name as Carole and last name as Bernhard?", "question_toks": ["What", "is", "zip", "code", "of", "customer", "with", "first", "name", "as", "Carole", "and", "last", "name", "as", "Bernhard", "?"], "guid": 6117}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | How many different last names do the actors and actresses have?", "sql": "SELECT count(DISTINCT last_name) FROM actor", "example": {"db_id": "sakila_1", "query": "SELECT count(DISTINCT last_name) FROM actor", "query_toks": ["SELECT", "count", "(", "DISTINCT", "last_name", ")", "FROM", "actor"], "query_toks_no_value": ["select", "count", "(", "distinct", "last_name", ")", "from", "actor"], "question": "How many different last names do the actors and actresses have?", "question_toks": ["How", "many", "different", "last", "names", "do", "the", "actors", "and", "actresses", "have", "?"], "guid": 6118}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?", "sql": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000", "example": {"db_id": "department_store", "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000", "query_toks": ["SELECT", "supplier_id", "FROM", "Product_Suppliers", "GROUP", "BY", "supplier_id", "HAVING", "avg", "(", "total_amount_purchased", ")", ">", "50000", "OR", "avg", "(", "total_amount_purchased", ")", "<", "30000"], "query_toks_no_value": ["select", "supplier_id", "from", "product_suppliers", "group", "by", "supplier_id", "having", "avg", "(", "total_amount_purchased", ")", ">", "value", "or", "avg", "(", "total_amount_purchased", ")", "<", "value"], "question": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?", "question_toks": ["What", "are", "the", "ids", "of", "suppliers", "which", "have", "an", "average", "amount", "purchased", "of", "above", "50000", "or", "below", "30000", "?"], "guid": 6119}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the invoice number and the number of transactions for each invoice.", "sql": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number", "example": {"db_id": "customers_and_invoices", "query": "SELECT invoice_number ,  count(*) FROM Financial_transactions GROUP BY invoice_number", "query_toks": ["SELECT", "invoice_number", ",", "count", "(", "*", ")", "FROM", "Financial_transactions", "GROUP", "BY", "invoice_number"], "query_toks_no_value": ["select", "invoice_number", ",", "count", "(", "*", ")", "from", "financial_transactions", "group", "by", "invoice_number"], "question": "Show the invoice number and the number of transactions for each invoice.", "question_toks": ["Show", "the", "invoice", "number", "and", "the", "number", "of", "transactions", "for", "each", "invoice", "."], "guid": 6120}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Which order has the most recent shipment? Give me the order id.", "sql": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)", "example": {"db_id": "tracking_orders", "query": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)", "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_date", "=", "(", "SELECT", "max", "(", "shipment_date", ")", "FROM", "shipments", ")"], "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_date", "=", "(", "select", "max", "(", "shipment_date", ")", "from", "shipments", ")"], "question": "Which order has the most recent shipment? Give me the order id.", "question_toks": ["Which", "order", "has", "the", "most", "recent", "shipment", "?", "Give", "me", "the", "order", "id", "."], "guid": 6121}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which language does the film AIRPORT POLLOCK use? List the language name.", "sql": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'", "example": {"db_id": "sakila_1", "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'", "query_toks": ["SELECT", "T2.name", "FROM", "film", "AS", "T1", "JOIN", "LANGUAGE", "AS", "T2", "ON", "T1.language_id", "=", "T2.language_id", "WHERE", "T1.title", "=", "'AIRPORT", "POLLOCK", "'"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "film", "as", "t1", "join", "language", "as", "t2", "on", "t1", ".", "language_id", "=", "t2", ".", "language_id", "where", "t1", ".", "title", "=", "value"], "question": "Which language does the film AIRPORT POLLOCK use? List the language name.", "question_toks": ["Which", "language", "does", "the", "film", "AIRPORT", "POLLOCK", "use", "?", "List", "the", "language", "name", "."], "guid": 6122}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Return the total number of distinct customers.", "sql": "SELECT count(*) FROM customers", "example": {"db_id": "customers_and_addresses", "query": "SELECT count(*) FROM customers", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "Return the total number of distinct customers.", "question_toks": ["Return", "the", "total", "number", "of", "distinct", "customers", "."], "guid": 6123}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | What is the total share of transactions?", "sql": "SELECT sum(share_count) FROM TRANSACTIONS", "example": {"db_id": "tracking_share_transactions", "query": "SELECT sum(share_count) FROM TRANSACTIONS", "query_toks": ["SELECT", "sum", "(", "share_count", ")", "FROM", "TRANSACTIONS"], "query_toks_no_value": ["select", "sum", "(", "share_count", ")", "from", "transactions"], "question": "What is the total share of transactions?", "question_toks": ["What", "is", "the", "total", "share", "of", "transactions", "?"], "guid": 6124}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.", "sql": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )", "example": {"db_id": "sakila_1", "query": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )", "query_toks": ["SELECT", "first_name", "FROM", "customer", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "rental", "WHERE", "rental_date", ">", "'2005-08-23", "02:06:01", "'", ")"], "query_toks_no_value": ["select", "first_name", "from", "customer", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "rental", "where", "rental_date", ">", "value", ")"], "question": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.", "question_toks": ["Return", "the", "first", "names", "of", "customers", "who", "did", "not", "rented", "a", "film", "after", "the", "date", "'2005-08-23", "02:06:01", "'", "."], "guid": 6125}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | How many customers have at least one order with status \"Cancelled\"?", "sql": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "customer_id", ")", "FROM", "customer_orders", "WHERE", "order_status", "=", "``", "Cancelled", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "customer_id", ")", "from", "customer_orders", "where", "order_status", "=", "value"], "question": "How many customers have at least one order with status \"Cancelled\"?", "question_toks": ["How", "many", "customers", "have", "at", "least", "one", "order", "with", "status", "``", "Cancelled", "''", "?"], "guid": 6126}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | In which country and state does Janessa Sawayn live?", "sql": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "query_toks": ["SELECT", "T1.country", ",", "T1.state_province_county", "FROM", "Addresses", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.address_id", "=", "T2.staff_address_id", "WHERE", "T2.first_name", "=", "``", "Janessa", "''", "AND", "T2.last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "country", ",", "t1", ".", "state_province_county", "from", "addresses", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "staff_address_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "In which country and state does Janessa Sawayn live?", "question_toks": ["In", "which", "country", "and", "state", "does", "Janessa", "Sawayn", "live", "?"], "guid": 6127}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the name of the customers who have at most two orders.", "sql": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2", "example": {"db_id": "tracking_orders", "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2", "query_toks": ["SELECT", "T2.customer_name", "FROM", "orders", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T2.customer_id", "HAVING", "count", "(", "*", ")", "<", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "customer_name", "from", "orders", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_id", "having", "count", "(", "*", ")", "<", "=", "value"], "question": "Find the name of the customers who have at most two orders.", "question_toks": ["Find", "the", "name", "of", "the", "customers", "who", "have", "at", "most", "two", "orders", "."], "guid": 6128}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show all card type codes.", "sql": "SELECT DISTINCT card_type_code FROM Customers_Cards", "example": {"db_id": "customers_card_transactions", "query": "SELECT DISTINCT card_type_code FROM Customers_Cards", "query_toks": ["SELECT", "DISTINCT", "card_type_code", "FROM", "Customers_Cards"], "query_toks_no_value": ["select", "distinct", "card_type_code", "from", "customers_cards"], "question": "Show all card type codes.", "question_toks": ["Show", "all", "card", "type", "codes", "."], "guid": 6129}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Count the number of different last names actors have.", "sql": "SELECT count(DISTINCT last_name) FROM actor", "example": {"db_id": "sakila_1", "query": "SELECT count(DISTINCT last_name) FROM actor", "query_toks": ["SELECT", "count", "(", "DISTINCT", "last_name", ")", "FROM", "actor"], "query_toks_no_value": ["select", "count", "(", "distinct", "last_name", ")", "from", "actor"], "question": "Count the number of different last names actors have.", "question_toks": ["Count", "the", "number", "of", "different", "last", "names", "actors", "have", "."], "guid": 6130}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "JOIN", "order_items", "AS", "T3", "JOIN", "products", "AS", "T4", "ON", "T1.customer_id", "=", "T2.customer_id", "AND", "T2.order_id", "=", "T3.order_id", "AND", "T3.product_id", "=", "T4.product_id", "WHERE", "T3.order_item_status", "=", "``", "Cancel", "''", "AND", "T4.product_name", "=", "``", "food", "''", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "join", "order_items", "as", "t3", "join", "products", "as", "t4", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "and", "t2", ".", "order_id", "=", "t3", ".", "order_id", "and", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t3", ".", "order_item_status", "=", "value", "and", "t4", ".", "product_name", "=", "value", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").", "question_toks": ["List", "the", "names", "of", "customers", "who", "have", "once", "canceled", "the", "purchase", "of", "the", "product", "``", "food", "''", "(", "the", "item", "status", "is", "``", "Cancel", "''", ")", "."], "guid": 6131}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the dates of orders which belong to the customer named \"Jeramie\".", "sql": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "example": {"db_id": "tracking_orders", "query": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"", "query_toks": ["SELECT", "T2.date_order_placed", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.customer_name", "=", "``", "Jeramie", "''"], "query_toks_no_value": ["select", "t2", ".", "date_order_placed", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Find the dates of orders which belong to the customer named \"Jeramie\".", "question_toks": ["Find", "the", "dates", "of", "orders", "which", "belong", "to", "the", "customer", "named", "``", "Jeramie", "''", "."], "guid": 6132}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | What are the names of catalog entries with level number 8?", "sql": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"", "example": {"db_id": "product_catalog", "query": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"", "query_toks": ["SELECT", "t1.catalog_entry_name", "FROM", "Catalog_Contents", "AS", "t1", "JOIN", "Catalog_Contents_Additional_Attributes", "AS", "t2", "ON", "t1.catalog_entry_id", "=", "t2.catalog_entry_id", "WHERE", "t2.catalog_level_number", "=", "``", "8", "''"], "query_toks_no_value": ["select", "t1", ".", "catalog_entry_name", "from", "catalog_contents", "as", "t1", "join", "catalog_contents_additional_attributes", "as", "t2", "on", "t1", ".", "catalog_entry_id", "=", "t2", ".", "catalog_entry_id", "where", "t2", ".", "catalog_level_number", "=", "value"], "question": "What are the names of catalog entries with level number 8?", "question_toks": ["What", "are", "the", "names", "of", "catalog", "entries", "with", "level", "number", "8", "?"], "guid": 6133}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What are ids of the all distinct orders, sorted by placement date?", "sql": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed", "example": {"db_id": "tracking_orders", "query": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed", "query_toks": ["SELECT", "DISTINCT", "order_id", "FROM", "orders", "ORDER", "BY", "date_order_placed"], "query_toks_no_value": ["select", "distinct", "order_id", "from", "orders", "order", "by", "date_order_placed"], "question": "What are ids of the all distinct orders, sorted by placement date?", "question_toks": ["What", "are", "ids", "of", "the", "all", "distinct", "orders", ",", "sorted", "by", "placement", "date", "?"], "guid": 6134}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?", "sql": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1", "query_toks": ["SELECT", "t1.email_address", "FROM", "customers", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "GROUP", "BY", "t1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "email_address", "from", "customers", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "limit", "value"], "question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?", "question_toks": ["What", "are", "the", "emails", "of", "customers", "who", "have", "filed", "complaints", "on", "the", "product", "which", "has", "had", "the", "greatest", "number", "of", "complaints", "?"], "guid": 6135}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | A list of the top 5 countries by number of invoices. List country name and number of invoices.", "sql": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "example": {"db_id": "store_1", "query": "SELECT billing_country ,  COUNT(*) FROM invoices GROUP BY billing_country ORDER BY count(*) DESC LIMIT 5;", "query_toks": ["SELECT", "billing_country", ",", "COUNT", "(", "*", ")", "FROM", "invoices", "GROUP", "BY", "billing_country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "5", ";"], "query_toks_no_value": ["select", "billing_country", ",", "count", "(", "*", ")", "from", "invoices", "group", "by", "billing_country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices.", "question_toks": ["A", "list", "of", "the", "top", "5", "countries", "by", "number", "of", "invoices", ".", "List", "country", "name", "and", "number", "of", "invoices", "."], "guid": 6136}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many transactions do we have?", "sql": "SELECT count(*) FROM Financial_transactions", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM Financial_transactions", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Financial_transactions"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "financial_transactions"], "question": "How many transactions do we have?", "question_toks": ["How", "many", "transactions", "do", "we", "have", "?"], "guid": 6137}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the level name of the catalog with the lowest price (in USD).", "sql": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "example": {"db_id": "product_catalog", "query": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1", "query_toks": ["SELECT", "t2.catalog_level_name", "FROM", "catalog_contents", "AS", "t1", "JOIN", "catalog_structure", "AS", "t2", "ON", "t1.catalog_level_number", "=", "t2.catalog_level_number", "ORDER", "BY", "t1.price_in_dollars", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "catalog_level_name", "from", "catalog_contents", "as", "t1", "join", "catalog_structure", "as", "t2", "on", "t1", ".", "catalog_level_number", "=", "t2", ".", "catalog_level_number", "order", "by", "t1", ".", "price_in_dollars", "limit", "value"], "question": "Find the level name of the catalog with the lowest price (in USD).", "question_toks": ["Find", "the", "level", "name", "of", "the", "catalog", "with", "the", "lowest", "price", "(", "in", "USD", ")", "."], "guid": 6138}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?", "sql": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'", "example": {"db_id": "sakila_1", "query": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'", "query_toks": ["SELECT", "payment_date", "FROM", "payment", "WHERE", "amount", ">", "10", "UNION", "SELECT", "T1.payment_date", "FROM", "payment", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.first_name", "=", "'Elsa", "'"], "query_toks_no_value": ["select", "payment_date", "from", "payment", "where", "amount", ">", "value", "union", "select", "t1", ".", "payment_date", "from", "payment", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "first_name", "=", "value"], "question": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?", "question_toks": ["What", "are", "the", "payment", "dates", "for", "any", "payments", "that", "have", "an", "amount", "greater", "than", "10", "or", "were", "handled", "by", "a", "staff", "member", "with", "the", "first", "name", "Elsa", "?"], "guid": 6139}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the average order quantity per order.", "sql": "SELECT avg(order_quantity) FROM order_items", "example": {"db_id": "customers_and_addresses", "query": "SELECT avg(order_quantity) FROM order_items", "query_toks": ["SELECT", "avg", "(", "order_quantity", ")", "FROM", "order_items"], "query_toks_no_value": ["select", "avg", "(", "order_quantity", ")", "from", "order_items"], "question": "Find the average order quantity per order.", "question_toks": ["Find", "the", "average", "order", "quantity", "per", "order", "."], "guid": 6140}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Find the number of products with category \"Spices\" and typically sold above 1000.", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "WHERE", "product_category_code", "=", "``", "Spices", "''", "AND", "typical_buying_price", ">", "1000"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "where", "product_category_code", "=", "value", "and", "typical_buying_price", ">", "value"], "question": "Find the number of products with category \"Spices\" and typically sold above 1000.", "question_toks": ["Find", "the", "number", "of", "products", "with", "category", "``", "Spices", "''", "and", "typically", "sold", "above", "1000", "."], "guid": 6141}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?", "sql": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"", "example": {"db_id": "chinook_1", "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"", "query_toks": ["SELECT", "FirstName", ",", "LastName", "FROM", "CUSTOMER", "WHERE", "Email", "=", "``", "luisg", "@", "embraer.com.br", "''"], "query_toks_no_value": ["select", "firstname", ",", "lastname", "from", "customer", "where", "email", "=", "value"], "question": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?", "question_toks": ["What", "is", "the", "first", "name", "and", "last", "name", "of", "the", "customer", "that", "has", "email", "``", "luisg", "@", "embraer.com.br", "''", "?"], "guid": 6142}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What is the maximum total amount paid by a customer? List the customer id and amount.", "sql": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1", "example": {"db_id": "products_for_hire", "query": "SELECT customer_id ,  sum(amount_paid) FROM Payments GROUP BY customer_id ORDER BY sum(amount_paid) DESC LIMIT 1", "query_toks": ["SELECT", "customer_id", ",", "sum", "(", "amount_paid", ")", "FROM", "Payments", "GROUP", "BY", "customer_id", "ORDER", "BY", "sum", "(", "amount_paid", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "customer_id", ",", "sum", "(", "amount_paid", ")", "from", "payments", "group", "by", "customer_id", "order", "by", "sum", "(", "amount_paid", ")", "desc", "limit", "value"], "question": "What is the maximum total amount paid by a customer? List the customer id and amount.", "question_toks": ["What", "is", "the", "maximum", "total", "amount", "paid", "by", "a", "customer", "?", "List", "the", "customer", "id", "and", "amount", "."], "guid": 6143}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the unit of measure and category code for the 'chervil' product?", "sql": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t2.unit_of_measure ,  t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"chervil\"", "query_toks": ["SELECT", "t2.unit_of_measure", ",", "t2.product_category_code", "FROM", "products", "AS", "t1", "JOIN", "ref_product_categories", "AS", "t2", "ON", "t1.product_category_code", "=", "t2.product_category_code", "WHERE", "t1.product_name", "=", "``", "chervil", "''"], "query_toks_no_value": ["select", "t2", ".", "unit_of_measure", ",", "t2", ".", "product_category_code", "from", "products", "as", "t1", "join", "ref_product_categories", "as", "t2", "on", "t1", ".", "product_category_code", "=", "t2", ".", "product_category_code", "where", "t1", ".", "product_name", "=", "value"], "question": "What are the unit of measure and category code for the 'chervil' product?", "question_toks": ["What", "are", "the", "unit", "of", "measure", "and", "category", "code", "for", "the", "'chervil", "'", "product", "?"], "guid": 6144}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Give the names of characteristics that are in two or more products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2", "query_toks": ["SELECT", "t3.characteristic_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "GROUP", "BY", "t3.characteristic_name", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t3", ".", "characteristic_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "group", "by", "t3", ".", "characteristic_name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Give the names of characteristics that are in two or more products?", "question_toks": ["Give", "the", "names", "of", "characteristics", "that", "are", "in", "two", "or", "more", "products", "?"], "guid": 6145}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | When did the first payment happen?", "sql": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1", "query_toks": ["SELECT", "payment_date", "FROM", "payment", "ORDER", "BY", "payment_date", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_date", "from", "payment", "order", "by", "payment_date", "asc", "limit", "value"], "question": "When did the first payment happen?", "question_toks": ["When", "did", "the", "first", "payment", "happen", "?"], "guid": 6146}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the the full names and ids for all customers, and how many accounts does each have?", "sql": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name ,  count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id", "query_toks": ["SELECT", "T1.customer_id", ",", "T2.customer_first_name", ",", "T2.customer_last_name", ",", "count", "(", "*", ")", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id"], "query_toks_no_value": ["select", "t1", ".", "customer_id", ",", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", ",", "count", "(", "*", ")", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id"], "question": "What are the the full names and ids for all customers, and how many accounts does each have?", "question_toks": ["What", "are", "the", "the", "full", "names", "and", "ids", "for", "all", "customers", ",", "and", "how", "many", "accounts", "does", "each", "have", "?"], "guid": 6147}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | For each payment method, how many payments were made?", "sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;", "example": {"db_id": "driving_school", "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;", "query_toks": ["SELECT", "payment_method_code", ",", "count", "(", "*", ")", "FROM", "Customer_Payments", "GROUP", "BY", "payment_method_code", ";"], "query_toks_no_value": ["select", "payment_method_code", ",", "count", "(", "*", ")", "from", "customer_payments", "group", "by", "payment_method_code"], "question": "For each payment method, how many payments were made?", "question_toks": ["For", "each", "payment", "method", ",", "how", "many", "payments", "were", "made", "?"], "guid": 6148}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What are the names of the customers who bought product \"food\" at least once?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "JOIN", "order_items", "AS", "T3", "JOIN", "products", "AS", "T4", "ON", "T1.customer_id", "=", "T2.customer_id", "AND", "T2.order_id", "=", "T3.order_id", "AND", "T3.product_id", "=", "T4.product_id", "WHERE", "T4.product_name", "=", "``", "food", "''", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "join", "order_items", "as", "t3", "join", "products", "as", "t4", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "and", "t2", ".", "order_id", "=", "t3", ".", "order_id", "and", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t4", ".", "product_name", "=", "value", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of the customers who bought product \"food\" at least once?", "question_toks": ["What", "are", "the", "names", "of", "the", "customers", "who", "bought", "product", "``", "food", "''", "at", "least", "once", "?"], "guid": 6149}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Which customers have orders with status \"Packing\"? Give me the customer names.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"", "example": {"db_id": "tracking_orders", "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"", "query_toks": ["SELECT", "DISTINCT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "Packing", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"], "question": "Which customers have orders with status \"Packing\"? Give me the customer names.", "question_toks": ["Which", "customers", "have", "orders", "with", "status", "``", "Packing", "''", "?", "Give", "me", "the", "customer", "names", "."], "guid": 6150}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What is the name of the district with the smallest area?", "sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1", "example": {"db_id": "store_product", "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1", "query_toks": ["SELECT", "district_name", "FROM", "district", "ORDER", "BY", "city_area", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "district_name", "from", "district", "order", "by", "city_area", "asc", "limit", "value"], "question": "What is the name of the district with the smallest area?", "question_toks": ["What", "is", "the", "name", "of", "the", "district", "with", "the", "smallest", "area", "?"], "guid": 6151}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the cities that do not have any branches with more than 100 members?", "sql": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100", "example": {"db_id": "shop_membership", "query": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100", "query_toks": ["SELECT", "city", "FROM", "branch", "EXCEPT", "SELECT", "city", "FROM", "branch", "WHERE", "membership_amount", ">", "100"], "query_toks_no_value": ["select", "city", "from", "branch", "except", "select", "city", "from", "branch", "where", "membership_amount", ">", "value"], "question": "What are the cities that do not have any branches with more than 100 members?", "question_toks": ["What", "are", "the", "cities", "that", "do", "not", "have", "any", "branches", "with", "more", "than", "100", "members", "?"], "guid": 6152}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | Show each premise type and the number of premises in that type.", "sql": "SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT premises_type ,  count(*) FROM premises GROUP BY premises_type", "query_toks": ["SELECT", "premises_type", ",", "count", "(", "*", ")", "FROM", "premises", "GROUP", "BY", "premises_type"], "query_toks_no_value": ["select", "premises_type", ",", "count", "(", "*", ")", "from", "premises", "group", "by", "premises_type"], "question": "Show each premise type and the number of premises in that type.", "question_toks": ["Show", "each", "premise", "type", "and", "the", "number", "of", "premises", "in", "that", "type", "."], "guid": 6153}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | How many products are there under the category \"Seeds\"?", "sql": "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products WHERE product_category_code  =  \"Seeds\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "WHERE", "product_category_code", "=", "``", "Seeds", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "where", "product_category_code", "=", "value"], "question": "How many products are there under the category \"Seeds\"?", "question_toks": ["How", "many", "products", "are", "there", "under", "the", "category", "``", "Seeds", "''", "?"], "guid": 6154}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the names and ids of all products whose price is between 600 and 700.", "sql": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700", "example": {"db_id": "department_store", "query": "SELECT product_name ,  product_id FROM products WHERE product_price BETWEEN 600 AND 700", "query_toks": ["SELECT", "product_name", ",", "product_id", "FROM", "products", "WHERE", "product_price", "BETWEEN", "600", "AND", "700"], "query_toks_no_value": ["select", "product_name", ",", "product_id", "from", "products", "where", "product_price", "between", "value", "and", "value"], "question": "Return the names and ids of all products whose price is between 600 and 700.", "question_toks": ["Return", "the", "names", "and", "ids", "of", "all", "products", "whose", "price", "is", "between", "600", "and", "700", "."], "guid": 6155}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?", "sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'", "example": {"db_id": "chinook_1", "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'", "query_toks": ["SELECT", "T1.Title", "FROM", "Album", "AS", "T1", "JOIN", "Track", "AS", "T2", "ON", "T1.AlbumId", "=", "T2.AlbumId", "JOIN", "Genre", "AS", "T3", "ON", "T2.GenreID", "=", "T3.GenreID", "WHERE", "T3.Name", "=", "'Reggae", "'", "INTERSECT", "SELECT", "T1.Title", "FROM", "Album", "AS", "T1", "JOIN", "Track", "AS", "T2", "ON", "T1.AlbumId", "=", "T2.AlbumId", "JOIN", "Genre", "AS", "T3", "ON", "T2.GenreID", "=", "T3.GenreID", "WHERE", "T3.Name", "=", "'Rock", "'"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "album", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "albumid", "=", "t2", ".", "albumid", "join", "genre", "as", "t3", "on", "t2", ".", "genreid", "=", "t3", ".", "genreid", "where", "t3", ".", "name", "=", "value", "intersect", "select", "t1", ".", "title", "from", "album", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "albumid", "=", "t2", ".", "albumid", "join", "genre", "as", "t3", "on", "t2", ".", "genreid", "=", "t3", ".", "genreid", "where", "t3", ".", "name", "=", "value"], "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?", "question_toks": ["What", "are", "the", "album", "titles", "for", "albums", "containing", "both", "'Reggae", "'", "and", "'Rock", "'", "genre", "tracks", "?"], "guid": 6156}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | Show the names of customers having an order with shipping method FedEx and order status Paid.", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "shipping_method_code", "=", "'FedEx", "'", "AND", "order_status_code", "=", "'Paid", "'"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "shipping_method_code", "=", "value", "and", "order_status_code", "=", "value"], "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.", "question_toks": ["Show", "the", "names", "of", "customers", "having", "an", "order", "with", "shipping", "method", "FedEx", "and", "order", "status", "Paid", "."], "guid": 6157}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many employees live in Canada?", "sql": "SELECT count(*) FROM employees WHERE country = \"Canada\";", "example": {"db_id": "store_1", "query": "SELECT count(*) FROM employees WHERE country = \"Canada\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employees", "WHERE", "country", "=", "``", "Canada", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employees", "where", "country", "=", "value"], "question": "How many employees live in Canada?", "question_toks": ["How", "many", "employees", "live", "in", "Canada", "?"], "guid": 6158}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the last names of customers without invoice totals exceeding 20?", "sql": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20", "example": {"db_id": "chinook_1", "query": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20", "query_toks": ["SELECT", "LastName", "FROM", "CUSTOMER", "EXCEPT", "SELECT", "T1.LastName", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "Invoice", "AS", "T2", "ON", "T1.CustomerId", "=", "T2.CustomerId", "WHERE", "T2.total", ">", "20"], "query_toks_no_value": ["select", "lastname", "from", "customer", "except", "select", "t1", ".", "lastname", "from", "customer", "as", "t1", "join", "invoice", "as", "t2", "on", "t1", ".", "customerid", "=", "t2", ".", "customerid", "where", "t2", ".", "total", ">", "value"], "question": "What are the last names of customers without invoice totals exceeding 20?", "question_toks": ["What", "are", "the", "last", "names", "of", "customers", "without", "invoice", "totals", "exceeding", "20", "?"], "guid": 6159}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the transaction types and the total amount of transactions.", "sql": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type", "example": {"db_id": "customers_and_invoices", "query": "SELECT transaction_type ,  sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type", "query_toks": ["SELECT", "transaction_type", ",", "sum", "(", "transaction_amount", ")", "FROM", "Financial_transactions", "GROUP", "BY", "transaction_type"], "query_toks_no_value": ["select", "transaction_type", ",", "sum", "(", "transaction_amount", ")", "from", "financial_transactions", "group", "by", "transaction_type"], "question": "Show the transaction types and the total amount of transactions.", "question_toks": ["Show", "the", "transaction", "types", "and", "the", "total", "amount", "of", "transactions", "."], "guid": 6160}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | List the names of all distinct products in alphabetical order.", "sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name", "example": {"db_id": "tracking_orders", "query": "SELECT DISTINCT product_name FROM products ORDER BY product_name", "query_toks": ["SELECT", "DISTINCT", "product_name", "FROM", "products", "ORDER", "BY", "product_name"], "query_toks_no_value": ["select", "distinct", "product_name", "from", "products", "order", "by", "product_name"], "question": "List the names of all distinct products in alphabetical order.", "question_toks": ["List", "the", "names", "of", "all", "distinct", "products", "in", "alphabetical", "order", "."], "guid": 6161}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many employees are there?", "sql": "SELECT count(*) FROM Staff;", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Staff;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Staff", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "staff"], "question": "How many employees are there?", "question_toks": ["How", "many", "employees", "are", "there", "?"], "guid": 6162}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the cities corresponding to employees who help customers with the postal code 70174.", "sql": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"", "example": {"db_id": "chinook_1", "query": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"", "query_toks": ["SELECT", "T2.City", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "EMPLOYEE", "AS", "T2", "ON", "T1.SupportRepId", "=", "T2.EmployeeId", "WHERE", "T1.PostalCode", "=", "``", "70174", "''"], "query_toks_no_value": ["select", "t2", ".", "city", "from", "customer", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "supportrepid", "=", "t2", ".", "employeeid", "where", "t1", ".", "postalcode", "=", "value"], "question": "Find the cities corresponding to employees who help customers with the postal code 70174.", "question_toks": ["Find", "the", "cities", "corresponding", "to", "employees", "who", "help", "customers", "with", "the", "postal", "code", "70174", "."], "guid": 6163}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | List all open years when at least two shops are opened.", "sql": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2", "example": {"db_id": "shop_membership", "query": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2", "query_toks": ["SELECT", "open_year", "FROM", "branch", "GROUP", "BY", "open_year", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "open_year", "from", "branch", "group", "by", "open_year", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List all open years when at least two shops are opened.", "question_toks": ["List", "all", "open", "years", "when", "at", "least", "two", "shops", "are", "opened", "."], "guid": 6164}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What is the phone and email for customer with first name Aniyah and last name Feest?", "sql": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_phone ,  customer_email FROM Customers WHERE customer_first_name  =  \"Aniyah\" AND customer_last_name  =  \"Feest\"", "query_toks": ["SELECT", "customer_phone", ",", "customer_email", "FROM", "Customers", "WHERE", "customer_first_name", "=", "``", "Aniyah", "''", "AND", "customer_last_name", "=", "``", "Feest", "''"], "query_toks_no_value": ["select", "customer_phone", ",", "customer_email", "from", "customers", "where", "customer_first_name", "=", "value", "and", "customer_last_name", "=", "value"], "question": "What is the phone and email for customer with first name Aniyah and last name Feest?", "question_toks": ["What", "is", "the", "phone", "and", "email", "for", "customer", "with", "first", "name", "Aniyah", "and", "last", "name", "Feest", "?"], "guid": 6165}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Return the phone number of the customer who filed the complaint that was raised most recently.", "sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1", "query_toks": ["SELECT", "t1.phone_number", "FROM", "customers", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "ORDER", "BY", "t2.date_complaint_raised", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "phone_number", "from", "customers", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "order", "by", "t2", ".", "date_complaint_raised", "desc", "limit", "value"], "question": "Return the phone number of the customer who filed the complaint that was raised most recently.", "question_toks": ["Return", "the", "phone", "number", "of", "the", "customer", "who", "filed", "the", "complaint", "that", "was", "raised", "most", "recently", "."], "guid": 6166}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What are all the movies rated as R? List the titles.", "sql": "SELECT title FROM film WHERE rating  =  'R'", "example": {"db_id": "sakila_1", "query": "SELECT title FROM film WHERE rating  =  'R'", "query_toks": ["SELECT", "title", "FROM", "film", "WHERE", "rating", "=", "'R", "'"], "query_toks_no_value": ["select", "title", "from", "film", "where", "rating", "=", "value"], "question": "What are all the movies rated as R? List the titles.", "question_toks": ["What", "are", "all", "the", "movies", "rated", "as", "R", "?", "List", "the", "titles", "."], "guid": 6167}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find the list of page size which have more than 3 product listed", "sql": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3", "example": {"db_id": "store_product", "query": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3", "query_toks": ["SELECT", "max_page_size", "FROM", "product", "GROUP", "BY", "max_page_size", "HAVING", "count", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "max_page_size", "from", "product", "group", "by", "max_page_size", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the list of page size which have more than 3 product listed", "question_toks": ["Find", "the", "list", "of", "page", "size", "which", "have", "more", "than", "3", "product", "listed"], "guid": 6168}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the largest payment amount?", "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1", "query_toks": ["SELECT", "amount", "FROM", "payment", "ORDER", "BY", "amount", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "amount", "from", "payment", "order", "by", "amount", "desc", "limit", "value"], "question": "What is the largest payment amount?", "question_toks": ["What", "is", "the", "largest", "payment", "amount", "?"], "guid": 6169}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Find the names of customers who have bought by at least three distinct products.", "sql": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3", "example": {"db_id": "department_store", "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3", "query_toks": ["SELECT", "DISTINCT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "customer_orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "JOIN", "order_items", "AS", "T3", "ON", "T2.order_id", "=", "T3.order_id", "GROUP", "BY", "T1.customer_id", "HAVING", "COUNT", "(", "DISTINCT", "T3.product_id", ")", ">", "=", "3"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "distinct", "t3", ".", "product_id", ")", ">", "=", "value"], "question": "Find the names of customers who have bought by at least three distinct products.", "question_toks": ["Find", "the", "names", "of", "customers", "who", "have", "bought", "by", "at", "least", "three", "distinct", "products", "."], "guid": 6170}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What is the name of the media type that is least common across all tracks?", "sql": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "example": {"db_id": "chinook_1", "query": "SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) ASC LIMIT 1", "query_toks": ["SELECT", "T1.Name", "FROM", "MEDIATYPE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.MediaTypeId", "=", "T2.MediaTypeId", "GROUP", "BY", "T2.MediaTypeId", "ORDER", "BY", "COUNT", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "mediatype", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "mediatypeid", "=", "t2", ".", "mediatypeid", "group", "by", "t2", ".", "mediatypeid", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the name of the media type that is least common across all tracks?", "question_toks": ["What", "is", "the", "name", "of", "the", "media", "type", "that", "is", "least", "common", "across", "all", "tracks", "?"], "guid": 6171}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Find the last name of the staff member who processed the complaint of the cheapest product.", "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id JOIN products AS t3 ON t2.product_id  =  t3.product_id ORDER BY t3.product_price LIMIT 1", "query_toks": ["SELECT", "t1.last_name", "FROM", "staff", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.staff_id", "=", "t2.staff_id", "JOIN", "products", "AS", "t3", "ON", "t2.product_id", "=", "t3.product_id", "ORDER", "BY", "t3.product_price", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "staff", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "join", "products", "as", "t3", "on", "t2", ".", "product_id", "=", "t3", ".", "product_id", "order", "by", "t3", ".", "product_price", "limit", "value"], "question": "Find the last name of the staff member who processed the complaint of the cheapest product.", "question_toks": ["Find", "the", "last", "name", "of", "the", "staff", "member", "who", "processed", "the", "complaint", "of", "the", "cheapest", "product", "."], "guid": 6172}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Which catalog content has the highest height? Give me the catalog entry name.", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1", "query_toks": ["SELECT", "catalog_entry_name", "FROM", "catalog_contents", "ORDER", "BY", "height", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "catalog_entry_name", "from", "catalog_contents", "order", "by", "height", "desc", "limit", "value"], "question": "Which catalog content has the highest height? Give me the catalog entry name.", "question_toks": ["Which", "catalog", "content", "has", "the", "highest", "height", "?", "Give", "me", "the", "catalog", "entry", "name", "."], "guid": 6173}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?", "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON  T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  >  100 AND T3.transaction_type_code  =  \"PUR\"", "query_toks": ["SELECT", "T1.lot_details", "FROM", "LOTS", "AS", "T1", "JOIN", "TRANSACTIONS_LOTS", "AS", "T2", "ON", "T1.lot_id", "=", "T2.transaction_id", "JOIN", "TRANSACTIONS", "AS", "T3", "ON", "T2.transaction_id", "=", "T3.transaction_id", "WHERE", "T3.share_count", ">", "100", "AND", "T3.transaction_type_code", "=", "``", "PUR", "''"], "query_toks_no_value": ["select", "t1", ".", "lot_details", "from", "lots", "as", "t1", "join", "transactions_lots", "as", "t2", "on", "t1", ".", "lot_id", "=", "t2", ".", "transaction_id", "join", "transactions", "as", "t3", "on", "t2", ".", "transaction_id", "=", "t3", ".", "transaction_id", "where", "t3", ".", "share_count", ">", "value", "and", "t3", ".", "transaction_type_code", "=", "value"], "question": "What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is \"PUR\"?", "question_toks": ["What", "are", "the", "lot", "details", "of", "lots", "associated", "with", "transactions", "whose", "share", "count", "is", "bigger", "than", "100", "and", "whose", "type", "code", "is", "``", "PUR", "''", "?"], "guid": 6174}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | Count the number of entrepreneurs.", "sql": "SELECT count(*) FROM entrepreneur", "example": {"db_id": "entrepreneur", "query": "SELECT count(*) FROM entrepreneur", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "entrepreneur"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "entrepreneur"], "question": "Count the number of entrepreneurs.", "question_toks": ["Count", "the", "number", "of", "entrepreneurs", "."], "guid": 6175}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | How many customers have an account?", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(DISTINCT customer_id) FROM Accounts", "query_toks": ["SELECT", "count", "(", "DISTINCT", "customer_id", ")", "FROM", "Accounts"], "query_toks_no_value": ["select", "count", "(", "distinct", "customer_id", ")", "from", "accounts"], "question": "How many customers have an account?", "question_toks": ["How", "many", "customers", "have", "an", "account", "?"], "guid": 6176}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?", "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "example": {"db_id": "tracking_orders", "query": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "query_toks": ["SELECT", "DISTINCT", "invoice_details", "FROM", "invoices", "WHERE", "invoice_date", "<", "``", "1989-09-03", "''", "OR", "invoice_date", ">", "``", "2007-12-25", "''"], "query_toks_no_value": ["select", "distinct", "invoice_details", "from", "invoices", "where", "invoice_date", "<", "value", "or", "invoice_date", ">", "value"], "question": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?", "question_toks": ["What", "are", "the", "distinct", "details", "of", "invoices", "created", "before", "1989-09-03", "or", "after", "2007-12-25", "?"], "guid": 6177}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Who made the latest order?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "ORDER", "BY", "t2.order_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "order", "by", "t2", ".", "order_date", "desc", "limit", "value"], "question": "Who made the latest order?", "question_toks": ["Who", "made", "the", "latest", "order", "?"], "guid": 6178}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the names of customers who never made an order.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "EXCEPT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "except", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "What are the names of customers who never made an order.", "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "never", "made", "an", "order", "."], "guid": 6179}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?", "sql": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"", "example": {"db_id": "department_store", "query": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"", "query_toks": ["SELECT", "customer_id", ",", "customer_name", "FROM", "customers", "WHERE", "customer_address", "LIKE", "``", "%", "WY", "%", "''", "AND", "payment_method_code", "!", "=", "``", "Credit", "Card", "''"], "query_toks_no_value": ["select", "customer_id", ",", "customer_name", "from", "customers", "where", "customer_address", "like", "value", "and", "payment_method_code", "!", "=", "value"], "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "customers", "with", "addressed", "that", "contain", "WY", "and", "who", "do", "not", "use", "a", "credit", "card", "for", "payment", "?"], "guid": 6180}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many lessons taught by staff whose first name has letter 'a' in it?", "sql": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE \"%a%\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Lessons", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.first_name", "LIKE", "``", "%", "a", "%", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "lessons", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "first_name", "like", "value"], "question": "How many lessons taught by staff whose first name has letter 'a' in it?", "question_toks": ["How", "many", "lessons", "taught", "by", "staff", "whose", "first", "name", "has", "letter", "'a", "'", "in", "it", "?"], "guid": 6181}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the member names and hometowns of those who registered at a branch in 2016?", "sql": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016", "example": {"db_id": "shop_membership", "query": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016", "query_toks": ["SELECT", "T2.name", ",", "T2.hometown", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "member", "AS", "T2", "ON", "T1.member_id", "=", "T2.member_id", "WHERE", "T1.register_year", "=", "2016"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "hometown", "from", "membership_register_branch", "as", "t1", "join", "member", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_id", "where", "t1", ".", "register_year", "=", "value"], "question": "What are the member names and hometowns of those who registered at a branch in 2016?", "question_toks": ["What", "are", "the", "member", "names", "and", "hometowns", "of", "those", "who", "registered", "at", "a", "branch", "in", "2016", "?"], "guid": 6182}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Give the maximum and minimum product prices for each product type, grouped and ordered by product type.", "sql": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "example": {"db_id": "department_store", "query": "SELECT max(product_price) ,  min(product_price) ,  product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code", "query_toks": ["SELECT", "max", "(", "product_price", ")", ",", "min", "(", "product_price", ")", ",", "product_type_code", "FROM", "products", "GROUP", "BY", "product_type_code", "ORDER", "BY", "product_type_code"], "query_toks_no_value": ["select", "max", "(", "product_price", ")", ",", "min", "(", "product_price", ")", ",", "product_type_code", "from", "products", "group", "by", "product_type_code", "order", "by", "product_type_code"], "question": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.", "question_toks": ["Give", "the", "maximum", "and", "minimum", "product", "prices", "for", "each", "product", "type", ",", "grouped", "and", "ordered", "by", "product", "type", "."], "guid": 6183}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What is the name of the customer who has the largest number of orders?", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the customer who has the largest number of orders?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "the", "largest", "number", "of", "orders", "?"], "guid": 6184}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.", "sql": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50", "example": {"db_id": "tracking_share_transactions", "query": "SELECT min(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code  =  \"PUR\" AND share_count  >  50", "query_toks": ["SELECT", "min", "(", "amount_of_transaction", ")", "FROM", "TRANSACTIONS", "WHERE", "transaction_type_code", "=", "``", "PUR", "''", "AND", "share_count", ">", "50"], "query_toks_no_value": ["select", "min", "(", "amount_of_transaction", ")", "from", "transactions", "where", "transaction_type_code", "=", "value", "and", "share_count", ">", "value"], "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.", "question_toks": ["Show", "the", "minimum", "amount", "of", "transactions", "whose", "type", "code", "is", "``", "PUR", "''", "and", "whose", "share", "count", "is", "bigger", "than", "50", "."], "guid": 6185}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";", "example": {"db_id": "store_1", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\";", "query_toks": ["SELECT", "T2.name", "FROM", "genres", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "JOIN", "media_types", "AS", "T3", "ON", "T3.id", "=", "T2.media_type_id", "WHERE", "T1.name", "=", "``", "Rock", "''", "OR", "T3.name", "=", "``", "MPEG", "audio", "file", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "genres", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "join", "media_types", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "media_type_id", "where", "t1", ".", "name", "=", "value", "or", "t3", ".", "name", "=", "value"], "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?", "question_toks": ["What", "are", "the", "names", "of", "all", "tracks", "that", "belong", "to", "the", "Rock", "genre", "and", "whose", "media", "type", "is", "MPEG", "?"], "guid": 6186}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the first names of all customers that live in Brazil and have an invoice.", "sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"", "example": {"db_id": "chinook_1", "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"", "query_toks": ["SELECT", "DISTINCT", "T1.FirstName", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "INVOICE", "AS", "T2", "ON", "T1.CustomerId", "=", "T2.CustomerId", "WHERE", "T1.country", "=", "``", "Brazil", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "firstname", "from", "customer", "as", "t1", "join", "invoice", "as", "t2", "on", "t1", ".", "customerid", "=", "t2", ".", "customerid", "where", "t1", ".", "country", "=", "value"], "question": "Find the first names of all customers that live in Brazil and have an invoice.", "question_toks": ["Find", "the", "first", "names", "of", "all", "customers", "that", "live", "in", "Brazil", "and", "have", "an", "invoice", "."], "guid": 6187}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What is the product description of the product booked with an amount of 102.76?", "sql": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76", "example": {"db_id": "products_for_hire", "query": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76", "query_toks": ["SELECT", "T2.product_description", "FROM", "products_booked", "AS", "T1", "JOIN", "products_for_hire", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "WHERE", "T1.booked_amount", "=", "102.76"], "query_toks_no_value": ["select", "t2", ".", "product_description", "from", "products_booked", "as", "t1", "join", "products_for_hire", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t1", ".", "booked_amount", "=", "value"], "question": "What is the product description of the product booked with an amount of 102.76?", "question_toks": ["What", "is", "the", "product", "description", "of", "the", "product", "booked", "with", "an", "amount", "of", "102.76", "?"], "guid": 6188}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | List the names of people that are not entrepreneurs.", "sql": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "example": {"db_id": "entrepreneur", "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)", "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_ID", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "entrepreneur", ")"], "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "entrepreneur", ")"], "question": "List the names of people that are not entrepreneurs.", "question_toks": ["List", "the", "names", "of", "people", "that", "are", "not", "entrepreneurs", "."], "guid": 6189}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?", "sql": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"", "example": {"db_id": "department_store", "query": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"", "query_toks": ["SELECT", "T1.staff_name", ",", "T1.staff_gender", "FROM", "staff", "AS", "T1", "JOIN", "Staff_Department_Assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.job_title_code", "=", "``", "Sales", "Person", "''", "EXCEPT", "SELECT", "T1.staff_name", ",", "T1.staff_gender", "FROM", "staff", "AS", "T1", "JOIN", "Staff_Department_Assignments", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.job_title_code", "=", "``", "Clerical", "Staff", "''"], "query_toks_no_value": ["select", "t1", ".", "staff_name", ",", "t1", ".", "staff_gender", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "job_title_code", "=", "value", "except", "select", "t1", ".", "staff_name", ",", "t1", ".", "staff_gender", "from", "staff", "as", "t1", "join", "staff_department_assignments", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "job_title_code", "=", "value"], "question": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?", "question_toks": ["What", "are", "the", "names", "and", "genders", "of", "staff", "who", "have", "held", "the", "title", "Sales", "Person", ",", "but", "never", "Clerical", "Staff", "?"], "guid": 6190}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find the city with the most number of stores.", "sql": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "store_product", "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t3.headquartered_city", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "GROUP", "BY", "t3.headquartered_city", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "headquartered_city", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "group", "by", "t3", ".", "headquartered_city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the city with the most number of stores.", "question_toks": ["Find", "the", "city", "with", "the", "most", "number", "of", "stores", "."], "guid": 6191}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many staff live in state Georgia?", "sql": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Addresses WHERE state_province_county = \"Georgia\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Addresses", "WHERE", "state_province_county", "=", "``", "Georgia", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "addresses", "where", "state_province_county", "=", "value"], "question": "How many staff live in state Georgia?", "question_toks": ["How", "many", "staff", "live", "in", "state", "Georgia", "?"], "guid": 6192}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Count the number of different film ratings.", "sql": "SELECT count(DISTINCT rating) FROM film", "example": {"db_id": "sakila_1", "query": "SELECT count(DISTINCT rating) FROM film", "query_toks": ["SELECT", "count", "(", "DISTINCT", "rating", ")", "FROM", "film"], "query_toks_no_value": ["select", "count", "(", "distinct", "rating", ")", "from", "film"], "question": "Count the number of different film ratings.", "question_toks": ["Count", "the", "number", "of", "different", "film", "ratings", "."], "guid": 6193}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What are the title, id, and description of the movie with the greatest number of actors?", "sql": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.title", ",", "T2.film_id", ",", "T2.description", "FROM", "film_actor", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T2.film_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "title", ",", "t2", ".", "film_id", ",", "t2", ".", "description", "from", "film_actor", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t2", ".", "film_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the title, id, and description of the movie with the greatest number of actors?", "question_toks": ["What", "are", "the", "title", ",", "id", ",", "and", "description", "of", "the", "movie", "with", "the", "greatest", "number", "of", "actors", "?"], "guid": 6194}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";", "example": {"db_id": "store_1", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\";", "query_toks": ["SELECT", "T2.name", "FROM", "genres", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "JOIN", "media_types", "AS", "T3", "ON", "T3.id", "=", "T2.media_type_id", "WHERE", "T1.name", "=", "``", "Rock", "''", "AND", "T3.name", "=", "``", "MPEG", "audio", "file", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "genres", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "join", "media_types", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "media_type_id", "where", "t1", ".", "name", "=", "value", "and", "t3", ".", "name", "=", "value"], "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.", "question_toks": ["List", "the", "name", "of", "tracks", "belongs", "to", "genre", "Rock", "and", "whose", "media", "type", "is", "MPEG", "audio", "file", "."], "guid": 6195}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What products are sold at the store named Miramichi?", "sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"", "example": {"db_id": "store_product", "query": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"", "query_toks": ["SELECT", "t1.product", "FROM", "product", "AS", "t1", "JOIN", "store_product", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "store", "AS", "t3", "ON", "t2.store_id", "=", "t3.store_id", "WHERE", "t3.store_name", "=", "``", "Miramichi", "''"], "query_toks_no_value": ["select", "t1", ".", "product", "from", "product", "as", "t1", "join", "store_product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "store", "as", "t3", "on", "t2", ".", "store_id", "=", "t3", ".", "store_id", "where", "t3", ".", "store_name", "=", "value"], "question": "What products are sold at the store named Miramichi?", "question_toks": ["What", "products", "are", "sold", "at", "the", "store", "named", "Miramichi", "?"], "guid": 6196}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many customers have opened an account?", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(DISTINCT customer_id) FROM Accounts", "query_toks": ["SELECT", "count", "(", "DISTINCT", "customer_id", ")", "FROM", "Accounts"], "query_toks_no_value": ["select", "count", "(", "distinct", "customer_id", ")", "from", "accounts"], "question": "How many customers have opened an account?", "question_toks": ["How", "many", "customers", "have", "opened", "an", "account", "?"], "guid": 6197}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are characteristic names used at least twice across all products?", "sql": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2", "query_toks": ["SELECT", "t3.characteristic_name", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "GROUP", "BY", "t3.characteristic_name", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t3", ".", "characteristic_name", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "group", "by", "t3", ".", "characteristic_name", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are characteristic names used at least twice across all products?", "question_toks": ["What", "are", "characteristic", "names", "used", "at", "least", "twice", "across", "all", "products", "?"], "guid": 6198}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the full name and id of the actor or actress who starred in the greatest number of films.", "sql": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", ",", "T2.actor_id", "FROM", "film_actor", "AS", "T1", "JOIN", "actor", "AS", "T2", "ON", "T1.actor_id", "=", "T2.actor_id", "GROUP", "BY", "T2.actor_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", ",", "t2", ".", "actor_id", "from", "film_actor", "as", "t1", "join", "actor", "as", "t2", "on", "t1", ".", "actor_id", "=", "t2", ".", "actor_id", "group", "by", "t2", ".", "actor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the full name and id of the actor or actress who starred in the greatest number of films.", "question_toks": ["Return", "the", "full", "name", "and", "id", "of", "the", "actor", "or", "actress", "who", "starred", "in", "the", "greatest", "number", "of", "films", "."], "guid": 6199}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | For each type of store, how many of them are there?", "sql": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE", "example": {"db_id": "store_product", "query": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE", "query_toks": ["SELECT", "TYPE", ",", "count", "(", "*", ")", "FROM", "store", "GROUP", "BY", "TYPE"], "query_toks_no_value": ["select", "type", ",", "count", "(", "*", ")", "from", "store", "group", "by", "type"], "question": "For each type of store, how many of them are there?", "question_toks": ["For", "each", "type", "of", "store", ",", "how", "many", "of", "them", "are", "there", "?"], "guid": 6200}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Count the number of distinct product types.", "sql": "SELECT count(DISTINCT product_type_code) FROM products", "example": {"db_id": "department_store", "query": "SELECT count(DISTINCT product_type_code) FROM products", "query_toks": ["SELECT", "count", "(", "DISTINCT", "product_type_code", ")", "FROM", "products"], "query_toks_no_value": ["select", "count", "(", "distinct", "product_type_code", ")", "from", "products"], "question": "Count the number of distinct product types.", "question_toks": ["Count", "the", "number", "of", "distinct", "product", "types", "."], "guid": 6201}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the names and cities of the branches that do not have any registered members?", "sql": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)", "example": {"db_id": "shop_membership", "query": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)", "query_toks": ["SELECT", "name", ",", "city", "FROM", "branch", "WHERE", "branch_id", "NOT", "IN", "(", "SELECT", "branch_id", "FROM", "membership_register_branch", ")"], "query_toks_no_value": ["select", "name", ",", "city", "from", "branch", "where", "branch_id", "not", "in", "(", "select", "branch_id", "from", "membership_register_branch", ")"], "question": "What are the names and cities of the branches that do not have any registered members?", "question_toks": ["What", "are", "the", "names", "and", "cities", "of", "the", "branches", "that", "do", "not", "have", "any", "registered", "members", "?"], "guid": 6202}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Cound the number of artists who have not released an album.", "sql": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "example": {"db_id": "chinook_1", "query": "SELECT count(*) FROM ARTIST WHERE artistid NOT IN(SELECT artistid FROM ALBUM)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ARTIST", "WHERE", "artistid", "NOT", "IN", "(", "SELECT", "artistid", "FROM", "ALBUM", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artist", "where", "artistid", "not", "in", "(", "select", "artistid", "from", "album", ")"], "question": "Cound the number of artists who have not released an album.", "question_toks": ["Cound", "the", "number", "of", "artists", "who", "have", "not", "released", "an", "album", "."], "guid": 6203}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many order items correspond to each order id?", "sql": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT order_id ,  count(*) FROM Order_items GROUP BY order_id", "query_toks": ["SELECT", "order_id", ",", "count", "(", "*", ")", "FROM", "Order_items", "GROUP", "BY", "order_id"], "query_toks_no_value": ["select", "order_id", ",", "count", "(", "*", ")", "from", "order_items", "group", "by", "order_id"], "question": "How many order items correspond to each order id?", "question_toks": ["How", "many", "order", "items", "correspond", "to", "each", "order", "id", "?"], "guid": 6204}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | How many stores are headquarted in each city?", "sql": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city", "example": {"db_id": "store_product", "query": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city", "query_toks": ["SELECT", "t3.headquartered_city", ",", "count", "(", "*", ")", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "GROUP", "BY", "t3.headquartered_city"], "query_toks_no_value": ["select", "t3", ".", "headquartered_city", ",", "count", "(", "*", ")", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "group", "by", "t3", ".", "headquartered_city"], "question": "How many stores are headquarted in each city?", "question_toks": ["How", "many", "stores", "are", "headquarted", "in", "each", "city", "?"], "guid": 6205}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What are the names of all products that are not the most frequently-used maximum page size?", "sql": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "store_product", "query": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "product", "!", "=", "(", "SELECT", "max_page_size", "FROM", "product", "GROUP", "BY", "max_page_size", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "product", "from", "product", "where", "product", "!", "=", "(", "select", "max_page_size", "from", "product", "group", "by", "max_page_size", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What are the names of all products that are not the most frequently-used maximum page size?", "question_toks": ["What", "are", "the", "names", "of", "all", "products", "that", "are", "not", "the", "most", "frequently-used", "maximum", "page", "size", "?"], "guid": 6206}}