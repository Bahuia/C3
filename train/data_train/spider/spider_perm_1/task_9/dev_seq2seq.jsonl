{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the number of albums.", "sql": "SELECT count(*) FROM ALBUM", "example": {"db_id": "chinook_1", "query": "SELECT count(*) FROM ALBUM", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ALBUM"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "album"], "question": "Find the number of albums.", "question_toks": ["Find", "the", "number", "of", "albums", "."], "guid": 5703}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Hom many albums does the artist \"Metallica\" have?", "sql": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"", "example": {"db_id": "chinook_1", "query": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "ALBUM", "AS", "T1", "JOIN", "ARTIST", "AS", "T2", "ON", "T1.ArtistId", "=", "T2.ArtistId", "WHERE", "T2.Name", "=", "``", "Metallica", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "album", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artistid", "=", "t2", ".", "artistid", "where", "t2", ".", "name", "=", "value"], "question": "Hom many albums does the artist \"Metallica\" have?", "question_toks": ["Hom", "many", "albums", "does", "the", "artist", "``", "Metallica", "''", "have", "?"], "guid": 5704}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.", "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "example": {"db_id": "tracking_orders", "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "query_toks": ["SELECT", "invoice_number", "FROM", "invoices", "WHERE", "invoice_date", "<", "``", "1989-09-03", "''", "OR", "invoice_date", ">", "``", "2007-12-25", "''"], "query_toks_no_value": ["select", "invoice_number", "from", "invoices", "where", "invoice_date", "<", "value", "or", "invoice_date", ">", "value"], "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.", "question_toks": ["Find", "the", "invoice", "numbers", "which", "are", "created", "before", "1989-09-03", "or", "after", "2007-12-25", "."], "guid": 5705}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Give the full name and customer id of the customer with the fewest accounts.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "customers_card_transactions", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name ,  T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T2.customer_first_name", ",", "T2.customer_last_name", ",", "T1.customer_id", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", ",", "t1", ".", "customer_id", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Give the full name and customer id of the customer with the fewest accounts.", "question_toks": ["Give", "the", "full", "name", "and", "customer", "id", "of", "the", "customer", "with", "the", "fewest", "accounts", "."], "guid": 5706}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the card numbers, names, and hometowns of every member ordered by descending level?", "sql": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC", "example": {"db_id": "shop_membership", "query": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC", "query_toks": ["SELECT", "card_number", ",", "name", ",", "hometown", "FROM", "member", "ORDER", "BY", "LEVEL", "DESC"], "query_toks_no_value": ["select", "card_number", ",", "name", ",", "hometown", "from", "member", "order", "by", "level", "desc"], "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?", "question_toks": ["What", "are", "the", "card", "numbers", ",", "names", ",", "and", "hometowns", "of", "every", "member", "ordered", "by", "descending", "level", "?"], "guid": 5707}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | What are the lot details of lots associated with transactions with share count smaller than 50?", "sql": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id  =  T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id  =  T3.transaction_id WHERE T3.share_count  <  50", "query_toks": ["SELECT", "T1.lot_details", "FROM", "LOTS", "AS", "T1", "JOIN", "TRANSACTIONS_LOTS", "AS", "T2", "ON", "T1.lot_id", "=", "T2.transaction_id", "JOIN", "TRANSACTIONS", "AS", "T3", "ON", "T2.transaction_id", "=", "T3.transaction_id", "WHERE", "T3.share_count", "<", "50"], "query_toks_no_value": ["select", "t1", ".", "lot_details", "from", "lots", "as", "t1", "join", "transactions_lots", "as", "t2", "on", "t1", ".", "lot_id", "=", "t2", ".", "transaction_id", "join", "transactions", "as", "t3", "on", "t2", ".", "transaction_id", "=", "t3", ".", "transaction_id", "where", "t3", ".", "share_count", "<", "value"], "question": "What are the lot details of lots associated with transactions with share count smaller than 50?", "question_toks": ["What", "are", "the", "lot", "details", "of", "lots", "associated", "with", "transactions", "with", "share", "count", "smaller", "than", "50", "?"], "guid": 5708}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | Which country and state does staff with first name as Janessa and last name as Sawayn lived?", "sql": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT T1.country ,  T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = \"Janessa\" AND T2.last_name = \"Sawayn\";", "query_toks": ["SELECT", "T1.country", ",", "T1.state_province_county", "FROM", "Addresses", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.address_id", "=", "T2.staff_address_id", "WHERE", "T2.first_name", "=", "``", "Janessa", "''", "AND", "T2.last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "country", ",", "t1", ".", "state_province_county", "from", "addresses", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "staff_address_id", "where", "t2", ".", "first_name", "=", "value", "and", "t2", ".", "last_name", "=", "value"], "question": "Which country and state does staff with first name as Janessa and last name as Sawayn lived?", "question_toks": ["Which", "country", "and", "state", "does", "staff", "with", "first", "name", "as", "Janessa", "and", "last", "name", "as", "Sawayn", "lived", "?"], "guid": 5709}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Return the names and typical buying prices for all products.", "sql": "SELECT product_name ,  typical_buying_price FROM products", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_name ,  typical_buying_price FROM products", "query_toks": ["SELECT", "product_name", ",", "typical_buying_price", "FROM", "products"], "query_toks_no_value": ["select", "product_name", ",", "typical_buying_price", "from", "products"], "question": "Return the names and typical buying prices for all products.", "question_toks": ["Return", "the", "names", "and", "typical", "buying", "prices", "for", "all", "products", "."], "guid": 5710}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | List all the product names with the color description \"white\".", "sql": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"", "query_toks": ["SELECT", "t1.product_name", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "WHERE", "t2.color_description", "=", "``", "white", "''"], "query_toks_no_value": ["select", "t1", ".", "product_name", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "where", "t2", ".", "color_description", "=", "value"], "question": "List all the product names with the color description \"white\".", "question_toks": ["List", "all", "the", "product", "names", "with", "the", "color", "description", "``", "white", "''", "."], "guid": 5711}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the names of the customers who have order status both \"On Road\" and \"Shipped\".", "sql": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"", "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "On", "Road", "''", "INTERSECT", "SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "Shipped", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value", "intersect", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"], "question": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".", "question_toks": ["Find", "the", "names", "of", "the", "customers", "who", "have", "order", "status", "both", "``", "On", "Road", "''", "and", "``", "Shipped", "''", "."], "guid": 5712}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What is the investor that has invested in the most number of entrepreneurs?", "sql": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "entrepreneur", "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Investor", "FROM", "entrepreneur", "GROUP", "BY", "Investor", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "investor", "from", "entrepreneur", "group", "by", "investor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the investor that has invested in the most number of entrepreneurs?", "question_toks": ["What", "is", "the", "investor", "that", "has", "invested", "in", "the", "most", "number", "of", "entrepreneurs", "?"], "guid": 5713}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the name and ID of the product whose total order quantity is the largest.", "sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "query_toks": ["SELECT", "t2.product_details", ",", "t2.product_id", "FROM", "order_items", "AS", "t1", "JOIN", "products", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "GROUP", "BY", "t1.product_id", "ORDER", "BY", "sum", "(", "t1.order_quantity", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "product_details", ",", "t2", ".", "product_id", "from", "order_items", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_id", "order", "by", "sum", "(", "t1", ".", "order_quantity", ")", "limit", "value"], "question": "Find the name and ID of the product whose total order quantity is the largest.", "question_toks": ["Find", "the", "name", "and", "ID", "of", "the", "product", "whose", "total", "order", "quantity", "is", "the", "largest", "."], "guid": 5714}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Find the category descriptions of the products whose descriptions include letter 't'.", "sql": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'", "example": {"db_id": "products_gen_characteristics", "query": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'", "query_toks": ["SELECT", "T1.product_category_description", "FROM", "ref_product_categories", "AS", "T1", "JOIN", "products", "AS", "T2", "ON", "T1.product_category_code", "=", "T2.product_category_code", "WHERE", "T2.product_description", "LIKE", "'", "%", "t", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "product_category_description", "from", "ref_product_categories", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_category_code", "=", "t2", ".", "product_category_code", "where", "t2", ".", "product_description", "like", "value"], "question": "Find the category descriptions of the products whose descriptions include letter 't'.", "question_toks": ["Find", "the", "category", "descriptions", "of", "the", "products", "whose", "descriptions", "include", "letter", "'t", "'", "."], "guid": 5715}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List every album ordered by album title in ascending order.", "sql": "SELECT title FROM albums ORDER BY title;", "example": {"db_id": "store_1", "query": "SELECT title FROM albums ORDER BY title;", "query_toks": ["SELECT", "title", "FROM", "albums", "ORDER", "BY", "title", ";"], "query_toks_no_value": ["select", "title", "from", "albums", "order", "by", "title"], "question": "List every album ordered by album title in ascending order.", "question_toks": ["List", "every", "album", "ordered", "by", "album", "title", "in", "ascending", "order", "."], "guid": 5716}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the details of all the distinct customers who have orders with status \"On Road\".", "sql": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"", "example": {"db_id": "tracking_orders", "query": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"", "query_toks": ["SELECT", "DISTINCT", "T1.customer_details", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "On", "Road", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_details", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"], "question": "Find the details of all the distinct customers who have orders with status \"On Road\".", "question_toks": ["Find", "the", "details", "of", "all", "the", "distinct", "customers", "who", "have", "orders", "with", "status", "``", "On", "Road", "''", "."], "guid": 5717}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | Show the premise type and address type code for all customer addresses.", "sql": "SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT T2.premises_type ,  T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id  =  T2.premise_id", "query_toks": ["SELECT", "T2.premises_type", ",", "T1.address_type_code", "FROM", "customer_addresses", "AS", "T1", "JOIN", "premises", "AS", "T2", "ON", "T1.premise_id", "=", "T2.premise_id"], "query_toks_no_value": ["select", "t2", ".", "premises_type", ",", "t1", ".", "address_type_code", "from", "customer_addresses", "as", "t1", "join", "premises", "as", "t2", "on", "t1", ".", "premise_id", "=", "t2", ".", "premise_id"], "question": "Show the premise type and address type code for all customer addresses.", "question_toks": ["Show", "the", "premise", "type", "and", "address", "type", "code", "for", "all", "customer", "addresses", "."], "guid": 5718}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What is the unit of measurement of product named \"cumin\"?", "sql": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"", "query_toks": ["SELECT", "t2.unit_of_measure", "FROM", "products", "AS", "t1", "JOIN", "ref_product_categories", "AS", "t2", "ON", "t1.product_category_code", "=", "t2.product_category_code", "WHERE", "t1.product_name", "=", "``", "cumin", "''"], "query_toks_no_value": ["select", "t2", ".", "unit_of_measure", "from", "products", "as", "t1", "join", "ref_product_categories", "as", "t2", "on", "t1", ".", "product_category_code", "=", "t2", ".", "product_category_code", "where", "t1", ".", "product_name", "=", "value"], "question": "What is the unit of measurement of product named \"cumin\"?", "question_toks": ["What", "is", "the", "unit", "of", "measurement", "of", "product", "named", "``", "cumin", "''", "?"], "guid": 5719}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Which district has the least area?", "sql": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1", "example": {"db_id": "store_product", "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1", "query_toks": ["SELECT", "district_name", "FROM", "district", "ORDER", "BY", "city_area", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "district_name", "from", "district", "order", "by", "city_area", "asc", "limit", "value"], "question": "Which district has the least area?", "question_toks": ["Which", "district", "has", "the", "least", "area", "?"], "guid": 5720}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which movies have 'Deleted Scenes' as a substring in the special feature?", "sql": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'", "example": {"db_id": "sakila_1", "query": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'", "query_toks": ["SELECT", "title", "FROM", "film", "WHERE", "special_features", "LIKE", "'", "%", "Deleted", "Scenes", "%", "'"], "query_toks_no_value": ["select", "title", "from", "film", "where", "special_features", "like", "value"], "question": "Which movies have 'Deleted Scenes' as a substring in the special feature?", "question_toks": ["Which", "movies", "have", "'Deleted", "Scenes", "'", "as", "a", "substring", "in", "the", "special", "feature", "?"], "guid": 5721}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What is the average, minimum, maximum, and total transaction amount?", "sql": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions", "example": {"db_id": "customers_and_invoices", "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions", "query_toks": ["SELECT", "avg", "(", "transaction_amount", ")", ",", "min", "(", "transaction_amount", ")", ",", "max", "(", "transaction_amount", ")", ",", "sum", "(", "transaction_amount", ")", "FROM", "Financial_transactions"], "query_toks_no_value": ["select", "avg", "(", "transaction_amount", ")", ",", "min", "(", "transaction_amount", ")", ",", "max", "(", "transaction_amount", ")", ",", "sum", "(", "transaction_amount", ")", "from", "financial_transactions"], "question": "What is the average, minimum, maximum, and total transaction amount?", "question_toks": ["What", "is", "the", "average", ",", "minimum", ",", "maximum", ",", "and", "total", "transaction", "amount", "?"], "guid": 5722}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the entry name of the catalog with the highest price (in USD).", "sql": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1", "query_toks": ["SELECT", "catalog_entry_name", "FROM", "catalog_contents", "ORDER", "BY", "price_in_dollars", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "catalog_entry_name", "from", "catalog_contents", "order", "by", "price_in_dollars", "desc", "limit", "value"], "question": "Find the entry name of the catalog with the highest price (in USD).", "question_toks": ["Find", "the", "entry", "name", "of", "the", "catalog", "with", "the", "highest", "price", "(", "in", "USD", ")", "."], "guid": 5723}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many customers does Steve Johnson support?", "sql": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";", "example": {"db_id": "store_1", "query": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employees", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T2.support_rep_id", "=", "T1.id", "WHERE", "T1.first_name", "=", "``", "Steve", "''", "AND", "T1.last_name", "=", "``", "Johnson", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employees", "as", "t1", "join", "customers", "as", "t2", "on", "t2", ".", "support_rep_id", "=", "t1", ".", "id", "where", "t1", ".", "first_name", "=", "value", "and", "t1", ".", "last_name", "=", "value"], "question": "How many customers does Steve Johnson support?", "question_toks": ["How", "many", "customers", "does", "Steve", "Johnson", "support", "?"], "guid": 5724}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Sort all the distinct products in alphabetical order.", "sql": "SELECT DISTINCT product_name FROM products ORDER BY product_name", "example": {"db_id": "tracking_orders", "query": "SELECT DISTINCT product_name FROM products ORDER BY product_name", "query_toks": ["SELECT", "DISTINCT", "product_name", "FROM", "products", "ORDER", "BY", "product_name"], "query_toks_no_value": ["select", "distinct", "product_name", "from", "products", "order", "by", "product_name"], "question": "Sort all the distinct products in alphabetical order.", "question_toks": ["Sort", "all", "the", "distinct", "products", "in", "alphabetical", "order", "."], "guid": 5725}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the id and details of the investor that has the largest number of transactions.", "sql": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "tracking_share_transactions", "query": "SELECT T2.investor_id ,  T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id  =  T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.investor_id", ",", "T1.Investor_details", "FROM", "INVESTORS", "AS", "T1", "JOIN", "TRANSACTIONS", "AS", "T2", "ON", "T1.investor_id", "=", "T2.investor_id", "GROUP", "BY", "T2.investor_id", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "investor_id", ",", "t1", ".", "investor_details", "from", "investors", "as", "t1", "join", "transactions", "as", "t2", "on", "t1", ".", "investor_id", "=", "t2", ".", "investor_id", "group", "by", "t2", ".", "investor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the id and details of the investor that has the largest number of transactions.", "question_toks": ["Show", "the", "id", "and", "details", "of", "the", "investor", "that", "has", "the", "largest", "number", "of", "transactions", "."], "guid": 5726}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the distinct unit prices for tracks.", "sql": "SELECT distinct(UnitPrice) FROM TRACK", "example": {"db_id": "chinook_1", "query": "SELECT distinct(UnitPrice) FROM TRACK", "query_toks": ["SELECT", "distinct", "(", "UnitPrice", ")", "FROM", "TRACK"], "query_toks_no_value": ["select", "distinct", "(", "unitprice", ")", "from", "track"], "question": "Find the distinct unit prices for tracks.", "question_toks": ["Find", "the", "distinct", "unit", "prices", "for", "tracks", "."], "guid": 5727}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the transaction type code that occurs the most frequently.", "sql": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "tracking_share_transactions", "query": "SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "transaction_type_code", "FROM", "TRANSACTIONS", "GROUP", "BY", "transaction_type_code", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "transaction_type_code", "from", "transactions", "group", "by", "transaction_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the transaction type code that occurs the most frequently.", "question_toks": ["Show", "the", "transaction", "type", "code", "that", "occurs", "the", "most", "frequently", "."], "guid": 5728}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | What are the distinct address type codes for all customer addresses?", "sql": "SELECT DISTINCT address_type_code FROM customer_addresses", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT DISTINCT address_type_code FROM customer_addresses", "query_toks": ["SELECT", "DISTINCT", "address_type_code", "FROM", "customer_addresses"], "query_toks_no_value": ["select", "distinct", "address_type_code", "from", "customer_addresses"], "question": "What are the distinct address type codes for all customer addresses?", "question_toks": ["What", "are", "the", "distinct", "address", "type", "codes", "for", "all", "customer", "addresses", "?"], "guid": 5729}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List all payment methods and number of payments using each payment methods.", "sql": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;", "example": {"db_id": "driving_school", "query": "SELECT payment_method_code ,  count(*) FROM Customer_Payments GROUP BY payment_method_code;", "query_toks": ["SELECT", "payment_method_code", ",", "count", "(", "*", ")", "FROM", "Customer_Payments", "GROUP", "BY", "payment_method_code", ";"], "query_toks_no_value": ["select", "payment_method_code", ",", "count", "(", "*", ")", "from", "customer_payments", "group", "by", "payment_method_code"], "question": "List all payment methods and number of payments using each payment methods.", "question_toks": ["List", "all", "payment", "methods", "and", "number", "of", "payments", "using", "each", "payment", "methods", "."], "guid": 5730}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show the card type codes and the number of transactions.", "sql": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code", "example": {"db_id": "customers_card_transactions", "query": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code", "query_toks": ["SELECT", "T2.card_type_code", ",", "count", "(", "*", ")", "FROM", "Financial_transactions", "AS", "T1", "JOIN", "Customers_cards", "AS", "T2", "ON", "T1.card_id", "=", "T2.card_id", "GROUP", "BY", "T2.card_type_code"], "query_toks_no_value": ["select", "t2", ".", "card_type_code", ",", "count", "(", "*", ")", "from", "financial_transactions", "as", "t1", "join", "customers_cards", "as", "t2", "on", "t1", ".", "card_id", "=", "t2", ".", "card_id", "group", "by", "t2", ".", "card_type_code"], "question": "Show the card type codes and the number of transactions.", "question_toks": ["Show", "the", "card", "type", "codes", "and", "the", "number", "of", "transactions", "."], "guid": 5731}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How much is the track Fast As a Shark?", "sql": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";", "example": {"db_id": "store_1", "query": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\";", "query_toks": ["SELECT", "unit_price", "FROM", "tracks", "WHERE", "name", "=", "``", "Fast", "As", "a", "Shark", "''", ";"], "query_toks_no_value": ["select", "unit_price", "from", "tracks", "where", "name", "=", "value"], "question": "How much is the track Fast As a Shark?", "question_toks": ["How", "much", "is", "the", "track", "Fast", "As", "a", "Shark", "?"], "guid": 5732}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | How many products have the characteristic named \"hot\"?", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t3.characteristic_name", "=", "``", "hot", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t3", ".", "characteristic_name", "=", "value"], "question": "How many products have the characteristic named \"hot\"?", "question_toks": ["How", "many", "products", "have", "the", "characteristic", "named", "``", "hot", "''", "?"], "guid": 5733}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the opening years in which at least two shops opened?", "sql": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2", "example": {"db_id": "shop_membership", "query": "SELECT open_year FROM branch GROUP BY open_year HAVING count(*)  >=  2", "query_toks": ["SELECT", "open_year", "FROM", "branch", "GROUP", "BY", "open_year", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "open_year", "from", "branch", "group", "by", "open_year", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the opening years in which at least two shops opened?", "question_toks": ["What", "are", "the", "opening", "years", "in", "which", "at", "least", "two", "shops", "opened", "?"], "guid": 5734}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | When are the birthdays of customer who are classified as 'Good Customer' status?", "sql": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'", "example": {"db_id": "driving_school", "query": "SELECT date_of_birth FROM Customers WHERE customer_status_code  =  'Good Customer'", "query_toks": ["SELECT", "date_of_birth", "FROM", "Customers", "WHERE", "customer_status_code", "=", "'Good", "Customer", "'"], "query_toks_no_value": ["select", "date_of_birth", "from", "customers", "where", "customer_status_code", "=", "value"], "question": "When are the birthdays of customer who are classified as 'Good Customer' status?", "question_toks": ["When", "are", "the", "birthdays", "of", "customer", "who", "are", "classified", "as", "'Good", "Customer", "'", "status", "?"], "guid": 5735}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the names of customers who never placed an order.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "EXCEPT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "except", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id"], "question": "Find the names of customers who never placed an order.", "question_toks": ["Find", "the", "names", "of", "customers", "who", "never", "placed", "an", "order", "."], "guid": 5736}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | List the first name and last name of all customers.", "sql": "SELECT first_name ,  last_name FROM Customers;", "example": {"db_id": "driving_school", "query": "SELECT first_name ,  last_name FROM Customers;", "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "Customers", ";"], "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "customers"], "question": "List the first name and last name of all customers.", "question_toks": ["List", "the", "first", "name", "and", "last", "name", "of", "all", "customers", "."], "guid": 5737}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | How many different card types are there?", "sql": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards", "query_toks": ["SELECT", "count", "(", "DISTINCT", "card_type_code", ")", "FROM", "Customers_Cards"], "query_toks_no_value": ["select", "count", "(", "distinct", "card_type_code", ")", "from", "customers_cards"], "question": "How many different card types are there?", "question_toks": ["How", "many", "different", "card", "types", "are", "there", "?"], "guid": 5738}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the ids of all the order items whose product id is 11.", "sql": "SELECT order_item_id FROM order_items WHERE product_id = 11", "example": {"db_id": "tracking_orders", "query": "SELECT order_item_id FROM order_items WHERE product_id = 11", "query_toks": ["SELECT", "order_item_id", "FROM", "order_items", "WHERE", "product_id", "=", "11"], "query_toks_no_value": ["select", "order_item_id", "from", "order_items", "where", "product_id", "=", "value"], "question": "Find the ids of all the order items whose product id is 11.", "question_toks": ["Find", "the", "ids", "of", "all", "the", "order", "items", "whose", "product", "id", "is", "11", "."], "guid": 5739}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What is the name and open year for the branch with most number of memberships registered in 2016?", "sql": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "shop_membership", "query": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.name", ",", "T2.open_year", "FROM", "membership_register_branch", "AS", "T1", "JOIN", "branch", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T1.register_year", "=", "2016", "GROUP", "BY", "T2.branch_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "open_year", "from", "membership_register_branch", "as", "t1", "join", "branch", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t1", ".", "register_year", "=", "value", "group", "by", "t2", ".", "branch_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name and open year for the branch with most number of memberships registered in 2016?", "question_toks": ["What", "is", "the", "name", "and", "open", "year", "for", "the", "branch", "with", "most", "number", "of", "memberships", "registered", "in", "2016", "?"], "guid": 5740}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What are the weights of entrepreneurs in descending order of money requested?", "sql": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC", "example": {"db_id": "entrepreneur", "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC", "query_toks": ["SELECT", "T2.Weight", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Money_Requested", "DESC"], "query_toks_no_value": ["select", "t2", ".", "weight", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "money_requested", "desc"], "question": "What are the weights of entrepreneurs in descending order of money requested?", "question_toks": ["What", "are", "the", "weights", "of", "entrepreneurs", "in", "descending", "order", "of", "money", "requested", "?"], "guid": 5741}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?", "sql": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "example": {"db_id": "store_1", "query": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10;", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "SUM", "(", "T2.total", ")", "FROM", "customers", "AS", "T1", "JOIN", "invoices", "AS", "T2", "ON", "T2.customer_id", "=", "T1.id", "GROUP", "BY", "T1.id", "ORDER", "BY", "SUM", "(", "T2.total", ")", "DESC", "LIMIT", "10", ";"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "sum", "(", "t2", ".", "total", ")", "from", "customers", "as", "t1", "join", "invoices", "as", "t2", "on", "t2", ".", "customer_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "order", "by", "sum", "(", "t2", ".", "total", ")", "desc", "limit", "value"], "question": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?", "question_toks": ["What", "are", "the", "top", "10", "customers", "'", "first", "and", "last", "names", "with", "the", "highest", "gross", "sales", ",", "and", "also", "what", "are", "the", "sales", "?"], "guid": 5742}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Find the email and phone number of the customers who have never filed a complaint before.", "sql": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)", "example": {"db_id": "customer_complaints", "query": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)", "query_toks": ["SELECT", "email_address", ",", "phone_number", "FROM", "customers", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "complaints", ")"], "query_toks_no_value": ["select", "email_address", ",", "phone_number", "from", "customers", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "complaints", ")"], "question": "Find the email and phone number of the customers who have never filed a complaint before.", "question_toks": ["Find", "the", "email", "and", "phone", "number", "of", "the", "customers", "who", "have", "never", "filed", "a", "complaint", "before", "."], "guid": 5743}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | List the names of all music genres.", "sql": "SELECT Name FROM GENRE", "example": {"db_id": "chinook_1", "query": "SELECT Name FROM GENRE", "query_toks": ["SELECT", "Name", "FROM", "GENRE"], "query_toks_no_value": ["select", "name", "from", "genre"], "question": "List the names of all music genres.", "question_toks": ["List", "the", "names", "of", "all", "music", "genres", "."], "guid": 5744}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the maximum and minimum millisecond lengths of pop tracks.", "sql": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"", "example": {"db_id": "chinook_1", "query": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"", "query_toks": ["SELECT", "max", "(", "Milliseconds", ")", ",", "min", "(", "Milliseconds", ")", "FROM", "GENRE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.GenreId", "=", "T2.GenreId", "WHERE", "T1.Name", "=", "``", "Pop", "''"], "query_toks_no_value": ["select", "max", "(", "milliseconds", ")", ",", "min", "(", "milliseconds", ")", "from", "genre", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "genreid", "=", "t2", ".", "genreid", "where", "t1", ".", "name", "=", "value"], "question": "Find the maximum and minimum millisecond lengths of pop tracks.", "question_toks": ["Find", "the", "maximum", "and", "minimum", "millisecond", "lengths", "of", "pop", "tracks", "."], "guid": 5745}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What are the names of the districts that have both mall and village store style shops?", "sql": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"", "example": {"db_id": "store_product", "query": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"", "query_toks": ["SELECT", "t3.District_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.Type", "=", "``", "City", "Mall", "''", "INTERSECT", "SELECT", "t3.District_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.Type", "=", "``", "Village", "Store", "''"], "query_toks_no_value": ["select", "t3", ".", "district_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "type", "=", "value", "intersect", "select", "t3", ".", "district_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "type", "=", "value"], "question": "What are the names of the districts that have both mall and village store style shops?", "question_toks": ["What", "are", "the", "names", "of", "the", "districts", "that", "have", "both", "mall", "and", "village", "store", "style", "shops", "?"], "guid": 5746}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the description of transaction type with code \"PUR\".", "sql": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"", "example": {"db_id": "tracking_share_transactions", "query": "SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code\t  =  \"PUR\"", "query_toks": ["SELECT", "transaction_type_description", "FROM", "Ref_Transaction_Types", "WHERE", "transaction_type_code", "=", "``", "PUR", "''"], "query_toks_no_value": ["select", "transaction_type_description", "from", "ref_transaction_types", "where", "transaction_type_code", "=", "value"], "question": "Show the description of transaction type with code \"PUR\".", "question_toks": ["Show", "the", "description", "of", "transaction", "type", "with", "code", "``", "PUR", "''", "."], "guid": 5747}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are names of customers who never ordered product Latte.", "sql": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", "example": {"db_id": "customers_and_addresses", "query": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'", "query_toks": ["SELECT", "customer_name", "FROM", "customers", "EXCEPT", "SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "JOIN", "products", "AS", "t4", "ON", "t3.product_id", "=", "t4.product_id", "WHERE", "t4.product_details", "=", "'Latte", "'"], "query_toks_no_value": ["select", "customer_name", "from", "customers", "except", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "join", "products", "as", "t4", "on", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t4", ".", "product_details", "=", "value"], "question": "What are names of customers who never ordered product Latte.", "question_toks": ["What", "are", "names", "of", "customers", "who", "never", "ordered", "product", "Latte", "."], "guid": 5748}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many customers are there?", "sql": "SELECT count(*) FROM Customers;", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Customers;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "How many customers are there?", "question_toks": ["How", "many", "customers", "are", "there", "?"], "guid": 5749}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the name and ID of the product bought the most.", "sql": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT t2.product_details ,  t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY sum(t1.order_quantity) LIMIT 1", "query_toks": ["SELECT", "t2.product_details", ",", "t2.product_id", "FROM", "order_items", "AS", "t1", "JOIN", "products", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "GROUP", "BY", "t1.product_id", "ORDER", "BY", "sum", "(", "t1.order_quantity", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "product_details", ",", "t2", ".", "product_id", "from", "order_items", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_id", "order", "by", "sum", "(", "t1", ".", "order_quantity", ")", "limit", "value"], "question": "What are the name and ID of the product bought the most.", "question_toks": ["What", "are", "the", "name", "and", "ID", "of", "the", "product", "bought", "the", "most", "."], "guid": 5750}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the id of the store with the most customers.", "sql": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "store_id", "FROM", "customer", "GROUP", "BY", "store_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "store_id", "from", "customer", "group", "by", "store_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the id of the store with the most customers.", "question_toks": ["Return", "the", "id", "of", "the", "store", "with", "the", "most", "customers", "."], "guid": 5751}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the id of the order made most recently.", "sql": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1", "example": {"db_id": "tracking_orders", "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1", "query_toks": ["SELECT", "order_id", "FROM", "orders", "ORDER", "BY", "date_order_placed", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "order_id", "from", "orders", "order", "by", "date_order_placed", "desc", "limit", "value"], "question": "Find the id of the order made most recently.", "question_toks": ["Find", "the", "id", "of", "the", "order", "made", "most", "recently", "."], "guid": 5752}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | How many orders does Luca Mancini have in his invoices?", "sql": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";", "example": {"db_id": "store_1", "query": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "AS", "T1", "JOIN", "invoices", "AS", "T2", "ON", "T1.id", "=", "T2.customer_id", "WHERE", "T1.first_name", "=", "``", "Lucas", "''", "AND", "T1.last_name", "=", "``", "Mancini", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "as", "t1", "join", "invoices", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "customer_id", "where", "t1", ".", "first_name", "=", "value", "and", "t1", ".", "last_name", "=", "value"], "question": "How many orders does Luca Mancini have in his invoices?", "question_toks": ["How", "many", "orders", "does", "Luca", "Mancini", "have", "in", "his", "invoices", "?"], "guid": 5753}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Products: product_id, product_type_code, product_name, product_price; Customers: customer_id, payment_method_code, customer_number, customer_name, customer_address, customer_phone, customer_email; Contacts: contact_id, customer_id, gender, first_name, last_name, contact_phone; Customer_Address_History: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_date, order_status_code; Order_Items: order_item_id, order_id, product_id, order_quantity | How many products have a price higher than the average?", "sql": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)", "example": {"db_id": "customers_and_products_contacts", "query": "SELECT count(*) FROM products WHERE product_price  >  (SELECT avg(product_price) FROM products)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "WHERE", "product_price", ">", "(", "SELECT", "avg", "(", "product_price", ")", "FROM", "products", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "where", "product_price", ">", "(", "select", "avg", "(", "product_price", ")", "from", "products", ")"], "question": "How many products have a price higher than the average?", "question_toks": ["How", "many", "products", "have", "a", "price", "higher", "than", "the", "average", "?"], "guid": 5754}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | What are the different product names, and what is the sum of quantity ordered for each product?", "sql": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.product_name ,  sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id  =  T2.product_id GROUP BY T2.product_name", "query_toks": ["SELECT", "T2.product_name", ",", "sum", "(", "T1.product_quantity", ")", "FROM", "Order_items", "AS", "T1", "JOIN", "Products", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "GROUP", "BY", "T2.product_name"], "query_toks_no_value": ["select", "t2", ".", "product_name", ",", "sum", "(", "t1", ".", "product_quantity", ")", "from", "order_items", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t2", ".", "product_name"], "question": "What are the different product names, and what is the sum of quantity ordered for each product?", "question_toks": ["What", "are", "the", "different", "product", "names", ",", "and", "what", "is", "the", "sum", "of", "quantity", "ordered", "for", "each", "product", "?"], "guid": 5755}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | List the branch name and city without any registered members.", "sql": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)", "example": {"db_id": "shop_membership", "query": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)", "query_toks": ["SELECT", "name", ",", "city", "FROM", "branch", "WHERE", "branch_id", "NOT", "IN", "(", "SELECT", "branch_id", "FROM", "membership_register_branch", ")"], "query_toks_no_value": ["select", "name", ",", "city", "from", "branch", "where", "branch_id", "not", "in", "(", "select", "branch_id", "from", "membership_register_branch", ")"], "question": "List the branch name and city without any registered members.", "question_toks": ["List", "the", "branch", "name", "and", "city", "without", "any", "registered", "members", "."], "guid": 5756}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the names and ids of customers who have TN in their address.", "sql": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"", "example": {"db_id": "department_store", "query": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"", "query_toks": ["SELECT", "customer_name", ",", "customer_id", "FROM", "customers", "WHERE", "customer_address", "LIKE", "``", "%", "TN", "%", "''"], "query_toks_no_value": ["select", "customer_name", ",", "customer_id", "from", "customers", "where", "customer_address", "like", "value"], "question": "Return the names and ids of customers who have TN in their address.", "question_toks": ["Return", "the", "names", "and", "ids", "of", "customers", "who", "have", "TN", "in", "their", "address", "."], "guid": 5757}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?", "sql": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100", "example": {"db_id": "shop_membership", "query": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100", "query_toks": ["SELECT", "city", "FROM", "branch", "WHERE", "open_year", "=", "2001", "AND", "membership_amount", ">", "100"], "query_toks_no_value": ["select", "city", "from", "branch", "where", "open_year", "=", "value", "and", "membership_amount", ">", "value"], "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?", "question_toks": ["What", "are", "the", "cities", "that", "have", "a", "branch", "that", "opened", "in", "2001", "and", "a", "branch", "with", "more", "than", "100", "members", "?"], "guid": 5758}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What country does Roberto Almeida live?", "sql": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";", "example": {"db_id": "store_1", "query": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\";", "query_toks": ["SELECT", "country", "FROM", "customers", "WHERE", "first_name", "=", "``", "Roberto", "''", "AND", "last_name", "=", "``", "Almeida", "''", ";"], "query_toks_no_value": ["select", "country", "from", "customers", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What country does Roberto Almeida live?", "question_toks": ["What", "country", "does", "Roberto", "Almeida", "live", "?"], "guid": 5759}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | What are the catalog entry names of the products with next entry ID above 8?", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8", "query_toks": ["SELECT", "catalog_entry_name", "FROM", "catalog_contents", "WHERE", "next_entry_id", ">", "8"], "query_toks_no_value": ["select", "catalog_entry_name", "from", "catalog_contents", "where", "next_entry_id", ">", "value"], "question": "What are the catalog entry names of the products with next entry ID above 8?", "question_toks": ["What", "are", "the", "catalog", "entry", "names", "of", "the", "products", "with", "next", "entry", "ID", "above", "8", "?"], "guid": 5760}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | Which last names are both used by customers and by staff?", "sql": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff", "example": {"db_id": "driving_school", "query": "SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff", "query_toks": ["SELECT", "last_name", "FROM", "Customers", "INTERSECT", "SELECT", "last_name", "FROM", "Staff"], "query_toks_no_value": ["select", "last_name", "from", "customers", "intersect", "select", "last_name", "from", "staff"], "question": "Which last names are both used by customers and by staff?", "question_toks": ["Which", "last", "names", "are", "both", "used", "by", "customers", "and", "by", "staff", "?"], "guid": 5761}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | How many lessons were in cancelled state?", "sql": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";", "example": {"db_id": "driving_school", "query": "SELECT count(*) FROM Lessons WHERE lesson_status_code = \"Cancelled\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Lessons", "WHERE", "lesson_status_code", "=", "``", "Cancelled", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "lessons", "where", "lesson_status_code", "=", "value"], "question": "How many lessons were in cancelled state?", "question_toks": ["How", "many", "lessons", "were", "in", "cancelled", "state", "?"], "guid": 5762}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | How many accounts are there?", "sql": "SELECT count(*) FROM Accounts", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(*) FROM Accounts", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Accounts"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "accounts"], "question": "How many accounts are there?", "question_toks": ["How", "many", "accounts", "are", "there", "?"], "guid": 5763}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Count the number of stores the chain South has.", "sql": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"", "example": {"db_id": "department_store", "query": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "department_stores", "AS", "T1", "JOIN", "department_store_chain", "AS", "T2", "ON", "T1.dept_store_chain_id", "=", "T2.dept_store_chain_id", "WHERE", "T2.dept_store_chain_name", "=", "``", "South", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department_stores", "as", "t1", "join", "department_store_chain", "as", "t2", "on", "t1", ".", "dept_store_chain_id", "=", "t2", ".", "dept_store_chain_id", "where", "t2", ".", "dept_store_chain_name", "=", "value"], "question": "Count the number of stores the chain South has.", "question_toks": ["Count", "the", "number", "of", "stores", "the", "chain", "South", "has", "."], "guid": 5764}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show invoice dates and order id and details for all invoices.", "sql": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT T1.invoice_date ,  T1.order_id ,  T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id  =  T2.order_id", "query_toks": ["SELECT", "T1.invoice_date", ",", "T1.order_id", ",", "T2.order_details", "FROM", "Invoices", "AS", "T1", "JOIN", "Orders", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id"], "query_toks_no_value": ["select", "t1", ".", "invoice_date", ",", "t1", ".", "order_id", ",", "t2", ".", "order_details", "from", "invoices", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id"], "question": "Show invoice dates and order id and details for all invoices.", "question_toks": ["Show", "invoice", "dates", "and", "order", "id", "and", "details", "for", "all", "invoices", "."], "guid": 5765}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Count the number of customers who have an account.", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts", "example": {"db_id": "customers_and_invoices", "query": "SELECT count(DISTINCT customer_id) FROM Accounts", "query_toks": ["SELECT", "count", "(", "DISTINCT", "customer_id", ")", "FROM", "Accounts"], "query_toks_no_value": ["select", "count", "(", "distinct", "customer_id", ")", "from", "accounts"], "question": "Count the number of customers who have an account.", "question_toks": ["Count", "the", "number", "of", "customers", "who", "have", "an", "account", "."], "guid": 5766}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the state and country of all cities with post code starting with 4.", "sql": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"", "query_toks": ["SELECT", "state_province_county", ",", "country", "FROM", "addresses", "WHERE", "zip_postcode", "LIKE", "``", "4", "%", "''"], "query_toks_no_value": ["select", "state_province_county", ",", "country", "from", "addresses", "where", "zip_postcode", "like", "value"], "question": "Find the state and country of all cities with post code starting with 4.", "question_toks": ["Find", "the", "state", "and", "country", "of", "all", "cities", "with", "post", "code", "starting", "with", "4", "."], "guid": 5767}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Give the ids of the three products purchased in the largest amounts.", "sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3", "example": {"db_id": "department_store", "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3", "query_toks": ["SELECT", "product_id", "FROM", "product_suppliers", "ORDER", "BY", "total_amount_purchased", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "product_id", "from", "product_suppliers", "order", "by", "total_amount_purchased", "desc", "limit", "value"], "question": "Give the ids of the three products purchased in the largest amounts.", "question_toks": ["Give", "the", "ids", "of", "the", "three", "products", "purchased", "in", "the", "largest", "amounts", "."], "guid": 5768}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??", "sql": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"", "example": {"db_id": "tracking_orders", "query": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"", "query_toks": ["SELECT", "DISTINCT", "T2.product_id", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "WHERE", "T1.date_order_placed", ">", "=", "``", "1975-01-01", "''", "AND", "T1.date_order_placed", "<", "=", "``", "1976-01-01", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "product_id", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t1", ".", "date_order_placed", ">", "=", "value", "and", "t1", ".", "date_order_placed", "<", "=", "value"], "question": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??", "question_toks": ["What", "are", "the", "distinct", "ids", "of", "products", "ordered", "between", "1975-01-01", "and", "1976-01-01", "?", "?"], "guid": 5769}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | How many different levels do members have?", "sql": "SELECT count(DISTINCT LEVEL) FROM member", "example": {"db_id": "shop_membership", "query": "SELECT count(DISTINCT LEVEL) FROM member", "query_toks": ["SELECT", "count", "(", "DISTINCT", "LEVEL", ")", "FROM", "member"], "query_toks_no_value": ["select", "count", "(", "distinct", "level", ")", "from", "member"], "question": "How many different levels do members have?", "question_toks": ["How", "many", "different", "levels", "do", "members", "have", "?"], "guid": 5770}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | On what day was the order with invoice number 10 placed?", "sql": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10", "example": {"db_id": "tracking_orders", "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10", "query_toks": ["SELECT", "T1.date_order_placed", "FROM", "orders", "AS", "T1", "JOIN", "shipments", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "WHERE", "T2.invoice_number", "=", "10"], "query_toks_no_value": ["select", "t1", ".", "date_order_placed", "from", "orders", "as", "t1", "join", "shipments", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t2", ".", "invoice_number", "=", "value"], "question": "On what day was the order with invoice number 10 placed?", "question_toks": ["On", "what", "day", "was", "the", "order", "with", "invoice", "number", "10", "placed", "?"], "guid": 5771}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | Find the ids of orders whose status is 'Success'.", "sql": "SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success'", "example": {"db_id": "customer_deliveries", "query": "SELECT actual_order_id FROM actual_orders WHERE order_status_code  =  'Success'", "query_toks": ["SELECT", "actual_order_id", "FROM", "actual_orders", "WHERE", "order_status_code", "=", "'Success", "'"], "query_toks_no_value": ["select", "actual_order_id", "from", "actual_orders", "where", "order_status_code", "=", "value"], "question": "Find the ids of orders whose status is 'Success'.", "question_toks": ["Find", "the", "ids", "of", "orders", "whose", "status", "is", "'Success", "'", "."], "guid": 5772}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | For each payment method, return how many customers use it.", "sql": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code", "example": {"db_id": "department_store", "query": "SELECT payment_method_code ,  count(*) FROM customers GROUP BY payment_method_code", "query_toks": ["SELECT", "payment_method_code", ",", "count", "(", "*", ")", "FROM", "customers", "GROUP", "BY", "payment_method_code"], "query_toks_no_value": ["select", "payment_method_code", ",", "count", "(", "*", ")", "from", "customers", "group", "by", "payment_method_code"], "question": "For each payment method, return how many customers use it.", "question_toks": ["For", "each", "payment", "method", ",", "return", "how", "many", "customers", "use", "it", "."], "guid": 5773}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Return the code of the card type that is most common.", "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_card_transactions", "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "card_type_code", "FROM", "Customers_cards", "GROUP", "BY", "card_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "card_type_code", "from", "customers_cards", "group", "by", "card_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the code of the card type that is most common.", "question_toks": ["Return", "the", "code", "of", "the", "card", "type", "that", "is", "most", "common", "."], "guid": 5774}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is employee Nancy Edwards's phone number?", "sql": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "example": {"db_id": "store_1", "query": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\";", "query_toks": ["SELECT", "phone", "FROM", "employees", "WHERE", "first_name", "=", "``", "Nancy", "''", "AND", "last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "phone", "from", "employees", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is employee Nancy Edwards's phone number?", "question_toks": ["What", "is", "employee", "Nancy", "Edwards", "'s", "phone", "number", "?"], "guid": 5775}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What is the last name of the staff who has handled the first ever complaint?", "sql": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1", "query_toks": ["SELECT", "t1.last_name", "FROM", "staff", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.staff_id", "=", "t2.staff_id", "ORDER", "BY", "t2.date_complaint_raised", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "last_name", "from", "staff", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "order", "by", "t2", ".", "date_complaint_raised", "limit", "value"], "question": "What is the last name of the staff who has handled the first ever complaint?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "staff", "who", "has", "handled", "the", "first", "ever", "complaint", "?"], "guid": 5776}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What is the name of the artist with the greatest number of albums?", "sql": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "chinook_1", "query": "SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Name", "FROM", "ALBUM", "AS", "T1", "JOIN", "ARTIST", "AS", "T2", "ON", "T1.ArtistId", "=", "T2.ArtistId", "GROUP", "BY", "T2.Name", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "album", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artistid", "=", "t2", ".", "artistid", "group", "by", "t2", ".", "name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the artist with the greatest number of albums?", "question_toks": ["What", "is", "the", "name", "of", "the", "artist", "with", "the", "greatest", "number", "of", "albums", "?"], "guid": 5777}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Count the number of customers who are active.", "sql": "SELECT count(*) FROM customer WHERE active = '1'", "example": {"db_id": "sakila_1", "query": "SELECT count(*) FROM customer WHERE active = '1'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customer", "WHERE", "active", "=", "'1", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customer", "where", "active", "=", "value"], "question": "Count the number of customers who are active.", "question_toks": ["Count", "the", "number", "of", "customers", "who", "are", "active", "."], "guid": 5778}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the maximum, minimum, and average amount of money outsanding for all customers?", "sql": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;", "example": {"db_id": "driving_school", "query": "SELECT max(amount_outstanding) ,  min(amount_outstanding) ,  avg(amount_outstanding) FROM Customers;", "query_toks": ["SELECT", "max", "(", "amount_outstanding", ")", ",", "min", "(", "amount_outstanding", ")", ",", "avg", "(", "amount_outstanding", ")", "FROM", "Customers", ";"], "query_toks_no_value": ["select", "max", "(", "amount_outstanding", ")", ",", "min", "(", "amount_outstanding", ")", ",", "avg", "(", "amount_outstanding", ")", "from", "customers"], "question": "What is the maximum, minimum, and average amount of money outsanding for all customers?", "question_toks": ["What", "is", "the", "maximum", ",", "minimum", ",", "and", "average", "amount", "of", "money", "outsanding", "for", "all", "customers", "?"], "guid": 5779}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the name of tracks whose genre is Rock?", "sql": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";", "example": {"db_id": "store_1", "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = \"Rock\";", "query_toks": ["SELECT", "T2.name", "FROM", "genres", "AS", "T1", "JOIN", "tracks", "AS", "T2", "ON", "T1.id", "=", "T2.genre_id", "WHERE", "T1.name", "=", "``", "Rock", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "genres", "as", "t1", "join", "tracks", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "genre_id", "where", "t1", ".", "name", "=", "value"], "question": "What is the name of tracks whose genre is Rock?", "question_toks": ["What", "is", "the", "name", "of", "tracks", "whose", "genre", "is", "Rock", "?"], "guid": 5780}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the total number of products that are in orders with status \"Cancelled\"?", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"", "query_toks": ["SELECT", "sum", "(", "t2.order_quantity", ")", "FROM", "customer_orders", "AS", "t1", "JOIN", "order_items", "AS", "t2", "ON", "t1.order_id", "=", "t2.order_id", "WHERE", "t1.order_status", "=", "``", "Cancelled", "''"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "order_quantity", ")", "from", "customer_orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t1", ".", "order_status", "=", "value"], "question": "What is the total number of products that are in orders with status \"Cancelled\"?", "question_toks": ["What", "is", "the", "total", "number", "of", "products", "that", "are", "in", "orders", "with", "status", "``", "Cancelled", "''", "?"], "guid": 5781}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show card type codes with at least 5 cards.", "sql": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5", "example": {"db_id": "customers_card_transactions", "query": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5", "query_toks": ["SELECT", "card_type_code", "FROM", "Customers_cards", "GROUP", "BY", "card_type_code", "HAVING", "count", "(", "*", ")", ">", "=", "5"], "query_toks_no_value": ["select", "card_type_code", "from", "customers_cards", "group", "by", "card_type_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show card type codes with at least 5 cards.", "question_toks": ["Show", "card", "type", "codes", "with", "at", "least", "5", "cards", "."], "guid": 5782}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the states with the most invoices?", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;", "example": {"db_id": "store_1", "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;", "query_toks": ["SELECT", "billing_state", ",", "COUNT", "(", "*", ")", "FROM", "invoices", "WHERE", "billing_country", "=", "``", "USA", "''", "GROUP", "BY", "billing_state", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "billing_state", ",", "count", "(", "*", ")", "from", "invoices", "where", "billing_country", "=", "value", "group", "by", "billing_state", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the states with the most invoices?", "question_toks": ["What", "are", "the", "states", "with", "the", "most", "invoices", "?"], "guid": 5783}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the zip code of the customer Carole Bernhard?", "sql": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "example": {"db_id": "driving_school", "query": "SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = \"Carole\" AND T1.last_name = \"Bernhard\"", "query_toks": ["SELECT", "T2.zip_postcode", "FROM", "Customers", "AS", "T1", "JOIN", "Addresses", "AS", "T2", "ON", "T1.customer_address_id", "=", "T2.address_id", "WHERE", "T1.first_name", "=", "``", "Carole", "''", "AND", "T1.last_name", "=", "``", "Bernhard", "''"], "query_toks_no_value": ["select", "t2", ".", "zip_postcode", "from", "customers", "as", "t1", "join", "addresses", "as", "t2", "on", "t1", ".", "customer_address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "first_name", "=", "value", "and", "t1", ".", "last_name", "=", "value"], "question": "What is the zip code of the customer Carole Bernhard?", "question_toks": ["What", "is", "the", "zip", "code", "of", "the", "customer", "Carole", "Bernhard", "?"], "guid": 5784}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the full name and id of the customer who has the lowest total amount of payment?", "sql": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T1.customer_id", "FROM", "customer", "AS", "T1", "JOIN", "payment", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "sum", "(", "amount", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t1", ".", "customer_id", "from", "customer", "as", "t1", "join", "payment", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "sum", "(", "amount", ")", "asc", "limit", "value"], "question": "What is the full name and id of the customer who has the lowest total amount of payment?", "question_toks": ["What", "is", "the", "full", "name", "and", "id", "of", "the", "customer", "who", "has", "the", "lowest", "total", "amount", "of", "payment", "?"], "guid": 5785}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.", "sql": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30", "example": {"db_id": "sakila_1", "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "film_actor", "AS", "T1", "JOIN", "actor", "AS", "T2", "ON", "T1.actor_id", "=", "T2.actor_id", "GROUP", "BY", "T2.actor_id", "HAVING", "count", "(", "*", ")", ">", "30"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "film_actor", "as", "t1", "join", "actor", "as", "t2", "on", "t1", ".", "actor_id", "=", "t2", ".", "actor_id", "group", "by", "t2", ".", "actor_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.", "question_toks": ["Which", "film", "actors", "(", "actresses", ")", "played", "a", "role", "in", "more", "than", "30", "films", "?", "List", "his", "or", "her", "first", "name", "and", "last", "name", "."], "guid": 5786}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What are the names of products whose availability equals to 1?", "sql": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1", "example": {"db_id": "products_for_hire", "query": "SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.available_yn  =  1", "query_toks": ["SELECT", "T2.product_name", "FROM", "view_product_availability", "AS", "T1", "JOIN", "products_for_hire", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "WHERE", "T1.available_yn", "=", "1"], "query_toks_no_value": ["select", "t2", ".", "product_name", "from", "view_product_availability", "as", "t1", "join", "products_for_hire", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t1", ".", "available_yn", "=", "value"], "question": "What are the names of products whose availability equals to 1?", "question_toks": ["What", "are", "the", "names", "of", "products", "whose", "availability", "equals", "to", "1", "?"], "guid": 5787}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What is the id of the product that was ordered the most often?", "sql": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "product_id", "FROM", "order_items", "GROUP", "BY", "product_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_id", "from", "order_items", "group", "by", "product_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id of the product that was ordered the most often?", "question_toks": ["What", "is", "the", "id", "of", "the", "product", "that", "was", "ordered", "the", "most", "often", "?"], "guid": 5788}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | What products are available at store named \"Miramichi\"?", "sql": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"", "example": {"db_id": "store_product", "query": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"", "query_toks": ["SELECT", "t1.product", "FROM", "product", "AS", "t1", "JOIN", "store_product", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "store", "AS", "t3", "ON", "t2.store_id", "=", "t3.store_id", "WHERE", "t3.store_name", "=", "``", "Miramichi", "''"], "query_toks_no_value": ["select", "t1", ".", "product", "from", "product", "as", "t1", "join", "store_product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "store", "as", "t3", "on", "t2", ".", "store_id", "=", "t3", ".", "store_id", "where", "t3", ".", "store_name", "=", "value"], "question": "What products are available at store named \"Miramichi\"?", "question_toks": ["What", "products", "are", "available", "at", "store", "named", "``", "Miramichi", "''", "?"], "guid": 5789}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What is the description of the product category with the code 'Spices'?", "sql": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT product_category_description FROM ref_product_categories WHERE product_category_code  =  \"Spices\"", "query_toks": ["SELECT", "product_category_description", "FROM", "ref_product_categories", "WHERE", "product_category_code", "=", "``", "Spices", "''"], "query_toks_no_value": ["select", "product_category_description", "from", "ref_product_categories", "where", "product_category_code", "=", "value"], "question": "What is the description of the product category with the code 'Spices'?", "question_toks": ["What", "is", "the", "description", "of", "the", "product", "category", "with", "the", "code", "'Spices", "'", "?"], "guid": 5790}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the state in the US with the most invoices.", "sql": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;", "example": {"db_id": "store_1", "query": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1;", "query_toks": ["SELECT", "billing_state", ",", "COUNT", "(", "*", ")", "FROM", "invoices", "WHERE", "billing_country", "=", "``", "USA", "''", "GROUP", "BY", "billing_state", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "billing_state", ",", "count", "(", "*", ")", "from", "invoices", "where", "billing_country", "=", "value", "group", "by", "billing_state", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the state in the US with the most invoices.", "question_toks": ["List", "the", "state", "in", "the", "US", "with", "the", "most", "invoices", "."], "guid": 5791}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are names for top three branches with most number of membership?", "sql": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3", "example": {"db_id": "shop_membership", "query": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3", "query_toks": ["SELECT", "name", "FROM", "branch", "ORDER", "BY", "membership_amount", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "name", "from", "branch", "order", "by", "membership_amount", "desc", "limit", "value"], "question": "What are names for top three branches with most number of membership?", "question_toks": ["What", "are", "names", "for", "top", "three", "branches", "with", "most", "number", "of", "membership", "?"], "guid": 5792}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the titles of albums that contain tracks of both the Reggae and Rock genres.", "sql": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'", "example": {"db_id": "chinook_1", "query": "SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId  =  T2.AlbumId JOIN Genre AS T3 ON T2.GenreID  =  T3.GenreID WHERE T3.Name  =  'Rock'", "query_toks": ["SELECT", "T1.Title", "FROM", "Album", "AS", "T1", "JOIN", "Track", "AS", "T2", "ON", "T1.AlbumId", "=", "T2.AlbumId", "JOIN", "Genre", "AS", "T3", "ON", "T2.GenreID", "=", "T3.GenreID", "WHERE", "T3.Name", "=", "'Reggae", "'", "INTERSECT", "SELECT", "T1.Title", "FROM", "Album", "AS", "T1", "JOIN", "Track", "AS", "T2", "ON", "T1.AlbumId", "=", "T2.AlbumId", "JOIN", "Genre", "AS", "T3", "ON", "T2.GenreID", "=", "T3.GenreID", "WHERE", "T3.Name", "=", "'Rock", "'"], "query_toks_no_value": ["select", "t1", ".", "title", "from", "album", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "albumid", "=", "t2", ".", "albumid", "join", "genre", "as", "t3", "on", "t2", ".", "genreid", "=", "t3", ".", "genreid", "where", "t3", ".", "name", "=", "value", "intersect", "select", "t1", ".", "title", "from", "album", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "albumid", "=", "t2", ".", "albumid", "join", "genre", "as", "t3", "on", "t2", ".", "genreid", "=", "t3", ".", "genreid", "where", "t3", ".", "name", "=", "value"], "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.", "question_toks": ["Find", "the", "titles", "of", "albums", "that", "contain", "tracks", "of", "both", "the", "Reggae", "and", "Rock", "genres", "."], "guid": 5793}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the average transaction amount for different transaction types.", "sql": "SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code", "example": {"db_id": "tracking_share_transactions", "query": "SELECT transaction_type_code ,  avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code", "query_toks": ["SELECT", "transaction_type_code", ",", "avg", "(", "amount_of_transaction", ")", "FROM", "TRANSACTIONS", "GROUP", "BY", "transaction_type_code"], "query_toks_no_value": ["select", "transaction_type_code", ",", "avg", "(", "amount_of_transaction", ")", "from", "transactions", "group", "by", "transaction_type_code"], "question": "Show the average transaction amount for different transaction types.", "question_toks": ["Show", "the", "average", "transaction", "amount", "for", "different", "transaction", "types", "."], "guid": 5794}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Please show the employee first names and ids of employees who serve at least 10 customers.", "sql": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10", "example": {"db_id": "chinook_1", "query": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10", "query_toks": ["SELECT", "T1.FirstName", ",", "T1.SupportRepId", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "EMPLOYEE", "AS", "T2", "ON", "T1.SupportRepId", "=", "T2.EmployeeId", "GROUP", "BY", "T1.SupportRepId", "HAVING", "COUNT", "(", "*", ")", ">", "=", "10"], "query_toks_no_value": ["select", "t1", ".", "firstname", ",", "t1", ".", "supportrepid", "from", "customer", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "supportrepid", "=", "t2", ".", "employeeid", "group", "by", "t1", ".", "supportrepid", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Please show the employee first names and ids of employees who serve at least 10 customers.", "question_toks": ["Please", "show", "the", "employee", "first", "names", "and", "ids", "of", "employees", "who", "serve", "at", "least", "10", "customers", "."], "guid": 5795}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the genre name of the film HUNGER ROOF?", "sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'", "example": {"db_id": "sakila_1", "query": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'", "query_toks": ["SELECT", "T1.name", "FROM", "category", "AS", "T1", "JOIN", "film_category", "AS", "T2", "ON", "T1.category_id", "=", "T2.category_id", "JOIN", "film", "AS", "T3", "ON", "T2.film_id", "=", "T3.film_id", "WHERE", "T3.title", "=", "'HUNGER", "ROOF", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t1", "join", "film_category", "as", "t2", "on", "t1", ".", "category_id", "=", "t2", ".", "category_id", "join", "film", "as", "t3", "on", "t2", ".", "film_id", "=", "t3", ".", "film_id", "where", "t3", ".", "title", "=", "value"], "question": "What is the genre name of the film HUNGER ROOF?", "question_toks": ["What", "is", "the", "genre", "name", "of", "the", "film", "HUNGER", "ROOF", "?"], "guid": 5796}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | Show the name and phone of the customer without any mailshot.", "sql": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)", "query_toks": ["SELECT", "customer_name", ",", "customer_phone", "FROM", "customers", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "mailshot_customers", ")"], "query_toks_no_value": ["select", "customer_name", ",", "customer_phone", "from", "customers", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "mailshot_customers", ")"], "question": "Show the name and phone of the customer without any mailshot.", "question_toks": ["Show", "the", "name", "and", "phone", "of", "the", "customer", "without", "any", "mailshot", "."], "guid": 5797}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the different names of the genres?", "sql": "SELECT DISTINCT name FROM genres;", "example": {"db_id": "store_1", "query": "SELECT DISTINCT name FROM genres;", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "genres", ";"], "query_toks_no_value": ["select", "distinct", "name", "from", "genres"], "question": "What are the different names of the genres?", "question_toks": ["What", "are", "the", "different", "names", "of", "the", "genres", "?"], "guid": 5798}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | Which city lives most of staffs? List the city name and number of staffs.", "sql": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "driving_school", "query": "SELECT T1.city ,  count(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "T1.city", ",", "count", "(", "*", ")", "FROM", "Addresses", "AS", "T1", "JOIN", "Staff", "AS", "T2", "ON", "T1.address_id", "=", "T2.staff_address_id", "GROUP", "BY", "T1.city", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "t1", ".", "city", ",", "count", "(", "*", ")", "from", "addresses", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "staff_address_id", "group", "by", "t1", ".", "city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which city lives most of staffs? List the city name and number of staffs.", "question_toks": ["Which", "city", "lives", "most", "of", "staffs", "?", "List", "the", "city", "name", "and", "number", "of", "staffs", "."], "guid": 5799}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the first and last name of the employee who reports to Nancy Edwards?", "sql": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";", "example": {"db_id": "store_1", "query": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\";", "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "employees", "AS", "T1", "JOIN", "employees", "AS", "T2", "ON", "T1.id", "=", "T2.reports_to", "WHERE", "T1.first_name", "=", "``", "Nancy", "''", "AND", "T1.last_name", "=", "``", "Edwards", "''", ";"], "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "employees", "as", "t1", "join", "employees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "reports_to", "where", "t1", ".", "first_name", "=", "value", "and", "t1", ".", "last_name", "=", "value"], "question": "What is the first and last name of the employee who reports to Nancy Edwards?", "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "employee", "who", "reports", "to", "Nancy", "Edwards", "?"], "guid": 5800}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are card ids, customer ids, card types, and card numbers for each customer card?", "sql": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards", "example": {"db_id": "customers_card_transactions", "query": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards", "query_toks": ["SELECT", "card_id", ",", "customer_id", ",", "card_type_code", ",", "card_number", "FROM", "Customers_cards"], "query_toks_no_value": ["select", "card_id", ",", "customer_id", ",", "card_type_code", ",", "card_number", "from", "customers_cards"], "question": "What are card ids, customer ids, card types, and card numbers for each customer card?", "question_toks": ["What", "are", "card", "ids", ",", "customer", "ids", ",", "card", "types", ",", "and", "card", "numbers", "for", "each", "customer", "card", "?"], "guid": 5801}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List all different genre types.", "sql": "SELECT DISTINCT name FROM genres;", "example": {"db_id": "store_1", "query": "SELECT DISTINCT name FROM genres;", "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "genres", ";"], "query_toks_no_value": ["select", "distinct", "name", "from", "genres"], "question": "List all different genre types.", "question_toks": ["List", "all", "different", "genre", "types", "."], "guid": 5802}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Return the names and typical buying and selling prices for products that have 'yellow' as their color description.", "sql": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"", "query_toks": ["SELECT", "t1.product_name", ",", "t1.typical_buying_price", ",", "t1.typical_selling_price", "FROM", "products", "AS", "t1", "JOIN", "ref_colors", "AS", "t2", "ON", "t1.color_code", "=", "t2.color_code", "WHERE", "t2.color_description", "=", "``", "yellow", "''"], "query_toks_no_value": ["select", "t1", ".", "product_name", ",", "t1", ".", "typical_buying_price", ",", "t1", ".", "typical_selling_price", "from", "products", "as", "t1", "join", "ref_colors", "as", "t2", "on", "t1", ".", "color_code", "=", "t2", ".", "color_code", "where", "t2", ".", "color_description", "=", "value"], "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.", "question_toks": ["Return", "the", "names", "and", "typical", "buying", "and", "selling", "prices", "for", "products", "that", "have", "'yellow", "'", "as", "their", "color", "description", "."], "guid": 5803}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the titles of all the albums?", "sql": "SELECT title FROM albums;", "example": {"db_id": "store_1", "query": "SELECT title FROM albums;", "query_toks": ["SELECT", "title", "FROM", "albums", ";"], "query_toks_no_value": ["select", "title", "from", "albums"], "question": "What are the titles of all the albums?", "question_toks": ["What", "are", "the", "titles", "of", "all", "the", "albums", "?"], "guid": 5804}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | How many customer cards are there?", "sql": "SELECT count(*) FROM Customers_cards", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Customers_cards", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Customers_cards"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers_cards"], "question": "How many customer cards are there?", "question_toks": ["How", "many", "customer", "cards", "are", "there", "?"], "guid": 5805}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.", "sql": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"", "example": {"db_id": "customers_and_invoices", "query": "SELECT T1.account_name ,  T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Meaghan\" AND T2.customer_last_name  =  \"Keeling\"", "query_toks": ["SELECT", "T1.account_name", ",", "T1.other_account_details", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.customer_first_name", "=", "``", "Meaghan", "''", "AND", "T2.customer_last_name", "=", "``", "Keeling", "''"], "query_toks_no_value": ["select", "t1", ".", "account_name", ",", "t1", ".", "other_account_details", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "customer_first_name", "=", "value", "and", "t2", ".", "customer_last_name", "=", "value"], "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.", "question_toks": ["Show", "the", "account", "name", "and", "other", "account", "detail", "for", "all", "accounts", "by", "the", "customer", "with", "first", "name", "Meaghan", "and", "last", "name", "Keeling", "."], "guid": 5806}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | How many customers are living in city \"Lake Geovannyton\"?", "sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "AS", "t1", "JOIN", "customer_addresses", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "addresses", "AS", "t3", "ON", "t2.address_id", "=", "t3.address_id", "WHERE", "t3.city", "=", "``", "Lake", "Geovannyton", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", "where", "t3", ".", "city", "=", "value"], "question": "How many customers are living in city \"Lake Geovannyton\"?", "question_toks": ["How", "many", "customers", "are", "living", "in", "city", "``", "Lake", "Geovannyton", "''", "?"], "guid": 5807}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What are the tracks that Dean Peeters bought?", "sql": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";", "example": {"db_id": "store_1", "query": "SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = \"Daan\" AND T4.last_name = \"Peeters\";", "query_toks": ["SELECT", "T1.name", "FROM", "tracks", "AS", "T1", "JOIN", "invoice_lines", "AS", "T2", "ON", "T1.id", "=", "T2.track_id", "JOIN", "invoices", "AS", "T3", "ON", "T3.id", "=", "T2.invoice_id", "JOIN", "customers", "AS", "T4", "ON", "T4.id", "=", "T3.customer_id", "WHERE", "T4.first_name", "=", "``", "Daan", "''", "AND", "T4.last_name", "=", "``", "Peeters", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "tracks", "as", "t1", "join", "invoice_lines", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "track_id", "join", "invoices", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "invoice_id", "join", "customers", "as", "t4", "on", "t4", ".", "id", "=", "t3", ".", "customer_id", "where", "t4", ".", "first_name", "=", "value", "and", "t4", ".", "last_name", "=", "value"], "question": "What are the tracks that Dean Peeters bought?", "question_toks": ["What", "are", "the", "tracks", "that", "Dean", "Peeters", "bought", "?"], "guid": 5808}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | List the names of all routes in alphabetic order.", "sql": "SELECT route_name FROM Delivery_Routes ORDER BY route_name", "example": {"db_id": "customer_deliveries", "query": "SELECT route_name FROM Delivery_Routes ORDER BY route_name", "query_toks": ["SELECT", "route_name", "FROM", "Delivery_Routes", "ORDER", "BY", "route_name"], "query_toks_no_value": ["select", "route_name", "from", "delivery_routes", "order", "by", "route_name"], "question": "List the names of all routes in alphabetic order.", "question_toks": ["List", "the", "names", "of", "all", "routes", "in", "alphabetic", "order", "."], "guid": 5809}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the total quantity of products associated with the orders in the \"Cancelled\" status.", "sql": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"", "query_toks": ["SELECT", "sum", "(", "t2.order_quantity", ")", "FROM", "customer_orders", "AS", "t1", "JOIN", "order_items", "AS", "t2", "ON", "t1.order_id", "=", "t2.order_id", "WHERE", "t1.order_status", "=", "``", "Cancelled", "''"], "query_toks_no_value": ["select", "sum", "(", "t2", ".", "order_quantity", ")", "from", "customer_orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t1", ".", "order_status", "=", "value"], "question": "Find the total quantity of products associated with the orders in the \"Cancelled\" status.", "question_toks": ["Find", "the", "total", "quantity", "of", "products", "associated", "with", "the", "orders", "in", "the", "``", "Cancelled", "''", "status", "."], "guid": 5810}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Count the number of customers that have the customer type that is most common.", "sql": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT count(*) FROM customers GROUP BY customer_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "GROUP", "BY", "customer_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "group", "by", "customer_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Count the number of customers that have the customer type that is most common.", "question_toks": ["Count", "the", "number", "of", "customers", "that", "have", "the", "customer", "type", "that", "is", "most", "common", "."], "guid": 5811}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.", "sql": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"", "example": {"db_id": "chinook_1", "query": "SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.FirstName  =  \"Astrid\" AND LastName  =  \"Gruber\"", "query_toks": ["SELECT", "T2.InvoiceDate", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "INVOICE", "AS", "T2", "ON", "T1.CustomerId", "=", "T2.CustomerId", "WHERE", "T1.FirstName", "=", "``", "Astrid", "''", "AND", "LastName", "=", "``", "Gruber", "''"], "query_toks_no_value": ["select", "t2", ".", "invoicedate", "from", "customer", "as", "t1", "join", "invoice", "as", "t2", "on", "t1", ".", "customerid", "=", "t2", ".", "customerid", "where", "t1", ".", "firstname", "=", "value", "and", "lastname", "=", "value"], "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.", "question_toks": ["Find", "all", "invoice", "dates", "corresponding", "to", "customers", "with", "first", "name", "Astrid", "and", "last", "name", "Gruber", "."], "guid": 5812}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the address content of the customer named \"Maudie Kertzmann\"?", "sql": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"", "query_toks": ["SELECT", "t3.address_content", "FROM", "customers", "AS", "t1", "JOIN", "customer_addresses", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "addresses", "AS", "t3", "ON", "t2.address_id", "=", "t3.address_id", "WHERE", "t1.customer_name", "=", "``", "Maudie", "Kertzmann", "''"], "query_toks_no_value": ["select", "t3", ".", "address_content", "from", "customers", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "What is the address content of the customer named \"Maudie Kertzmann\"?", "question_toks": ["What", "is", "the", "address", "content", "of", "the", "customer", "named", "``", "Maudie", "Kertzmann", "''", "?"], "guid": 5813}}
{"text": "entrepreneur: Entrepreneur_ID, People_ID, Company, Money_Requested, Investor; people: People_ID, Name, Height, Weight, Date_of_Birth | What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?", "sql": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested", "example": {"db_id": "entrepreneur", "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested", "query_toks": ["SELECT", "T2.Name", ",", "T1.Company", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Money_Requested"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "company", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "money_requested"], "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?", "question_toks": ["What", "are", "the", "names", "of", "entrepreneurs", "and", "their", "corresponding", "investors", ",", "ordered", "descending", "by", "the", "amount", "of", "money", "requested", "?"], "guid": 5814}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Return the phone numbers for all customers and suppliers.", "sql": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers", "example": {"db_id": "department_store", "query": "SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers", "query_toks": ["SELECT", "customer_phone", "FROM", "customers", "UNION", "SELECT", "supplier_phone", "FROM", "suppliers"], "query_toks_no_value": ["select", "customer_phone", "from", "customers", "union", "select", "supplier_phone", "from", "suppliers"], "question": "Return the phone numbers for all customers and suppliers.", "question_toks": ["Return", "the", "phone", "numbers", "for", "all", "customers", "and", "suppliers", "."], "guid": 5815}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the nickname of staff with first name as Janessa and last name as Sawayn?", "sql": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "example": {"db_id": "driving_school", "query": "SELECT nickname FROM Staff WHERE first_name = \"Janessa\" AND last_name = \"Sawayn\";", "query_toks": ["SELECT", "nickname", "FROM", "Staff", "WHERE", "first_name", "=", "``", "Janessa", "''", "AND", "last_name", "=", "``", "Sawayn", "''", ";"], "query_toks_no_value": ["select", "nickname", "from", "staff", "where", "first_name", "=", "value", "and", "last_name", "=", "value"], "question": "What is the nickname of staff with first name as Janessa and last name as Sawayn?", "question_toks": ["What", "is", "the", "nickname", "of", "staff", "with", "first", "name", "as", "Janessa", "and", "last", "name", "as", "Sawayn", "?"], "guid": 5816}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | Find the name of the most expensive hardware product.", "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1", "query_toks": ["SELECT", "product_name", "FROM", "products", "WHERE", "product_type_code", "=", "'Hardware", "'", "ORDER", "BY", "product_price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_name", "from", "products", "where", "product_type_code", "=", "value", "order", "by", "product_price", "desc", "limit", "value"], "question": "Find the name of the most expensive hardware product.", "question_toks": ["Find", "the", "name", "of", "the", "most", "expensive", "hardware", "product", "."], "guid": 5817}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What are the maximum, minimum, and average booked count for the products booked?", "sql": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked", "example": {"db_id": "products_for_hire", "query": "SELECT max(booked_count) ,  min(booked_count) ,  avg(booked_count) FROM products_booked", "query_toks": ["SELECT", "max", "(", "booked_count", ")", ",", "min", "(", "booked_count", ")", ",", "avg", "(", "booked_count", ")", "FROM", "products_booked"], "query_toks_no_value": ["select", "max", "(", "booked_count", ")", ",", "min", "(", "booked_count", ")", ",", "avg", "(", "booked_count", ")", "from", "products_booked"], "question": "What are the maximum, minimum, and average booked count for the products booked?", "question_toks": ["What", "are", "the", "maximum", ",", "minimum", ",", "and", "average", "booked", "count", "for", "the", "products", "booked", "?"], "guid": 5818}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Return the names and ids of each account, as well as the number of transactions.", "sql": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id", "query_toks": ["SELECT", "T2.account_name", ",", "T1.account_id", ",", "count", "(", "*", ")", "FROM", "Financial_transactions", "AS", "T1", "JOIN", "Accounts", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "GROUP", "BY", "T1.account_id"], "query_toks_no_value": ["select", "t2", ".", "account_name", ",", "t1", ".", "account_id", ",", "count", "(", "*", ")", "from", "financial_transactions", "as", "t1", "join", "accounts", "as", "t2", "on", "t1", ".", "account_id", "=", "t2", ".", "account_id", "group", "by", "t1", ".", "account_id"], "question": "Return the names and ids of each account, as well as the number of transactions.", "question_toks": ["Return", "the", "names", "and", "ids", "of", "each", "account", ",", "as", "well", "as", "the", "number", "of", "transactions", "."], "guid": 5819}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the account name, id and the number of transactions for each account.", "sql": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.account_name ,  T1.account_id ,  count(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id  =  T2.account_id GROUP BY T1.account_id", "query_toks": ["SELECT", "T2.account_name", ",", "T1.account_id", ",", "count", "(", "*", ")", "FROM", "Financial_transactions", "AS", "T1", "JOIN", "Accounts", "AS", "T2", "ON", "T1.account_id", "=", "T2.account_id", "GROUP", "BY", "T1.account_id"], "query_toks_no_value": ["select", "t2", ".", "account_name", ",", "t1", ".", "account_id", ",", "count", "(", "*", ")", "from", "financial_transactions", "as", "t1", "join", "accounts", "as", "t2", "on", "t1", ".", "account_id", "=", "t2", ".", "account_id", "group", "by", "t1", ".", "account_id"], "question": "Show the account name, id and the number of transactions for each account.", "question_toks": ["Show", "the", "account", "name", ",", "id", "and", "the", "number", "of", "transactions", "for", "each", "account", "."], "guid": 5820}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What are the ids of the top three products that were purchased in the largest amount?", "sql": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3", "example": {"db_id": "department_store", "query": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3", "query_toks": ["SELECT", "product_id", "FROM", "product_suppliers", "ORDER", "BY", "total_amount_purchased", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "product_id", "from", "product_suppliers", "order", "by", "total_amount_purchased", "desc", "limit", "value"], "question": "What are the ids of the top three products that were purchased in the largest amount?", "question_toks": ["What", "are", "the", "ids", "of", "the", "top", "three", "products", "that", "were", "purchased", "in", "the", "largest", "amount", "?"], "guid": 5821}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | How many tracks are in the AAC audio file media type?", "sql": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"", "example": {"db_id": "chinook_1", "query": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"", "query_toks": ["SELECT", "COUNT", "(", "*", ")", "FROM", "MEDIATYPE", "AS", "T1", "JOIN", "TRACK", "AS", "T2", "ON", "T1.MediaTypeId", "=", "T2.MediaTypeId", "WHERE", "T1.Name", "=", "``", "AAC", "audio", "file", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "mediatype", "as", "t1", "join", "track", "as", "t2", "on", "t1", ".", "mediatypeid", "=", "t2", ".", "mediatypeid", "where", "t1", ".", "name", "=", "value"], "question": "How many tracks are in the AAC audio file media type?", "question_toks": ["How", "many", "tracks", "are", "in", "the", "AAC", "audio", "file", "media", "type", "?"], "guid": 5822}}
{"text": "Products: product_id, product_name, product_price, product_description; Addresses: address_id, address_details, city, zip_postcode, state_province_county, country; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, date_became_customer; Regular_Orders: regular_order_id, distributer_id; Regular_Order_Products: regular_order_id, product_id; Actual_Orders: actual_order_id, order_status_code, regular_order_id, actual_order_date; Actual_Order_Products: actual_order_id, product_id; Customer_Addresses: customer_id, address_id, date_from, address_type, date_to; Delivery_Routes: route_id, route_name, other_route_details; Delivery_Route_Locations: location_code, route_id, location_address_id, location_name | Find the name of route that has the highest number of deliveries.", "sql": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customer_deliveries", "query": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.route_name", "FROM", "Delivery_Routes", "AS", "t1", "JOIN", "Delivery_Route_Locations", "AS", "t2", "ON", "t1.route_id", "=", "t2.route_id", "GROUP", "BY", "t1.route_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "route_name", "from", "delivery_routes", "as", "t1", "join", "delivery_route_locations", "as", "t2", "on", "t1", ".", "route_id", "=", "t2", ".", "route_id", "group", "by", "t1", ".", "route_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the name of route that has the highest number of deliveries.", "question_toks": ["Find", "the", "name", "of", "route", "that", "has", "the", "highest", "number", "of", "deliveries", "."], "guid": 5823}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the name and attribute ID of the attribute definitions with attribute value 0.", "sql": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "example": {"db_id": "product_catalog", "query": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0", "query_toks": ["SELECT", "t1.attribute_name", ",", "t1.attribute_id", "FROM", "Attribute_Definitions", "AS", "t1", "JOIN", "Catalog_Contents_Additional_Attributes", "AS", "t2", "ON", "t1.attribute_id", "=", "t2.attribute_id", "WHERE", "t2.attribute_value", "=", "0"], "query_toks_no_value": ["select", "t1", ".", "attribute_name", ",", "t1", ".", "attribute_id", "from", "attribute_definitions", "as", "t1", "join", "catalog_contents_additional_attributes", "as", "t2", "on", "t1", ".", "attribute_id", "=", "t2", ".", "attribute_id", "where", "t2", ".", "attribute_value", "=", "value"], "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.", "question_toks": ["Find", "the", "name", "and", "attribute", "ID", "of", "the", "attribute", "definitions", "with", "attribute", "value", "0", "."], "guid": 5824}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | How many albums are there?", "sql": "SELECT count(*) FROM ALBUM", "example": {"db_id": "chinook_1", "query": "SELECT count(*) FROM ALBUM", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ALBUM"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "album"], "question": "How many albums are there?", "question_toks": ["How", "many", "albums", "are", "there", "?"], "guid": 5825}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Show the account id and the number of transactions for each account", "sql": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "example": {"db_id": "customers_card_transactions", "query": "SELECT account_id ,  count(*) FROM Financial_transactions GROUP BY account_id", "query_toks": ["SELECT", "account_id", ",", "count", "(", "*", ")", "FROM", "Financial_transactions", "GROUP", "BY", "account_id"], "query_toks_no_value": ["select", "account_id", ",", "count", "(", "*", ")", "from", "financial_transactions", "group", "by", "account_id"], "question": "Show the account id and the number of transactions for each account", "question_toks": ["Show", "the", "account", "id", "and", "the", "number", "of", "transactions", "for", "each", "account"], "guid": 5826}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Count the number of customers who hold an account.", "sql": "SELECT count(DISTINCT customer_id) FROM Accounts", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(DISTINCT customer_id) FROM Accounts", "query_toks": ["SELECT", "count", "(", "DISTINCT", "customer_id", ")", "FROM", "Accounts"], "query_toks_no_value": ["select", "count", "(", "distinct", "customer_id", ")", "from", "accounts"], "question": "Count the number of customers who hold an account.", "question_toks": ["Count", "the", "number", "of", "customers", "who", "hold", "an", "account", "."], "guid": 5827}}
{"text": "Addresses: address_id, address_details; Staff: staff_id, staff_gender, staff_name; Suppliers: supplier_id, supplier_name, supplier_phone; Department_Store_Chain: dept_store_chain_id, dept_store_chain_name; Customers: customer_id, payment_method_code, customer_code, customer_name, customer_address, customer_phone, customer_email; Products: product_id, product_type_code, product_name, product_price; Supplier_Addresses: supplier_id, address_id, date_from, date_to; Customer_Addresses: customer_id, address_id, date_from, date_to; Customer_Orders: order_id, customer_id, order_status_code, order_date; Department_Stores: dept_store_id, dept_store_chain_id, store_name, store_address, store_phone, store_email | What is the name of the hardware product with the greatest price?", "sql": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1", "example": {"db_id": "department_store", "query": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1", "query_toks": ["SELECT", "product_name", "FROM", "products", "WHERE", "product_type_code", "=", "'Hardware", "'", "ORDER", "BY", "product_price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_name", "from", "products", "where", "product_type_code", "=", "value", "order", "by", "product_price", "desc", "limit", "value"], "question": "What is the name of the hardware product with the greatest price?", "question_toks": ["What", "is", "the", "name", "of", "the", "hardware", "product", "with", "the", "greatest", "price", "?"], "guid": 5828}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the ids and first names of customers who do not hold a credit card?", "sql": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"", "query_toks": ["SELECT", "customer_id", ",", "customer_first_name", "FROM", "Customers", "EXCEPT", "SELECT", "T1.customer_id", ",", "T2.customer_first_name", "FROM", "Customers_cards", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "card_type_code", "=", "``", "Credit", "''"], "query_toks_no_value": ["select", "customer_id", ",", "customer_first_name", "from", "customers", "except", "select", "t1", ".", "customer_id", ",", "t2", ".", "customer_first_name", "from", "customers_cards", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "card_type_code", "=", "value"], "question": "What are the ids and first names of customers who do not hold a credit card?", "question_toks": ["What", "are", "the", "ids", "and", "first", "names", "of", "customers", "who", "do", "not", "hold", "a", "credit", "card", "?"], "guid": 5829}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.", "sql": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"", "example": {"db_id": "product_catalog", "query": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"", "query_toks": ["SELECT", "catalog_entry_name", "FROM", "catalog_contents", "WHERE", "product_stock_number", "LIKE", "``", "2", "%", "''"], "query_toks_no_value": ["select", "catalog_entry_name", "from", "catalog_contents", "where", "product_stock_number", "like", "value"], "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.", "question_toks": ["Which", "catalog", "contents", "have", "a", "product", "stock", "number", "that", "starts", "from", "``", "2", "''", "?", "Show", "the", "catalog", "entry", "names", "."], "guid": 5830}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the name of the category to which the film 'HUNGER ROOF' belongs.", "sql": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'", "example": {"db_id": "sakila_1", "query": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'", "query_toks": ["SELECT", "T1.name", "FROM", "category", "AS", "T1", "JOIN", "film_category", "AS", "T2", "ON", "T1.category_id", "=", "T2.category_id", "JOIN", "film", "AS", "T3", "ON", "T2.film_id", "=", "T3.film_id", "WHERE", "T3.title", "=", "'HUNGER", "ROOF", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t1", "join", "film_category", "as", "t2", "on", "t1", ".", "category_id", "=", "t2", ".", "category_id", "join", "film", "as", "t3", "on", "t2", ".", "film_id", "=", "t3", ".", "film_id", "where", "t3", ".", "title", "=", "value"], "question": "Return the name of the category to which the film 'HUNGER ROOF' belongs.", "question_toks": ["Return", "the", "name", "of", "the", "category", "to", "which", "the", "film", "'HUNGER", "ROOF", "'", "belongs", "."], "guid": 5831}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | What are the descriptions for each color?", "sql": "SELECT color_description FROM ref_colors", "example": {"db_id": "products_gen_characteristics", "query": "SELECT color_description FROM ref_colors", "query_toks": ["SELECT", "color_description", "FROM", "ref_colors"], "query_toks_no_value": ["select", "color_description", "from", "ref_colors"], "question": "What are the descriptions for each color?", "question_toks": ["What", "are", "the", "descriptions", "for", "each", "color", "?"], "guid": 5832}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | What are the details of all sales and purchases?", "sql": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases", "example": {"db_id": "tracking_share_transactions", "query": "SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases", "query_toks": ["SELECT", "sales_details", "FROM", "sales", "UNION", "SELECT", "purchase_details", "FROM", "purchases"], "query_toks_no_value": ["select", "sales_details", "from", "sales", "union", "select", "purchase_details", "from", "purchases"], "question": "What are the details of all sales and purchases?", "question_toks": ["What", "are", "the", "details", "of", "all", "sales", "and", "purchases", "?"], "guid": 5833}}
{"text": "product: product_id, product, dimensions, dpi, pages_per_minute_color, max_page_size, interface; store: Store_ID, Store_Name, Type, Area_size, Number_of_product_category, Ranking; district: District_ID, District_name, Headquartered_City, City_Population, City_Area; store_product: Store_ID, Product_ID; store_district: Store_ID, District_ID | Find the total population of the districts where the area is bigger than the average city area.", "sql": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)", "example": {"db_id": "store_product", "query": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)", "query_toks": ["SELECT", "sum", "(", "city_population", ")", "FROM", "district", "WHERE", "city_area", ">", "(", "SELECT", "avg", "(", "city_area", ")", "FROM", "district", ")"], "query_toks_no_value": ["select", "sum", "(", "city_population", ")", "from", "district", "where", "city_area", ">", "(", "select", "avg", "(", "city_area", ")", "from", "district", ")"], "question": "Find the total population of the districts where the area is bigger than the average city area.", "question_toks": ["Find", "the", "total", "population", "of", "the", "districts", "where", "the", "area", "is", "bigger", "than", "the", "average", "city", "area", "."], "guid": 5834}}
{"text": "Premises: premise_id, premises_type, premise_details; Products: product_id, product_category, product_name; Customers: customer_id, payment_method, customer_name, customer_phone, customer_email, customer_address, customer_login, customer_password; Mailshot_Campaigns: mailshot_id, product_category, mailshot_name, mailshot_start_date, mailshot_end_date; Customer_Addresses: customer_id, premise_id, date_address_from, address_type_code, date_address_to; Customer_Orders: order_id, customer_id, order_status_code, shipping_method_code, order_placed_datetime, order_delivered_datetime, order_shipping_charges; Mailshot_Customers: mailshot_id, customer_id, outcome_code, mailshot_customer_date; Order_Items: item_id, order_item_status_code, order_id, product_id, item_status_code, item_delivered_datetime, item_order_quantity | What are all the distinct premise types?", "sql": "SELECT DISTINCT premises_type FROM premises", "example": {"db_id": "customers_campaigns_ecommerce", "query": "SELECT DISTINCT premises_type FROM premises", "query_toks": ["SELECT", "DISTINCT", "premises_type", "FROM", "premises"], "query_toks_no_value": ["select", "distinct", "premises_type", "from", "premises"], "question": "What are all the distinct premise types?", "question_toks": ["What", "are", "all", "the", "distinct", "premise", "types", "?"], "guid": 5835}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Show the first name and last name for the customer with account name 900.", "sql": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"", "example": {"db_id": "customers_and_invoices", "query": "SELECT T2.customer_first_name ,  T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.account_name  =  \"900\"", "query_toks": ["SELECT", "T2.customer_first_name", ",", "T2.customer_last_name", "FROM", "Accounts", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.account_name", "=", "``", "900", "''"], "query_toks_no_value": ["select", "t2", ".", "customer_first_name", ",", "t2", ".", "customer_last_name", "from", "accounts", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "account_name", "=", "value"], "question": "Show the first name and last name for the customer with account name 900.", "question_toks": ["Show", "the", "first", "name", "and", "last", "name", "for", "the", "customer", "with", "account", "name", "900", "."], "guid": 5836}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?", "sql": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"", "example": {"db_id": "customer_complaints", "query": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"", "query_toks": ["SELECT", "address_line_1", ",", "address_line_2", "FROM", "customers", "WHERE", "email_address", "=", "``", "vbogisich", "@", "example.org", "''"], "query_toks_no_value": ["select", "address_line_1", ",", "address_line_2", "from", "customers", "where", "email_address", "=", "value"], "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?", "question_toks": ["What", "are", "lines", "1", "and", "2", "of", "the", "addressed", "of", "the", "customer", "with", "the", "email", "``", "vbogisich", "@", "example.org", "''", "?"], "guid": 5837}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Which product has been ordered most number of times?", "sql": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.product_details", "FROM", "order_items", "AS", "t1", "JOIN", "products", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "GROUP", "BY", "t1.product_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "product_details", "from", "order_items", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which product has been ordered most number of times?", "question_toks": ["Which", "product", "has", "been", "ordered", "most", "number", "of", "times", "?"], "guid": 5838}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | What are the other account details for the account with the name 338?", "sql": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"", "example": {"db_id": "customers_card_transactions", "query": "SELECT other_account_details FROM Accounts WHERE account_name  =  \"338\"", "query_toks": ["SELECT", "other_account_details", "FROM", "Accounts", "WHERE", "account_name", "=", "``", "338", "''"], "query_toks_no_value": ["select", "other_account_details", "from", "accounts", "where", "account_name", "=", "value"], "question": "What are the other account details for the account with the name 338?", "question_toks": ["What", "are", "the", "other", "account", "details", "for", "the", "account", "with", "the", "name", "338", "?"], "guid": 5839}}
{"text": "Discount_Coupons: coupon_id, date_issued, coupon_amount; Customers: customer_id, coupon_id, good_or_bad_customer, first_name, last_name, gender_mf, date_became_customer, date_last_hire; Bookings: booking_id, customer_id, booking_status_code, returned_damaged_yn, booking_start_date, booking_end_date, count_hired, amount_payable, amount_of_discount, amount_outstanding; Products_for_Hire: product_id, product_type_code, daily_hire_cost, product_name, product_description; Payments: payment_id, booking_id, customer_id, payment_type_code, amount_paid_in_full_yn, payment_date, amount_due, amount_paid; Products_Booked: booking_id, product_id, returned_yn, returned_late_yn, booked_count, booked_amount; View_Product_Availability: product_id, booking_id, status_date, available_yn | What are the start date and end date of the booking that has booked the product named 'Book collection A'?", "sql": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'", "example": {"db_id": "products_for_hire", "query": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'", "query_toks": ["SELECT", "T3.booking_start_date", ",", "T3.booking_end_date", "FROM", "Products_for_hire", "AS", "T1", "JOIN", "products_booked", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "JOIN", "bookings", "AS", "T3", "ON", "T2.booking_id", "=", "T3.booking_id", "WHERE", "T1.product_name", "=", "'Book", "collection", "A", "'"], "query_toks_no_value": ["select", "t3", ".", "booking_start_date", ",", "t3", ".", "booking_end_date", "from", "products_for_hire", "as", "t1", "join", "products_booked", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "bookings", "as", "t3", "on", "t2", ".", "booking_id", "=", "t3", ".", "booking_id", "where", "t1", ".", "product_name", "=", "value"], "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?", "question_toks": ["What", "are", "the", "start", "date", "and", "end", "date", "of", "the", "booking", "that", "has", "booked", "the", "product", "named", "'Book", "collection", "A", "'", "?"], "guid": 5840}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the number of customers who live in the city called Lake Geovannyton.", "sql": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "AS", "t1", "JOIN", "customer_addresses", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "addresses", "AS", "t3", "ON", "t2.address_id", "=", "t3.address_id", "WHERE", "t3.city", "=", "``", "Lake", "Geovannyton", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "as", "t1", "join", "customer_addresses", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "addresses", "as", "t3", "on", "t2", ".", "address_id", "=", "t3", ".", "address_id", "where", "t3", ".", "city", "=", "value"], "question": "Find the number of customers who live in the city called Lake Geovannyton.", "question_toks": ["Find", "the", "number", "of", "customers", "who", "live", "in", "the", "city", "called", "Lake", "Geovannyton", "."], "guid": 5841}}
{"text": "Investors: investor_id, Investor_details; Lots: lot_id, investor_id, lot_details; Ref_Transaction_Types: transaction_type_code, transaction_type_description; Transactions: transaction_id, investor_id, transaction_type_code, date_of_transaction, amount_of_transaction, share_count, other_details; Sales: sales_transaction_id, sales_details; Purchases: purchase_transaction_id, purchase_details; Transactions_Lots: transaction_id, lot_id | Show the average share count of transactions for different investors.", "sql": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id", "example": {"db_id": "tracking_share_transactions", "query": "SELECT investor_id ,  avg(share_count) FROM TRANSACTIONS GROUP BY investor_id", "query_toks": ["SELECT", "investor_id", ",", "avg", "(", "share_count", ")", "FROM", "TRANSACTIONS", "GROUP", "BY", "investor_id"], "query_toks_no_value": ["select", "investor_id", ",", "avg", "(", "share_count", ")", "from", "transactions", "group", "by", "investor_id"], "question": "Show the average share count of transactions for different investors.", "question_toks": ["Show", "the", "average", "share", "count", "of", "transactions", "for", "different", "investors", "."], "guid": 5842}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the titles of albums by the artist \"AC/DC\"?", "sql": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"", "example": {"db_id": "chinook_1", "query": "SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"AC/DC\"", "query_toks": ["SELECT", "Title", "FROM", "ALBUM", "AS", "T1", "JOIN", "ARTIST", "AS", "T2", "ON", "T1.ArtistId", "=", "T2.ArtistId", "WHERE", "T2.Name", "=", "``", "AC/DC", "''"], "query_toks_no_value": ["select", "title", "from", "album", "as", "t1", "join", "artist", "as", "t2", "on", "t1", ".", "artistid", "=", "t2", ".", "artistid", "where", "t2", ".", "name", "=", "value"], "question": "What are the titles of albums by the artist \"AC/DC\"?", "question_toks": ["What", "are", "the", "titles", "of", "albums", "by", "the", "artist", "``", "AC/DC", "''", "?"], "guid": 5843}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?", "sql": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200", "example": {"db_id": "sakila_1", "query": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200", "query_toks": ["SELECT", "title", "FROM", "film", "WHERE", "LENGTH", ">", "100", "OR", "rating", "=", "'PG", "'", "EXCEPT", "SELECT", "title", "FROM", "film", "WHERE", "replacement_cost", ">", "200"], "query_toks_no_value": ["select", "title", "from", "film", "where", "length", ">", "value", "or", "rating", "=", "value", "except", "select", "title", "from", "film", "where", "replacement_cost", ">", "value"], "question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?", "question_toks": ["What", "are", "the", "titles", "of", "films", "that", "are", "either", "longer", "than", "100", "minutes", "or", "rated", "PG", "other", "than", "those", "that", "cost", "more", "than", "200", "to", "replace", "?"], "guid": 5844}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What are the details of all products?", "sql": "SELECT DISTINCT product_details FROM products", "example": {"db_id": "customers_and_addresses", "query": "SELECT DISTINCT product_details FROM products", "query_toks": ["SELECT", "DISTINCT", "product_details", "FROM", "products"], "query_toks_no_value": ["select", "distinct", "product_details", "from", "products"], "question": "What are the details of all products?", "question_toks": ["What", "are", "the", "details", "of", "all", "products", "?"], "guid": 5845}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | What are the invoice numbers created before 1989-09-03 or after 2007-12-25?", "sql": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "example": {"db_id": "tracking_orders", "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "query_toks": ["SELECT", "invoice_number", "FROM", "invoices", "WHERE", "invoice_date", "<", "``", "1989-09-03", "''", "OR", "invoice_date", ">", "``", "2007-12-25", "''"], "query_toks_no_value": ["select", "invoice_number", "from", "invoices", "where", "invoice_date", "<", "value", "or", "invoice_date", ">", "value"], "question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?", "question_toks": ["What", "are", "the", "invoice", "numbers", "created", "before", "1989-09-03", "or", "after", "2007-12-25", "?"], "guid": 5846}}
{"text": "Addresses: address_id, line_1_number_building, city, zip_postcode, state_province_county, country; Staff: staff_id, staff_address_id, nickname, first_name, middle_name, last_name, date_of_birth, date_joined_staff, date_left_staff; Vehicles: vehicle_id, vehicle_details; Customers: customer_id, customer_address_id, customer_status_code, date_became_customer, date_of_birth, first_name, last_name, amount_outstanding, email_address, phone_number; Customer_Payments: customer_id, datetime_payment, payment_method_code, amount_payment; Lessons: lesson_id, customer_id, lesson_status_code, staff_id, vehicle_id, lesson_date, lesson_time, price | What is the status code with the least number of customers?", "sql": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;", "example": {"db_id": "driving_school", "query": "SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY count(*) ASC LIMIT 1;", "query_toks": ["SELECT", "customer_status_code", "FROM", "Customers", "GROUP", "BY", "customer_status_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "customer_status_code", "from", "customers", "group", "by", "customer_status_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the status code with the least number of customers?", "question_toks": ["What", "is", "the", "status", "code", "with", "the", "least", "number", "of", "customers", "?"], "guid": 5847}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.", "sql": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "example": {"db_id": "tracking_orders", "query": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"", "query_toks": ["SELECT", "DISTINCT", "invoice_details", "FROM", "invoices", "WHERE", "invoice_date", "<", "``", "1989-09-03", "''", "OR", "invoice_date", ">", "``", "2007-12-25", "''"], "query_toks_no_value": ["select", "distinct", "invoice_details", "from", "invoices", "where", "invoice_date", "<", "value", "or", "invoice_date", ">", "value"], "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.", "question_toks": ["Find", "the", "distinct", "details", "of", "invoices", "which", "are", "created", "before", "1989-09-03", "or", "after", "2007-12-25", "."], "guid": 5848}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the composer who created the track \"Fast As a Shark\"?", "sql": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";", "example": {"db_id": "store_1", "query": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\";", "query_toks": ["SELECT", "composer", "FROM", "tracks", "WHERE", "name", "=", "``", "Fast", "As", "a", "Shark", "''", ";"], "query_toks_no_value": ["select", "composer", "from", "tracks", "where", "name", "=", "value"], "question": "What is the composer who created the track \"Fast As a Shark\"?", "question_toks": ["What", "is", "the", "composer", "who", "created", "the", "track", "``", "Fast", "As", "a", "Shark", "''", "?"], "guid": 5849}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Find the id of the customers who have order status both \"On Road\" and \"Shipped\".", "sql": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"", "example": {"db_id": "tracking_orders", "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"", "query_toks": ["SELECT", "T1.customer_id", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "On", "Road", "''", "INTERSECT", "SELECT", "T1.customer_id", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "Shipped", "''"], "query_toks_no_value": ["select", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value", "intersect", "select", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"], "question": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".", "question_toks": ["Find", "the", "id", "of", "the", "customers", "who", "have", "order", "status", "both", "``", "On", "Road", "''", "and", "``", "Shipped", "''", "."], "guid": 5850}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What is the phone number of the customer who has filed the most recent complaint?", "sql": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1", "example": {"db_id": "customer_complaints", "query": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1", "query_toks": ["SELECT", "t1.phone_number", "FROM", "customers", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "ORDER", "BY", "t2.date_complaint_raised", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "phone_number", "from", "customers", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "order", "by", "t2", ".", "date_complaint_raised", "desc", "limit", "value"], "question": "What is the phone number of the customer who has filed the most recent complaint?", "question_toks": ["What", "is", "the", "phone", "number", "of", "the", "customer", "who", "has", "filed", "the", "most", "recent", "complaint", "?"], "guid": 5851}}
{"text": "Customers: customer_id, customer_name, customer_details; Invoices: invoice_number, invoice_date, invoice_details; Orders: order_id, customer_id, order_status, date_order_placed, order_details; Products: product_id, product_name, product_details; Order_Items: order_item_id, product_id, order_id, order_item_status, order_item_details; Shipments: shipment_id, order_id, invoice_number, shipment_tracking_number, shipment_date, other_shipment_details; Shipment_Items: shipment_id, order_item_id | Which orders have shipment after 2000-01-01? Give me the order ids.", "sql": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"", "example": {"db_id": "tracking_orders", "query": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"", "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_date", ">", "``", "2000-01-01", "''"], "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_date", ">", "value"], "question": "Which orders have shipment after 2000-01-01? Give me the order ids.", "question_toks": ["Which", "orders", "have", "shipment", "after", "2000-01-01", "?", "Give", "me", "the", "order", "ids", "."], "guid": 5852}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | Find the full name of the customer with the email \"luisg@embraer.com.br\".", "sql": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"", "example": {"db_id": "chinook_1", "query": "SELECT FirstName ,  LastName FROM CUSTOMER WHERE Email  =  \"luisg@embraer.com.br\"", "query_toks": ["SELECT", "FirstName", ",", "LastName", "FROM", "CUSTOMER", "WHERE", "Email", "=", "``", "luisg", "@", "embraer.com.br", "''"], "query_toks_no_value": ["select", "firstname", ",", "lastname", "from", "customer", "where", "email", "=", "value"], "question": "Find the full name of the customer with the email \"luisg@embraer.com.br\".", "question_toks": ["Find", "the", "full", "name", "of", "the", "customer", "with", "the", "email", "``", "luisg", "@", "embraer.com.br", "''", "."], "guid": 5853}}
{"text": "Album: AlbumId, Title, ArtistId; Artist: ArtistId, Name; Customer: CustomerId, FirstName, LastName, Company, Address, City, State, Country, PostalCode, Phone; Employee: EmployeeId, LastName, FirstName, Title, ReportsTo, BirthDate, HireDate, Address, City, State; Genre: GenreId, Name; Invoice: InvoiceId, CustomerId, InvoiceDate, BillingAddress, BillingCity, BillingState, BillingCountry, BillingPostalCode, Total; InvoiceLine: InvoiceLineId, InvoiceId, TrackId, UnitPrice, Quantity; MediaType: MediaTypeId, Name; Playlist: PlaylistId, Name; PlaylistTrack: PlaylistId, TrackId | What are the different first names for customers from Brazil who have also had an invoice?", "sql": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"", "example": {"db_id": "chinook_1", "query": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"", "query_toks": ["SELECT", "DISTINCT", "T1.FirstName", "FROM", "CUSTOMER", "AS", "T1", "JOIN", "INVOICE", "AS", "T2", "ON", "T1.CustomerId", "=", "T2.CustomerId", "WHERE", "T1.country", "=", "``", "Brazil", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "firstname", "from", "customer", "as", "t1", "join", "invoice", "as", "t2", "on", "t1", ".", "customerid", "=", "t2", ".", "customerid", "where", "t1", ".", "country", "=", "value"], "question": "What are the different first names for customers from Brazil who have also had an invoice?", "question_toks": ["What", "are", "the", "different", "first", "names", "for", "customers", "from", "Brazil", "who", "have", "also", "had", "an", "invoice", "?"], "guid": 5854}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Count the products that have the color description \"white\" or have the characteristic name \"hot\".", "sql": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "JOIN", "ref_colors", "AS", "t4", "ON", "t1.color_code", "=", "t4.color_code", "WHERE", "t4.color_description", "=", "``", "white", "''", "OR", "t3.characteristic_name", "=", "``", "hot", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "join", "ref_colors", "as", "t4", "on", "t1", ".", "color_code", "=", "t4", ".", "color_code", "where", "t4", ".", "color_description", "=", "value", "or", "t3", ".", "characteristic_name", "=", "value"], "question": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".", "question_toks": ["Count", "the", "products", "that", "have", "the", "color", "description", "``", "white", "''", "or", "have", "the", "characteristic", "name", "``", "hot", "''", "."], "guid": 5855}}
{"text": "Customers: customer_id, customer_first_name, customer_middle_initial, customer_last_name, gender, email_address, login_name, login_password, phone_number, town_city; Orders: order_id, customer_id, date_order_placed, order_details; Invoices: invoice_number, order_id, invoice_date; Accounts: account_id, customer_id, date_account_opened, account_name, other_account_details; Product_Categories: production_type_code, product_type_description, vat_rating; Products: product_id, parent_product_id, production_type_code, unit_price, product_name, product_color, product_size; Financial_Transactions: transaction_id, account_id, invoice_number, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details; Order_Items: order_item_id, order_id, product_id, product_quantity, other_order_item_details; Invoice_Line_Items: order_item_id, invoice_number, product_id, product_title, product_quantity, product_price, derived_product_cost, derived_vat_payable, derived_total_cost | Return the average, minimum, maximum, and total transaction amounts.", "sql": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions", "example": {"db_id": "customers_and_invoices", "query": "SELECT avg(transaction_amount) ,  min(transaction_amount) ,  max(transaction_amount) ,   sum(transaction_amount) FROM Financial_transactions", "query_toks": ["SELECT", "avg", "(", "transaction_amount", ")", ",", "min", "(", "transaction_amount", ")", ",", "max", "(", "transaction_amount", ")", ",", "sum", "(", "transaction_amount", ")", "FROM", "Financial_transactions"], "query_toks_no_value": ["select", "avg", "(", "transaction_amount", ")", ",", "min", "(", "transaction_amount", ")", ",", "max", "(", "transaction_amount", ")", ",", "sum", "(", "transaction_amount", ")", "from", "financial_transactions"], "question": "Return the average, minimum, maximum, and total transaction amounts.", "question_toks": ["Return", "the", "average", ",", "minimum", ",", "maximum", ",", "and", "total", "transaction", "amounts", "."], "guid": 5856}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | What is the most popular first name of the actors?", "sql": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "first_name", "FROM", "actor", "GROUP", "BY", "first_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "first_name", "from", "actor", "group", "by", "first_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most popular first name of the actors?", "question_toks": ["What", "is", "the", "most", "popular", "first", "name", "of", "the", "actors", "?"], "guid": 5857}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the name of the customer that has purchased the most items?", "sql": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1", "query_toks": ["SELECT", "t1.customer_name", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "GROUP", "BY", "t1.customer_name", "ORDER", "BY", "sum", "(", "t3.order_quantity", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "group", "by", "t1", ".", "customer_name", "order", "by", "sum", "(", "t3", ".", "order_quantity", ")", "desc", "limit", "value"], "question": "What is the name of the customer that has purchased the most items?", "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "that", "has", "purchased", "the", "most", "items", "?"], "guid": 5858}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What is the sum of total pounds of purchase in year 2018 for all branches in London?", "sql": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", "example": {"db_id": "shop_membership", "query": "SELECT sum(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.city  =  'London' AND T1.year  =  2018", "query_toks": ["SELECT", "sum", "(", "total_pounds", ")", "FROM", "purchase", "AS", "T1", "JOIN", "branch", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T2.city", "=", "'London", "'", "AND", "T1.year", "=", "2018"], "query_toks_no_value": ["select", "sum", "(", "total_pounds", ")", "from", "purchase", "as", "t1", "join", "branch", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t2", ".", "city", "=", "value", "and", "t1", ".", "year", "=", "value"], "question": "What is the sum of total pounds of purchase in year 2018 for all branches in London?", "question_toks": ["What", "is", "the", "sum", "of", "total", "pounds", "of", "purchase", "in", "year", "2018", "for", "all", "branches", "in", "London", "?"], "guid": 5859}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | Find the contact channel code that was used by the customer named \"Tillman Ernser\".", "sql": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "example": {"db_id": "customers_and_addresses", "query": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"", "query_toks": ["SELECT", "DISTINCT", "channel_code", "FROM", "customers", "AS", "t1", "JOIN", "customer_contact_channels", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "WHERE", "t1.customer_name", "=", "``", "Tillman", "Ernser", "''"], "query_toks_no_value": ["select", "distinct", "channel_code", "from", "customers", "as", "t1", "join", "customer_contact_channels", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"], "question": "Find the contact channel code that was used by the customer named \"Tillman Ernser\".", "question_toks": ["Find", "the", "contact", "channel", "code", "that", "was", "used", "by", "the", "customer", "named", "``", "Tillman", "Ernser", "''", "."], "guid": 5860}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | Return the description of the product called \"Chocolate\".", "sql": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\"", "example": {"db_id": "customer_complaints", "query": "SELECT product_description FROM products WHERE product_name  =  \"Chocolate\"", "query_toks": ["SELECT", "product_description", "FROM", "products", "WHERE", "product_name", "=", "``", "Chocolate", "''"], "query_toks_no_value": ["select", "product_description", "from", "products", "where", "product_name", "=", "value"], "question": "Return the description of the product called \"Chocolate\".", "question_toks": ["Return", "the", "description", "of", "the", "product", "called", "``", "Chocolate", "''", "."], "guid": 5861}}
{"text": "actor: actor_id, first_name, last_name, last_update; address: address_id, address, address2, district, city_id, postal_code, phone, last_update; category: category_id, name, last_update; city: city_id, city, country_id, last_update; country: country_id, country, last_update; customer: customer_id, store_id, first_name, last_name, email, address_id, active, create_date, last_update; film: film_id, title, description, release_year, language_id, original_language_id, rental_duration, rental_rate, length, replacement_cost; film_actor: actor_id, film_id, last_update; film_category: film_id, category_id, last_update; film_text: film_id, title, description | Return the amount of the largest payment.", "sql": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1", "example": {"db_id": "sakila_1", "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1", "query_toks": ["SELECT", "amount", "FROM", "payment", "ORDER", "BY", "amount", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "amount", "from", "payment", "order", "by", "amount", "desc", "limit", "value"], "question": "Return the amount of the largest payment.", "question_toks": ["Return", "the", "amount", "of", "the", "largest", "payment", "."], "guid": 5862}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | What is the full name of the employee who has the most customers?", "sql": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "store_1", "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "employees", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.id", "=", "T2.support_rep_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "employees", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "support_rep_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the full name of the employee who has the most customers?", "question_toks": ["What", "is", "the", "full", "name", "of", "the", "employee", "who", "has", "the", "most", "customers", "?"], "guid": 5863}}
{"text": "Accounts: account_id, customer_id, account_name, other_account_details; Customers: customer_id, customer_first_name, customer_last_name, customer_address, customer_phone, customer_email, other_customer_details; Customers_Cards: card_id, customer_id, card_type_code, card_number, date_valid_from, date_valid_to, other_card_details; Financial_Transactions: transaction_id, previous_transaction_id, account_id, card_id, transaction_type, transaction_date, transaction_amount, transaction_comment, other_transaction_details | Count the number of accounts.", "sql": "SELECT count(*) FROM Accounts", "example": {"db_id": "customers_card_transactions", "query": "SELECT count(*) FROM Accounts", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Accounts"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "accounts"], "question": "Count the number of accounts.", "question_toks": ["Count", "the", "number", "of", "accounts", "."], "guid": 5864}}
{"text": "Attribute_Definitions: attribute_id, attribute_name, attribute_data_type; Catalogs: catalog_id, catalog_name, catalog_publisher, date_of_publication, date_of_latest_revision; Catalog_Structure: catalog_level_number, catalog_id, catalog_level_name; Catalog_Contents: catalog_entry_id, catalog_level_number, parent_entry_id, previous_entry_id, next_entry_id, catalog_entry_name, product_stock_number, price_in_dollars, price_in_euros, price_in_pounds; Catalog_Contents_Additional_Attributes: catalog_entry_id, catalog_level_number, attribute_id, attribute_value | Find the names and publication dates of all catalogs that have catalog level number greater than 5.", "sql": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5", "example": {"db_id": "product_catalog", "query": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5", "query_toks": ["SELECT", "t1.catalog_name", ",", "t1.date_of_publication", "FROM", "catalogs", "AS", "t1", "JOIN", "catalog_structure", "AS", "t2", "ON", "t1.catalog_id", "=", "t2.catalog_id", "WHERE", "catalog_level_number", ">", "5"], "query_toks_no_value": ["select", "t1", ".", "catalog_name", ",", "t1", ".", "date_of_publication", "from", "catalogs", "as", "t1", "join", "catalog_structure", "as", "t2", "on", "t1", ".", "catalog_id", "=", "t2", ".", "catalog_id", "where", "catalog_level_number", ">", "value"], "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.", "question_toks": ["Find", "the", "names", "and", "publication", "dates", "of", "all", "catalogs", "that", "have", "catalog", "level", "number", "greater", "than", "5", "."], "guid": 5865}}
{"text": "Staff: staff_id, gender, first_name, last_name, email_address, phone_number; Customers: customer_id, customer_type_code, address_line_1, address_line_2, town_city, state, email_address, phone_number; Products: product_id, parent_product_id, product_category_code, date_product_first_available, date_product_discontinued, product_name, product_description, product_price; Complaints: complaint_id, product_id, customer_id, complaint_outcome_code, complaint_status_code, complaint_type_code, date_complaint_raised, date_complaint_closed, staff_id | What are all the different product names, and how many complains has each received?", "sql": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name", "example": {"db_id": "customer_complaints", "query": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name", "query_toks": ["SELECT", "t1.product_name", ",", "count", "(", "*", ")", "FROM", "products", "AS", "t1", "JOIN", "complaints", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "GROUP", "BY", "t1.product_name"], "query_toks_no_value": ["select", "t1", ".", "product_name", ",", "count", "(", "*", ")", "from", "products", "as", "t1", "join", "complaints", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "group", "by", "t1", ".", "product_name"], "question": "What are all the different product names, and how many complains has each received?", "question_toks": ["What", "are", "all", "the", "different", "product", "names", ",", "and", "how", "many", "complains", "has", "each", "received", "?"], "guid": 5866}}
{"text": "Ref_Characteristic_Types: characteristic_type_code, characteristic_type_description; Ref_Colors: color_code, color_description; Ref_Product_Categories: product_category_code, product_category_description, unit_of_measure; Characteristics: characteristic_id, characteristic_type_code, characteristic_data_type, characteristic_name, other_characteristic_details; Products: product_id, color_code, product_category_code, product_name, typical_buying_price, typical_selling_price, product_description, other_product_details; Product_Characteristics: product_id, characteristic_id, product_characteristic_value | Count the number of different characteristic names the product 'cumin' has.", "sql": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "example": {"db_id": "products_gen_characteristics", "query": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"", "query_toks": ["SELECT", "count", "(", "DISTINCT", "t3.characteristic_name", ")", "FROM", "products", "AS", "t1", "JOIN", "product_characteristics", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "CHARACTERISTICS", "AS", "t3", "ON", "t2.characteristic_id", "=", "t3.characteristic_id", "WHERE", "t1.product_name", "=", "``", "sesame", "''"], "query_toks_no_value": ["select", "count", "(", "distinct", "t3", ".", "characteristic_name", ")", "from", "products", "as", "t1", "join", "product_characteristics", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "characteristics", "as", "t3", "on", "t2", ".", "characteristic_id", "=", "t3", ".", "characteristic_id", "where", "t1", ".", "product_name", "=", "value"], "question": "Count the number of different characteristic names the product 'cumin' has.", "question_toks": ["Count", "the", "number", "of", "different", "characteristic", "names", "the", "product", "'cumin", "'", "has", "."], "guid": 5867}}
{"text": "member: Member_ID, Card_Number, Name, Hometown, Level; branch: Branch_ID, Name, Open_year, Address_road, City, membership_amount; membership_register_branch: Member_ID, Branch_ID, Register_Year; purchase: Member_ID, Branch_ID, Year, Total_pounds | What are the different membership levels?", "sql": "SELECT count(DISTINCT LEVEL) FROM member", "example": {"db_id": "shop_membership", "query": "SELECT count(DISTINCT LEVEL) FROM member", "query_toks": ["SELECT", "count", "(", "DISTINCT", "LEVEL", ")", "FROM", "member"], "query_toks_no_value": ["select", "count", "(", "distinct", "level", ")", "from", "member"], "question": "What are the different membership levels?", "question_toks": ["What", "are", "the", "different", "membership", "levels", "?"], "guid": 5868}}
{"text": "artists: id, name; sqlite_sequence: name, seq; albums: id, title, artist_id; employees: id, last_name, first_name, title, reports_to, birth_date, hire_date, address, city, state; customers: id, first_name, last_name, company, address, city, state, country, postal_code, phone; genres: id, name; invoices: id, customer_id, invoice_date, billing_address, billing_city, billing_state, billing_country, billing_postal_code, total; media_types: id, name; tracks: id, name, album_id, media_type_id, genre_id, composer, milliseconds, bytes, unit_price; invoice_lines: id, invoice_id, track_id, unit_price, quantity | List the name of playlist which has number of tracks greater than 100.", "sql": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "example": {"db_id": "store_1", "query": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100;", "query_toks": ["SELECT", "T2.name", "FROM", "playlist_tracks", "AS", "T1", "JOIN", "playlists", "AS", "T2", "ON", "T2.id", "=", "T1.playlist_id", "GROUP", "BY", "T1.playlist_id", "HAVING", "count", "(", "T1.track_id", ")", ">", "100", ";"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "playlist_tracks", "as", "t1", "join", "playlists", "as", "t2", "on", "t2", ".", "id", "=", "t1", ".", "playlist_id", "group", "by", "t1", ".", "playlist_id", "having", "count", "(", "t1", ".", "track_id", ")", ">", "value"], "question": "List the name of playlist which has number of tracks greater than 100.", "question_toks": ["List", "the", "name", "of", "playlist", "which", "has", "number", "of", "tracks", "greater", "than", "100", "."], "guid": 5869}}
{"text": "Addresses: address_id, address_content, city, zip_postcode, state_province_county, country, other_address_details; Products: product_id, product_details; Customers: customer_id, payment_method, customer_name, date_became_customer, other_customer_details; Customer_Addresses: customer_id, address_id, date_address_from, address_type, date_address_to; Customer_Contact_Channels: customer_id, channel_code, active_from_date, active_to_date, contact_number; Customer_Orders: order_id, customer_id, order_status, order_date, order_details; Order_Items: order_id, product_id, order_quantity | What is the payment method of the customer that has purchased the least quantity of items?", "sql": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1", "example": {"db_id": "customers_and_addresses", "query": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1", "query_toks": ["SELECT", "t1.payment_method", "FROM", "customers", "AS", "t1", "JOIN", "customer_orders", "AS", "t2", "ON", "t1.customer_id", "=", "t2.customer_id", "JOIN", "order_items", "AS", "t3", "ON", "t2.order_id", "=", "t3.order_id", "GROUP", "BY", "t1.customer_name", "ORDER", "BY", "sum", "(", "t3.order_quantity", ")", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "payment_method", "from", "customers", "as", "t1", "join", "customer_orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "join", "order_items", "as", "t3", "on", "t2", ".", "order_id", "=", "t3", ".", "order_id", "group", "by", "t1", ".", "customer_name", "order", "by", "sum", "(", "t3", ".", "order_quantity", ")", "limit", "value"], "question": "What is the payment method of the customer that has purchased the least quantity of items?", "question_toks": ["What", "is", "the", "payment", "method", "of", "the", "customer", "that", "has", "purchased", "the", "least", "quantity", "of", "items", "?"], "guid": 5870}}