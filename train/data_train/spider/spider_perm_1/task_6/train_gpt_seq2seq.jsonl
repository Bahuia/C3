{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | List the themes of parties in ascending order of number of hosts.", "sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "example": {"db_id": "party_host", "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "query_toks": ["SELECT", "Party_Theme", "FROM", "party", "ORDER", "BY", "Number_of_hosts", "ASC"], "query_toks_no_value": ["select", "party_theme", "from", "party", "order", "by", "number_of_hosts", "asc"], "question": "List the themes of parties in ascending order of number of hosts.", "question_toks": ["List", "the", "themes", "of", "parties", "in", "ascending", "order", "of", "number", "of", "hosts", "."], "guid": 3583}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | Find the payment method code used by more than 3 parties.", "sql": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*) > 3", "example": {"db_id": "e_government", "query": "SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING count(*)  >  3", "query_toks": ["SELECT", "payment_method_code", "FROM", "parties", "GROUP", "BY", "payment_method_code", "HAVING", "count", "(", "*", ")", ">", "3"], "query_toks_no_value": ["select", "payment_method_code", "from", "parties", "group", "by", "payment_method_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the payment method code used by more than 3 parties.", "question_toks": ["Find", "the", "payment", "method", "code", "used", "by", "more", "than", "3", "parties", "."], "guid": 3584}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | Find the name of all the cities and states.", "sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses", "example": {"db_id": "e_government", "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses", "query_toks": ["SELECT", "town_city", "FROM", "addresses", "UNION", "SELECT", "state_province_county", "FROM", "addresses"], "query_toks_no_value": ["select", "town_city", "from", "addresses", "union", "select", "state_province_county", "from", "addresses"], "question": "Find the name of all the cities and states.", "question_toks": ["Find", "the", "name", "of", "all", "the", "cities", "and", "states", "."], "guid": 3585}}
{"text": "Customer_Master_Index: master_customer_id, cmi_details; CMI_Cross_References: cmi_cross_ref_id, master_customer_id, source_system_code; Council_Tax: council_tax_id, cmi_cross_ref_id; Business_Rates: business_rates_id, cmi_cross_ref_id; Benefits_Overpayments: council_tax_id, cmi_cross_ref_id; Parking_Fines: council_tax_id, cmi_cross_ref_id; Rent_Arrears: council_tax_id, cmi_cross_ref_id; Electoral_Register: electoral_register_id, cmi_cross_ref_id | How many different source system code for the cmi cross references are there?", "sql": "SELECT COUNT(DISTINCT source_system_code) FROM cmi_cross_references", "example": {"db_id": "local_govt_mdm", "query": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references", "query_toks": ["SELECT", "count", "(", "DISTINCT", "source_system_code", ")", "FROM", "CMI_cross_references"], "query_toks_no_value": ["select", "count", "(", "distinct", "source_system_code", ")", "from", "cmi_cross_references"], "question": "How many different source system code for the cmi cross references are there?", "question_toks": ["How", "many", "different", "source", "system", "code", "for", "the", "cmi", "cross", "references", "are", "there", "?"], "guid": 3586}}
{"text": "Services: Service_ID, Service_Type_Code; Participants: Participant_ID, Participant_Type_Code, Participant_Details; Events: Event_ID, Service_ID, Event_Details; Participants_in_Events: Event_ID, Participant_ID | List the type of the services in alphabetical order.", "sql": "SELECT service_type_code FROM services ORDER BY service_type_code", "example": {"db_id": "local_govt_in_alabama", "query": "SELECT service_type_code FROM services ORDER BY service_type_code", "query_toks": ["SELECT", "service_type_code", "FROM", "services", "ORDER", "BY", "service_type_code"], "query_toks_no_value": ["select", "service_type_code", "from", "services", "order", "by", "service_type_code"], "question": "List the type of the services in alphabetical order.", "question_toks": ["List", "the", "type", "of", "the", "services", "in", "alphabetical", "order", "."], "guid": 3587}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show the name of the party that has at least two records.", "sql": "SELECT party FROM party GROUP BY party HAVING COUNT(*) >= 2", "example": {"db_id": "election", "query": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Party", "FROM", "party", "GROUP", "BY", "Party", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "party", "from", "party", "group", "by", "party", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the name of the party that has at least two records.", "question_toks": ["Show", "the", "name", "of", "the", "party", "that", "has", "at", "least", "two", "records", "."], "guid": 3588}}
{"text": "department: Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees; head: head_ID, name, born_state, age; management: department_ID, head_ID, temporary_acting | What are the names of the heads who are born outside the California state?", "sql": "SELECT name FROM head WHERE born_state != 'California'", "example": {"db_id": "department_management", "query": "SELECT name FROM head WHERE born_state != 'California'", "query_toks": ["SELECT", "name", "FROM", "head", "WHERE", "born_state", "!", "=", "'California", "'"], "query_toks_no_value": ["select", "name", "from", "head", "where", "born_state", "!", "=", "value"], "question": "What are the names of the heads who are born outside the California state?", "question_toks": ["What", "are", "the", "names", "of", "the", "heads", "who", "are", "born", "outside", "the", "California", "state", "?"], "guid": 3589}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show the county name and population of all counties.", "sql": "SELECT county_name, population FROM county", "example": {"db_id": "election", "query": "SELECT County_name ,  Population FROM county", "query_toks": ["SELECT", "County_name", ",", "Population", "FROM", "county"], "query_toks_no_value": ["select", "county_name", ",", "population", "from", "county"], "question": "Show the county name and population of all counties.", "question_toks": ["Show", "the", "county", "name", "and", "population", "of", "all", "counties", "."], "guid": 3590}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | How many students are there in total?", "sql": "SELECT COUNT(*) FROM STUDENT", "example": {"db_id": "voter_2", "query": "SELECT count(*) FROM STUDENT", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENT"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student"], "question": "How many students are there in total?", "question_toks": ["How", "many", "students", "are", "there", "in", "total", "?"], "guid": 3591}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Find the distinct ages of students who have secretary votes in the fall election cycle.", "sql": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = \"Fall\"", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"", "query_toks": ["SELECT", "DISTINCT", "T1.Age", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.Secretary_Vote", "WHERE", "T2.Election_Cycle", "=", "``", "Fall", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "age", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "secretary_vote", "where", "t2", ".", "election_cycle", "=", "value"], "question": "Find the distinct ages of students who have secretary votes in the fall election cycle.", "question_toks": ["Find", "the", "distinct", "ages", "of", "students", "who", "have", "secretary", "votes", "in", "the", "fall", "election", "cycle", "."], "guid": 3592}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | What is the name of member in charge of greatest number of events?", "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "party_people", "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.member_name", "FROM", "member", "AS", "T1", "JOIN", "party_events", "AS", "T2", "ON", "T1.member_id", "=", "T2.member_in_charge_id", "GROUP", "BY", "T2.member_in_charge_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "member_name", "from", "member", "as", "t1", "join", "party_events", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_in_charge_id", "group", "by", "t2", ".", "member_in_charge_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of member in charge of greatest number of events?", "question_toks": ["What", "is", "the", "name", "of", "member", "in", "charge", "of", "greatest", "number", "of", "events", "?"], "guid": 3593}}
{"text": "Services: Service_ID, Service_Type_Code; Participants: Participant_ID, Participant_Type_Code, Participant_Details; Events: Event_ID, Service_ID, Event_Details; Participants_in_Events: Event_ID, Participant_ID | What are the ids and details of events that have more than one participants?", "sql": "SELECT T1.event_id, T1.event_details FROM events AS T1 JOIN participants_in_events AS T2 ON T1.event_id = T2.event_id GROUP BY T1.event_id HAVING COUNT(*) > 1", "example": {"db_id": "local_govt_in_alabama", "query": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.event_id", ",", "T1.event_details", "FROM", "EVENTS", "AS", "T1", "JOIN", "Participants_in_Events", "AS", "T2", "ON", "T1.Event_ID", "=", "T2.Event_ID", "GROUP", "BY", "T1.Event_ID", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "event_id", ",", "t1", ".", "event_details", "from", "events", "as", "t1", "join", "participants_in_events", "as", "t2", "on", "t1", ".", "event_id", "=", "t2", ".", "event_id", "group", "by", "t1", ".", "event_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the ids and details of events that have more than one participants?", "question_toks": ["What", "are", "the", "ids", "and", "details", "of", "events", "that", "have", "more", "than", "one", "participants", "?"], "guid": 3594}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Find the parties associated with the delegates from district 1. Who served as governors of the parties?", "sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1", "example": {"db_id": "election", "query": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1", "query_toks": ["SELECT", "T2.Governor", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T1.District", "=", "1"], "query_toks_no_value": ["select", "t2", ".", "governor", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t1", ".", "district", "=", "value"], "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?", "question_toks": ["Find", "the", "parties", "associated", "with", "the", "delegates", "from", "district", "1.", "Who", "served", "as", "governors", "of", "the", "parties", "?"], "guid": 3595}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | What are the themes of parties ordered by the number of hosts in ascending manner?", "sql": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "example": {"db_id": "party_host", "query": "SELECT Party_Theme FROM party ORDER BY Number_of_hosts ASC", "query_toks": ["SELECT", "Party_Theme", "FROM", "party", "ORDER", "BY", "Number_of_hosts", "ASC"], "query_toks_no_value": ["select", "party_theme", "from", "party", "order", "by", "number_of_hosts", "asc"], "question": "What are the themes of parties ordered by the number of hosts in ascending manner?", "question_toks": ["What", "are", "the", "themes", "of", "parties", "ordered", "by", "the", "number", "of", "hosts", "in", "ascending", "manner", "?"], "guid": 3596}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | Which parties have more than 20 hosts? Give me the host names for these parties.", "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20", "example": {"db_id": "party_host", "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "query_toks": ["SELECT", "T2.Name", "FROM", "party_host", "AS", "T1", "JOIN", "HOST", "AS", "T2", "ON", "T1.Host_ID", "=", "T2.Host_ID", "JOIN", "party", "AS", "T3", "ON", "T1.Party_ID", "=", "T3.Party_ID", "WHERE", "T3.Number_of_hosts", ">", "20"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "party_host", "as", "t1", "join", "host", "as", "t2", "on", "t1", ".", "host_id", "=", "t2", ".", "host_id", "join", "party", "as", "t3", "on", "t1", ".", "party_id", "=", "t3", ".", "party_id", "where", "t3", ".", "number_of_hosts", ">", "value"], "question": "Which parties have more than 20 hosts? Give me the host names for these parties.", "question_toks": ["Which", "parties", "have", "more", "than", "20", "hosts", "?", "Give", "me", "the", "host", "names", "for", "these", "parties", "."], "guid": 3597}}
{"text": "department: Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees; head: head_ID, name, born_state, age; management: department_ID, head_ID, temporary_acting | How many heads of the departments are older than 56 ?", "sql": "SELECT COUNT(*) FROM head WHERE age > 56", "example": {"db_id": "department_management", "query": "SELECT count(*) FROM head WHERE age  >  56", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "head", "WHERE", "age", ">", "56"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "head", "where", "age", ">", "value"], "question": "How many heads of the departments are older than 56 ?", "question_toks": ["How", "many", "heads", "of", "the", "departments", "are", "older", "than", "56", "?"], "guid": 3598}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | What are the names of the county that the delegates on \"Appropriations\" committee belong to?", "sql": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = \"Appropriations\"", "example": {"db_id": "election", "query": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T2.Committee  =  \"Appropriations\"", "query_toks": ["SELECT", "T1.County_name", "FROM", "county", "AS", "T1", "JOIN", "election", "AS", "T2", "ON", "T1.County_id", "=", "T2.District", "WHERE", "T2.Committee", "=", "``", "Appropriations", "''"], "query_toks_no_value": ["select", "t1", ".", "county_name", "from", "county", "as", "t1", "join", "election", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "district", "where", "t2", ".", "committee", "=", "value"], "question": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?", "question_toks": ["What", "are", "the", "names", "of", "the", "county", "that", "the", "delegates", "on", "``", "Appropriations", "''", "committee", "belong", "to", "?"], "guid": 3599}}
{"text": "Customers: customer_id, customer_details; Properties: property_id, property_type_code, property_address, other_details; Residents: resident_id, property_id, date_moved_in, date_moved_out, other_details; Organizations: organization_id, parent_organization_id, organization_details; Services: service_id, organization_id, service_type_code, service_details; Residents_Services: resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details; Things: thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details; Customer_Events: Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id; Customer_Event_Notes: Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in; Timed_Status_of_Things: thing_id, Date_and_Date, Status_of_Thing_Code | What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?", "sql": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id = T2.organization_id WHERE T2.organization_details = 'Denesik and Sons Party'", "example": {"db_id": "local_govt_and_lot", "query": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'", "query_toks": ["SELECT", "DISTINCT", "T1.service_type_code", "FROM", "services", "AS", "T1", "JOIN", "organizations", "AS", "T2", "ON", "T1.organization_id", "=", "T2.organization_id", "WHERE", "T2.organization_details", "=", "'Denesik", "and", "Sons", "Party", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "service_type_code", "from", "services", "as", "t1", "join", "organizations", "as", "t2", "on", "t1", ".", "organization_id", "=", "t2", ".", "organization_id", "where", "t2", ".", "organization_details", "=", "value"], "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?", "question_toks": ["What", "is", "the", "distinct", "service", "types", "that", "are", "provided", "by", "the", "organization", "which", "has", "detail", "'Denesik", "and", "Sons", "Party", "'", "?"], "guid": 3600}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | Compute the average number of hosts for parties.", "sql": "SELECT AVG(Number_of_hosts) FROM party", "example": {"db_id": "party_host", "query": "SELECT avg(Number_of_hosts) FROM party", "query_toks": ["SELECT", "avg", "(", "Number_of_hosts", ")", "FROM", "party"], "query_toks_no_value": ["select", "avg", "(", "number_of_hosts", ")", "from", "party"], "question": "Compute the average number of hosts for parties.", "question_toks": ["Compute", "the", "average", "number", "of", "hosts", "for", "parties", "."], "guid": 3601}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | For each advisor, report the total number of students advised by him or her.", "sql": "SELECT Advisor, COUNT(*) FROM Student GROUP BY Advisor", "example": {"db_id": "voter_2", "query": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor", "query_toks": ["SELECT", "Advisor", ",", "count", "(", "*", ")", "FROM", "STUDENT", "GROUP", "BY", "Advisor"], "query_toks_no_value": ["select", "advisor", ",", "count", "(", "*", ")", "from", "student", "group", "by", "advisor"], "question": "For each advisor, report the total number of students advised by him or her.", "question_toks": ["For", "each", "advisor", ",", "report", "the", "total", "number", "of", "students", "advised", "by", "him", "or", "her", "."], "guid": 3602}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Find the average age of female students.", "sql": "SELECT AVG(Age) FROM STUDENT WHERE Sex = 'F'", "example": {"db_id": "voter_2", "query": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"", "query_toks": ["SELECT", "avg", "(", "Age", ")", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "F", "''"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "student", "where", "sex", "=", "value"], "question": "Find the average age of female students.", "question_toks": ["Find", "the", "average", "age", "of", "female", "students", "."], "guid": 3603}}
{"text": "Services: Service_ID, Service_Type_Code; Participants: Participant_ID, Participant_Type_Code, Participant_Details; Events: Event_ID, Service_ID, Event_Details; Participants_in_Events: Event_ID, Participant_ID | List the service id and details for the events.", "sql": "SELECT service_id ,  event_details FROM EVENTS", "example": {"db_id": "local_govt_in_alabama", "query": "SELECT service_id ,  event_details FROM EVENTS", "query_toks": ["SELECT", "service_id", ",", "event_details", "FROM", "EVENTS"], "query_toks_no_value": ["select", "service_id", ",", "event_details", "from", "events"], "question": "List the service id and details for the events.", "question_toks": ["List", "the", "service", "id", "and", "details", "for", "the", "events", "."], "guid": 3604}}
{"text": "election: Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place; representative: Representative_ID, Name, State, Party, Lifespan | What states have at least two representatives?", "sql": "SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2", "example": {"db_id": "election_representative", "query": "SELECT State FROM representative GROUP BY State HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "State", "FROM", "representative", "GROUP", "BY", "State", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "state", "from", "representative", "group", "by", "state", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What states have at least two representatives?", "question_toks": ["What", "states", "have", "at", "least", "two", "representatives", "?"], "guid": 3605}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Who were the governors of the parties associated with delegates from district 1?", "sql": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1", "example": {"db_id": "election", "query": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1", "query_toks": ["SELECT", "T2.Governor", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T1.District", "=", "1"], "query_toks_no_value": ["select", "t2", ".", "governor", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t1", ".", "district", "=", "value"], "question": "Who were the governors of the parties associated with delegates from district 1?", "question_toks": ["Who", "were", "the", "governors", "of", "the", "parties", "associated", "with", "delegates", "from", "district", "1", "?"], "guid": 3606}}
{"text": "Customers: customer_id, customer_details; Properties: property_id, property_type_code, property_address, other_details; Residents: resident_id, property_id, date_moved_in, date_moved_out, other_details; Organizations: organization_id, parent_organization_id, organization_details; Services: service_id, organization_id, service_type_code, service_details; Residents_Services: resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details; Things: thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details; Customer_Events: Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id; Customer_Event_Notes: Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in; Timed_Status_of_Things: thing_id, Date_and_Date, Status_of_Thing_Code | How many services has each resident requested? List the resident id, details, and the count in descending order of the count.", "sql": "SELECT T1.resident_id , T1.other_details , count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id = T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC", "example": {"db_id": "local_govt_and_lot", "query": "SELECT T1.resident_id ,  T1.other_details ,  count(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id  =  T2.resident_id GROUP BY T1.resident_id ORDER BY count(*) DESC", "query_toks": ["SELECT", "T1.resident_id", ",", "T1.other_details", ",", "count", "(", "*", ")", "FROM", "Residents", "AS", "T1", "JOIN", "Residents_Services", "AS", "T2", "ON", "T1.resident_id", "=", "T2.resident_id", "GROUP", "BY", "T1.resident_id", "ORDER", "BY", "count", "(", "*", ")", "DESC"], "query_toks_no_value": ["select", "t1", ".", "resident_id", ",", "t1", ".", "other_details", ",", "count", "(", "*", ")", "from", "residents", "as", "t1", "join", "residents_services", "as", "t2", "on", "t1", ".", "resident_id", "=", "t2", ".", "resident_id", "group", "by", "t1", ".", "resident_id", "order", "by", "count", "(", "*", ")", "desc"], "question": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.", "question_toks": ["How", "many", "services", "has", "each", "resident", "requested", "?", "List", "the", "resident", "id", ",", "details", ",", "and", "the", "count", "in", "descending", "order", "of", "the", "count", "."], "guid": 3607}}
{"text": "Customer_Master_Index: master_customer_id, cmi_details; CMI_Cross_References: cmi_cross_ref_id, master_customer_id, source_system_code; Council_Tax: council_tax_id, cmi_cross_ref_id; Business_Rates: business_rates_id, cmi_cross_ref_id; Benefits_Overpayments: council_tax_id, cmi_cross_ref_id; Parking_Fines: council_tax_id, cmi_cross_ref_id; Rent_Arrears: council_tax_id, cmi_cross_ref_id; Electoral_Register: electoral_register_id, cmi_cross_ref_id | What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.", "sql": "SELECT T1.source_system_code , T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id ORDER BY T2.council_tax_id", "example": {"db_id": "local_govt_mdm", "query": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id", "query_toks": ["SELECT", "T1.source_system_code", ",", "T2.council_tax_id", "FROM", "CMI_Cross_References", "AS", "T1", "JOIN", "Benefits_Overpayments", "AS", "T2", "ON", "T1.cmi_cross_ref_id", "=", "T2.cmi_cross_ref_id", "ORDER", "BY", "T2.council_tax_id"], "query_toks_no_value": ["select", "t1", ".", "source_system_code", ",", "t2", ".", "council_tax_id", "from", "cmi_cross_references", "as", "t1", "join", "benefits_overpayments", "as", "t2", "on", "t1", ".", "cmi_cross_ref_id", "=", "t2", ".", "cmi_cross_ref_id", "order", "by", "t2", ".", "council_tax_id"], "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.", "question_toks": ["What", "is", "the", "tax", "source", "system", "code", "related", "to", "the", "benefits", "and", "overpayments", "?", "List", "the", "code", "and", "the", "benifit", "id", ",", "order", "by", "benifit", "id", "."], "guid": 3608}}
{"text": "Customer_Master_Index: master_customer_id, cmi_details; CMI_Cross_References: cmi_cross_ref_id, master_customer_id, source_system_code; Council_Tax: council_tax_id, cmi_cross_ref_id; Business_Rates: business_rates_id, cmi_cross_ref_id; Benefits_Overpayments: council_tax_id, cmi_cross_ref_id; Parking_Fines: council_tax_id, cmi_cross_ref_id; Rent_Arrears: council_tax_id, cmi_cross_ref_id; Electoral_Register: electoral_register_id, cmi_cross_ref_id | What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?", "sql": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = 'Gottlieb , Becker and Wyman'", "example": {"db_id": "local_govt_mdm", "query": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'", "query_toks": ["SELECT", "DISTINCT", "T2.source_system_code", "FROM", "customer_master_index", "AS", "T1", "JOIN", "cmi_cross_references", "AS", "T2", "ON", "T1.master_customer_id", "=", "T2.master_customer_id", "WHERE", "T1.cmi_details", "=", "'Gottlieb", ",", "Becker", "and", "Wyman", "'"], "query_toks_no_value": ["select", "distinct", "t2", ".", "source_system_code", "from", "customer_master_index", "as", "t1", "join", "cmi_cross_references", "as", "t2", "on", "t1", ".", "master_customer_id", "=", "t2", ".", "master_customer_id", "where", "t1", ".", "cmi_details", "=", "value"], "question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?", "question_toks": ["What", "are", "the", "distinct", "cross", "reference", "source", "system", "codes", "which", "are", "related", "to", "the", "master", "customer", "details", "'Gottlieb", ",", "Becker", "and", "Wyman", "'", "?"], "guid": 3609}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | For each party, return the name of the party and the number of delegates from that party.", "sql": "SELECT T2.Party , COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party", "example": {"db_id": "election", "query": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party", "query_toks": ["SELECT", "T2.Party", ",", "COUNT", "(", "*", ")", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "GROUP", "BY", "T1.Party"], "query_toks_no_value": ["select", "t2", ".", "party", ",", "count", "(", "*", ")", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "group", "by", "t1", ".", "party"], "question": "For each party, return the name of the party and the number of delegates from that party.", "question_toks": ["For", "each", "party", ",", "return", "the", "name", "of", "the", "party", "and", "the", "number", "of", "delegates", "from", "that", "party", "."], "guid": 3610}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Find the distinct majors of students who have treasurer votes.", "sql": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote", "query_toks": ["SELECT", "DISTINCT", "T1.Major", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.Treasurer_Vote"], "query_toks_no_value": ["select", "distinct", "t1", ".", "major", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "treasurer_vote"], "question": "Find the distinct majors of students who have treasurer votes.", "question_toks": ["Find", "the", "distinct", "majors", "of", "students", "who", "have", "treasurer", "votes", "."], "guid": 3611}}
{"text": "Services: Service_ID, Service_Type_Code; Participants: Participant_ID, Participant_Type_Code, Participant_Details; Events: Event_ID, Service_ID, Event_Details; Participants_in_Events: Event_ID, Participant_ID | Which service id and type has the least number of participants?", "sql": "SELECT T3.service_id , T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "local_govt_in_alabama", "query": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T3.service_id", ",", "T4.Service_Type_Code", "FROM", "participants", "AS", "T1", "JOIN", "Participants_in_Events", "AS", "T2", "ON", "T1.Participant_ID", "=", "T2.Participant_ID", "JOIN", "EVENTS", "AS", "T3", "ON", "T2.Event_ID", "=", "T3.Event_ID", "JOIN", "services", "AS", "T4", "ON", "T3.service_id", "=", "T4.service_id", "GROUP", "BY", "T3.service_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "service_id", ",", "t4", ".", "service_type_code", "from", "participants", "as", "t1", "join", "participants_in_events", "as", "t2", "on", "t1", ".", "participant_id", "=", "t2", ".", "participant_id", "join", "events", "as", "t3", "on", "t2", ".", "event_id", "=", "t3", ".", "event_id", "join", "services", "as", "t4", "on", "t3", ".", "service_id", "=", "t4", ".", "service_id", "group", "by", "t3", ".", "service_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Which service id and type has the least number of participants?", "question_toks": ["Which", "service", "id", "and", "type", "has", "the", "least", "number", "of", "participants", "?"], "guid": 3612}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Show all ministers who do not belong to Progress Party.", "sql": "SELECT minister FROM party WHERE party_name != 'Progress Party'", "example": {"db_id": "party_people", "query": "SELECT minister FROM party WHERE party_name != 'Progress Party'", "query_toks": ["SELECT", "minister", "FROM", "party", "WHERE", "party_name", "!", "=", "'Progress", "Party", "'"], "query_toks_no_value": ["select", "minister", "from", "party", "where", "party_name", "!", "=", "value"], "question": "Show all ministers who do not belong to Progress Party.", "question_toks": ["Show", "all", "ministers", "who", "do", "not", "belong", "to", "Progress", "Party", "."], "guid": 3613}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Return the names of parties that have two or more events.", "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING count(*) >= 2", "example": {"db_id": "party_people", "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.party_name", "FROM", "party_events", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.party_id", "=", "T2.party_id", "GROUP", "BY", "T1.party_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "party_name", "from", "party_events", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party_id", "=", "t2", ".", "party_id", "group", "by", "t1", ".", "party_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Return the names of parties that have two or more events.", "question_toks": ["Return", "the", "names", "of", "parties", "that", "have", "two", "or", "more", "events", "."], "guid": 3614}}
{"text": "department: Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees; head: head_ID, name, born_state, age; management: department_ID, head_ID, temporary_acting | Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?", "sql": "SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'", "example": {"db_id": "department_management", "query": "SELECT T1.name ,  T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id WHERE T2.temporary_acting  =  'Yes'", "query_toks": ["SELECT", "T1.name", ",", "T1.num_employees", "FROM", "department", "AS", "T1", "JOIN", "management", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "WHERE", "T2.temporary_acting", "=", "'Yes", "'"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "num_employees", "from", "department", "as", "t1", "join", "management", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "where", "t2", ".", "temporary_acting", "=", "value"], "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?", "question_toks": ["Show", "the", "name", "and", "number", "of", "employees", "for", "the", "departments", "managed", "by", "heads", "whose", "temporary", "acting", "value", "is", "'Yes", "'", "?"], "guid": 3615}}
{"text": "election: Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place; representative: Representative_ID, Name, State, Party, Lifespan | List the dates and vote percents of elections.", "sql": "SELECT Date ,  Vote_Percent FROM election", "example": {"db_id": "election_representative", "query": "SELECT Date ,  Vote_Percent FROM election", "query_toks": ["SELECT", "Date", ",", "Vote_Percent", "FROM", "election"], "query_toks_no_value": ["select", "date", ",", "vote_percent", "from", "election"], "question": "List the dates and vote percents of elections.", "question_toks": ["List", "the", "dates", "and", "vote", "percents", "of", "elections", "."], "guid": 3616}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Count the number of different parties.", "sql": "SELECT COUNT(DISTINCT party_name) FROM party", "example": {"db_id": "party_people", "query": "SELECT count(DISTINCT party_name) FROM party", "query_toks": ["SELECT", "count", "(", "DISTINCT", "party_name", ")", "FROM", "party"], "query_toks_no_value": ["select", "count", "(", "distinct", "party_name", ")", "from", "party"], "question": "Count the number of different parties.", "question_toks": ["Count", "the", "number", "of", "different", "parties", "."], "guid": 3617}}
{"text": "AREA_CODE_STATE: area_code, state; CONTESTANTS: contestant_number, contestant_name; VOTES: vote_id, phone_number, state, contestant_number, created | List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "sql": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss'", "example": {"db_id": "voter_1", "query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'", "query_toks": ["SELECT", "T3.area_code", "FROM", "contestants", "AS", "T1", "JOIN", "votes", "AS", "T2", "ON", "T1.contestant_number", "=", "T2.contestant_number", "JOIN", "area_code_state", "AS", "T3", "ON", "T2.state", "=", "T3.state", "WHERE", "T1.contestant_name", "=", "'Tabatha", "Gehling", "'", "INTERSECT", "SELECT", "T3.area_code", "FROM", "contestants", "AS", "T1", "JOIN", "votes", "AS", "T2", "ON", "T1.contestant_number", "=", "T2.contestant_number", "JOIN", "area_code_state", "AS", "T3", "ON", "T2.state", "=", "T3.state", "WHERE", "T1.contestant_name", "=", "'Kelly", "Clauss", "'"], "query_toks_no_value": ["select", "t3", ".", "area_code", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1", ".", "contestant_number", "=", "t2", ".", "contestant_number", "join", "area_code_state", "as", "t3", "on", "t2", ".", "state", "=", "t3", ".", "state", "where", "t1", ".", "contestant_name", "=", "value", "intersect", "select", "t3", ".", "area_code", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1", ".", "contestant_number", "=", "t2", ".", "contestant_number", "join", "area_code_state", "as", "t3", "on", "t2", ".", "state", "=", "t3", ".", "state", "where", "t1", ".", "contestant_name", "=", "value"], "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.", "question_toks": ["List", "the", "area", "codes", "in", "which", "voters", "voted", "both", "for", "the", "contestant", "'Tabatha", "Gehling", "'", "and", "the", "contestant", "'Kelly", "Clauss", "'", "."], "guid": 3618}}
{"text": "Services: Service_ID, Service_Type_Code; Participants: Participant_ID, Participant_Type_Code, Participant_Details; Events: Event_ID, Service_ID, Event_Details; Participants_in_Events: Event_ID, Participant_ID | What are all the distinct participant ids who attended any events?", "sql": "SELECT count(DISTINCT participant_id) FROM participants_in_Events", "example": {"db_id": "local_govt_in_alabama", "query": "SELECT count(DISTINCT participant_id) FROM participants_in_Events", "query_toks": ["SELECT", "count", "(", "DISTINCT", "participant_id", ")", "FROM", "participants_in_Events"], "query_toks_no_value": ["select", "count", "(", "distinct", "participant_id", ")", "from", "participants_in_events"], "question": "What are all the distinct participant ids who attended any events?", "question_toks": ["What", "are", "all", "the", "distinct", "participant", "ids", "who", "attended", "any", "events", "?"], "guid": 3619}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Count the number of Annual Meeting events that took place in the region of the United Kingdom.", "sql": "SELECT COUNT(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id = t2.region_id JOIN party_events AS t3 ON t2.party_id = t3.party_id WHERE t1.region_name = \"United Kingdom\" AND t3.Event_Name = \"Annual Meeting\"", "example": {"db_id": "party_people", "query": "SELECT count(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id  =  t2.region_id JOIN party_events AS t3 ON t2.party_id  =  t3.party_id WHERE t1.region_name  =  \"United Kingdom\" AND t3.Event_Name  =  \"Annaual Meeting\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "region", "AS", "t1", "JOIN", "party", "AS", "t2", "ON", "t1.region_id", "=", "t2.region_id", "JOIN", "party_events", "AS", "t3", "ON", "t2.party_id", "=", "t3.party_id", "WHERE", "t1.region_name", "=", "``", "United", "Kingdom", "''", "AND", "t3.Event_Name", "=", "``", "Annaual", "Meeting", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "region", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id", "join", "party_events", "as", "t3", "on", "t2", ".", "party_id", "=", "t3", ".", "party_id", "where", "t1", ".", "region_name", "=", "value", "and", "t3", ".", "event_name", "=", "value"], "question": "Count the number of Annual Meeting events that took place in the region of the United Kingdom.", "question_toks": ["Count", "the", "number", "of", "Annual", "Meeting", "events", "that", "took", "place", "in", "the", "region", "of", "the", "United", "Kingdom", "."], "guid": 3620}}
{"text": "Customer_Master_Index: master_customer_id, cmi_details; CMI_Cross_References: cmi_cross_ref_id, master_customer_id, source_system_code; Council_Tax: council_tax_id, cmi_cross_ref_id; Business_Rates: business_rates_id, cmi_cross_ref_id; Benefits_Overpayments: council_tax_id, cmi_cross_ref_id; Parking_Fines: council_tax_id, cmi_cross_ref_id; Rent_Arrears: council_tax_id, cmi_cross_ref_id; Electoral_Register: electoral_register_id, cmi_cross_ref_id | What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?", "sql": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax'", "example": {"db_id": "local_govt_mdm", "query": "SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id WHERE T2.source_system_code  =  'Electoral' OR T2.source_system_code  =  'Tax'", "query_toks": ["SELECT", "T1.electoral_register_id", "FROM", "Electoral_Register", "AS", "T1", "JOIN", "CMI_Cross_References", "AS", "T2", "ON", "T1.cmi_cross_ref_id", "=", "T2.cmi_cross_ref_id", "WHERE", "T2.source_system_code", "=", "'Electoral", "'", "OR", "T2.source_system_code", "=", "'Tax", "'"], "query_toks_no_value": ["select", "t1", ".", "electoral_register_id", "from", "electoral_register", "as", "t1", "join", "cmi_cross_references", "as", "t2", "on", "t1", ".", "cmi_cross_ref_id", "=", "t2", ".", "cmi_cross_ref_id", "where", "t2", ".", "source_system_code", "=", "value", "or", "t2", ".", "source_system_code", "=", "value"], "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?", "question_toks": ["What", "are", "the", "register", "ids", "of", "electoral", "registries", "that", "have", "the", "cross", "reference", "source", "system", "code", "'Electoral", "'", "or", "'Tax", "'", "?"], "guid": 3621}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Find the distinct last names of all the students who have president votes and whose advisor is 8741.", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"8741\"", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"", "query_toks": ["SELECT", "DISTINCT", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "PRESIDENT_Vote", "INTERSECT", "SELECT", "DISTINCT", "LName", "FROM", "STUDENT", "WHERE", "Advisor", "=", "``", "8741", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "president_vote", "intersect", "select", "distinct", "lname", "from", "student", "where", "advisor", "=", "value"], "question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.", "question_toks": ["Find", "the", "distinct", "last", "names", "of", "all", "the", "students", "who", "have", "president", "votes", "and", "whose", "advisor", "is", "8741", "."], "guid": 3622}}
{"text": "AREA_CODE_STATE: area_code, state; CONTESTANTS: contestant_number, contestant_name; VOTES: vote_id, phone_number, state, contestant_number, created | What are the contestant numbers and names of the contestants who had at least two votes?", "sql": "SELECT T1.contestant_number, T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING COUNT(*) >= 2", "example": {"db_id": "voter_1", "query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.contestant_number", ",", "T1.contestant_name", "FROM", "contestants", "AS", "T1", "JOIN", "votes", "AS", "T2", "ON", "T1.contestant_number", "=", "T2.contestant_number", "GROUP", "BY", "T1.contestant_number", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "contestant_number", ",", "t1", ".", "contestant_name", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1", ".", "contestant_number", "=", "t2", ".", "contestant_number", "group", "by", "t1", ".", "contestant_number", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the contestant numbers and names of the contestants who had at least two votes?", "question_toks": ["What", "are", "the", "contestant", "numbers", "and", "names", "of", "the", "contestants", "who", "had", "at", "least", "two", "votes", "?"], "guid": 3623}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | List all the distinct president votes and the vice president votes.", "sql": "SELECT DISTINCT President_Vote, Vice_President_Vote FROM voting_record", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD", "query_toks": ["SELECT", "DISTINCT", "President_Vote", ",", "VICE_President_Vote", "FROM", "VOTING_RECORD"], "query_toks_no_value": ["select", "distinct", "president_vote", ",", "vice_president_vote", "from", "voting_record"], "question": "List all the distinct president votes and the vice president votes.", "question_toks": ["List", "all", "the", "distinct", "president", "votes", "and", "the", "vice", "president", "votes", "."], "guid": 3624}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.", "sql": "SELECT COUNT(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Class_Senator_Vote WHERE T1.city_code = \"NYC\" AND T2.Election_Cycle = \"Spring\"", "example": {"db_id": "voter_2", "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "Class_Senator_Vote", "WHERE", "T1.city_code", "=", "``", "NYC", "''", "AND", "T2.Election_Cycle", "=", "``", "Spring", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "class_senator_vote", "where", "t1", ".", "city_code", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"], "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.", "question_toks": ["Find", "the", "number", "of", "students", "whose", "city", "code", "is", "NYC", "and", "who", "have", "class", "senator", "votes", "in", "the", "spring", "election", "cycle", "."], "guid": 3625}}
{"text": "election: Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place; representative: Representative_ID, Name, State, Party, Lifespan | What are the names of representatives and the dates of elections they participated in.", "sql": "SELECT T2.Name , T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID", "example": {"db_id": "election_representative", "query": "SELECT T2.Name ,  T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID", "query_toks": ["SELECT", "T2.Name", ",", "T1.Date", "FROM", "election", "AS", "T1", "JOIN", "representative", "AS", "T2", "ON", "T1.Representative_ID", "=", "T2.Representative_ID"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "date", "from", "election", "as", "t1", "join", "representative", "as", "t2", "on", "t1", ".", "representative_id", "=", "t2", ".", "representative_id"], "question": "What are the names of representatives and the dates of elections they participated in.", "question_toks": ["What", "are", "the", "names", "of", "representatives", "and", "the", "dates", "of", "elections", "they", "participated", "in", "."], "guid": 3626}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Which event names were used more than twice for party events?", "sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*) > 2", "example": {"db_id": "party_people", "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "query_toks": ["SELECT", "event_name", "FROM", "party_events", "GROUP", "BY", "event_name", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "event_name", "from", "party_events", "group", "by", "event_name", "having", "count", "(", "*", ")", ">", "value"], "question": "Which event names were used more than twice for party events?", "question_toks": ["Which", "event", "names", "were", "used", "more", "than", "twice", "for", "party", "events", "?"], "guid": 3627}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | Show the name and the nationality of the oldest host.", "sql": "SELECT Name, Nationality FROM Host ORDER BY Age DESC LIMIT 1", "example": {"db_id": "party_host", "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Name", ",", "Nationality", "FROM", "HOST", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "nationality", "from", "host", "order", "by", "age", "desc", "limit", "value"], "question": "Show the name and the nationality of the oldest host.", "question_toks": ["Show", "the", "name", "and", "the", "nationality", "of", "the", "oldest", "host", "."], "guid": 3628}}
{"text": "Services: Service_ID, Service_Type_Code; Participants: Participant_ID, Participant_Type_Code, Participant_Details; Events: Event_ID, Service_ID, Event_Details; Participants_in_Events: Event_ID, Participant_ID | How many events did not have any participants?", "sql": "SELECT COUNT(*) FROM events WHERE event_id NOT IN (SELECT event_id FROM participants_in_events)", "example": {"db_id": "local_govt_in_alabama", "query": "SELECT count(*) FROM EVENTS WHERE event_id NOT IN (SELECT event_id FROM Participants_in_Events)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "EVENTS", "WHERE", "event_id", "NOT", "IN", "(", "SELECT", "event_id", "FROM", "Participants_in_Events", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "events", "where", "event_id", "not", "in", "(", "select", "event_id", "from", "participants_in_events", ")"], "question": "How many events did not have any participants?", "question_toks": ["How", "many", "events", "did", "not", "have", "any", "participants", "?"], "guid": 3629}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Return the name of the member who is in charge of the most events.", "sql": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "party_people", "query": "SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.member_name", "FROM", "member", "AS", "T1", "JOIN", "party_events", "AS", "T2", "ON", "T1.member_id", "=", "T2.member_in_charge_id", "GROUP", "BY", "T2.member_in_charge_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "member_name", "from", "member", "as", "t1", "join", "party_events", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_in_charge_id", "group", "by", "t2", ".", "member_in_charge_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the name of the member who is in charge of the most events.", "question_toks": ["Return", "the", "name", "of", "the", "member", "who", "is", "in", "charge", "of", "the", "most", "events", "."], "guid": 3630}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What are the majors of male (sex is M) students?", "sql": "SELECT Major FROM STUDENT WHERE Sex = 'M'", "example": {"db_id": "voter_2", "query": "SELECT Major FROM STUDENT WHERE Sex  =  \"M\"", "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "M", "''"], "query_toks_no_value": ["select", "major", "from", "student", "where", "sex", "=", "value"], "question": "What are the majors of male (sex is M) students?", "question_toks": ["What", "are", "the", "majors", "of", "male", "(", "sex", "is", "M", ")", "students", "?"], "guid": 3631}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | What are the party emails associated with parties that used the party form that is the most common?", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "e_government", "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "t1.party_email", "FROM", "parties", "AS", "t1", "JOIN", "party_forms", "AS", "t2", "ON", "t1.party_id", "=", "t2.party_id", "WHERE", "t2.form_id", "=", "(", "SELECT", "form_id", "FROM", "party_forms", "GROUP", "BY", "form_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t1", ".", "party_email", "from", "parties", "as", "t1", "join", "party_forms", "as", "t2", "on", "t1", ".", "party_id", "=", "t2", ".", "party_id", "where", "t2", ".", "form_id", "=", "(", "select", "form_id", "from", "party_forms", "group", "by", "form_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What are the party emails associated with parties that used the party form that is the most common?", "question_toks": ["What", "are", "the", "party", "emails", "associated", "with", "parties", "that", "used", "the", "party", "form", "that", "is", "the", "most", "common", "?"], "guid": 3632}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | On average how large is the population of the counties?", "sql": "SELECT AVG(population) FROM county", "example": {"db_id": "election", "query": "SELECT avg(Population) FROM county", "query_toks": ["SELECT", "avg", "(", "Population", ")", "FROM", "county"], "query_toks_no_value": ["select", "avg", "(", "population", ")", "from", "county"], "question": "On average how large is the population of the counties?", "question_toks": ["On", "average", "how", "large", "is", "the", "population", "of", "the", "counties", "?"], "guid": 3633}}
{"text": "election: Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place; representative: Representative_ID, Name, State, Party, Lifespan | What is the average number of votes of representatives from party \"Republican\"?", "sql": "SELECT AVG(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = \"Republican\"", "example": {"db_id": "election_representative", "query": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"", "query_toks": ["SELECT", "avg", "(", "T1.Votes", ")", "FROM", "election", "AS", "T1", "JOIN", "representative", "AS", "T2", "ON", "T1.Representative_ID", "=", "T2.Representative_ID", "WHERE", "T2.Party", "=", "``", "Republican", "''"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "votes", ")", "from", "election", "as", "t1", "join", "representative", "as", "t2", "on", "t1", ".", "representative_id", "=", "t2", ".", "representative_id", "where", "t2", ".", "party", "=", "value"], "question": "What is the average number of votes of representatives from party \"Republican\"?", "question_toks": ["What", "is", "the", "average", "number", "of", "votes", "of", "representatives", "from", "party", "``", "Republican", "''", "?"], "guid": 3634}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | What are the 3 counties that have the smallest population? Give me the county names.", "sql": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3", "example": {"db_id": "election", "query": "SELECT County_name FROM county ORDER BY Population ASC LIMIT 3", "query_toks": ["SELECT", "County_name", "FROM", "county", "ORDER", "BY", "Population", "ASC", "LIMIT", "3"], "query_toks_no_value": ["select", "county_name", "from", "county", "order", "by", "population", "asc", "limit", "value"], "question": "What are the 3 counties that have the smallest population? Give me the county names.", "question_toks": ["What", "are", "the", "3", "counties", "that", "have", "the", "smallest", "population", "?", "Give", "me", "the", "county", "names", "."], "guid": 3635}}
{"text": "department: Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees; head: head_ID, name, born_state, age; management: department_ID, head_ID, temporary_acting | List the name, born state and age of the heads of departments ordered by age.", "sql": "SELECT name, born_state, age FROM head ORDER BY age", "example": {"db_id": "department_management", "query": "SELECT name ,  born_state ,  age FROM head ORDER BY age", "query_toks": ["SELECT", "name", ",", "born_state", ",", "age", "FROM", "head", "ORDER", "BY", "age"], "query_toks_no_value": ["select", "name", ",", "born_state", ",", "age", "from", "head", "order", "by", "age"], "question": "List the name, born state and age of the heads of departments ordered by age.", "question_toks": ["List", "the", "name", ",", "born", "state", "and", "age", "of", "the", "heads", "of", "departments", "ordered", "by", "age", "."], "guid": 3636}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Which major has the most students?", "sql": "SELECT Major FROM Student GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "voter_2", "query": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "GROUP", "BY", "major", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "major", "from", "student", "group", "by", "major", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which major has the most students?", "question_toks": ["Which", "major", "has", "the", "most", "students", "?"], "guid": 3637}}
{"text": "department: Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees; head: head_ID, name, born_state, age; management: department_ID, head_ID, temporary_acting | How many departments are led by heads who are not mentioned?", "sql": "SELECT COUNT(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);", "example": {"db_id": "department_management", "query": "SELECT count(*) FROM department WHERE department_id NOT IN (SELECT department_id FROM management);", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "department", "WHERE", "department_id", "NOT", "IN", "(", "SELECT", "department_id", "FROM", "management", ")", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department", "where", "department_id", "not", "in", "(", "select", "department_id", "from", "management", ")"], "question": "How many departments are led by heads who are not mentioned?", "question_toks": ["How", "many", "departments", "are", "led", "by", "heads", "who", "are", "not", "mentioned", "?"], "guid": 3638}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Show member names that are not in the Progress Party.", "sql": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"", "example": {"db_id": "party_people", "query": "SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id WHERE T2.Party_name != \"Progress Party\"", "query_toks": ["SELECT", "T1.member_name", "FROM", "Member", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.party_id", "=", "T2.party_id", "WHERE", "T2.Party_name", "!", "=", "``", "Progress", "Party", "''"], "query_toks_no_value": ["select", "t1", ".", "member_name", "from", "member", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party_id", "=", "t2", ".", "party_id", "where", "t2", ".", "party_name", "!", "=", "value"], "question": "Show member names that are not in the Progress Party.", "question_toks": ["Show", "member", "names", "that", "are", "not", "in", "the", "Progress", "Party", "."], "guid": 3639}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | What is the name of party with most number of members?", "sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "party_people", "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.party_name", "FROM", "Member", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.party_id", "=", "T2.party_id", "GROUP", "BY", "T1.party_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "party_name", "from", "member", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party_id", "=", "t2", ".", "party_id", "group", "by", "t1", ".", "party_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of party with most number of members?", "question_toks": ["What", "is", "the", "name", "of", "party", "with", "most", "number", "of", "members", "?"], "guid": 3640}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Which party has two or more records?", "sql": "SELECT party FROM party GROUP BY party HAVING COUNT(*) >= 2", "example": {"db_id": "election", "query": "SELECT Party FROM party GROUP BY Party HAVING COUNT(*)  >=  2", "query_toks": ["SELECT", "Party", "FROM", "party", "GROUP", "BY", "Party", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "party", "from", "party", "group", "by", "party", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Which party has two or more records?", "question_toks": ["Which", "party", "has", "two", "or", "more", "records", "?"], "guid": 3641}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | Count the number of different payment method codes used by parties.", "sql": "SELECT COUNT(DISTINCT payment_method_code) FROM parties", "example": {"db_id": "e_government", "query": "SELECT count(DISTINCT payment_method_code) FROM parties", "query_toks": ["SELECT", "count", "(", "DISTINCT", "payment_method_code", ")", "FROM", "parties"], "query_toks_no_value": ["select", "count", "(", "distinct", "payment_method_code", ")", "from", "parties"], "question": "Count the number of different payment method codes used by parties.", "question_toks": ["Count", "the", "number", "of", "different", "payment", "method", "codes", "used", "by", "parties", "."], "guid": 3642}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | What are the name and the nationality of the host of the highest age?", "sql": "SELECT Name, Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "example": {"db_id": "party_host", "query": "SELECT Name ,  Nationality FROM HOST ORDER BY Age DESC LIMIT 1", "query_toks": ["SELECT", "Name", ",", "Nationality", "FROM", "HOST", "ORDER", "BY", "Age", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "name", ",", "nationality", "from", "host", "order", "by", "age", "desc", "limit", "value"], "question": "What are the name and the nationality of the host of the highest age?", "question_toks": ["What", "are", "the", "name", "and", "the", "nationality", "of", "the", "host", "of", "the", "highest", "age", "?"], "guid": 3643}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show the people that have been comptroller the most times and the corresponding number of times.", "sql": "SELECT Comptroller , COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "election", "query": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Comptroller", ",", "COUNT", "(", "*", ")", "FROM", "party", "GROUP", "BY", "Comptroller", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "comptroller", ",", "count", "(", "*", ")", "from", "party", "group", "by", "comptroller", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the people that have been comptroller the most times and the corresponding number of times.", "question_toks": ["Show", "the", "people", "that", "have", "been", "comptroller", "the", "most", "times", "and", "the", "corresponding", "number", "of", "times", "."], "guid": 3644}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | What are the maximum and minimum population of the counties?", "sql": "SELECT max(Population) , min(Population) FROM county", "example": {"db_id": "election", "query": "SELECT max(Population) ,  min(Population) FROM county", "query_toks": ["SELECT", "max", "(", "Population", ")", ",", "min", "(", "Population", ")", "FROM", "county"], "query_toks_no_value": ["select", "max", "(", "population", ")", ",", "min", "(", "population", ")", "from", "county"], "question": "What are the maximum and minimum population of the counties?", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "population", "of", "the", "counties", "?"], "guid": 3645}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show the people that have been governor the most times.", "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "election", "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Governor", "FROM", "party", "GROUP", "BY", "Governor", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "governor", "from", "party", "group", "by", "governor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the people that have been governor the most times.", "question_toks": ["Show", "the", "people", "that", "have", "been", "governor", "the", "most", "times", "."], "guid": 3646}}
{"text": "AREA_CODE_STATE: area_code, state; CONTESTANTS: contestant_number, contestant_name; VOTES: vote_id, phone_number, state, contestant_number, created | What are the distinct states and create time of all votes?", "sql": "SELECT DISTINCT state ,  created FROM votes", "example": {"db_id": "voter_1", "query": "SELECT DISTINCT state ,  created FROM votes", "query_toks": ["SELECT", "DISTINCT", "state", ",", "created", "FROM", "votes"], "query_toks_no_value": ["select", "distinct", "state", ",", "created", "from", "votes"], "question": "What are the distinct states and create time of all votes?", "question_toks": ["What", "are", "the", "distinct", "states", "and", "create", "time", "of", "all", "votes", "?"], "guid": 3647}}
{"text": "Customer_Master_Index: master_customer_id, cmi_details; CMI_Cross_References: cmi_cross_ref_id, master_customer_id, source_system_code; Council_Tax: council_tax_id, cmi_cross_ref_id; Business_Rates: business_rates_id, cmi_cross_ref_id; Benefits_Overpayments: council_tax_id, cmi_cross_ref_id; Parking_Fines: council_tax_id, cmi_cross_ref_id; Rent_Arrears: council_tax_id, cmi_cross_ref_id; Electoral_Register: electoral_register_id, cmi_cross_ref_id | How many council taxes are collected for renting arrears ?", "sql": "SELECT COUNT(*) FROM rent_arrears", "example": {"db_id": "local_govt_mdm", "query": "SELECT count(*) FROM rent_arrears", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "rent_arrears"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "rent_arrears"], "question": "How many council taxes are collected for renting arrears ?", "question_toks": ["How", "many", "council", "taxes", "are", "collected", "for", "renting", "arrears", "?"], "guid": 3648}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Which people severed as governor most frequently?", "sql": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "election", "query": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Governor", "FROM", "party", "GROUP", "BY", "Governor", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "governor", "from", "party", "group", "by", "governor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which people severed as governor most frequently?", "question_toks": ["Which", "people", "severed", "as", "governor", "most", "frequently", "?"], "guid": 3649}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | find the event names that have more than 2 records.", "sql": "SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*) > 2", "example": {"db_id": "party_people", "query": "SELECT event_name FROM party_events GROUP BY event_name HAVING count(*)  >  2", "query_toks": ["SELECT", "event_name", "FROM", "party_events", "GROUP", "BY", "event_name", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "event_name", "from", "party_events", "group", "by", "event_name", "having", "count", "(", "*", ")", ">", "value"], "question": "find the event names that have more than 2 records.", "question_toks": ["find", "the", "event", "names", "that", "have", "more", "than", "2", "records", "."], "guid": 3650}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What are the distinct last names of the students who have class president votes?", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE", "query_toks": ["SELECT", "DISTINCT", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.CLASS_President_VOTE"], "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "class_president_vote"], "question": "What are the distinct last names of the students who have class president votes?", "question_toks": ["What", "are", "the", "distinct", "last", "names", "of", "the", "students", "who", "have", "class", "president", "votes", "?"], "guid": 3651}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Which parties did not have any delegates in elections?", "sql": "SELECT party FROM party WHERE party_id NOT IN (SELECT party FROM election)", "example": {"db_id": "election", "query": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)", "query_toks": ["SELECT", "Party", "FROM", "party", "WHERE", "Party_ID", "NOT", "IN", "(", "SELECT", "Party", "FROM", "election", ")"], "query_toks_no_value": ["select", "party", "from", "party", "where", "party_id", "not", "in", "(", "select", "party", "from", "election", ")"], "question": "Which parties did not have any delegates in elections?", "question_toks": ["Which", "parties", "did", "not", "have", "any", "delegates", "in", "elections", "?"], "guid": 3652}}
{"text": "department: Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees; head: head_ID, name, born_state, age; management: department_ID, head_ID, temporary_acting | What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", "sql": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama'", "example": {"db_id": "department_management", "query": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'", "query_toks": ["SELECT", "DISTINCT", "T1.creation", "FROM", "department", "AS", "T1", "JOIN", "management", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "head", "AS", "T3", "ON", "T2.head_id", "=", "T3.head_id", "WHERE", "T3.born_state", "=", "'Alabama", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "creation", "from", "department", "as", "t1", "join", "management", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "head", "as", "t3", "on", "t2", ".", "head_id", "=", "t3", ".", "head_id", "where", "t3", ".", "born_state", "=", "value"], "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?", "question_toks": ["What", "are", "the", "distinct", "creation", "years", "of", "the", "departments", "managed", "by", "a", "secretary", "born", "in", "state", "'Alabama", "'", "?"], "guid": 3653}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Return all the distinct secretary votes made in the fall election cycle.", "sql": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE Election_Cycle = 'Fall'", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"", "query_toks": ["SELECT", "DISTINCT", "Secretary_Vote", "FROM", "VOTING_RECORD", "WHERE", "ELECTION_CYCLE", "=", "``", "Fall", "''"], "query_toks_no_value": ["select", "distinct", "secretary_vote", "from", "voting_record", "where", "election_cycle", "=", "value"], "question": "Return all the distinct secretary votes made in the fall election cycle.", "question_toks": ["Return", "all", "the", "distinct", "secretary", "votes", "made", "in", "the", "fall", "election", "cycle", "."], "guid": 3654}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Return all the committees that have delegates from Democratic party.", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\"", "example": {"db_id": "election", "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"", "query_toks": ["SELECT", "T1.Committee", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T2.Party", "=", "``", "Democratic", "''"], "query_toks_no_value": ["select", "t1", ".", "committee", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t2", ".", "party", "=", "value"], "question": "Return all the committees that have delegates from Democratic party.", "question_toks": ["Return", "all", "the", "committees", "that", "have", "delegates", "from", "Democratic", "party", "."], "guid": 3655}}
{"text": "Customer_Master_Index: master_customer_id, cmi_details; CMI_Cross_References: cmi_cross_ref_id, master_customer_id, source_system_code; Council_Tax: council_tax_id, cmi_cross_ref_id; Business_Rates: business_rates_id, cmi_cross_ref_id; Benefits_Overpayments: council_tax_id, cmi_cross_ref_id; Parking_Fines: council_tax_id, cmi_cross_ref_id; Rent_Arrears: council_tax_id, cmi_cross_ref_id; Electoral_Register: electoral_register_id, cmi_cross_ref_id | what are the details of the cmi masters that have the cross reference code 'Tax'?", "sql": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax'", "example": {"db_id": "local_govt_mdm", "query": "SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T2.source_system_code  =  'Tax'", "query_toks": ["SELECT", "T1.cmi_details", "FROM", "Customer_Master_Index", "AS", "T1", "JOIN", "CMI_Cross_References", "AS", "T2", "ON", "T1.master_customer_id", "=", "T2.master_customer_id", "WHERE", "T2.source_system_code", "=", "'Tax", "'"], "query_toks_no_value": ["select", "t1", ".", "cmi_details", "from", "customer_master_index", "as", "t1", "join", "cmi_cross_references", "as", "t2", "on", "t1", ".", "master_customer_id", "=", "t2", ".", "master_customer_id", "where", "t2", ".", "source_system_code", "=", "value"], "question": "what are the details of the cmi masters that have the cross reference code 'Tax'?", "question_toks": ["what", "are", "the", "details", "of", "the", "cmi", "masters", "that", "have", "the", "cross", "reference", "code", "'Tax", "'", "?"], "guid": 3656}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | Find the emails of parties with the most popular party form.", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "e_government", "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "t1.party_email", "FROM", "parties", "AS", "t1", "JOIN", "party_forms", "AS", "t2", "ON", "t1.party_id", "=", "t2.party_id", "WHERE", "t2.form_id", "=", "(", "SELECT", "form_id", "FROM", "party_forms", "GROUP", "BY", "form_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "t1", ".", "party_email", "from", "parties", "as", "t1", "join", "party_forms", "as", "t2", "on", "t1", ".", "party_id", "=", "t2", ".", "party_id", "where", "t2", ".", "form_id", "=", "(", "select", "form_id", "from", "party_forms", "group", "by", "form_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "Find the emails of parties with the most popular party form.", "question_toks": ["Find", "the", "emails", "of", "parties", "with", "the", "most", "popular", "party", "form", "."], "guid": 3657}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = \"Economic Matters\"", "example": {"db_id": "election", "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"", "query_toks": ["SELECT", "T2.Party", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T1.Committee", "=", "``", "Appropriations", "''", "INTERSECT", "SELECT", "T2.Party", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T1.Committee", "=", "``", "Economic", "Matters", "''"], "query_toks_no_value": ["select", "t2", ".", "party", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t1", ".", "committee", "=", "value", "intersect", "select", "t2", ".", "party", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t1", ".", "committee", "=", "value"], "question": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?", "question_toks": ["Which", "parties", "have", "delegates", "in", "both", "the", "``", "Appropriations", "''", "committee", "and", "the", "``", "Economic", "Matters", "''", "committee", "?"], "guid": 3658}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | Find the name of organizations whose names contain \"Party\".", "sql": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"", "example": {"db_id": "e_government", "query": "SELECT organization_name FROM organizations WHERE organization_name LIKE \"%Party%\"", "query_toks": ["SELECT", "organization_name", "FROM", "organizations", "WHERE", "organization_name", "LIKE", "``", "%", "Party", "%", "''"], "query_toks_no_value": ["select", "organization_name", "from", "organizations", "where", "organization_name", "like", "value"], "question": "Find the name of organizations whose names contain \"Party\".", "question_toks": ["Find", "the", "name", "of", "organizations", "whose", "names", "contain", "``", "Party", "''", "."], "guid": 3659}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Who are the ministers and what parties do they belong to, listed descending by the times they took office?", "sql": "SELECT minister, party_name FROM party ORDER BY took_office DESC", "example": {"db_id": "party_people", "query": "SELECT minister ,  party_name FROM party ORDER BY took_office DESC", "query_toks": ["SELECT", "minister", ",", "party_name", "FROM", "party", "ORDER", "BY", "took_office", "DESC"], "query_toks_no_value": ["select", "minister", ",", "party_name", "from", "party", "order", "by", "took_office", "desc"], "question": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?", "question_toks": ["Who", "are", "the", "ministers", "and", "what", "parties", "do", "they", "belong", "to", ",", "listed", "descending", "by", "the", "times", "they", "took", "office", "?"], "guid": 3660}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What are the majors only less than three students are studying?", "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*) < 3", "example": {"db_id": "voter_2", "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3", "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "GROUP", "BY", "Major", "HAVING", "COUNT", "(", "*", ")", "<", "3"], "query_toks_no_value": ["select", "major", "from", "student", "group", "by", "major", "having", "count", "(", "*", ")", "<", "value"], "question": "What are the majors only less than three students are studying?", "question_toks": ["What", "are", "the", "majors", "only", "less", "than", "three", "students", "are", "studying", "?"], "guid": 3661}}
{"text": "Customer_Master_Index: master_customer_id, cmi_details; CMI_Cross_References: cmi_cross_ref_id, master_customer_id, source_system_code; Council_Tax: council_tax_id, cmi_cross_ref_id; Business_Rates: business_rates_id, cmi_cross_ref_id; Benefits_Overpayments: council_tax_id, cmi_cross_ref_id; Parking_Fines: council_tax_id, cmi_cross_ref_id; Rent_Arrears: council_tax_id, cmi_cross_ref_id; Electoral_Register: electoral_register_id, cmi_cross_ref_id | Which distinct source system code includes the substring 'en'?", "sql": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'", "example": {"db_id": "local_govt_mdm", "query": "SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%'", "query_toks": ["SELECT", "DISTINCT", "source_system_code", "FROM", "cmi_cross_references", "WHERE", "source_system_code", "LIKE", "'", "%", "en", "%", "'"], "query_toks_no_value": ["select", "distinct", "source_system_code", "from", "cmi_cross_references", "where", "source_system_code", "like", "value"], "question": "Which distinct source system code includes the substring 'en'?", "question_toks": ["Which", "distinct", "source", "system", "code", "includes", "the", "substring", "'en", "'", "?"], "guid": 3662}}
{"text": "Services: Service_ID, Service_Type_Code; Participants: Participant_ID, Participant_Type_Code, Participant_Details; Events: Event_ID, Service_ID, Event_Details; Participants_in_Events: Event_ID, Participant_ID | Which services type had both successful and failure event details?", "sql": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Fail'", "example": {"db_id": "local_govt_in_alabama", "query": "SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id  =  T2.service_id WHERE T2.event_details  =  'Fail'", "query_toks": ["SELECT", "T1.service_type_code", "FROM", "services", "AS", "T1", "JOIN", "EVENTS", "AS", "T2", "ON", "T1.service_id", "=", "T2.service_id", "WHERE", "T2.event_details", "=", "'Success", "'", "INTERSECT", "SELECT", "T1.service_type_code", "FROM", "services", "AS", "T1", "JOIN", "EVENTS", "AS", "T2", "ON", "T1.service_id", "=", "T2.service_id", "WHERE", "T2.event_details", "=", "'Fail", "'"], "query_toks_no_value": ["select", "t1", ".", "service_type_code", "from", "services", "as", "t1", "join", "events", "as", "t2", "on", "t1", ".", "service_id", "=", "t2", ".", "service_id", "where", "t2", ".", "event_details", "=", "value", "intersect", "select", "t1", ".", "service_type_code", "from", "services", "as", "t1", "join", "events", "as", "t2", "on", "t1", ".", "service_id", "=", "t2", ".", "service_id", "where", "t2", ".", "event_details", "=", "value"], "question": "Which services type had both successful and failure event details?", "question_toks": ["Which", "services", "type", "had", "both", "successful", "and", "failure", "event", "details", "?"], "guid": 3663}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show the delegate and committee information of elections.", "sql": "SELECT Delegate, Committee FROM election", "example": {"db_id": "election", "query": "SELECT Delegate ,  Committee FROM election", "query_toks": ["SELECT", "Delegate", ",", "Committee", "FROM", "election"], "query_toks_no_value": ["select", "delegate", ",", "committee", "from", "election"], "question": "Show the delegate and committee information of elections.", "question_toks": ["Show", "the", "delegate", "and", "committee", "information", "of", "elections", "."], "guid": 3664}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | List the names of hosts who did not serve as a host of any party in our record.", "sql": "SELECT Name FROM Host WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "example": {"db_id": "party_host", "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "query_toks": ["SELECT", "Name", "FROM", "HOST", "WHERE", "Host_ID", "NOT", "IN", "(", "SELECT", "Host_ID", "FROM", "party_host", ")"], "query_toks_no_value": ["select", "name", "from", "host", "where", "host_id", "not", "in", "(", "select", "host_id", "from", "party_host", ")"], "question": "List the names of hosts who did not serve as a host of any party in our record.", "question_toks": ["List", "the", "names", "of", "hosts", "who", "did", "not", "serve", "as", "a", "host", "of", "any", "party", "in", "our", "record", "."], "guid": 3665}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Which advisors have more than two students?", "sql": "SELECT Advisor FROM Student GROUP BY Advisor HAVING COUNT(*) > 2", "example": {"db_id": "voter_2", "query": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2", "query_toks": ["SELECT", "Advisor", "FROM", "STUDENT", "GROUP", "BY", "Advisor", "HAVING", "COUNT", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "advisor", "from", "student", "group", "by", "advisor", "having", "count", "(", "*", ")", ">", "value"], "question": "Which advisors have more than two students?", "question_toks": ["Which", "advisors", "have", "more", "than", "two", "students", "?"], "guid": 3666}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | What are the distinct districts for elections?", "sql": "SELECT DISTINCT district FROM election", "example": {"db_id": "election", "query": "SELECT DISTINCT District FROM election", "query_toks": ["SELECT", "DISTINCT", "District", "FROM", "election"], "query_toks_no_value": ["select", "distinct", "district", "from", "election"], "question": "What are the distinct districts for elections?", "question_toks": ["What", "are", "the", "distinct", "districts", "for", "elections", "?"], "guid": 3667}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show the delegates and the names of the party they belong to.", "sql": "SELECT T1.Delegate , T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID", "example": {"db_id": "election", "query": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID", "query_toks": ["SELECT", "T1.Delegate", ",", "T2.Party", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID"], "query_toks_no_value": ["select", "t1", ".", "delegate", ",", "t2", ".", "party", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id"], "question": "Show the delegates and the names of the party they belong to.", "question_toks": ["Show", "the", "delegates", "and", "the", "names", "of", "the", "party", "they", "belong", "to", "."], "guid": 3668}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show the name of each county along with the corresponding number of delegates from that county.", "sql": "SELECT T1.County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id", "example": {"db_id": "election", "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id", "query_toks": ["SELECT", "T1.County_name", ",", "COUNT", "(", "*", ")", "FROM", "county", "AS", "T1", "JOIN", "election", "AS", "T2", "ON", "T1.County_id", "=", "T2.District", "GROUP", "BY", "T1.County_id"], "query_toks_no_value": ["select", "t1", ".", "county_name", ",", "count", "(", "*", ")", "from", "county", "as", "t1", "join", "election", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "district", "group", "by", "t1", ".", "county_id"], "question": "Show the name of each county along with the corresponding number of delegates from that county.", "question_toks": ["Show", "the", "name", "of", "each", "county", "along", "with", "the", "corresponding", "number", "of", "delegates", "from", "that", "county", "."], "guid": 3669}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | Which nations have both hosts of age above 45 and hosts of age below 35?", "sql": "SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35", "example": {"db_id": "party_host", "query": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35", "query_toks": ["SELECT", "Nationality", "FROM", "HOST", "WHERE", "Age", ">", "45", "INTERSECT", "SELECT", "Nationality", "FROM", "HOST", "WHERE", "Age", "<", "35"], "query_toks_no_value": ["select", "nationality", "from", "host", "where", "age", ">", "value", "intersect", "select", "nationality", "from", "host", "where", "age", "<", "value"], "question": "Which nations have both hosts of age above 45 and hosts of age below 35?", "question_toks": ["Which", "nations", "have", "both", "hosts", "of", "age", "above", "45", "and", "hosts", "of", "age", "below", "35", "?"], "guid": 3670}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | What is the payment method code and party phone of the party with the email 'enrico09@example.com'?", "sql": "SELECT payment_method_code, party_phone FROM parties WHERE party_email = 'enrico09@example.com'", "example": {"db_id": "e_government", "query": "SELECT payment_method_code ,  party_phone FROM parties WHERE party_email  =  \"enrico09@example.com\"", "query_toks": ["SELECT", "payment_method_code", ",", "party_phone", "FROM", "parties", "WHERE", "party_email", "=", "``", "enrico09", "@", "example.com", "''"], "query_toks_no_value": ["select", "payment_method_code", ",", "party_phone", "from", "parties", "where", "party_email", "=", "value"], "question": "What is the payment method code and party phone of the party with the email 'enrico09@example.com'?", "question_toks": ["What", "is", "the", "payment", "method", "code", "and", "party", "phone", "of", "the", "party", "with", "the", "email", "'enrico09", "@", "example.com", "'", "?"], "guid": 3671}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | In which distinct years was the governor \"Eliot Spitzer\"?", "sql": "SELECT DISTINCT YEAR FROM party WHERE Governor = \"Eliot Spitzer\"", "example": {"db_id": "election", "query": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"", "query_toks": ["SELECT", "DISTINCT", "YEAR", "FROM", "party", "WHERE", "Governor", "=", "``", "Eliot", "Spitzer", "''"], "query_toks_no_value": ["select", "distinct", "year", "from", "party", "where", "governor", "=", "value"], "question": "In which distinct years was the governor \"Eliot Spitzer\"?", "question_toks": ["In", "which", "distinct", "years", "was", "the", "governor", "``", "Eliot", "Spitzer", "''", "?"], "guid": 3672}}
{"text": "election: Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place; representative: Representative_ID, Name, State, Party, Lifespan | List the votes of elections in descending order.", "sql": "SELECT Votes FROM election ORDER BY Votes DESC", "example": {"db_id": "election_representative", "query": "SELECT Votes FROM election ORDER BY Votes DESC", "query_toks": ["SELECT", "Votes", "FROM", "election", "ORDER", "BY", "Votes", "DESC"], "query_toks_no_value": ["select", "votes", "from", "election", "order", "by", "votes", "desc"], "question": "List the votes of elections in descending order.", "question_toks": ["List", "the", "votes", "of", "elections", "in", "descending", "order", "."], "guid": 3673}}
{"text": "Customers: customer_id, customer_details; Properties: property_id, property_type_code, property_address, other_details; Residents: resident_id, property_id, date_moved_in, date_moved_out, other_details; Organizations: organization_id, parent_organization_id, organization_details; Services: service_id, organization_id, service_type_code, service_details; Residents_Services: resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details; Things: thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details; Customer_Events: Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id; Customer_Event_Notes: Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in; Timed_Status_of_Things: thing_id, Date_and_Date, Status_of_Thing_Code | How many different status codes of things are there?", "sql": "SELECT COUNT(DISTINCT status_of_thing_code) FROM timed_status_of_things", "example": {"db_id": "local_govt_and_lot", "query": "SELECT count(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Status_of_Thing_Code", ")", "FROM", "Timed_Status_of_Things"], "query_toks_no_value": ["select", "count", "(", "distinct", "status_of_thing_code", ")", "from", "timed_status_of_things"], "question": "How many different status codes of things are there?", "question_toks": ["How", "many", "different", "status", "codes", "of", "things", "are", "there", "?"], "guid": 3674}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | What are the names of all cities and states?", "sql": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses", "example": {"db_id": "e_government", "query": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses", "query_toks": ["SELECT", "town_city", "FROM", "addresses", "UNION", "SELECT", "state_province_county", "FROM", "addresses"], "query_toks_no_value": ["select", "town_city", "from", "addresses", "union", "select", "state_province_county", "from", "addresses"], "question": "What are the names of all cities and states?", "question_toks": ["What", "are", "the", "names", "of", "all", "cities", "and", "states", "?"], "guid": 3675}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Find the major that is studied by the most female students.", "sql": "SELECT Major FROM STUDENT WHERE Sex = \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "voter_2", "query": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "F", "''", "GROUP", "BY", "major", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "major", "from", "student", "where", "sex", "=", "value", "group", "by", "major", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the major that is studied by the most female students.", "question_toks": ["Find", "the", "major", "that", "is", "studied", "by", "the", "most", "female", "students", "."], "guid": 3676}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Find the last names of students with major 50.", "sql": "SELECT LName FROM STUDENT WHERE Major = 50", "example": {"db_id": "voter_2", "query": "SELECT LName FROM STUDENT WHERE Major  =  50", "query_toks": ["SELECT", "LName", "FROM", "STUDENT", "WHERE", "Major", "=", "50"], "query_toks_no_value": ["select", "lname", "from", "student", "where", "major", "=", "value"], "question": "Find the last names of students with major 50.", "question_toks": ["Find", "the", "last", "names", "of", "students", "with", "major", "50", "."], "guid": 3677}}
{"text": "Customers: customer_id, customer_details; Properties: property_id, property_type_code, property_address, other_details; Residents: resident_id, property_id, date_moved_in, date_moved_out, other_details; Organizations: organization_id, parent_organization_id, organization_details; Services: service_id, organization_id, service_type_code, service_details; Residents_Services: resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details; Things: thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details; Customer_Events: Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id; Customer_Event_Notes: Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in; Timed_Status_of_Things: thing_id, Date_and_Date, Status_of_Thing_Code | When is the last day any resident moved in?", "sql": "SELECT MAX(date_moved_in) FROM Residents", "example": {"db_id": "local_govt_and_lot", "query": "SELECT max(date_moved_in) FROM Residents", "query_toks": ["SELECT", "max", "(", "date_moved_in", ")", "FROM", "Residents"], "query_toks_no_value": ["select", "max", "(", "date_moved_in", ")", "from", "residents"], "question": "When is the last day any resident moved in?", "question_toks": ["When", "is", "the", "last", "day", "any", "resident", "moved", "in", "?"], "guid": 3678}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | What are the names of hosts who did not host any party in our record?", "sql": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "example": {"db_id": "party_host", "query": "SELECT Name FROM HOST WHERE Host_ID NOT IN (SELECT Host_ID FROM party_host)", "query_toks": ["SELECT", "Name", "FROM", "HOST", "WHERE", "Host_ID", "NOT", "IN", "(", "SELECT", "Host_ID", "FROM", "party_host", ")"], "query_toks_no_value": ["select", "name", "from", "host", "where", "host_id", "not", "in", "(", "select", "host_id", "from", "party_host", ")"], "question": "What are the names of hosts who did not host any party in our record?", "question_toks": ["What", "are", "the", "names", "of", "hosts", "who", "did", "not", "host", "any", "party", "in", "our", "record", "?"], "guid": 3679}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Return the minister who left office at the latest time.", "sql": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1", "example": {"db_id": "party_people", "query": "SELECT minister FROM party ORDER BY left_office DESC LIMIT 1", "query_toks": ["SELECT", "minister", "FROM", "party", "ORDER", "BY", "left_office", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "minister", "from", "party", "order", "by", "left_office", "desc", "limit", "value"], "question": "Return the minister who left office at the latest time.", "question_toks": ["Return", "the", "minister", "who", "left", "office", "at", "the", "latest", "time", "."], "guid": 3680}}
{"text": "department: Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees; head: head_ID, name, born_state, age; management: department_ID, head_ID, temporary_acting | Which head's name has the substring 'Ha'? List the id and name.", "sql": "SELECT head_id , name FROM head WHERE name LIKE '%Ha%'", "example": {"db_id": "department_management", "query": "SELECT head_id ,  name FROM head WHERE name LIKE '%Ha%'", "query_toks": ["SELECT", "head_id", ",", "name", "FROM", "head", "WHERE", "name", "LIKE", "'", "%", "Ha", "%", "'"], "query_toks_no_value": ["select", "head_id", ",", "name", "from", "head", "where", "name", "like", "value"], "question": "Which head's name has the substring 'Ha'? List the id and name.", "question_toks": ["Which", "head", "'s", "name", "has", "the", "substring", "'Ha", "'", "?", "List", "the", "id", "and", "name", "."], "guid": 3681}}
{"text": "election: Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place; representative: Representative_ID, Name, State, Party, Lifespan | What are the lifespans of representatives in descending order of vote percent?", "sql": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC", "example": {"db_id": "election_representative", "query": "SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY Vote_Percent DESC", "query_toks": ["SELECT", "T2.Lifespan", "FROM", "election", "AS", "T1", "JOIN", "representative", "AS", "T2", "ON", "T1.Representative_ID", "=", "T2.Representative_ID", "ORDER", "BY", "Vote_Percent", "DESC"], "query_toks_no_value": ["select", "t2", ".", "lifespan", "from", "election", "as", "t1", "join", "representative", "as", "t2", "on", "t1", ".", "representative_id", "=", "t2", ".", "representative_id", "order", "by", "vote_percent", "desc"], "question": "What are the lifespans of representatives in descending order of vote percent?", "question_toks": ["What", "are", "the", "lifespans", "of", "representatives", "in", "descending", "order", "of", "vote", "percent", "?"], "guid": 3682}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | Find the name of the youngest organization.", "sql": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1", "example": {"db_id": "e_government", "query": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1", "query_toks": ["SELECT", "organization_name", "FROM", "organizations", "ORDER", "BY", "date_formed", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "organization_name", "from", "organizations", "order", "by", "date_formed", "desc", "limit", "value"], "question": "Find the name of the youngest organization.", "question_toks": ["Find", "the", "name", "of", "the", "youngest", "organization", "."], "guid": 3683}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Count the total number of counties.", "sql": "SELECT COUNT(*) FROM county", "example": {"db_id": "election", "query": "SELECT count(*) FROM county", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "county"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "county"], "question": "Count the total number of counties.", "question_toks": ["Count", "the", "total", "number", "of", "counties", "."], "guid": 3684}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Which committees have delegates from the Democratic party?", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\"", "example": {"db_id": "election", "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\"", "query_toks": ["SELECT", "T1.Committee", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T2.Party", "=", "``", "Democratic", "''"], "query_toks_no_value": ["select", "t1", ".", "committee", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t2", ".", "party", "=", "value"], "question": "Which committees have delegates from the Democratic party?", "question_toks": ["Which", "committees", "have", "delegates", "from", "the", "Democratic", "party", "?"], "guid": 3685}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | List the major of each male student.", "sql": "SELECT Major FROM STUDENT WHERE Sex = \"M\"", "example": {"db_id": "voter_2", "query": "SELECT Major FROM STUDENT WHERE Sex  =  \"M\"", "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "M", "''"], "query_toks_no_value": ["select", "major", "from", "student", "where", "sex", "=", "value"], "question": "List the major of each male student.", "question_toks": ["List", "the", "major", "of", "each", "male", "student", "."], "guid": 3686}}
{"text": "election: Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place; representative: Representative_ID, Name, State, Party, Lifespan | What are the different parties of representative? Show the party name and the number of representatives in each party.", "sql": "SELECT Party, COUNT(*) FROM representative GROUP BY Party", "example": {"db_id": "election_representative", "query": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party", "query_toks": ["SELECT", "Party", ",", "COUNT", "(", "*", ")", "FROM", "representative", "GROUP", "BY", "Party"], "query_toks_no_value": ["select", "party", ",", "count", "(", "*", ")", "from", "representative", "group", "by", "party"], "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.", "question_toks": ["What", "are", "the", "different", "parties", "of", "representative", "?", "Show", "the", "party", "name", "and", "the", "number", "of", "representatives", "in", "each", "party", "."], "guid": 3687}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | What is the last name of the contact individual from the Labour party organization who was contacted most recently?", "sql": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1", "example": {"db_id": "e_government", "query": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1", "query_toks": ["SELECT", "t3.individual_last_name", "FROM", "organizations", "AS", "t1", "JOIN", "organization_contact_individuals", "AS", "t2", "ON", "t1.organization_id", "=", "t2.organization_id", "JOIN", "individuals", "AS", "t3", "ON", "t2.individual_id", "=", "t3.individual_id", "WHERE", "t1.organization_name", "=", "``", "Labour", "Party", "''", "ORDER", "BY", "t2.date_contact_to", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t3", ".", "individual_last_name", "from", "organizations", "as", "t1", "join", "organization_contact_individuals", "as", "t2", "on", "t1", ".", "organization_id", "=", "t2", ".", "organization_id", "join", "individuals", "as", "t3", "on", "t2", ".", "individual_id", "=", "t3", ".", "individual_id", "where", "t1", ".", "organization_name", "=", "value", "order", "by", "t2", ".", "date_contact_to", "desc", "limit", "value"], "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?", "question_toks": ["What", "is", "the", "last", "name", "of", "the", "contact", "individual", "from", "the", "Labour", "party", "organization", "who", "was", "contacted", "most", "recently", "?"], "guid": 3688}}
{"text": "Customer_Master_Index: master_customer_id, cmi_details; CMI_Cross_References: cmi_cross_ref_id, master_customer_id, source_system_code; Council_Tax: council_tax_id, cmi_cross_ref_id; Business_Rates: business_rates_id, cmi_cross_ref_id; Benefits_Overpayments: council_tax_id, cmi_cross_ref_id; Parking_Fines: council_tax_id, cmi_cross_ref_id; Rent_Arrears: council_tax_id, cmi_cross_ref_id; Electoral_Register: electoral_register_id, cmi_cross_ref_id | What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?", "sql": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id WHERE T3.cmi_details != 'Schmidt , Kertzmann and Lubowitz'", "example": {"db_id": "local_govt_mdm", "query": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'", "query_toks": ["SELECT", "T1.council_tax_id", "FROM", "Rent_Arrears", "AS", "T1", "JOIN", "CMI_Cross_References", "AS", "T2", "ON", "T1.cmi_cross_ref_id", "=", "T2.cmi_cross_ref_id", "JOIN", "Customer_Master_Index", "AS", "T3", "ON", "T3.master_customer_id", "=", "T2.master_customer_id", "WHERE", "T3.cmi_details", "!", "=", "'Schmidt", ",", "Kertzmann", "and", "Lubowitz", "'"], "query_toks_no_value": ["select", "t1", ".", "council_tax_id", "from", "rent_arrears", "as", "t1", "join", "cmi_cross_references", "as", "t2", "on", "t1", ".", "cmi_cross_ref_id", "=", "t2", ".", "cmi_cross_ref_id", "join", "customer_master_index", "as", "t3", "on", "t3", ".", "master_customer_id", "=", "t2", ".", "master_customer_id", "where", "t3", ".", "cmi_details", "!", "=", "value"], "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?", "question_toks": ["What", "are", "the", "renting", "arrears", "tax", "ids", "related", "to", "the", "customer", "master", "index", "whose", "detail", "is", "not", "'Schmidt", ",", "Kertzmann", "and", "Lubowitz", "'", "?"], "guid": 3689}}
{"text": "election: Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place; representative: Representative_ID, Name, State, Party, Lifespan | What are the names of representatives in descending order of votes?", "sql": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC", "example": {"db_id": "election_representative", "query": "SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID ORDER BY votes DESC", "query_toks": ["SELECT", "T2.Name", "FROM", "election", "AS", "T1", "JOIN", "representative", "AS", "T2", "ON", "T1.Representative_ID", "=", "T2.Representative_ID", "ORDER", "BY", "votes", "DESC"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "election", "as", "t1", "join", "representative", "as", "t2", "on", "t1", ".", "representative_id", "=", "t2", ".", "representative_id", "order", "by", "votes", "desc"], "question": "What are the names of representatives in descending order of votes?", "question_toks": ["What", "are", "the", "names", "of", "representatives", "in", "descending", "order", "of", "votes", "?"], "guid": 3690}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Return the name of the party with the most members.", "sql": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "party_people", "query": "SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.party_name", "FROM", "Member", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.party_id", "=", "T2.party_id", "GROUP", "BY", "T1.party_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "party_name", "from", "member", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party_id", "=", "t2", ".", "party_id", "group", "by", "t1", ".", "party_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the name of the party with the most members.", "question_toks": ["Return", "the", "name", "of", "the", "party", "with", "the", "most", "members", "."], "guid": 3691}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Show names of parties that does not have any members.", "sql": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)", "example": {"db_id": "party_people", "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)", "query_toks": ["SELECT", "party_name", "FROM", "party", "WHERE", "party_id", "NOT", "IN", "(", "SELECT", "party_id", "FROM", "Member", ")"], "query_toks_no_value": ["select", "party_name", "from", "party", "where", "party_id", "not", "in", "(", "select", "party_id", "from", "member", ")"], "question": "Show names of parties that does not have any members.", "question_toks": ["Show", "names", "of", "parties", "that", "does", "not", "have", "any", "members", "."], "guid": 3692}}
{"text": "AREA_CODE_STATE: area_code, state; CONTESTANTS: contestant_number, contestant_name; VOTES: vote_id, phone_number, state, contestant_number, created | List the contestant numbers and names, ordered by contestant name descending.", "sql": "SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC", "example": {"db_id": "voter_1", "query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC", "query_toks": ["SELECT", "contestant_number", ",", "contestant_name", "FROM", "contestants", "ORDER", "BY", "contestant_name", "DESC"], "query_toks_no_value": ["select", "contestant_number", ",", "contestant_name", "from", "contestants", "order", "by", "contestant_name", "desc"], "question": "List the contestant numbers and names, ordered by contestant name descending.", "question_toks": ["List", "the", "contestant", "numbers", "and", "names", ",", "ordered", "by", "contestant", "name", "descending", "."], "guid": 3693}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Find the maximum age of all the students.", "sql": "SELECT MAX(Age) FROM STUDENT", "example": {"db_id": "voter_2", "query": "SELECT max(Age) FROM STUDENT", "query_toks": ["SELECT", "max", "(", "Age", ")", "FROM", "STUDENT"], "query_toks_no_value": ["select", "max", "(", "age", ")", "from", "student"], "question": "Find the maximum age of all the students.", "question_toks": ["Find", "the", "maximum", "age", "of", "all", "the", "students", "."], "guid": 3694}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | What are the names of the services that have never been used?", "sql": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id", "example": {"db_id": "e_government", "query": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id", "query_toks": ["SELECT", "service_name", "FROM", "services", "EXCEPT", "SELECT", "t1.service_name", "FROM", "services", "AS", "t1", "JOIN", "party_services", "AS", "t2", "ON", "t1.service_id", "=", "t2.service_id"], "query_toks_no_value": ["select", "service_name", "from", "services", "except", "select", "t1", ".", "service_name", "from", "services", "as", "t1", "join", "party_services", "as", "t2", "on", "t1", ".", "service_id", "=", "t2", ".", "service_id"], "question": "What are the names of the services that have never been used?", "question_toks": ["What", "are", "the", "names", "of", "the", "services", "that", "have", "never", "been", "used", "?"], "guid": 3695}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | What are the names of parties with at least 2 events?", "sql": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING count(*) >= 2", "example": {"db_id": "party_people", "query": "SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id  =  T2.party_id GROUP BY T1.party_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T2.party_name", "FROM", "party_events", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.party_id", "=", "T2.party_id", "GROUP", "BY", "T1.party_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "party_name", "from", "party_events", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party_id", "=", "t2", ".", "party_id", "group", "by", "t1", ".", "party_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of parties with at least 2 events?", "question_toks": ["What", "are", "the", "names", "of", "parties", "with", "at", "least", "2", "events", "?"], "guid": 3696}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What are the distinct last names of the students who have president votes and have 8741 as the advisor?", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"8741\"", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"", "query_toks": ["SELECT", "DISTINCT", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "PRESIDENT_Vote", "INTERSECT", "SELECT", "DISTINCT", "LName", "FROM", "STUDENT", "WHERE", "Advisor", "=", "``", "8741", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "president_vote", "intersect", "select", "distinct", "lname", "from", "student", "where", "advisor", "=", "value"], "question": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?", "question_toks": ["What", "are", "the", "distinct", "last", "names", "of", "the", "students", "who", "have", "president", "votes", "and", "have", "8741", "as", "the", "advisor", "?"], "guid": 3697}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?", "sql": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = \"2192\"", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"", "query_toks": ["SELECT", "DISTINCT", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "PRESIDENT_Vote", "EXCEPT", "SELECT", "DISTINCT", "LName", "FROM", "STUDENT", "WHERE", "Advisor", "=", "``", "2192", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "president_vote", "except", "select", "distinct", "lname", "from", "student", "where", "advisor", "=", "value"], "question": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?", "question_toks": ["What", "are", "the", "distinct", "last", "names", "of", "the", "students", "who", "have", "president", "votes", "but", "do", "not", "have", "2192", "as", "the", "advisor", "?"], "guid": 3698}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Find the delegates who are from counties with population below 100000.", "sql": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000", "example": {"db_id": "election", "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000", "query_toks": ["SELECT", "T2.Delegate", "FROM", "county", "AS", "T1", "JOIN", "election", "AS", "T2", "ON", "T1.County_id", "=", "T2.District", "WHERE", "T1.Population", "<", "100000"], "query_toks_no_value": ["select", "t2", ".", "delegate", "from", "county", "as", "t1", "join", "election", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "district", "where", "t1", ".", "population", "<", "value"], "question": "Find the delegates who are from counties with population below 100000.", "question_toks": ["Find", "the", "delegates", "who", "are", "from", "counties", "with", "population", "below", "100000", "."], "guid": 3699}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Report the distinct advisors who have more than 2 students.", "sql": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2", "example": {"db_id": "voter_2", "query": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2", "query_toks": ["SELECT", "Advisor", "FROM", "STUDENT", "GROUP", "BY", "Advisor", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "advisor", "from", "student", "group", "by", "advisor", "having", "count", "(", "*", ")", ">", "value"], "question": "Report the distinct advisors who have more than 2 students.", "question_toks": ["Report", "the", "distinct", "advisors", "who", "have", "more", "than", "2", "students", "."], "guid": 3700}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | What is the name of organization that has the greatest number of contact individuals?", "sql": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "e_government", "query": "SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id GROUP BY t1.organization_name ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.organization_name", "FROM", "organizations", "AS", "t1", "JOIN", "organization_contact_individuals", "AS", "t2", "ON", "t1.organization_id", "=", "t2.organization_id", "GROUP", "BY", "t1.organization_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "organization_name", "from", "organizations", "as", "t1", "join", "organization_contact_individuals", "as", "t2", "on", "t1", ".", "organization_id", "=", "t2", ".", "organization_id", "group", "by", "t1", ".", "organization_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of organization that has the greatest number of contact individuals?", "question_toks": ["What", "is", "the", "name", "of", "organization", "that", "has", "the", "greatest", "number", "of", "contact", "individuals", "?"], "guid": 3701}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Return the maximum and minimum population among all counties.", "sql": "SELECT max(Population) , min(Population) FROM county", "example": {"db_id": "election", "query": "SELECT max(Population) ,  min(Population) FROM county", "query_toks": ["SELECT", "max", "(", "Population", ")", ",", "min", "(", "Population", ")", "FROM", "county"], "query_toks_no_value": ["select", "max", "(", "population", ")", ",", "min", "(", "population", ")", "from", "county"], "question": "Return the maximum and minimum population among all counties.", "question_toks": ["Return", "the", "maximum", "and", "minimum", "population", "among", "all", "counties", "."], "guid": 3702}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | What are the names of parties that do not have delegates in election?", "sql": "SELECT party FROM party WHERE party_id NOT IN (SELECT party FROM election)", "example": {"db_id": "election", "query": "SELECT Party FROM party WHERE Party_ID NOT IN (SELECT Party FROM election)", "query_toks": ["SELECT", "Party", "FROM", "party", "WHERE", "Party_ID", "NOT", "IN", "(", "SELECT", "Party", "FROM", "election", ")"], "query_toks_no_value": ["select", "party", "from", "party", "where", "party_id", "not", "in", "(", "select", "party", "from", "election", ")"], "question": "What are the names of parties that do not have delegates in election?", "question_toks": ["What", "are", "the", "names", "of", "parties", "that", "do", "not", "have", "delegates", "in", "election", "?"], "guid": 3703}}
{"text": "AREA_CODE_STATE: area_code, state; CONTESTANTS: contestant_number, contestant_name; VOTES: vote_id, phone_number, state, contestant_number, created | Return the names of the contestants whose names contain the substring 'Al' .", "sql": "SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'", "example": {"db_id": "voter_1", "query": "select contestant_name from contestants where contestant_name like \"%al%\"", "query_toks": ["select", "contestant_name", "from", "contestants", "where", "contestant_name", "like", "\"%al%\""], "query_toks_no_value": ["select", "contestant_name", "from", "contestants", "where", "contestant_name", "like", "value"], "question": "Return the names of the contestants whose names contain the substring 'Al' .", "question_toks": ["Return", "the", "names", "of", "the", "contestants", "whose", "names", "contain", "the", "substring", "'Al'", "."], "guid": 3704}}
{"text": "Services: Service_ID, Service_Type_Code; Participants: Participant_ID, Participant_Type_Code, Participant_Details; Events: Event_ID, Service_ID, Event_Details; Participants_in_Events: Event_ID, Participant_ID | What is the most common participant type?", "sql": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "local_govt_in_alabama", "query": "SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "participant_type_code", "FROM", "participants", "GROUP", "BY", "participant_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "participant_type_code", "from", "participants", "group", "by", "participant_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common participant type?", "question_toks": ["What", "is", "the", "most", "common", "participant", "type", "?"], "guid": 3705}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Show the ministers and the time they took and left office, listed by the time they left office.", "sql": "SELECT minister, took_office, left_office FROM party ORDER BY left_office", "example": {"db_id": "party_people", "query": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office", "query_toks": ["SELECT", "minister", ",", "took_office", ",", "left_office", "FROM", "party", "ORDER", "BY", "left_office"], "query_toks_no_value": ["select", "minister", ",", "took_office", ",", "left_office", "from", "party", "order", "by", "left_office"], "question": "Show the ministers and the time they took and left office, listed by the time they left office.", "question_toks": ["Show", "the", "ministers", "and", "the", "time", "they", "took", "and", "left", "office", ",", "listed", "by", "the", "time", "they", "left", "office", "."], "guid": 3706}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | Which parties have hosts of age above 50? Give me the party locations.", "sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Age > 50", "example": {"db_id": "party_host", "query": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50", "query_toks": ["SELECT", "T3.Location", "FROM", "party_host", "AS", "T1", "JOIN", "HOST", "AS", "T2", "ON", "T1.Host_ID", "=", "T2.Host_ID", "JOIN", "party", "AS", "T3", "ON", "T1.Party_ID", "=", "T3.Party_ID", "WHERE", "T2.Age", ">", "50"], "query_toks_no_value": ["select", "t3", ".", "location", "from", "party_host", "as", "t1", "join", "host", "as", "t2", "on", "t1", ".", "host_id", "=", "t2", ".", "host_id", "join", "party", "as", "t3", "on", "t1", ".", "party_id", "=", "t3", ".", "party_id", "where", "t2", ".", "age", ">", "value"], "question": "Which parties have hosts of age above 50? Give me the party locations.", "question_toks": ["Which", "parties", "have", "hosts", "of", "age", "above", "50", "?", "Give", "me", "the", "party", "locations", "."], "guid": 3707}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Count the number of voting records for each election cycle.", "sql": "SELECT Election_Cycle, COUNT(*) FROM voting_record GROUP BY Election_Cycle", "example": {"db_id": "voter_2", "query": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle", "query_toks": ["SELECT", "Election_Cycle", ",", "count", "(", "*", ")", "FROM", "VOTING_RECORD", "GROUP", "BY", "Election_Cycle"], "query_toks_no_value": ["select", "election_cycle", ",", "count", "(", "*", ")", "from", "voting_record", "group", "by", "election_cycle"], "question": "Count the number of voting records for each election cycle.", "question_toks": ["Count", "the", "number", "of", "voting", "records", "for", "each", "election", "cycle", "."], "guid": 3708}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | How many distinct president votes are recorded?", "sql": "SELECT COUNT(DISTINCT President_Vote) FROM voting_record", "example": {"db_id": "voter_2", "query": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD", "query_toks": ["SELECT", "count", "(", "DISTINCT", "President_Vote", ")", "FROM", "VOTING_RECORD"], "query_toks_no_value": ["select", "count", "(", "distinct", "president_vote", ")", "from", "voting_record"], "question": "How many distinct president votes are recorded?", "question_toks": ["How", "many", "distinct", "president", "votes", "are", "recorded", "?"], "guid": 3709}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | How many services are there?", "sql": "SELECT COUNT(*) FROM services", "example": {"db_id": "e_government", "query": "SELECT count(*) FROM services", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "services"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "services"], "question": "How many services are there?", "question_toks": ["How", "many", "services", "are", "there", "?"], "guid": 3710}}
{"text": "Customers: customer_id, customer_details; Properties: property_id, property_type_code, property_address, other_details; Residents: resident_id, property_id, date_moved_in, date_moved_out, other_details; Organizations: organization_id, parent_organization_id, organization_details; Services: service_id, organization_id, service_type_code, service_details; Residents_Services: resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details; Things: thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details; Customer_Events: Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id; Customer_Event_Notes: Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in; Timed_Status_of_Things: thing_id, Date_and_Date, Status_of_Thing_Code | Which organizations are not a parent organization of others? List the organization id.", "sql": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations", "example": {"db_id": "local_govt_and_lot", "query": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations", "query_toks": ["SELECT", "organization_id", "FROM", "organizations", "EXCEPT", "SELECT", "parent_organization_id", "FROM", "organizations"], "query_toks_no_value": ["select", "organization_id", "from", "organizations", "except", "select", "parent_organization_id", "from", "organizations"], "question": "Which organizations are not a parent organization of others? List the organization id.", "question_toks": ["Which", "organizations", "are", "not", "a", "parent", "organization", "of", "others", "?", "List", "the", "organization", "id", "."], "guid": 3711}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Find the distinct Advisor of students who have treasurer votes in the spring election cycle.", "sql": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = \"Spring\"", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"", "query_toks": ["SELECT", "DISTINCT", "T1.Advisor", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.Treasurer_Vote", "WHERE", "T2.Election_Cycle", "=", "``", "Spring", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "advisor", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "treasurer_vote", "where", "t2", ".", "election_cycle", "=", "value"], "question": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.", "question_toks": ["Find", "the", "distinct", "Advisor", "of", "students", "who", "have", "treasurer", "votes", "in", "the", "spring", "election", "cycle", "."], "guid": 3712}}
{"text": "Customers: customer_id, customer_details; Properties: property_id, property_type_code, property_address, other_details; Residents: resident_id, property_id, date_moved_in, date_moved_out, other_details; Organizations: organization_id, parent_organization_id, organization_details; Services: service_id, organization_id, service_type_code, service_details; Residents_Services: resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details; Things: thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details; Customer_Events: Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id; Customer_Event_Notes: Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in; Timed_Status_of_Things: thing_id, Date_and_Date, Status_of_Thing_Code | What are the resident details containing the substring 'Miss'?", "sql": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'", "example": {"db_id": "local_govt_and_lot", "query": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'", "query_toks": ["SELECT", "other_details", "FROM", "Residents", "WHERE", "other_details", "LIKE", "'", "%", "Miss", "%", "'"], "query_toks_no_value": ["select", "other_details", "from", "residents", "where", "other_details", "like", "value"], "question": "What are the resident details containing the substring 'Miss'?", "question_toks": ["What", "are", "the", "resident", "details", "containing", "the", "substring", "'Miss", "'", "?"], "guid": 3713}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show the delegate from district 1 in election.", "sql": "SELECT Delegate FROM election WHERE District = 1", "example": {"db_id": "election", "query": "SELECT Delegate FROM election WHERE District  =  1", "query_toks": ["SELECT", "Delegate", "FROM", "election", "WHERE", "District", "=", "1"], "query_toks_no_value": ["select", "delegate", "from", "election", "where", "district", "=", "value"], "question": "Show the delegate from district 1 in election.", "question_toks": ["Show", "the", "delegate", "from", "district", "1", "in", "election", "."], "guid": 3714}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What are the maximum and minimum age of students with major 600?", "sql": "SELECT max(Age), min(Age) FROM student WHERE Major = 600", "example": {"db_id": "voter_2", "query": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600", "query_toks": ["SELECT", "max", "(", "Age", ")", ",", "min", "(", "Age", ")", "FROM", "STUDENT", "WHERE", "Major", "=", "600"], "query_toks_no_value": ["select", "max", "(", "age", ")", ",", "min", "(", "age", ")", "from", "student", "where", "major", "=", "value"], "question": "What are the maximum and minimum age of students with major 600?", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "age", "of", "students", "with", "major", "600", "?"], "guid": 3715}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show the average population of all counties.", "sql": "SELECT avg(Population) FROM county", "example": {"db_id": "election", "query": "SELECT avg(Population) FROM county", "query_toks": ["SELECT", "avg", "(", "Population", ")", "FROM", "county"], "query_toks_no_value": ["select", "avg", "(", "population", ")", "from", "county"], "question": "Show the average population of all counties.", "question_toks": ["Show", "the", "average", "population", "of", "all", "counties", "."], "guid": 3716}}
{"text": "department: Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees; head: head_ID, name, born_state, age; management: department_ID, head_ID, temporary_acting | List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.", "sql": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security'", "example": {"db_id": "department_management", "query": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'", "query_toks": ["SELECT", "T3.born_state", "FROM", "department", "AS", "T1", "JOIN", "management", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "head", "AS", "T3", "ON", "T2.head_id", "=", "T3.head_id", "WHERE", "T1.name", "=", "'Treasury", "'", "INTERSECT", "SELECT", "T3.born_state", "FROM", "department", "AS", "T1", "JOIN", "management", "AS", "T2", "ON", "T1.department_id", "=", "T2.department_id", "JOIN", "head", "AS", "T3", "ON", "T2.head_id", "=", "T3.head_id", "WHERE", "T1.name", "=", "'Homeland", "Security", "'"], "query_toks_no_value": ["select", "t3", ".", "born_state", "from", "department", "as", "t1", "join", "management", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "head", "as", "t3", "on", "t2", ".", "head_id", "=", "t3", ".", "head_id", "where", "t1", ".", "name", "=", "value", "intersect", "select", "t3", ".", "born_state", "from", "department", "as", "t1", "join", "management", "as", "t2", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "join", "head", "as", "t3", "on", "t2", ".", "head_id", "=", "t3", ".", "head_id", "where", "t1", ".", "name", "=", "value"], "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.", "question_toks": ["List", "the", "states", "where", "both", "the", "secretary", "of", "'Treasury", "'", "department", "and", "the", "secretary", "of", "'Homeland", "Security", "'", "were", "born", "."], "guid": 3717}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Which party has the largest number of delegates?", "sql": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "election", "query": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T2.Party", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "GROUP", "BY", "T1.Party", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "party", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "group", "by", "t1", ".", "party", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which party has the largest number of delegates?", "question_toks": ["Which", "party", "has", "the", "largest", "number", "of", "delegates", "?"], "guid": 3718}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".", "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"", "example": {"db_id": "e_government", "query": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"", "query_toks": ["SELECT", "state_province_county", "FROM", "addresses", "WHERE", "line_1_number_building", "LIKE", "``", "%", "6862", "Kaitlyn", "Knolls", "%", "''"], "query_toks_no_value": ["select", "state_province_county", "from", "addresses", "where", "line_1_number_building", "like", "value"], "question": "Give the state corresponding to the line number building \"6862 Kaitlyn Knolls\".", "question_toks": ["Give", "the", "state", "corresponding", "to", "the", "line", "number", "building", "``", "6862", "Kaitlyn", "Knolls", "''", "."], "guid": 3719}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | What are the different types of forms?", "sql": "SELECT DISTINCT form_type_code FROM forms", "example": {"db_id": "e_government", "query": "SELECT DISTINCT form_type_code FROM forms", "query_toks": ["SELECT", "DISTINCT", "form_type_code", "FROM", "forms"], "query_toks_no_value": ["select", "distinct", "form_type_code", "from", "forms"], "question": "What are the different types of forms?", "question_toks": ["What", "are", "the", "different", "types", "of", "forms", "?"], "guid": 3720}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What are the distinct registration dates and the election cycles?", "sql": "SELECT DISTINCT Registration_Date, Election_Cycle FROM voting_record", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD", "query_toks": ["SELECT", "DISTINCT", "Registration_Date", ",", "Election_Cycle", "FROM", "VOTING_RECORD"], "query_toks_no_value": ["select", "distinct", "registration_date", ",", "election_cycle", "from", "voting_record"], "question": "What are the distinct registration dates and the election cycles?", "question_toks": ["What", "are", "the", "distinct", "registration", "dates", "and", "the", "election", "cycles", "?"], "guid": 3721}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | What are the themes and locations of parties?", "sql": "SELECT Party_Theme, Location FROM party", "example": {"db_id": "party_host", "query": "SELECT Party_Theme ,  LOCATION FROM party", "query_toks": ["SELECT", "Party_Theme", ",", "LOCATION", "FROM", "party"], "query_toks_no_value": ["select", "party_theme", ",", "location", "from", "party"], "question": "What are the themes and locations of parties?", "question_toks": ["What", "are", "the", "themes", "and", "locations", "of", "parties", "?"], "guid": 3722}}
{"text": "AREA_CODE_STATE: area_code, state; CONTESTANTS: contestant_number, contestant_name; VOTES: vote_id, phone_number, state, contestant_number, created | What is last date created of votes from the state 'CA'?", "sql": "SELECT MAX(created) FROM votes WHERE state = 'CA'", "example": {"db_id": "voter_1", "query": "SELECT max(created) FROM votes WHERE state  =  'CA'", "query_toks": ["SELECT", "max", "(", "created", ")", "FROM", "votes", "WHERE", "state", "=", "'CA", "'"], "query_toks_no_value": ["select", "max", "(", "created", ")", "from", "votes", "where", "state", "=", "value"], "question": "What is last date created of votes from the state 'CA'?", "question_toks": ["What", "is", "last", "date", "created", "of", "votes", "from", "the", "state", "'CA", "'", "?"], "guid": 3723}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | How many distinct delegates are from counties with population larger than 50000?", "sql": "SELECT COUNT(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000", "example": {"db_id": "election", "query": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000", "query_toks": ["SELECT", "count", "(", "DISTINCT", "T2.Delegate", ")", "FROM", "county", "AS", "T1", "JOIN", "election", "AS", "T2", "ON", "T1.County_id", "=", "T2.District", "WHERE", "T1.Population", ">", "50000"], "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "delegate", ")", "from", "county", "as", "t1", "join", "election", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "district", "where", "t1", ".", "population", ">", "value"], "question": "How many distinct delegates are from counties with population larger than 50000?", "question_toks": ["How", "many", "distinct", "delegates", "are", "from", "counties", "with", "population", "larger", "than", "50000", "?"], "guid": 3724}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?", "sql": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2", "example": {"db_id": "election", "query": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2", "query_toks": ["SELECT", "T2.Comptroller", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T1.District", "=", "1", "OR", "T1.District", "=", "2"], "query_toks_no_value": ["select", "t2", ".", "comptroller", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t1", ".", "district", "=", "value", "or", "t1", ".", "district", "=", "value"], "question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?", "question_toks": ["Find", "the", "parties", "associated", "with", "the", "delegates", "from", "district", "1", "or", "2.", "Who", "served", "as", "comptrollers", "of", "the", "parties", "?"], "guid": 3725}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What are the first names of all the students aged above 22?", "sql": "SELECT Fname FROM STUDENT WHERE Age > 22", "example": {"db_id": "voter_2", "query": "SELECT Fname FROM STUDENT WHERE Age  >  22", "query_toks": ["SELECT", "Fname", "FROM", "STUDENT", "WHERE", "Age", ">", "22"], "query_toks_no_value": ["select", "fname", "from", "student", "where", "age", ">", "value"], "question": "What are the first names of all the students aged above 22?", "question_toks": ["What", "are", "the", "first", "names", "of", "all", "the", "students", "aged", "above", "22", "?"], "guid": 3726}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Show all the distinct president votes made on 08/30/2015.", "sql": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date = \"08/30/2015\"", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"", "query_toks": ["SELECT", "DISTINCT", "PRESIDENT_Vote", "FROM", "VOTING_RECORD", "WHERE", "Registration_Date", "=", "``", "08/30/2015", "''"], "query_toks_no_value": ["select", "distinct", "president_vote", "from", "voting_record", "where", "registration_date", "=", "value"], "question": "Show all the distinct president votes made on 08/30/2015.", "question_toks": ["Show", "all", "the", "distinct", "president", "votes", "made", "on", "08/30/2015", "."], "guid": 3727}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Find the committees that have delegates both from from the democratic party and the liberal party.", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Liberal\"", "example": {"db_id": "election", "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"", "query_toks": ["SELECT", "T1.Committee", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T2.Party", "=", "``", "Democratic", "''", "INTERSECT", "SELECT", "T1.Committee", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T2.Party", "=", "``", "Liberal", "''"], "query_toks_no_value": ["select", "t1", ".", "committee", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t2", ".", "party", "=", "value", "intersect", "select", "t1", ".", "committee", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t2", ".", "party", "=", "value"], "question": "Find the committees that have delegates both from from the democratic party and the liberal party.", "question_toks": ["Find", "the", "committees", "that", "have", "delegates", "both", "from", "from", "the", "democratic", "party", "and", "the", "liberal", "party", "."], "guid": 3728}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What is the oldest age among the students?", "sql": "SELECT MAX(Age) FROM STUDENT", "example": {"db_id": "voter_2", "query": "SELECT max(Age) FROM STUDENT", "query_toks": ["SELECT", "max", "(", "Age", ")", "FROM", "STUDENT"], "query_toks_no_value": ["select", "max", "(", "age", ")", "from", "student"], "question": "What is the oldest age among the students?", "question_toks": ["What", "is", "the", "oldest", "age", "among", "the", "students", "?"], "guid": 3729}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Report the distinct president vote and the vice president vote.", "sql": "SELECT DISTINCT President_Vote , VICE_President_Vote FROM VOTING_RECORD", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD", "query_toks": ["SELECT", "DISTINCT", "President_Vote", ",", "VICE_President_Vote", "FROM", "VOTING_RECORD"], "query_toks_no_value": ["select", "distinct", "president_vote", ",", "vice_president_vote", "from", "voting_record"], "question": "Report the distinct president vote and the vice president vote.", "question_toks": ["Report", "the", "distinct", "president", "vote", "and", "the", "vice", "president", "vote", "."], "guid": 3730}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Find the number of voting records in total.", "sql": "SELECT COUNT(*) FROM voting_record", "example": {"db_id": "voter_2", "query": "SELECT count(*) FROM VOTING_RECORD", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "VOTING_RECORD"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "voting_record"], "question": "Find the number of voting records in total.", "question_toks": ["Find", "the", "number", "of", "voting", "records", "in", "total", "."], "guid": 3731}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | Which state can address \"6862 Kaitlyn Knolls\" possibly be in?", "sql": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"", "example": {"db_id": "e_government", "query": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"", "query_toks": ["SELECT", "state_province_county", "FROM", "addresses", "WHERE", "line_1_number_building", "LIKE", "``", "%", "6862", "Kaitlyn", "Knolls", "%", "''"], "query_toks_no_value": ["select", "state_province_county", "from", "addresses", "where", "line_1_number_building", "like", "value"], "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?", "question_toks": ["Which", "state", "can", "address", "``", "6862", "Kaitlyn", "Knolls", "''", "possibly", "be", "in", "?"], "guid": 3732}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | List every individual's first name, middle name and last name in alphabetical order by last name.", "sql": "SELECT individual_first_name, individual_middle_name, individual_last_name FROM individuals ORDER BY individual_last_name", "example": {"db_id": "e_government", "query": "SELECT individual_first_name ,  individual_middle_name ,  individual_last_name FROM individuals ORDER BY individual_last_name", "query_toks": ["SELECT", "individual_first_name", ",", "individual_middle_name", ",", "individual_last_name", "FROM", "individuals", "ORDER", "BY", "individual_last_name"], "query_toks_no_value": ["select", "individual_first_name", ",", "individual_middle_name", ",", "individual_last_name", "from", "individuals", "order", "by", "individual_last_name"], "question": "List every individual's first name, middle name and last name in alphabetical order by last name.", "question_toks": ["List", "every", "individual", "'s", "first", "name", ",", "middle", "name", "and", "last", "name", "in", "alphabetical", "order", "by", "last", "name", "."], "guid": 3733}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | What are the names of organizations, ordered by the date they were formed, ascending?", "sql": "SELECT organization_name FROM organizations ORDER BY date_formed ASC", "example": {"db_id": "e_government", "query": "SELECT organization_name FROM organizations ORDER BY date_formed ASC", "query_toks": ["SELECT", "organization_name", "FROM", "organizations", "ORDER", "BY", "date_formed", "ASC"], "query_toks_no_value": ["select", "organization_name", "from", "organizations", "order", "by", "date_formed", "asc"], "question": "What are the names of organizations, ordered by the date they were formed, ascending?", "question_toks": ["What", "are", "the", "names", "of", "organizations", ",", "ordered", "by", "the", "date", "they", "were", "formed", ",", "ascending", "?"], "guid": 3734}}
{"text": "Customers: customer_id, customer_details; Properties: property_id, property_type_code, property_address, other_details; Residents: resident_id, property_id, date_moved_in, date_moved_out, other_details; Organizations: organization_id, parent_organization_id, organization_details; Services: service_id, organization_id, service_type_code, service_details; Residents_Services: resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details; Things: thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details; Customer_Events: Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id; Customer_Event_Notes: Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in; Timed_Status_of_Things: thing_id, Date_and_Date, Status_of_Thing_Code | How many customers did not have any event?", "sql": "SELECT COUNT(*) FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM customer_events)", "example": {"db_id": "local_govt_and_lot", "query": "SELECT count(*) FROM customers WHERE customer_id NOT IN ( SELECT customer_id FROM customer_events )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customers", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "customer_events", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "customer_events", ")"], "question": "How many customers did not have any event?", "question_toks": ["How", "many", "customers", "did", "not", "have", "any", "event", "?"], "guid": 3735}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Find the number of students in total.", "sql": "SELECT COUNT(*) FROM STUDENT", "example": {"db_id": "voter_2", "query": "SELECT count(*) FROM STUDENT", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENT"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student"], "question": "Find the number of students in total.", "question_toks": ["Find", "the", "number", "of", "students", "in", "total", "."], "guid": 3736}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | How many parties are there?", "sql": "SELECT COUNT(*) FROM party", "example": {"db_id": "party_host", "query": "SELECT count(*) FROM party", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "party"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "party"], "question": "How many parties are there?", "question_toks": ["How", "many", "parties", "are", "there", "?"], "guid": 3737}}
{"text": "AREA_CODE_STATE: area_code, state; CONTESTANTS: contestant_number, contestant_name; VOTES: vote_id, phone_number, state, contestant_number, created | What are the number of votes from state 'NY' or 'CA'?", "sql": "SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA'", "example": {"db_id": "voter_1", "query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "votes", "WHERE", "state", "=", "'NY", "'", "OR", "state", "=", "'CA", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "votes", "where", "state", "=", "value", "or", "state", "=", "value"], "question": "What are the number of votes from state 'NY' or 'CA'?", "question_toks": ["What", "are", "the", "number", "of", "votes", "from", "state", "'NY", "'", "or", "'CA", "'", "?"], "guid": 3738}}
{"text": "AREA_CODE_STATE: area_code, state; CONTESTANTS: contestant_number, contestant_name; VOTES: vote_id, phone_number, state, contestant_number, created | What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "sql": "SELECT T2.created , T2.state , T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'", "example": {"db_id": "voter_1", "query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'", "query_toks": ["SELECT", "T2.created", ",", "T2.state", ",", "T2.phone_number", "FROM", "contestants", "AS", "T1", "JOIN", "votes", "AS", "T2", "ON", "T1.contestant_number", "=", "T2.contestant_number", "WHERE", "T1.contestant_name", "=", "'Tabatha", "Gehling", "'"], "query_toks_no_value": ["select", "t2", ".", "created", ",", "t2", ".", "state", ",", "t2", ".", "phone_number", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1", ".", "contestant_number", "=", "t2", ".", "contestant_number", "where", "t1", ".", "contestant_name", "=", "value"], "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "question_toks": ["What", "are", "the", "create", "dates", ",", "states", ",", "and", "phone", "numbers", "of", "the", "votes", "that", "were", "for", "the", "contestant", "named", "'Tabatha", "Gehling", "'", "?"], "guid": 3739}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?", "sql": "SELECT AVG(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T1.city_code = \"NYC\" AND T2.Election_Cycle = \"Spring\"", "example": {"db_id": "voter_2", "query": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"", "query_toks": ["SELECT", "avg", "(", "T1.Age", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "SECRETARY_Vote", "WHERE", "T1.city_code", "=", "``", "NYC", "''", "AND", "T2.Election_Cycle", "=", "``", "Spring", "''"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "age", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "secretary_vote", "where", "t1", ".", "city_code", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"], "question": "What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?", "question_toks": ["What", "is", "the", "average", "age", "of", "students", "who", "have", "city", "code", "``", "NYC", "''", "and", "have", "secretary", "votes", "for", "the", "spring", "election", "cycle", "?"], "guid": 3740}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.", "sql": "SELECT COUNT(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.city_code = \"NYC\" AND T2.Election_Cycle = \"Spring\"", "example": {"db_id": "voter_2", "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "Class_Senator_Vote", "WHERE", "T1.city_code", "=", "``", "NYC", "''", "AND", "T2.Election_Cycle", "=", "``", "Spring", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "class_senator_vote", "where", "t1", ".", "city_code", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"], "question": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.", "question_toks": ["Which", "students", "live", "in", "the", "city", "with", "code", "``", "NYC", "''", "and", "have", "class", "senator", "votes", "in", "the", "spring", "election", "cycle", "?", "Count", "the", "numbers", "."], "guid": 3741}}
{"text": "Customers: customer_id, customer_details; Properties: property_id, property_type_code, property_address, other_details; Residents: resident_id, property_id, date_moved_in, date_moved_out, other_details; Organizations: organization_id, parent_organization_id, organization_details; Services: service_id, organization_id, service_type_code, service_details; Residents_Services: resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details; Things: thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details; Customer_Events: Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id; Customer_Event_Notes: Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in; Timed_Status_of_Things: thing_id, Date_and_Date, Status_of_Thing_Code | List the id and type of each thing, and the details of the organization that owns it.", "sql": "SELECT T1.thing_id , T1.type_of_Thing_Code , T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id", "example": {"db_id": "local_govt_and_lot", "query": "SELECT T1.thing_id ,  T1.type_of_Thing_Code ,  T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id  =  T2.organization_id", "query_toks": ["SELECT", "T1.thing_id", ",", "T1.type_of_Thing_Code", ",", "T2.organization_details", "FROM", "Things", "AS", "T1", "JOIN", "Organizations", "AS", "T2", "ON", "T1.organization_id", "=", "T2.organization_id"], "query_toks_no_value": ["select", "t1", ".", "thing_id", ",", "t1", ".", "type_of_thing_code", ",", "t2", ".", "organization_details", "from", "things", "as", "t1", "join", "organizations", "as", "t2", "on", "t1", ".", "organization_id", "=", "t2", ".", "organization_id"], "question": "List the id and type of each thing, and the details of the organization that owns it.", "question_toks": ["List", "the", "id", "and", "type", "of", "each", "thing", ",", "and", "the", "details", "of", "the", "organization", "that", "owns", "it", "."], "guid": 3742}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Return the code of the city that has the most students.", "sql": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "voter_2", "query": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "city_code", "FROM", "STUDENT", "GROUP", "BY", "city_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "city_code", "from", "student", "group", "by", "city_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the code of the city that has the most students.", "question_toks": ["Return", "the", "code", "of", "the", "city", "that", "has", "the", "most", "students", "."], "guid": 3743}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Report the distinct registration date and the election cycle.", "sql": "SELECT DISTINCT Registration_Date, Election_Cycle FROM VOTING_RECORD", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD", "query_toks": ["SELECT", "DISTINCT", "Registration_Date", ",", "Election_Cycle", "FROM", "VOTING_RECORD"], "query_toks_no_value": ["select", "distinct", "registration_date", ",", "election_cycle", "from", "voting_record"], "question": "Report the distinct registration date and the election cycle.", "question_toks": ["Report", "the", "distinct", "registration", "date", "and", "the", "election", "cycle", "."], "guid": 3744}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.", "sql": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.Sex = \"F\" AND T2.Election_Cycle = \"Spring\"", "example": {"db_id": "voter_2", "query": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"", "query_toks": ["SELECT", "avg", "(", "T1.Age", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "SECRETARY_Vote", "WHERE", "T1.Sex", "=", "``", "F", "''", "AND", "T2.Election_Cycle", "=", "``", "Spring", "''"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "age", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "secretary_vote", "where", "t1", ".", "sex", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"], "question": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.", "question_toks": ["Find", "the", "average", "age", "of", "female", "(", "sex", "is", "F", ")", "students", "who", "have", "secretary", "votes", "in", "the", "spring", "election", "cycle", "."], "guid": 3745}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Which committees have delegates from both democratic party and liberal party?", "sql": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Liberal\"", "example": {"db_id": "election", "query": "SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Democratic\" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T2.Party  =  \"Liberal\"", "query_toks": ["SELECT", "T1.Committee", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T2.Party", "=", "``", "Democratic", "''", "INTERSECT", "SELECT", "T1.Committee", "FROM", "election", "AS", "T1", "JOIN", "party", "AS", "T2", "ON", "T1.Party", "=", "T2.Party_ID", "WHERE", "T2.Party", "=", "``", "Liberal", "''"], "query_toks_no_value": ["select", "t1", ".", "committee", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t2", ".", "party", "=", "value", "intersect", "select", "t1", ".", "committee", "from", "election", "as", "t1", "join", "party", "as", "t2", "on", "t1", ".", "party", "=", "t2", ".", "party_id", "where", "t2", ".", "party", "=", "value"], "question": "Which committees have delegates from both democratic party and liberal party?", "question_toks": ["Which", "committees", "have", "delegates", "from", "both", "democratic", "party", "and", "liberal", "party", "?"], "guid": 3746}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show all the distinct districts for elections.", "sql": "SELECT DISTINCT district FROM election", "example": {"db_id": "election", "query": "SELECT DISTINCT District FROM election", "query_toks": ["SELECT", "DISTINCT", "District", "FROM", "election"], "query_toks_no_value": ["select", "distinct", "district", "from", "election"], "question": "Show all the distinct districts for elections.", "question_toks": ["Show", "all", "the", "distinct", "districts", "for", "elections", "."], "guid": 3747}}
{"text": "Customers: customer_id, customer_details; Properties: property_id, property_type_code, property_address, other_details; Residents: resident_id, property_id, date_moved_in, date_moved_out, other_details; Organizations: organization_id, parent_organization_id, organization_details; Services: service_id, organization_id, service_type_code, service_details; Residents_Services: resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details; Things: thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details; Customer_Events: Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id; Customer_Event_Notes: Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in; Timed_Status_of_Things: thing_id, Date_and_Date, Status_of_Thing_Code | How many residents does each property have? List property id and resident count.", "sql": "SELECT T1.property_id , count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id", "example": {"db_id": "local_govt_and_lot", "query": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id", "query_toks": ["SELECT", "T1.property_id", ",", "count", "(", "*", ")", "FROM", "properties", "AS", "T1", "JOIN", "residents", "AS", "T2", "ON", "T1.property_id", "=", "T2.property_id", "GROUP", "BY", "T1.property_id"], "query_toks_no_value": ["select", "t1", ".", "property_id", ",", "count", "(", "*", ")", "from", "properties", "as", "t1", "join", "residents", "as", "t2", "on", "t1", ".", "property_id", "=", "t2", ".", "property_id", "group", "by", "t1", ".", "property_id"], "question": "How many residents does each property have? List property id and resident count.", "question_toks": ["How", "many", "residents", "does", "each", "property", "have", "?", "List", "property", "id", "and", "resident", "count", "."], "guid": 3748}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | Show the themes of parties and the names of the party hosts.", "sql": "SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID", "example": {"db_id": "party_host", "query": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID", "query_toks": ["SELECT", "T3.Party_Theme", ",", "T2.Name", "FROM", "party_host", "AS", "T1", "JOIN", "HOST", "AS", "T2", "ON", "T1.Host_ID", "=", "T2.Host_ID", "JOIN", "party", "AS", "T3", "ON", "T1.Party_ID", "=", "T3.Party_ID"], "query_toks_no_value": ["select", "t3", ".", "party_theme", ",", "t2", ".", "name", "from", "party_host", "as", "t1", "join", "host", "as", "t2", "on", "t1", ".", "host_id", "=", "t2", ".", "host_id", "join", "party", "as", "t3", "on", "t1", ".", "party_id", "=", "t3", ".", "party_id"], "question": "Show the themes of parties and the names of the party hosts.", "question_toks": ["Show", "the", "themes", "of", "parties", "and", "the", "names", "of", "the", "party", "hosts", "."], "guid": 3749}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Report all majors that have less than 3 students.", "sql": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*) < 3", "example": {"db_id": "voter_2", "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3", "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "GROUP", "BY", "Major", "HAVING", "COUNT", "(", "*", ")", "<", "3"], "query_toks_no_value": ["select", "major", "from", "student", "group", "by", "major", "having", "count", "(", "*", ")", "<", "value"], "question": "Report all majors that have less than 3 students.", "question_toks": ["Report", "all", "majors", "that", "have", "less", "than", "3", "students", "."], "guid": 3750}}
{"text": "AREA_CODE_STATE: area_code, state; CONTESTANTS: contestant_number, contestant_name; VOTES: vote_id, phone_number, state, contestant_number, created | List the vote ids, phone numbers and states of all votes.", "sql": "SELECT vote_id, phone_number, state FROM votes", "example": {"db_id": "voter_1", "query": "SELECT vote_id ,  phone_number ,  state FROM votes", "query_toks": ["SELECT", "vote_id", ",", "phone_number", ",", "state", "FROM", "votes"], "query_toks_no_value": ["select", "vote_id", ",", "phone_number", ",", "state", "from", "votes"], "question": "List the vote ids, phone numbers and states of all votes.", "question_toks": ["List", "the", "vote", "ids", ",", "phone", "numbers", "and", "states", "of", "all", "votes", "."], "guid": 3751}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What is the most common major among female (sex is F) students?", "sql": "SELECT Major FROM student WHERE Sex = 'F' GROUP BY Major ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "voter_2", "query": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "F", "''", "GROUP", "BY", "major", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "major", "from", "student", "where", "sex", "=", "value", "group", "by", "major", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common major among female (sex is F) students?", "question_toks": ["What", "is", "the", "most", "common", "major", "among", "female", "(", "sex", "is", "F", ")", "students", "?"], "guid": 3752}}
{"text": "AREA_CODE_STATE: area_code, state; CONTESTANTS: contestant_number, contestant_name; VOTES: vote_id, phone_number, state, contestant_number, created | What are the maximum and minimum values of area codes?", "sql": "SELECT MAX(area_code), MIN(area_code) FROM area_code_state", "example": {"db_id": "voter_1", "query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state", "query_toks": ["SELECT", "max", "(", "area_code", ")", ",", "min", "(", "area_code", ")", "FROM", "area_code_state"], "query_toks_no_value": ["select", "max", "(", "area_code", ")", ",", "min", "(", "area_code", ")", "from", "area_code_state"], "question": "What are the maximum and minimum values of area codes?", "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "values", "of", "area", "codes", "?"], "guid": 3753}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?", "sql": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"", "query_toks": ["SELECT", "DISTINCT", "T1.Fname", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.VICE_PRESIDENT_Vote", "EXCEPT", "SELECT", "DISTINCT", "Fname", "FROM", "STUDENT", "WHERE", "city_code", "=", "``", "PIT", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "vice_president_vote", "except", "select", "distinct", "fname", "from", "student", "where", "city_code", "=", "value"], "question": "What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?", "question_toks": ["What", "are", "the", "distinct", "first", "names", "of", "the", "students", "who", "have", "vice", "president", "votes", "and", "reside", "in", "a", "city", "whose", "city", "code", "is", "not", "PIT", "?"], "guid": 3754}}
{"text": "Services: Service_ID, Service_Type_Code; Participants: Participant_ID, Participant_Type_Code, Participant_Details; Events: Event_ID, Service_ID, Event_Details; Participants_in_Events: Event_ID, Participant_ID | How many events have each participants attended? List the participant id, type and the number.", "sql": "SELECT T1.Participant_ID , T1.Participant_Type_Code , count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_ID", "example": {"db_id": "local_govt_in_alabama", "query": "SELECT T1.Participant_ID ,  T1.Participant_Type_Code ,  count(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID GROUP BY T1.Participant_ID", "query_toks": ["SELECT", "T1.Participant_ID", ",", "T1.Participant_Type_Code", ",", "count", "(", "*", ")", "FROM", "Participants", "AS", "T1", "JOIN", "Participants_in_Events", "AS", "T2", "ON", "T1.Participant_ID", "=", "T2.Participant_ID", "GROUP", "BY", "T1.Participant_ID"], "query_toks_no_value": ["select", "t1", ".", "participant_id", ",", "t1", ".", "participant_type_code", ",", "count", "(", "*", ")", "from", "participants", "as", "t1", "join", "participants_in_events", "as", "t2", "on", "t1", ".", "participant_id", "=", "t2", ".", "participant_id", "group", "by", "t1", ".", "participant_id"], "question": "How many events have each participants attended? List the participant id, type and the number.", "question_toks": ["How", "many", "events", "have", "each", "participants", "attended", "?", "List", "the", "participant", "id", ",", "type", "and", "the", "number", "."], "guid": 3755}}
{"text": "department: Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees; head: head_ID, name, born_state, age; management: department_ID, head_ID, temporary_acting | What are the distinct ages of the heads who are acting?", "sql": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes'", "example": {"db_id": "department_management", "query": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'", "query_toks": ["SELECT", "DISTINCT", "T1.age", "FROM", "management", "AS", "T2", "JOIN", "head", "AS", "T1", "ON", "T1.head_id", "=", "T2.head_id", "WHERE", "T2.temporary_acting", "=", "'Yes", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "age", "from", "management", "as", "t2", "join", "head", "as", "t1", "on", "t1", ".", "head_id", "=", "t2", ".", "head_id", "where", "t2", ".", "temporary_acting", "=", "value"], "question": "What are the distinct ages of the heads who are acting?", "question_toks": ["What", "are", "the", "distinct", "ages", "of", "the", "heads", "who", "are", "acting", "?"], "guid": 3756}}
{"text": "AREA_CODE_STATE: area_code, state; CONTESTANTS: contestant_number, contestant_name; VOTES: vote_id, phone_number, state, contestant_number, created | What is the area code in which the most voters voted?", "sql": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "voter_1", "query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.area_code", "FROM", "area_code_state", "AS", "T1", "JOIN", "votes", "AS", "T2", "ON", "T1.state", "=", "T2.state", "GROUP", "BY", "T1.area_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "area_code", "from", "area_code_state", "as", "t1", "join", "votes", "as", "t2", "on", "t1", ".", "state", "=", "t2", ".", "state", "group", "by", "t1", ".", "area_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the area code in which the most voters voted?", "question_toks": ["What", "is", "the", "area", "code", "in", "which", "the", "most", "voters", "voted", "?"], "guid": 3757}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Show all member names who are not in charge of any event.", "sql": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id", "example": {"db_id": "party_people", "query": "SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id  =  T2.member_in_charge_id", "query_toks": ["SELECT", "member_name", "FROM", "member", "EXCEPT", "SELECT", "T1.member_name", "FROM", "member", "AS", "T1", "JOIN", "party_events", "AS", "T2", "ON", "T1.member_id", "=", "T2.member_in_charge_id"], "query_toks_no_value": ["select", "member_name", "from", "member", "except", "select", "t1", ".", "member_name", "from", "member", "as", "t1", "join", "party_events", "as", "t2", "on", "t1", ".", "member_id", "=", "t2", ".", "member_in_charge_id"], "question": "Show all member names who are not in charge of any event.", "question_toks": ["Show", "all", "member", "names", "who", "are", "not", "in", "charge", "of", "any", "event", "."], "guid": 3758}}
{"text": "Services: Service_ID, Service_Type_Code; Participants: Participant_ID, Participant_Type_Code, Participant_Details; Events: Event_ID, Service_ID, Event_Details; Participants_in_Events: Event_ID, Participant_ID | what are the event details of the services that have the type code 'Marriage'?", "sql": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage'", "example": {"db_id": "local_govt_in_alabama", "query": "SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID  =  T2.Service_ID WHERE T2.Service_Type_Code  =  'Marriage'", "query_toks": ["SELECT", "T1.event_details", "FROM", "EVENTS", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Service_ID", "=", "T2.Service_ID", "WHERE", "T2.Service_Type_Code", "=", "'Marriage", "'"], "query_toks_no_value": ["select", "t1", ".", "event_details", "from", "events", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_id", "=", "t2", ".", "service_id", "where", "t2", ".", "service_type_code", "=", "value"], "question": "what are the event details of the services that have the type code 'Marriage'?", "question_toks": ["what", "are", "the", "event", "details", "of", "the", "services", "that", "have", "the", "type", "code", "'Marriage", "'", "?"], "guid": 3759}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?", "sql": "SELECT minister, took_office, left_office FROM party ORDER BY left_office", "example": {"db_id": "party_people", "query": "SELECT minister ,  took_office ,  left_office FROM party ORDER BY left_office", "query_toks": ["SELECT", "minister", ",", "took_office", ",", "left_office", "FROM", "party", "ORDER", "BY", "left_office"], "query_toks_no_value": ["select", "minister", ",", "took_office", ",", "left_office", "from", "party", "order", "by", "left_office"], "question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?", "question_toks": ["Who", "are", "the", "ministers", ",", "when", "did", "they", "take", "office", ",", "and", "when", "did", "they", "leave", "office", ",", "ordered", "by", "when", "they", "left", "office", "?"], "guid": 3760}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | Count the number of male students who had class senator votes in the fall election cycle.", "sql": "SELECT COUNT(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Class_Senator_Vote WHERE T1.Sex = \"M\" AND T2.Election_Cycle = \"Fall\"", "example": {"db_id": "voter_2", "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "Class_Senator_Vote", "WHERE", "T1.Sex", "=", "``", "M", "''", "AND", "T2.Election_Cycle", "=", "``", "Fall", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "class_senator_vote", "where", "t1", ".", "sex", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"], "question": "Count the number of male students who had class senator votes in the fall election cycle.", "question_toks": ["Count", "the", "number", "of", "male", "students", "who", "had", "class", "senator", "votes", "in", "the", "fall", "election", "cycle", "."], "guid": 3761}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | What are the last names of individuals who have been contact individuals for an organization?", "sql": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id", "example": {"db_id": "e_government", "query": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id", "query_toks": ["SELECT", "DISTINCT", "t1.individual_last_name", "FROM", "individuals", "AS", "t1", "JOIN", "organization_contact_individuals", "AS", "t2", "ON", "t1.individual_id", "=", "t2.individual_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "individual_last_name", "from", "individuals", "as", "t1", "join", "organization_contact_individuals", "as", "t2", "on", "t1", ".", "individual_id", "=", "t2", ".", "individual_id"], "question": "What are the last names of individuals who have been contact individuals for an organization?", "question_toks": ["What", "are", "the", "last", "names", "of", "individuals", "who", "have", "been", "contact", "individuals", "for", "an", "organization", "?"], "guid": 3762}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show the delegates and the names of county they belong to.", "sql": "SELECT T2.Delegate , T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District", "example": {"db_id": "election", "query": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District", "query_toks": ["SELECT", "T2.Delegate", ",", "T1.County_name", "FROM", "county", "AS", "T1", "JOIN", "election", "AS", "T2", "ON", "T1.County_id", "=", "T2.District"], "query_toks_no_value": ["select", "t2", ".", "delegate", ",", "t1", ".", "county_name", "from", "county", "as", "t1", "join", "election", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "district"], "question": "Show the delegates and the names of county they belong to.", "question_toks": ["Show", "the", "delegates", "and", "the", "names", "of", "county", "they", "belong", "to", "."], "guid": 3763}}
{"text": "Customers: customer_id, customer_details; Properties: property_id, property_type_code, property_address, other_details; Residents: resident_id, property_id, date_moved_in, date_moved_out, other_details; Organizations: organization_id, parent_organization_id, organization_details; Services: service_id, organization_id, service_type_code, service_details; Residents_Services: resident_id, service_id, date_moved_in, property_id, date_requested, date_provided, other_details; Things: thing_id, organization_id, Type_of_Thing_Code, service_type_code, service_details; Customer_Events: Customer_Event_ID, customer_id, date_moved_in, property_id, resident_id, thing_id; Customer_Event_Notes: Customer_Event_Note_ID, Customer_Event_ID, service_type_code, resident_id, property_id, date_moved_in; Timed_Status_of_Things: thing_id, Date_and_Date, Status_of_Thing_Code | Which events have the number of notes between one and three? List the event id and the property id.", "sql": "SELECT T1.Customer_Event_ID, T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3", "example": {"db_id": "local_govt_and_lot", "query": "SELECT T1.Customer_Event_ID  ,  T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID  =  T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING count(*) BETWEEN 1 AND 3", "query_toks": ["SELECT", "T1.Customer_Event_ID", ",", "T1.property_id", "FROM", "Customer_Events", "AS", "T1", "JOIN", "Customer_Event_Notes", "AS", "T2", "ON", "T1.Customer_Event_ID", "=", "T2.Customer_Event_ID", "GROUP", "BY", "T1.customer_event_id", "HAVING", "count", "(", "*", ")", "BETWEEN", "1", "AND", "3"], "query_toks_no_value": ["select", "t1", ".", "customer_event_id", ",", "t1", ".", "property_id", "from", "customer_events", "as", "t1", "join", "customer_event_notes", "as", "t2", "on", "t1", ".", "customer_event_id", "=", "t2", ".", "customer_event_id", "group", "by", "t1", ".", "customer_event_id", "having", "count", "(", "*", ")", "between", "value", "and", "value"], "question": "Which events have the number of notes between one and three? List the event id and the property id.", "question_toks": ["Which", "events", "have", "the", "number", "of", "notes", "between", "one", "and", "three", "?", "List", "the", "event", "id", "and", "the", "property", "id", "."], "guid": 3764}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show the zip code of the county with name \"Howard\".", "sql": "SELECT Zip_code FROM county WHERE County_name = \"Howard\"", "example": {"db_id": "election", "query": "SELECT Zip_code FROM county WHERE County_name  =  \"Howard\"", "query_toks": ["SELECT", "Zip_code", "FROM", "county", "WHERE", "County_name", "=", "``", "Howard", "''"], "query_toks_no_value": ["select", "zip_code", "from", "county", "where", "county_name", "=", "value"], "question": "Show the zip code of the county with name \"Howard\".", "question_toks": ["Show", "the", "zip", "code", "of", "the", "county", "with", "name", "``", "Howard", "''", "."], "guid": 3765}}
{"text": "department: Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees; head: head_ID, name, born_state, age; management: department_ID, head_ID, temporary_acting | Which department has more than 1 head at a time? List the id, name and the number of heads.", "sql": "SELECT T1.department_id , T1.name , count(*) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING count(*) > 1", "example": {"db_id": "department_management", "query": "SELECT T1.department_id ,  T1.name ,  count(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.department_id", ",", "T1.name", ",", "count", "(", "*", ")", "FROM", "management", "AS", "T2", "JOIN", "department", "AS", "T1", "ON", "T1.department_id", "=", "T2.department_id", "GROUP", "BY", "T1.department_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "department_id", ",", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "management", "as", "t2", "join", "department", "as", "t1", "on", "t1", ".", "department_id", "=", "t2", ".", "department_id", "group", "by", "t1", ".", "department_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.", "question_toks": ["Which", "department", "has", "more", "than", "1", "head", "at", "a", "time", "?", "List", "the", "id", ",", "name", "and", "the", "number", "of", "heads", "."], "guid": 3766}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | What are the names of parties that have no members?", "sql": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM member)", "example": {"db_id": "party_people", "query": "SELECT party_name FROM party WHERE party_id NOT IN (SELECT party_id FROM Member)", "query_toks": ["SELECT", "party_name", "FROM", "party", "WHERE", "party_id", "NOT", "IN", "(", "SELECT", "party_id", "FROM", "Member", ")"], "query_toks_no_value": ["select", "party_name", "from", "party", "where", "party_id", "not", "in", "(", "select", "party_id", "from", "member", ")"], "question": "What are the names of parties that have no members?", "question_toks": ["What", "are", "the", "names", "of", "parties", "that", "have", "no", "members", "?"], "guid": 3767}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | Return the party email that has used party services the greatest number of times.", "sql": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "e_government", "query": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.party_email", "FROM", "parties", "AS", "t1", "JOIN", "party_services", "AS", "t2", "ON", "t1.party_id", "=", "t2.customer_id", "GROUP", "BY", "t1.party_email", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "party_email", "from", "parties", "as", "t1", "join", "party_services", "as", "t2", "on", "t1", ".", "party_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "party_email", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the party email that has used party services the greatest number of times.", "question_toks": ["Return", "the", "party", "email", "that", "has", "used", "party", "services", "the", "greatest", "number", "of", "times", "."], "guid": 3768}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | Show the host names for parties with number of hosts greater than 20.", "sql": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20", "example": {"db_id": "party_host", "query": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20", "query_toks": ["SELECT", "T2.Name", "FROM", "party_host", "AS", "T1", "JOIN", "HOST", "AS", "T2", "ON", "T1.Host_ID", "=", "T2.Host_ID", "JOIN", "party", "AS", "T3", "ON", "T1.Party_ID", "=", "T3.Party_ID", "WHERE", "T3.Number_of_hosts", ">", "20"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "party_host", "as", "t1", "join", "host", "as", "t2", "on", "t1", ".", "host_id", "=", "t2", ".", "host_id", "join", "party", "as", "t3", "on", "t1", ".", "party_id", "=", "t3", ".", "party_id", "where", "t3", ".", "number_of_hosts", ">", "value"], "question": "Show the host names for parties with number of hosts greater than 20.", "question_toks": ["Show", "the", "host", "names", "for", "parties", "with", "number", "of", "hosts", "greater", "than", "20", "."], "guid": 3769}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | What is the average number of hosts for parties?", "sql": "SELECT AVG(Number_of_hosts) FROM party", "example": {"db_id": "party_host", "query": "SELECT avg(Number_of_hosts) FROM party", "query_toks": ["SELECT", "avg", "(", "Number_of_hosts", ")", "FROM", "party"], "query_toks_no_value": ["select", "avg", "(", "number_of_hosts", ")", "from", "party"], "question": "What is the average number of hosts for parties?", "question_toks": ["What", "is", "the", "average", "number", "of", "hosts", "for", "parties", "?"], "guid": 3770}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | For each party, return its theme and the name of its host.", "sql": "SELECT T3.Party_Theme , T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID", "example": {"db_id": "party_host", "query": "SELECT T3.Party_Theme ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID", "query_toks": ["SELECT", "T3.Party_Theme", ",", "T2.Name", "FROM", "party_host", "AS", "T1", "JOIN", "HOST", "AS", "T2", "ON", "T1.Host_ID", "=", "T2.Host_ID", "JOIN", "party", "AS", "T3", "ON", "T1.Party_ID", "=", "T3.Party_ID"], "query_toks_no_value": ["select", "t3", ".", "party_theme", ",", "t2", ".", "name", "from", "party_host", "as", "t1", "join", "host", "as", "t2", "on", "t1", ".", "host_id", "=", "t2", ".", "host_id", "join", "party", "as", "t3", "on", "t1", ".", "party_id", "=", "t3", ".", "party_id"], "question": "For each party, return its theme and the name of its host.", "question_toks": ["For", "each", "party", ",", "return", "its", "theme", "and", "the", "name", "of", "its", "host", "."], "guid": 3771}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Which county has the largest population? Give me the name of the county.", "sql": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1", "example": {"db_id": "election", "query": "SELECT County_name FROM county ORDER BY Population DESC LIMIT 1", "query_toks": ["SELECT", "County_name", "FROM", "county", "ORDER", "BY", "Population", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "county_name", "from", "county", "order", "by", "population", "desc", "limit", "value"], "question": "Which county has the largest population? Give me the name of the county.", "question_toks": ["Which", "county", "has", "the", "largest", "population", "?", "Give", "me", "the", "name", "of", "the", "county", "."], "guid": 3772}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Show all the information about election.", "sql": "SELECT * FROM election", "example": {"db_id": "election", "query": "SELECT * FROM election", "query_toks": ["SELECT", "*", "FROM", "election"], "query_toks_no_value": ["select", "*", "from", "election"], "question": "Show all the information about election.", "question_toks": ["Show", "all", "the", "information", "about", "election", "."], "guid": 3773}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Show the member names which are in both the party with id 3 and the party with id 1.", "sql": "SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1", "example": {"db_id": "party_people", "query": "SELECT member_name FROM member WHERE party_id  =  3 INTERSECT SELECT member_name FROM member WHERE party_id  =  1", "query_toks": ["SELECT", "member_name", "FROM", "member", "WHERE", "party_id", "=", "3", "INTERSECT", "SELECT", "member_name", "FROM", "member", "WHERE", "party_id", "=", "1"], "query_toks_no_value": ["select", "member_name", "from", "member", "where", "party_id", "=", "value", "intersect", "select", "member_name", "from", "member", "where", "party_id", "=", "value"], "question": "Show the member names which are in both the party with id 3 and the party with id 1.", "question_toks": ["Show", "the", "member", "names", "which", "are", "in", "both", "the", "party", "with", "id", "3", "and", "the", "party", "with", "id", "1", "."], "guid": 3774}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | Find the distinct years when the governor was named \"Eliot Spitzer\".", "sql": "SELECT DISTINCT YEAR FROM party WHERE Governor = \"Eliot Spitzer\"", "example": {"db_id": "election", "query": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"", "query_toks": ["SELECT", "DISTINCT", "YEAR", "FROM", "party", "WHERE", "Governor", "=", "``", "Eliot", "Spitzer", "''"], "query_toks_no_value": ["select", "distinct", "year", "from", "party", "where", "governor", "=", "value"], "question": "Find the distinct years when the governor was named \"Eliot Spitzer\".", "question_toks": ["Find", "the", "distinct", "years", "when", "the", "governor", "was", "named", "``", "Eliot", "Spitzer", "''", "."], "guid": 3775}}
{"text": "election: Election_ID, Representative_ID, Date, Votes, Vote_Percent, Seats, Place; representative: Representative_ID, Name, State, Party, Lifespan | How many distinct parties are there for representatives?", "sql": "SELECT COUNT(DISTINCT party) FROM representative", "example": {"db_id": "election_representative", "query": "SELECT count(DISTINCT Party) FROM representative", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Party", ")", "FROM", "representative"], "query_toks_no_value": ["select", "count", "(", "distinct", "party", ")", "from", "representative"], "question": "How many distinct parties are there for representatives?", "question_toks": ["How", "many", "distinct", "parties", "are", "there", "for", "representatives", "?"], "guid": 3776}}
{"text": "department: Department_ID, Name, Creation, Ranking, Budget_in_Billions, Num_Employees; head: head_ID, name, born_state, age; management: department_ID, head_ID, temporary_acting | List the creation year, name and budget of each department.", "sql": "SELECT creation, name, budget_in_billions FROM department", "example": {"db_id": "department_management", "query": "SELECT creation ,  name ,  budget_in_billions FROM department", "query_toks": ["SELECT", "creation", ",", "name", ",", "budget_in_billions", "FROM", "department"], "query_toks_no_value": ["select", "creation", ",", "name", ",", "budget_in_billions", "from", "department"], "question": "List the creation year, name and budget of each department.", "question_toks": ["List", "the", "creation", "year", ",", "name", "and", "budget", "of", "each", "department", "."], "guid": 3777}}
{"text": "region: Region_ID, Region_name, Date, Label, Format, Catalogue; party: Party_ID, Minister, Took_office, Left_office, Region_ID, Party_name; member: Member_ID, Member_Name, Party_ID, In_office; party_events: Event_ID, Event_Name, Party_ID, Member_in_charge_ID | Show all party names and their region names.", "sql": "SELECT T1.party_name, T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id", "example": {"db_id": "party_people", "query": "SELECT T1.party_name ,  T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id", "query_toks": ["SELECT", "T1.party_name", ",", "T2.region_name", "FROM", "party", "AS", "T1", "JOIN", "region", "AS", "T2", "ON", "T1.region_id", "=", "T2.region_id"], "query_toks_no_value": ["select", "t1", ".", "party_name", ",", "t2", ".", "region_name", "from", "party", "as", "t1", "join", "region", "as", "t2", "on", "t1", ".", "region_id", "=", "t2", ".", "region_id"], "question": "Show all party names and their region names.", "question_toks": ["Show", "all", "party", "names", "and", "their", "region", "names", "."], "guid": 3778}}
{"text": "county: County_Id, County_name, Population, Zip_code; party: Party_ID, Year, Party, Governor, Lieutenant_Governor, Comptroller, Attorney_General, US_Senate; election: Election_ID, Counties_Represented, District, Delegate, Party, First_Elected, Committee | For each county, find the name of the county and the number of delegates from that county.", "sql": "SELECT T1.County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id", "example": {"db_id": "election", "query": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id", "query_toks": ["SELECT", "T1.County_name", ",", "COUNT", "(", "*", ")", "FROM", "county", "AS", "T1", "JOIN", "election", "AS", "T2", "ON", "T1.County_id", "=", "T2.District", "GROUP", "BY", "T1.County_id"], "query_toks_no_value": ["select", "t1", ".", "county_name", ",", "count", "(", "*", ")", "from", "county", "as", "t1", "join", "election", "as", "t2", "on", "t1", ".", "county_id", "=", "t2", ".", "district", "group", "by", "t1", ".", "county_id"], "question": "For each county, find the name of the county and the number of delegates from that county.", "question_toks": ["For", "each", "county", ",", "find", "the", "name", "of", "the", "county", "and", "the", "number", "of", "delegates", "from", "that", "county", "."], "guid": 3779}}
{"text": "party: Party_ID, Party_Theme, Location, First_year, Last_year, Number_of_hosts; host: Host_ID, Name, Nationality, Age; party_host: Party_ID, Host_ID, Is_Main_in_Charge | Show the locations of parties with hosts older than 50.", "sql": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Age > 50", "example": {"db_id": "party_host", "query": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50", "query_toks": ["SELECT", "T3.Location", "FROM", "party_host", "AS", "T1", "JOIN", "HOST", "AS", "T2", "ON", "T1.Host_ID", "=", "T2.Host_ID", "JOIN", "party", "AS", "T3", "ON", "T1.Party_ID", "=", "T3.Party_ID", "WHERE", "T2.Age", ">", "50"], "query_toks_no_value": ["select", "t3", ".", "location", "from", "party_host", "as", "t1", "join", "host", "as", "t2", "on", "t1", ".", "host_id", "=", "t2", ".", "host_id", "join", "party", "as", "t3", "on", "t1", ".", "party_id", "=", "t3", ".", "party_id", "where", "t2", ".", "age", ">", "value"], "question": "Show the locations of parties with hosts older than 50.", "question_toks": ["Show", "the", "locations", "of", "parties", "with", "hosts", "older", "than", "50", "."], "guid": 3780}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Voting_record: StuID, Registration_Date, Election_Cycle, President_Vote, Vice_President_Vote, Secretary_Vote, Treasurer_Vote, Class_President_Vote, Class_Senator_Vote | What are the first and last names of all the female students who have president votes?", "sql": "SELECT DISTINCT T1.Fname , T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE WHERE T1.sex = \"F\"", "example": {"db_id": "voter_2", "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"", "query_toks": ["SELECT", "DISTINCT", "T1.Fname", ",", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.President_VOTE", "WHERE", "T1.sex", "=", "``", "F", "''"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "president_vote", "where", "t1", ".", "sex", "=", "value"], "question": "What are the first and last names of all the female students who have president votes?", "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "all", "the", "female", "students", "who", "have", "president", "votes", "?"], "guid": 3781}}
{"text": "Addresses: address_id, line_1_number_building, town_city, zip_postcode, state_province_county, country; Services: service_id, service_type_code, service_name, service_descriptio; Forms: form_id, form_type_code, service_id, form_number, form_name, form_description; Individuals: individual_id, individual_first_name, individual_middle_name, inidividual_phone, individual_email, individual_address, individual_last_name; Organizations: organization_id, date_formed, organization_name, uk_vat_number; Parties: party_id, payment_method_code, party_phone, party_email; Organization_Contact_Individuals: individual_id, organization_id, date_contact_from, date_contact_to; Party_Addresses: party_id, address_id, date_address_from, address_type_code, date_address_to; Party_Forms: party_id, form_id, date_completion_started, form_status_code, date_fully_completed; Party_Services: booking_id, customer_id, service_id, service_datetime, booking_made_date | How many distinct payment methods are used by parties?", "sql": "SELECT COUNT(DISTINCT payment_method_code) FROM parties", "example": {"db_id": "e_government", "query": "SELECT count(DISTINCT payment_method_code) FROM parties", "query_toks": ["SELECT", "count", "(", "DISTINCT", "payment_method_code", ")", "FROM", "parties"], "query_toks_no_value": ["select", "count", "(", "distinct", "payment_method_code", ")", "from", "parties"], "question": "How many distinct payment methods are used by parties?", "question_toks": ["How", "many", "distinct", "payment", "methods", "are", "used", "by", "parties", "?"], "guid": 3782}}