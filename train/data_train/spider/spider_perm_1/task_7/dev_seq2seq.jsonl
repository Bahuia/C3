{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | Show names of shops and the carriers of devices they have in stock.", "sql": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID", "example": {"db_id": "device", "query": "SELECT T3.Shop_Name ,  T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID  =  T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID  =  T3.Shop_ID", "query_toks": ["SELECT", "T3.Shop_Name", ",", "T2.Carrier", "FROM", "stock", "AS", "T1", "JOIN", "device", "AS", "T2", "ON", "T1.Device_ID", "=", "T2.Device_ID", "JOIN", "shop", "AS", "T3", "ON", "T1.Shop_ID", "=", "T3.Shop_ID"], "query_toks_no_value": ["select", "t3", ".", "shop_name", ",", "t2", ".", "carrier", "from", "stock", "as", "t1", "join", "device", "as", "t2", "on", "t1", ".", "device_id", "=", "t2", ".", "device_id", "join", "shop", "as", "t3", "on", "t1", ".", "shop_id", "=", "t3", ".", "shop_id"], "question": "Show names of shops and the carriers of devices they have in stock.", "question_toks": ["Show", "names", "of", "shops", "and", "the", "carriers", "of", "devices", "they", "have", "in", "stock", "."], "guid": 6561}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the last name of the student who has a cat that is age 3.", "sql": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "example": {"db_id": "pets_1", "query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'", "query_toks": ["SELECT", "T1.lname", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pet_age", "=", "3", "AND", "T3.pettype", "=", "'cat", "'"], "query_toks_no_value": ["select", "t1", ".", "lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pet_age", "=", "value", "and", "t3", ".", "pettype", "=", "value"], "question": "Find the last name of the student who has a cat that is age 3.", "question_toks": ["Find", "the", "last", "name", "of", "the", "student", "who", "has", "a", "cat", "that", "is", "age", "3", "."], "guid": 6562}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"", "query_toks": ["SELECT", "product_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Christop", "''", "AND", "T2.staff_last_name", "=", "``", "Berge", "''", "INTERSECT", "SELECT", "product_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.closure_authorised_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Ashley", "''", "AND", "T2.staff_last_name", "=", "``", "Medhurst", "''"], "query_toks_no_value": ["select", "product_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value", "and", "t2", ".", "staff_last_name", "=", "value", "intersect", "select", "product_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "closure_authorised_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value", "and", "t2", ".", "staff_last_name", "=", "value"], "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?", "question_toks": ["What", "are", "the", "product", "ids", "for", "the", "problems", "reported", "by", "Christop", "Berge", "with", "closure", "authorised", "by", "Ashley", "Medhurst", "?"], "guid": 6563}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the type and weight of the youngest pet.", "sql": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "example": {"db_id": "pets_1", "query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1", "query_toks": ["SELECT", "pettype", ",", "weight", "FROM", "pets", "ORDER", "BY", "pet_age", "LIMIT", "1"], "query_toks_no_value": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "value"], "question": "Find the type and weight of the youngest pet.", "question_toks": ["Find", "the", "type", "and", "weight", "of", "the", "youngest", "pet", "."], "guid": 6564}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the average age for each gender?", "sql": "SELECT avg(age) ,  gender FROM Person GROUP BY gender", "example": {"db_id": "network_2", "query": "SELECT avg(age) ,  gender FROM Person GROUP BY gender", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "gender", "FROM", "Person", "GROUP", "BY", "gender"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "gender", "from", "person", "group", "by", "gender"], "question": "What is the average age for each gender?", "question_toks": ["What", "is", "the", "average", "age", "for", "each", "gender", "?"], "guid": 6565}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | List all the distinct product names ordered by product id?", "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_id", "example": {"db_id": "tracking_software_problems", "query": "SELECT DISTINCT product_name FROM product ORDER BY product_id", "query_toks": ["SELECT", "DISTINCT", "product_name", "FROM", "product", "ORDER", "BY", "product_id"], "query_toks_no_value": ["select", "distinct", "product_name", "from", "product", "order", "by", "product_id"], "question": "List all the distinct product names ordered by product id?", "question_toks": ["List", "all", "the", "distinct", "product", "names", "ordered", "by", "product", "id", "?"], "guid": 6566}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show the ids of high schoolers who have friends and are also liked by someone else.", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "example": {"db_id": "network_1", "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "query_toks": ["SELECT", "student_id", "FROM", "Friend", "INTERSECT", "SELECT", "liked_id", "FROM", "Likes"], "query_toks_no_value": ["select", "student_id", "from", "friend", "intersect", "select", "liked_id", "from", "likes"], "question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "question_toks": ["Show", "the", "ids", "of", "high", "schoolers", "who", "have", "friends", "and", "are", "also", "liked", "by", "someone", "else", "."], "guid": 6567}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What is the charge amount of the most expensive charge type?", "sql": "SELECT max(charge_amount) FROM Charges", "example": {"db_id": "dog_kennels", "query": "SELECT max(charge_amount) FROM Charges", "query_toks": ["SELECT", "max", "(", "charge_amount", ")", "FROM", "Charges"], "query_toks_no_value": ["select", "max", "(", "charge_amount", ")", "from", "charges"], "question": "What is the charge amount of the most expensive charge type?", "question_toks": ["What", "is", "the", "charge", "amount", "of", "the", "most", "expensive", "charge", "type", "?"], "guid": 6568}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the name of the person who has friends with age above 40 but not under age 30?", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "example": {"db_id": "network_2", "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)", "query_toks": ["SELECT", "T1.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "IN", "(", "SELECT", "name", "FROM", "Person", "WHERE", "age", ">", "40", ")", "EXCEPT", "SELECT", "T1.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "IN", "(", "SELECT", "name", "FROM", "Person", "WHERE", "age", "<", "30", ")"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "in", "(", "select", "name", "from", "person", "where", "age", ">", "value", ")", "except", "select", "t1", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "in", "(", "select", "name", "from", "person", "where", "age", "<", "value", ")"], "question": "Find the name of the person who has friends with age above 40 but not under age 30?", "question_toks": ["Find", "the", "name", "of", "the", "person", "who", "has", "friends", "with", "age", "above", "40", "but", "not", "under", "age", "30", "?"], "guid": 6569}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | How many professionals have performed any treatment to dogs?", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "example": {"db_id": "dog_kennels", "query": "SELECT count(DISTINCT professional_id) FROM Treatments", "query_toks": ["SELECT", "count", "(", "DISTINCT", "professional_id", ")", "FROM", "Treatments"], "query_toks_no_value": ["select", "count", "(", "distinct", "professional_id", ")", "from", "treatments"], "question": "How many professionals have performed any treatment to dogs?", "question_toks": ["How", "many", "professionals", "have", "performed", "any", "treatment", "to", "dogs", "?"], "guid": 6570}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Give me the description of the treatment type whose total cost is the lowest.", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "example": {"db_id": "dog_kennels", "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "query_toks": ["SELECT", "T1.treatment_type_description", "FROM", "Treatment_types", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.treatment_type_code", "=", "T2.treatment_type_code", "GROUP", "BY", "T1.treatment_type_code", "ORDER", "BY", "sum", "(", "cost_of_treatment", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "treatment_type_code", "=", "t2", ".", "treatment_type_code", "group", "by", "t1", ".", "treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "value"], "question": "Give me the description of the treatment type whose total cost is the lowest.", "question_toks": ["Give", "me", "the", "description", "of", "the", "treatment", "type", "whose", "total", "cost", "is", "the", "lowest", "."], "guid": 6571}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the major and age of students who do not have a cat pet.", "sql": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "example": {"db_id": "pets_1", "query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')", "query_toks": ["SELECT", "major", ",", "age", "FROM", "student", "WHERE", "stuid", "NOT", "IN", "(", "SELECT", "T1.stuid", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", ")"], "query_toks_no_value": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", ")"], "question": "Find the major and age of students who do not have a cat pet.", "question_toks": ["Find", "the", "major", "and", "age", "of", "students", "who", "do", "not", "have", "a", "cat", "pet", "."], "guid": 6572}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Show all storm names except for those with at least two affected regions.", "sql": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2", "example": {"db_id": "storm_record", "query": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "name", "FROM", "storm", "EXCEPT", "SELECT", "T1.name", "FROM", "storm", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.storm_id", "=", "T2.storm_id", "GROUP", "BY", "T1.storm_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "name", "from", "storm", "except", "select", "t1", ".", "name", "from", "storm", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "storm_id", "=", "t2", ".", "storm_id", "group", "by", "t1", ".", "storm_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show all storm names except for those with at least two affected regions.", "question_toks": ["Show", "all", "storm", "names", "except", "for", "those", "with", "at", "least", "two", "affected", "regions", "."], "guid": 6573}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | List the first and last name of the students who do not have any food type allergy.", "sql": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "example": {"db_id": "allergy_1", "query": "SELECT fname ,  lname FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")", "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "Student", "WHERE", "StuID", "NOT", "IN", "(", "SELECT", "T1.StuID", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_Type", "AS", "T2", "ON", "T1.Allergy", "=", "T2.Allergy", "WHERE", "T2.allergytype", "=", "``", "food", "''", ")"], "query_toks_no_value": ["select", "fname", ",", "lname", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1", ".", "stuid", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "where", "t2", ".", "allergytype", "=", "value", ")"], "question": "List the first and last name of the students who do not have any food type allergy.", "question_toks": ["List", "the", "first", "and", "last", "name", "of", "the", "students", "who", "do", "not", "have", "any", "food", "type", "allergy", "."], "guid": 6574}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the first name and gender of the students who have allergy to milk but can put up with cats?", "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "example": {"db_id": "allergy_1", "query": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "query_toks": ["SELECT", "fname", ",", "sex", "FROM", "Student", "WHERE", "StuID", "IN", "(", "SELECT", "StuID", "FROM", "Has_allergy", "WHERE", "Allergy", "=", "``", "Milk", "''", "EXCEPT", "SELECT", "StuID", "FROM", "Has_allergy", "WHERE", "Allergy", "=", "``", "Cat", "''", ")"], "query_toks_no_value": ["select", "fname", ",", "sex", "from", "student", "where", "stuid", "in", "(", "select", "stuid", "from", "has_allergy", "where", "allergy", "=", "value", "except", "select", "stuid", "from", "has_allergy", "where", "allergy", "=", "value", ")"], "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?", "question_toks": ["What", "are", "the", "first", "name", "and", "gender", "of", "the", "students", "who", "have", "allergy", "to", "milk", "but", "can", "put", "up", "with", "cats", "?"], "guid": 6575}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How many different cities do people originate from?", "sql": "SELECT count(DISTINCT city) FROM Person", "example": {"db_id": "network_2", "query": "SELECT count(DISTINCT city) FROM Person", "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "Person"], "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "person"], "question": "How many different cities do people originate from?", "question_toks": ["How", "many", "different", "cities", "do", "people", "originate", "from", "?"], "guid": 6576}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Tell me the age of the oldest dog.", "sql": "SELECT max(age) FROM Dogs", "example": {"db_id": "dog_kennels", "query": "SELECT max(age) FROM Dogs", "query_toks": ["SELECT", "max", "(", "age", ")", "FROM", "Dogs"], "query_toks_no_value": ["select", "max", "(", "age", ")", "from", "dogs"], "question": "Tell me the age of the oldest dog.", "question_toks": ["Tell", "me", "the", "age", "of", "the", "oldest", "dog", "."], "guid": 6577}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What is the name of the person who is the oldest?", "sql": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)", "example": {"db_id": "network_2", "query": "SELECT name FROM Person WHERE age  =  (SELECT max(age) FROM person)", "query_toks": ["SELECT", "name", "FROM", "Person", "WHERE", "age", "=", "(", "SELECT", "max", "(", "age", ")", "FROM", "person", ")"], "query_toks_no_value": ["select", "name", "from", "person", "where", "age", "=", "(", "select", "max", "(", "age", ")", "from", "person", ")"], "question": "What is the name of the person who is the oldest?", "question_toks": ["What", "is", "the", "name", "of", "the", "person", "who", "is", "the", "oldest", "?"], "guid": 6578}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.", "sql": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )", "example": {"db_id": "tracking_software_problems", "query": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )", "query_toks": ["SELECT", "T1.problem_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "date_problem_reported", "<", "(", "SELECT", "min", "(", "date_problem_reported", ")", "FROM", "problems", "AS", "T3", "JOIN", "staff", "AS", "T4", "ON", "T3.reported_by_staff_id", "=", "T4.staff_id", "WHERE", "T4.staff_first_name", "=", "``", "Lysanne", "''", "AND", "T4.staff_last_name", "=", "``", "Turcotte", "''", ")"], "query_toks_no_value": ["select", "t1", ".", "problem_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "date_problem_reported", "<", "(", "select", "min", "(", "date_problem_reported", ")", "from", "problems", "as", "t3", "join", "staff", "as", "t4", "on", "t3", ".", "reported_by_staff_id", "=", "t4", ".", "staff_id", "where", "t4", ".", "staff_first_name", "=", "value", "and", "t4", ".", "staff_last_name", "=", "value", ")"], "question": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.", "question_toks": ["Which", "problems", "were", "reported", "before", "the", "date", "of", "any", "problem", "reported", "by", "the", "staff", "Lysanne", "Turcotte", "?", "Give", "me", "the", "ids", "of", "the", "problems", "."], "guid": 6579}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students are there for each major?", "sql": "SELECT major ,  count(*) FROM Student GROUP BY major", "example": {"db_id": "allergy_1", "query": "SELECT major ,  count(*) FROM Student GROUP BY major", "query_toks": ["SELECT", "major", ",", "count", "(", "*", ")", "FROM", "Student", "GROUP", "BY", "major"], "query_toks_no_value": ["select", "major", ",", "count", "(", "*", ")", "from", "student", "group", "by", "major"], "question": "How many students are there for each major?", "question_toks": ["How", "many", "students", "are", "there", "for", "each", "major", "?"], "guid": 6580}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What are the ids of students who both have friends and are liked?", "sql": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "example": {"db_id": "network_1", "query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes", "query_toks": ["SELECT", "student_id", "FROM", "Friend", "INTERSECT", "SELECT", "liked_id", "FROM", "Likes"], "query_toks_no_value": ["select", "student_id", "from", "friend", "intersect", "select", "liked_id", "from", "likes"], "question": "What are the ids of students who both have friends and are liked?", "question_toks": ["What", "are", "the", "ids", "of", "students", "who", "both", "have", "friends", "and", "are", "liked", "?"], "guid": 6581}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.", "sql": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id", "example": {"db_id": "tracking_software_problems", "query": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T2.product_id", "FROM", "problems", "AS", "T1", "JOIN", "product", "AS", "T2", "ON", "T1.product_id", "=", "T2.product_id", "WHERE", "T1.date_problem_reported", ">", "``", "1986-11-13", "''", "GROUP", "BY", "T2.product_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t2", ".", "product_id", "from", "problems", "as", "t1", "join", "product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t1", ".", "date_problem_reported", ">", "value", "group", "by", "t2", ".", "product_id"], "question": "What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.", "question_toks": ["What", "are", "the", "products", "that", "have", "problems", "reported", "after", "1986-11-13", "?", "Give", "me", "the", "product", "id", "and", "the", "count", "of", "problems", "reported", "after", "1986-11-13", "."], "guid": 6582}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "sql": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "example": {"db_id": "dog_kennels", "query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id", "query_toks": ["SELECT", "professional_id", ",", "role_code", ",", "email_address", "FROM", "Professionals", "EXCEPT", "SELECT", "T1.professional_id", ",", "T1.role_code", ",", "T1.email_address", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id"], "query_toks_no_value": ["select", "professional_id", ",", "role_code", ",", "email_address", "from", "professionals", "except", "select", "t1", ".", "professional_id", ",", "t1", ".", "role_code", ",", "t1", ".", "email_address", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id"], "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "question_toks": ["Give", "me", "the", "id", ",", "role", "and", "email", "of", "the", "professionals", "who", "did", "not", "perform", "any", "treatment", "on", "dogs", "."], "guid": 6583}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | List the software platform shared by the greatest number of devices.", "sql": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "device", "query": "SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Software_Platform", "FROM", "device", "GROUP", "BY", "Software_Platform", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "software_platform", "from", "device", "group", "by", "software_platform", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List the software platform shared by the greatest number of devices.", "question_toks": ["List", "the", "software", "platform", "shared", "by", "the", "greatest", "number", "of", "devices", "."], "guid": 6584}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show the names and grades of each high schooler.", "sql": "SELECT name ,  grade FROM Highschooler", "example": {"db_id": "network_1", "query": "SELECT name ,  grade FROM Highschooler", "query_toks": ["SELECT", "name", ",", "grade", "FROM", "Highschooler"], "query_toks_no_value": ["select", "name", ",", "grade", "from", "highschooler"], "question": "Show the names and grades of each high schooler.", "question_toks": ["Show", "the", "names", "and", "grades", "of", "each", "high", "schooler", "."], "guid": 6585}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | How much does the most recent treatment cost?", "sql": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "example": {"db_id": "dog_kennels", "query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1", "query_toks": ["SELECT", "cost_of_treatment", "FROM", "Treatments", "ORDER", "BY", "date_of_treatment", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "value"], "question": "How much does the most recent treatment cost?", "question_toks": ["How", "much", "does", "the", "most", "recent", "treatment", "cost", "?"], "guid": 6586}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show all allergy type with number of students affected.", "sql": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "example": {"db_id": "allergy_1", "query": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype", "query_toks": ["SELECT", "T2.allergytype", ",", "count", "(", "*", ")", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_type", "AS", "T2", "ON", "T1.allergy", "=", "T2.allergy", "GROUP", "BY", "T2.allergytype"], "query_toks_no_value": ["select", "t2", ".", "allergytype", ",", "count", "(", "*", ")", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "group", "by", "t2", ".", "allergytype"], "question": "Show all allergy type with number of students affected.", "question_toks": ["Show", "all", "allergy", "type", "with", "number", "of", "students", "affected", "."], "guid": 6587}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many different allergy types exist?", "sql": "SELECT count(DISTINCT allergytype) FROM Allergy_type", "example": {"db_id": "allergy_1", "query": "SELECT count(DISTINCT allergytype) FROM Allergy_type", "query_toks": ["SELECT", "count", "(", "DISTINCT", "allergytype", ")", "FROM", "Allergy_type"], "query_toks_no_value": ["select", "count", "(", "distinct", "allergytype", ")", "from", "allergy_type"], "question": "How many different allergy types exist?", "question_toks": ["How", "many", "different", "allergy", "types", "exist", "?"], "guid": 6588}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What is the first name and gender of the all the students who have more than one pet?", "sql": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "example": {"db_id": "pets_1", "query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1", "query_toks": ["SELECT", "T1.fname", ",", "T1.sex", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "GROUP", "BY", "T1.stuid", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "sex", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "group", "by", "t1", ".", "stuid", "having", "count", "(", "*", ")", ">", "value"], "question": "What is the first name and gender of the all the students who have more than one pet?", "question_toks": ["What", "is", "the", "first", "name", "and", "gender", "of", "the", "all", "the", "students", "who", "have", "more", "than", "one", "pet", "?"], "guid": 6589}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How old are the students with allergies to food and animal types on average?", "sql": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")", "example": {"db_id": "allergy_1", "query": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")", "query_toks": ["SELECT", "avg", "(", "age", ")", "FROM", "Student", "WHERE", "StuID", "IN", "(", "SELECT", "T1.StuID", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_Type", "AS", "T2", "ON", "T1.Allergy", "=", "T2.Allergy", "WHERE", "T2.allergytype", "=", "``", "food", "''", "INTERSECT", "SELECT", "T1.StuID", "FROM", "Has_allergy", "AS", "T1", "JOIN", "Allergy_Type", "AS", "T2", "ON", "T1.Allergy", "=", "T2.Allergy", "WHERE", "T2.allergytype", "=", "``", "animal", "''", ")"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "in", "(", "select", "t1", ".", "stuid", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "where", "t2", ".", "allergytype", "=", "value", "intersect", "select", "t1", ".", "stuid", "from", "has_allergy", "as", "t1", "join", "allergy_type", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "where", "t2", ".", "allergytype", "=", "value", ")"], "question": "How old are the students with allergies to food and animal types on average?", "question_toks": ["How", "old", "are", "the", "students", "with", "allergies", "to", "food", "and", "animal", "types", "on", "average", "?"], "guid": 6590}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Which problem id and log id are assigned to the staff named Rylan Homenick?", "sql": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"", "query_toks": ["SELECT", "DISTINCT", "T2.problem_id", ",", "T2.problem_log_id", "FROM", "staff", "AS", "T1", "JOIN", "problem_log", "AS", "T2", "ON", "T1.staff_id", "=", "T2.assigned_to_staff_id", "WHERE", "T1.staff_first_name", "=", "``", "Rylan", "''", "AND", "T1.staff_last_name", "=", "``", "Homenick", "''"], "query_toks_no_value": ["select", "distinct", "t2", ".", "problem_id", ",", "t2", ".", "problem_log_id", "from", "staff", "as", "t1", "join", "problem_log", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "assigned_to_staff_id", "where", "t1", ".", "staff_first_name", "=", "value", "and", "t1", ".", "staff_last_name", "=", "value"], "question": "Which problem id and log id are assigned to the staff named Rylan Homenick?", "question_toks": ["Which", "problem", "id", "and", "log", "id", "are", "assigned", "to", "the", "staff", "named", "Rylan", "Homenick", "?"], "guid": 6591}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Find the last name and age of the student who has allergy to both milk and cat.", "sql": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "example": {"db_id": "allergy_1", "query": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "query_toks": ["SELECT", "lname", ",", "age", "FROM", "Student", "WHERE", "StuID", "IN", "(", "SELECT", "StuID", "FROM", "Has_allergy", "WHERE", "Allergy", "=", "``", "Milk", "''", "INTERSECT", "SELECT", "StuID", "FROM", "Has_allergy", "WHERE", "Allergy", "=", "``", "Cat", "''", ")"], "query_toks_no_value": ["select", "lname", ",", "age", "from", "student", "where", "stuid", "in", "(", "select", "stuid", "from", "has_allergy", "where", "allergy", "=", "value", "intersect", "select", "stuid", "from", "has_allergy", "where", "allergy", "=", "value", ")"], "question": "Find the last name and age of the student who has allergy to both milk and cat.", "question_toks": ["Find", "the", "last", "name", "and", "age", "of", "the", "student", "who", "has", "allergy", "to", "both", "milk", "and", "cat", "."], "guid": 6592}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What are the names of high schoolers who have 3 or more friends?", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "example": {"db_id": "network_1", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "query_toks": ["SELECT", "T2.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id", "HAVING", "count", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the names of high schoolers who have 3 or more friends?", "question_toks": ["What", "are", "the", "names", "of", "high", "schoolers", "who", "have", "3", "or", "more", "friends", "?"], "guid": 6593}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students who are female are allergic to milk or eggs?", "sql": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "has_allergy", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.StuID", "=", "T2.StuID", "WHERE", "T2.sex", "=", "``", "F", "''", "AND", "T1.allergy", "=", "``", "Milk", "''", "OR", "T1.allergy", "=", "``", "Eggs", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "has_allergy", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "where", "t2", ".", "sex", "=", "value", "and", "t1", ".", "allergy", "=", "value", "or", "t1", ".", "allergy", "=", "value"], "question": "How many students who are female are allergic to milk or eggs?", "question_toks": ["How", "many", "students", "who", "are", "female", "are", "allergic", "to", "milk", "or", "eggs", "?"], "guid": 6594}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How many females are in the network?", "sql": "SELECT count(*) FROM Person WHERE gender  =  'female'", "example": {"db_id": "network_2", "query": "SELECT count(*) FROM Person WHERE gender  =  'female'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Person", "WHERE", "gender", "=", "'female", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "person", "where", "gender", "=", "value"], "question": "How many females are in the network?", "question_toks": ["How", "many", "females", "are", "in", "the", "network", "?"], "guid": 6595}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | List the arrival date and the departure date for all the dogs.", "sql": "SELECT date_arrived ,  date_departed FROM Dogs", "example": {"db_id": "dog_kennels", "query": "SELECT date_arrived ,  date_departed FROM Dogs", "query_toks": ["SELECT", "date_arrived", ",", "date_departed", "FROM", "Dogs"], "query_toks_no_value": ["select", "date_arrived", ",", "date_departed", "from", "dogs"], "question": "List the arrival date and the departure date for all the dogs.", "question_toks": ["List", "the", "arrival", "date", "and", "the", "departure", "date", "for", "all", "the", "dogs", "."], "guid": 6596}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What are the arriving date and the departing date of the dogs who have gone through a treatment?", "sql": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "example": {"db_id": "dog_kennels", "query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id", "query_toks": ["SELECT", "DISTINCT", "T1.date_arrived", ",", "T1.date_departed", "FROM", "Dogs", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.dog_id", "=", "T2.dog_id"], "query_toks_no_value": ["select", "distinct", "t1", ".", "date_arrived", ",", "t1", ".", "date_departed", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "dog_id", "=", "t2", ".", "dog_id"], "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "question_toks": ["What", "are", "the", "arriving", "date", "and", "the", "departing", "date", "of", "the", "dogs", "who", "have", "gone", "through", "a", "treatment", "?"], "guid": 6597}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | What is the description of the treatment type that costs the least money in total?", "sql": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "example": {"db_id": "dog_kennels", "query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1", "query_toks": ["SELECT", "T1.treatment_type_description", "FROM", "Treatment_types", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.treatment_type_code", "=", "T2.treatment_type_code", "GROUP", "BY", "T1.treatment_type_code", "ORDER", "BY", "sum", "(", "cost_of_treatment", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "treatment_type_code", "=", "t2", ".", "treatment_type_code", "group", "by", "t1", ".", "treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "value"], "question": "What is the description of the treatment type that costs the least money in total?", "question_toks": ["What", "is", "the", "description", "of", "the", "treatment", "type", "that", "costs", "the", "least", "money", "in", "total", "?"], "guid": 6598}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | Find the first name of students who have cat or dog pet.", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "example": {"db_id": "pets_1", "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "query_toks": ["SELECT", "DISTINCT", "T1.Fname", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", "OR", "T3.pettype", "=", "'dog", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "or", "t3", ".", "pettype", "=", "value"], "question": "Find the first name of students who have cat or dog pet.", "question_toks": ["Find", "the", "first", "name", "of", "students", "who", "have", "cat", "or", "dog", "pet", "."], "guid": 6599}}
{"text": "follows: f1, f2; tweets: id, uid, text, createdate; user_profiles: uid, name, email, partitionid, followers | How many followers does each user have?", "sql": "SELECT count(*) FROM follows", "example": {"db_id": "twitter_1", "query": "SELECT count(*) FROM follows", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "follows"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "follows"], "question": "How many followers does each user have?", "question_toks": ["How", "many", "followers", "does", "each", "user", "have", "?"], "guid": 6600}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What student id corresponds to the oldest student?", "sql": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "example": {"db_id": "allergy_1", "query": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)", "query_toks": ["SELECT", "StuID", "FROM", "Student", "WHERE", "age", "=", "(", "SELECT", "max", "(", "age", ")", "FROM", "Student", ")"], "query_toks_no_value": ["select", "stuid", "from", "student", "where", "age", "=", "(", "select", "max", "(", "age", ")", "from", "student", ")"], "question": "What student id corresponds to the oldest student?", "question_toks": ["What", "student", "id", "corresponds", "to", "the", "oldest", "student", "?"], "guid": 6601}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the names of enzymes who does not produce 'Heme'?", "sql": "SELECT name FROM enzyme WHERE product != 'Heme'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT name FROM enzyme WHERE product != 'Heme'", "query_toks": ["SELECT", "name", "FROM", "enzyme", "WHERE", "product", "!", "=", "'Heme", "'"], "query_toks_no_value": ["select", "name", "from", "enzyme", "where", "product", "!", "=", "value"], "question": "What are the names of enzymes who does not produce 'Heme'?", "question_toks": ["What", "are", "the", "names", "of", "enzymes", "who", "does", "not", "produce", "'Heme", "'", "?"], "guid": 6602}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the id and cell phone of the professionals who operate two or more types of treatments.", "sql": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "example": {"db_id": "dog_kennels", "query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.professional_id", ",", "T1.cell_number", "FROM", "Professionals", "AS", "T1", "JOIN", "Treatments", "AS", "T2", "ON", "T1.professional_id", "=", "T2.professional_id", "GROUP", "BY", "T1.professional_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "professional_id", ",", "t1", ".", "cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1", ".", "professional_id", "=", "t2", ".", "professional_id", "group", "by", "t1", ".", "professional_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "question_toks": ["Find", "the", "id", "and", "cell", "phone", "of", "the", "professionals", "who", "operate", "two", "or", "more", "types", "of", "treatments", "."], "guid": 6603}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | What are the average, maximum, and minimum number of floors for all buildings?", "sql": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building", "example": {"db_id": "protein_institute", "query": "SELECT avg(floors) ,  max(floors) ,  min(floors) FROM building", "query_toks": ["SELECT", "avg", "(", "floors", ")", ",", "max", "(", "floors", ")", ",", "min", "(", "floors", ")", "FROM", "building"], "query_toks_no_value": ["select", "avg", "(", "floors", ")", ",", "max", "(", "floors", ")", ",", "min", "(", "floors", ")", "from", "building"], "question": "What are the average, maximum, and minimum number of floors for all buildings?", "question_toks": ["What", "are", "the", "average", ",", "maximum", ",", "and", "minimum", "number", "of", "floors", "for", "all", "buildings", "?"], "guid": 6604}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the number of professionals who have ever treated dogs.", "sql": "SELECT count(DISTINCT professional_id) FROM Treatments", "example": {"db_id": "dog_kennels", "query": "SELECT count(DISTINCT professional_id) FROM Treatments", "query_toks": ["SELECT", "count", "(", "DISTINCT", "professional_id", ")", "FROM", "Treatments"], "query_toks_no_value": ["select", "count", "(", "distinct", "professional_id", ")", "from", "treatments"], "question": "Find the number of professionals who have ever treated dogs.", "question_toks": ["Find", "the", "number", "of", "professionals", "who", "have", "ever", "treated", "dogs", "."], "guid": 6605}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Find the first name and gender of the student who has allergy to milk but not cat.", "sql": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "example": {"db_id": "allergy_1", "query": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")", "query_toks": ["SELECT", "fname", ",", "sex", "FROM", "Student", "WHERE", "StuID", "IN", "(", "SELECT", "StuID", "FROM", "Has_allergy", "WHERE", "Allergy", "=", "``", "Milk", "''", "EXCEPT", "SELECT", "StuID", "FROM", "Has_allergy", "WHERE", "Allergy", "=", "``", "Cat", "''", ")"], "query_toks_no_value": ["select", "fname", ",", "sex", "from", "student", "where", "stuid", "in", "(", "select", "stuid", "from", "has_allergy", "where", "allergy", "=", "value", "except", "select", "stuid", "from", "has_allergy", "where", "allergy", "=", "value", ")"], "question": "Find the first name and gender of the student who has allergy to milk but not cat.", "question_toks": ["Find", "the", "first", "name", "and", "gender", "of", "the", "student", "who", "has", "allergy", "to", "milk", "but", "not", "cat", "."], "guid": 6606}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students are 18 years old?", "sql": "SELECT count(*) FROM Student WHERE age  =  18", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Student WHERE age  =  18", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student", "WHERE", "age", "=", "18"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "where", "age", "=", "value"], "question": "How many students are 18 years old?", "question_toks": ["How", "many", "students", "are", "18", "years", "old", "?"], "guid": 6607}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show the names of high school students and their corresponding number of friends.", "sql": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "example": {"db_id": "network_1", "query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id", "query_toks": ["SELECT", "T2.name", ",", "count", "(", "*", ")", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id"], "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id"], "question": "Show the names of high school students and their corresponding number of friends.", "question_toks": ["Show", "the", "names", "of", "high", "school", "students", "and", "their", "corresponding", "number", "of", "friends", "."], "guid": 6608}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Compute the average age of all the dogs.", "sql": "SELECT avg(age) FROM Dogs", "example": {"db_id": "dog_kennels", "query": "SELECT avg(age) FROM Dogs", "query_toks": ["SELECT", "avg", "(", "age", ")", "FROM", "Dogs"], "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "dogs"], "question": "Compute the average age of all the dogs.", "question_toks": ["Compute", "the", "average", "age", "of", "all", "the", "dogs", "."], "guid": 6609}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Find the average grade of all students who have some friends.", "sql": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "example": {"db_id": "network_1", "query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "query_toks": ["SELECT", "avg", "(", "grade", ")", "FROM", "Highschooler", "WHERE", "id", "IN", "(", "SELECT", "T1.student_id", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", ")"], "query_toks_no_value": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1", ".", "student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", ")"], "question": "Find the average grade of all students who have some friends.", "question_toks": ["Find", "the", "average", "grade", "of", "all", "students", "who", "have", "some", "friends", "."], "guid": 6610}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.", "sql": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000", "example": {"db_id": "protein_institute", "query": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000", "query_toks": ["SELECT", "TYPE", "FROM", "institution", "WHERE", "founded", ">", "1990", "AND", "enrollment", ">", "=", "1000"], "query_toks_no_value": ["select", "type", "from", "institution", "where", "founded", ">", "value", "and", "enrollment", ">", "=", "value"], "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.", "question_toks": ["Show", "the", "institution", "type", "with", "an", "institution", "founded", "after", "1990", "and", "an", "institution", "with", "at", "least", "1000", "enrollment", "."], "guid": 6611}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | Show the number of buildings with a height above the average or a number of floors above the average.", "sql": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)", "example": {"db_id": "protein_institute", "query": "SELECT count(*) FROM building WHERE height_feet  >  (SELECT avg(height_feet) FROM building) OR floors  >  (SELECT avg(floors) FROM building)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "building", "WHERE", "height_feet", ">", "(", "SELECT", "avg", "(", "height_feet", ")", "FROM", "building", ")", "OR", "floors", ">", "(", "SELECT", "avg", "(", "floors", ")", "FROM", "building", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "building", "where", "height_feet", ">", "(", "select", "avg", "(", "height_feet", ")", "from", "building", ")", "or", "floors", ">", "(", "select", "avg", "(", "floors", ")", "from", "building", ")"], "question": "Show the number of buildings with a height above the average or a number of floors above the average.", "question_toks": ["Show", "the", "number", "of", "buildings", "with", "a", "height", "above", "the", "average", "or", "a", "number", "of", "floors", "above", "the", "average", "."], "guid": 6612}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | List the name for storms and the number of affected regions for each storm.", "sql": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id", "example": {"db_id": "storm_record", "query": "SELECT T1.name ,  count(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id", "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "storm", "AS", "T1", "JOIN", "affected_region", "AS", "T2", "ON", "T1.storm_id", "=", "T2.storm_id", "GROUP", "BY", "T1.storm_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "storm", "as", "t1", "join", "affected_region", "as", "t2", "on", "t1", ".", "storm_id", "=", "t2", ".", "storm_id", "group", "by", "t1", ".", "storm_id"], "question": "List the name for storms and the number of affected regions for each storm.", "question_toks": ["List", "the", "name", "for", "storms", "and", "the", "number", "of", "affected", "regions", "for", "each", "storm", "."], "guid": 6613}}
{"text": "device: Device_ID, Device, Carrier, Package_Version, Applications, Software_Platform; shop: Shop_ID, Shop_Name, Location, Open_Date, Open_Year; stock: Shop_ID, Device_ID, Quantity | How many different software platforms are there for devices?", "sql": "SELECT count(DISTINCT Software_Platform) FROM device", "example": {"db_id": "device", "query": "SELECT count(DISTINCT Software_Platform) FROM device", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Software_Platform", ")", "FROM", "device"], "query_toks_no_value": ["select", "count", "(", "distinct", "software_platform", ")", "from", "device"], "question": "How many different software platforms are there for devices?", "question_toks": ["How", "many", "different", "software", "platforms", "are", "there", "for", "devices", "?"], "guid": 6614}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.", "sql": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"", "example": {"db_id": "tracking_software_problems", "query": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"", "query_toks": ["SELECT", "product_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Dameon", "''", "AND", "T2.staff_last_name", "=", "``", "Frami", "''", "UNION", "SELECT", "product_id", "FROM", "problems", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.reported_by_staff_id", "=", "T2.staff_id", "WHERE", "T2.staff_first_name", "=", "``", "Jolie", "''", "AND", "T2.staff_last_name", "=", "``", "Weber", "''"], "query_toks_no_value": ["select", "product_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value", "and", "t2", ".", "staff_last_name", "=", "value", "union", "select", "product_id", "from", "problems", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "reported_by_staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "staff_first_name", "=", "value", "and", "t2", ".", "staff_last_name", "=", "value"], "question": "Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.", "question_toks": ["Which", "problems", "were", "reported", "by", "the", "staff", "named", "Dameon", "Frami", "or", "Jolie", "Weber", "?", "Give", "me", "the", "ids", "of", "the", "problems", "."], "guid": 6615}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How many people are older than every engineer?", "sql": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')", "example": {"db_id": "network_2", "query": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Person", "WHERE", "age", ">", "(", "SELECT", "max", "(", "age", ")", "FROM", "person", "WHERE", "job", "=", "'engineer", "'", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "person", "where", "age", ">", "(", "select", "max", "(", "age", ")", "from", "person", "where", "job", "=", "value", ")"], "question": "How many people are older than every engineer?", "question_toks": ["How", "many", "people", "are", "older", "than", "every", "engineer", "?"], "guid": 6616}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the names of females who are friends with Zach", "sql": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'", "example": {"db_id": "network_2", "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'", "query_toks": ["SELECT", "T1.name", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "=", "'Zach", "'", "AND", "T1.gender", "=", "'female", "'"], "query_toks_no_value": ["select", "t1", ".", "name", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "=", "value", "and", "t1", ".", "gender", "=", "value"], "question": "Find the names of females who are friends with Zach", "question_toks": ["Find", "the", "names", "of", "females", "who", "are", "friends", "with", "Zach"], "guid": 6617}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | How many institutions do not have an associated protein in our record?", "sql": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)", "example": {"db_id": "protein_institute", "query": "SELECT count(*) FROM institution WHERE institution_id NOT IN (SELECT institution_id FROM protein)", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "institution", "WHERE", "institution_id", "NOT", "IN", "(", "SELECT", "institution_id", "FROM", "protein", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "institution", "where", "institution_id", "not", "in", "(", "select", "institution_id", "from", "protein", ")"], "question": "How many institutions do not have an associated protein in our record?", "question_toks": ["How", "many", "institutions", "do", "not", "have", "an", "associated", "protein", "in", "our", "record", "?"], "guid": 6618}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What is the lowest grade of students who do not have any friends?", "sql": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "example": {"db_id": "network_1", "query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)", "query_toks": ["SELECT", "min", "(", "grade", ")", "FROM", "Highschooler", "WHERE", "id", "NOT", "IN", "(", "SELECT", "T1.student_id", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", ")"], "query_toks_no_value": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1", ".", "student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", ")"], "question": "What is the lowest grade of students who do not have any friends?", "question_toks": ["What", "is", "the", "lowest", "grade", "of", "students", "who", "do", "not", "have", "any", "friends", "?"], "guid": 6619}}
{"text": "Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code; Has_Pet: StuID, PetID; Pets: PetID, PetType, pet_age, weight | What are the first names of every student who has a cat or dog as a pet?", "sql": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "example": {"db_id": "pets_1", "query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'", "query_toks": ["SELECT", "DISTINCT", "T1.Fname", "FROM", "student", "AS", "T1", "JOIN", "has_pet", "AS", "T2", "ON", "T1.stuid", "=", "T2.stuid", "JOIN", "pets", "AS", "T3", "ON", "T3.petid", "=", "T2.petid", "WHERE", "T3.pettype", "=", "'cat", "'", "OR", "T3.pettype", "=", "'dog", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "join", "pets", "as", "t3", "on", "t3", ".", "petid", "=", "t2", ".", "petid", "where", "t3", ".", "pettype", "=", "value", "or", "t3", ".", "pettype", "=", "value"], "question": "What are the first names of every student who has a cat or dog as a pet?", "question_toks": ["What", "are", "the", "first", "names", "of", "every", "student", "who", "has", "a", "cat", "or", "dog", "as", "a", "pet", "?"], "guid": 6620}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How old is each gender, on average?", "sql": "SELECT avg(age) ,  gender FROM Person GROUP BY gender", "example": {"db_id": "network_2", "query": "SELECT avg(age) ,  gender FROM Person GROUP BY gender", "query_toks": ["SELECT", "avg", "(", "age", ")", ",", "gender", "FROM", "Person", "GROUP", "BY", "gender"], "query_toks_no_value": ["select", "avg", "(", "age", ")", ",", "gender", "from", "person", "group", "by", "gender"], "question": "How old is each gender, on average?", "question_toks": ["How", "old", "is", "each", "gender", ",", "on", "average", "?"], "guid": 6621}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | How old is the doctor named Zach?", "sql": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'", "example": {"db_id": "network_2", "query": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'", "query_toks": ["SELECT", "age", "FROM", "Person", "WHERE", "job", "=", "'doctor", "'", "AND", "name", "=", "'Zach", "'"], "query_toks_no_value": ["select", "age", "from", "person", "where", "job", "=", "value", "and", "name", "=", "value"], "question": "How old is the doctor named Zach?", "question_toks": ["How", "old", "is", "the", "doctor", "named", "Zach", "?"], "guid": 6622}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?", "sql": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "example": {"db_id": "network_2", "query": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')", "query_toks": ["SELECT", "T1.name", ",", "T1.age", ",", "T1.job", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.name", "WHERE", "T2.friend", "=", "'Alice", "'", "AND", "T2.year", "=", "(", "SELECT", "max", "(", "YEAR", ")", "FROM", "PersonFriend", "WHERE", "friend", "=", "'Alice", "'", ")"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "age", ",", "t1", ".", "job", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "where", "t2", ".", "friend", "=", "value", "and", "t2", ".", "year", "=", "(", "select", "max", "(", "year", ")", "from", "personfriend", "where", "friend", "=", "value", ")"], "question": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?", "question_toks": ["What", "are", "the", "names", ",", "ages", ",", "and", "jobs", "of", "all", "people", "who", "are", "friends", "with", "Alice", "for", "the", "longest", "amount", "of", "time", "?"], "guid": 6623}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "sql": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "example": {"db_id": "dog_kennels", "query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1", "query_toks": ["SELECT", "T1.owner_id", ",", "T1.zip_code", "FROM", "Owners", "AS", "T1", "JOIN", "Dogs", "AS", "T2", "ON", "T1.owner_id", "=", "T2.owner_id", "JOIN", "Treatments", "AS", "T3", "ON", "T2.dog_id", "=", "T3.dog_id", "GROUP", "BY", "T1.owner_id", "ORDER", "BY", "sum", "(", "T3.cost_of_treatment", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "owner_id", ",", "t1", ".", "zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1", ".", "owner_id", "=", "t2", ".", "owner_id", "join", "treatments", "as", "t3", "on", "t2", ".", "dog_id", "=", "t3", ".", "dog_id", "group", "by", "t1", ".", "owner_id", "order", "by", "sum", "(", "t3", ".", "cost_of_treatment", ")", "desc", "limit", "value"], "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "question_toks": ["Find", "the", "owner", "id", "and", "zip", "code", "of", "the", "owner", "who", "spent", "the", "most", "money", "in", "total", "for", "his", "or", "her", "dogs", "."], "guid": 6624}}
{"text": "Breeds: breed_code, breed_name; Charges: charge_id, charge_type, charge_amount; Sizes: size_code, size_description; Treatment_Types: treatment_type_code, treatment_type_description; Owners: owner_id, first_name, last_name, street, city, state, zip_code, email_address, home_phone, cell_number; Dogs: dog_id, owner_id, abandoned_yn, breed_code, size_code, name, age, date_of_birth, gender, weight; Professionals: professional_id, role_code, first_name, street, city, state, zip_code, last_name, email_address, home_phone; Treatments: treatment_id, dog_id, professional_id, treatment_type_code, date_of_treatment, cost_of_treatment | Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "sql": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "example": {"db_id": "dog_kennels", "query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'", "query_toks": ["SELECT", "first_name", ",", "last_name", ",", "email_address", "FROM", "Owners", "WHERE", "state", "LIKE", "'", "%", "North", "%", "'"], "query_toks_no_value": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "value"], "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "question_toks": ["Return", "the", "first", "name", ",", "last", "name", "and", "email", "of", "the", "owners", "living", "in", "a", "state", "whose", "name", "contains", "the", "substring", "'North", "'", "."], "guid": 6625}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?", "sql": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'", "query_toks": ["SELECT", "DISTINCT", "T1.name", ",", "T1.location", ",", "T1.product", "FROM", "enzyme", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.enzyme_id", "=", "T1.id", "WHERE", "T2.interaction_type", "=", "'inhibitor", "'"], "query_toks_no_value": ["select", "distinct", "t1", ".", "name", ",", "t1", ".", "location", ",", "t1", ".", "product", "from", "enzyme", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "enzyme_id", "=", "t1", ".", "id", "where", "t2", ".", "interaction_type", "=", "value"], "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?", "question_toks": ["What", "are", "the", "distinct", "name", ",", "location", "and", "products", "of", "the", "enzymes", "which", "has", "any", "'inhibitor", "'", "interaction", "?"], "guid": 6626}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | How many proteins are associated with an institution in a building with at least 20 floors?", "sql": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20", "example": {"db_id": "protein_institute", "query": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "institution", "AS", "T1", "JOIN", "protein", "AS", "T2", "ON", "T1.institution_id", "=", "T2.institution_id", "JOIN", "building", "AS", "T3", "ON", "T3.building_id", "=", "T1.building_id", "WHERE", "T3.floors", ">", "=", "20"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "institution", "as", "t1", "join", "protein", "as", "t2", "on", "t1", ".", "institution_id", "=", "t2", ".", "institution_id", "join", "building", "as", "t3", "on", "t3", ".", "building_id", "=", "t1", ".", "building_id", "where", "t3", ".", "floors", ">", "=", "value"], "question": "How many proteins are associated with an institution in a building with at least 20 floors?", "question_toks": ["How", "many", "proteins", "are", "associated", "with", "an", "institution", "in", "a", "building", "with", "at", "least", "20", "floors", "?"], "guid": 6627}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show the student IDs and numbers of friends corresponding to each.", "sql": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "example": {"db_id": "network_1", "query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id", "query_toks": ["SELECT", "student_id", ",", "count", "(", "*", ")", "FROM", "Friend", "GROUP", "BY", "student_id"], "query_toks_no_value": ["select", "student_id", ",", "count", "(", "*", ")", "from", "friend", "group", "by", "student_id"], "question": "Show the student IDs and numbers of friends corresponding to each.", "question_toks": ["Show", "the", "student", "IDs", "and", "numbers", "of", "friends", "corresponding", "to", "each", "."], "guid": 6628}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | What is the grade of each high schooler?", "sql": "SELECT grade FROM Highschooler", "example": {"db_id": "network_1", "query": "SELECT grade FROM Highschooler", "query_toks": ["SELECT", "grade", "FROM", "Highschooler"], "query_toks_no_value": ["select", "grade", "from", "highschooler"], "question": "What is the grade of each high schooler?", "question_toks": ["What", "is", "the", "grade", "of", "each", "high", "schooler", "?"], "guid": 6629}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | Show the institution type with the largest number of institutions.", "sql": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "protein_institute", "query": "SELECT TYPE FROM institution GROUP BY TYPE ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "TYPE", "FROM", "institution", "GROUP", "BY", "TYPE", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "type", "from", "institution", "group", "by", "type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the institution type with the largest number of institutions.", "question_toks": ["Show", "the", "institution", "type", "with", "the", "largest", "number", "of", "institutions", "."], "guid": 6630}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | Show the names of high schoolers who have at least 3 friends.", "sql": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "example": {"db_id": "network_1", "query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3", "query_toks": ["SELECT", "T2.name", "FROM", "Friend", "AS", "T1", "JOIN", "Highschooler", "AS", "T2", "ON", "T1.student_id", "=", "T2.id", "GROUP", "BY", "T1.student_id", "HAVING", "count", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "t2", ".", "name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1", ".", "student_id", "=", "t2", ".", "id", "group", "by", "t1", ".", "student_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the names of high schoolers who have at least 3 friends.", "question_toks": ["Show", "the", "names", "of", "high", "schoolers", "who", "have", "at", "least", "3", "friends", "."], "guid": 6631}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What are the ids and names of the medicine that can interact with two or more enzymes?", "sql": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2", "query_toks": ["SELECT", "T1.id", ",", "T1.Name", "FROM", "medicine", "AS", "T1", "JOIN", "medicine_enzyme_interaction", "AS", "T2", "ON", "T2.medicine_id", "=", "T1.id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "medicine", "as", "t1", "join", "medicine_enzyme_interaction", "as", "t2", "on", "t2", ".", "medicine_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the ids and names of the medicine that can interact with two or more enzymes?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "the", "medicine", "that", "can", "interact", "with", "two", "or", "more", "enzymes", "?"], "guid": 6632}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | What are the names of all of Alice's friends of friends?", "sql": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'", "example": {"db_id": "network_2", "query": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'", "query_toks": ["SELECT", "DISTINCT", "T4.name", "FROM", "PersonFriend", "AS", "T1", "JOIN", "Person", "AS", "T2", "ON", "T1.name", "=", "T2.name", "JOIN", "PersonFriend", "AS", "T3", "ON", "T1.friend", "=", "T3.name", "JOIN", "PersonFriend", "AS", "T4", "ON", "T3.friend", "=", "T4.name", "WHERE", "T2.name", "=", "'Alice", "'", "AND", "T4.name", "!", "=", "'Alice", "'"], "query_toks_no_value": ["select", "distinct", "t4", ".", "name", "from", "personfriend", "as", "t1", "join", "person", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "name", "join", "personfriend", "as", "t3", "on", "t1", ".", "friend", "=", "t3", ".", "name", "join", "personfriend", "as", "t4", "on", "t3", ".", "friend", "=", "t4", ".", "name", "where", "t2", ".", "name", "=", "value", "and", "t4", ".", "name", "!", "=", "value"], "question": "What are the names of all of Alice's friends of friends?", "question_toks": ["What", "are", "the", "names", "of", "all", "of", "Alice", "'s", "friends", "of", "friends", "?"], "guid": 6633}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | Show the name of storms which don't have affected region in record.", "sql": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)", "example": {"db_id": "storm_record", "query": "SELECT name FROM storm WHERE storm_id NOT IN (SELECT storm_id FROM affected_region)", "query_toks": ["SELECT", "name", "FROM", "storm", "WHERE", "storm_id", "NOT", "IN", "(", "SELECT", "storm_id", "FROM", "affected_region", ")"], "query_toks_no_value": ["select", "name", "from", "storm", "where", "storm_id", "not", "in", "(", "select", "storm_id", "from", "affected_region", ")"], "question": "Show the name of storms which don't have affected region in record.", "question_toks": ["Show", "the", "name", "of", "storms", "which", "do", "n't", "have", "affected", "region", "in", "record", "."], "guid": 6634}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Which problem log was created most recently? Give me the log id.", "sql": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1", "example": {"db_id": "tracking_software_problems", "query": "SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1", "query_toks": ["SELECT", "problem_log_id", "FROM", "problem_log", "ORDER", "BY", "log_entry_date", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "problem_log_id", "from", "problem_log", "order", "by", "log_entry_date", "desc", "limit", "value"], "question": "Which problem log was created most recently? Give me the log id.", "question_toks": ["Which", "problem", "log", "was", "created", "most", "recently", "?", "Give", "me", "the", "log", "id", "."], "guid": 6635}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Who is the advisor of student with ID 1004?", "sql": "SELECT Advisor FROM Student WHERE StuID  =  1004", "example": {"db_id": "allergy_1", "query": "SELECT Advisor FROM Student WHERE StuID  =  1004", "query_toks": ["SELECT", "Advisor", "FROM", "Student", "WHERE", "StuID", "=", "1004"], "query_toks_no_value": ["select", "advisor", "from", "student", "where", "stuid", "=", "value"], "question": "Who is the advisor of student with ID 1004?", "question_toks": ["Who", "is", "the", "advisor", "of", "student", "with", "ID", "1004", "?"], "guid": 6636}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.", "sql": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy", "example": {"db_id": "allergy_1", "query": "SELECT T1.Allergy ,  T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy  =  T2.Allergy JOIN Student AS T3 ON T3.StuID  =  T2.StuID WHERE T3.Fname  =  \"Lisa\" ORDER BY T1.Allergy", "query_toks": ["SELECT", "T1.Allergy", ",", "T1.AllergyType", "FROM", "Allergy_type", "AS", "T1", "JOIN", "Has_allergy", "AS", "T2", "ON", "T1.Allergy", "=", "T2.Allergy", "JOIN", "Student", "AS", "T3", "ON", "T3.StuID", "=", "T2.StuID", "WHERE", "T3.Fname", "=", "``", "Lisa", "''", "ORDER", "BY", "T1.Allergy"], "query_toks_no_value": ["select", "t1", ".", "allergy", ",", "t1", ".", "allergytype", "from", "allergy_type", "as", "t1", "join", "has_allergy", "as", "t2", "on", "t1", ".", "allergy", "=", "t2", ".", "allergy", "join", "student", "as", "t3", "on", "t3", ".", "stuid", "=", "t2", ".", "stuid", "where", "t3", ".", "fname", "=", "value", "order", "by", "t1", ".", "allergy"], "question": "What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.", "question_toks": ["What", "are", "the", "allergies", "and", "their", "types", "that", "the", "student", "with", "first", "name", "Lisa", "has", "?", "And", "order", "the", "result", "by", "name", "of", "allergies", "."], "guid": 6637}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the names of all person sorted in the descending order using age.", "sql": "SELECT name FROM Person ORDER BY age DESC", "example": {"db_id": "network_2", "query": "SELECT name FROM Person ORDER BY age DESC", "query_toks": ["SELECT", "name", "FROM", "Person", "ORDER", "BY", "age", "DESC"], "query_toks_no_value": ["select", "name", "from", "person", "order", "by", "age", "desc"], "question": "Find the names of all person sorted in the descending order using age.", "question_toks": ["Find", "the", "names", "of", "all", "person", "sorted", "in", "the", "descending", "order", "using", "age", "."], "guid": 6638}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | For each building, show the name of the building and the number of institutions in it.", "sql": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id", "example": {"db_id": "protein_institute", "query": "SELECT T1.name ,  count(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id GROUP BY T1.building_id", "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "building", "AS", "T1", "JOIN", "institution", "AS", "T2", "ON", "T1.building_id", "=", "T2.building_id", "GROUP", "BY", "T1.building_id"], "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "building", "as", "t1", "join", "institution", "as", "t2", "on", "t1", ".", "building_id", "=", "t2", ".", "building_id", "group", "by", "t1", ".", "building_id"], "question": "For each building, show the name of the building and the number of institutions in it.", "question_toks": ["For", "each", "building", ",", "show", "the", "name", "of", "the", "building", "and", "the", "number", "of", "institutions", "in", "it", "."], "guid": 6639}}
{"text": "medicine: id, name, Trade_Name, FDA_approved; enzyme: id, name, Location, Product, Chromosome, OMIM, Porphyria; medicine_enzyme_interaction: enzyme_id, medicine_id, interaction_type | What is the most common interaction type between enzymes and medicine? And how many are there?", "sql": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "medicine_enzyme_interaction", "query": "SELECT interaction_type ,  count(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "interaction_type", ",", "count", "(", "*", ")", "FROM", "medicine_enzyme_interaction", "GROUP", "BY", "interaction_type", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "interaction_type", ",", "count", "(", "*", ")", "from", "medicine_enzyme_interaction", "group", "by", "interaction_type", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most common interaction type between enzymes and medicine? And how many are there?", "question_toks": ["What", "is", "the", "most", "common", "interaction", "type", "between", "enzymes", "and", "medicine", "?", "And", "how", "many", "are", "there", "?"], "guid": 6640}}
{"text": "Person: name, age, city, gender, job; PersonFriend: name, friend, year | Find the male friend of Alice whose job is a doctor?", "sql": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'", "example": {"db_id": "network_2", "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'", "query_toks": ["SELECT", "T2.friend", "FROM", "Person", "AS", "T1", "JOIN", "PersonFriend", "AS", "T2", "ON", "T1.name", "=", "T2.friend", "WHERE", "T2.name", "=", "'Alice", "'", "AND", "T1.gender", "=", "'male", "'", "AND", "T1.job", "=", "'doctor", "'"], "query_toks_no_value": ["select", "t2", ".", "friend", "from", "person", "as", "t1", "join", "personfriend", "as", "t2", "on", "t1", ".", "name", "=", "t2", ".", "friend", "where", "t2", ".", "name", "=", "value", "and", "t1", ".", "gender", "=", "value", "and", "t1", ".", "job", "=", "value"], "question": "Find the male friend of Alice whose job is a doctor?", "question_toks": ["Find", "the", "male", "friend", "of", "Alice", "whose", "job", "is", "a", "doctor", "?"], "guid": 6641}}
{"text": "Problem_Category_Codes: problem_category_code, problem_category_description; Problem_Log: problem_log_id, assigned_to_staff_id, problem_id, problem_category_code, problem_status_code, log_entry_date, log_entry_description, log_entry_fix, other_log_details; Problem_Status_Codes: problem_status_code, problem_status_description; Product: product_id, product_name, product_details; Staff: staff_id, staff_first_name, staff_last_name, other_staff_details; Problems: problem_id, product_id, closure_authorised_by_staff_id, reported_by_staff_id, date_problem_reported, date_problem_closed, problem_description, other_problem_details | Sort all the distinct product names in alphabetical order.", "sql": "SELECT DISTINCT product_name FROM product ORDER BY product_name", "example": {"db_id": "tracking_software_problems", "query": "SELECT DISTINCT product_name FROM product ORDER BY product_name", "query_toks": ["SELECT", "DISTINCT", "product_name", "FROM", "product", "ORDER", "BY", "product_name"], "query_toks_no_value": ["select", "distinct", "product_name", "from", "product", "order", "by", "product_name"], "question": "Sort all the distinct product names in alphabetical order.", "question_toks": ["Sort", "all", "the", "distinct", "product", "names", "in", "alphabetical", "order", "."], "guid": 6642}}
{"text": "Highschooler: ID, name, grade; Friend: student_id, friend_id; Likes: student_id, liked_id | How many high schoolers are there?", "sql": "SELECT count(*) FROM Highschooler", "example": {"db_id": "network_1", "query": "SELECT count(*) FROM Highschooler", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Highschooler"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "highschooler"], "question": "How many high schoolers are there?", "question_toks": ["How", "many", "high", "schoolers", "are", "there", "?"], "guid": 6643}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | Show student ids for all male students.", "sql": "SELECT StuID FROM Student WHERE Sex  =  'M'", "example": {"db_id": "allergy_1", "query": "SELECT StuID FROM Student WHERE Sex  =  'M'", "query_toks": ["SELECT", "StuID", "FROM", "Student", "WHERE", "Sex", "=", "'M", "'"], "query_toks_no_value": ["select", "stuid", "from", "student", "where", "sex", "=", "value"], "question": "Show student ids for all male students.", "question_toks": ["Show", "student", "ids", "for", "all", "male", "students", "."], "guid": 6644}}
{"text": "storm: Storm_ID, Name, Dates_active, Max_speed, Damage_millions_USD, Number_Deaths; region: Region_id, Region_code, Region_name; affected_region: Region_id, Storm_ID, Number_city_affected | What are the names and damage in millions for storms, ordered by their max speeds descending?", "sql": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC", "example": {"db_id": "storm_record", "query": "SELECT name ,  damage_millions_USD FROM storm ORDER BY max_speed DESC", "query_toks": ["SELECT", "name", ",", "damage_millions_USD", "FROM", "storm", "ORDER", "BY", "max_speed", "DESC"], "query_toks_no_value": ["select", "name", ",", "damage_millions_usd", "from", "storm", "order", "by", "max_speed", "desc"], "question": "What are the names and damage in millions for storms, ordered by their max speeds descending?", "question_toks": ["What", "are", "the", "names", "and", "damage", "in", "millions", "for", "storms", ",", "ordered", "by", "their", "max", "speeds", "descending", "?"], "guid": 6645}}
{"text": "Allergy_Type: Allergy, AllergyType; Has_Allergy: StuID, Allergy; Student: StuID, LName, Fname, Age, Sex, Major, Advisor, city_code | How many students live in HKG or CHI?", "sql": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"", "example": {"db_id": "allergy_1", "query": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Student", "WHERE", "city_code", "=", "``", "HKG", "''", "OR", "city_code", "=", "``", "CHI", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "where", "city_code", "=", "value", "or", "city_code", "=", "value"], "question": "How many students live in HKG or CHI?", "question_toks": ["How", "many", "students", "live", "in", "HKG", "or", "CHI", "?"], "guid": 6646}}
{"text": "Web_client_accelerator: id, name, Operating_system, Client, Connection; browser: id, name, market_share; accelerator_compatible_browser: accelerator_id, browser_id, compatible_since_year | List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.", "sql": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'", "example": {"db_id": "browser_web", "query": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'", "query_toks": ["SELECT", "T3.name", "FROM", "web_client_accelerator", "AS", "T1", "JOIN", "accelerator_compatible_browser", "AS", "T2", "ON", "T2.accelerator_id", "=", "T1.id", "JOIN", "browser", "AS", "T3", "ON", "T2.browser_id", "=", "T3.id", "WHERE", "T1.name", "=", "'CACHEbox", "'", "INTERSECT", "SELECT", "T3.name", "FROM", "web_client_accelerator", "AS", "T1", "JOIN", "accelerator_compatible_browser", "AS", "T2", "ON", "T2.accelerator_id", "=", "T1.id", "JOIN", "browser", "AS", "T3", "ON", "T2.browser_id", "=", "T3.id", "WHERE", "T1.name", "=", "'Fasterfox", "'"], "query_toks_no_value": ["select", "t3", ".", "name", "from", "web_client_accelerator", "as", "t1", "join", "accelerator_compatible_browser", "as", "t2", "on", "t2", ".", "accelerator_id", "=", "t1", ".", "id", "join", "browser", "as", "t3", "on", "t2", ".", "browser_id", "=", "t3", ".", "id", "where", "t1", ".", "name", "=", "value", "intersect", "select", "t3", ".", "name", "from", "web_client_accelerator", "as", "t1", "join", "accelerator_compatible_browser", "as", "t2", "on", "t2", ".", "accelerator_id", "=", "t1", ".", "id", "join", "browser", "as", "t3", "on", "t2", ".", "browser_id", "=", "t3", ".", "id", "where", "t1", ".", "name", "=", "value"], "question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.", "question_toks": ["List", "the", "names", "of", "the", "browser", "that", "are", "compatible", "with", "both", "'CACHEbox", "'", "and", "'Fasterfox", "'", "."], "guid": 6647}}
{"text": "building: building_id, Name, Street_address, Years_as_tallest, Height_feet, Floors; Institution: Institution_id, Institution, Location, Founded, Type, Enrollment, Team, Primary_Conference, building_id; protein: common_name, protein_name, divergence_from_human_lineage, accession_number, sequence_length, sequence_identity_to_human_protein, Institution_id | Show the protein name and the institution name.", "sql": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id", "example": {"db_id": "protein_institute", "query": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id", "query_toks": ["SELECT", "T2.protein_name", ",", "T1.institution", "FROM", "institution", "AS", "T1", "JOIN", "protein", "AS", "T2", "ON", "T1.institution_id", "=", "T2.institution_id"], "query_toks_no_value": ["select", "t2", ".", "protein_name", ",", "t1", ".", "institution", "from", "institution", "as", "t1", "join", "protein", "as", "t2", "on", "t1", ".", "institution_id", "=", "t2", ".", "institution_id"], "question": "Show the protein name and the institution name.", "question_toks": ["Show", "the", "protein", "name", "and", "the", "institution", "name", "."], "guid": 6648}}