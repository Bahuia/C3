{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the names of the clients who do not have any booking?", "sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID", "query_toks": ["SELECT", "Customer_Name", "FROM", "Clients", "EXCEPT", "SELECT", "T2.Customer_Name", "FROM", "Bookings", "AS", "T1", "JOIN", "Clients", "AS", "T2", "ON", "T1.Customer_ID", "=", "T2.Client_ID"], "query_toks_no_value": ["select", "customer_name", "from", "clients", "except", "select", "t2", ".", "customer_name", "from", "bookings", "as", "t1", "join", "clients", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "client_id"], "question": "What are the names of the clients who do not have any booking?", "question_toks": ["What", "are", "the", "names", "of", "the", "clients", "who", "do", "not", "have", "any", "booking", "?"], "guid": 8921}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Give the ids of documents with expenses that have the budget code 'SF'.", "sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'", "query_toks": ["SELECT", "document_id", "FROM", "Documents_with_expenses", "WHERE", "budget_type_code", "=", "'SF", "'"], "query_toks_no_value": ["select", "document_id", "from", "documents_with_expenses", "where", "budget_type_code", "=", "value"], "question": "Give the ids of documents with expenses that have the budget code 'SF'.", "question_toks": ["Give", "the", "ids", "of", "documents", "with", "expenses", "that", "have", "the", "budget", "code", "'SF", "'", "."], "guid": 8922}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Find the average access counts of documents with functional area \"Acknowledgement\".", "sql": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"", "example": {"db_id": "document_management", "query": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"", "query_toks": ["SELECT", "avg", "(", "t1.access_count", ")", "FROM", "documents", "AS", "t1", "JOIN", "document_functional_areas", "AS", "t2", "ON", "t1.document_code", "=", "t2.document_code", "JOIN", "functional_areas", "AS", "t3", "ON", "t2.functional_area_code", "=", "t3.functional_area_code", "WHERE", "t3.functional_area_description", "=", "``", "Acknowledgement", "''"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "access_count", ")", "from", "documents", "as", "t1", "join", "document_functional_areas", "as", "t2", "on", "t1", ".", "document_code", "=", "t2", ".", "document_code", "join", "functional_areas", "as", "t3", "on", "t2", ".", "functional_area_code", "=", "t3", ".", "functional_area_code", "where", "t3", ".", "functional_area_description", "=", "value"], "question": "Find the average access counts of documents with functional area \"Acknowledgement\".", "question_toks": ["Find", "the", "average", "access", "counts", "of", "documents", "with", "functional", "area", "``", "Acknowledgement", "''", "."], "guid": 8923}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the ids and names of each document, as well as the number of paragraphs in each?", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "query_toks": ["SELECT", "T1.document_id", ",", "T2.document_name", ",", "count", "(", "*", ")", "FROM", "Paragraphs", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "GROUP", "BY", "T1.document_id"], "query_toks_no_value": ["select", "t1", ".", "document_id", ",", "t2", ".", "document_name", ",", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "group", "by", "t1", ".", "document_id"], "question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "question_toks": ["What", "are", "the", "ids", "and", "names", "of", "each", "document", ",", "as", "well", "as", "the", "number", "of", "paragraphs", "in", "each", "?"], "guid": 8924}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show all template type codes and number of templates for each.", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "query_toks": ["SELECT", "template_type_code", ",", "count", "(", "*", ")", "FROM", "Templates", "GROUP", "BY", "template_type_code"], "query_toks_no_value": ["select", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "group", "by", "template_type_code"], "question": "Show all template type codes and number of templates for each.", "question_toks": ["Show", "all", "template", "type", "codes", "and", "number", "of", "templates", "for", "each", "."], "guid": 8925}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the most frequent status of bookings?", "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Status_Code", "FROM", "BOOKINGS", "GROUP", "BY", "Status_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "status_code", "from", "bookings", "group", "by", "status_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the most frequent status of bookings?", "question_toks": ["What", "is", "the", "most", "frequent", "status", "of", "bookings", "?"], "guid": 8926}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the ids for templates that are not used in any documents?", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "query_toks": ["SELECT", "template_id", "FROM", "Templates", "EXCEPT", "SELECT", "template_id", "FROM", "Documents"], "query_toks_no_value": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents"], "question": "What are the ids for templates that are not used in any documents?", "question_toks": ["What", "are", "the", "ids", "for", "templates", "that", "are", "not", "used", "in", "any", "documents", "?"], "guid": 8927}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the number of document types.", "sql": "SELECT count(*) FROM Ref_document_types", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT count(*) FROM Ref_document_types", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Ref_document_types"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_document_types"], "question": "Show the number of document types.", "question_toks": ["Show", "the", "number", "of", "document", "types", "."], "guid": 8928}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the id of the employee named Ebba.", "sql": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"", "query_toks": ["SELECT", "employee_ID", "FROM", "Employees", "WHERE", "employee_name", "=", "``", "Ebba", "''"], "query_toks_no_value": ["select", "employee_id", "from", "employees", "where", "employee_name", "=", "value"], "question": "Show the id of the employee named Ebba.", "question_toks": ["Show", "the", "id", "of", "the", "employee", "named", "Ebba", "."], "guid": 8929}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Return the type name, type description, and date of creation for each document.", "sql": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code", "query_toks": ["SELECT", "T1.document_type_name", ",", "T1.document_type_description", ",", "T2.Document_date", "FROM", "Ref_document_types", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_type_code", "=", "T2.document_type_code"], "query_toks_no_value": ["select", "t1", ".", "document_type_name", ",", "t1", ".", "document_type_description", ",", "t2", ".", "document_date", "from", "ref_document_types", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_type_code", "=", "t2", ".", "document_type_code"], "question": "Return the type name, type description, and date of creation for each document.", "question_toks": ["Return", "the", "type", "name", ",", "type", "description", ",", "and", "date", "of", "creation", "for", "each", "document", "."], "guid": 8930}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Compute the total order quantities of the product \"photo\".", "sql": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"", "query_toks": ["SELECT", "sum", "(", "T1.Order_Quantity", ")", "FROM", "ORDER_ITEMS", "AS", "T1", "JOIN", "Products", "AS", "T2", "ON", "T1.Product_ID", "=", "T2.Product_ID", "WHERE", "T2.Product_Name", "=", "``", "photo", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "order_quantity", ")", "from", "order_items", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t2", ".", "product_name", "=", "value"], "question": "Compute the total order quantities of the product \"photo\".", "question_toks": ["Compute", "the", "total", "order", "quantities", "of", "the", "product", "``", "photo", "''", "."], "guid": 8931}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What is the template type descriptions for template type code \"AD\".", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "query_toks": ["SELECT", "template_type_description", "FROM", "Ref_template_types", "WHERE", "template_type_code", "=", "``", "AD", "''"], "query_toks_no_value": ["select", "template_type_description", "from", "ref_template_types", "where", "template_type_code", "=", "value"], "question": "What is the template type descriptions for template type code \"AD\".", "question_toks": ["What", "is", "the", "template", "type", "descriptions", "for", "template", "type", "code", "``", "AD", "''", "."], "guid": 8932}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Give me the description of the service type that offers not only the photo product but also the film product.", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'", "query_toks": ["SELECT", "T1.Service_Type_Description", "FROM", "Ref_Service_Types", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Service_Type_Code", "=", "T2.Service_Type_Code", "WHERE", "T2.Product_Name", "=", "'photo", "'", "INTERSECT", "SELECT", "T1.Service_Type_Description", "FROM", "Ref_Service_Types", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Service_Type_Code", "=", "T2.Service_Type_Code", "WHERE", "T2.Product_Name", "=", "'film", "'"], "query_toks_no_value": ["select", "t1", ".", "service_type_description", "from", "ref_service_types", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_type_code", "=", "t2", ".", "service_type_code", "where", "t2", ".", "product_name", "=", "value", "intersect", "select", "t1", ".", "service_type_description", "from", "ref_service_types", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_type_code", "=", "t2", ".", "service_type_code", "where", "t2", ".", "product_name", "=", "value"], "question": "Give me the description of the service type that offers not only the photo product but also the film product.", "question_toks": ["Give", "me", "the", "description", "of", "the", "service", "type", "that", "offers", "not", "only", "the", "photo", "product", "but", "also", "the", "film", "product", "."], "guid": 8933}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the role code with the largest number of employees?", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "role_code", "FROM", "Employees", "GROUP", "BY", "role_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "role_code", "from", "employees", "group", "by", "role_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the role code with the largest number of employees?", "question_toks": ["What", "is", "the", "role", "code", "with", "the", "largest", "number", "of", "employees", "?"], "guid": 8934}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the name and description for role code \"MG\"?", "sql": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"", "query_toks": ["SELECT", "role_name", ",", "role_description", "FROM", "ROLES", "WHERE", "role_code", "=", "``", "MG", "''"], "query_toks_no_value": ["select", "role_name", ",", "role_description", "from", "roles", "where", "role_code", "=", "value"], "question": "What are the name and description for role code \"MG\"?", "question_toks": ["What", "are", "the", "name", "and", "description", "for", "role", "code", "``", "MG", "''", "?"], "guid": 8935}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What is the document type name and the document type description and creation date for all the documents?", "sql": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code", "query_toks": ["SELECT", "T1.document_type_name", ",", "T1.document_type_description", ",", "T2.Document_date", "FROM", "Ref_document_types", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_type_code", "=", "T2.document_type_code"], "query_toks_no_value": ["select", "t1", ".", "document_type_name", ",", "t1", ".", "document_type_description", ",", "t2", ".", "document_date", "from", "ref_document_types", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_type_code", "=", "t2", ".", "document_type_code"], "question": "What is the document type name and the document type description and creation date for all the documents?", "question_toks": ["What", "is", "the", "document", "type", "name", "and", "the", "document", "type", "description", "and", "creation", "date", "for", "all", "the", "documents", "?"], "guid": 8936}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What are all role codes?", "sql": "SELECT role_code FROM ROLES;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT role_code FROM ROLES;", "query_toks": ["SELECT", "role_code", "FROM", "ROLES", ";"], "query_toks_no_value": ["select", "role_code", "from", "roles"], "question": "What are all role codes?", "question_toks": ["What", "are", "all", "role", "codes", "?"], "guid": 8937}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What is the role of the employee named Koby?", "sql": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\";", "query_toks": ["SELECT", "T1.role_description", "FROM", "ROLES", "AS", "T1", "JOIN", "Employees", "AS", "T2", "ON", "T1.role_code", "=", "T2.role_code", "WHERE", "T2.employee_name", "=", "``", "Koby", "''", ";"], "query_toks_no_value": ["select", "t1", ".", "role_description", "from", "roles", "as", "t1", "join", "employees", "as", "t2", "on", "t1", ".", "role_code", "=", "t2", ".", "role_code", "where", "t2", ".", "employee_name", "=", "value"], "question": "What is the role of the employee named Koby?", "question_toks": ["What", "is", "the", "role", "of", "the", "employee", "named", "Koby", "?"], "guid": 8938}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the lowest version number, along with its corresponding template type code.", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "query_toks": ["SELECT", "min", "(", "Version_Number", ")", ",", "template_type_code", "FROM", "Templates"], "query_toks_no_value": ["select", "min", "(", "version_number", ")", ",", "template_type_code", "from", "templates"], "question": "Return the lowest version number, along with its corresponding template type code.", "question_toks": ["Return", "the", "lowest", "version", "number", ",", "along", "with", "its", "corresponding", "template", "type", "code", "."], "guid": 8939}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What are the usernames and passwords of users that have the most common role?", "sql": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "document_management", "query": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "user_name", ",", "password", "FROM", "users", "GROUP", "BY", "role_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "user_name", ",", "password", "from", "users", "group", "by", "role_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the usernames and passwords of users that have the most common role?", "question_toks": ["What", "are", "the", "usernames", "and", "passwords", "of", "users", "that", "have", "the", "most", "common", "role", "?"], "guid": 8940}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What is the average access count of documents?", "sql": "SELECT avg(access_count) FROM documents", "example": {"db_id": "document_management", "query": "SELECT avg(access_count) FROM documents", "query_toks": ["SELECT", "avg", "(", "access_count", ")", "FROM", "documents"], "query_toks_no_value": ["select", "avg", "(", "access_count", ")", "from", "documents"], "question": "What is the average access count of documents?", "question_toks": ["What", "is", "the", "average", "access", "count", "of", "documents", "?"], "guid": 8941}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Return the the names of the drama workshop groups that are located in Feliciaberg city.", "sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"", "query_toks": ["SELECT", "T2.Store_Name", "FROM", "Addresses", "AS", "T1", "JOIN", "Drama_Workshop_Groups", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID", "WHERE", "T1.City_Town", "=", "``", "Feliciaberg", "''"], "query_toks_no_value": ["select", "t2", ".", "store_name", "from", "addresses", "as", "t1", "join", "drama_workshop_groups", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "city_town", "=", "value"], "question": "Return the the names of the drama workshop groups that are located in Feliciaberg city.", "question_toks": ["Return", "the", "the", "names", "of", "the", "drama", "workshop", "groups", "that", "are", "located", "in", "Feliciaberg", "city", "."], "guid": 8942}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show project ids and the number of documents in each project.", "sql": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id", "query_toks": ["SELECT", "project_id", ",", "count", "(", "*", ")", "FROM", "Documents", "GROUP", "BY", "project_id"], "query_toks_no_value": ["select", "project_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "project_id"], "question": "Show project ids and the number of documents in each project.", "question_toks": ["Show", "project", "ids", "and", "the", "number", "of", "documents", "in", "each", "project", "."], "guid": 8943}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What are the names of all the documents, as well as the access counts of each, ordered alphabetically?", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY document_name", "example": {"db_id": "document_management", "query": "SELECT document_name ,  access_count FROM documents ORDER BY document_name", "query_toks": ["SELECT", "document_name", ",", "access_count", "FROM", "documents", "ORDER", "BY", "document_name"], "query_toks_no_value": ["select", "document_name", ",", "access_count", "from", "documents", "order", "by", "document_name"], "question": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?", "question_toks": ["What", "are", "the", "names", "of", "all", "the", "documents", ",", "as", "well", "as", "the", "access", "counts", "of", "each", ",", "ordered", "alphabetically", "?"], "guid": 8944}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Show the minimum, average, maximum order quantity of all invoices.", "sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES", "query_toks": ["SELECT", "min", "(", "Order_Quantity", ")", ",", "avg", "(", "Order_Quantity", ")", ",", "max", "(", "Order_Quantity", ")", "FROM", "INVOICES"], "query_toks_no_value": ["select", "min", "(", "order_quantity", ")", ",", "avg", "(", "order_quantity", ")", ",", "max", "(", "order_quantity", ")", "from", "invoices"], "question": "Show the minimum, average, maximum order quantity of all invoices.", "question_toks": ["Show", "the", "minimum", ",", "average", ",", "maximum", "order", "quantity", "of", "all", "invoices", "."], "guid": 8945}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show the ids for projects with at least 2 documents.", "sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "project_id", "FROM", "Documents", "GROUP", "BY", "project_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "project_id", "from", "documents", "group", "by", "project_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the ids for projects with at least 2 documents.", "question_toks": ["Show", "the", "ids", "for", "projects", "with", "at", "least", "2", "documents", "."], "guid": 8946}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show all distinct template type codes for all templates.", "sql": "SELECT DISTINCT template_type_code FROM Templates", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT DISTINCT template_type_code FROM Templates", "query_toks": ["SELECT", "DISTINCT", "template_type_code", "FROM", "Templates"], "query_toks_no_value": ["select", "distinct", "template_type_code", "from", "templates"], "question": "Show all distinct template type codes for all templates.", "question_toks": ["Show", "all", "distinct", "template", "type", "codes", "for", "all", "templates", "."], "guid": 8947}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the type code of the template type with the description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "query_toks": ["SELECT", "template_type_code", "FROM", "Ref_template_types", "WHERE", "template_type_description", "=", "``", "Book", "''"], "query_toks_no_value": ["select", "template_type_code", "from", "ref_template_types", "where", "template_type_description", "=", "value"], "question": "Return the type code of the template type with the description \"Book\".", "question_toks": ["Return", "the", "type", "code", "of", "the", "template", "type", "with", "the", "description", "``", "Book", "''", "."], "guid": 8948}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | List roles that have more than one employee. List the role description and number of employees.", "sql": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT Roles.role_description , count(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING count(Employees.employee_id)  >  1;", "query_toks": ["SELECT", "Roles.role_description", ",", "count", "(", "Employees.employee_id", ")", "FROM", "ROLES", "JOIN", "Employees", "ON", "Employees.role_code", "=", "Roles.role_code", "GROUP", "BY", "Employees.role_code", "HAVING", "count", "(", "Employees.employee_id", ")", ">", "1", ";"], "query_toks_no_value": ["select", "roles.role_description", ",", "count", "(", "employees.employee_id", ")", "from", "roles", "join", "employees", "on", "employees.role_code", "=", "roles.role_code", "group", "by", "employees.role_code", "having", "count", "(", "employees.employee_id", ")", ">", "value"], "question": "List roles that have more than one employee. List the role description and number of employees.", "question_toks": ["List", "roles", "that", "have", "more", "than", "one", "employee", ".", "List", "the", "role", "description", "and", "number", "of", "employees", "."], "guid": 8949}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | How many documents do we have?", "sql": "SELECT count(*) FROM Documents", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(*) FROM Documents", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Documents"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "documents"], "question": "How many documents do we have?", "question_toks": ["How", "many", "documents", "do", "we", "have", "?"], "guid": 8950}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the statement id and statement detail for the statement that has the most corresponding accounts?", "sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.statement_id", ",", "T2.statement_details", "FROM", "Accounts", "AS", "T1", "JOIN", "Statements", "AS", "T2", "ON", "T1.statement_id", "=", "T2.statement_id", "GROUP", "BY", "T1.statement_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "statement_id", ",", "t2", ".", "statement_details", "from", "accounts", "as", "t1", "join", "statements", "as", "t2", "on", "t1", ".", "statement_id", "=", "t2", ".", "statement_id", "group", "by", "t1", ".", "statement_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the statement id and statement detail for the statement that has the most corresponding accounts?", "question_toks": ["What", "are", "the", "statement", "id", "and", "statement", "detail", "for", "the", "statement", "that", "has", "the", "most", "corresponding", "accounts", "?"], "guid": 8951}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | List the actual delivery date for all the orders with quantity 1", "sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1", "query_toks": ["SELECT", "T1.Actual_Delivery_Date", "FROM", "Customer_Orders", "AS", "T1", "JOIN", "ORDER_ITEMS", "AS", "T2", "ON", "T1.Order_ID", "=", "T2.Order_ID", "WHERE", "T2.Order_Quantity", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "actual_delivery_date", "from", "customer_orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t2", ".", "order_quantity", "=", "value"], "question": "List the actual delivery date for all the orders with quantity 1", "question_toks": ["List", "the", "actual", "delivery", "date", "for", "all", "the", "orders", "with", "quantity", "1"], "guid": 8952}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Show all the Store_Name of drama workshop groups.", "sql": "SELECT Store_Name FROM Drama_Workshop_Groups", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Store_Name FROM Drama_Workshop_Groups", "query_toks": ["SELECT", "Store_Name", "FROM", "Drama_Workshop_Groups"], "query_toks_no_value": ["select", "store_name", "from", "drama_workshop_groups"], "question": "Show all the Store_Name of drama workshop groups.", "question_toks": ["Show", "all", "the", "Store_Name", "of", "drama", "workshop", "groups", "."], "guid": 8953}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the day Number and date of all the documents?", "sql": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date", "query_toks": ["SELECT", "T2.day_Number", ",", "T1.Date_Stored", "FROM", "All_documents", "AS", "T1", "JOIN", "Ref_calendar", "AS", "T2", "ON", "T1.date_stored", "=", "T2.calendar_date"], "query_toks_no_value": ["select", "t2", ".", "day_number", ",", "t1", ".", "date_stored", "from", "all_documents", "as", "t1", "join", "ref_calendar", "as", "t2", "on", "t1", ".", "date_stored", "=", "t2", ".", "calendar_date"], "question": "What is the day Number and date of all the documents?", "question_toks": ["What", "is", "the", "day", "Number", "and", "date", "of", "all", "the", "documents", "?"], "guid": 8954}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the number of locations.", "sql": "SELECT count(*) FROM Ref_locations", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT count(*) FROM Ref_locations", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Ref_locations"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_locations"], "question": "Show the number of locations.", "question_toks": ["Show", "the", "number", "of", "locations", "."], "guid": 8955}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Count the number of templates of the type CV.", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Templates", "WHERE", "template_type_code", "=", "``", "CV", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "templates", "where", "template_type_code", "=", "value"], "question": "Count the number of templates of the type CV.", "question_toks": ["Count", "the", "number", "of", "templates", "of", "the", "type", "CV", "."], "guid": 8956}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the template type description of the template type with the code AD.", "sql": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\"", "query_toks": ["SELECT", "template_type_description", "FROM", "Ref_template_types", "WHERE", "template_type_code", "=", "``", "AD", "''"], "query_toks_no_value": ["select", "template_type_description", "from", "ref_template_types", "where", "template_type_code", "=", "value"], "question": "Return the template type description of the template type with the code AD.", "question_toks": ["Return", "the", "template", "type", "description", "of", "the", "template", "type", "with", "the", "code", "AD", "."], "guid": 8957}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are all the document type codes and document type names?", "sql": "SELECT document_type_code ,  document_type_name FROM Ref_document_types", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT document_type_code ,  document_type_name FROM Ref_document_types", "query_toks": ["SELECT", "document_type_code", ",", "document_type_name", "FROM", "Ref_document_types"], "query_toks_no_value": ["select", "document_type_code", ",", "document_type_name", "from", "ref_document_types"], "question": "What are all the document type codes and document type names?", "question_toks": ["What", "are", "all", "the", "document", "type", "codes", "and", "document", "type", "names", "?"], "guid": 8958}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the phone number of the performer Ashley?", "sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"", "query_toks": ["SELECT", "Customer_Phone", "FROM", "PERFORMERS", "WHERE", "Customer_Name", "=", "``", "Ashley", "''"], "query_toks_no_value": ["select", "customer_phone", "from", "performers", "where", "customer_name", "=", "value"], "question": "What is the phone number of the performer Ashley?", "question_toks": ["What", "is", "the", "phone", "number", "of", "the", "performer", "Ashley", "?"], "guid": 8959}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show ids for all documents in type CV without expense budgets.", "sql": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses", "query_toks": ["SELECT", "document_id", "FROM", "Documents", "WHERE", "document_type_code", "=", "``", "CV", "''", "EXCEPT", "SELECT", "document_id", "FROM", "Documents_with_expenses"], "query_toks_no_value": ["select", "document_id", "from", "documents", "where", "document_type_code", "=", "value", "except", "select", "document_id", "from", "documents_with_expenses"], "question": "Show ids for all documents in type CV without expense budgets.", "question_toks": ["Show", "ids", "for", "all", "documents", "in", "type", "CV", "without", "expense", "budgets", "."], "guid": 8960}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the description for role name \"Proof Reader\".", "sql": "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"", "query_toks": ["SELECT", "role_description", "FROM", "ROLES", "WHERE", "role_name", "=", "``", "Proof", "Reader", "''"], "query_toks_no_value": ["select", "role_description", "from", "roles", "where", "role_name", "=", "value"], "question": "Show the description for role name \"Proof Reader\".", "question_toks": ["Show", "the", "description", "for", "role", "name", "``", "Proof", "Reader", "''", "."], "guid": 8961}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Count the number of templates.", "sql": "SELECT count(*) FROM Templates", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(*) FROM Templates", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Templates"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "templates"], "question": "Count the number of templates.", "question_toks": ["Count", "the", "number", "of", "templates", "."], "guid": 8962}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are all different template ids used for documents, and how many times were each of them used?", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "query_toks": ["SELECT", "template_id", ",", "count", "(", "*", ")", "FROM", "Documents", "GROUP", "BY", "template_id"], "query_toks_no_value": ["select", "template_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "template_id"], "question": "What are all different template ids used for documents, and how many times were each of them used?", "question_toks": ["What", "are", "all", "different", "template", "ids", "used", "for", "documents", ",", "and", "how", "many", "times", "were", "each", "of", "them", "used", "?"], "guid": 8963}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Show the names of all the clients with no booking.", "sql": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID", "query_toks": ["SELECT", "Customer_Name", "FROM", "Clients", "EXCEPT", "SELECT", "T2.Customer_Name", "FROM", "Bookings", "AS", "T1", "JOIN", "Clients", "AS", "T2", "ON", "T1.Customer_ID", "=", "T2.Client_ID"], "query_toks_no_value": ["select", "customer_name", "from", "clients", "except", "select", "t2", ".", "customer_name", "from", "bookings", "as", "t1", "join", "clients", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "client_id"], "question": "Show the names of all the clients with no booking.", "question_toks": ["Show", "the", "names", "of", "all", "the", "clients", "with", "no", "booking", "."], "guid": 8964}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | List all budget type codes and descriptions.", "sql": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes", "query_toks": ["SELECT", "budget_type_code", ",", "budget_type_description", "FROM", "Ref_budget_codes"], "query_toks_no_value": ["select", "budget_type_code", ",", "budget_type_description", "from", "ref_budget_codes"], "question": "List all budget type codes and descriptions.", "question_toks": ["List", "all", "budget", "type", "codes", "and", "descriptions", "."], "guid": 8965}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | How many documents do not have any expense?", "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Documents", "WHERE", "document_id", "NOT", "IN", "(", "SELECT", "document_id", "FROM", "Documents_with_expenses", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "documents", "where", "document_id", "not", "in", "(", "select", "document_id", "from", "documents_with_expenses", ")"], "question": "How many documents do not have any expense?", "question_toks": ["How", "many", "documents", "do", "not", "have", "any", "expense", "?"], "guid": 8966}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What is the structure of the document with the least number of accesses?", "sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "document_management", "query": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.document_structure_description", "FROM", "documents", "AS", "t1", "JOIN", "document_structures", "AS", "t2", "ON", "t1.document_structure_code", "=", "t2.document_structure_code", "GROUP", "BY", "t1.document_structure_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "document_structure_description", "from", "documents", "as", "t1", "join", "document_structures", "as", "t2", "on", "t1", ".", "document_structure_code", "=", "t2", ".", "document_structure_code", "group", "by", "t1", ".", "document_structure_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the structure of the document with the least number of accesses?", "question_toks": ["What", "is", "the", "structure", "of", "the", "document", "with", "the", "least", "number", "of", "accesses", "?"], "guid": 8967}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?", "sql": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'", "query_toks": ["SELECT", "document_type_code", ",", "document_name", ",", "document_description", "FROM", "Documents", "WHERE", "document_name", "=", "'Noel", "CV", "'", "OR", "document_name", "=", "'King", "Book", "'"], "query_toks_no_value": ["select", "document_type_code", ",", "document_name", ",", "document_description", "from", "documents", "where", "document_name", "=", "value", "or", "document_name", "=", "value"], "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?", "question_toks": ["What", "are", "the", "type", "come", ",", "name", ",", "and", "description", "of", "the", "document", "that", "has", "either", "the", "name", "'Noel", "CV", "'", "or", "'King", "Book", "'", "?"], "guid": 8968}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the ids of documents which don't have expense budgets?", "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "query_toks": ["SELECT", "document_id", "FROM", "Documents", "EXCEPT", "SELECT", "document_id", "FROM", "Documents_with_expenses"], "query_toks_no_value": ["select", "document_id", "from", "documents", "except", "select", "document_id", "from", "documents_with_expenses"], "question": "What are the ids of documents which don't have expense budgets?", "question_toks": ["What", "are", "the", "ids", "of", "documents", "which", "do", "n't", "have", "expense", "budgets", "?"], "guid": 8969}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show budget type codes and the number of documents in each budget type.", "sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "query_toks": ["SELECT", "budget_type_code", ",", "count", "(", "*", ")", "FROM", "Documents_with_expenses", "GROUP", "BY", "budget_type_code"], "query_toks_no_value": ["select", "budget_type_code", ",", "count", "(", "*", ")", "from", "documents_with_expenses", "group", "by", "budget_type_code"], "question": "Show budget type codes and the number of documents in each budget type.", "question_toks": ["Show", "budget", "type", "codes", "and", "the", "number", "of", "documents", "in", "each", "budget", "type", "."], "guid": 8970}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the type codes and descriptions of each budget type?", "sql": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes", "query_toks": ["SELECT", "budget_type_code", ",", "budget_type_description", "FROM", "Ref_budget_codes"], "query_toks_no_value": ["select", "budget_type_code", ",", "budget_type_description", "from", "ref_budget_codes"], "question": "What are the type codes and descriptions of each budget type?", "question_toks": ["What", "are", "the", "type", "codes", "and", "descriptions", "of", "each", "budget", "type", "?"], "guid": 8971}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the phones and emails of workshop groups in which services are performed?", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID", "query_toks": ["SELECT", "T1.Store_Phone", ",", "T1.Store_Email_Address", "FROM", "Drama_Workshop_Groups", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Workshop_Group_ID", "=", "T2.Workshop_Group_ID"], "query_toks_no_value": ["select", "t1", ".", "store_phone", ",", "t1", ".", "store_email_address", "from", "drama_workshop_groups", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "workshop_group_id", "=", "t2", ".", "workshop_group_id"], "question": "What are the phones and emails of workshop groups in which services are performed?", "question_toks": ["What", "are", "the", "phones", "and", "emails", "of", "workshop", "groups", "in", "which", "services", "are", "performed", "?"], "guid": 8972}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show all document ids, names and the number of paragraphs in each document.", "sql": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id", "query_toks": ["SELECT", "T1.document_id", ",", "T2.document_name", ",", "count", "(", "*", ")", "FROM", "Paragraphs", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "GROUP", "BY", "T1.document_id"], "query_toks_no_value": ["select", "t1", ".", "document_id", ",", "t2", ".", "document_name", ",", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "group", "by", "t1", ".", "document_id"], "question": "Show all document ids, names and the number of paragraphs in each document.", "question_toks": ["Show", "all", "document", "ids", ",", "names", "and", "the", "number", "of", "paragraphs", "in", "each", "document", "."], "guid": 8973}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the names of employees with role name Editor.", "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"", "query_toks": ["SELECT", "T1.employee_name", "FROM", "Employees", "AS", "T1", "JOIN", "ROLES", "AS", "T2", "ON", "T1.role_code", "=", "T2.role_code", "WHERE", "T2.role_name", "=", "``", "Editor", "''"], "query_toks_no_value": ["select", "t1", ".", "employee_name", "from", "employees", "as", "t1", "join", "roles", "as", "t2", "on", "t1", ".", "role_code", "=", "t2", ".", "role_code", "where", "t2", ".", "role_name", "=", "value"], "question": "Show the names of employees with role name Editor.", "question_toks": ["Show", "the", "names", "of", "employees", "with", "role", "name", "Editor", "."], "guid": 8974}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Find the starting date and ending data in location for the document named \"Robin CV\".", "sql": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"", "query_toks": ["SELECT", "T1.date_in_location_from", ",", "T1.date_in_locaton_to", "FROM", "Document_locations", "AS", "T1", "JOIN", "All_documents", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T2.document_name", "=", "``", "Robin", "CV", "''"], "query_toks_no_value": ["select", "t1", ".", "date_in_location_from", ",", "t1", ".", "date_in_locaton_to", "from", "document_locations", "as", "t1", "join", "all_documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "document_name", "=", "value"], "question": "Find the starting date and ending data in location for the document named \"Robin CV\".", "question_toks": ["Find", "the", "starting", "date", "and", "ending", "data", "in", "location", "for", "the", "document", "named", "``", "Robin", "CV", "''", "."], "guid": 8975}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | How many documents have the status code done?", "sql": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT count(*) FROM Documents WHERE document_status_code = \"done\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Documents", "WHERE", "document_status_code", "=", "``", "done", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "documents", "where", "document_status_code", "=", "value"], "question": "How many documents have the status code done?", "question_toks": ["How", "many", "documents", "have", "the", "status", "code", "done", "?"], "guid": 8976}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What is the project id and detail for the project with at least two documents?", "sql": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2", "query_toks": ["SELECT", "T1.project_id", ",", "T1.project_details", "FROM", "Projects", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "GROUP", "BY", "T1.project_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "project_id", ",", "t1", ".", "project_details", "from", "projects", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "group", "by", "t1", ".", "project_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What is the project id and detail for the project with at least two documents?", "question_toks": ["What", "is", "the", "project", "id", "and", "detail", "for", "the", "project", "with", "at", "least", "two", "documents", "?"], "guid": 8977}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the type code of the template type that the most templates belong to.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "template_type_code", "FROM", "Templates", "GROUP", "BY", "template_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the type code of the template type that the most templates belong to.", "question_toks": ["Return", "the", "type", "code", "of", "the", "template", "type", "that", "the", "most", "templates", "belong", "to", "."], "guid": 8978}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show the document id with paragraph text 'Brazil' and 'Ireland'.", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "query_toks": ["SELECT", "document_id", "FROM", "Paragraphs", "WHERE", "paragraph_text", "=", "'Brazil", "'", "INTERSECT", "SELECT", "document_id", "FROM", "Paragraphs", "WHERE", "paragraph_text", "=", "'Ireland", "'"], "query_toks_no_value": ["select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "value", "intersect", "select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "value"], "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "question_toks": ["Show", "the", "document", "id", "with", "paragraph", "text", "'Brazil", "'", "and", "'Ireland", "'", "."], "guid": 8979}}