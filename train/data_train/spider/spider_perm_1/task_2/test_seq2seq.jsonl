{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Which cities have at least one customer but no performer?", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID", "query_toks": ["SELECT", "T1.City_Town", "FROM", "Addresses", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID", "EXCEPT", "SELECT", "T1.City_Town", "FROM", "Addresses", "AS", "T1", "JOIN", "Performers", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID"], "query_toks_no_value": ["select", "t1", ".", "city_town", "from", "addresses", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "except", "select", "t1", ".", "city_town", "from", "addresses", "as", "t1", "join", "performers", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id"], "question": "Which cities have at least one customer but no performer?", "question_toks": ["Which", "cities", "have", "at", "least", "one", "customer", "but", "no", "performer", "?"], "guid": 8980}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the order date of each booking?", "sql": "SELECT Order_Date FROM BOOKINGS", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Order_Date FROM BOOKINGS", "query_toks": ["SELECT", "Order_Date", "FROM", "BOOKINGS"], "query_toks_no_value": ["select", "order_date", "from", "bookings"], "question": "What is the order date of each booking?", "question_toks": ["What", "is", "the", "order", "date", "of", "each", "booking", "?"], "guid": 8981}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the actual delivery dates of orders with quantity 1?", "sql": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1", "query_toks": ["SELECT", "T1.Actual_Delivery_Date", "FROM", "Customer_Orders", "AS", "T1", "JOIN", "ORDER_ITEMS", "AS", "T2", "ON", "T1.Order_ID", "=", "T2.Order_ID", "WHERE", "T2.Order_Quantity", "=", "1"], "query_toks_no_value": ["select", "t1", ".", "actual_delivery_date", "from", "customer_orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t2", ".", "order_quantity", "=", "value"], "question": "What are the actual delivery dates of orders with quantity 1?", "question_toks": ["What", "are", "the", "actual", "delivery", "dates", "of", "orders", "with", "quantity", "1", "?"], "guid": 8982}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | List all location codes and location names.", "sql": "SELECT location_code ,  location_name FROM Ref_locations", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_code ,  location_name FROM Ref_locations", "query_toks": ["SELECT", "location_code", ",", "location_name", "FROM", "Ref_locations"], "query_toks_no_value": ["select", "location_code", ",", "location_name", "from", "ref_locations"], "question": "List all location codes and location names.", "question_toks": ["List", "all", "location", "codes", "and", "location", "names", "."], "guid": 8983}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show template ids, version numbers, and template type codes for all templates.", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "query_toks": ["SELECT", "template_id", ",", "version_number", ",", "template_type_code", "FROM", "Templates"], "query_toks_no_value": ["select", "template_id", ",", "version_number", ",", "template_type_code", "from", "templates"], "question": "Show template ids, version numbers, and template type codes for all templates.", "question_toks": ["Show", "template", "ids", ",", "version", "numbers", ",", "and", "template", "type", "codes", "for", "all", "templates", "."], "guid": 8984}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the paragraph texts for the document with the name 'Customer reviews'?", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "query_toks": ["SELECT", "T1.paragraph_text", "FROM", "Paragraphs", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T2.document_name", "=", "``", "Customer", "reviews", "''"], "query_toks_no_value": ["select", "t1", ".", "paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "document_name", "=", "value"], "question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "question_toks": ["What", "are", "the", "paragraph", "texts", "for", "the", "document", "with", "the", "name", "'Customer", "reviews", "'", "?"], "guid": 8985}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the ids of all employees who don't destroy any document.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "query_toks": ["SELECT", "employee_id", "FROM", "Employees", "EXCEPT", "SELECT", "Destroyed_by_Employee_ID", "FROM", "Documents_to_be_destroyed"], "query_toks_no_value": ["select", "employee_id", "from", "employees", "except", "select", "destroyed_by_employee_id", "from", "documents_to_be_destroyed"], "question": "Show the ids of all employees who don't destroy any document.", "question_toks": ["Show", "the", "ids", "of", "all", "employees", "who", "do", "n't", "destroy", "any", "document", "."], "guid": 8986}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the descriptions of the service types with product price above 100?", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100", "query_toks": ["SELECT", "T1.Service_Type_Description", "FROM", "Ref_Service_Types", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Service_Type_Code", "=", "T2.Service_Type_Code", "WHERE", "T2.Product_Price", ">", "100"], "query_toks_no_value": ["select", "t1", ".", "service_type_description", "from", "ref_service_types", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_type_code", "=", "t2", ".", "service_type_code", "where", "t2", ".", "product_price", ">", "value"], "question": "What are the descriptions of the service types with product price above 100?", "question_toks": ["What", "are", "the", "descriptions", "of", "the", "service", "types", "with", "product", "price", "above", "100", "?"], "guid": 8987}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the names of workshop groups in which services with product name \"film\" are performed?", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"", "query_toks": ["SELECT", "T1.Store_Phone", ",", "T1.Store_Email_Address", "FROM", "Drama_Workshop_Groups", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Workshop_Group_ID", "=", "T2.Workshop_Group_ID", "WHERE", "T2.Product_Name", "=", "``", "film", "''"], "query_toks_no_value": ["select", "t1", ".", "store_phone", ",", "t1", ".", "store_email_address", "from", "drama_workshop_groups", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "workshop_group_id", "=", "t2", ".", "workshop_group_id", "where", "t2", ".", "product_name", "=", "value"], "question": "What are the names of workshop groups in which services with product name \"film\" are performed?", "question_toks": ["What", "are", "the", "names", "of", "workshop", "groups", "in", "which", "services", "with", "product", "name", "``", "film", "''", "are", "performed", "?"], "guid": 8988}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What is the template type code of the template used by document with the name \"Data base\"?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "query_toks": ["SELECT", "T1.template_type_code", "FROM", "Templates", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id", "WHERE", "T2.document_name", "=", "``", "Data", "base", "''"], "query_toks_no_value": ["select", "t1", ".", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "where", "t2", ".", "document_name", "=", "value"], "question": "What is the template type code of the template used by document with the name \"Data base\"?", "question_toks": ["What", "is", "the", "template", "type", "code", "of", "the", "template", "used", "by", "document", "with", "the", "name", "``", "Data", "base", "''", "?"], "guid": 8989}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the id of the product ordered the most often on invoices.", "sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Product_ID", "FROM", "INVOICES", "GROUP", "BY", "Product_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_id", "from", "invoices", "group", "by", "product_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the id of the product ordered the most often on invoices.", "question_toks": ["Find", "the", "id", "of", "the", "product", "ordered", "the", "most", "often", "on", "invoices", "."], "guid": 8990}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What is the receipt date of the document with id 3?", "sql": "SELECT receipt_date FROM Documents WHERE document_id = 3;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT receipt_date FROM Documents WHERE document_id = 3;", "query_toks": ["SELECT", "receipt_date", "FROM", "Documents", "WHERE", "document_id", "=", "3", ";"], "query_toks_no_value": ["select", "receipt_date", "from", "documents", "where", "document_id", "=", "value"], "question": "What is the receipt date of the document with id 3?", "question_toks": ["What", "is", "the", "receipt", "date", "of", "the", "document", "with", "id", "3", "?"], "guid": 8991}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | List all employees in the circulation history of the document with id 1. List the employee's name.", "sql": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1;", "query_toks": ["SELECT", "Employees.employee_name", "FROM", "Employees", "JOIN", "Circulation_History", "ON", "Circulation_History.employee_id", "=", "Employees.employee_id", "WHERE", "Circulation_History.document_id", "=", "1", ";"], "query_toks_no_value": ["select", "employees.employee_name", "from", "employees", "join", "circulation_history", "on", "circulation_history.employee_id", "=", "employees.employee_id", "where", "circulation_history.document_id", "=", "value"], "question": "List all employees in the circulation history of the document with id 1. List the employee's name.", "question_toks": ["List", "all", "employees", "in", "the", "circulation", "history", "of", "the", "document", "with", "id", "1", ".", "List", "the", "employee", "'s", "name", "."], "guid": 8992}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Which workshop groups have bookings with status code \"stop\"? Give me the names.", "sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"", "query_toks": ["SELECT", "T2.Store_Name", "FROM", "Bookings", "AS", "T1", "JOIN", "Drama_Workshop_Groups", "AS", "T2", "ON", "T1.Workshop_Group_ID", "=", "T2.Workshop_Group_ID", "WHERE", "T1.Status_Code", "=", "``", "stop", "''"], "query_toks_no_value": ["select", "t2", ".", "store_name", "from", "bookings", "as", "t1", "join", "drama_workshop_groups", "as", "t2", "on", "t1", ".", "workshop_group_id", "=", "t2", ".", "workshop_group_id", "where", "t1", ".", "status_code", "=", "value"], "question": "Which workshop groups have bookings with status code \"stop\"? Give me the names.", "question_toks": ["Which", "workshop", "groups", "have", "bookings", "with", "status", "code", "``", "stop", "''", "?", "Give", "me", "the", "names", "."], "guid": 8993}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What document type codes do we have?", "sql": "SELECT document_type_code FROM Ref_Document_Types;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_type_code FROM Ref_Document_Types;", "query_toks": ["SELECT", "document_type_code", "FROM", "Ref_Document_Types", ";"], "query_toks_no_value": ["select", "document_type_code", "from", "ref_document_types"], "question": "What document type codes do we have?", "question_toks": ["What", "document", "type", "codes", "do", "we", "have", "?"], "guid": 8994}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the payment method that is used the most often in all the invoices. Give me its code.", "sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "payment_method_code", "FROM", "INVOICES", "GROUP", "BY", "payment_method_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method_code", "from", "invoices", "group", "by", "payment_method_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the payment method that is used the most often in all the invoices. Give me its code.", "question_toks": ["Find", "the", "payment", "method", "that", "is", "used", "the", "most", "often", "in", "all", "the", "invoices", ".", "Give", "me", "its", "code", "."], "guid": 8995}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the description and code of the type of service that is performed the most often?", "sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Service_Type_Description", ",", "T1.Service_Type_Code", "FROM", "Ref_Service_Types", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Service_Type_Code", "=", "T2.Service_Type_Code", "GROUP", "BY", "T1.Service_Type_Code", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "service_type_description", ",", "t1", ".", "service_type_code", "from", "ref_service_types", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_type_code", "=", "t2", ".", "service_type_code", "group", "by", "t1", ".", "service_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the description and code of the type of service that is performed the most often?", "question_toks": ["What", "is", "the", "description", "and", "code", "of", "the", "type", "of", "service", "that", "is", "performed", "the", "most", "often", "?"], "guid": 8996}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the name and description for document type code RV?", "sql": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"", "query_toks": ["SELECT", "document_type_name", ",", "document_type_description", "FROM", "Ref_document_types", "WHERE", "document_type_code", "=", "``", "RV", "''"], "query_toks_no_value": ["select", "document_type_name", ",", "document_type_description", "from", "ref_document_types", "where", "document_type_code", "=", "value"], "question": "What is the name and description for document type code RV?", "question_toks": ["What", "is", "the", "name", "and", "description", "for", "document", "type", "code", "RV", "?"], "guid": 8997}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show all template type codes and the number of documents using each type.", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "query_toks": ["SELECT", "T1.template_type_code", ",", "count", "(", "*", ")", "FROM", "Templates", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id", "GROUP", "BY", "T1.template_type_code"], "query_toks_no_value": ["select", "t1", ".", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "group", "by", "t1", ".", "template_type_code"], "question": "Show all template type codes and the number of documents using each type.", "question_toks": ["Show", "all", "template", "type", "codes", "and", "the", "number", "of", "documents", "using", "each", "type", "."], "guid": 8998}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What is the document name and template id for document with description with the letter 'w' in it?", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "query_toks": ["SELECT", "document_name", ",", "template_id", "FROM", "Documents", "WHERE", "Document_Description", "LIKE", "``", "%", "w", "%", "''"], "query_toks_no_value": ["select", "document_name", ",", "template_id", "from", "documents", "where", "document_description", "like", "value"], "question": "What is the document name and template id for document with description with the letter 'w' in it?", "question_toks": ["What", "is", "the", "document", "name", "and", "template", "id", "for", "document", "with", "description", "with", "the", "letter", "'w", "'", "in", "it", "?"], "guid": 8999}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show all account ids and account details.", "sql": "SELECT account_id ,  account_details FROM Accounts", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT account_id ,  account_details FROM Accounts", "query_toks": ["SELECT", "account_id", ",", "account_details", "FROM", "Accounts"], "query_toks_no_value": ["select", "account_id", ",", "account_details", "from", "accounts"], "question": "Show all account ids and account details.", "question_toks": ["Show", "all", "account", "ids", "and", "account", "details", "."], "guid": 9000}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | How many documents have expenses?", "sql": "SELECT count(*) FROM Documents_with_expenses", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Documents_with_expenses", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Documents_with_expenses"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "documents_with_expenses"], "question": "How many documents have expenses?", "question_toks": ["How", "many", "documents", "have", "expenses", "?"], "guid": 9001}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the names of documents that use templates with the code BK?", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "query_toks": ["SELECT", "T2.document_name", "FROM", "Templates", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id", "WHERE", "T1.template_type_code", "=", "``", "BK", "''"], "query_toks_no_value": ["select", "t2", ".", "document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "where", "t1", ".", "template_type_code", "=", "value"], "question": "What are the names of documents that use templates with the code BK?", "question_toks": ["What", "are", "the", "names", "of", "documents", "that", "use", "templates", "with", "the", "code", "BK", "?"], "guid": 9002}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the name of the most expensive product?", "sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1", "query_toks": ["SELECT", "Product_Name", "FROM", "PRODUCTS", "ORDER", "BY", "Product_Price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_name", "from", "products", "order", "by", "product_price", "desc", "limit", "value"], "question": "What is the name of the most expensive product?", "question_toks": ["What", "is", "the", "name", "of", "the", "most", "expensive", "product", "?"], "guid": 9003}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the role name and role description for employee called Ebba?", "sql": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"", "query_toks": ["SELECT", "T2.role_name", ",", "T2.role_description", "FROM", "Employees", "AS", "T1", "JOIN", "ROLES", "AS", "T2", "ON", "T1.role_code", "=", "T2.role_code", "WHERE", "T1.employee_name", "=", "``", "Ebba", "''"], "query_toks_no_value": ["select", "t2", ".", "role_name", ",", "t2", ".", "role_description", "from", "employees", "as", "t1", "join", "roles", "as", "t2", "on", "t1", ".", "role_code", "=", "t2", ".", "role_code", "where", "t1", ".", "employee_name", "=", "value"], "question": "What is the role name and role description for employee called Ebba?", "question_toks": ["What", "is", "the", "role", "name", "and", "role", "description", "for", "employee", "called", "Ebba", "?"], "guid": 9004}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Find the description of the most popular role among the users that have logged in.", "sql": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "document_management", "query": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "role_description", "FROM", "ROLES", "WHERE", "role_code", "=", "(", "SELECT", "role_code", "FROM", "users", "WHERE", "user_login", "=", "1", "GROUP", "BY", "role_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "role_description", "from", "roles", "where", "role_code", "=", "(", "select", "role_code", "from", "users", "where", "user_login", "=", "value", "group", "by", "role_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "Find the description of the most popular role among the users that have logged in.", "question_toks": ["Find", "the", "description", "of", "the", "most", "popular", "role", "among", "the", "users", "that", "have", "logged", "in", "."], "guid": 9005}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the ids of templates with template type code PP or PPT?", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "query_toks": ["SELECT", "template_id", "FROM", "Templates", "WHERE", "template_type_code", "=", "``", "PP", "''", "OR", "template_type_code", "=", "``", "PPT", "''"], "query_toks_no_value": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "value", "or", "template_type_code", "=", "value"], "question": "What are the ids of templates with template type code PP or PPT?", "question_toks": ["What", "are", "the", "ids", "of", "templates", "with", "template", "type", "code", "PP", "or", "PPT", "?"], "guid": 9006}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What is the id of the project with least number of documents?", "sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "project_id", "FROM", "Documents", "GROUP", "BY", "project_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "project_id", "from", "documents", "group", "by", "project_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the id of the project with least number of documents?", "question_toks": ["What", "is", "the", "id", "of", "the", "project", "with", "least", "number", "of", "documents", "?"], "guid": 9007}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | List all document ids with at least two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "document_id", "FROM", "Paragraphs", "GROUP", "BY", "document_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "List all document ids with at least two paragraphs.", "question_toks": ["List", "all", "document", "ids", "with", "at", "least", "two", "paragraphs", "."], "guid": 9008}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the id for the employee called Ebba?", "sql": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT employee_ID FROM Employees WHERE employee_name  =  \"Ebba\"", "query_toks": ["SELECT", "employee_ID", "FROM", "Employees", "WHERE", "employee_name", "=", "``", "Ebba", "''"], "query_toks_no_value": ["select", "employee_id", "from", "employees", "where", "employee_name", "=", "value"], "question": "What is the id for the employee called Ebba?", "question_toks": ["What", "is", "the", "id", "for", "the", "employee", "called", "Ebba", "?"], "guid": 9009}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the different location codes for documents?", "sql": "SELECT DISTINCT location_code FROM Document_locations", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT DISTINCT location_code FROM Document_locations", "query_toks": ["SELECT", "DISTINCT", "location_code", "FROM", "Document_locations"], "query_toks_no_value": ["select", "distinct", "location_code", "from", "document_locations"], "question": "What are the different location codes for documents?", "question_toks": ["What", "are", "the", "different", "location", "codes", "for", "documents", "?"], "guid": 9010}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the name of the marketing region that the store Rob Dinning belongs to?", "sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"", "query_toks": ["SELECT", "T1.Marketing_Region_Name", "FROM", "Marketing_Regions", "AS", "T1", "JOIN", "Stores", "AS", "T2", "ON", "T1.Marketing_Region_Code", "=", "T2.Marketing_Region_Code", "WHERE", "T2.Store_Name", "=", "``", "Rob", "Dinning", "''"], "query_toks_no_value": ["select", "t1", ".", "marketing_region_name", "from", "marketing_regions", "as", "t1", "join", "stores", "as", "t2", "on", "t1", ".", "marketing_region_code", "=", "t2", ".", "marketing_region_code", "where", "t2", ".", "store_name", "=", "value"], "question": "What is the name of the marketing region that the store Rob Dinning belongs to?", "question_toks": ["What", "is", "the", "name", "of", "the", "marketing", "region", "that", "the", "store", "Rob", "Dinning", "belongs", "to", "?"], "guid": 9011}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the location name of the document \"Robin CV\"?", "sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"", "query_toks": ["SELECT", "T3.location_name", "FROM", "All_documents", "AS", "T1", "JOIN", "Document_locations", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "JOIN", "Ref_locations", "AS", "T3", "ON", "T2.location_code", "=", "T3.location_code", "WHERE", "T1.document_name", "=", "``", "Robin", "CV", "''"], "query_toks_no_value": ["select", "t3", ".", "location_name", "from", "all_documents", "as", "t1", "join", "document_locations", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "join", "ref_locations", "as", "t3", "on", "t2", ".", "location_code", "=", "t3", ".", "location_code", "where", "t1", ".", "document_name", "=", "value"], "question": "What is the location name of the document \"Robin CV\"?", "question_toks": ["What", "is", "the", "location", "name", "of", "the", "document", "``", "Robin", "CV", "''", "?"], "guid": 9012}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the names of the workshop groups that have bookings with status code \"stop\"?", "sql": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"", "query_toks": ["SELECT", "T2.Store_Name", "FROM", "Bookings", "AS", "T1", "JOIN", "Drama_Workshop_Groups", "AS", "T2", "ON", "T1.Workshop_Group_ID", "=", "T2.Workshop_Group_ID", "WHERE", "T1.Status_Code", "=", "``", "stop", "''"], "query_toks_no_value": ["select", "t2", ".", "store_name", "from", "bookings", "as", "t1", "join", "drama_workshop_groups", "as", "t2", "on", "t1", ".", "workshop_group_id", "=", "t2", ".", "workshop_group_id", "where", "t1", ".", "status_code", "=", "value"], "question": "What are the names of the workshop groups that have bookings with status code \"stop\"?", "question_toks": ["What", "are", "the", "names", "of", "the", "workshop", "groups", "that", "have", "bookings", "with", "status", "code", "``", "stop", "''", "?"], "guid": 9013}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are all the calendar dates and day Numbers?", "sql": "SELECT calendar_date ,  day_Number FROM Ref_calendar", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT calendar_date ,  day_Number FROM Ref_calendar", "query_toks": ["SELECT", "calendar_date", ",", "day_Number", "FROM", "Ref_calendar"], "query_toks_no_value": ["select", "calendar_date", ",", "day_number", "from", "ref_calendar"], "question": "What are all the calendar dates and day Numbers?", "question_toks": ["What", "are", "all", "the", "calendar", "dates", "and", "day", "Numbers", "?"], "guid": 9014}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the names and ids of documents that have the type code BK?", "sql": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"", "query_toks": ["SELECT", "document_name", ",", "document_id", "FROM", "Documents", "WHERE", "document_type_code", "=", "``", "BK", "''"], "query_toks_no_value": ["select", "document_name", ",", "document_id", "from", "documents", "where", "document_type_code", "=", "value"], "question": "What are the names and ids of documents that have the type code BK?", "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "documents", "that", "have", "the", "type", "code", "BK", "?"], "guid": 9015}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the ids of documents with the type code CV that do not have expenses.", "sql": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses", "query_toks": ["SELECT", "document_id", "FROM", "Documents", "WHERE", "document_type_code", "=", "``", "CV", "''", "EXCEPT", "SELECT", "document_id", "FROM", "Documents_with_expenses"], "query_toks_no_value": ["select", "document_id", "from", "documents", "where", "document_type_code", "=", "value", "except", "select", "document_id", "from", "documents_with_expenses"], "question": "What are the ids of documents with the type code CV that do not have expenses.", "question_toks": ["What", "are", "the", "ids", "of", "documents", "with", "the", "type", "code", "CV", "that", "do", "not", "have", "expenses", "."], "guid": 9016}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?", "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;", "query_toks": ["SELECT", "T2.employee_name", ",", "T3.employee_name", "FROM", "Documents_to_be_destroyed", "AS", "T1", "JOIN", "Employees", "AS", "T2", "ON", "T1.Destruction_Authorised_by_Employee_ID", "=", "T2.employee_id", "JOIN", "Employees", "AS", "T3", "ON", "T1.Destroyed_by_Employee_ID", "=", "T3.employee_id", ";"], "query_toks_no_value": ["select", "t2", ".", "employee_name", ",", "t3", ".", "employee_name", "from", "documents_to_be_destroyed", "as", "t1", "join", "employees", "as", "t2", "on", "t1", ".", "destruction_authorised_by_employee_id", "=", "t2", ".", "employee_id", "join", "employees", "as", "t3", "on", "t1", ".", "destroyed_by_employee_id", "=", "t3", ".", "employee_id"], "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?", "question_toks": ["What", "are", "the", "names", "of", "the", "employees", "who", "authorised", "the", "destruction", "and", "the", "employees", "who", "destroyed", "the", "corresponding", "documents", "?"], "guid": 9017}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What is the description for the budget type with code ORG?", "sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"", "query_toks": ["SELECT", "budget_type_description", "FROM", "Ref_budget_codes", "WHERE", "budget_type_code", "=", "``", "ORG", "''"], "query_toks_no_value": ["select", "budget_type_description", "from", "ref_budget_codes", "where", "budget_type_code", "=", "value"], "question": "What is the description for the budget type with code ORG?", "question_toks": ["What", "is", "the", "description", "for", "the", "budget", "type", "with", "code", "ORG", "?"], "guid": 9018}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | How many bookings do we have?", "sql": "SELECT count(*) FROM BOOKINGS", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT count(*) FROM BOOKINGS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "BOOKINGS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "bookings"], "question": "How many bookings do we have?", "question_toks": ["How", "many", "bookings", "do", "we", "have", "?"], "guid": 9019}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Give the codes of document types that have more than 2 corresponding documents.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2", "example": {"db_id": "document_management", "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2", "query_toks": ["SELECT", "document_type_code", "FROM", "documents", "GROUP", "BY", "document_type_code", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "group", "by", "document_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Give the codes of document types that have more than 2 corresponding documents.", "question_toks": ["Give", "the", "codes", "of", "document", "types", "that", "have", "more", "than", "2", "corresponding", "documents", "."], "guid": 9020}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show the ids and names of all documents.", "sql": "SELECT document_id ,  document_name FROM Documents", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_id ,  document_name FROM Documents", "query_toks": ["SELECT", "document_id", ",", "document_name", "FROM", "Documents"], "query_toks_no_value": ["select", "document_id", ",", "document_name", "from", "documents"], "question": "Show the ids and names of all documents.", "question_toks": ["Show", "the", "ids", "and", "names", "of", "all", "documents", "."], "guid": 9021}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the number of distinct currency codes used in drama workshop groups.", "sql": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Currency_Code", ")", "FROM", "Drama_Workshop_Groups"], "query_toks_no_value": ["select", "count", "(", "distinct", "currency_code", ")", "from", "drama_workshop_groups"], "question": "Find the number of distinct currency codes used in drama workshop groups.", "question_toks": ["Find", "the", "number", "of", "distinct", "currency", "codes", "used", "in", "drama", "workshop", "groups", "."], "guid": 9022}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the different statement ids on accounts, and the number of accounts for each?", "sql": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID", "query_toks": ["SELECT", "STATEMENT_ID", ",", "count", "(", "*", ")", "FROM", "Accounts", "GROUP", "BY", "STATEMENT_ID"], "query_toks_no_value": ["select", "statement_id", ",", "count", "(", "*", ")", "from", "accounts", "group", "by", "statement_id"], "question": "What are the different statement ids on accounts, and the number of accounts for each?", "question_toks": ["What", "are", "the", "different", "statement", "ids", "on", "accounts", ",", "and", "the", "number", "of", "accounts", "for", "each", "?"], "guid": 9023}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | How many locations are listed in the database?", "sql": "SELECT count(*) FROM Ref_locations", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT count(*) FROM Ref_locations", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Ref_locations"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_locations"], "question": "How many locations are listed in the database?", "question_toks": ["How", "many", "locations", "are", "listed", "in", "the", "database", "?"], "guid": 9024}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show ids for all templates that are used by more than one document.", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "query_toks": ["SELECT", "template_id", "FROM", "Documents", "GROUP", "BY", "template_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Show ids for all templates that are used by more than one document.", "question_toks": ["Show", "ids", "for", "all", "templates", "that", "are", "used", "by", "more", "than", "one", "document", "."], "guid": 9025}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Give me the name and description of the location with code x.", "sql": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"", "query_toks": ["SELECT", "location_name", ",", "location_description", "FROM", "Ref_locations", "WHERE", "location_code", "=", "``", "x", "''"], "query_toks_no_value": ["select", "location_name", ",", "location_description", "from", "ref_locations", "where", "location_code", "=", "value"], "question": "Give me the name and description of the location with code x.", "question_toks": ["Give", "me", "the", "name", "and", "description", "of", "the", "location", "with", "code", "x", "."], "guid": 9026}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | How many documents have document type code CV or BK?", "sql": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "All_documents", "WHERE", "document_type_code", "=", "``", "CV", "''", "OR", "document_type_code", "=", "``", "BK", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "all_documents", "where", "document_type_code", "=", "value", "or", "document_type_code", "=", "value"], "question": "How many documents have document type code CV or BK?", "question_toks": ["How", "many", "documents", "have", "document", "type", "code", "CV", "or", "BK", "?"], "guid": 9027}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are project ids of projects that have 2 or more corresponding documents?", "sql": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "project_id", "FROM", "Documents", "GROUP", "BY", "project_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "project_id", "from", "documents", "group", "by", "project_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are project ids of projects that have 2 or more corresponding documents?", "question_toks": ["What", "are", "project", "ids", "of", "projects", "that", "have", "2", "or", "more", "corresponding", "documents", "?"], "guid": 9028}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the name and description of the role played by the employee named Ebba.", "sql": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T2.role_name ,  T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T1.employee_name  =  \"Ebba\"", "query_toks": ["SELECT", "T2.role_name", ",", "T2.role_description", "FROM", "Employees", "AS", "T1", "JOIN", "ROLES", "AS", "T2", "ON", "T1.role_code", "=", "T2.role_code", "WHERE", "T1.employee_name", "=", "``", "Ebba", "''"], "query_toks_no_value": ["select", "t2", ".", "role_name", ",", "t2", ".", "role_description", "from", "employees", "as", "t1", "join", "roles", "as", "t2", "on", "t1", ".", "role_code", "=", "t2", ".", "role_code", "where", "t1", ".", "employee_name", "=", "value"], "question": "Show the name and description of the role played by the employee named Ebba.", "question_toks": ["Show", "the", "name", "and", "description", "of", "the", "role", "played", "by", "the", "employee", "named", "Ebba", "."], "guid": 9029}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | Which document has the most draft copies? List its document id and number of draft copies.", "sql": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_id , count(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY count(copy_number) DESC LIMIT 1;", "query_toks": ["SELECT", "document_id", ",", "count", "(", "copy_number", ")", "FROM", "Draft_Copies", "GROUP", "BY", "document_id", "ORDER", "BY", "count", "(", "copy_number", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "document_id", ",", "count", "(", "copy_number", ")", "from", "draft_copies", "group", "by", "document_id", "order", "by", "count", "(", "copy_number", ")", "desc", "limit", "value"], "question": "Which document has the most draft copies? List its document id and number of draft copies.", "question_toks": ["Which", "document", "has", "the", "most", "draft", "copies", "?", "List", "its", "document", "id", "and", "number", "of", "draft", "copies", "."], "guid": 9030}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Find the total access count of all documents in the most popular document type.", "sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "document_management", "query": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "sum", "(", "access_count", ")", "FROM", "documents", "GROUP", "BY", "document_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "sum", "(", "access_count", ")", "from", "documents", "group", "by", "document_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the total access count of all documents in the most popular document type.", "question_toks": ["Find", "the", "total", "access", "count", "of", "all", "documents", "in", "the", "most", "popular", "document", "type", "."], "guid": 9031}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | How many statements do we have?", "sql": "SELECT count(*) FROM Statements", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Statements", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Statements"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "statements"], "question": "How many statements do we have?", "question_toks": ["How", "many", "statements", "do", "we", "have", "?"], "guid": 9032}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | List all the image name and URLs in the order of their names.", "sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name", "example": {"db_id": "document_management", "query": "SELECT image_name ,  image_url FROM images ORDER BY image_name", "query_toks": ["SELECT", "image_name", ",", "image_url", "FROM", "images", "ORDER", "BY", "image_name"], "query_toks_no_value": ["select", "image_name", ",", "image_url", "from", "images", "order", "by", "image_name"], "question": "List all the image name and URLs in the order of their names.", "question_toks": ["List", "all", "the", "image", "name", "and", "URLs", "in", "the", "order", "of", "their", "names", "."], "guid": 9033}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | List all document type codes and document type names.", "sql": "SELECT document_type_code ,  document_type_name FROM Ref_document_types", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT document_type_code ,  document_type_name FROM Ref_document_types", "query_toks": ["SELECT", "document_type_code", ",", "document_type_name", "FROM", "Ref_document_types"], "query_toks_no_value": ["select", "document_type_code", ",", "document_type_name", "from", "ref_document_types"], "question": "List all document type codes and document type names.", "question_toks": ["List", "all", "document", "type", "codes", "and", "document", "type", "names", "."], "guid": 9034}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.", "sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "query_toks": ["SELECT", "Destroyed_by_Employee_ID", "FROM", "Documents_to_be_destroyed", "UNION", "SELECT", "Destruction_Authorised_by_Employee_ID", "FROM", "Documents_to_be_destroyed"], "query_toks_no_value": ["select", "destroyed_by_employee_id", "from", "documents_to_be_destroyed", "union", "select", "destruction_authorised_by_employee_id", "from", "documents_to_be_destroyed"], "question": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.", "question_toks": ["Which", "employees", "have", "either", "destroyed", "a", "document", "or", "made", "an", "authorization", "to", "do", "so", "?", "Return", "their", "employee", "ids", "."], "guid": 9035}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the id of each employee and the number of document destruction authorised by that employee?", "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "query_toks": ["SELECT", "Destruction_Authorised_by_Employee_ID", ",", "count", "(", "*", ")", "FROM", "Documents_to_be_destroyed", "GROUP", "BY", "Destruction_Authorised_by_Employee_ID"], "query_toks_no_value": ["select", "destruction_authorised_by_employee_id", ",", "count", "(", "*", ")", "from", "documents_to_be_destroyed", "group", "by", "destruction_authorised_by_employee_id"], "question": "What are the id of each employee and the number of document destruction authorised by that employee?", "question_toks": ["What", "are", "the", "id", "of", "each", "employee", "and", "the", "number", "of", "document", "destruction", "authorised", "by", "that", "employee", "?"], "guid": 9036}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Find all the name of documents without any sections.", "sql": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)", "example": {"db_id": "document_management", "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)", "query_toks": ["SELECT", "document_name", "FROM", "documents", "WHERE", "document_code", "NOT", "IN", "(", "SELECT", "document_code", "FROM", "document_sections", ")"], "query_toks_no_value": ["select", "document_name", "from", "documents", "where", "document_code", "not", "in", "(", "select", "document_code", "from", "document_sections", ")"], "question": "Find all the name of documents without any sections.", "question_toks": ["Find", "all", "the", "name", "of", "documents", "without", "any", "sections", "."], "guid": 9037}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.", "sql": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1;", "query_toks": ["SELECT", "Employees.employee_name", ",", "count", "(", "*", ")", "FROM", "Employees", "JOIN", "Circulation_History", "ON", "Circulation_History.employee_id", "=", "Employees.employee_id", "GROUP", "BY", "Circulation_History.document_id", ",", "Circulation_History.draft_number", ",", "Circulation_History.copy_number", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "employees.employee_name", ",", "count", "(", "*", ")", "from", "employees", "join", "circulation_history", "on", "circulation_history.employee_id", "=", "employees.employee_id", "group", "by", "circulation_history.document_id", ",", "circulation_history.draft_number", ",", "circulation_history.copy_number", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.", "question_toks": ["Which", "employee", "has", "showed", "up", "in", "most", "circulation", "history", "documents", ".", "List", "the", "employee", "'s", "name", "and", "the", "number", "of", "drafts", "and", "copies", "."], "guid": 9038}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the location code with the most documents?", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "location_code", "FROM", "Document_locations", "GROUP", "BY", "location_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location_code", "from", "document_locations", "group", "by", "location_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the location code with the most documents?", "question_toks": ["What", "is", "the", "location", "code", "with", "the", "most", "documents", "?"], "guid": 9039}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Count the number of documents.", "sql": "SELECT count(*) FROM Documents", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Documents", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Documents"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "documents"], "question": "Count the number of documents.", "question_toks": ["Count", "the", "number", "of", "documents", "."], "guid": 9040}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What is the name of the shipping agent of the document with id 2?", "sql": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2;", "query_toks": ["SELECT", "Ref_Shipping_Agents.shipping_agent_name", "FROM", "Ref_Shipping_Agents", "JOIN", "Documents", "ON", "Documents.shipping_agent_code", "=", "Ref_Shipping_Agents.shipping_agent_code", "WHERE", "Documents.document_id", "=", "2", ";"], "query_toks_no_value": ["select", "ref_shipping_agents.shipping_agent_name", "from", "ref_shipping_agents", "join", "documents", "on", "documents.shipping_agent_code", "=", "ref_shipping_agents.shipping_agent_code", "where", "documents.document_id", "=", "value"], "question": "What is the name of the shipping agent of the document with id 2?", "question_toks": ["What", "is", "the", "name", "of", "the", "shipping", "agent", "of", "the", "document", "with", "id", "2", "?"], "guid": 9041}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What is the document type description for document type named Film?", "sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"", "query_toks": ["SELECT", "document_type_description", "FROM", "Ref_document_types", "WHERE", "document_type_name", "=", "``", "Film", "''"], "query_toks_no_value": ["select", "document_type_description", "from", "ref_document_types", "where", "document_type_name", "=", "value"], "question": "What is the document type description for document type named Film?", "question_toks": ["What", "is", "the", "document", "type", "description", "for", "document", "type", "named", "Film", "?"], "guid": 9042}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show all statement id and the number of accounts for each statement.", "sql": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT STATEMENT_ID ,  count(*) FROM Accounts GROUP BY STATEMENT_ID", "query_toks": ["SELECT", "STATEMENT_ID", ",", "count", "(", "*", ")", "FROM", "Accounts", "GROUP", "BY", "STATEMENT_ID"], "query_toks_no_value": ["select", "statement_id", ",", "count", "(", "*", ")", "from", "accounts", "group", "by", "statement_id"], "question": "Show all statement id and the number of accounts for each statement.", "question_toks": ["Show", "all", "statement", "id", "and", "the", "number", "of", "accounts", "for", "each", "statement", "."], "guid": 9043}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | How many documents are with document type code BK for each product id?", "sql": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "project_id", "FROM", "Documents", "WHERE", "document_type_code", "=", "``", "BK", "''", "GROUP", "BY", "project_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "project_id", "from", "documents", "where", "document_type_code", "=", "value", "group", "by", "project_id"], "question": "How many documents are with document type code BK for each product id?", "question_toks": ["How", "many", "documents", "are", "with", "document", "type", "code", "BK", "for", "each", "product", "id", "?"], "guid": 9044}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What is the name of the document with the most number of sections?", "sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "document_management", "query": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.document_name", "FROM", "documents", "AS", "t1", "JOIN", "document_sections", "AS", "t2", "ON", "t1.document_code", "=", "t2.document_code", "GROUP", "BY", "t1.document_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "document_name", "from", "documents", "as", "t1", "join", "document_sections", "as", "t2", "on", "t1", ".", "document_code", "=", "t2", ".", "document_code", "group", "by", "t1", ".", "document_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the name of the document with the most number of sections?", "question_toks": ["What", "is", "the", "name", "of", "the", "document", "with", "the", "most", "number", "of", "sections", "?"], "guid": 9045}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | How many draft copies does the document with id 2 have?", "sql": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Draft_Copies", "WHERE", "document_id", "=", "2", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "draft_copies", "where", "document_id", "=", "value"], "question": "How many draft copies does the document with id 2 have?", "question_toks": ["How", "many", "draft", "copies", "does", "the", "document", "with", "id", "2", "have", "?"], "guid": 9046}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What address was the document with id 4 mailed to?", "sql": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4;", "query_toks": ["SELECT", "Addresses.address_details", "FROM", "Addresses", "JOIN", "Documents_Mailed", "ON", "Documents_Mailed.mailed_to_address_id", "=", "Addresses.address_id", "WHERE", "document_id", "=", "4", ";"], "query_toks_no_value": ["select", "addresses.address_details", "from", "addresses", "join", "documents_mailed", "on", "documents_mailed.mailed_to_address_id", "=", "addresses.address_id", "where", "document_id", "=", "value"], "question": "What address was the document with id 4 mailed to?", "question_toks": ["What", "address", "was", "the", "document", "with", "id", "4", "mailed", "to", "?"], "guid": 9047}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | List the employees who have not showed up in any circulation history of documents. List the employee's name.", "sql": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id", "query_toks": ["SELECT", "employee_name", "FROM", "Employees", "EXCEPT", "SELECT", "Employees.employee_name", "FROM", "Employees", "JOIN", "Circulation_History", "ON", "Circulation_History.employee_id", "=", "Employees.employee_id"], "query_toks_no_value": ["select", "employee_name", "from", "employees", "except", "select", "employees.employee_name", "from", "employees", "join", "circulation_history", "on", "circulation_history.employee_id", "=", "employees.employee_id"], "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.", "question_toks": ["List", "the", "employees", "who", "have", "not", "showed", "up", "in", "any", "circulation", "history", "of", "documents", ".", "List", "the", "employee", "'s", "name", "."], "guid": 9048}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Give the ids for documents that have the budget description 'Government'.", "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"", "query_toks": ["SELECT", "T1.document_id", "FROM", "Documents_with_expenses", "AS", "T1", "JOIN", "Ref_Budget_Codes", "AS", "T2", "ON", "T1.Budget_Type_code", "=", "T2.Budget_Type_code", "WHERE", "T2.budget_type_Description", "=", "``", "Government", "''"], "query_toks_no_value": ["select", "t1", ".", "document_id", "from", "documents_with_expenses", "as", "t1", "join", "ref_budget_codes", "as", "t2", "on", "t1", ".", "budget_type_code", "=", "t2", ".", "budget_type_code", "where", "t2", ".", "budget_type_description", "=", "value"], "question": "Give the ids for documents that have the budget description 'Government'.", "question_toks": ["Give", "the", "ids", "for", "documents", "that", "have", "the", "budget", "description", "'Government", "'", "."], "guid": 9049}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the average quantities ordered with payment method code \"MasterCard\" on invoices?", "sql": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"", "query_toks": ["SELECT", "avg", "(", "Order_Quantity", ")", "FROM", "Invoices", "WHERE", "payment_method_code", "=", "``", "MasterCard", "''"], "query_toks_no_value": ["select", "avg", "(", "order_quantity", ")", "from", "invoices", "where", "payment_method_code", "=", "value"], "question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?", "question_toks": ["What", "is", "the", "average", "quantities", "ordered", "with", "payment", "method", "code", "``", "MasterCard", "''", "on", "invoices", "?"], "guid": 9050}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the minimum, average, and maximum quantities ordered? Check all the invoices.", "sql": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES", "query_toks": ["SELECT", "min", "(", "Order_Quantity", ")", ",", "avg", "(", "Order_Quantity", ")", ",", "max", "(", "Order_Quantity", ")", "FROM", "INVOICES"], "query_toks_no_value": ["select", "min", "(", "order_quantity", ")", ",", "avg", "(", "order_quantity", ")", ",", "max", "(", "order_quantity", ")", "from", "invoices"], "question": "What are the minimum, average, and maximum quantities ordered? Check all the invoices.", "question_toks": ["What", "are", "the", "minimum", ",", "average", ",", "and", "maximum", "quantities", "ordered", "?", "Check", "all", "the", "invoices", "."], "guid": 9051}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the code of each location and the number of documents in that location?", "sql": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code", "query_toks": ["SELECT", "location_code", ",", "count", "(", "*", ")", "FROM", "Document_locations", "GROUP", "BY", "location_code"], "query_toks_no_value": ["select", "location_code", ",", "count", "(", "*", ")", "from", "document_locations", "group", "by", "location_code"], "question": "What is the code of each location and the number of documents in that location?", "question_toks": ["What", "is", "the", "code", "of", "each", "location", "and", "the", "number", "of", "documents", "in", "that", "location", "?"], "guid": 9052}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show all template ids and number of documents using each template.", "sql": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id", "query_toks": ["SELECT", "template_id", ",", "count", "(", "*", ")", "FROM", "Documents", "GROUP", "BY", "template_id"], "query_toks_no_value": ["select", "template_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "template_id"], "question": "Show all template ids and number of documents using each template.", "question_toks": ["Show", "all", "template", "ids", "and", "number", "of", "documents", "using", "each", "template", "."], "guid": 9053}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What is the description of the most popular role among users that have logged in?", "sql": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)", "example": {"db_id": "document_management", "query": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)", "query_toks": ["SELECT", "role_description", "FROM", "ROLES", "WHERE", "role_code", "=", "(", "SELECT", "role_code", "FROM", "users", "WHERE", "user_login", "=", "1", "GROUP", "BY", "role_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"], "query_toks_no_value": ["select", "role_description", "from", "roles", "where", "role_code", "=", "(", "select", "role_code", "from", "users", "where", "user_login", "=", "value", "group", "by", "role_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"], "question": "What is the description of the most popular role among users that have logged in?", "question_toks": ["What", "is", "the", "description", "of", "the", "most", "popular", "role", "among", "users", "that", "have", "logged", "in", "?"], "guid": 9054}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | When was the document named \"Marry CV\" stored? Give me the date.", "sql": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"", "query_toks": ["SELECT", "date_stored", "FROM", "All_documents", "WHERE", "Document_name", "=", "``", "Marry", "CV", "''"], "query_toks_no_value": ["select", "date_stored", "from", "all_documents", "where", "document_name", "=", "value"], "question": "When was the document named \"Marry CV\" stored? Give me the date.", "question_toks": ["When", "was", "the", "document", "named", "``", "Marry", "CV", "''", "stored", "?", "Give", "me", "the", "date", "."], "guid": 9055}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | How many documents correspond with each project id?", "sql": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT project_id ,  count(*) FROM Documents GROUP BY project_id", "query_toks": ["SELECT", "project_id", ",", "count", "(", "*", ")", "FROM", "Documents", "GROUP", "BY", "project_id"], "query_toks_no_value": ["select", "project_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "project_id"], "question": "How many documents correspond with each project id?", "question_toks": ["How", "many", "documents", "correspond", "with", "each", "project", "id", "?"], "guid": 9056}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the details for the paragraph that includes the text 'Korea ' ?", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "select other_details from paragraphs where paragraph_text like 'korea'", "query_toks": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "\"korea\""], "query_toks_no_value": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "value"], "question": "What are the details for the paragraph that includes the text 'Korea ' ?", "question_toks": ["What", "are", "the", "details", "for", "the", "paragraph", "that", "includes", "the", "text", "'Korea", "'", "?"], "guid": 9057}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the ids of all employees who have either destroyed a document or made an authorization to do this.", "sql": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "query_toks": ["SELECT", "Destroyed_by_Employee_ID", "FROM", "Documents_to_be_destroyed", "UNION", "SELECT", "Destruction_Authorised_by_Employee_ID", "FROM", "Documents_to_be_destroyed"], "query_toks_no_value": ["select", "destroyed_by_employee_id", "from", "documents_to_be_destroyed", "union", "select", "destruction_authorised_by_employee_id", "from", "documents_to_be_destroyed"], "question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.", "question_toks": ["Show", "the", "ids", "of", "all", "employees", "who", "have", "either", "destroyed", "a", "document", "or", "made", "an", "authorization", "to", "do", "this", "."], "guid": 9058}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the code of the template type that is most commonly used in documents.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.template_type_code", "FROM", "Templates", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id", "GROUP", "BY", "T1.template_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "group", "by", "t1", ".", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the code of the template type that is most commonly used in documents.", "question_toks": ["Return", "the", "code", "of", "the", "template", "type", "that", "is", "most", "commonly", "used", "in", "documents", "."], "guid": 9059}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Count the number of documents with expenses.", "sql": "SELECT count(*) FROM Documents_with_expenses", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Documents_with_expenses", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Documents_with_expenses"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "documents_with_expenses"], "question": "Count the number of documents with expenses.", "question_toks": ["Count", "the", "number", "of", "documents", "with", "expenses", "."], "guid": 9060}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | How many users are logged in?", "sql": "SELECT count(*) FROM users WHERE user_login  =  1", "example": {"db_id": "document_management", "query": "SELECT count(*) FROM users WHERE user_login  =  1", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "users", "WHERE", "user_login", "=", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "users", "where", "user_login", "=", "value"], "question": "How many users are logged in?", "question_toks": ["How", "many", "users", "are", "logged", "in", "?"], "guid": 9061}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the order detail for the products with price above 2000.", "sql": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000", "query_toks": ["SELECT", "T1.Other_Item_Details", "FROM", "ORDER_ITEMS", "AS", "T1", "JOIN", "Products", "AS", "T2", "ON", "T1.Product_ID", "=", "T2.Product_ID", "WHERE", "T2.Product_price", ">", "2000"], "query_toks_no_value": ["select", "t1", ".", "other_item_details", "from", "order_items", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t2", ".", "product_price", ">", "value"], "question": "Find the order detail for the products with price above 2000.", "question_toks": ["Find", "the", "order", "detail", "for", "the", "products", "with", "price", "above", "2000", "."], "guid": 9062}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the order dates of the orders with price above 1000.", "sql": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000", "query_toks": ["SELECT", "T1.Order_Date", "FROM", "Customer_Orders", "AS", "T1", "JOIN", "ORDER_ITEMS", "AS", "T2", "ON", "T1.Order_ID", "=", "T2.Order_ID", "JOIN", "Products", "AS", "T3", "ON", "T2.Product_ID", "=", "T3.Product_ID", "WHERE", "T3.Product_price", ">", "1000"], "query_toks_no_value": ["select", "t1", ".", "order_date", "from", "customer_orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "join", "products", "as", "t3", "on", "t2", ".", "product_id", "=", "t3", ".", "product_id", "where", "t3", ".", "product_price", ">", "value"], "question": "Find the order dates of the orders with price above 1000.", "question_toks": ["Find", "the", "order", "dates", "of", "the", "orders", "with", "price", "above", "1000", "."], "guid": 9063}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What are the names of documents that have both one of the three most common types and one of three most common structures?", "sql": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "document_management", "query": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "document_name", "FROM", "documents", "GROUP", "BY", "document_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3", "INTERSECT", "SELECT", "document_name", "FROM", "documents", "GROUP", "BY", "document_structure_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "document_name", "from", "documents", "group", "by", "document_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", "intersect", "select", "document_name", "from", "documents", "group", "by", "document_structure_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What are the names of documents that have both one of the three most common types and one of three most common structures?", "question_toks": ["What", "are", "the", "names", "of", "documents", "that", "have", "both", "one", "of", "the", "three", "most", "common", "types", "and", "one", "of", "three", "most", "common", "structures", "?"], "guid": 9064}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Give the details of the project with the document name 'King Book'.", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"", "query_toks": ["SELECT", "T1.project_details", "FROM", "Projects", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "WHERE", "T2.document_name", "=", "``", "King", "Book", "''"], "query_toks_no_value": ["select", "t1", ".", "project_details", "from", "projects", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "where", "t2", ".", "document_name", "=", "value"], "question": "Give the details of the project with the document name 'King Book'.", "question_toks": ["Give", "the", "details", "of", "the", "project", "with", "the", "document", "name", "'King", "Book", "'", "."], "guid": 9065}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | How many employees do we have?", "sql": "SELECT count(*) FROM Employees;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT count(*) FROM Employees;", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Employees", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employees"], "question": "How many employees do we have?", "question_toks": ["How", "many", "employees", "do", "we", "have", "?"], "guid": 9066}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the description of the marketing region China?", "sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"", "query_toks": ["SELECT", "Marketing_Region_Descriptrion", "FROM", "Marketing_Regions", "WHERE", "Marketing_Region_Name", "=", "``", "China", "''"], "query_toks_no_value": ["select", "marketing_region_descriptrion", "from", "marketing_regions", "where", "marketing_region_name", "=", "value"], "question": "What is the description of the marketing region China?", "question_toks": ["What", "is", "the", "description", "of", "the", "marketing", "region", "China", "?"], "guid": 9067}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the description of the role named \"Proof Reader\"?", "sql": "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_description FROM ROLES WHERE role_name  =  \"Proof Reader\"", "query_toks": ["SELECT", "role_description", "FROM", "ROLES", "WHERE", "role_name", "=", "``", "Proof", "Reader", "''"], "query_toks_no_value": ["select", "role_description", "from", "roles", "where", "role_name", "=", "value"], "question": "What is the description of the role named \"Proof Reader\"?", "question_toks": ["What", "is", "the", "description", "of", "the", "role", "named", "``", "Proof", "Reader", "''", "?"], "guid": 9068}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the ids of all the employees who authorize document destruction?", "sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "query_toks": ["SELECT", "DISTINCT", "Destruction_Authorised_by_Employee_ID", "FROM", "Documents_to_be_destroyed"], "query_toks_no_value": ["select", "distinct", "destruction_authorised_by_employee_id", "from", "documents_to_be_destroyed"], "question": "What are the ids of all the employees who authorize document destruction?", "question_toks": ["What", "are", "the", "ids", "of", "all", "the", "employees", "who", "authorize", "document", "destruction", "?"], "guid": 9069}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | How many paragraphs for the document with name 'Summer Show'?", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Paragraphs", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_ID", "=", "T2.document_ID", "WHERE", "T2.document_name", "=", "'Summer", "Show", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "document_name", "=", "value"], "question": "How many paragraphs for the document with name 'Summer Show'?", "question_toks": ["How", "many", "paragraphs", "for", "the", "document", "with", "name", "'Summer", "Show", "'", "?"], "guid": 9070}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show all paragraph texts for the document \"Customer reviews\".", "sql": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\"", "query_toks": ["SELECT", "T1.paragraph_text", "FROM", "Paragraphs", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T2.document_name", "=", "``", "Customer", "reviews", "''"], "query_toks_no_value": ["select", "t1", ".", "paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "document_name", "=", "value"], "question": "Show all paragraph texts for the document \"Customer reviews\".", "question_toks": ["Show", "all", "paragraph", "texts", "for", "the", "document", "``", "Customer", "reviews", "''", "."], "guid": 9071}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Count the total number of bookings made.", "sql": "SELECT count(*) FROM BOOKINGS", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT count(*) FROM BOOKINGS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "BOOKINGS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "bookings"], "question": "Count the total number of bookings made.", "question_toks": ["Count", "the", "total", "number", "of", "bookings", "made", "."], "guid": 9072}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | How many budget types do we have?", "sql": "SELECT count(*) FROM Ref_budget_codes", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Ref_budget_codes", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Ref_budget_codes"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_budget_codes"], "question": "How many budget types do we have?", "question_toks": ["How", "many", "budget", "types", "do", "we", "have", "?"], "guid": 9073}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Count the number of users that are logged in.", "sql": "SELECT count(*) FROM users WHERE user_login  =  1", "example": {"db_id": "document_management", "query": "SELECT count(*) FROM users WHERE user_login  =  1", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "users", "WHERE", "user_login", "=", "1"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "users", "where", "user_login", "=", "value"], "question": "Count the number of users that are logged in.", "question_toks": ["Count", "the", "number", "of", "users", "that", "are", "logged", "in", "."], "guid": 9074}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Count the number of different templates used for documents.", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(DISTINCT template_id) FROM Documents", "query_toks": ["SELECT", "count", "(", "DISTINCT", "template_id", ")", "FROM", "Documents"], "query_toks_no_value": ["select", "count", "(", "distinct", "template_id", ")", "from", "documents"], "question": "Count the number of different templates used for documents.", "question_toks": ["Count", "the", "number", "of", "different", "templates", "used", "for", "documents", "."], "guid": 9075}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the different template type codes, and how many templates correspond to each?", "sql": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code", "query_toks": ["SELECT", "template_type_code", ",", "count", "(", "*", ")", "FROM", "Templates", "GROUP", "BY", "template_type_code"], "query_toks_no_value": ["select", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "group", "by", "template_type_code"], "question": "What are the different template type codes, and how many templates correspond to each?", "question_toks": ["What", "are", "the", "different", "template", "type", "codes", ",", "and", "how", "many", "templates", "correspond", "to", "each", "?"], "guid": 9076}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | How many drama workshop groups are there in each city? Return both the city and the count.", "sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town", "query_toks": ["SELECT", "T1.City_Town", ",", "count", "(", "*", ")", "FROM", "Addresses", "AS", "T1", "JOIN", "Drama_Workshop_Groups", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID", "GROUP", "BY", "T1.City_Town"], "query_toks_no_value": ["select", "t1", ".", "city_town", ",", "count", "(", "*", ")", "from", "addresses", "as", "t1", "join", "drama_workshop_groups", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "group", "by", "t1", ".", "city_town"], "question": "How many drama workshop groups are there in each city? Return both the city and the count.", "question_toks": ["How", "many", "drama", "workshop", "groups", "are", "there", "in", "each", "city", "?", "Return", "both", "the", "city", "and", "the", "count", "."], "guid": 9077}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the total order quantities of photo products?", "sql": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"", "query_toks": ["SELECT", "sum", "(", "T1.Order_Quantity", ")", "FROM", "ORDER_ITEMS", "AS", "T1", "JOIN", "Products", "AS", "T2", "ON", "T1.Product_ID", "=", "T2.Product_ID", "WHERE", "T2.Product_Name", "=", "``", "photo", "''"], "query_toks_no_value": ["select", "sum", "(", "t1", ".", "order_quantity", ")", "from", "order_items", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t2", ".", "product_name", "=", "value"], "question": "What are the total order quantities of photo products?", "question_toks": ["What", "are", "the", "total", "order", "quantities", "of", "photo", "products", "?"], "guid": 9078}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the different product names? What is the average product price for each of them?", "sql": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name", "query_toks": ["SELECT", "Product_Name", ",", "avg", "(", "Product_Price", ")", "FROM", "PRODUCTS", "GROUP", "BY", "Product_Name"], "query_toks_no_value": ["select", "product_name", ",", "avg", "(", "product_price", ")", "from", "products", "group", "by", "product_name"], "question": "What are the different product names? What is the average product price for each of them?", "question_toks": ["What", "are", "the", "different", "product", "names", "?", "What", "is", "the", "average", "product", "price", "for", "each", "of", "them", "?"], "guid": 9079}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What are the names of documents that do not have any images?", "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id", "example": {"db_id": "document_management", "query": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id", "query_toks": ["SELECT", "document_name", "FROM", "documents", "EXCEPT", "SELECT", "t1.document_name", "FROM", "documents", "AS", "t1", "JOIN", "document_sections", "AS", "t2", "ON", "t1.document_code", "=", "t2.document_code", "JOIN", "document_sections_images", "AS", "t3", "ON", "t2.section_id", "=", "t3.section_id"], "query_toks_no_value": ["select", "document_name", "from", "documents", "except", "select", "t1", ".", "document_name", "from", "documents", "as", "t1", "join", "document_sections", "as", "t2", "on", "t1", ".", "document_code", "=", "t2", ".", "document_code", "join", "document_sections_images", "as", "t3", "on", "t2", ".", "section_id", "=", "t3", ".", "section_id"], "question": "What are the names of documents that do not have any images?", "question_toks": ["What", "are", "the", "names", "of", "documents", "that", "do", "not", "have", "any", "images", "?"], "guid": 9080}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show all template type codes that are not used by any document.", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "query_toks": ["SELECT", "template_type_code", "FROM", "Templates", "EXCEPT", "SELECT", "template_type_code", "FROM", "Templates", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id"], "query_toks_no_value": ["select", "template_type_code", "from", "templates", "except", "select", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id"], "question": "Show all template type codes that are not used by any document.", "question_toks": ["Show", "all", "template", "type", "codes", "that", "are", "not", "used", "by", "any", "document", "."], "guid": 9081}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the different template type codes?", "sql": "SELECT DISTINCT template_type_code FROM Templates", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT DISTINCT template_type_code FROM Templates", "query_toks": ["SELECT", "DISTINCT", "template_type_code", "FROM", "Templates"], "query_toks_no_value": ["select", "distinct", "template_type_code", "from", "templates"], "question": "What are the different template type codes?", "question_toks": ["What", "are", "the", "different", "template", "type", "codes", "?"], "guid": 9082}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | List the document type code for the document with the id 2.", "sql": "SELECT document_type_code FROM Documents WHERE document_id = 2;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_type_code FROM Documents WHERE document_id = 2;", "query_toks": ["SELECT", "document_type_code", "FROM", "Documents", "WHERE", "document_id", "=", "2", ";"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "where", "document_id", "=", "value"], "question": "List the document type code for the document with the id 2.", "question_toks": ["List", "the", "document", "type", "code", "for", "the", "document", "with", "the", "id", "2", "."], "guid": 9083}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Return the name of the document that has the most sections.", "sql": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "document_management", "query": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t1.document_name", "FROM", "documents", "AS", "t1", "JOIN", "document_sections", "AS", "t2", "ON", "t1.document_code", "=", "t2.document_code", "GROUP", "BY", "t1.document_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "document_name", "from", "documents", "as", "t1", "join", "document_sections", "as", "t2", "on", "t1", ".", "document_code", "=", "t2", ".", "document_code", "group", "by", "t1", ".", "document_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the name of the document that has the most sections.", "question_toks": ["Return", "the", "name", "of", "the", "document", "that", "has", "the", "most", "sections", "."], "guid": 9084}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Sort the names of products in ascending order of their price.", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "query_toks": ["SELECT", "Product_Name", "FROM", "Products", "ORDER", "BY", "Product_Price", "ASC"], "query_toks_no_value": ["select", "product_name", "from", "products", "order", "by", "product_price", "asc"], "question": "Sort the names of products in ascending order of their price.", "question_toks": ["Sort", "the", "names", "of", "products", "in", "ascending", "order", "of", "their", "price", "."], "guid": 9085}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the distinct payment method codes in all the invoices?", "sql": "SELECT DISTINCT payment_method_code FROM INVOICES", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT DISTINCT payment_method_code FROM INVOICES", "query_toks": ["SELECT", "DISTINCT", "payment_method_code", "FROM", "INVOICES"], "query_toks_no_value": ["select", "distinct", "payment_method_code", "from", "invoices"], "question": "What are the distinct payment method codes in all the invoices?", "question_toks": ["What", "are", "the", "distinct", "payment", "method", "codes", "in", "all", "the", "invoices", "?"], "guid": 9086}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Which employees have the role with code \"HR\"? Find their names.", "sql": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"", "query_toks": ["SELECT", "employee_name", "FROM", "Employees", "WHERE", "role_code", "=", "``", "HR", "''"], "query_toks_no_value": ["select", "employee_name", "from", "employees", "where", "role_code", "=", "value"], "question": "Which employees have the role with code \"HR\"? Find their names.", "question_toks": ["Which", "employees", "have", "the", "role", "with", "code", "``", "HR", "''", "?", "Find", "their", "names", "."], "guid": 9087}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Give me the descriptions of the service types that cost more than 100.", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Price  >  100", "query_toks": ["SELECT", "T1.Service_Type_Description", "FROM", "Ref_Service_Types", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Service_Type_Code", "=", "T2.Service_Type_Code", "WHERE", "T2.Product_Price", ">", "100"], "query_toks_no_value": ["select", "t1", ".", "service_type_description", "from", "ref_service_types", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_type_code", "=", "t2", ".", "service_type_code", "where", "t2", ".", "product_price", ">", "value"], "question": "Give me the descriptions of the service types that cost more than 100.", "question_toks": ["Give", "me", "the", "descriptions", "of", "the", "service", "types", "that", "cost", "more", "than", "100", "."], "guid": 9088}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "query_toks": ["SELECT", "document_id", ",", "count", "(", "*", ")", "FROM", "Paragraphs", "GROUP", "BY", "document_id", "ORDER", "BY", "document_id"], "query_toks_no_value": ["select", "document_id", ",", "count", "(", "*", ")", "from", "paragraphs", "group", "by", "document_id", "order", "by", "document_id"], "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "question_toks": ["Return", "the", "different", "document", "ids", "along", "with", "the", "number", "of", "paragraphs", "corresponding", "to", "each", ",", "ordered", "by", "id", "."], "guid": 9089}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?", "sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'", "query_toks": ["SELECT", "T1.statement_details", ",", "T2.document_name", "FROM", "Statements", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.statement_id", "=", "T2.document_id", "WHERE", "T1.statement_details", "=", "'Private", "Project", "'"], "query_toks_no_value": ["select", "t1", ".", "statement_details", ",", "t2", ".", "document_name", "from", "statements", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "statement_id", "=", "t2", ".", "document_id", "where", "t1", ".", "statement_details", "=", "value"], "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?", "question_toks": ["What", "are", "the", "details", "for", "statements", "with", "the", "details", "'Private", "Project", "'", ",", "and", "what", "are", "the", "names", "of", "the", "corresponding", "documents", "?"], "guid": 9090}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the description and code of the service type that is performed the most times.", "sql": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.Service_Type_Description", ",", "T1.Service_Type_Code", "FROM", "Ref_Service_Types", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Service_Type_Code", "=", "T2.Service_Type_Code", "GROUP", "BY", "T1.Service_Type_Code", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "service_type_description", ",", "t1", ".", "service_type_code", "from", "ref_service_types", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_type_code", "=", "t2", ".", "service_type_code", "group", "by", "t1", ".", "service_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the description and code of the service type that is performed the most times.", "question_toks": ["Find", "the", "description", "and", "code", "of", "the", "service", "type", "that", "is", "performed", "the", "most", "times", "."], "guid": 9091}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the states or counties of the address of the stores with marketing region code \"CA\"?", "sql": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"", "query_toks": ["SELECT", "T1.State_County", "FROM", "Addresses", "AS", "T1", "JOIN", "Stores", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID", "WHERE", "T2.Marketing_Region_Code", "=", "``", "CA", "''"], "query_toks_no_value": ["select", "t1", ".", "state_county", "from", "addresses", "as", "t1", "join", "stores", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "marketing_region_code", "=", "value"], "question": "What are the states or counties of the address of the stores with marketing region code \"CA\"?", "question_toks": ["What", "are", "the", "states", "or", "counties", "of", "the", "address", "of", "the", "stores", "with", "marketing", "region", "code", "``", "CA", "''", "?"], "guid": 9092}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What document status codes do we have?", "sql": "SELECT document_status_code FROM Ref_Document_Status;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_status_code FROM Ref_Document_Status;", "query_toks": ["SELECT", "document_status_code", "FROM", "Ref_Document_Status", ";"], "query_toks_no_value": ["select", "document_status_code", "from", "ref_document_status"], "question": "What document status codes do we have?", "question_toks": ["What", "document", "status", "codes", "do", "we", "have", "?"], "guid": 9093}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the names of the workshop groups where services with product name \"film\" are performed.", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T2.Product_Name  =  \"film\"", "query_toks": ["SELECT", "T1.Store_Phone", ",", "T1.Store_Email_Address", "FROM", "Drama_Workshop_Groups", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Workshop_Group_ID", "=", "T2.Workshop_Group_ID", "WHERE", "T2.Product_Name", "=", "``", "film", "''"], "query_toks_no_value": ["select", "t1", ".", "store_phone", ",", "t1", ".", "store_email_address", "from", "drama_workshop_groups", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "workshop_group_id", "=", "t2", ".", "workshop_group_id", "where", "t2", ".", "product_name", "=", "value"], "question": "Find the names of the workshop groups where services with product name \"film\" are performed.", "question_toks": ["Find", "the", "names", "of", "the", "workshop", "groups", "where", "services", "with", "product", "name", "``", "film", "''", "are", "performed", "."], "guid": 9094}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Count the number of all the calendar items.", "sql": "SELECT count(*) FROM Ref_calendar", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT count(*) FROM Ref_calendar", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Ref_calendar"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_calendar"], "question": "Count the number of all the calendar items.", "question_toks": ["Count", "the", "number", "of", "all", "the", "calendar", "items", "."], "guid": 9095}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Find the document type name of the document named \"How to read a book\".", "sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"", "query_toks": ["SELECT", "T2.document_type_name", "FROM", "All_documents", "AS", "T1", "JOIN", "Ref_document_types", "AS", "T2", "ON", "T1.document_type_code", "=", "T2.document_type_code", "WHERE", "T1.document_name", "=", "``", "How", "to", "read", "a", "book", "''"], "query_toks_no_value": ["select", "t2", ".", "document_type_name", "from", "all_documents", "as", "t1", "join", "ref_document_types", "as", "t2", "on", "t1", ".", "document_type_code", "=", "t2", ".", "document_type_code", "where", "t1", ".", "document_name", "=", "value"], "question": "Find the document type name of the document named \"How to read a book\".", "question_toks": ["Find", "the", "document", "type", "name", "of", "the", "document", "named", "``", "How", "to", "read", "a", "book", "''", "."], "guid": 9096}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Show all cities where at least one customer lives in but no performer lives in.", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID", "query_toks": ["SELECT", "T1.City_Town", "FROM", "Addresses", "AS", "T1", "JOIN", "Customers", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID", "EXCEPT", "SELECT", "T1.City_Town", "FROM", "Addresses", "AS", "T1", "JOIN", "Performers", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID"], "query_toks_no_value": ["select", "t1", ".", "city_town", "from", "addresses", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "except", "select", "t1", ".", "city_town", "from", "addresses", "as", "t1", "join", "performers", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id"], "question": "Show all cities where at least one customer lives in but no performer lives in.", "question_toks": ["Show", "all", "cities", "where", "at", "least", "one", "customer", "lives", "in", "but", "no", "performer", "lives", "in", "."], "guid": 9097}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Return the description of the budget type that has the code ORG.", "sql": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code  =  \"ORG\"", "query_toks": ["SELECT", "budget_type_description", "FROM", "Ref_budget_codes", "WHERE", "budget_type_code", "=", "``", "ORG", "''"], "query_toks_no_value": ["select", "budget_type_description", "from", "ref_budget_codes", "where", "budget_type_code", "=", "value"], "question": "Return the description of the budget type that has the code ORG.", "question_toks": ["Return", "the", "description", "of", "the", "budget", "type", "that", "has", "the", "code", "ORG", "."], "guid": 9098}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the ids of all employees who have authorized destruction.", "sql": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "query_toks": ["SELECT", "DISTINCT", "Destruction_Authorised_by_Employee_ID", "FROM", "Documents_to_be_destroyed"], "query_toks_no_value": ["select", "distinct", "destruction_authorised_by_employee_id", "from", "documents_to_be_destroyed"], "question": "Show the ids of all employees who have authorized destruction.", "question_toks": ["Show", "the", "ids", "of", "all", "employees", "who", "have", "authorized", "destruction", "."], "guid": 9099}}