{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the ids corresponding to templates with the description 'Presentation'.", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "query_toks": ["SELECT", "T2.template_id", "FROM", "Ref_template_types", "AS", "T1", "JOIN", "Templates", "AS", "T2", "ON", "T1.template_type_code", "=", "T2.template_type_code", "WHERE", "T1.template_type_description", "=", "``", "Presentation", "''"], "query_toks_no_value": ["select", "t2", ".", "template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1", ".", "template_type_code", "=", "t2", ".", "template_type_code", "where", "t1", ".", "template_type_description", "=", "value"], "question": "Return the ids corresponding to templates with the description 'Presentation'.", "question_toks": ["Return", "the", "ids", "corresponding", "to", "templates", "with", "the", "description", "'Presentation", "'", "."], "guid": 8683}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.", "sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'", "query_toks": ["SELECT", "T1.document_date", "FROM", "Documents", "AS", "T1", "JOIN", "Documents_with_Expenses", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T2.budget_type_code", "=", "'GV", "'", "INTERSECT", "SELECT", "T1.document_date", "FROM", "Documents", "AS", "T1", "JOIN", "Documents_with_Expenses", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T2.budget_type_code", "=", "'SF", "'"], "query_toks_no_value": ["select", "t1", ".", "document_date", "from", "documents", "as", "t1", "join", "documents_with_expenses", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "budget_type_code", "=", "value", "intersect", "select", "t1", ".", "document_date", "from", "documents", "as", "t1", "join", "documents_with_expenses", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "budget_type_code", "=", "value"], "question": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.", "question_toks": ["Give", "the", "dates", "of", "creation", "for", "documents", "that", "have", "both", "budget", "type", "codes", "'GV", "'", "and", "'SF", "'", "."], "guid": 8684}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Show all cities along with the number of drama workshop groups in each city.", "sql": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town", "query_toks": ["SELECT", "T1.City_Town", ",", "count", "(", "*", ")", "FROM", "Addresses", "AS", "T1", "JOIN", "Drama_Workshop_Groups", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID", "GROUP", "BY", "T1.City_Town"], "query_toks_no_value": ["select", "t1", ".", "city_town", ",", "count", "(", "*", ")", "from", "addresses", "as", "t1", "join", "drama_workshop_groups", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "group", "by", "t1", ".", "city_town"], "question": "Show all cities along with the number of drama workshop groups in each city.", "question_toks": ["Show", "all", "cities", "along", "with", "the", "number", "of", "drama", "workshop", "groups", "in", "each", "city", "."], "guid": 8685}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | How many documents are using the template with type code 'PPT'?", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Documents", "AS", "T1", "JOIN", "Templates", "AS", "T2", "ON", "T1.Template_ID", "=", "T2.Template_ID", "WHERE", "T2.Template_Type_Code", "=", "'PPT", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "where", "t2", ".", "template_type_code", "=", "value"], "question": "How many documents are using the template with type code 'PPT'?", "question_toks": ["How", "many", "documents", "are", "using", "the", "template", "with", "type", "code", "'PPT", "'", "?"], "guid": 8686}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | How many projects are there?", "sql": "SELECT count(*) FROM Projects", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Projects", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Projects"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "projects"], "question": "How many projects are there?", "question_toks": ["How", "many", "projects", "are", "there", "?"], "guid": 8687}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the different template type codes, and how many documents use each type?", "sql": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code", "query_toks": ["SELECT", "T1.template_type_code", ",", "count", "(", "*", ")", "FROM", "Templates", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id", "GROUP", "BY", "T1.template_type_code"], "query_toks_no_value": ["select", "t1", ".", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "group", "by", "t1", ".", "template_type_code"], "question": "What are the different template type codes, and how many documents use each type?", "question_toks": ["What", "are", "the", "different", "template", "type", "codes", ",", "and", "how", "many", "documents", "use", "each", "type", "?"], "guid": 8688}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Return the code of the document type that is most common.", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "document_type_code", "FROM", "Documents", "GROUP", "BY", "document_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "group", "by", "document_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the code of the document type that is most common.", "question_toks": ["Return", "the", "code", "of", "the", "document", "type", "that", "is", "most", "common", "."], "guid": 8689}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Give the ids of documents that have expenses and contain the letter s in their names.", "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'", "query_toks": ["SELECT", "T1.document_id", "FROM", "Documents", "AS", "T1", "JOIN", "Documents_with_expenses", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T1.document_name", "LIKE", "'", "%", "s", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "document_id", "from", "documents", "as", "t1", "join", "documents_with_expenses", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t1", ".", "document_name", "like", "value"], "question": "Give the ids of documents that have expenses and contain the letter s in their names.", "question_toks": ["Give", "the", "ids", "of", "documents", "that", "have", "expenses", "and", "contain", "the", "letter", "s", "in", "their", "names", "."], "guid": 8690}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What the smallest version number and its template type code?", "sql": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT min(Version_Number) ,  template_type_code FROM Templates", "query_toks": ["SELECT", "min", "(", "Version_Number", ")", ",", "template_type_code", "FROM", "Templates"], "query_toks_no_value": ["select", "min", "(", "version_number", ")", ",", "template_type_code", "from", "templates"], "question": "What the smallest version number and its template type code?", "question_toks": ["What", "the", "smallest", "version", "number", "and", "its", "template", "type", "code", "?"], "guid": 8691}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the codes of template types that have fewer than 3 templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "query_toks": ["SELECT", "template_type_code", "FROM", "Templates", "GROUP", "BY", "template_type_code", "HAVING", "count", "(", "*", ")", "<", "3"], "query_toks_no_value": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "having", "count", "(", "*", ")", "<", "value"], "question": "What are the codes of template types that have fewer than 3 templates?", "question_toks": ["What", "are", "the", "codes", "of", "template", "types", "that", "have", "fewer", "than", "3", "templates", "?"], "guid": 8692}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Find the types of documents with more than 4 documents.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4", "example": {"db_id": "document_management", "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4", "query_toks": ["SELECT", "document_type_code", "FROM", "documents", "GROUP", "BY", "document_type_code", "HAVING", "count", "(", "*", ")", ">", "4"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "group", "by", "document_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "Find the types of documents with more than 4 documents.", "question_toks": ["Find", "the", "types", "of", "documents", "with", "more", "than", "4", "documents", "."], "guid": 8693}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | List document IDs, document names, and document descriptions for all documents.", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id ,  document_name ,  document_description FROM Documents", "query_toks": ["SELECT", "document_id", ",", "document_name", ",", "document_description", "FROM", "Documents"], "query_toks_no_value": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents"], "question": "List document IDs, document names, and document descriptions for all documents.", "question_toks": ["List", "document", "IDs", ",", "document", "names", ",", "and", "document", "descriptions", "for", "all", "documents", "."], "guid": 8694}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the phone number of performer \"Ashley\".", "sql": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name  =  \"Ashley\"", "query_toks": ["SELECT", "Customer_Phone", "FROM", "PERFORMERS", "WHERE", "Customer_Name", "=", "``", "Ashley", "''"], "query_toks_no_value": ["select", "customer_phone", "from", "performers", "where", "customer_name", "=", "value"], "question": "Find the phone number of performer \"Ashley\".", "question_toks": ["Find", "the", "phone", "number", "of", "performer", "``", "Ashley", "''", "."], "guid": 8695}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Count the number of paragraphs.", "sql": "SELECT count(*) FROM Paragraphs", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(*) FROM Paragraphs", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Paragraphs"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "paragraphs"], "question": "Count the number of paragraphs.", "question_toks": ["Count", "the", "number", "of", "paragraphs", "."], "guid": 8696}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | How many employees do we have?", "sql": "SELECT count(*) FROM Employees", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT count(*) FROM Employees", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Employees"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employees"], "question": "How many employees do we have?", "question_toks": ["How", "many", "employees", "do", "we", "have", "?"], "guid": 8697}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the names of the drama workshop groups with address in Feliciaberg city?", "sql": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"", "query_toks": ["SELECT", "T2.Store_Name", "FROM", "Addresses", "AS", "T1", "JOIN", "Drama_Workshop_Groups", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID", "WHERE", "T1.City_Town", "=", "``", "Feliciaberg", "''"], "query_toks_no_value": ["select", "t2", ".", "store_name", "from", "addresses", "as", "t1", "join", "drama_workshop_groups", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "city_town", "=", "value"], "question": "What are the names of the drama workshop groups with address in Feliciaberg city?", "question_toks": ["What", "are", "the", "names", "of", "the", "drama", "workshop", "groups", "with", "address", "in", "Feliciaberg", "city", "?"], "guid": 8698}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Which employees do not authorize destruction for any document? Give me their employee ids.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "query_toks": ["SELECT", "employee_id", "FROM", "Employees", "EXCEPT", "SELECT", "Destruction_Authorised_by_Employee_ID", "FROM", "Documents_to_be_destroyed"], "query_toks_no_value": ["select", "employee_id", "from", "employees", "except", "select", "destruction_authorised_by_employee_id", "from", "documents_to_be_destroyed"], "question": "Which employees do not authorize destruction for any document? Give me their employee ids.", "question_toks": ["Which", "employees", "do", "not", "authorize", "destruction", "for", "any", "document", "?", "Give", "me", "their", "employee", "ids", "."], "guid": 8699}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Give me all the distinct location codes for documents.", "sql": "SELECT DISTINCT location_code FROM Document_locations", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT DISTINCT location_code FROM Document_locations", "query_toks": ["SELECT", "DISTINCT", "location_code", "FROM", "Document_locations"], "query_toks_no_value": ["select", "distinct", "location_code", "from", "document_locations"], "question": "Give me all the distinct location codes for documents.", "question_toks": ["Give", "me", "all", "the", "distinct", "location", "codes", "for", "documents", "."], "guid": 8700}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | List the order dates of all the bookings.", "sql": "SELECT Order_Date FROM BOOKINGS", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Order_Date FROM BOOKINGS", "query_toks": ["SELECT", "Order_Date", "FROM", "BOOKINGS"], "query_toks_no_value": ["select", "order_date", "from", "bookings"], "question": "List the order dates of all the bookings.", "question_toks": ["List", "the", "order", "dates", "of", "all", "the", "bookings", "."], "guid": 8701}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the account details with the largest value or with value having char '5' in it?", "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"", "query_toks": ["SELECT", "max", "(", "Account_details", ")", "FROM", "Accounts", "UNION", "SELECT", "Account_details", "FROM", "Accounts", "WHERE", "Account_details", "LIKE", "``", "%", "5", "%", "''"], "query_toks_no_value": ["select", "max", "(", "account_details", ")", "from", "accounts", "union", "select", "account_details", "from", "accounts", "where", "account_details", "like", "value"], "question": "What are the account details with the largest value or with value having char '5' in it?", "question_toks": ["What", "are", "the", "account", "details", "with", "the", "largest", "value", "or", "with", "value", "having", "char", "'5", "'", "in", "it", "?"], "guid": 8702}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What are the names and urls of images, sorted alphabetically?", "sql": "SELECT image_name ,  image_url FROM images ORDER BY image_name", "example": {"db_id": "document_management", "query": "SELECT image_name ,  image_url FROM images ORDER BY image_name", "query_toks": ["SELECT", "image_name", ",", "image_url", "FROM", "images", "ORDER", "BY", "image_name"], "query_toks_no_value": ["select", "image_name", ",", "image_url", "from", "images", "order", "by", "image_name"], "question": "What are the names and urls of images, sorted alphabetically?", "question_toks": ["What", "are", "the", "names", "and", "urls", "of", "images", ",", "sorted", "alphabetically", "?"], "guid": 8703}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the template type code of the template that is used by a document named Data base.", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\"", "query_toks": ["SELECT", "T1.template_type_code", "FROM", "Templates", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id", "WHERE", "T2.document_name", "=", "``", "Data", "base", "''"], "query_toks_no_value": ["select", "t1", ".", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "where", "t2", ".", "document_name", "=", "value"], "question": "Return the template type code of the template that is used by a document named Data base.", "question_toks": ["Return", "the", "template", "type", "code", "of", "the", "template", "that", "is", "used", "by", "a", "document", "named", "Data", "base", "."], "guid": 8704}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | List the description, code and the number of services for each service type.", "sql": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "query_toks": ["SELECT", "T1.Service_Type_Description", ",", "T2.Service_Type_Code", ",", "COUNT", "(", "*", ")", "FROM", "Ref_Service_Types", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Service_Type_Code", "=", "T2.Service_Type_Code", "GROUP", "BY", "T2.Service_Type_Code"], "query_toks_no_value": ["select", "t1", ".", "service_type_description", ",", "t2", ".", "service_type_code", ",", "count", "(", "*", ")", "from", "ref_service_types", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_type_code", "=", "t2", ".", "service_type_code", "group", "by", "t2", ".", "service_type_code"], "question": "List the description, code and the number of services for each service type.", "question_toks": ["List", "the", "description", ",", "code", "and", "the", "number", "of", "services", "for", "each", "service", "type", "."], "guid": 8705}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What are all the section titles of the document named \"David CV\"?", "sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"", "example": {"db_id": "document_management", "query": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"", "query_toks": ["SELECT", "t2.section_title", "FROM", "documents", "AS", "t1", "JOIN", "document_sections", "AS", "t2", "ON", "t1.document_code", "=", "t2.document_code", "WHERE", "t1.document_name", "=", "``", "David", "CV", "''"], "query_toks_no_value": ["select", "t2", ".", "section_title", "from", "documents", "as", "t1", "join", "document_sections", "as", "t2", "on", "t1", ".", "document_code", "=", "t2", ".", "document_code", "where", "t1", ".", "document_name", "=", "value"], "question": "What are all the section titles of the document named \"David CV\"?", "question_toks": ["What", "are", "all", "the", "section", "titles", "of", "the", "document", "named", "``", "David", "CV", "''", "?"], "guid": 8706}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Count the number of documents that do not have expenses.", "sql": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Documents WHERE document_id NOT IN ( SELECT document_id FROM Documents_with_expenses )", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Documents", "WHERE", "document_id", "NOT", "IN", "(", "SELECT", "document_id", "FROM", "Documents_with_expenses", ")"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "documents", "where", "document_id", "not", "in", "(", "select", "document_id", "from", "documents_with_expenses", ")"], "question": "Count the number of documents that do not have expenses.", "question_toks": ["Count", "the", "number", "of", "documents", "that", "do", "not", "have", "expenses", "."], "guid": 8707}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the distinct template type descriptions for the templates ever used by any document?", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "query_toks": ["SELECT", "DISTINCT", "T1.template_type_description", "FROM", "Ref_template_types", "AS", "T1", "JOIN", "Templates", "AS", "T2", "ON", "T1.template_type_code", "=", "T2.template_type_code", "JOIN", "Documents", "AS", "T3", "ON", "T2.Template_ID", "=", "T3.template_ID"], "query_toks_no_value": ["select", "distinct", "t1", ".", "template_type_description", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1", ".", "template_type_code", "=", "t2", ".", "template_type_code", "join", "documents", "as", "t3", "on", "t2", ".", "template_id", "=", "t3", ".", "template_id"], "question": "What are the distinct template type descriptions for the templates ever used by any document?", "question_toks": ["What", "are", "the", "distinct", "template", "type", "descriptions", "for", "the", "templates", "ever", "used", "by", "any", "document", "?"], "guid": 8708}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the id of each employee and the number of document destruction authorised by that employee.", "sql": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID", "query_toks": ["SELECT", "Destruction_Authorised_by_Employee_ID", ",", "count", "(", "*", ")", "FROM", "Documents_to_be_destroyed", "GROUP", "BY", "Destruction_Authorised_by_Employee_ID"], "query_toks_no_value": ["select", "destruction_authorised_by_employee_id", ",", "count", "(", "*", ")", "from", "documents_to_be_destroyed", "group", "by", "destruction_authorised_by_employee_id"], "question": "Show the id of each employee and the number of document destruction authorised by that employee.", "question_toks": ["Show", "the", "id", "of", "each", "employee", "and", "the", "number", "of", "document", "destruction", "authorised", "by", "that", "employee", "."], "guid": 8709}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Find the names of all the employees whose the role name is \"Editor\".", "sql": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Editor\"", "query_toks": ["SELECT", "T1.employee_name", "FROM", "Employees", "AS", "T1", "JOIN", "ROLES", "AS", "T2", "ON", "T1.role_code", "=", "T2.role_code", "WHERE", "T2.role_name", "=", "``", "Editor", "''"], "query_toks_no_value": ["select", "t1", ".", "employee_name", "from", "employees", "as", "t1", "join", "roles", "as", "t2", "on", "t1", ".", "role_code", "=", "t2", ".", "role_code", "where", "t2", ".", "role_name", "=", "value"], "question": "Find the names of all the employees whose the role name is \"Editor\".", "question_toks": ["Find", "the", "names", "of", "all", "the", "employees", "whose", "the", "role", "name", "is", "``", "Editor", "''", "."], "guid": 8710}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Show all the distinct product names with price higher than the average.", "sql": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)", "query_toks": ["SELECT", "DISTINCT", "Product_Name", "FROM", "PRODUCTS", "WHERE", "Product_Price", ">", "(", "SELECT", "avg", "(", "Product_Price", ")", "FROM", "PRODUCTS", ")"], "query_toks_no_value": ["select", "distinct", "product_name", "from", "products", "where", "product_price", ">", "(", "select", "avg", "(", "product_price", ")", "from", "products", ")"], "question": "Show all the distinct product names with price higher than the average.", "question_toks": ["Show", "all", "the", "distinct", "product", "names", "with", "price", "higher", "than", "the", "average", "."], "guid": 8711}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Give the ids of documents that have between one and two paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "query_toks": ["SELECT", "document_id", "FROM", "Paragraphs", "GROUP", "BY", "document_id", "HAVING", "count", "(", "*", ")", "BETWEEN", "1", "AND", "2"], "query_toks_no_value": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "value", "and", "value"], "question": "Give the ids of documents that have between one and two paragraphs.", "question_toks": ["Give", "the", "ids", "of", "documents", "that", "have", "between", "one", "and", "two", "paragraphs", "."], "guid": 8712}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What are the different role codes for users, and how many users have each?", "sql": "SELECT count(*) ,  role_code FROM users GROUP BY role_code", "example": {"db_id": "document_management", "query": "SELECT count(*) ,  role_code FROM users GROUP BY role_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "role_code", "FROM", "users", "GROUP", "BY", "role_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "role_code", "from", "users", "group", "by", "role_code"], "question": "What are the different role codes for users, and how many users have each?", "question_toks": ["What", "are", "the", "different", "role", "codes", "for", "users", ",", "and", "how", "many", "users", "have", "each", "?"], "guid": 8713}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.", "sql": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'", "query_toks": ["SELECT", "T1.statement_details", ",", "T2.document_name", "FROM", "Statements", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.statement_id", "=", "T2.document_id", "WHERE", "T1.statement_details", "=", "'Private", "Project", "'"], "query_toks_no_value": ["select", "t1", ".", "statement_details", ",", "t2", ".", "document_name", "from", "statements", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "statement_id", "=", "t2", ".", "document_id", "where", "t1", ".", "statement_details", "=", "value"], "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.", "question_toks": ["Show", "the", "statement", "detail", "and", "the", "corresponding", "document", "name", "for", "the", "statement", "with", "detail", "'Private", "Project", "'", "."], "guid": 8714}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Return the structure description of the document that has been accessed the fewest number of times.", "sql": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "document_management", "query": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "t2.document_structure_description", "FROM", "documents", "AS", "t1", "JOIN", "document_structures", "AS", "t2", "ON", "t1.document_structure_code", "=", "t2.document_structure_code", "GROUP", "BY", "t1.document_structure_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "document_structure_description", "from", "documents", "as", "t1", "join", "document_structures", "as", "t2", "on", "t1", ".", "document_structure_code", "=", "t2", ".", "document_structure_code", "group", "by", "t1", ".", "document_structure_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the structure description of the document that has been accessed the fewest number of times.", "question_toks": ["Return", "the", "structure", "description", "of", "the", "document", "that", "has", "been", "accessed", "the", "fewest", "number", "of", "times", "."], "guid": 8715}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Count the number of documents with the type code BK that correspond to each product id.", "sql": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "project_id", "FROM", "Documents", "WHERE", "document_type_code", "=", "``", "BK", "''", "GROUP", "BY", "project_id"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "project_id", "from", "documents", "where", "document_type_code", "=", "value", "group", "by", "project_id"], "question": "Count the number of documents with the type code BK that correspond to each product id.", "question_toks": ["Count", "the", "number", "of", "documents", "with", "the", "type", "code", "BK", "that", "correspond", "to", "each", "product", "id", "."], "guid": 8716}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What is the shipping agent code of shipping agent UPS?", "sql": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\";", "query_toks": ["SELECT", "shipping_agent_code", "FROM", "Ref_Shipping_Agents", "WHERE", "shipping_agent_name", "=", "``", "UPS", "''", ";"], "query_toks_no_value": ["select", "shipping_agent_code", "from", "ref_shipping_agents", "where", "shipping_agent_name", "=", "value"], "question": "What is the shipping agent code of shipping agent UPS?", "question_toks": ["What", "is", "the", "shipping", "agent", "code", "of", "shipping", "agent", "UPS", "?"], "guid": 8717}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Count the total number of roles listed.", "sql": "SELECT count(*) FROM ROLES", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT count(*) FROM ROLES", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ROLES"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "roles"], "question": "Count the total number of roles listed.", "question_toks": ["Count", "the", "total", "number", "of", "roles", "listed", "."], "guid": 8718}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.", "sql": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";", "query_toks": ["SELECT", "document_id", "FROM", "Documents", "WHERE", "document_status_code", "=", "``", "done", "''", "AND", "document_type_code", "=", "``", "Paper", "''", "EXCEPT", "SELECT", "document_id", "FROM", "Documents", "JOIN", "Ref_Shipping_Agents", "ON", "Documents.shipping_agent_code", "=", "Ref_Shipping_Agents.shipping_agent_code", "WHERE", "Ref_Shipping_Agents.shipping_agent_name", "=", "``", "USPS", "''", ";"], "query_toks_no_value": ["select", "document_id", "from", "documents", "where", "document_status_code", "=", "value", "and", "document_type_code", "=", "value", "except", "select", "document_id", "from", "documents", "join", "ref_shipping_agents", "on", "documents.shipping_agent_code", "=", "ref_shipping_agents.shipping_agent_code", "where", "ref_shipping_agents.shipping_agent_name", "=", "value"], "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.", "question_toks": ["List", "the", "document", "ids", "of", "documents", "with", "the", "status", "done", "and", "type", "Paper", ",", "which", "not", "shipped", "by", "the", "shipping", "agent", "named", "USPS", "."], "guid": 8719}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the code of each role and the number of employees in each role?", "sql": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code", "query_toks": ["SELECT", "role_code", ",", "count", "(", "*", ")", "FROM", "Employees", "GROUP", "BY", "role_code"], "query_toks_no_value": ["select", "role_code", ",", "count", "(", "*", ")", "from", "employees", "group", "by", "role_code"], "question": "What is the code of each role and the number of employees in each role?", "question_toks": ["What", "is", "the", "code", "of", "each", "role", "and", "the", "number", "of", "employees", "in", "each", "role", "?"], "guid": 8720}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What are the names of documents that do not have any sections?", "sql": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)", "example": {"db_id": "document_management", "query": "SELECT document_name FROM documents WHERE document_code NOT IN (SELECT document_code FROM document_sections)", "query_toks": ["SELECT", "document_name", "FROM", "documents", "WHERE", "document_code", "NOT", "IN", "(", "SELECT", "document_code", "FROM", "document_sections", ")"], "query_toks_no_value": ["select", "document_name", "from", "documents", "where", "document_code", "not", "in", "(", "select", "document_code", "from", "document_sections", ")"], "question": "What are the names of documents that do not have any sections?", "question_toks": ["What", "are", "the", "names", "of", "documents", "that", "do", "not", "have", "any", "sections", "?"], "guid": 8721}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the template ids of any templates used in more than a single document?", "sql": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1", "query_toks": ["SELECT", "template_id", "FROM", "Documents", "GROUP", "BY", "template_id", "HAVING", "count", "(", "*", ")", ">", "1"], "query_toks_no_value": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the template ids of any templates used in more than a single document?", "question_toks": ["What", "are", "the", "template", "ids", "of", "any", "templates", "used", "in", "more", "than", "a", "single", "document", "?"], "guid": 8722}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the ids and names for each of the documents?", "sql": "SELECT document_id ,  document_name FROM Documents", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_id ,  document_name FROM Documents", "query_toks": ["SELECT", "document_id", ",", "document_name", "FROM", "Documents"], "query_toks_no_value": ["select", "document_id", ",", "document_name", "from", "documents"], "question": "What are the ids and names for each of the documents?", "question_toks": ["What", "are", "the", "ids", "and", "names", "for", "each", "of", "the", "documents", "?"], "guid": 8723}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the id of each employee and the number of document destroyed by that employee?", "sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "query_toks": ["SELECT", "Destroyed_by_Employee_ID", ",", "count", "(", "*", ")", "FROM", "Documents_to_be_destroyed", "GROUP", "BY", "Destroyed_by_Employee_ID"], "query_toks_no_value": ["select", "destroyed_by_employee_id", ",", "count", "(", "*", ")", "from", "documents_to_be_destroyed", "group", "by", "destroyed_by_employee_id"], "question": "What are the id of each employee and the number of document destroyed by that employee?", "question_toks": ["What", "are", "the", "id", "of", "each", "employee", "and", "the", "number", "of", "document", "destroyed", "by", "that", "employee", "?"], "guid": 8724}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | How many templates have template type code CV?", "sql": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Templates", "WHERE", "template_type_code", "=", "``", "CV", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "templates", "where", "template_type_code", "=", "value"], "question": "How many templates have template type code CV?", "question_toks": ["How", "many", "templates", "have", "template", "type", "code", "CV", "?"], "guid": 8725}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What is the description of document status code 'working'?", "sql": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = \"working\";", "query_toks": ["SELECT", "document_status_description", "FROM", "Ref_Document_Status", "WHERE", "document_status_code", "=", "``", "working", "''", ";"], "query_toks_no_value": ["select", "document_status_description", "from", "ref_document_status", "where", "document_status_code", "=", "value"], "question": "What is the description of document status code 'working'?", "question_toks": ["What", "is", "the", "description", "of", "document", "status", "code", "'working", "'", "?"], "guid": 8726}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the dates for the documents with both 'GV' type and 'SF' type expenses?", "sql": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'", "query_toks": ["SELECT", "T1.document_date", "FROM", "Documents", "AS", "T1", "JOIN", "Documents_with_Expenses", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T2.budget_type_code", "=", "'GV", "'", "INTERSECT", "SELECT", "T1.document_date", "FROM", "Documents", "AS", "T1", "JOIN", "Documents_with_Expenses", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T2.budget_type_code", "=", "'SF", "'"], "query_toks_no_value": ["select", "t1", ".", "document_date", "from", "documents", "as", "t1", "join", "documents_with_expenses", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "budget_type_code", "=", "value", "intersect", "select", "t1", ".", "document_date", "from", "documents", "as", "t1", "join", "documents_with_expenses", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "budget_type_code", "=", "value"], "question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?", "question_toks": ["What", "are", "the", "dates", "for", "the", "documents", "with", "both", "'GV", "'", "type", "and", "'SF", "'", "type", "expenses", "?"], "guid": 8727}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What are the shipping agent names?", "sql": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT shipping_agent_name FROM Ref_Shipping_Agents;", "query_toks": ["SELECT", "shipping_agent_name", "FROM", "Ref_Shipping_Agents", ";"], "query_toks_no_value": ["select", "shipping_agent_name", "from", "ref_shipping_agents"], "question": "What are the shipping agent names?", "question_toks": ["What", "are", "the", "shipping", "agent", "names", "?"], "guid": 8728}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What is the id and type code for the template used by the most documents?", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.template_id", ",", "T2.Template_Type_Code", "FROM", "Documents", "AS", "T1", "JOIN", "Templates", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id", "GROUP", "BY", "T1.template_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "template_id", ",", "t2", ".", "template_type_code", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "group", "by", "t1", ".", "template_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the id and type code for the template used by the most documents?", "question_toks": ["What", "is", "the", "id", "and", "type", "code", "for", "the", "template", "used", "by", "the", "most", "documents", "?"], "guid": 8729}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the document type code for document type \"Paper\"?", "sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"", "query_toks": ["SELECT", "document_type_code", "FROM", "Ref_document_types", "WHERE", "document_type_name", "=", "``", "Paper", "''"], "query_toks_no_value": ["select", "document_type_code", "from", "ref_document_types", "where", "document_type_name", "=", "value"], "question": "What is the document type code for document type \"Paper\"?", "question_toks": ["What", "is", "the", "document", "type", "code", "for", "document", "type", "``", "Paper", "''", "?"], "guid": 8730}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the distinct names of the products that cost more than the average?", "sql": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price  >  (SELECT avg(Product_Price) FROM PRODUCTS)", "query_toks": ["SELECT", "DISTINCT", "Product_Name", "FROM", "PRODUCTS", "WHERE", "Product_Price", ">", "(", "SELECT", "avg", "(", "Product_Price", ")", "FROM", "PRODUCTS", ")"], "query_toks_no_value": ["select", "distinct", "product_name", "from", "products", "where", "product_price", ">", "(", "select", "avg", "(", "product_price", ")", "from", "products", ")"], "question": "What are the distinct names of the products that cost more than the average?", "question_toks": ["What", "are", "the", "distinct", "names", "of", "the", "products", "that", "cost", "more", "than", "the", "average", "?"], "guid": 8731}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the id of the document with the fewest paragraphs.", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "document_id", "FROM", "Paragraphs", "GROUP", "BY", "document_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Return the id of the document with the fewest paragraphs.", "question_toks": ["Return", "the", "id", "of", "the", "document", "with", "the", "fewest", "paragraphs", "."], "guid": 8732}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show the number of documents.", "sql": "SELECT count(*) FROM Documents", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Documents", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Documents"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "documents"], "question": "Show the number of documents.", "question_toks": ["Show", "the", "number", "of", "documents", "."], "guid": 8733}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the different descriptions for templates that have been used in a document.", "sql": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID", "query_toks": ["SELECT", "DISTINCT", "T1.template_type_description", "FROM", "Ref_template_types", "AS", "T1", "JOIN", "Templates", "AS", "T2", "ON", "T1.template_type_code", "=", "T2.template_type_code", "JOIN", "Documents", "AS", "T3", "ON", "T2.Template_ID", "=", "T3.template_ID"], "query_toks_no_value": ["select", "distinct", "t1", ".", "template_type_description", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1", ".", "template_type_code", "=", "t2", ".", "template_type_code", "join", "documents", "as", "t3", "on", "t2", ".", "template_id", "=", "t3", ".", "template_id"], "question": "Return the different descriptions for templates that have been used in a document.", "question_toks": ["Return", "the", "different", "descriptions", "for", "templates", "that", "have", "been", "used", "in", "a", "document", "."], "guid": 8734}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | List all document ids and receipt dates of documents.", "sql": "SELECT document_id ,  receipt_date FROM Documents;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_id ,  receipt_date FROM Documents;", "query_toks": ["SELECT", "document_id", ",", "receipt_date", "FROM", "Documents", ";"], "query_toks_no_value": ["select", "document_id", ",", "receipt_date", "from", "documents"], "question": "List all document ids and receipt dates of documents.", "question_toks": ["List", "all", "document", "ids", "and", "receipt", "dates", "of", "documents", "."], "guid": 8735}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the names of all the employees with role \"HR\".", "sql": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT employee_name FROM Employees WHERE role_code  =  \"HR\"", "query_toks": ["SELECT", "employee_name", "FROM", "Employees", "WHERE", "role_code", "=", "``", "HR", "''"], "query_toks_no_value": ["select", "employee_name", "from", "employees", "where", "role_code", "=", "value"], "question": "Show the names of all the employees with role \"HR\".", "question_toks": ["Show", "the", "names", "of", "all", "the", "employees", "with", "role", "``", "HR", "''", "."], "guid": 8736}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the version numbers and template type codes of templates with a version number greater than 5.", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "query_toks": ["SELECT", "version_number", ",", "template_type_code", "FROM", "Templates", "WHERE", "version_number", ">", "5"], "query_toks_no_value": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "value"], "question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "question_toks": ["Return", "the", "version", "numbers", "and", "template", "type", "codes", "of", "templates", "with", "a", "version", "number", "greater", "than", "5", "."], "guid": 8737}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the description of the service type which offers both the photo product and the film product?", "sql": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code WHERE T2.Product_Name  =  'film'", "query_toks": ["SELECT", "T1.Service_Type_Description", "FROM", "Ref_Service_Types", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Service_Type_Code", "=", "T2.Service_Type_Code", "WHERE", "T2.Product_Name", "=", "'photo", "'", "INTERSECT", "SELECT", "T1.Service_Type_Description", "FROM", "Ref_Service_Types", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Service_Type_Code", "=", "T2.Service_Type_Code", "WHERE", "T2.Product_Name", "=", "'film", "'"], "query_toks_no_value": ["select", "t1", ".", "service_type_description", "from", "ref_service_types", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_type_code", "=", "t2", ".", "service_type_code", "where", "t2", ".", "product_name", "=", "value", "intersect", "select", "t1", ".", "service_type_description", "from", "ref_service_types", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_type_code", "=", "t2", ".", "service_type_code", "where", "t2", ".", "product_name", "=", "value"], "question": "What is the description of the service type which offers both the photo product and the film product?", "question_toks": ["What", "is", "the", "description", "of", "the", "service", "type", "which", "offers", "both", "the", "photo", "product", "and", "the", "film", "product", "?"], "guid": 8738}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What is the document status description of the document with id 1?", "sql": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1;", "query_toks": ["SELECT", "Ref_Document_Status.document_status_description", "FROM", "Ref_Document_Status", "JOIN", "Documents", "ON", "Documents.document_status_code", "=", "Ref_Document_Status.document_status_code", "WHERE", "Documents.document_id", "=", "1", ";"], "query_toks_no_value": ["select", "ref_document_status.document_status_description", "from", "ref_document_status", "join", "documents", "on", "documents.document_status_code", "=", "ref_document_status.document_status_code", "where", "documents.document_id", "=", "value"], "question": "What is the document status description of the document with id 1?", "question_toks": ["What", "is", "the", "document", "status", "description", "of", "the", "document", "with", "id", "1", "?"], "guid": 8739}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the location code, the starting date and ending data in that location for all the documents.", "sql": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations", "query_toks": ["SELECT", "location_code", ",", "date_in_location_from", ",", "date_in_locaton_to", "FROM", "Document_locations"], "query_toks_no_value": ["select", "location_code", ",", "date_in_location_from", ",", "date_in_locaton_to", "from", "document_locations"], "question": "Show the location code, the starting date and ending data in that location for all the documents.", "question_toks": ["Show", "the", "location", "code", ",", "the", "starting", "date", "and", "ending", "data", "in", "that", "location", "for", "all", "the", "documents", "."], "guid": 8740}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Find names and ids of all documents with document type code BK.", "sql": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_name ,  document_id FROM Documents WHERE document_type_code  =  \"BK\"", "query_toks": ["SELECT", "document_name", ",", "document_id", "FROM", "Documents", "WHERE", "document_type_code", "=", "``", "BK", "''"], "query_toks_no_value": ["select", "document_name", ",", "document_id", "from", "documents", "where", "document_type_code", "=", "value"], "question": "Find names and ids of all documents with document type code BK.", "question_toks": ["Find", "names", "and", "ids", "of", "all", "documents", "with", "document", "type", "code", "BK", "."], "guid": 8741}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What document types have more than 2 corresponding documents?", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2", "example": {"db_id": "document_management", "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  2", "query_toks": ["SELECT", "document_type_code", "FROM", "documents", "GROUP", "BY", "document_type_code", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "group", "by", "document_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "What document types have more than 2 corresponding documents?", "question_toks": ["What", "document", "types", "have", "more", "than", "2", "corresponding", "documents", "?"], "guid": 8742}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | List all product names in ascending order of price.", "sql": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Product_Name FROM Products ORDER BY Product_Price ASC", "query_toks": ["SELECT", "Product_Name", "FROM", "Products", "ORDER", "BY", "Product_Price", "ASC"], "query_toks_no_value": ["select", "product_name", "from", "products", "order", "by", "product_price", "asc"], "question": "List all product names in ascending order of price.", "question_toks": ["List", "all", "product", "names", "in", "ascending", "order", "of", "price", "."], "guid": 8743}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What is the budget type code with most number of documents.", "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "budget_type_code", "FROM", "Documents_with_expenses", "GROUP", "BY", "budget_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "budget_type_code", "from", "documents_with_expenses", "group", "by", "budget_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the budget type code with most number of documents.", "question_toks": ["What", "is", "the", "budget", "type", "code", "with", "most", "number", "of", "documents", "."], "guid": 8744}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the different budget type codes, and how many documents are there for each?", "sql": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT budget_type_code ,  count(*) FROM Documents_with_expenses GROUP BY budget_type_code", "query_toks": ["SELECT", "budget_type_code", ",", "count", "(", "*", ")", "FROM", "Documents_with_expenses", "GROUP", "BY", "budget_type_code"], "query_toks_no_value": ["select", "budget_type_code", ",", "count", "(", "*", ")", "from", "documents_with_expenses", "group", "by", "budget_type_code"], "question": "What are the different budget type codes, and how many documents are there for each?", "question_toks": ["What", "are", "the", "different", "budget", "type", "codes", ",", "and", "how", "many", "documents", "are", "there", "for", "each", "?"], "guid": 8745}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show all template type codes with less than three templates.", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3", "query_toks": ["SELECT", "template_type_code", "FROM", "Templates", "GROUP", "BY", "template_type_code", "HAVING", "count", "(", "*", ")", "<", "3"], "query_toks_no_value": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "having", "count", "(", "*", ")", "<", "value"], "question": "Show all template type codes with less than three templates.", "question_toks": ["Show", "all", "template", "type", "codes", "with", "less", "than", "three", "templates", "."], "guid": 8746}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the codes, names, and descriptions of the different document types?", "sql": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types", "query_toks": ["SELECT", "document_type_code", ",", "document_type_name", ",", "document_type_description", "FROM", "Ref_document_types"], "query_toks_no_value": ["select", "document_type_code", ",", "document_type_name", ",", "document_type_description", "from", "ref_document_types"], "question": "What are the codes, names, and descriptions of the different document types?", "question_toks": ["What", "are", "the", "codes", ",", "names", ",", "and", "descriptions", "of", "the", "different", "document", "types", "?"], "guid": 8747}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Return the account details with the greatest value, as well as those that include the character 5.", "sql": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"", "query_toks": ["SELECT", "max", "(", "Account_details", ")", "FROM", "Accounts", "UNION", "SELECT", "Account_details", "FROM", "Accounts", "WHERE", "Account_details", "LIKE", "``", "%", "5", "%", "''"], "query_toks_no_value": ["select", "max", "(", "account_details", ")", "from", "accounts", "union", "select", "account_details", "from", "accounts", "where", "account_details", "like", "value"], "question": "Return the account details with the greatest value, as well as those that include the character 5.", "question_toks": ["Return", "the", "account", "details", "with", "the", "greatest", "value", ",", "as", "well", "as", "those", "that", "include", "the", "character", "5", "."], "guid": 8748}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the template ids with template type description \"Presentation\".", "sql": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\"", "query_toks": ["SELECT", "T2.template_id", "FROM", "Ref_template_types", "AS", "T1", "JOIN", "Templates", "AS", "T2", "ON", "T1.template_type_code", "=", "T2.template_type_code", "WHERE", "T1.template_type_description", "=", "``", "Presentation", "''"], "query_toks_no_value": ["select", "t2", ".", "template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1", ".", "template_type_code", "=", "t2", ".", "template_type_code", "where", "t1", ".", "template_type_description", "=", "value"], "question": "What are the template ids with template type description \"Presentation\".", "question_toks": ["What", "are", "the", "template", "ids", "with", "template", "type", "description", "``", "Presentation", "''", "."], "guid": 8749}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What is the version number and template type code for the template with version number later than 5?", "sql": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5", "query_toks": ["SELECT", "version_number", ",", "template_type_code", "FROM", "Templates", "WHERE", "version_number", ">", "5"], "query_toks_no_value": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "value"], "question": "What is the version number and template type code for the template with version number later than 5?", "question_toks": ["What", "is", "the", "version", "number", "and", "template", "type", "code", "for", "the", "template", "with", "version", "number", "later", "than", "5", "?"], "guid": 8750}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show paragraph details for paragraph with text 'Korea ' .", "sql": "select other_details from paragraphs where paragraph_text like 'korea'", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "select other_details from paragraphs where paragraph_text like 'korea'", "query_toks": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "\"korea\""], "query_toks_no_value": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "value"], "question": "Show paragraph details for paragraph with text 'Korea ' .", "question_toks": ["Show", "paragraph", "details", "for", "paragraph", "with", "text", "'Korea", "'", "."], "guid": 8751}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What is the description of document type 'Paper'?", "sql": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = \"Paper\";", "query_toks": ["SELECT", "document_type_description", "FROM", "Ref_Document_Types", "WHERE", "document_type_code", "=", "``", "Paper", "''", ";"], "query_toks_no_value": ["select", "document_type_description", "from", "ref_document_types", "where", "document_type_code", "=", "value"], "question": "What is the description of document type 'Paper'?", "question_toks": ["What", "is", "the", "description", "of", "document", "type", "'Paper", "'", "?"], "guid": 8752}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show all document type codes, document type names, document type descriptions.", "sql": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types", "query_toks": ["SELECT", "document_type_code", ",", "document_type_name", ",", "document_type_description", "FROM", "Ref_document_types"], "query_toks_no_value": ["select", "document_type_code", ",", "document_type_name", ",", "document_type_description", "from", "ref_document_types"], "question": "Show all document type codes, document type names, document type descriptions.", "question_toks": ["Show", "all", "document", "type", "codes", ",", "document", "type", "names", ",", "document", "type", "descriptions", "."], "guid": 8753}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the role code with the least employees.", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "role_code", "FROM", "Employees", "GROUP", "BY", "role_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "role_code", "from", "employees", "group", "by", "role_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Show the role code with the least employees.", "question_toks": ["Show", "the", "role", "code", "with", "the", "least", "employees", "."], "guid": 8754}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Count the number of documents.", "sql": "SELECT count(*) FROM Documents", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(*) FROM Documents", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Documents"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "documents"], "question": "Count the number of documents.", "question_toks": ["Count", "the", "number", "of", "documents", "."], "guid": 8755}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the ids of documents that have 2 or more paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2", "query_toks": ["SELECT", "document_id", "FROM", "Paragraphs", "GROUP", "BY", "document_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"], "query_toks_no_value": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the ids of documents that have 2 or more paragraphs?", "question_toks": ["What", "are", "the", "ids", "of", "documents", "that", "have", "2", "or", "more", "paragraphs", "?"], "guid": 8756}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Return the day Number and stored date for all the documents.", "sql": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date", "query_toks": ["SELECT", "T2.day_Number", ",", "T1.Date_Stored", "FROM", "All_documents", "AS", "T1", "JOIN", "Ref_calendar", "AS", "T2", "ON", "T1.date_stored", "=", "T2.calendar_date"], "query_toks_no_value": ["select", "t2", ".", "day_number", ",", "t1", ".", "date_stored", "from", "all_documents", "as", "t1", "join", "ref_calendar", "as", "t2", "on", "t1", ".", "date_stored", "=", "t2", ".", "calendar_date"], "question": "Return the day Number and stored date for all the documents.", "question_toks": ["Return", "the", "day", "Number", "and", "stored", "date", "for", "all", "the", "documents", "."], "guid": 8757}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Return the codes of the document types that do not have a total access count of over 10000.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000", "example": {"db_id": "document_management", "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000", "query_toks": ["SELECT", "document_type_code", "FROM", "documents", "GROUP", "BY", "document_type_code", "HAVING", "sum", "(", "access_count", ")", ">", "10000"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "group", "by", "document_type_code", "having", "sum", "(", "access_count", ")", ">", "value"], "question": "Return the codes of the document types that do not have a total access count of over 10000.", "question_toks": ["Return", "the", "codes", "of", "the", "document", "types", "that", "do", "not", "have", "a", "total", "access", "count", "of", "over", "10000", "."], "guid": 8758}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What is the document type code with most number of documents?", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "document_type_code", "FROM", "Documents", "GROUP", "BY", "document_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "group", "by", "document_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the document type code with most number of documents?", "question_toks": ["What", "is", "the", "document", "type", "code", "with", "most", "number", "of", "documents", "?"], "guid": 8759}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show all document names using templates with template type code BK.", "sql": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\"", "query_toks": ["SELECT", "T2.document_name", "FROM", "Templates", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id", "WHERE", "T1.template_type_code", "=", "``", "BK", "''"], "query_toks_no_value": ["select", "t2", ".", "document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "where", "t1", ".", "template_type_code", "=", "value"], "question": "Show all document names using templates with template type code BK.", "question_toks": ["Show", "all", "document", "names", "using", "templates", "with", "template", "type", "code", "BK", "."], "guid": 8760}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the order dates of orders with price higher than 1000?", "sql": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID JOIN Products AS T3 ON T2.Product_ID  =  T3.Product_ID WHERE T3.Product_price  >  1000", "query_toks": ["SELECT", "T1.Order_Date", "FROM", "Customer_Orders", "AS", "T1", "JOIN", "ORDER_ITEMS", "AS", "T2", "ON", "T1.Order_ID", "=", "T2.Order_ID", "JOIN", "Products", "AS", "T3", "ON", "T2.Product_ID", "=", "T3.Product_ID", "WHERE", "T3.Product_price", ">", "1000"], "query_toks_no_value": ["select", "t1", ".", "order_date", "from", "customer_orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "join", "products", "as", "t3", "on", "t2", ".", "product_id", "=", "t3", ".", "product_id", "where", "t3", ".", "product_price", ">", "value"], "question": "What are the order dates of orders with price higher than 1000?", "question_toks": ["What", "are", "the", "order", "dates", "of", "orders", "with", "price", "higher", "than", "1000", "?"], "guid": 8761}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | How many roles are there?", "sql": "SELECT count(*) FROM ROLES", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT count(*) FROM ROLES", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "ROLES"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "roles"], "question": "How many roles are there?", "question_toks": ["How", "many", "roles", "are", "there", "?"], "guid": 8762}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the phone number and email address of customer \"Harold\".", "sql": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"", "query_toks": ["SELECT", "Customer_Phone", ",", "Customer_Email_Address", "FROM", "CUSTOMERS", "WHERE", "Customer_Name", "=", "``", "Harold", "''"], "query_toks_no_value": ["select", "customer_phone", ",", "customer_email_address", "from", "customers", "where", "customer_name", "=", "value"], "question": "Find the phone number and email address of customer \"Harold\".", "question_toks": ["Find", "the", "phone", "number", "and", "email", "address", "of", "customer", "``", "Harold", "''", "."], "guid": 8763}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Find the code of the role that have the most employees.", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "role_code", "FROM", "Employees", "GROUP", "BY", "role_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "role_code", "from", "employees", "group", "by", "role_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the code of the role that have the most employees.", "question_toks": ["Find", "the", "code", "of", "the", "role", "that", "have", "the", "most", "employees", "."], "guid": 8764}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1", "example": {"db_id": "document_management", "query": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1", "query_toks": ["SELECT", "document_name", ",", "access_count", "FROM", "documents", "ORDER", "BY", "access_count", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "document_name", ",", "access_count", "from", "documents", "order", "by", "access_count", "desc", "limit", "value"], "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?", "question_toks": ["Find", "the", "name", "of", "the", "document", "that", "has", "been", "accessed", "the", "greatest", "number", "of", "times", ",", "as", "well", "as", "the", "count", "of", "how", "many", "times", "it", "has", "been", "accessed", "?"], "guid": 8765}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the names and template ids for documents that contain the letter w in their description.", "sql": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\"", "query_toks": ["SELECT", "document_name", ",", "template_id", "FROM", "Documents", "WHERE", "Document_Description", "LIKE", "``", "%", "w", "%", "''"], "query_toks_no_value": ["select", "document_name", ",", "template_id", "from", "documents", "where", "document_description", "like", "value"], "question": "Return the names and template ids for documents that contain the letter w in their description.", "question_toks": ["Return", "the", "names", "and", "template", "ids", "for", "documents", "that", "contain", "the", "letter", "w", "in", "their", "description", "."], "guid": 8766}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?", "sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'", "query_toks": ["SELECT", "document_name", ",", "document_date", "FROM", "Documents", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "WHERE", "T2.project_details", "=", "'Graph", "Database", "project", "'"], "query_toks_no_value": ["select", "document_name", ",", "document_date", "from", "documents", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "where", "t2", ".", "project_details", "=", "value"], "question": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?", "question_toks": ["What", "are", "the", "names", "and", "dates", "for", "documents", "corresponding", "to", "project", "that", "has", "the", "details", "'Graph", "Database", "project", "'", "?"], "guid": 8767}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the order details of the products with price higher than 2000?", "sql": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000", "query_toks": ["SELECT", "T1.Other_Item_Details", "FROM", "ORDER_ITEMS", "AS", "T1", "JOIN", "Products", "AS", "T2", "ON", "T1.Product_ID", "=", "T2.Product_ID", "WHERE", "T2.Product_price", ">", "2000"], "query_toks_no_value": ["select", "t1", ".", "other_item_details", "from", "order_items", "as", "t1", "join", "products", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "where", "t2", ".", "product_price", ">", "value"], "question": "What are the order details of the products with price higher than 2000?", "question_toks": ["What", "are", "the", "order", "details", "of", "the", "products", "with", "price", "higher", "than", "2000", "?"], "guid": 8768}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show ids for all templates not used by any document.", "sql": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents", "query_toks": ["SELECT", "template_id", "FROM", "Templates", "EXCEPT", "SELECT", "template_id", "FROM", "Documents"], "query_toks_no_value": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents"], "question": "Show ids for all templates not used by any document.", "question_toks": ["Show", "ids", "for", "all", "templates", "not", "used", "by", "any", "document", "."], "guid": 8769}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?", "sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"", "query_toks": ["SELECT", "T1.employee_id", "FROM", "Employees", "AS", "T1", "JOIN", "ROLES", "AS", "T2", "ON", "T1.role_code", "=", "T2.role_code", "WHERE", "T2.role_name", "=", "``", "Human", "Resource", "''", "OR", "T2.role_name", "=", "``", "Manager", "''"], "query_toks_no_value": ["select", "t1", ".", "employee_id", "from", "employees", "as", "t1", "join", "roles", "as", "t2", "on", "t1", ".", "role_code", "=", "t2", ".", "role_code", "where", "t2", ".", "role_name", "=", "value", "or", "t2", ".", "role_name", "=", "value"], "question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?", "question_toks": ["What", "are", "the", "employee", "ids", "of", "the", "employees", "whose", "role", "name", "is", "``", "Human", "Resource", "''", "or", "``", "Manager", "''", "?"], "guid": 8770}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.", "sql": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id;", "query_toks": ["SELECT", "T2.employee_name", ",", "T3.employee_name", "FROM", "Documents_to_be_destroyed", "AS", "T1", "JOIN", "Employees", "AS", "T2", "ON", "T1.Destruction_Authorised_by_Employee_ID", "=", "T2.employee_id", "JOIN", "Employees", "AS", "T3", "ON", "T1.Destroyed_by_Employee_ID", "=", "T3.employee_id", ";"], "query_toks_no_value": ["select", "t2", ".", "employee_name", ",", "t3", ".", "employee_name", "from", "documents_to_be_destroyed", "as", "t1", "join", "employees", "as", "t2", "on", "t1", ".", "destruction_authorised_by_employee_id", "=", "t2", ".", "employee_id", "join", "employees", "as", "t3", "on", "t1", ".", "destroyed_by_employee_id", "=", "t3", ".", "employee_id"], "question": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.", "question_toks": ["List", "the", "names", "of", "the", "employees", "who", "authorized", "the", "destruction", "of", "documents", "and", "the", "employees", "who", "destroyed", "the", "corresponding", "documents", "."], "guid": 8771}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | How many documents are there of each type?", "sql": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code", "query_toks": ["SELECT", "document_type_code", ",", "count", "(", "*", ")", "FROM", "Documents", "GROUP", "BY", "document_type_code"], "query_toks_no_value": ["select", "document_type_code", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "document_type_code"], "question": "How many documents are there of each type?", "question_toks": ["How", "many", "documents", "are", "there", "of", "each", "type", "?"], "guid": 8772}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What document types do have more than 10000 total access number.", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000", "example": {"db_id": "document_management", "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000", "query_toks": ["SELECT", "document_type_code", "FROM", "documents", "GROUP", "BY", "document_type_code", "HAVING", "sum", "(", "access_count", ")", ">", "10000"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "group", "by", "document_type_code", "having", "sum", "(", "access_count", ")", ">", "value"], "question": "What document types do have more than 10000 total access number.", "question_toks": ["What", "document", "types", "do", "have", "more", "than", "10000", "total", "access", "number", "."], "guid": 8773}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Find the name and access counts of all documents, in alphabetic order of the document name.", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY document_name", "example": {"db_id": "document_management", "query": "SELECT document_name ,  access_count FROM documents ORDER BY document_name", "query_toks": ["SELECT", "document_name", ",", "access_count", "FROM", "documents", "ORDER", "BY", "document_name"], "query_toks_no_value": ["select", "document_name", ",", "access_count", "from", "documents", "order", "by", "document_name"], "question": "Find the name and access counts of all documents, in alphabetic order of the document name.", "question_toks": ["Find", "the", "name", "and", "access", "counts", "of", "all", "documents", ",", "in", "alphabetic", "order", "of", "the", "document", "name", "."], "guid": 8774}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.", "sql": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'", "query_toks": ["SELECT", "document_type_code", ",", "document_name", ",", "document_description", "FROM", "Documents", "WHERE", "document_name", "=", "'Noel", "CV", "'", "OR", "document_name", "=", "'King", "Book", "'"], "query_toks_no_value": ["select", "document_type_code", ",", "document_name", ",", "document_description", "from", "documents", "where", "document_name", "=", "value", "or", "document_name", "=", "value"], "question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.", "question_toks": ["List", "the", "document", "type", "code", ",", "document", "name", ",", "and", "document", "description", "for", "the", "document", "with", "name", "'Noel", "CV", "'", "or", "name", "'King", "Book", "'", "."], "guid": 8775}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Count the number of customers recorded.", "sql": "SELECT count(*) FROM CUSTOMERS", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT count(*) FROM CUSTOMERS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CUSTOMERS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "Count the number of customers recorded.", "question_toks": ["Count", "the", "number", "of", "customers", "recorded", "."], "guid": 8776}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show all template type codes and descriptions.", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "query_toks": ["SELECT", "template_type_code", ",", "template_type_description", "FROM", "Ref_template_types"], "query_toks_no_value": ["select", "template_type_code", ",", "template_type_description", "from", "ref_template_types"], "question": "Show all template type codes and descriptions.", "question_toks": ["Show", "all", "template", "type", "codes", "and", "descriptions", "."], "guid": 8777}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | How many distinct currency codes are there for all drama workshop groups?", "sql": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups", "query_toks": ["SELECT", "count", "(", "DISTINCT", "Currency_Code", ")", "FROM", "Drama_Workshop_Groups"], "query_toks_no_value": ["select", "count", "(", "distinct", "currency_code", ")", "from", "drama_workshop_groups"], "question": "How many distinct currency codes are there for all drama workshop groups?", "question_toks": ["How", "many", "distinct", "currency", "codes", "are", "there", "for", "all", "drama", "workshop", "groups", "?"], "guid": 8778}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Count the number of statements.", "sql": "SELECT count(*) FROM Statements", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Statements", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Statements"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "statements"], "question": "Count the number of statements.", "question_toks": ["Count", "the", "number", "of", "statements", "."], "guid": 8779}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the ids, version numbers, and type codes for each template?", "sql": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates", "query_toks": ["SELECT", "template_id", ",", "version_number", ",", "template_type_code", "FROM", "Templates"], "query_toks_no_value": ["select", "template_id", ",", "version_number", ",", "template_type_code", "from", "templates"], "question": "What are the ids, version numbers, and type codes for each template?", "question_toks": ["What", "are", "the", "ids", ",", "version", "numbers", ",", "and", "type", "codes", "for", "each", "template", "?"], "guid": 8780}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the document type name for the document with name \"How to read a book\"?", "sql": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code  =  T2.document_type_code WHERE T1.document_name  =  \"How to read a book\"", "query_toks": ["SELECT", "T2.document_type_name", "FROM", "All_documents", "AS", "T1", "JOIN", "Ref_document_types", "AS", "T2", "ON", "T1.document_type_code", "=", "T2.document_type_code", "WHERE", "T1.document_name", "=", "``", "How", "to", "read", "a", "book", "''"], "query_toks_no_value": ["select", "t2", ".", "document_type_name", "from", "all_documents", "as", "t1", "join", "ref_document_types", "as", "t2", "on", "t1", ".", "document_type_code", "=", "t2", ".", "document_type_code", "where", "t1", ".", "document_name", "=", "value"], "question": "What is the document type name for the document with name \"How to read a book\"?", "question_toks": ["What", "is", "the", "document", "type", "name", "for", "the", "document", "with", "name", "``", "How", "to", "read", "a", "book", "''", "?"], "guid": 8781}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the type codes and descriptions for all template types?", "sql": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types", "query_toks": ["SELECT", "template_type_code", ",", "template_type_description", "FROM", "Ref_template_types"], "query_toks_no_value": ["select", "template_type_code", ",", "template_type_description", "from", "ref_template_types"], "question": "What are the type codes and descriptions for all template types?", "question_toks": ["What", "are", "the", "type", "codes", "and", "descriptions", "for", "all", "template", "types", "?"], "guid": 8782}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the roles with three or more employees? Give me the role codes.", "sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3", "query_toks": ["SELECT", "role_code", "FROM", "Employees", "GROUP", "BY", "role_code", "HAVING", "count", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "role_code", "from", "employees", "group", "by", "role_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the roles with three or more employees? Give me the role codes.", "question_toks": ["What", "are", "the", "roles", "with", "three", "or", "more", "employees", "?", "Give", "me", "the", "role", "codes", "."], "guid": 8783}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What is the mail date of the document with id 7?", "sql": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7;", "query_toks": ["SELECT", "mailing_date", "FROM", "Documents_Mailed", "WHERE", "document_id", "=", "7", ";"], "query_toks_no_value": ["select", "mailing_date", "from", "documents_mailed", "where", "document_id", "=", "value"], "question": "What is the mail date of the document with id 7?", "question_toks": ["What", "is", "the", "mail", "date", "of", "the", "document", "with", "id", "7", "?"], "guid": 8784}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the name and code of the location with the smallest number of documents?", "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T2.location_name", ",", "T1.location_code", "FROM", "Document_locations", "AS", "T1", "JOIN", "Ref_locations", "AS", "T2", "ON", "T1.location_code", "=", "T2.location_code", "GROUP", "BY", "T1.location_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "location_name", ",", "t1", ".", "location_code", "from", "document_locations", "as", "t1", "join", "ref_locations", "as", "t2", "on", "t1", ".", "location_code", "=", "t2", ".", "location_code", "group", "by", "t1", ".", "location_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What are the name and code of the location with the smallest number of documents?", "question_toks": ["What", "are", "the", "name", "and", "code", "of", "the", "location", "with", "the", "smallest", "number", "of", "documents", "?"], "guid": 8785}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show the number of projects.", "sql": "SELECT count(*) FROM Projects", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Projects", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Projects"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "projects"], "question": "Show the number of projects.", "question_toks": ["Show", "the", "number", "of", "projects", "."], "guid": 8786}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | List the distinct payment method codes with the number of orders made", "sql": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code", "query_toks": ["SELECT", "payment_method_code", ",", "count", "(", "*", ")", "FROM", "INVOICES", "GROUP", "BY", "payment_method_code"], "query_toks_no_value": ["select", "payment_method_code", ",", "count", "(", "*", ")", "from", "invoices", "group", "by", "payment_method_code"], "question": "List the distinct payment method codes with the number of orders made", "question_toks": ["List", "the", "distinct", "payment", "method", "codes", "with", "the", "number", "of", "orders", "made"], "guid": 8787}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the ids of all the employees who have destroyed documents?", "sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "query_toks": ["SELECT", "DISTINCT", "Destroyed_by_Employee_ID", "FROM", "Documents_to_be_destroyed"], "query_toks_no_value": ["select", "distinct", "destroyed_by_employee_id", "from", "documents_to_be_destroyed"], "question": "What are the ids of all the employees who have destroyed documents?", "question_toks": ["What", "are", "the", "ids", "of", "all", "the", "employees", "who", "have", "destroyed", "documents", "?"], "guid": 8788}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "query_toks": ["SELECT", "T1.paragraph_id", ",", "T1.paragraph_text", "FROM", "Paragraphs", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T2.Document_Name", "=", "'Welcome", "to", "NY", "'"], "query_toks_no_value": ["select", "t1", ".", "paragraph_id", ",", "t1", ".", "paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "document_name", "=", "value"], "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "question_toks": ["What", "are", "the", "ids", "and", "texts", "of", "paragraphs", "in", "the", "document", "titled", "'Welcome", "to", "NY", "'", "?"], "guid": 8789}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Find names of the document without any images.", "sql": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id", "example": {"db_id": "document_management", "query": "SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code JOIN document_sections_images AS t3 ON t2.section_id  =  t3.section_id", "query_toks": ["SELECT", "document_name", "FROM", "documents", "EXCEPT", "SELECT", "t1.document_name", "FROM", "documents", "AS", "t1", "JOIN", "document_sections", "AS", "t2", "ON", "t1.document_code", "=", "t2.document_code", "JOIN", "document_sections_images", "AS", "t3", "ON", "t2.section_id", "=", "t3.section_id"], "query_toks_no_value": ["select", "document_name", "from", "documents", "except", "select", "t1", ".", "document_name", "from", "documents", "as", "t1", "join", "document_sections", "as", "t2", "on", "t1", ".", "document_code", "=", "t2", ".", "document_code", "join", "document_sections_images", "as", "t3", "on", "t2", ".", "section_id", "=", "t3", ".", "section_id"], "question": "Find names of the document without any images.", "question_toks": ["Find", "names", "of", "the", "document", "without", "any", "images", "."], "guid": 8790}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Return the description of the document type name 'Film'.", "sql": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_type_description FROM Ref_document_types WHERE document_type_name  =  \"Film\"", "query_toks": ["SELECT", "document_type_description", "FROM", "Ref_document_types", "WHERE", "document_type_name", "=", "``", "Film", "''"], "query_toks_no_value": ["select", "document_type_description", "from", "ref_document_types", "where", "document_type_name", "=", "value"], "question": "Return the description of the document type name 'Film'.", "question_toks": ["Return", "the", "description", "of", "the", "document", "type", "name", "'Film", "'", "."], "guid": 8791}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Give me the name and description of the document type code RV.", "sql": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"", "query_toks": ["SELECT", "document_type_name", ",", "document_type_description", "FROM", "Ref_document_types", "WHERE", "document_type_code", "=", "``", "RV", "''"], "query_toks_no_value": ["select", "document_type_name", ",", "document_type_description", "from", "ref_document_types", "where", "document_type_code", "=", "value"], "question": "Give me the name and description of the document type code RV.", "question_toks": ["Give", "me", "the", "name", "and", "description", "of", "the", "document", "type", "code", "RV", "."], "guid": 8792}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.", "sql": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id;", "query_toks": ["SELECT", "document_id", ",", "count", "(", "DISTINCT", "employee_id", ")", "FROM", "Circulation_History", "GROUP", "BY", "document_id", ";"], "query_toks_no_value": ["select", "document_id", ",", "count", "(", "distinct", "employee_id", ")", "from", "circulation_history", "group", "by", "document_id"], "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.", "question_toks": ["For", "each", "document", ",", "list", "the", "number", "of", "employees", "who", "have", "showed", "up", "in", "the", "circulation", "history", "of", "that", "document", ".", "List", "the", "document", "ids", "and", "number", "of", "employees", "."], "guid": 8793}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the name, role code, and date of birth for the employee with name 'Armani'.", "sql": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'", "query_toks": ["SELECT", "employee_name", ",", "role_code", ",", "date_of_birth", "FROM", "Employees", "WHERE", "employee_Name", "=", "'Armani", "'"], "query_toks_no_value": ["select", "employee_name", ",", "role_code", ",", "date_of_birth", "from", "employees", "where", "employee_name", "=", "value"], "question": "Show the name, role code, and date of birth for the employee with name 'Armani'.", "question_toks": ["Show", "the", "name", ",", "role", "code", ",", "and", "date", "of", "birth", "for", "the", "employee", "with", "name", "'Armani", "'", "."], "guid": 8794}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the employee ids and the number of documents destroyed by each employee.", "sql": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID", "query_toks": ["SELECT", "Destroyed_by_Employee_ID", ",", "count", "(", "*", ")", "FROM", "Documents_to_be_destroyed", "GROUP", "BY", "Destroyed_by_Employee_ID"], "query_toks_no_value": ["select", "destroyed_by_employee_id", ",", "count", "(", "*", ")", "from", "documents_to_be_destroyed", "group", "by", "destroyed_by_employee_id"], "question": "Show the employee ids and the number of documents destroyed by each employee.", "question_toks": ["Show", "the", "employee", "ids", "and", "the", "number", "of", "documents", "destroyed", "by", "each", "employee", "."], "guid": 8795}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the payment method code used by the most orders?", "sql": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "payment_method_code", "FROM", "INVOICES", "GROUP", "BY", "payment_method_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "payment_method_code", "from", "invoices", "group", "by", "payment_method_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the payment method code used by the most orders?", "question_toks": ["What", "is", "the", "payment", "method", "code", "used", "by", "the", "most", "orders", "?"], "guid": 8796}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the location codes with at least 3 documents.", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3", "query_toks": ["SELECT", "location_code", "FROM", "Document_locations", "GROUP", "BY", "location_code", "HAVING", "count", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "location_code", "from", "document_locations", "group", "by", "location_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show the location codes with at least 3 documents.", "question_toks": ["Show", "the", "location", "codes", "with", "at", "least", "3", "documents", "."], "guid": 8797}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | List all the document names which contains \"CV\".", "sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"", "example": {"db_id": "document_management", "query": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"", "query_toks": ["SELECT", "document_name", "FROM", "documents", "WHERE", "document_name", "LIKE", "``", "%", "CV", "%", "''"], "query_toks_no_value": ["select", "document_name", "from", "documents", "where", "document_name", "like", "value"], "question": "List all the document names which contains \"CV\".", "question_toks": ["List", "all", "the", "document", "names", "which", "contains", "``", "CV", "''", "."], "guid": 8798}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the location code for the country \"Canada\"?", "sql": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\"", "query_toks": ["SELECT", "location_code", "FROM", "Ref_locations", "WHERE", "location_name", "=", "``", "Canada", "''"], "query_toks_no_value": ["select", "location_code", "from", "ref_locations", "where", "location_name", "=", "value"], "question": "What is the location code for the country \"Canada\"?", "question_toks": ["What", "is", "the", "location", "code", "for", "the", "country", "``", "Canada", "''", "?"], "guid": 8799}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What is the document id with 1 to 2 paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2", "query_toks": ["SELECT", "document_id", "FROM", "Paragraphs", "GROUP", "BY", "document_id", "HAVING", "count", "(", "*", ")", "BETWEEN", "1", "AND", "2"], "query_toks_no_value": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "value", "and", "value"], "question": "What is the document id with 1 to 2 paragraphs?", "question_toks": ["What", "is", "the", "document", "id", "with", "1", "to", "2", "paragraphs", "?"], "guid": 8800}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the location codes and the number of documents in each location.", "sql": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code", "query_toks": ["SELECT", "location_code", ",", "count", "(", "*", ")", "FROM", "Document_locations", "GROUP", "BY", "location_code"], "query_toks_no_value": ["select", "location_code", ",", "count", "(", "*", ")", "from", "document_locations", "group", "by", "location_code"], "question": "Show the location codes and the number of documents in each location.", "question_toks": ["Show", "the", "location", "codes", "and", "the", "number", "of", "documents", "in", "each", "location", "."], "guid": 8801}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What is draft detail of the document with id 7?", "sql": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7;", "query_toks": ["SELECT", "draft_details", "FROM", "Document_Drafts", "WHERE", "document_id", "=", "7", ";"], "query_toks_no_value": ["select", "draft_details", "from", "document_drafts", "where", "document_id", "=", "value"], "question": "What is draft detail of the document with id 7?", "question_toks": ["What", "is", "draft", "detail", "of", "the", "document", "with", "id", "7", "?"], "guid": 8802}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | List all statement ids and statement details.", "sql": "SELECT STATEMENT_ID ,  statement_details FROM Statements", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT STATEMENT_ID ,  statement_details FROM Statements", "query_toks": ["SELECT", "STATEMENT_ID", ",", "statement_details", "FROM", "Statements"], "query_toks_no_value": ["select", "statement_id", ",", "statement_details", "from", "statements"], "question": "List all statement ids and statement details.", "question_toks": ["List", "all", "statement", "ids", "and", "statement", "details", "."], "guid": 8803}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the date when the document \"Marry CV\" was stored?", "sql": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"", "query_toks": ["SELECT", "date_stored", "FROM", "All_documents", "WHERE", "Document_name", "=", "``", "Marry", "CV", "''"], "query_toks_no_value": ["select", "date_stored", "from", "all_documents", "where", "document_name", "=", "value"], "question": "What is the date when the document \"Marry CV\" was stored?", "question_toks": ["What", "is", "the", "date", "when", "the", "document", "``", "Marry", "CV", "''", "was", "stored", "?"], "guid": 8804}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Which template type code is used by most number of documents?", "sql": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.template_type_code", "FROM", "Templates", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id", "GROUP", "BY", "T1.template_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "group", "by", "t1", ".", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which template type code is used by most number of documents?", "question_toks": ["Which", "template", "type", "code", "is", "used", "by", "most", "number", "of", "documents", "?"], "guid": 8805}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the product names with average product price smaller than 1000000?", "sql": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000", "query_toks": ["SELECT", "Product_Name", "FROM", "PRODUCTS", "GROUP", "BY", "Product_Name", "HAVING", "avg", "(", "Product_Price", ")", "<", "1000000"], "query_toks_no_value": ["select", "product_name", "from", "products", "group", "by", "product_name", "having", "avg", "(", "product_price", ")", "<", "value"], "question": "What are the product names with average product price smaller than 1000000?", "question_toks": ["What", "are", "the", "product", "names", "with", "average", "product", "price", "smaller", "than", "1000000", "?"], "guid": 8806}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | How many paragraphs in total?", "sql": "SELECT count(*) FROM Paragraphs", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(*) FROM Paragraphs", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Paragraphs"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "paragraphs"], "question": "How many paragraphs in total?", "question_toks": ["How", "many", "paragraphs", "in", "total", "?"], "guid": 8807}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.", "sql": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1;", "query_toks": ["SELECT", "Ref_Shipping_Agents.shipping_agent_name", ",", "count", "(", "Documents.document_id", ")", "FROM", "Ref_Shipping_Agents", "JOIN", "Documents", "ON", "Documents.shipping_agent_code", "=", "Ref_Shipping_Agents.shipping_agent_code", "GROUP", "BY", "Ref_Shipping_Agents.shipping_agent_code", "ORDER", "BY", "count", "(", "Documents.document_id", ")", "DESC", "LIMIT", "1", ";"], "query_toks_no_value": ["select", "ref_shipping_agents.shipping_agent_name", ",", "count", "(", "documents.document_id", ")", "from", "ref_shipping_agents", "join", "documents", "on", "documents.shipping_agent_code", "=", "ref_shipping_agents.shipping_agent_code", "group", "by", "ref_shipping_agents.shipping_agent_code", "order", "by", "count", "(", "documents.document_id", ")", "desc", "limit", "value"], "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.", "question_toks": ["Which", "shipping", "agent", "shipped", "the", "most", "documents", "?", "List", "the", "shipping", "agent", "name", "and", "the", "number", "of", "documents", "."], "guid": 8808}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Find the name and description of the role with code \"MG\".", "sql": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_name ,  role_description FROM ROLES WHERE role_code  =  \"MG\"", "query_toks": ["SELECT", "role_name", ",", "role_description", "FROM", "ROLES", "WHERE", "role_code", "=", "``", "MG", "''"], "query_toks_no_value": ["select", "role_name", ",", "role_description", "from", "roles", "where", "role_code", "=", "value"], "question": "Find the name and description of the role with code \"MG\".", "question_toks": ["Find", "the", "name", "and", "description", "of", "the", "role", "with", "code", "``", "MG", "''", "."], "guid": 8809}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | How many customers do we have?", "sql": "SELECT count(*) FROM CUSTOMERS", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT count(*) FROM CUSTOMERS", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CUSTOMERS"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customers"], "question": "How many customers do we have?", "question_toks": ["How", "many", "customers", "do", "we", "have", "?"], "guid": 8810}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What are the average access counts of documents that have the functional area description \"Acknowledgement\"?", "sql": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"", "example": {"db_id": "document_management", "query": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"", "query_toks": ["SELECT", "avg", "(", "t1.access_count", ")", "FROM", "documents", "AS", "t1", "JOIN", "document_functional_areas", "AS", "t2", "ON", "t1.document_code", "=", "t2.document_code", "JOIN", "functional_areas", "AS", "t3", "ON", "t2.functional_area_code", "=", "t3.functional_area_code", "WHERE", "t3.functional_area_description", "=", "``", "Acknowledgement", "''"], "query_toks_no_value": ["select", "avg", "(", "t1", ".", "access_count", ")", "from", "documents", "as", "t1", "join", "document_functional_areas", "as", "t2", "on", "t1", ".", "document_code", "=", "t2", ".", "document_code", "join", "functional_areas", "as", "t3", "on", "t2", ".", "functional_area_code", "=", "t3", ".", "functional_area_code", "where", "t3", ".", "functional_area_description", "=", "value"], "question": "What are the average access counts of documents that have the functional area description \"Acknowledgement\"?", "question_toks": ["What", "are", "the", "average", "access", "counts", "of", "documents", "that", "have", "the", "functional", "area", "description", "``", "Acknowledgement", "''", "?"], "guid": 8811}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the id and type code of the template that is used for the greatest number of documents.", "sql": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.template_id", ",", "T2.Template_Type_Code", "FROM", "Documents", "AS", "T1", "JOIN", "Templates", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id", "GROUP", "BY", "T1.template_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "template_id", ",", "t2", ".", "template_type_code", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "group", "by", "t1", ".", "template_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the id and type code of the template that is used for the greatest number of documents.", "question_toks": ["Return", "the", "id", "and", "type", "code", "of", "the", "template", "that", "is", "used", "for", "the", "greatest", "number", "of", "documents", "."], "guid": 8812}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Return the ids of documents that do not have expenses.", "sql": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses", "query_toks": ["SELECT", "document_id", "FROM", "Documents", "EXCEPT", "SELECT", "document_id", "FROM", "Documents_with_expenses"], "query_toks_no_value": ["select", "document_id", "from", "documents", "except", "select", "document_id", "from", "documents_with_expenses"], "question": "Return the ids of documents that do not have expenses.", "question_toks": ["Return", "the", "ids", "of", "documents", "that", "do", "not", "have", "expenses", "."], "guid": 8813}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | List all role codes, role names, and role descriptions.", "sql": "SELECT role_code ,  role_name ,  role_description FROM ROLES", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_code ,  role_name ,  role_description FROM ROLES", "query_toks": ["SELECT", "role_code", ",", "role_name", ",", "role_description", "FROM", "ROLES"], "query_toks_no_value": ["select", "role_code", ",", "role_name", ",", "role_description", "from", "roles"], "question": "List all role codes, role names, and role descriptions.", "question_toks": ["List", "all", "role", "codes", ",", "role", "names", ",", "and", "role", "descriptions", "."], "guid": 8814}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show the statement id and the statement detail for the statement with most number of accounts.", "sql": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.statement_id", ",", "T2.statement_details", "FROM", "Accounts", "AS", "T1", "JOIN", "Statements", "AS", "T2", "ON", "T1.statement_id", "=", "T2.statement_id", "GROUP", "BY", "T1.statement_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "statement_id", ",", "t2", ".", "statement_details", "from", "accounts", "as", "t1", "join", "statements", "as", "t2", "on", "t1", ".", "statement_id", "=", "t2", ".", "statement_id", "group", "by", "t1", ".", "statement_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Show the statement id and the statement detail for the statement with most number of accounts.", "question_toks": ["Show", "the", "statement", "id", "and", "the", "statement", "detail", "for", "the", "statement", "with", "most", "number", "of", "accounts", "."], "guid": 8815}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show all document ids and the number of paragraphs in each document. Order by document id.", "sql": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id", "query_toks": ["SELECT", "document_id", ",", "count", "(", "*", ")", "FROM", "Paragraphs", "GROUP", "BY", "document_id", "ORDER", "BY", "document_id"], "query_toks_no_value": ["select", "document_id", ",", "count", "(", "*", ")", "from", "paragraphs", "group", "by", "document_id", "order", "by", "document_id"], "question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "question_toks": ["Show", "all", "document", "ids", "and", "the", "number", "of", "paragraphs", "in", "each", "document", ".", "Order", "by", "document", "id", "."], "guid": 8816}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the codes of template types that are not used for any document?", "sql": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id", "query_toks": ["SELECT", "template_type_code", "FROM", "Templates", "EXCEPT", "SELECT", "template_type_code", "FROM", "Templates", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.template_id", "=", "T2.template_id"], "query_toks_no_value": ["select", "template_type_code", "from", "templates", "except", "select", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id"], "question": "What are the codes of template types that are not used for any document?", "question_toks": ["What", "are", "the", "codes", "of", "template", "types", "that", "are", "not", "used", "for", "any", "document", "?"], "guid": 8817}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the ids and details for each project?", "sql": "SELECT project_id ,  project_details FROM Projects", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT project_id ,  project_details FROM Projects", "query_toks": ["SELECT", "project_id", ",", "project_details", "FROM", "Projects"], "query_toks_no_value": ["select", "project_id", ",", "project_details", "from", "projects"], "question": "What are the ids and details for each project?", "question_toks": ["What", "are", "the", "ids", "and", "details", "for", "each", "project", "?"], "guid": 8818}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the marketing region code that has the most drama workshop groups?", "sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Marketing_Region_Code", "FROM", "Drama_Workshop_Groups", "GROUP", "BY", "Marketing_Region_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "marketing_region_code", "from", "drama_workshop_groups", "group", "by", "marketing_region_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the marketing region code that has the most drama workshop groups?", "question_toks": ["What", "is", "the", "marketing", "region", "code", "that", "has", "the", "most", "drama", "workshop", "groups", "?"], "guid": 8819}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the ids of the employees who don't authorize destruction for any document.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed", "query_toks": ["SELECT", "employee_id", "FROM", "Employees", "EXCEPT", "SELECT", "Destruction_Authorised_by_Employee_ID", "FROM", "Documents_to_be_destroyed"], "query_toks_no_value": ["select", "employee_id", "from", "employees", "except", "select", "destruction_authorised_by_employee_id", "from", "documents_to_be_destroyed"], "question": "Show the ids of the employees who don't authorize destruction for any document.", "question_toks": ["Show", "the", "ids", "of", "the", "employees", "who", "do", "n't", "authorize", "destruction", "for", "any", "document", "."], "guid": 8820}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".", "sql": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"", "query_toks": ["SELECT", "T1.employee_id", "FROM", "Employees", "AS", "T1", "JOIN", "ROLES", "AS", "T2", "ON", "T1.role_code", "=", "T2.role_code", "WHERE", "T2.role_name", "=", "``", "Human", "Resource", "''", "OR", "T2.role_name", "=", "``", "Manager", "''"], "query_toks_no_value": ["select", "t1", ".", "employee_id", "from", "employees", "as", "t1", "join", "roles", "as", "t2", "on", "t1", ".", "role_code", "=", "t2", ".", "role_code", "where", "t2", ".", "role_name", "=", "value", "or", "t2", ".", "role_name", "=", "value"], "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".", "question_toks": ["Show", "the", "employee", "ids", "for", "all", "employees", "with", "role", "name", "``", "Human", "Resource", "''", "or", "``", "Manager", "''", "."], "guid": 8821}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show ids for all documents with budget types described as 'Government'.", "sql": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"", "query_toks": ["SELECT", "T1.document_id", "FROM", "Documents_with_expenses", "AS", "T1", "JOIN", "Ref_Budget_Codes", "AS", "T2", "ON", "T1.Budget_Type_code", "=", "T2.Budget_Type_code", "WHERE", "T2.budget_type_Description", "=", "``", "Government", "''"], "query_toks_no_value": ["select", "t1", ".", "document_id", "from", "documents_with_expenses", "as", "t1", "join", "ref_budget_codes", "as", "t2", "on", "t1", ".", "budget_type_code", "=", "t2", ".", "budget_type_code", "where", "t2", ".", "budget_type_description", "=", "value"], "question": "Show ids for all documents with budget types described as 'Government'.", "question_toks": ["Show", "ids", "for", "all", "documents", "with", "budget", "types", "described", "as", "'Government", "'", "."], "guid": 8822}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show statement id, statement detail, account detail for accounts.", "sql": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id", "query_toks": ["SELECT", "T1.statement_id", ",", "T2.statement_details", ",", "T1.account_details", "FROM", "Accounts", "AS", "T1", "JOIN", "Statements", "AS", "T2", "ON", "T1.statement_id", "=", "T2.statement_id"], "query_toks_no_value": ["select", "t1", ".", "statement_id", ",", "t2", ".", "statement_details", ",", "t1", ".", "account_details", "from", "accounts", "as", "t1", "join", "statements", "as", "t2", "on", "t1", ".", "statement_id", "=", "t2", ".", "statement_id"], "question": "Show statement id, statement detail, account detail for accounts.", "question_toks": ["Show", "statement", "id", ",", "statement", "detail", ",", "account", "detail", "for", "accounts", "."], "guid": 8823}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the states or counties where the stores with marketing region code \"CA\" are located.", "sql": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"", "query_toks": ["SELECT", "T1.State_County", "FROM", "Addresses", "AS", "T1", "JOIN", "Stores", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID", "WHERE", "T2.Marketing_Region_Code", "=", "``", "CA", "''"], "query_toks_no_value": ["select", "t1", ".", "state_county", "from", "addresses", "as", "t1", "join", "stores", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "marketing_region_code", "=", "value"], "question": "Find the states or counties where the stores with marketing region code \"CA\" are located.", "question_toks": ["Find", "the", "states", "or", "counties", "where", "the", "stores", "with", "marketing", "region", "code", "``", "CA", "''", "are", "located", "."], "guid": 8824}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Count the number of budget codes.", "sql": "SELECT count(*) FROM Ref_budget_codes", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Ref_budget_codes", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Ref_budget_codes"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_budget_codes"], "question": "Count the number of budget codes.", "question_toks": ["Count", "the", "number", "of", "budget", "codes", "."], "guid": 8825}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the city the store named \"FJA Filming\" is in.", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"", "query_toks": ["SELECT", "T1.City_Town", "FROM", "Addresses", "AS", "T1", "JOIN", "Stores", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID", "WHERE", "T2.Store_Name", "=", "``", "FJA", "Filming", "''"], "query_toks_no_value": ["select", "t1", ".", "city_town", "from", "addresses", "as", "t1", "join", "stores", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "store_name", "=", "value"], "question": "Find the city the store named \"FJA Filming\" is in.", "question_toks": ["Find", "the", "city", "the", "store", "named", "``", "FJA", "Filming", "''", "is", "in", "."], "guid": 8826}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Return the id of the project that has the fewest corresponding documents.", "sql": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT project_id FROM Documents GROUP BY project_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "project_id", "FROM", "Documents", "GROUP", "BY", "project_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "project_id", "from", "documents", "group", "by", "project_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Return the id of the project that has the fewest corresponding documents.", "question_toks": ["Return", "the", "id", "of", "the", "project", "that", "has", "the", "fewest", "corresponding", "documents", "."], "guid": 8827}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | How many document types are there?", "sql": "SELECT count(*) FROM Ref_document_types", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT count(*) FROM Ref_document_types", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Ref_document_types"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_document_types"], "question": "How many document types are there?", "question_toks": ["How", "many", "document", "types", "are", "there", "?"], "guid": 8828}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Find the number of employees we have.", "sql": "SELECT count(*) FROM Employees", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT count(*) FROM Employees", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Employees"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employees"], "question": "Find the number of employees we have.", "question_toks": ["Find", "the", "number", "of", "employees", "we", "have", "."], "guid": 8829}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Tell me the name of the most pricy product.", "sql": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1", "query_toks": ["SELECT", "Product_Name", "FROM", "PRODUCTS", "ORDER", "BY", "Product_Price", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_name", "from", "products", "order", "by", "product_price", "desc", "limit", "value"], "question": "Tell me the name of the most pricy product.", "question_toks": ["Tell", "me", "the", "name", "of", "the", "most", "pricy", "product", "."], "guid": 8830}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the ids and details of all statements?", "sql": "SELECT STATEMENT_ID ,  statement_details FROM Statements", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT STATEMENT_ID ,  statement_details FROM Statements", "query_toks": ["SELECT", "STATEMENT_ID", ",", "statement_details", "FROM", "Statements"], "query_toks_no_value": ["select", "statement_id", ",", "statement_details", "from", "statements"], "question": "What are the ids and details of all statements?", "question_toks": ["What", "are", "the", "ids", "and", "details", "of", "all", "statements", "?"], "guid": 8831}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Which marketing region has the most drama workshop groups? Give me the region code.", "sql": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Marketing_Region_Code", "FROM", "Drama_Workshop_Groups", "GROUP", "BY", "Marketing_Region_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "marketing_region_code", "from", "drama_workshop_groups", "group", "by", "marketing_region_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which marketing region has the most drama workshop groups? Give me the region code.", "question_toks": ["Which", "marketing", "region", "has", "the", "most", "drama", "workshop", "groups", "?", "Give", "me", "the", "region", "code", "."], "guid": 8832}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | How many templates do we have?", "sql": "SELECT count(*) FROM Templates", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(*) FROM Templates", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Templates"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "templates"], "question": "How many templates do we have?", "question_toks": ["How", "many", "templates", "do", "we", "have", "?"], "guid": 8833}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the location name and code with the least documents.", "sql": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "T2.location_name", ",", "T1.location_code", "FROM", "Document_locations", "AS", "T1", "JOIN", "Ref_locations", "AS", "T2", "ON", "T1.location_code", "=", "T2.location_code", "GROUP", "BY", "T1.location_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "t2", ".", "location_name", ",", "t1", ".", "location_code", "from", "document_locations", "as", "t1", "join", "ref_locations", "as", "t2", "on", "t1", ".", "location_code", "=", "t2", ".", "location_code", "group", "by", "t1", ".", "location_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Show the location name and code with the least documents.", "question_toks": ["Show", "the", "location", "name", "and", "code", "with", "the", "least", "documents", "."], "guid": 8834}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?", "sql": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1", "example": {"db_id": "document_management", "query": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1", "query_toks": ["SELECT", "document_name", ",", "access_count", "FROM", "documents", "ORDER", "BY", "access_count", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "document_name", ",", "access_count", "from", "documents", "order", "by", "access_count", "desc", "limit", "value"], "question": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?", "question_toks": ["What", "is", "the", "name", "of", "the", "document", "which", "has", "been", "accessed", "the", "most", "times", ",", "as", "well", "as", "the", "number", "of", "times", "it", "has", "been", "accessed", "?"], "guid": 8835}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Which employees do not destroy any document? Find their employee ids.", "sql": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "query_toks": ["SELECT", "employee_id", "FROM", "Employees", "EXCEPT", "SELECT", "Destroyed_by_Employee_ID", "FROM", "Documents_to_be_destroyed"], "query_toks_no_value": ["select", "employee_id", "from", "employees", "except", "select", "destroyed_by_employee_id", "from", "documents_to_be_destroyed"], "question": "Which employees do not destroy any document? Find their employee ids.", "question_toks": ["Which", "employees", "do", "not", "destroy", "any", "document", "?", "Find", "their", "employee", "ids", "."], "guid": 8836}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Return the budget type codes, budget type descriptions and document ids for documents with expenses.", "sql": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code", "query_toks": ["SELECT", "T2.budget_type_code", ",", "T2.budget_type_description", ",", "T1.document_id", "FROM", "Documents_with_expenses", "AS", "T1", "JOIN", "Ref_budget_codes", "AS", "T2", "ON", "T1.budget_type_code", "=", "T2.budget_type_code"], "query_toks_no_value": ["select", "t2", ".", "budget_type_code", ",", "t2", ".", "budget_type_description", ",", "t1", ".", "document_id", "from", "documents_with_expenses", "as", "t1", "join", "ref_budget_codes", "as", "t2", "on", "t1", ".", "budget_type_code", "=", "t2", ".", "budget_type_code"], "question": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.", "question_toks": ["Return", "the", "budget", "type", "codes", ",", "budget", "type", "descriptions", "and", "document", "ids", "for", "documents", "with", "expenses", "."], "guid": 8837}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Find the code of the document type \"Paper\".", "sql": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"", "query_toks": ["SELECT", "document_type_code", "FROM", "Ref_document_types", "WHERE", "document_type_name", "=", "``", "Paper", "''"], "query_toks_no_value": ["select", "document_type_code", "from", "ref_document_types", "where", "document_type_name", "=", "value"], "question": "Find the code of the document type \"Paper\".", "question_toks": ["Find", "the", "code", "of", "the", "document", "type", "``", "Paper", "''", "."], "guid": 8838}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Which status code is the most common of all the bookings?", "sql": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "Status_Code", "FROM", "BOOKINGS", "GROUP", "BY", "Status_Code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "status_code", "from", "bookings", "group", "by", "status_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which status code is the most common of all the bookings?", "question_toks": ["Which", "status", "code", "is", "the", "most", "common", "of", "all", "the", "bookings", "?"], "guid": 8839}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What is the document id and name with greatest number of paragraphs?", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.document_id", ",", "T2.document_name", "FROM", "Paragraphs", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "GROUP", "BY", "T1.document_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "document_id", ",", "t2", ".", "document_name", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "group", "by", "t1", ".", "document_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the document id and name with greatest number of paragraphs?", "question_toks": ["What", "is", "the", "document", "id", "and", "name", "with", "greatest", "number", "of", "paragraphs", "?"], "guid": 8840}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Return the type code of the document named \"David CV\".", "sql": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"", "example": {"db_id": "document_management", "query": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"", "query_toks": ["SELECT", "document_type_code", "FROM", "documents", "WHERE", "document_name", "=", "``", "David", "CV", "''"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "where", "document_name", "=", "value"], "question": "Return the type code of the document named \"David CV\".", "question_toks": ["Return", "the", "type", "code", "of", "the", "document", "named", "``", "David", "CV", "''", "."], "guid": 8841}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Count the number of paragraphs in the document named 'Summer Show'.", "sql": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Paragraphs", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_ID", "=", "T2.document_ID", "WHERE", "T2.document_name", "=", "'Summer", "Show", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "document_name", "=", "value"], "question": "Count the number of paragraphs in the document named 'Summer Show'.", "question_toks": ["Count", "the", "number", "of", "paragraphs", "in", "the", "document", "named", "'Summer", "Show", "'", "."], "guid": 8842}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Give the budget type code that is most common among documents with expenses.", "sql": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "budget_type_code", "FROM", "Documents_with_expenses", "GROUP", "BY", "budget_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "budget_type_code", "from", "documents_with_expenses", "group", "by", "budget_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Give the budget type code that is most common among documents with expenses.", "question_toks": ["Give", "the", "budget", "type", "code", "that", "is", "most", "common", "among", "documents", "with", "expenses", "."], "guid": 8843}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Count the number of accounts.", "sql": "SELECT count(*) FROM Accounts", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Accounts", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Accounts"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "accounts"], "question": "Count the number of accounts.", "question_toks": ["Count", "the", "number", "of", "accounts", "."], "guid": 8844}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | List document type codes and the number of documents in each code.", "sql": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_type_code ,  count(*) FROM Documents GROUP BY document_type_code", "query_toks": ["SELECT", "document_type_code", ",", "count", "(", "*", ")", "FROM", "Documents", "GROUP", "BY", "document_type_code"], "query_toks_no_value": ["select", "document_type_code", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "document_type_code"], "question": "List document type codes and the number of documents in each code.", "question_toks": ["List", "document", "type", "codes", "and", "the", "number", "of", "documents", "in", "each", "code", "."], "guid": 8845}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What is the template type code for template type description \"Book\".", "sql": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\"", "query_toks": ["SELECT", "template_type_code", "FROM", "Ref_template_types", "WHERE", "template_type_description", "=", "``", "Book", "''"], "query_toks_no_value": ["select", "template_type_code", "from", "ref_template_types", "where", "template_type_description", "=", "value"], "question": "What is the template type code for template type description \"Book\".", "question_toks": ["What", "is", "the", "template", "type", "code", "for", "template", "type", "description", "``", "Book", "''", "."], "guid": 8846}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the marketing region description of China?", "sql": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name  =  \"China\"", "query_toks": ["SELECT", "Marketing_Region_Descriptrion", "FROM", "Marketing_Regions", "WHERE", "Marketing_Region_Name", "=", "``", "China", "''"], "query_toks_no_value": ["select", "marketing_region_descriptrion", "from", "marketing_regions", "where", "marketing_region_name", "=", "value"], "question": "Find the marketing region description of China?", "question_toks": ["Find", "the", "marketing", "region", "description", "of", "China", "?"], "guid": 8847}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is the role with the smallest number of employees? Find the role codes.", "sql": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_code FROM Employees GROUP BY role_code ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "role_code", "FROM", "Employees", "GROUP", "BY", "role_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "role_code", "from", "employees", "group", "by", "role_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the role with the smallest number of employees? Find the role codes.", "question_toks": ["What", "is", "the", "role", "with", "the", "smallest", "number", "of", "employees", "?", "Find", "the", "role", "codes", "."], "guid": 8848}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | List all the username and passwords of users with the most popular role.", "sql": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "document_management", "query": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "user_name", ",", "password", "FROM", "users", "GROUP", "BY", "role_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "user_name", ",", "password", "from", "users", "group", "by", "role_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "List all the username and passwords of users with the most popular role.", "question_toks": ["List", "all", "the", "username", "and", "passwords", "of", "users", "with", "the", "most", "popular", "role", "."], "guid": 8849}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Return the name of the marketing region the store Rob Dinning is located in.", "sql": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code  =  T2.Marketing_Region_Code WHERE T2.Store_Name  =  \"Rob Dinning\"", "query_toks": ["SELECT", "T1.Marketing_Region_Name", "FROM", "Marketing_Regions", "AS", "T1", "JOIN", "Stores", "AS", "T2", "ON", "T1.Marketing_Region_Code", "=", "T2.Marketing_Region_Code", "WHERE", "T2.Store_Name", "=", "``", "Rob", "Dinning", "''"], "query_toks_no_value": ["select", "t1", ".", "marketing_region_name", "from", "marketing_regions", "as", "t1", "join", "stores", "as", "t2", "on", "t1", ".", "marketing_region_code", "=", "t2", ".", "marketing_region_code", "where", "t2", ".", "store_name", "=", "value"], "question": "Return the name of the marketing region the store Rob Dinning is located in.", "question_toks": ["Return", "the", "name", "of", "the", "marketing", "region", "the", "store", "Rob", "Dinning", "is", "located", "in", "."], "guid": 8850}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show the document type code with fewer than 3 documents.", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3", "query_toks": ["SELECT", "document_type_code", "FROM", "Documents", "GROUP", "BY", "document_type_code", "HAVING", "count", "(", "*", ")", "<", "3"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "group", "by", "document_type_code", "having", "count", "(", "*", ")", "<", "value"], "question": "Show the document type code with fewer than 3 documents.", "question_toks": ["Show", "the", "document", "type", "code", "with", "fewer", "than", "3", "documents", "."], "guid": 8851}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What is the average access count of documents that have the least common structure?", "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "document_management", "query": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "avg", "(", "access_count", ")", "FROM", "documents", "GROUP", "BY", "document_structure_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "avg", "(", "access_count", ")", "from", "documents", "group", "by", "document_structure_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the average access count of documents that have the least common structure?", "question_toks": ["What", "is", "the", "average", "access", "count", "of", "documents", "that", "have", "the", "least", "common", "structure", "?"], "guid": 8852}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Which city is the address of the store named \"FJA Filming\" located in?", "sql": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"", "query_toks": ["SELECT", "T1.City_Town", "FROM", "Addresses", "AS", "T1", "JOIN", "Stores", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID", "WHERE", "T2.Store_Name", "=", "``", "FJA", "Filming", "''"], "query_toks_no_value": ["select", "t1", ".", "city_town", "from", "addresses", "as", "t1", "join", "stores", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t2", ".", "store_name", "=", "value"], "question": "Which city is the address of the store named \"FJA Filming\" located in?", "question_toks": ["Which", "city", "is", "the", "address", "of", "the", "store", "named", "``", "FJA", "Filming", "''", "located", "in", "?"], "guid": 8853}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | List the document ids for any documents with the status code done and the type code paper.", "sql": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_id FROM Documents WHERE document_status_code = \"done\" AND document_type_code = \"Paper\";", "query_toks": ["SELECT", "document_id", "FROM", "Documents", "WHERE", "document_status_code", "=", "``", "done", "''", "AND", "document_type_code", "=", "``", "Paper", "''", ";"], "query_toks_no_value": ["select", "document_id", "from", "documents", "where", "document_status_code", "=", "value", "and", "document_type_code", "=", "value"], "question": "List the document ids for any documents with the status code done and the type code paper.", "question_toks": ["List", "the", "document", "ids", "for", "any", "documents", "with", "the", "status", "code", "done", "and", "the", "type", "code", "paper", "."], "guid": 8854}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Count the number of documents that use the PPT template type.", "sql": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Documents", "AS", "T1", "JOIN", "Templates", "AS", "T2", "ON", "T1.Template_ID", "=", "T2.Template_ID", "WHERE", "T2.Template_Type_Code", "=", "'PPT", "'"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1", ".", "template_id", "=", "t2", ".", "template_id", "where", "t2", ".", "template_type_code", "=", "value"], "question": "Count the number of documents that use the PPT template type.", "question_toks": ["Count", "the", "number", "of", "documents", "that", "use", "the", "PPT", "template", "type", "."], "guid": 8855}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show the budget type code and description and the corresponding document id.", "sql": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code", "query_toks": ["SELECT", "T2.budget_type_code", ",", "T2.budget_type_description", ",", "T1.document_id", "FROM", "Documents_with_expenses", "AS", "T1", "JOIN", "Ref_budget_codes", "AS", "T2", "ON", "T1.budget_type_code", "=", "T2.budget_type_code"], "query_toks_no_value": ["select", "t2", ".", "budget_type_code", ",", "t2", ".", "budget_type_description", ",", "t1", ".", "document_id", "from", "documents_with_expenses", "as", "t1", "join", "ref_budget_codes", "as", "t2", "on", "t1", ".", "budget_type_code", "=", "t2", ".", "budget_type_code"], "question": "Show the budget type code and description and the corresponding document id.", "question_toks": ["Show", "the", "budget", "type", "code", "and", "description", "and", "the", "corresponding", "document", "id", "."], "guid": 8856}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | How many different templates do all document use?", "sql": "SELECT count(DISTINCT template_id) FROM Documents", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT count(DISTINCT template_id) FROM Documents", "query_toks": ["SELECT", "count", "(", "DISTINCT", "template_id", ")", "FROM", "Documents"], "query_toks_no_value": ["select", "count", "(", "distinct", "template_id", ")", "from", "documents"], "question": "How many different templates do all document use?", "question_toks": ["How", "many", "different", "templates", "do", "all", "document", "use", "?"], "guid": 8857}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What are the codes of types of documents of which there are for or more?", "sql": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4", "example": {"db_id": "document_management", "query": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING count(*)  >  4", "query_toks": ["SELECT", "document_type_code", "FROM", "documents", "GROUP", "BY", "document_type_code", "HAVING", "count", "(", "*", ")", ">", "4"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "group", "by", "document_type_code", "having", "count", "(", "*", ")", ">", "value"], "question": "What are the codes of types of documents of which there are for or more?", "question_toks": ["What", "are", "the", "codes", "of", "types", "of", "documents", "of", "which", "there", "are", "for", "or", "more", "?"], "guid": 8858}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Show all the planned delivery dates and actual delivery dates of bookings.", "sql": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS", "query_toks": ["SELECT", "Planned_Delivery_Date", ",", "Actual_Delivery_Date", "FROM", "BOOKINGS"], "query_toks_no_value": ["select", "planned_delivery_date", ",", "actual_delivery_date", "from", "bookings"], "question": "Show all the planned delivery dates and actual delivery dates of bookings.", "question_toks": ["Show", "all", "the", "planned", "delivery", "dates", "and", "actual", "delivery", "dates", "of", "bookings", "."], "guid": 8859}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What is the document id with least number of paragraphs?", "sql": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "document_id", "FROM", "Paragraphs", "GROUP", "BY", "document_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "What is the document id with least number of paragraphs?", "question_toks": ["What", "is", "the", "document", "id", "with", "least", "number", "of", "paragraphs", "?"], "guid": 8860}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are all the role codes, role names, and role descriptions?", "sql": "SELECT role_code ,  role_name ,  role_description FROM ROLES", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_code ,  role_name ,  role_description FROM ROLES", "query_toks": ["SELECT", "role_code", ",", "role_name", ",", "role_description", "FROM", "ROLES"], "query_toks_no_value": ["select", "role_code", ",", "role_name", ",", "role_description", "from", "roles"], "question": "What are all the role codes, role names, and role descriptions?", "question_toks": ["What", "are", "all", "the", "role", "codes", ",", "role", "names", ",", "and", "role", "descriptions", "?"], "guid": 8861}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | What is the description of role code ED?", "sql": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT role_description FROM ROLES WHERE role_code = \"ED\";", "query_toks": ["SELECT", "role_description", "FROM", "ROLES", "WHERE", "role_code", "=", "``", "ED", "''", ";"], "query_toks_no_value": ["select", "role_description", "from", "roles", "where", "role_code", "=", "value"], "question": "What is the description of role code ED?", "question_toks": ["What", "is", "the", "description", "of", "role", "code", "ED", "?"], "guid": 8862}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Find the product names whose average product price is below 1000000.", "sql": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000", "query_toks": ["SELECT", "Product_Name", "FROM", "PRODUCTS", "GROUP", "BY", "Product_Name", "HAVING", "avg", "(", "Product_Price", ")", "<", "1000000"], "query_toks_no_value": ["select", "product_name", "from", "products", "group", "by", "product_name", "having", "avg", "(", "product_price", ")", "<", "value"], "question": "Find the product names whose average product price is below 1000000.", "question_toks": ["Find", "the", "product", "names", "whose", "average", "product", "price", "is", "below", "1000000", "."], "guid": 8863}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Give the section titles of the document with the name \"David CV\".", "sql": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"", "example": {"db_id": "document_management", "query": "SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code WHERE t1.document_name  =  \"David CV\"", "query_toks": ["SELECT", "t2.section_title", "FROM", "documents", "AS", "t1", "JOIN", "document_sections", "AS", "t2", "ON", "t1.document_code", "=", "t2.document_code", "WHERE", "t1.document_name", "=", "``", "David", "CV", "''"], "query_toks_no_value": ["select", "t2", ".", "section_title", "from", "documents", "as", "t1", "join", "document_sections", "as", "t2", "on", "t1", ".", "document_code", "=", "t2", ".", "document_code", "where", "t1", ".", "document_name", "=", "value"], "question": "Give the section titles of the document with the name \"David CV\".", "question_toks": ["Give", "the", "section", "titles", "of", "the", "document", "with", "the", "name", "``", "David", "CV", "''", "."], "guid": 8864}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the email addresses of the drama workshop groups with address in Alaska state?", "sql": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"", "query_toks": ["SELECT", "T2.Store_Email_Address", "FROM", "Addresses", "AS", "T1", "JOIN", "Drama_Workshop_Groups", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID", "WHERE", "T1.State_County", "=", "``", "Alaska", "''"], "query_toks_no_value": ["select", "t2", ".", "store_email_address", "from", "addresses", "as", "t1", "join", "drama_workshop_groups", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "state_county", "=", "value"], "question": "What are the email addresses of the drama workshop groups with address in Alaska state?", "question_toks": ["What", "are", "the", "email", "addresses", "of", "the", "drama", "workshop", "groups", "with", "address", "in", "Alaska", "state", "?"], "guid": 8865}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the codes of the locations with at least three documents?", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3", "query_toks": ["SELECT", "location_code", "FROM", "Document_locations", "GROUP", "BY", "location_code", "HAVING", "count", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "location_code", "from", "document_locations", "group", "by", "location_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "What are the codes of the locations with at least three documents?", "question_toks": ["What", "are", "the", "codes", "of", "the", "locations", "with", "at", "least", "three", "documents", "?"], "guid": 8866}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Find the code of the location with the largest number of documents.", "sql": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "location_code", "FROM", "Document_locations", "GROUP", "BY", "location_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "location_code", "from", "document_locations", "group", "by", "location_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the code of the location with the largest number of documents.", "question_toks": ["Find", "the", "code", "of", "the", "location", "with", "the", "largest", "number", "of", "documents", "."], "guid": 8867}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the ids of all employees who have destroyed a document.", "sql": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed", "query_toks": ["SELECT", "DISTINCT", "Destroyed_by_Employee_ID", "FROM", "Documents_to_be_destroyed"], "query_toks_no_value": ["select", "distinct", "destroyed_by_employee_id", "from", "documents_to_be_destroyed"], "question": "Show the ids of all employees who have destroyed a document.", "question_toks": ["Show", "the", "ids", "of", "all", "employees", "who", "have", "destroyed", "a", "document", "."], "guid": 8868}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are all the location codes and location names?", "sql": "SELECT location_code ,  location_name FROM Ref_locations", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_code ,  location_name FROM Ref_locations", "query_toks": ["SELECT", "location_code", ",", "location_name", "FROM", "Ref_locations"], "query_toks_no_value": ["select", "location_code", ",", "location_name", "from", "ref_locations"], "question": "What are all the location codes and location names?", "question_toks": ["What", "are", "all", "the", "location", "codes", "and", "location", "names", "?"], "guid": 8869}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the location name for document \"Robin CV\".", "sql": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"", "query_toks": ["SELECT", "T3.location_name", "FROM", "All_documents", "AS", "T1", "JOIN", "Document_locations", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "JOIN", "Ref_locations", "AS", "T3", "ON", "T2.location_code", "=", "T3.location_code", "WHERE", "T1.document_name", "=", "``", "Robin", "CV", "''"], "query_toks_no_value": ["select", "t3", ".", "location_name", "from", "all_documents", "as", "t1", "join", "document_locations", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "join", "ref_locations", "as", "t3", "on", "t2", ".", "location_code", "=", "t3", ".", "location_code", "where", "t1", ".", "document_name", "=", "value"], "question": "Show the location name for document \"Robin CV\".", "question_toks": ["Show", "the", "location", "name", "for", "document", "``", "Robin", "CV", "''", "."], "guid": 8870}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Find the average access count of documents with the least popular structure.", "sql": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1", "example": {"db_id": "document_management", "query": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1", "query_toks": ["SELECT", "avg", "(", "access_count", ")", "FROM", "documents", "GROUP", "BY", "document_structure_code", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"], "query_toks_no_value": ["select", "avg", "(", "access_count", ")", "from", "documents", "group", "by", "document_structure_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"], "question": "Find the average access count of documents with the least popular structure.", "question_toks": ["Find", "the", "average", "access", "count", "of", "documents", "with", "the", "least", "popular", "structure", "."], "guid": 8871}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\".", "sql": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"", "query_toks": ["SELECT", "avg", "(", "Order_Quantity", ")", "FROM", "Invoices", "WHERE", "payment_method_code", "=", "``", "MasterCard", "''"], "query_toks_no_value": ["select", "avg", "(", "order_quantity", ")", "from", "invoices", "where", "payment_method_code", "=", "value"], "question": "Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\".", "question_toks": ["Check", "the", "invoices", "record", "and", "compute", "the", "average", "quantities", "ordered", "with", "the", "payment", "method", "``", "MasterCard", "''", "."], "guid": 8872}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the phone and email for customer Harold?", "sql": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Customer_Phone ,  Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name  =  \"Harold\"", "query_toks": ["SELECT", "Customer_Phone", ",", "Customer_Email_Address", "FROM", "CUSTOMERS", "WHERE", "Customer_Name", "=", "``", "Harold", "''"], "query_toks_no_value": ["select", "customer_phone", ",", "customer_email_address", "from", "customers", "where", "customer_name", "=", "value"], "question": "What are the phone and email for customer Harold?", "question_toks": ["What", "are", "the", "phone", "and", "email", "for", "customer", "Harold", "?"], "guid": 8873}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | How many calendar items do we have?", "sql": "SELECT count(*) FROM Ref_calendar", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT count(*) FROM Ref_calendar", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Ref_calendar"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_calendar"], "question": "How many calendar items do we have?", "question_toks": ["How", "many", "calendar", "items", "do", "we", "have", "?"], "guid": 8874}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the location code of the country \"Canada\".", "sql": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_code FROM Ref_locations WHERE location_name  =  \"Canada\"", "query_toks": ["SELECT", "location_code", "FROM", "Ref_locations", "WHERE", "location_name", "=", "``", "Canada", "''"], "query_toks_no_value": ["select", "location_code", "from", "ref_locations", "where", "location_name", "=", "value"], "question": "Show the location code of the country \"Canada\".", "question_toks": ["Show", "the", "location", "code", "of", "the", "country", "``", "Canada", "''", "."], "guid": 8875}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the id and name of the document with the most paragraphs.", "sql": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "T1.document_id", ",", "T2.document_name", "FROM", "Paragraphs", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "GROUP", "BY", "T1.document_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "t1", ".", "document_id", ",", "t2", ".", "document_name", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "group", "by", "t1", ".", "document_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Return the id and name of the document with the most paragraphs.", "question_toks": ["Return", "the", "id", "and", "name", "of", "the", "document", "with", "the", "most", "paragraphs", "."], "guid": 8876}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | Which documents have more than 1 draft copies? List document id and number of draft copies.", "sql": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_id , count(*) FROM Draft_Copies GROUP BY document_id HAVING count(*)  >  1;", "query_toks": ["SELECT", "document_id", ",", "count", "(", "*", ")", "FROM", "Draft_Copies", "GROUP", "BY", "document_id", "HAVING", "count", "(", "*", ")", ">", "1", ";"], "query_toks_no_value": ["select", "document_id", ",", "count", "(", "*", ")", "from", "draft_copies", "group", "by", "document_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.", "question_toks": ["Which", "documents", "have", "more", "than", "1", "draft", "copies", "?", "List", "document", "id", "and", "number", "of", "draft", "copies", "."], "guid": 8877}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What is the total access count of documents that are of the most common document type?", "sql": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "document_management", "query": "SELECT sum(access_count) FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "sum", "(", "access_count", ")", "FROM", "documents", "GROUP", "BY", "document_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "sum", "(", "access_count", ")", "from", "documents", "group", "by", "document_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the total access count of documents that are of the most common document type?", "question_toks": ["What", "is", "the", "total", "access", "count", "of", "documents", "that", "are", "of", "the", "most", "common", "document", "type", "?"], "guid": 8878}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Which template type code has most number of templates?", "sql": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1", "query_toks": ["SELECT", "template_type_code", "FROM", "Templates", "GROUP", "BY", "template_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Which template type code has most number of templates?", "question_toks": ["Which", "template", "type", "code", "has", "most", "number", "of", "templates", "?"], "guid": 8879}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Show the document name and the document date for all documents on project with details 'Graph Database project'.", "sql": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'", "query_toks": ["SELECT", "document_name", ",", "document_date", "FROM", "Documents", "AS", "T1", "JOIN", "projects", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "WHERE", "T2.project_details", "=", "'Graph", "Database", "project", "'"], "query_toks_no_value": ["select", "document_name", ",", "document_date", "from", "documents", "as", "t1", "join", "projects", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "where", "t2", ".", "project_details", "=", "value"], "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'.", "question_toks": ["Show", "the", "document", "name", "and", "the", "document", "date", "for", "all", "documents", "on", "project", "with", "details", "'Graph", "Database", "project", "'", "."], "guid": 8880}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the ids and details of all accounts?", "sql": "SELECT account_id ,  account_details FROM Accounts", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT account_id ,  account_details FROM Accounts", "query_toks": ["SELECT", "account_id", ",", "account_details", "FROM", "Accounts"], "query_toks_no_value": ["select", "account_id", ",", "account_details", "from", "accounts"], "question": "What are the ids and details of all accounts?", "question_toks": ["What", "are", "the", "ids", "and", "details", "of", "all", "accounts", "?"], "guid": 8881}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the document ids for the budget type code 'SF'?", "sql": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'", "query_toks": ["SELECT", "document_id", "FROM", "Documents_with_expenses", "WHERE", "budget_type_code", "=", "'SF", "'"], "query_toks_no_value": ["select", "document_id", "from", "documents_with_expenses", "where", "budget_type_code", "=", "value"], "question": "What are the document ids for the budget type code 'SF'?", "question_toks": ["What", "are", "the", "document", "ids", "for", "the", "budget", "type", "code", "'SF", "'", "?"], "guid": 8882}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.", "sql": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";", "query_toks": ["SELECT", "document_id", "FROM", "Documents", "WHERE", "document_status_code", "=", "``", "done", "''", "AND", "document_type_code", "=", "``", "Paper", "''", "INTERSECT", "SELECT", "document_id", "FROM", "Documents", "JOIN", "Ref_Shipping_Agents", "ON", "Documents.shipping_agent_code", "=", "Ref_Shipping_Agents.shipping_agent_code", "WHERE", "Ref_Shipping_Agents.shipping_agent_name", "=", "``", "USPS", "''", ";"], "query_toks_no_value": ["select", "document_id", "from", "documents", "where", "document_status_code", "=", "value", "and", "document_type_code", "=", "value", "intersect", "select", "document_id", "from", "documents", "join", "ref_shipping_agents", "on", "documents.shipping_agent_code", "=", "ref_shipping_agents.shipping_agent_code", "where", "ref_shipping_agents.shipping_agent_name", "=", "value"], "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.", "question_toks": ["List", "document", "id", "of", "documents", "status", "is", "done", "and", "document", "type", "is", "Paper", "and", "the", "document", "is", "shipped", "by", "shipping", "agent", "named", "USPS", "."], "guid": 8883}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the store names of drama workshop groups?", "sql": "SELECT Store_Name FROM Drama_Workshop_Groups", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Store_Name FROM Drama_Workshop_Groups", "query_toks": ["SELECT", "Store_Name", "FROM", "Drama_Workshop_Groups"], "query_toks_no_value": ["select", "store_name", "from", "drama_workshop_groups"], "question": "What are the store names of drama workshop groups?", "question_toks": ["What", "are", "the", "store", "names", "of", "drama", "workshop", "groups", "?"], "guid": 8884}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What is the document id, template id and description for document named \"Robbin CV\"?", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "query_toks": ["SELECT", "document_id", ",", "template_id", ",", "Document_Description", "FROM", "Documents", "WHERE", "document_name", "=", "``", "Robbin", "CV", "''"], "query_toks_no_value": ["select", "document_id", ",", "template_id", ",", "document_description", "from", "documents", "where", "document_name", "=", "value"], "question": "What is the document id, template id and description for document named \"Robbin CV\"?", "question_toks": ["What", "is", "the", "document", "id", ",", "template", "id", "and", "description", "for", "document", "named", "``", "Robbin", "CV", "''", "?"], "guid": 8885}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What are the planned delivery date and actual delivery date for each booking?", "sql": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS", "query_toks": ["SELECT", "Planned_Delivery_Date", ",", "Actual_Delivery_Date", "FROM", "BOOKINGS"], "query_toks_no_value": ["select", "planned_delivery_date", ",", "actual_delivery_date", "from", "bookings"], "question": "What are the planned delivery date and actual delivery date for each booking?", "question_toks": ["What", "are", "the", "planned", "delivery", "date", "and", "actual", "delivery", "date", "for", "each", "booking", "?"], "guid": 8886}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "sql": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'", "query_toks": ["SELECT", "T1.paragraph_id", ",", "T1.paragraph_text", "FROM", "Paragraphs", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T2.Document_Name", "=", "'Welcome", "to", "NY", "'"], "query_toks_no_value": ["select", "t1", ".", "paragraph_id", ",", "t1", ".", "paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "document_name", "=", "value"], "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "question_toks": ["Show", "all", "paragraph", "ids", "and", "texts", "for", "the", "document", "with", "name", "'Welcome", "to", "NY", "'", "."], "guid": 8887}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | List the email addresses of the drama workshop groups located in Alaska state.", "sql": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"", "query_toks": ["SELECT", "T2.Store_Email_Address", "FROM", "Addresses", "AS", "T1", "JOIN", "Drama_Workshop_Groups", "AS", "T2", "ON", "T1.Address_ID", "=", "T2.Address_ID", "WHERE", "T1.State_County", "=", "``", "Alaska", "''"], "query_toks_no_value": ["select", "t2", ".", "store_email_address", "from", "addresses", "as", "t1", "join", "drama_workshop_groups", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "state_county", "=", "value"], "question": "List the email addresses of the drama workshop groups located in Alaska state.", "question_toks": ["List", "the", "email", "addresses", "of", "the", "drama", "workshop", "groups", "located", "in", "Alaska", "state", "."], "guid": 8888}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the description, code and the corresponding count of each service type?", "sql": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Service_Type_Description ,  T2.Service_Type_Code ,  COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T2.Service_Type_Code", "query_toks": ["SELECT", "T1.Service_Type_Description", ",", "T2.Service_Type_Code", ",", "COUNT", "(", "*", ")", "FROM", "Ref_Service_Types", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Service_Type_Code", "=", "T2.Service_Type_Code", "GROUP", "BY", "T2.Service_Type_Code"], "query_toks_no_value": ["select", "t1", ".", "service_type_description", ",", "t2", ".", "service_type_code", ",", "count", "(", "*", ")", "from", "ref_service_types", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "service_type_code", "=", "t2", ".", "service_type_code", "group", "by", "t2", ".", "service_type_code"], "question": "What is the description, code and the corresponding count of each service type?", "question_toks": ["What", "is", "the", "description", ",", "code", "and", "the", "corresponding", "count", "of", "each", "service", "type", "?"], "guid": 8889}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show all role codes and the number of employees in each role.", "sql": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_code ,  count(*) FROM Employees GROUP BY role_code", "query_toks": ["SELECT", "role_code", ",", "count", "(", "*", ")", "FROM", "Employees", "GROUP", "BY", "role_code"], "query_toks_no_value": ["select", "role_code", ",", "count", "(", "*", ")", "from", "employees", "group", "by", "role_code"], "question": "Show all role codes and the number of employees in each role.", "question_toks": ["Show", "all", "role", "codes", "and", "the", "number", "of", "employees", "in", "each", "role", "."], "guid": 8890}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | For each distinct product name, show its average product price.", "sql": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Product_Name ,  avg(Product_Price) FROM PRODUCTS GROUP BY Product_Name", "query_toks": ["SELECT", "Product_Name", ",", "avg", "(", "Product_Price", ")", "FROM", "PRODUCTS", "GROUP", "BY", "Product_Name"], "query_toks_no_value": ["select", "product_name", ",", "avg", "(", "product_price", ")", "from", "products", "group", "by", "product_name"], "question": "For each distinct product name, show its average product price.", "question_toks": ["For", "each", "distinct", "product", "name", ",", "show", "its", "average", "product", "price", "."], "guid": 8891}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the ids, names, and descriptions for all documents?", "sql": "SELECT document_id ,  document_name ,  document_description FROM Documents", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id ,  document_name ,  document_description FROM Documents", "query_toks": ["SELECT", "document_id", ",", "document_name", ",", "document_description", "FROM", "Documents"], "query_toks_no_value": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents"], "question": "What are the ids, names, and descriptions for all documents?", "question_toks": ["What", "are", "the", "ids", ",", "names", ",", "and", "descriptions", "for", "all", "documents", "?"], "guid": 8892}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Show all payment method codes and the number of orders for each code.", "sql": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code", "query_toks": ["SELECT", "payment_method_code", ",", "count", "(", "*", ")", "FROM", "INVOICES", "GROUP", "BY", "payment_method_code"], "query_toks_no_value": ["select", "payment_method_code", ",", "count", "(", "*", ")", "from", "invoices", "group", "by", "payment_method_code"], "question": "Show all payment method codes and the number of orders for each code.", "question_toks": ["Show", "all", "payment", "method", "codes", "and", "the", "number", "of", "orders", "for", "each", "code", "."], "guid": 8893}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the name, role code, and date of birth of the employee named 'Armani'?", "sql": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'", "query_toks": ["SELECT", "employee_name", ",", "role_code", ",", "date_of_birth", "FROM", "Employees", "WHERE", "employee_Name", "=", "'Armani", "'"], "query_toks_no_value": ["select", "employee_name", ",", "role_code", ",", "date_of_birth", "from", "employees", "where", "employee_name", "=", "value"], "question": "What are the name, role code, and date of birth of the employee named 'Armani'?", "question_toks": ["What", "are", "the", "name", ",", "role", "code", ",", "and", "date", "of", "birth", "of", "the", "employee", "named", "'Armani", "'", "?"], "guid": 8894}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show all role codes with at least 3 employees.", "sql": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT role_code FROM Employees GROUP BY role_code HAVING count(*)  >=  3", "query_toks": ["SELECT", "role_code", "FROM", "Employees", "GROUP", "BY", "role_code", "HAVING", "count", "(", "*", ")", ">", "=", "3"], "query_toks_no_value": ["select", "role_code", "from", "employees", "group", "by", "role_code", "having", "count", "(", "*", ")", ">", "=", "value"], "question": "Show all role codes with at least 3 employees.", "question_toks": ["Show", "all", "role", "codes", "with", "at", "least", "3", "employees", "."], "guid": 8895}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What is the type of the document named \"David CV\"?", "sql": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"", "example": {"db_id": "document_management", "query": "SELECT document_type_code FROM documents WHERE document_name  =  \"David CV\"", "query_toks": ["SELECT", "document_type_code", "FROM", "documents", "WHERE", "document_name", "=", "``", "David", "CV", "''"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "where", "document_name", "=", "value"], "question": "What is the type of the document named \"David CV\"?", "question_toks": ["What", "is", "the", "type", "of", "the", "document", "named", "``", "David", "CV", "''", "?"], "guid": 8896}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | Return the ids and details corresponding to projects for which there are more than two documents.", "sql": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2", "query_toks": ["SELECT", "T1.project_id", ",", "T1.project_details", "FROM", "Projects", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "GROUP", "BY", "T1.project_id", "HAVING", "count", "(", "*", ")", ">", "2"], "query_toks_no_value": ["select", "t1", ".", "project_id", ",", "t1", ".", "project_details", "from", "projects", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "group", "by", "t1", ".", "project_id", "having", "count", "(", "*", ")", ">", "value"], "question": "Return the ids and details corresponding to projects for which there are more than two documents.", "question_toks": ["Return", "the", "ids", "and", "details", "corresponding", "to", "projects", "for", "which", "there", "are", "more", "than", "two", "documents", "."], "guid": 8897}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the ids of templates that have the code PP or PPT.", "sql": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\"", "query_toks": ["SELECT", "template_id", "FROM", "Templates", "WHERE", "template_type_code", "=", "``", "PP", "''", "OR", "template_type_code", "=", "``", "PPT", "''"], "query_toks_no_value": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "value", "or", "template_type_code", "=", "value"], "question": "Return the ids of templates that have the code PP or PPT.", "question_toks": ["Return", "the", "ids", "of", "templates", "that", "have", "the", "code", "PP", "or", "PPT", "."], "guid": 8898}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Find the number of users in each role.", "sql": "SELECT count(*) ,  role_code FROM users GROUP BY role_code", "example": {"db_id": "document_management", "query": "SELECT count(*) ,  role_code FROM users GROUP BY role_code", "query_toks": ["SELECT", "count", "(", "*", ")", ",", "role_code", "FROM", "users", "GROUP", "BY", "role_code"], "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "role_code", "from", "users", "group", "by", "role_code"], "question": "Find the number of users in each role.", "question_toks": ["Find", "the", "number", "of", "users", "in", "each", "role", "."], "guid": 8899}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show all calendar dates and day Numbers.", "sql": "SELECT calendar_date ,  day_Number FROM Ref_calendar", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT calendar_date ,  day_Number FROM Ref_calendar", "query_toks": ["SELECT", "calendar_date", ",", "day_Number", "FROM", "Ref_calendar"], "query_toks_no_value": ["select", "calendar_date", ",", "day_number", "from", "ref_calendar"], "question": "Show all calendar dates and day Numbers.", "question_toks": ["Show", "all", "calendar", "dates", "and", "day", "Numbers", "."], "guid": 8900}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | What is the product ID of the most frequently ordered item on invoices?", "sql": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1", "query_toks": ["SELECT", "Product_ID", "FROM", "INVOICES", "GROUP", "BY", "Product_ID", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"], "query_toks_no_value": ["select", "product_id", "from", "invoices", "group", "by", "product_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "What is the product ID of the most frequently ordered item on invoices?", "question_toks": ["What", "is", "the", "product", "ID", "of", "the", "most", "frequently", "ordered", "item", "on", "invoices", "?"], "guid": 8901}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the statement ids, statement details, and account details, for all accounts?", "sql": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id", "query_toks": ["SELECT", "T1.statement_id", ",", "T2.statement_details", ",", "T1.account_details", "FROM", "Accounts", "AS", "T1", "JOIN", "Statements", "AS", "T2", "ON", "T1.statement_id", "=", "T2.statement_id"], "query_toks_no_value": ["select", "t1", ".", "statement_id", ",", "t2", ".", "statement_details", ",", "t1", ".", "account_details", "from", "accounts", "as", "t1", "join", "statements", "as", "t2", "on", "t1", ".", "statement_id", "=", "t2", ".", "statement_id"], "question": "What are the statement ids, statement details, and account details, for all accounts?", "question_toks": ["What", "are", "the", "statement", "ids", ",", "statement", "details", ",", "and", "account", "details", ",", "for", "all", "accounts", "?"], "guid": 8902}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | How many accounts do we have?", "sql": "SELECT count(*) FROM Accounts", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT count(*) FROM Accounts", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Accounts"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "accounts"], "question": "How many accounts do we have?", "question_toks": ["How", "many", "accounts", "do", "we", "have", "?"], "guid": 8903}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | List ids and details for all projects.", "sql": "SELECT project_id ,  project_details FROM Projects", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT project_id ,  project_details FROM Projects", "query_toks": ["SELECT", "project_id", ",", "project_details", "FROM", "Projects"], "query_toks_no_value": ["select", "project_id", ",", "project_details", "from", "projects"], "question": "List ids and details for all projects.", "question_toks": ["List", "ids", "and", "details", "for", "all", "projects", "."], "guid": 8904}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are each document's location code, and starting date and ending data in that location?", "sql": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations", "query_toks": ["SELECT", "location_code", ",", "date_in_location_from", ",", "date_in_locaton_to", "FROM", "Document_locations"], "query_toks_no_value": ["select", "location_code", ",", "date_in_location_from", ",", "date_in_locaton_to", "from", "document_locations"], "question": "What are each document's location code, and starting date and ending data in that location?", "question_toks": ["What", "are", "each", "document", "'s", "location", "code", ",", "and", "starting", "date", "and", "ending", "data", "in", "that", "location", "?"], "guid": 8905}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Show me the distinct payment method codes from the invoice record.", "sql": "SELECT DISTINCT payment_method_code FROM INVOICES", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT DISTINCT payment_method_code FROM INVOICES", "query_toks": ["SELECT", "DISTINCT", "payment_method_code", "FROM", "INVOICES"], "query_toks_no_value": ["select", "distinct", "payment_method_code", "from", "invoices"], "question": "Show me the distinct payment method codes from the invoice record.", "question_toks": ["Show", "me", "the", "distinct", "payment", "method", "codes", "from", "the", "invoice", "record", "."], "guid": 8906}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | How many employees does each role have? List role description, id and number of employees.", "sql": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code;", "query_toks": ["SELECT", "T1.role_description", ",", "T2.role_code", ",", "count", "(", "*", ")", "FROM", "ROLES", "AS", "T1", "JOIN", "Employees", "AS", "T2", "ON", "T1.role_code", "=", "T2.role_code", "GROUP", "BY", "T2.role_code", ";"], "query_toks_no_value": ["select", "t1", ".", "role_description", ",", "t2", ".", "role_code", ",", "count", "(", "*", ")", "from", "roles", "as", "t1", "join", "employees", "as", "t2", "on", "t1", ".", "role_code", "=", "t2", ".", "role_code", "group", "by", "t2", ".", "role_code"], "question": "How many employees does each role have? List role description, id and number of employees.", "question_toks": ["How", "many", "employees", "does", "each", "role", "have", "?", "List", "role", "description", ",", "id", "and", "number", "of", "employees", "."], "guid": 8907}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What is the project detail for the project with document \"King Book\"?", "sql": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id WHERE T2.document_name  =  \"King Book\"", "query_toks": ["SELECT", "T1.project_details", "FROM", "Projects", "AS", "T1", "JOIN", "Documents", "AS", "T2", "ON", "T1.project_id", "=", "T2.project_id", "WHERE", "T2.document_name", "=", "``", "King", "Book", "''"], "query_toks_no_value": ["select", "t1", ".", "project_details", "from", "projects", "as", "t1", "join", "documents", "as", "t2", "on", "t1", ".", "project_id", "=", "t2", ".", "project_id", "where", "t2", ".", "document_name", "=", "value"], "question": "What is the project detail for the project with document \"King Book\"?", "question_toks": ["What", "is", "the", "project", "detail", "for", "the", "project", "with", "document", "``", "King", "Book", "''", "?"], "guid": 8908}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | What are the names of documents that contain the substring \"CV\"?", "sql": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"", "example": {"db_id": "document_management", "query": "SELECT document_name FROM documents WHERE document_name LIKE \"%CV%\"", "query_toks": ["SELECT", "document_name", "FROM", "documents", "WHERE", "document_name", "LIKE", "``", "%", "CV", "%", "''"], "query_toks_no_value": ["select", "document_name", "from", "documents", "where", "document_name", "like", "value"], "question": "What are the names of documents that contain the substring \"CV\"?", "question_toks": ["What", "are", "the", "names", "of", "documents", "that", "contain", "the", "substring", "``", "CV", "''", "?"], "guid": 8909}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Find the list of documents that are both in the most three popular type and have the most three popular structure.", "sql": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3", "example": {"db_id": "document_management", "query": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3", "query_toks": ["SELECT", "document_name", "FROM", "documents", "GROUP", "BY", "document_type_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3", "INTERSECT", "SELECT", "document_name", "FROM", "documents", "GROUP", "BY", "document_structure_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"], "query_toks_no_value": ["select", "document_name", "from", "documents", "group", "by", "document_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", "intersect", "select", "document_name", "from", "documents", "group", "by", "document_structure_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"], "question": "Find the list of documents that are both in the most three popular type and have the most three popular structure.", "question_toks": ["Find", "the", "list", "of", "documents", "that", "are", "both", "in", "the", "most", "three", "popular", "type", "and", "have", "the", "most", "three", "popular", "structure", "."], "guid": 8910}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | Show the number of documents with document type code CV or BK.", "sql": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "All_documents", "WHERE", "document_type_code", "=", "``", "CV", "''", "OR", "document_type_code", "=", "``", "BK", "''"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "all_documents", "where", "document_type_code", "=", "value", "or", "document_type_code", "=", "value"], "question": "Show the number of documents with document type code CV or BK.", "question_toks": ["Show", "the", "number", "of", "documents", "with", "document", "type", "code", "CV", "or", "BK", "."], "guid": 8911}}
{"text": "Ref_Payment_Methods: payment_method_code, payment_method_description; Ref_Service_Types: Service_Type_Code, Parent_Service_Type_Code, Service_Type_Description; Addresses: Address_ID, Line_1, Line_2, City_Town, State_County, Other_Details; Products: Product_ID, Product_Name, Product_Price, Product_Description, Other_Product_Service_Details; Marketing_Regions: Marketing_Region_Code, Marketing_Region_Name, Marketing_Region_Descriptrion, Other_Details; Clients: Client_ID, Address_ID, Customer_Email_Address, Customer_Name, Customer_Phone, Other_Details; Drama_Workshop_Groups: Workshop_Group_ID, Address_ID, Currency_Code, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details; Performers: Performer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Customers: Customer_ID, Address_ID, Customer_Name, Customer_Phone, Customer_Email_Address, Other_Details; Stores: Store_ID, Address_ID, Marketing_Region_Code, Store_Name, Store_Phone, Store_Email_Address, Other_Details | Give me all the phone numbers and email addresses of the workshop groups where services are performed.", "sql": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID", "example": {"db_id": "cre_Drama_Workshop_Groups", "query": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID", "query_toks": ["SELECT", "T1.Store_Phone", ",", "T1.Store_Email_Address", "FROM", "Drama_Workshop_Groups", "AS", "T1", "JOIN", "Services", "AS", "T2", "ON", "T1.Workshop_Group_ID", "=", "T2.Workshop_Group_ID"], "query_toks_no_value": ["select", "t1", ".", "store_phone", ",", "t1", ".", "store_email_address", "from", "drama_workshop_groups", "as", "t1", "join", "services", "as", "t2", "on", "t1", ".", "workshop_group_id", "=", "t2", ".", "workshop_group_id"], "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.", "question_toks": ["Give", "me", "all", "the", "phone", "numbers", "and", "email", "addresses", "of", "the", "workshop", "groups", "where", "services", "are", "performed", "."], "guid": 8912}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the codes corresponding to document types for which there are less than 3 documents?", "sql": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING count(*)  <  3", "query_toks": ["SELECT", "document_type_code", "FROM", "Documents", "GROUP", "BY", "document_type_code", "HAVING", "count", "(", "*", ")", "<", "3"], "query_toks_no_value": ["select", "document_type_code", "from", "documents", "group", "by", "document_type_code", "having", "count", "(", "*", ")", "<", "value"], "question": "What are the codes corresponding to document types for which there are less than 3 documents?", "question_toks": ["What", "are", "the", "codes", "corresponding", "to", "document", "types", "for", "which", "there", "are", "less", "than", "3", "documents", "?"], "guid": 8913}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "sql": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'", "query_toks": ["SELECT", "document_id", "FROM", "Paragraphs", "WHERE", "paragraph_text", "=", "'Brazil", "'", "INTERSECT", "SELECT", "document_id", "FROM", "Paragraphs", "WHERE", "paragraph_text", "=", "'Ireland", "'"], "query_toks_no_value": ["select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "value", "intersect", "select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "value"], "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "question_toks": ["What", "are", "the", "ids", "of", "documents", "that", "contain", "the", "paragraph", "text", "'Brazil", "'", "and", "'Ireland", "'", "?"], "guid": 8914}}
{"text": "Roles: role_code, role_description; Users: user_id, role_code, user_name, user_login, password; Document_Structures: document_structure_code, parent_document_structure_code, document_structure_description; Functional_Areas: functional_area_code, parent_functional_area_code, functional_area_description; Images: image_id, image_alt_text, image_name, image_url; Documents: document_code, document_structure_code, document_type_code, access_count, document_name; Document_Functional_Areas: document_code, functional_area_code; Document_Sections: section_id, document_code, section_sequence, section_code, section_title; Document_Sections_Images: section_id, image_id | Find the average access count across all documents?", "sql": "SELECT avg(access_count) FROM documents", "example": {"db_id": "document_management", "query": "SELECT avg(access_count) FROM documents", "query_toks": ["SELECT", "avg", "(", "access_count", ")", "FROM", "documents"], "query_toks_no_value": ["select", "avg", "(", "access_count", ")", "from", "documents"], "question": "Find the average access count across all documents?", "question_toks": ["Find", "the", "average", "access", "count", "across", "all", "documents", "?"], "guid": 8915}}
{"text": "Ref_Document_Types: document_type_code, document_type_description; Roles: role_code, role_description; Addresses: address_id, address_details; Ref_Document_Status: document_status_code, document_status_description; Ref_Shipping_Agents: shipping_agent_code, shipping_agent_name, shipping_agent_description; Documents: document_id, document_status_code, document_type_code, shipping_agent_code, receipt_date, receipt_number, other_details; Employees: employee_id, role_code, employee_name, other_details; Document_Drafts: document_id, draft_number, draft_details; Draft_Copies: document_id, draft_number, copy_number; Circulation_History: document_id, draft_number, copy_number, employee_id | How many documents were shipped by USPS?", "sql": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";", "example": {"db_id": "cre_Doc_Control_Systems", "query": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\";", "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Ref_Shipping_Agents", "JOIN", "Documents", "ON", "Documents.shipping_agent_code", "=", "Ref_Shipping_Agents.shipping_agent_code", "WHERE", "Ref_Shipping_Agents.shipping_agent_name", "=", "``", "USPS", "''", ";"], "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "ref_shipping_agents", "join", "documents", "on", "documents.shipping_agent_code", "=", "ref_shipping_agents.shipping_agent_code", "where", "ref_shipping_agents.shipping_agent_name", "=", "value"], "question": "How many documents were shipped by USPS?", "question_toks": ["How", "many", "documents", "were", "shipped", "by", "USPS", "?"], "guid": 8916}}
{"text": "Ref_Template_Types: Template_Type_Code, Template_Type_Description; Templates: Template_ID, Version_Number, Template_Type_Code, Date_Effective_From, Date_Effective_To, Template_Details; Documents: Document_ID, Template_ID, Document_Name, Document_Description, Other_Details; Paragraphs: Paragraph_ID, Document_ID, Paragraph_Text, Other_Details | Return the document id, template id, and description for the document with the name Robbin CV.", "sql": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "example": {"db_id": "cre_Doc_Template_Mgt", "query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\"", "query_toks": ["SELECT", "document_id", ",", "template_id", ",", "Document_Description", "FROM", "Documents", "WHERE", "document_name", "=", "``", "Robbin", "CV", "''"], "query_toks_no_value": ["select", "document_id", ",", "template_id", ",", "document_description", "from", "documents", "where", "document_name", "=", "value"], "question": "Return the document id, template id, and description for the document with the name Robbin CV.", "question_toks": ["Return", "the", "document", "id", ",", "template", "id", ",", "and", "description", "for", "the", "document", "with", "the", "name", "Robbin", "CV", "."], "guid": 8917}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What are the name and description for location code x?", "sql": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT location_name ,  location_description FROM Ref_locations WHERE location_code  =  \"x\"", "query_toks": ["SELECT", "location_name", ",", "location_description", "FROM", "Ref_locations", "WHERE", "location_code", "=", "``", "x", "''"], "query_toks_no_value": ["select", "location_name", ",", "location_description", "from", "ref_locations", "where", "location_code", "=", "value"], "question": "What are the name and description for location code x?", "question_toks": ["What", "are", "the", "name", "and", "description", "for", "location", "code", "x", "?"], "guid": 8918}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Calendar: Calendar_Date, Day_Number; Ref_Locations: Location_Code, Location_Name, Location_Description; Roles: Role_Code, Role_Name, Role_Description; All_Documents: Document_ID, Date_Stored, Document_Type_Code, Document_Name, Document_Description, Other_Details; Employees: Employee_ID, Role_Code, Employee_Name, Gender_MFU, Date_of_Birth, Other_Details; Document_Locations: Document_ID, Location_Code, Date_in_Location_From, Date_in_Locaton_To; Documents_to_be_Destroyed: Document_ID, Destruction_Authorised_by_Employee_ID, Destroyed_by_Employee_ID, Planned_Destruction_Date, Actual_Destruction_Date, Other_Details | What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?", "sql": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"", "example": {"db_id": "cre_Doc_Tracking_DB", "query": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"", "query_toks": ["SELECT", "T1.date_in_location_from", ",", "T1.date_in_locaton_to", "FROM", "Document_locations", "AS", "T1", "JOIN", "All_documents", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T2.document_name", "=", "``", "Robin", "CV", "''"], "query_toks_no_value": ["select", "t1", ".", "date_in_location_from", ",", "t1", ".", "date_in_locaton_to", "from", "document_locations", "as", "t1", "join", "all_documents", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t2", ".", "document_name", "=", "value"], "question": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?", "question_toks": ["What", "is", "``", "the", "date", "in", "location", "from", "''", "and", "``", "the", "date", "in", "location", "to", "''", "for", "the", "document", "with", "name", "``", "Robin", "CV", "''", "?"], "guid": 8919}}
{"text": "Ref_Document_Types: Document_Type_Code, Document_Type_Name, Document_Type_Description; Ref_Budget_Codes: Budget_Type_Code, Budget_Type_Description; Projects: Project_ID, Project_Details; Documents: Document_ID, Document_Type_Code, Project_ID, Document_Date, Document_Name, Document_Description, Other_Details; Statements: Statement_ID, Statement_Details; Documents_with_Expenses: Document_ID, Budget_Type_Code, Document_Details; Accounts: Account_ID, Statement_ID, Account_Details | What are the ids of documents with letter 's' in the name with any expense budgets.", "sql": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'", "example": {"db_id": "cre_Docs_and_Epenses", "query": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'", "query_toks": ["SELECT", "T1.document_id", "FROM", "Documents", "AS", "T1", "JOIN", "Documents_with_expenses", "AS", "T2", "ON", "T1.document_id", "=", "T2.document_id", "WHERE", "T1.document_name", "LIKE", "'", "%", "s", "%", "'"], "query_toks_no_value": ["select", "t1", ".", "document_id", "from", "documents", "as", "t1", "join", "documents_with_expenses", "as", "t2", "on", "t1", ".", "document_id", "=", "t2", ".", "document_id", "where", "t1", ".", "document_name", "like", "value"], "question": "What are the ids of documents with letter 's' in the name with any expense budgets.", "question_toks": ["What", "are", "the", "ids", "of", "documents", "with", "letter", "'s", "'", "in", "the", "name", "with", "any", "expense", "budgets", "."], "guid": 8920}}